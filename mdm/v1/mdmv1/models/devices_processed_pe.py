# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DevicesProcessedPE(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'organization_group': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'devices_processed': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'organization_group': 'OrganizationGroup',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'devices_processed': 'DevicesProcessed'
    }

    def __init__(self, id=None, organization_group=None, start_date=None, end_date=None, devices_processed=None, _configuration=None):  # noqa: E501
        """DevicesProcessedPE - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._organization_group = None
        self._start_date = None
        self._end_date = None
        self._devices_processed = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if organization_group is not None:
            self.organization_group = organization_group
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if devices_processed is not None:
            self.devices_processed = devices_processed

    @property
    def id(self):
        """Gets the id of this DevicesProcessedPE.  # noqa: E501

        Gets or sets organization Group ID.  # noqa: E501

        :return: The id of this DevicesProcessedPE.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DevicesProcessedPE.

        Gets or sets organization Group ID.  # noqa: E501

        :param id: The id of this DevicesProcessedPE.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def organization_group(self):
        """Gets the organization_group of this DevicesProcessedPE.  # noqa: E501

        Gets or sets name of Organization Group.  # noqa: E501

        :return: The organization_group of this DevicesProcessedPE.  # noqa: E501
        :rtype: str
        """
        return self._organization_group

    @organization_group.setter
    def organization_group(self, organization_group):
        """Sets the organization_group of this DevicesProcessedPE.

        Gets or sets name of Organization Group.  # noqa: E501

        :param organization_group: The organization_group of this DevicesProcessedPE.  # noqa: E501
        :type: str
        """

        self._organization_group = organization_group

    @property
    def start_date(self):
        """Gets the start_date of this DevicesProcessedPE.  # noqa: E501

        Gets or sets start date time.  # noqa: E501

        :return: The start_date of this DevicesProcessedPE.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DevicesProcessedPE.

        Gets or sets start date time.  # noqa: E501

        :param start_date: The start_date of this DevicesProcessedPE.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this DevicesProcessedPE.  # noqa: E501

        Gets or sets end date time.  # noqa: E501

        :return: The end_date of this DevicesProcessedPE.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DevicesProcessedPE.

        Gets or sets end date time.  # noqa: E501

        :param end_date: The end_date of this DevicesProcessedPE.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def devices_processed(self):
        """Gets the devices_processed of this DevicesProcessedPE.  # noqa: E501

        Gets or sets number of devices processed.  # noqa: E501

        :return: The devices_processed of this DevicesProcessedPE.  # noqa: E501
        :rtype: str
        """
        return self._devices_processed

    @devices_processed.setter
    def devices_processed(self, devices_processed):
        """Sets the devices_processed of this DevicesProcessedPE.

        Gets or sets number of devices processed.  # noqa: E501

        :param devices_processed: The devices_processed of this DevicesProcessedPE.  # noqa: E501
        :type: str
        """

        self._devices_processed = devices_processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DevicesProcessedPE, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DevicesProcessedPE):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DevicesProcessedPE):
            return True

        return self.to_dict() != other.to_dict()
