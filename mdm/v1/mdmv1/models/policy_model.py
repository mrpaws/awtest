# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class PolicyModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'uuid': 'str',
        'name': 'str',
        'path': 'str',
        '_class': 'str',
        'class_name': 'str',
        'explanation': 'str',
        'status': 'int',
        'available_states': 'list[str]',
        'layout': 'list[BaseElementModel]'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'name': 'name',
        'path': 'path',
        '_class': 'class',
        'class_name': 'className',
        'explanation': 'explanation',
        'status': 'status',
        'available_states': 'availableStates',
        'layout': 'layout'
    }

    def __init__(self, id=None, uuid=None, name=None, path=None, _class=None, class_name=None, explanation=None, status=None, available_states=None, layout=None, _configuration=None):  # noqa: E501
        """PolicyModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._uuid = None
        self._name = None
        self._path = None
        self.__class = None
        self._class_name = None
        self._explanation = None
        self._status = None
        self._available_states = None
        self._layout = None
        self.discriminator = None

        self.id = id
        self.uuid = uuid
        self.name = name
        if path is not None:
            self.path = path
        if _class is not None:
            self._class = _class
        if class_name is not None:
            self.class_name = class_name
        if explanation is not None:
            self.explanation = explanation
        if status is not None:
            self.status = status
        if available_states is not None:
            self.available_states = available_states
        if layout is not None:
            self.layout = layout

    @property
    def id(self):
        """Gets the id of this PolicyModel.  # noqa: E501

          # noqa: E501

        :return: The id of this PolicyModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyModel.

          # noqa: E501

        :param id: The id of this PolicyModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this PolicyModel.  # noqa: E501

        Unique identifier of the policy  # noqa: E501

        :return: The uuid of this PolicyModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PolicyModel.

        Unique identifier of the policy  # noqa: E501

        :param uuid: The uuid of this PolicyModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this PolicyModel.  # noqa: E501

        Name of the policy  # noqa: E501

        :return: The name of this PolicyModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyModel.

        Name of the policy  # noqa: E501

        :param name: The name of this PolicyModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this PolicyModel.  # noqa: E501

        The path to the policy  # noqa: E501

        :return: The path of this PolicyModel.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PolicyModel.

        The path to the policy  # noqa: E501

        :param path: The path of this PolicyModel.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def _class(self):
        """Gets the _class of this PolicyModel.  # noqa: E501

        The classification of the policy (Machine/User/Both)  # noqa: E501

        :return: The _class of this PolicyModel.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this PolicyModel.

        The classification of the policy (Machine/User/Both)  # noqa: E501

        :param _class: The _class of this PolicyModel.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def class_name(self):
        """Gets the class_name of this PolicyModel.  # noqa: E501

        The classification of the policy (Machine/User/Both)  # noqa: E501

        :return: The class_name of this PolicyModel.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this PolicyModel.

        The classification of the policy (Machine/User/Both)  # noqa: E501

        :param class_name: The class_name of this PolicyModel.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def explanation(self):
        """Gets the explanation of this PolicyModel.  # noqa: E501

        Help text associated with the policy  # noqa: E501

        :return: The explanation of this PolicyModel.  # noqa: E501
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this PolicyModel.

        Help text associated with the policy  # noqa: E501

        :param explanation: The explanation of this PolicyModel.  # noqa: E501
        :type: str
        """

        self._explanation = explanation

    @property
    def status(self):
        """Gets the status of this PolicyModel.  # noqa: E501

        policy state  # noqa: E501

        :return: The status of this PolicyModel.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PolicyModel.

        policy state  # noqa: E501

        :param status: The status of this PolicyModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def available_states(self):
        """Gets the available_states of this PolicyModel.  # noqa: E501

        The allowed states for this policy  # noqa: E501

        :return: The available_states of this PolicyModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_states

    @available_states.setter
    def available_states(self, available_states):
        """Sets the available_states of this PolicyModel.

        The allowed states for this policy  # noqa: E501

        :param available_states: The available_states of this PolicyModel.  # noqa: E501
        :type: list[str]
        """

        self._available_states = available_states

    @property
    def layout(self):
        """Gets the layout of this PolicyModel.  # noqa: E501

        The policy options  # noqa: E501

        :return: The layout of this PolicyModel.  # noqa: E501
        :rtype: list[BaseElementModel]
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this PolicyModel.

        The policy options  # noqa: E501

        :param layout: The layout of this PolicyModel.  # noqa: E501
        :type: list[BaseElementModel]
        """

        self._layout = layout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicyModel):
            return True

        return self.to_dict() != other.to_dict()
