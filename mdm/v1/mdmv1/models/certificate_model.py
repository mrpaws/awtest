# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class CertificateModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'thumbprint': 'str',
        'subject_name': 'str',
        'not_before': 'datetime',
        'not_after': 'datetime',
        'certificate_guid': 'str',
        'password': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'thumbprint': 'thumbprint',
        'subject_name': 'subjectName',
        'not_before': 'notBefore',
        'not_after': 'notAfter',
        'certificate_guid': 'certificateGuid',
        'password': 'password'
    }

    def __init__(self, id=None, thumbprint=None, subject_name=None, not_before=None, not_after=None, certificate_guid=None, password=None, _configuration=None):  # noqa: E501
        """CertificateModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._thumbprint = None
        self._subject_name = None
        self._not_before = None
        self._not_after = None
        self._certificate_guid = None
        self._password = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if thumbprint is not None:
            self.thumbprint = thumbprint
        if subject_name is not None:
            self.subject_name = subject_name
        if not_before is not None:
            self.not_before = not_before
        if not_after is not None:
            self.not_after = not_after
        if certificate_guid is not None:
            self.certificate_guid = certificate_guid
        if password is not None:
            self.password = password

    @property
    def id(self):
        """Gets the id of this CertificateModel.  # noqa: E501

        ID of the certificate  # noqa: E501

        :return: The id of this CertificateModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CertificateModel.

        ID of the certificate  # noqa: E501

        :param id: The id of this CertificateModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateModel.  # noqa: E501

        The certificate Thumbprint  # noqa: E501

        :return: The thumbprint of this CertificateModel.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateModel.

        The certificate Thumbprint  # noqa: E501

        :param thumbprint: The thumbprint of this CertificateModel.  # noqa: E501
        :type: str
        """

        self._thumbprint = thumbprint

    @property
    def subject_name(self):
        """Gets the subject_name of this CertificateModel.  # noqa: E501

        Gets or sets the Subject Name  # noqa: E501

        :return: The subject_name of this CertificateModel.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this CertificateModel.

        Gets or sets the Subject Name  # noqa: E501

        :param subject_name: The subject_name of this CertificateModel.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def not_before(self):
        """Gets the not_before of this CertificateModel.  # noqa: E501

        Gets or sets the NotBefore Date  # noqa: E501

        :return: The not_before of this CertificateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificateModel.

        Gets or sets the NotBefore Date  # noqa: E501

        :param not_before: The not_before of this CertificateModel.  # noqa: E501
        :type: datetime
        """

        self._not_before = not_before

    @property
    def not_after(self):
        """Gets the not_after of this CertificateModel.  # noqa: E501

        Gets or sets the NotAfter Date  # noqa: E501

        :return: The not_after of this CertificateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificateModel.

        Gets or sets the NotAfter Date  # noqa: E501

        :param not_after: The not_after of this CertificateModel.  # noqa: E501
        :type: datetime
        """

        self._not_after = not_after

    @property
    def certificate_guid(self):
        """Gets the certificate_guid of this CertificateModel.  # noqa: E501

        Gets or sets the CertificateGuid  # noqa: E501

        :return: The certificate_guid of this CertificateModel.  # noqa: E501
        :rtype: str
        """
        return self._certificate_guid

    @certificate_guid.setter
    def certificate_guid(self, certificate_guid):
        """Sets the certificate_guid of this CertificateModel.

        Gets or sets the CertificateGuid  # noqa: E501

        :param certificate_guid: The certificate_guid of this CertificateModel.  # noqa: E501
        :type: str
        """

        self._certificate_guid = certificate_guid

    @property
    def password(self):
        """Gets the password of this CertificateModel.  # noqa: E501

        Password of the certificate  # noqa: E501

        :return: The password of this CertificateModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CertificateModel.

        Password of the certificate  # noqa: E501

        :param password: The password of this CertificateModel.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateModel):
            return True

        return self.to_dict() != other.to_dict()
