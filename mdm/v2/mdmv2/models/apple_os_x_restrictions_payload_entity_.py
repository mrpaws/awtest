# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXRestrictionsPayloadEntity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preferences': 'AppleOsXRestrictionPreferencesPayloadEntity_',
        'applications': 'AppleOsXRestrictionApplicationsPayloadEntity_',
        'widgets': 'AppleOsXRestrictionWidgetPayloadEntity_',
        'media': 'AppleOsXRestrictionMediaPayloadEntity_',
        'sharing': 'AppleOsXRestrictionSharingPayloadEntity_',
        'desktop': 'AppleOsXRestrictionDesktopPayloadEntity_',
        'functionality': 'AppleOsXRestrictionFunctionalityPayloadEntity_'
    }

    attribute_map = {
        'preferences': 'Preferences',
        'applications': 'Applications',
        'widgets': 'Widgets',
        'media': 'Media',
        'sharing': 'Sharing',
        'desktop': 'Desktop',
        'functionality': 'Functionality'
    }

    def __init__(self, preferences=None, applications=None, widgets=None, media=None, sharing=None, desktop=None, functionality=None, _configuration=None):  # noqa: E501
        """AppleOsXRestrictionsPayloadEntity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._preferences = None
        self._applications = None
        self._widgets = None
        self._media = None
        self._sharing = None
        self._desktop = None
        self._functionality = None
        self.discriminator = None

        if preferences is not None:
            self.preferences = preferences
        if applications is not None:
            self.applications = applications
        if widgets is not None:
            self.widgets = widgets
        if media is not None:
            self.media = media
        if sharing is not None:
            self.sharing = sharing
        if desktop is not None:
            self.desktop = desktop
        if functionality is not None:
            self.functionality = functionality

    @property
    def preferences(self):
        """Gets the preferences of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501

        Gets or sets restriction Preferences payload.  # noqa: E501

        :return: The preferences of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXRestrictionPreferencesPayloadEntity_
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this AppleOsXRestrictionsPayloadEntity_.

        Gets or sets restriction Preferences payload.  # noqa: E501

        :param preferences: The preferences of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :type: AppleOsXRestrictionPreferencesPayloadEntity_
        """

        self._preferences = preferences

    @property
    def applications(self):
        """Gets the applications of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501

        Gets or sets restriction Applications payload.  # noqa: E501

        :return: The applications of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXRestrictionApplicationsPayloadEntity_
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this AppleOsXRestrictionsPayloadEntity_.

        Gets or sets restriction Applications payload.  # noqa: E501

        :param applications: The applications of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :type: AppleOsXRestrictionApplicationsPayloadEntity_
        """

        self._applications = applications

    @property
    def widgets(self):
        """Gets the widgets of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501

        Gets or sets restriction Widget payload.  # noqa: E501

        :return: The widgets of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXRestrictionWidgetPayloadEntity_
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this AppleOsXRestrictionsPayloadEntity_.

        Gets or sets restriction Widget payload.  # noqa: E501

        :param widgets: The widgets of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :type: AppleOsXRestrictionWidgetPayloadEntity_
        """

        self._widgets = widgets

    @property
    def media(self):
        """Gets the media of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501

        Gets or sets restriction Media payload.  # noqa: E501

        :return: The media of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXRestrictionMediaPayloadEntity_
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this AppleOsXRestrictionsPayloadEntity_.

        Gets or sets restriction Media payload.  # noqa: E501

        :param media: The media of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :type: AppleOsXRestrictionMediaPayloadEntity_
        """

        self._media = media

    @property
    def sharing(self):
        """Gets the sharing of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501

        Gets or sets restriction Sharing payload.  # noqa: E501

        :return: The sharing of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXRestrictionSharingPayloadEntity_
        """
        return self._sharing

    @sharing.setter
    def sharing(self, sharing):
        """Sets the sharing of this AppleOsXRestrictionsPayloadEntity_.

        Gets or sets restriction Sharing payload.  # noqa: E501

        :param sharing: The sharing of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :type: AppleOsXRestrictionSharingPayloadEntity_
        """

        self._sharing = sharing

    @property
    def desktop(self):
        """Gets the desktop of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501

        Gets or sets restriction Desktop payload.  # noqa: E501

        :return: The desktop of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXRestrictionDesktopPayloadEntity_
        """
        return self._desktop

    @desktop.setter
    def desktop(self, desktop):
        """Sets the desktop of this AppleOsXRestrictionsPayloadEntity_.

        Gets or sets restriction Desktop payload.  # noqa: E501

        :param desktop: The desktop of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :type: AppleOsXRestrictionDesktopPayloadEntity_
        """

        self._desktop = desktop

    @property
    def functionality(self):
        """Gets the functionality of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501

        Gets or sets restriction Functionality payload.  # noqa: E501

        :return: The functionality of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXRestrictionFunctionalityPayloadEntity_
        """
        return self._functionality

    @functionality.setter
    def functionality(self, functionality):
        """Sets the functionality of this AppleOsXRestrictionsPayloadEntity_.

        Gets or sets restriction Functionality payload.  # noqa: E501

        :param functionality: The functionality of this AppleOsXRestrictionsPayloadEntity_.  # noqa: E501
        :type: AppleOsXRestrictionFunctionalityPayloadEntity_
        """

        self._functionality = functionality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXRestrictionsPayloadEntity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXRestrictionsPayloadEntity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXRestrictionsPayloadEntity_):
            return True

        return self.to_dict() != other.to_dict()
