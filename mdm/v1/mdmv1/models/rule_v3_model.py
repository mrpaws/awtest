# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class RuleV3Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'serial_number': 'str',
        'action': 'DeviceTrafficRuleActionModel',
        'destinations': 'list[str]',
        'applications': 'list[DeviceTrafficRuleApplicationModel]',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'serial_number': 'serial_number',
        'action': 'action',
        'destinations': 'destinations',
        'applications': 'applications',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, serial_number=None, action=None, destinations=None, applications=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """RuleV3Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._serial_number = None
        self._action = None
        self._destinations = None
        self._applications = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if serial_number is not None:
            self.serial_number = serial_number
        if action is not None:
            self.action = action
        if destinations is not None:
            self.destinations = destinations
        if applications is not None:
            self.applications = applications
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def serial_number(self):
        """Gets the serial_number of this RuleV3Model.  # noqa: E501

        The serial number of the rule.  # noqa: E501

        :return: The serial_number of this RuleV3Model.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this RuleV3Model.

        The serial number of the rule.  # noqa: E501

        :param serial_number: The serial_number of this RuleV3Model.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def action(self):
        """Gets the action of this RuleV3Model.  # noqa: E501

        Action to be taken by application(s) for the configured domains  # noqa: E501

        :return: The action of this RuleV3Model.  # noqa: E501
        :rtype: DeviceTrafficRuleActionModel
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RuleV3Model.

        Action to be taken by application(s) for the configured domains  # noqa: E501

        :param action: The action of this RuleV3Model.  # noqa: E501
        :type: DeviceTrafficRuleActionModel
        """

        self._action = action

    @property
    def destinations(self):
        """Gets the destinations of this RuleV3Model.  # noqa: E501

        Configured domains for whom the action will be taken  # noqa: E501

        :return: The destinations of this RuleV3Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this RuleV3Model.

        Configured domains for whom the action will be taken  # noqa: E501

        :param destinations: The destinations of this RuleV3Model.  # noqa: E501
        :type: list[str]
        """

        self._destinations = destinations

    @property
    def applications(self):
        """Gets the applications of this RuleV3Model.  # noqa: E501

        One or more tunnel applications configured that will honor the rule  # noqa: E501

        :return: The applications of this RuleV3Model.  # noqa: E501
        :rtype: list[DeviceTrafficRuleApplicationModel]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this RuleV3Model.

        One or more tunnel applications configured that will honor the rule  # noqa: E501

        :param applications: The applications of this RuleV3Model.  # noqa: E501
        :type: list[DeviceTrafficRuleApplicationModel]
        """

        self._applications = applications

    @property
    def id(self):
        """Gets the id of this RuleV3Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this RuleV3Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuleV3Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this RuleV3Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this RuleV3Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this RuleV3Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this RuleV3Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this RuleV3Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleV3Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleV3Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuleV3Model):
            return True

        return self.to_dict() != other.to_dict()
