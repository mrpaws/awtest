# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class CellCardDailyUsageModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'device_id': 'EntityId',
        'phone_number': 'str',
        'home_mcc': 'str',
        'home_mnc': 'str',
        'cellular_technology': 'str',
        'non_roaming_kilo_bytes': 'str',
        'roaming_kilo_bytes': 'str',
        'peak_voice_usage': 'str',
        'incoming_peak_voice_usage': 'str',
        'outgoing_peak_voice_usage': 'str',
        'off_peak_voice_usage': 'str',
        'incoming_off_peak_voice_usage': 'str',
        'outgoing_off_peak_voice_usage': 'str',
        'message_usage': 'str',
        'incoming_message_usage': 'str',
        'outgoing_message_usage': 'str'
    }

    attribute_map = {
        '_date': 'Date',
        'device_id': 'DeviceId',
        'phone_number': 'PhoneNumber',
        'home_mcc': 'HomeMCC',
        'home_mnc': 'HomeMNC',
        'cellular_technology': 'CellularTechnology',
        'non_roaming_kilo_bytes': 'NonRoamingKiloBytes',
        'roaming_kilo_bytes': 'RoamingKiloBytes',
        'peak_voice_usage': 'PeakVoiceUsage',
        'incoming_peak_voice_usage': 'IncomingPeakVoiceUsage',
        'outgoing_peak_voice_usage': 'OutgoingPeakVoiceUsage',
        'off_peak_voice_usage': 'OffPeakVoiceUsage',
        'incoming_off_peak_voice_usage': 'IncomingOffPeakVoiceUsage',
        'outgoing_off_peak_voice_usage': 'OutgoingOffPeakVoiceUsage',
        'message_usage': 'MessageUsage',
        'incoming_message_usage': 'IncomingMessageUsage',
        'outgoing_message_usage': 'OutgoingMessageUsage'
    }

    def __init__(self, _date=None, device_id=None, phone_number=None, home_mcc=None, home_mnc=None, cellular_technology=None, non_roaming_kilo_bytes=None, roaming_kilo_bytes=None, peak_voice_usage=None, incoming_peak_voice_usage=None, outgoing_peak_voice_usage=None, off_peak_voice_usage=None, incoming_off_peak_voice_usage=None, outgoing_off_peak_voice_usage=None, message_usage=None, incoming_message_usage=None, outgoing_message_usage=None, _configuration=None):  # noqa: E501
        """CellCardDailyUsageModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__date = None
        self._device_id = None
        self._phone_number = None
        self._home_mcc = None
        self._home_mnc = None
        self._cellular_technology = None
        self._non_roaming_kilo_bytes = None
        self._roaming_kilo_bytes = None
        self._peak_voice_usage = None
        self._incoming_peak_voice_usage = None
        self._outgoing_peak_voice_usage = None
        self._off_peak_voice_usage = None
        self._incoming_off_peak_voice_usage = None
        self._outgoing_off_peak_voice_usage = None
        self._message_usage = None
        self._incoming_message_usage = None
        self._outgoing_message_usage = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if device_id is not None:
            self.device_id = device_id
        if phone_number is not None:
            self.phone_number = phone_number
        if home_mcc is not None:
            self.home_mcc = home_mcc
        if home_mnc is not None:
            self.home_mnc = home_mnc
        if cellular_technology is not None:
            self.cellular_technology = cellular_technology
        if non_roaming_kilo_bytes is not None:
            self.non_roaming_kilo_bytes = non_roaming_kilo_bytes
        if roaming_kilo_bytes is not None:
            self.roaming_kilo_bytes = roaming_kilo_bytes
        if peak_voice_usage is not None:
            self.peak_voice_usage = peak_voice_usage
        if incoming_peak_voice_usage is not None:
            self.incoming_peak_voice_usage = incoming_peak_voice_usage
        if outgoing_peak_voice_usage is not None:
            self.outgoing_peak_voice_usage = outgoing_peak_voice_usage
        if off_peak_voice_usage is not None:
            self.off_peak_voice_usage = off_peak_voice_usage
        if incoming_off_peak_voice_usage is not None:
            self.incoming_off_peak_voice_usage = incoming_off_peak_voice_usage
        if outgoing_off_peak_voice_usage is not None:
            self.outgoing_off_peak_voice_usage = outgoing_off_peak_voice_usage
        if message_usage is not None:
            self.message_usage = message_usage
        if incoming_message_usage is not None:
            self.incoming_message_usage = incoming_message_usage
        if outgoing_message_usage is not None:
            self.outgoing_message_usage = outgoing_message_usage

    @property
    def _date(self):
        """Gets the _date of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets date associated with the usage.  # noqa: E501

        :return: The _date of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CellCardDailyUsageModel.

        Gets or sets date associated with the usage.  # noqa: E501

        :param _date: The _date of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def device_id(self):
        """Gets the device_id of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets device Identifier.  # noqa: E501

        :return: The device_id of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: EntityId
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this CellCardDailyUsageModel.

        Gets or sets device Identifier.  # noqa: E501

        :param device_id: The device_id of this CellCardDailyUsageModel.  # noqa: E501
        :type: EntityId
        """

        self._device_id = device_id

    @property
    def phone_number(self):
        """Gets the phone_number of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets phonenumber associated with the SIM.  # noqa: E501

        :return: The phone_number of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CellCardDailyUsageModel.

        Gets or sets phonenumber associated with the SIM.  # noqa: E501

        :param phone_number: The phone_number of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def home_mcc(self):
        """Gets the home_mcc of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets home Mobile Country Code.  # noqa: E501

        :return: The home_mcc of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._home_mcc

    @home_mcc.setter
    def home_mcc(self, home_mcc):
        """Sets the home_mcc of this CellCardDailyUsageModel.

        Gets or sets home Mobile Country Code.  # noqa: E501

        :param home_mcc: The home_mcc of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._home_mcc = home_mcc

    @property
    def home_mnc(self):
        """Gets the home_mnc of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets home Mobile Network Code.  # noqa: E501

        :return: The home_mnc of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._home_mnc

    @home_mnc.setter
    def home_mnc(self, home_mnc):
        """Sets the home_mnc of this CellCardDailyUsageModel.

        Gets or sets home Mobile Network Code.  # noqa: E501

        :param home_mnc: The home_mnc of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._home_mnc = home_mnc

    @property
    def cellular_technology(self):
        """Gets the cellular_technology of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets cellular Technology Used (CDMA, GSM, or Both).  # noqa: E501

        :return: The cellular_technology of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._cellular_technology

    @cellular_technology.setter
    def cellular_technology(self, cellular_technology):
        """Sets the cellular_technology of this CellCardDailyUsageModel.

        Gets or sets cellular Technology Used (CDMA, GSM, or Both).  # noqa: E501

        :param cellular_technology: The cellular_technology of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._cellular_technology = cellular_technology

    @property
    def non_roaming_kilo_bytes(self):
        """Gets the non_roaming_kilo_bytes of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets non Roaming usage in bytes.  # noqa: E501

        :return: The non_roaming_kilo_bytes of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._non_roaming_kilo_bytes

    @non_roaming_kilo_bytes.setter
    def non_roaming_kilo_bytes(self, non_roaming_kilo_bytes):
        """Sets the non_roaming_kilo_bytes of this CellCardDailyUsageModel.

        Gets or sets non Roaming usage in bytes.  # noqa: E501

        :param non_roaming_kilo_bytes: The non_roaming_kilo_bytes of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._non_roaming_kilo_bytes = non_roaming_kilo_bytes

    @property
    def roaming_kilo_bytes(self):
        """Gets the roaming_kilo_bytes of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets roaming usage in bytes.  # noqa: E501

        :return: The roaming_kilo_bytes of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._roaming_kilo_bytes

    @roaming_kilo_bytes.setter
    def roaming_kilo_bytes(self, roaming_kilo_bytes):
        """Sets the roaming_kilo_bytes of this CellCardDailyUsageModel.

        Gets or sets roaming usage in bytes.  # noqa: E501

        :param roaming_kilo_bytes: The roaming_kilo_bytes of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._roaming_kilo_bytes = roaming_kilo_bytes

    @property
    def peak_voice_usage(self):
        """Gets the peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets peak voice usage.  # noqa: E501

        :return: The peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._peak_voice_usage

    @peak_voice_usage.setter
    def peak_voice_usage(self, peak_voice_usage):
        """Sets the peak_voice_usage of this CellCardDailyUsageModel.

        Gets or sets peak voice usage.  # noqa: E501

        :param peak_voice_usage: The peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._peak_voice_usage = peak_voice_usage

    @property
    def incoming_peak_voice_usage(self):
        """Gets the incoming_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets incoming peak voice usage.  # noqa: E501

        :return: The incoming_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._incoming_peak_voice_usage

    @incoming_peak_voice_usage.setter
    def incoming_peak_voice_usage(self, incoming_peak_voice_usage):
        """Sets the incoming_peak_voice_usage of this CellCardDailyUsageModel.

        Gets or sets incoming peak voice usage.  # noqa: E501

        :param incoming_peak_voice_usage: The incoming_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._incoming_peak_voice_usage = incoming_peak_voice_usage

    @property
    def outgoing_peak_voice_usage(self):
        """Gets the outgoing_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets outgoing peak voice usage.  # noqa: E501

        :return: The outgoing_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_peak_voice_usage

    @outgoing_peak_voice_usage.setter
    def outgoing_peak_voice_usage(self, outgoing_peak_voice_usage):
        """Sets the outgoing_peak_voice_usage of this CellCardDailyUsageModel.

        Gets or sets outgoing peak voice usage.  # noqa: E501

        :param outgoing_peak_voice_usage: The outgoing_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._outgoing_peak_voice_usage = outgoing_peak_voice_usage

    @property
    def off_peak_voice_usage(self):
        """Gets the off_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets off-peak voice usage.  # noqa: E501

        :return: The off_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._off_peak_voice_usage

    @off_peak_voice_usage.setter
    def off_peak_voice_usage(self, off_peak_voice_usage):
        """Sets the off_peak_voice_usage of this CellCardDailyUsageModel.

        Gets or sets off-peak voice usage.  # noqa: E501

        :param off_peak_voice_usage: The off_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._off_peak_voice_usage = off_peak_voice_usage

    @property
    def incoming_off_peak_voice_usage(self):
        """Gets the incoming_off_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets incoming off-peak voice usage.  # noqa: E501

        :return: The incoming_off_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._incoming_off_peak_voice_usage

    @incoming_off_peak_voice_usage.setter
    def incoming_off_peak_voice_usage(self, incoming_off_peak_voice_usage):
        """Sets the incoming_off_peak_voice_usage of this CellCardDailyUsageModel.

        Gets or sets incoming off-peak voice usage.  # noqa: E501

        :param incoming_off_peak_voice_usage: The incoming_off_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._incoming_off_peak_voice_usage = incoming_off_peak_voice_usage

    @property
    def outgoing_off_peak_voice_usage(self):
        """Gets the outgoing_off_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets outgoing off-peak voice usage.  # noqa: E501

        :return: The outgoing_off_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_off_peak_voice_usage

    @outgoing_off_peak_voice_usage.setter
    def outgoing_off_peak_voice_usage(self, outgoing_off_peak_voice_usage):
        """Sets the outgoing_off_peak_voice_usage of this CellCardDailyUsageModel.

        Gets or sets outgoing off-peak voice usage.  # noqa: E501

        :param outgoing_off_peak_voice_usage: The outgoing_off_peak_voice_usage of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._outgoing_off_peak_voice_usage = outgoing_off_peak_voice_usage

    @property
    def message_usage(self):
        """Gets the message_usage of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets message Usage.  # noqa: E501

        :return: The message_usage of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._message_usage

    @message_usage.setter
    def message_usage(self, message_usage):
        """Sets the message_usage of this CellCardDailyUsageModel.

        Gets or sets message Usage.  # noqa: E501

        :param message_usage: The message_usage of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._message_usage = message_usage

    @property
    def incoming_message_usage(self):
        """Gets the incoming_message_usage of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets incoming Message Usage.  # noqa: E501

        :return: The incoming_message_usage of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._incoming_message_usage

    @incoming_message_usage.setter
    def incoming_message_usage(self, incoming_message_usage):
        """Sets the incoming_message_usage of this CellCardDailyUsageModel.

        Gets or sets incoming Message Usage.  # noqa: E501

        :param incoming_message_usage: The incoming_message_usage of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._incoming_message_usage = incoming_message_usage

    @property
    def outgoing_message_usage(self):
        """Gets the outgoing_message_usage of this CellCardDailyUsageModel.  # noqa: E501

        Gets or sets outgoing Message Usage.  # noqa: E501

        :return: The outgoing_message_usage of this CellCardDailyUsageModel.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_message_usage

    @outgoing_message_usage.setter
    def outgoing_message_usage(self, outgoing_message_usage):
        """Sets the outgoing_message_usage of this CellCardDailyUsageModel.

        Gets or sets outgoing Message Usage.  # noqa: E501

        :param outgoing_message_usage: The outgoing_message_usage of this CellCardDailyUsageModel.  # noqa: E501
        :type: str
        """

        self._outgoing_message_usage = outgoing_message_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CellCardDailyUsageModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CellCardDailyUsageModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CellCardDailyUsageModel):
            return True

        return self.to_dict() != other.to_dict()
