# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ScriptSampleSearchRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_uuid': 'str',
        'script_uuid': 'str',
        'search_text': 'str',
        'limit': 'int',
        'offset': 'int',
        'sort_by': 'int',
        'sort_order': 'int'
    }

    attribute_map = {
        'device_uuid': 'device_uuid',
        'script_uuid': 'script_uuid',
        'search_text': 'search_text',
        'limit': 'limit',
        'offset': 'offset',
        'sort_by': 'sort_by',
        'sort_order': 'sort_order'
    }

    def __init__(self, device_uuid=None, script_uuid=None, search_text=None, limit=None, offset=None, sort_by=None, sort_order=None, _configuration=None):  # noqa: E501
        """ScriptSampleSearchRequestModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_uuid = None
        self._script_uuid = None
        self._search_text = None
        self._limit = None
        self._offset = None
        self._sort_by = None
        self._sort_order = None
        self.discriminator = None

        if device_uuid is not None:
            self.device_uuid = device_uuid
        if script_uuid is not None:
            self.script_uuid = script_uuid
        if search_text is not None:
            self.search_text = search_text
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if sort_by is not None:
            self.sort_by = sort_by
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def device_uuid(self):
        """Gets the device_uuid of this ScriptSampleSearchRequestModel.  # noqa: E501

        Gets or sets optional device identifier search criteria.  # noqa: E501

        :return: The device_uuid of this ScriptSampleSearchRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this ScriptSampleSearchRequestModel.

        Gets or sets optional device identifier search criteria.  # noqa: E501

        :param device_uuid: The device_uuid of this ScriptSampleSearchRequestModel.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def script_uuid(self):
        """Gets the script_uuid of this ScriptSampleSearchRequestModel.  # noqa: E501

        Gets or sets optional Script identifier search criteria.  # noqa: E501

        :return: The script_uuid of this ScriptSampleSearchRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._script_uuid

    @script_uuid.setter
    def script_uuid(self, script_uuid):
        """Sets the script_uuid of this ScriptSampleSearchRequestModel.

        Gets or sets optional Script identifier search criteria.  # noqa: E501

        :param script_uuid: The script_uuid of this ScriptSampleSearchRequestModel.  # noqa: E501
        :type: str
        """

        self._script_uuid = script_uuid

    @property
    def search_text(self):
        """Gets the search_text of this ScriptSampleSearchRequestModel.  # noqa: E501

        Gets or sets matches Script data where Script Name is like {search_text} or  Script Value is like {search_text.  # noqa: E501

        :return: The search_text of this ScriptSampleSearchRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this ScriptSampleSearchRequestModel.

        Gets or sets matches Script data where Script Name is like {search_text} or  Script Value is like {search_text.  # noqa: E501

        :param search_text: The search_text of this ScriptSampleSearchRequestModel.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def limit(self):
        """Gets the limit of this ScriptSampleSearchRequestModel.  # noqa: E501

        Gets or sets an integer that indicates the maximum number of results to return.  # noqa: E501

        :return: The limit of this ScriptSampleSearchRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ScriptSampleSearchRequestModel.

        Gets or sets an integer that indicates the maximum number of results to return.  # noqa: E501

        :param limit: The limit of this ScriptSampleSearchRequestModel.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this ScriptSampleSearchRequestModel.  # noqa: E501

        Gets or sets an integer describing the starting position in the result set.  # noqa: E501

        :return: The offset of this ScriptSampleSearchRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ScriptSampleSearchRequestModel.

        Gets or sets an integer describing the starting position in the result set.  # noqa: E501

        :param offset: The offset of this ScriptSampleSearchRequestModel.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def sort_by(self):
        """Gets the sort_by of this ScriptSampleSearchRequestModel.  # noqa: E501

        Gets or sets specifies which attribute is used to sort the result set.  # noqa: E501

        :return: The sort_by of this ScriptSampleSearchRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ScriptSampleSearchRequestModel.

        Gets or sets specifies which attribute is used to sort the result set.  # noqa: E501

        :param sort_by: The sort_by of this ScriptSampleSearchRequestModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                sort_by not in allowed_values):
            raise ValueError(
                "Invalid value for `sort_by` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_by, allowed_values)
            )

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this ScriptSampleSearchRequestModel.  # noqa: E501

        Gets or sets specifies the sort order for the result set.  # noqa: E501

        :return: The sort_order of this ScriptSampleSearchRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ScriptSampleSearchRequestModel.

        Gets or sets specifies the sort order for the result set.  # noqa: E501

        :param sort_order: The sort_order of this ScriptSampleSearchRequestModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                sort_order not in allowed_values):
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScriptSampleSearchRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScriptSampleSearchRequestModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScriptSampleSearchRequestModel):
            return True

        return self.to_dict() != other.to_dict()
