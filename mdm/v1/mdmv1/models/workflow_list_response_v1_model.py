# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class WorkflowListResponseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page': 'int',
        'page_size': 'int',
        'total': 'int',
        'results': 'list[WorkflowListItemResponseV1Model]',
        'links': 'list[Link]',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'page': 'page',
        'page_size': 'page_size',
        'total': 'total',
        'results': 'results',
        'links': 'Links',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, page=None, page_size=None, total=None, results=None, links=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """WorkflowListResponseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._page = None
        self._page_size = None
        self._total = None
        self._results = None
        self._links = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if page is not None:
            self.page = page
        if page_size is not None:
            self.page_size = page_size
        if total is not None:
            self.total = total
        if results is not None:
            self.results = results
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def page(self):
        """Gets the page of this WorkflowListResponseV1Model.  # noqa: E501

        The current page.  # noqa: E501

        :return: The page of this WorkflowListResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this WorkflowListResponseV1Model.

        The current page.  # noqa: E501

        :param page: The page of this WorkflowListResponseV1Model.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this WorkflowListResponseV1Model.  # noqa: E501

        The current page size.  # noqa: E501

        :return: The page_size of this WorkflowListResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this WorkflowListResponseV1Model.

        The current page size.  # noqa: E501

        :param page_size: The page_size of this WorkflowListResponseV1Model.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def total(self):
        """Gets the total of this WorkflowListResponseV1Model.  # noqa: E501

        The total number of results.  # noqa: E501

        :return: The total of this WorkflowListResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this WorkflowListResponseV1Model.

        The total number of results.  # noqa: E501

        :param total: The total of this WorkflowListResponseV1Model.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def results(self):
        """Gets the results of this WorkflowListResponseV1Model.  # noqa: E501

        The search results.  # noqa: E501

        :return: The results of this WorkflowListResponseV1Model.  # noqa: E501
        :rtype: list[WorkflowListItemResponseV1Model]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this WorkflowListResponseV1Model.

        The search results.  # noqa: E501

        :param results: The results of this WorkflowListResponseV1Model.  # noqa: E501
        :type: list[WorkflowListItemResponseV1Model]
        """

        self._results = results

    @property
    def links(self):
        """Gets the links of this WorkflowListResponseV1Model.  # noqa: E501

        Gets list of hypermedia link.  # noqa: E501

        :return: The links of this WorkflowListResponseV1Model.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this WorkflowListResponseV1Model.

        Gets list of hypermedia link.  # noqa: E501

        :param links: The links of this WorkflowListResponseV1Model.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this WorkflowListResponseV1Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this WorkflowListResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowListResponseV1Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this WorkflowListResponseV1Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this WorkflowListResponseV1Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this WorkflowListResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this WorkflowListResponseV1Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this WorkflowListResponseV1Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowListResponseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowListResponseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowListResponseV1Model):
            return True

        return self.to_dict() != other.to_dict()
