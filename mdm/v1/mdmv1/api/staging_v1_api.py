# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class StagingV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def staging_v1_add_staging_bundle_async(self, **kwargs):  # noqa: E501
        """New - Creates a new staging bundle provided valid values are given.  # noqa: E501

        Creates a new staging package with the valid values provided.<br>Staging package is used for enrolling a device through barcode scanning or side loading. </br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_add_staging_bundle_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StagingDetailsModel staging_details: Details of the staging bunlde to be added.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staging_v1_add_staging_bundle_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.staging_v1_add_staging_bundle_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def staging_v1_add_staging_bundle_async_with_http_info(self, **kwargs):  # noqa: E501
        """New - Creates a new staging bundle provided valid values are given.  # noqa: E501

        Creates a new staging package with the valid values provided.<br>Staging package is used for enrolling a device through barcode scanning or side loading. </br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_add_staging_bundle_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StagingDetailsModel staging_details: Details of the staging bunlde to be added.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['staging_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staging_v1_add_staging_bundle_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'staging_details' in params:
            body_params = params['staging_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/staging', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staging_v1_delete_staging_bundle(self, staging_id, **kwargs):  # noqa: E501
        """New - Delete the staging package identified by the staging package id provided it is valid.  # noqa: E501

        The staging will be deleted if identifier of existing staging package is passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_delete_staging_bundle(staging_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int staging_id: Valid staging bundle id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staging_v1_delete_staging_bundle_with_http_info(staging_id, **kwargs)  # noqa: E501
        else:
            (data) = self.staging_v1_delete_staging_bundle_with_http_info(staging_id, **kwargs)  # noqa: E501
            return data

    def staging_v1_delete_staging_bundle_with_http_info(self, staging_id, **kwargs):  # noqa: E501
        """New - Delete the staging package identified by the staging package id provided it is valid.  # noqa: E501

        The staging will be deleted if identifier of existing staging package is passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_delete_staging_bundle_with_http_info(staging_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int staging_id: Valid staging bundle id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['staging_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staging_v1_delete_staging_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'staging_id' is set
        if self.api_client.client_side_validation and ('staging_id' not in params or
                                                       params['staging_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `staging_id` when calling `staging_v1_delete_staging_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'staging_id' in params:
            path_params['stagingId'] = params['staging_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/staging/{stagingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staging_v1_generate_qr_code_pdf_file(self, configure_qr_code_enrollment_model, **kwargs):  # noqa: E501
        """New - Retrieves a QRCode pdf file for Enrollment  # noqa: E501

        Retrieves a QRCode pdf file for Enrollment used in Enrollment for Corporate Owned AFW Devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_generate_qr_code_pdf_file(configure_qr_code_enrollment_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigureQRCodeEnrollmentModel configure_qr_code_enrollment_model: Configure QRCode Enrollment Model(Required) (required)
        :return: Stream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staging_v1_generate_qr_code_pdf_file_with_http_info(configure_qr_code_enrollment_model, **kwargs)  # noqa: E501
        else:
            (data) = self.staging_v1_generate_qr_code_pdf_file_with_http_info(configure_qr_code_enrollment_model, **kwargs)  # noqa: E501
            return data

    def staging_v1_generate_qr_code_pdf_file_with_http_info(self, configure_qr_code_enrollment_model, **kwargs):  # noqa: E501
        """New - Retrieves a QRCode pdf file for Enrollment  # noqa: E501

        Retrieves a QRCode pdf file for Enrollment used in Enrollment for Corporate Owned AFW Devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_generate_qr_code_pdf_file_with_http_info(configure_qr_code_enrollment_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConfigureQRCodeEnrollmentModel configure_qr_code_enrollment_model: Configure QRCode Enrollment Model(Required) (required)
        :return: Stream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configure_qr_code_enrollment_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staging_v1_generate_qr_code_pdf_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configure_qr_code_enrollment_model' is set
        if self.api_client.client_side_validation and ('configure_qr_code_enrollment_model' not in params or
                                                       params['configure_qr_code_enrollment_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `configure_qr_code_enrollment_model` when calling `staging_v1_generate_qr_code_pdf_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'configure_qr_code_enrollment_model' in params:
            body_params = params['configure_qr_code_enrollment_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/staging/androidwork/qrcodeenrollment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stream',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staging_v1_get_staging_details(self, staging_id, **kwargs):  # noqa: E501
        """New - Gets the staging bundle identified by the staging package id provided it is valid.  # noqa: E501

        Fetch the details of the existing staging package. <br>Staging package is used for enrolling a device through barcode scanning or side loading </br><br>The fetched details include name of package, organization group under which it is managed, Agent package id and manifest actions like Install profile, Uninstall application.</br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_get_staging_details(staging_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int staging_id: Valid staging bundle id. (required)
        :return: StagingDetailsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staging_v1_get_staging_details_with_http_info(staging_id, **kwargs)  # noqa: E501
        else:
            (data) = self.staging_v1_get_staging_details_with_http_info(staging_id, **kwargs)  # noqa: E501
            return data

    def staging_v1_get_staging_details_with_http_info(self, staging_id, **kwargs):  # noqa: E501
        """New - Gets the staging bundle identified by the staging package id provided it is valid.  # noqa: E501

        Fetch the details of the existing staging package. <br>Staging package is used for enrolling a device through barcode scanning or side loading </br><br>The fetched details include name of package, organization group under which it is managed, Agent package id and manifest actions like Install profile, Uninstall application.</br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_get_staging_details_with_http_info(staging_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int staging_id: Valid staging bundle id. (required)
        :return: StagingDetailsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['staging_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staging_v1_get_staging_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'staging_id' is set
        if self.api_client.client_side_validation and ('staging_id' not in params or
                                                       params['staging_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `staging_id` when calling `staging_v1_get_staging_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'staging_id' in params:
            path_params['stagingId'] = params['staging_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/staging/{stagingId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StagingDetailsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staging_v1_retrieve_sideload_staging_file(self, staging_id, **kwargs):  # noqa: E501
        """New - Retrieves a side-load staging zip or tar.gz file  # noqa: E501

        Retrieves a side-load zip or tar.gz file used for staging a device, installing the agent, installing staging content, and enrolling, used mostly on Rugged devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_retrieve_sideload_staging_file(staging_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int staging_id: staging bundle id(Required) (required)
        :param int organizationgroupid: organization group id
        :param str key: key used to encrypt some of the files in archive
        :param bool universal: when staging the device, set to true if you want the end-user to choose the organization group the device will be apart of.
        :return: Stream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staging_v1_retrieve_sideload_staging_file_with_http_info(staging_id, **kwargs)  # noqa: E501
        else:
            (data) = self.staging_v1_retrieve_sideload_staging_file_with_http_info(staging_id, **kwargs)  # noqa: E501
            return data

    def staging_v1_retrieve_sideload_staging_file_with_http_info(self, staging_id, **kwargs):  # noqa: E501
        """New - Retrieves a side-load staging zip or tar.gz file  # noqa: E501

        Retrieves a side-load zip or tar.gz file used for staging a device, installing the agent, installing staging content, and enrolling, used mostly on Rugged devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_retrieve_sideload_staging_file_with_http_info(staging_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int staging_id: staging bundle id(Required) (required)
        :param int organizationgroupid: organization group id
        :param str key: key used to encrypt some of the files in archive
        :param bool universal: when staging the device, set to true if you want the end-user to choose the organization group the device will be apart of.
        :return: Stream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['staging_id', 'organizationgroupid', 'key', 'universal']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staging_v1_retrieve_sideload_staging_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'staging_id' is set
        if self.api_client.client_side_validation and ('staging_id' not in params or
                                                       params['staging_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `staging_id` when calling `staging_v1_retrieve_sideload_staging_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'staging_id' in params:
            path_params['stagingId'] = params['staging_id']  # noqa: E501

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'universal' in params:
            query_params.append(('universal', params['universal']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/zip;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/staging/{stagingId}/sideload', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stream',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def staging_v1_update_staging_bundle_async(self, **kwargs):  # noqa: E501
        """New - Update the already existing staging package.  # noqa: E501

        Updates the details of existing staging package. <br>Staging package is used for enrolling a device through barcode scanning or side loading </br><br>The details include name of package, organization group under which it is managed, Agent package id and manifest actions like Install profile, Uninstall application</br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_update_staging_bundle_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StagingDetailsModel staging_details: Details of the staging package to be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.staging_v1_update_staging_bundle_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.staging_v1_update_staging_bundle_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def staging_v1_update_staging_bundle_async_with_http_info(self, **kwargs):  # noqa: E501
        """New - Update the already existing staging package.  # noqa: E501

        Updates the details of existing staging package. <br>Staging package is used for enrolling a device through barcode scanning or side loading </br><br>The details include name of package, organization group under which it is managed, Agent package id and manifest actions like Install profile, Uninstall application</br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.staging_v1_update_staging_bundle_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StagingDetailsModel staging_details: Details of the staging package to be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['staging_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method staging_v1_update_staging_bundle_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'staging_details' in params:
            body_params = params['staging_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/staging', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
