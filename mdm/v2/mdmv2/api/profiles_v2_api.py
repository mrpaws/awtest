# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv2.api_client import ApiClient


class ProfilesV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def profiles_v2_create_android_device_profile_async(self, **kwargs):  # noqa: E501
        """Creates an ANDROID Device Profile.  # noqa: E501

        1. v2  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_android_device_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AndroidDeviceProfileV2Entity device_profile: AndroidDeviceProfileEntity.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_create_android_device_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_create_android_device_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v2_create_android_device_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an ANDROID Device Profile.  # noqa: E501

        1. v2  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_android_device_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AndroidDeviceProfileV2Entity device_profile: AndroidDeviceProfileEntity.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_create_android_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/android/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_create_apple_device_profile_async(self, **kwargs):  # noqa: E501
        """Creates an Apple iOS device profile.  # noqa: E501

        1. Creates an Apple device profile containing a number of settings that you can specify, including : Passcode, Restrictions, VPN, Wi-Fi, Email, EAS, SCEP, Credentials, Custom Settings, etc.  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_apple_device_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleDeviceProfileV2Entity device_profile: Apple Device Profile V2 Entity.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_create_apple_device_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_create_apple_device_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v2_create_apple_device_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an Apple iOS device profile.  # noqa: E501

        1. Creates an Apple device profile containing a number of settings that you can specify, including : Passcode, Restrictions, VPN, Wi-Fi, Email, EAS, SCEP, Credentials, Custom Settings, etc.  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_apple_device_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleDeviceProfileV2Entity device_profile: Apple Device Profile V2 Entity.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_create_apple_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/apple/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_create_apple_os_x_device_profile_async(self, **kwargs):  # noqa: E501
        """Creates an Apple macOS device Profile.  # noqa: E501

        1. Creates an Apple macOS device profile containing a number of settings that you can specify, including : Passcode, Restrictions, Network, Email, Dock, SCEP, Credentials, Custom Settings, etc.  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_apple_os_x_device_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleOsXDeviceProfileEntity_ device_profile: Apple macOS Device Profile Entity.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_create_apple_os_x_device_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_create_apple_os_x_device_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v2_create_apple_os_x_device_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an Apple macOS device Profile.  # noqa: E501

        1. Creates an Apple macOS device profile containing a number of settings that you can specify, including : Passcode, Restrictions, Network, Email, Dock, SCEP, Credentials, Custom Settings, etc.  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_apple_os_x_device_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleOsXDeviceProfileEntity_ device_profile: Apple macOS Device Profile Entity.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_create_apple_os_x_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/appleosx/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_create_apple_tv_profiles(self, apple_tv_device_profile_v2_entity, **kwargs):  # noqa: E501
        """New - Create a new profile for apple tv.  # noqa: E501

        Create a new profile for apple tv with configuration of SingleAppMode or ConferenceRoomDisplay payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_apple_tv_profiles(apple_tv_device_profile_v2_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleTvDeviceProfileV2Entity_ apple_tv_device_profile_v2_entity: Apple tv device profile to be created.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_create_apple_tv_profiles_with_http_info(apple_tv_device_profile_v2_entity, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_create_apple_tv_profiles_with_http_info(apple_tv_device_profile_v2_entity, **kwargs)  # noqa: E501
            return data

    def profiles_v2_create_apple_tv_profiles_with_http_info(self, apple_tv_device_profile_v2_entity, **kwargs):  # noqa: E501
        """New - Create a new profile for apple tv.  # noqa: E501

        Create a new profile for apple tv with configuration of SingleAppMode or ConferenceRoomDisplay payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_apple_tv_profiles_with_http_info(apple_tv_device_profile_v2_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleTvDeviceProfileV2Entity_ apple_tv_device_profile_v2_entity: Apple tv device profile to be created.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['apple_tv_device_profile_v2_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_create_apple_tv_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'apple_tv_device_profile_v2_entity' is set
        if self.api_client.client_side_validation and ('apple_tv_device_profile_v2_entity' not in params or
                                                       params['apple_tv_device_profile_v2_entity'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `apple_tv_device_profile_v2_entity` when calling `profiles_v2_create_apple_tv_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'apple_tv_device_profile_v2_entity' in params:
            body_params = params['apple_tv_device_profile_v2_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/appletv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_create_epson_printer_profiles(self, epson_printer_profile_model, **kwargs):  # noqa: E501
        """New - Create a new profile for Epson printer.  # noqa: E501

        Create a new profile for epson printer with configuration SCEP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_epson_printer_profiles(epson_printer_profile_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EpsonPrinterProfileV2Model_ epson_printer_profile_model: Epson printer device profile to be created.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_create_epson_printer_profiles_with_http_info(epson_printer_profile_model, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_create_epson_printer_profiles_with_http_info(epson_printer_profile_model, **kwargs)  # noqa: E501
            return data

    def profiles_v2_create_epson_printer_profiles_with_http_info(self, epson_printer_profile_model, **kwargs):  # noqa: E501
        """New - Create a new profile for Epson printer.  # noqa: E501

        Create a new profile for epson printer with configuration SCEP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_epson_printer_profiles_with_http_info(epson_printer_profile_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EpsonPrinterProfileV2Model_ epson_printer_profile_model: Epson printer device profile to be created.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['epson_printer_profile_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_create_epson_printer_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'epson_printer_profile_model' is set
        if self.api_client.client_side_validation and ('epson_printer_profile_model' not in params or
                                                       params['epson_printer_profile_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `epson_printer_profile_model` when calling `profiles_v2_create_epson_printer_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'epson_printer_profile_model' in params:
            body_params = params['epson_printer_profile_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/epson', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_create_profile_resource_async(self, resource_type, **kwargs):  # noqa: E501
        """Creates a Resource for the requested type.  # noqa: E501

        Creates a Resource for the passed in Resource Type(VPN/Wifi/EAS).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_profile_resource_async(resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: (required)
        :param str resource_name: Gets or sets resource name.
        :param str resource_description: Gets or sets resource description.
        :param int resource_id: Gets or sets resource id.
        :param str resource_assignment_assignment_type: Gets or sets assignment Type for Resource.
        :param int resource_assignment_managed_location_group_id: Gets or sets root Organization Group Id.
        :param list[int] resource_assignment_assigned_smart_groups: Gets or sets the SmartGroups need to be assigned.
        :param list[int] resource_assignment_excluded_smart_groups: Gets or sets the SmartGroups need to be excluded.
        :return: ProfileResourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_create_profile_resource_async_with_http_info(resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_create_profile_resource_async_with_http_info(resource_type, **kwargs)  # noqa: E501
            return data

    def profiles_v2_create_profile_resource_async_with_http_info(self, resource_type, **kwargs):  # noqa: E501
        """Creates a Resource for the requested type.  # noqa: E501

        Creates a Resource for the passed in Resource Type(VPN/Wifi/EAS).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_profile_resource_async_with_http_info(resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: (required)
        :param str resource_name: Gets or sets resource name.
        :param str resource_description: Gets or sets resource description.
        :param int resource_id: Gets or sets resource id.
        :param str resource_assignment_assignment_type: Gets or sets assignment Type for Resource.
        :param int resource_assignment_managed_location_group_id: Gets or sets root Organization Group Id.
        :param list[int] resource_assignment_assigned_smart_groups: Gets or sets the SmartGroups need to be assigned.
        :param list[int] resource_assignment_excluded_smart_groups: Gets or sets the SmartGroups need to be excluded.
        :return: ProfileResourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_type', 'resource_name', 'resource_description', 'resource_id', 'resource_assignment_assignment_type', 'resource_assignment_managed_location_group_id', 'resource_assignment_assigned_smart_groups', 'resource_assignment_excluded_smart_groups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_create_profile_resource_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in params or
                                                       params['resource_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_type` when calling `profiles_v2_create_profile_resource_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []
        if 'resource_name' in params:
            query_params.append(('resource.name', params['resource_name']))  # noqa: E501
        if 'resource_description' in params:
            query_params.append(('resource.description', params['resource_description']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resource.id', params['resource_id']))  # noqa: E501
        if 'resource_assignment_assignment_type' in params:
            query_params.append(('resource.assignment.assignmentType', params['resource_assignment_assignment_type']))  # noqa: E501
        if 'resource_assignment_managed_location_group_id' in params:
            query_params.append(('resource.assignment.managedLocationGroupID', params['resource_assignment_managed_location_group_id']))  # noqa: E501
        if 'resource_assignment_assigned_smart_groups' in params:
            query_params.append(('resource.assignment.assignedSmartGroups', params['resource_assignment_assigned_smart_groups']))  # noqa: E501
            collection_formats['resource.assignment.assignedSmartGroups'] = 'multi'  # noqa: E501
        if 'resource_assignment_excluded_smart_groups' in params:
            query_params.append(('resource.assignment.excludedSmartGroups', params['resource_assignment_excluded_smart_groups']))  # noqa: E501
            collection_formats['resource.assignment.excludedSmartGroups'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/resources/{resourceType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileResourceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_create_qnx_device_profile_async(self, **kwargs):  # noqa: E501
        """Creates a Provisioning Enabled QNX Device Profile.  # noqa: E501

        1. Creates a new QNX profile with provisioning enabled.<br>With provisioning enabled, the profiles will be linked to products and will be assigned to devices using policy engine.</br>  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_qnx_device_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QnxDeviceProfileEntity device_profile: The profile details like Name, scope, custom attribute name, value and Id.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_create_qnx_device_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_create_qnx_device_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v2_create_qnx_device_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a Provisioning Enabled QNX Device Profile.  # noqa: E501

        1. Creates a new QNX profile with provisioning enabled.<br>With provisioning enabled, the profiles will be linked to products and will be assigned to devices using policy engine.</br>  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_create_qnx_device_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QnxDeviceProfileEntity device_profile: The profile details like Name, scope, custom attribute name, value and Id.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_create_qnx_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/qnx/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_delete_profile_resource_async(self, id, **kwargs):  # noqa: E501
        """Deletes the Resource identified by the Resource ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_delete_profile_resource_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Resource ID (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_delete_profile_resource_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_delete_profile_resource_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def profiles_v2_delete_profile_resource_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes the Resource identified by the Resource ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_delete_profile_resource_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Resource ID (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_delete_profile_resource_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `profiles_v2_delete_profile_resource_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/resources/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_edit_assignment_async(self, resource_assignment_model, id, **kwargs):  # noqa: E501
        """Edit the Smart Group assignments for a given Resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_edit_assignment_async(resource_assignment_model, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceAssignmentModel resource_assignment_model: Resource Assignment model (Required). (required)
        :param int id: Resource ID (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_edit_assignment_async_with_http_info(resource_assignment_model, id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_edit_assignment_async_with_http_info(resource_assignment_model, id, **kwargs)  # noqa: E501
            return data

    def profiles_v2_edit_assignment_async_with_http_info(self, resource_assignment_model, id, **kwargs):  # noqa: E501
        """Edit the Smart Group assignments for a given Resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_edit_assignment_async_with_http_info(resource_assignment_model, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ResourceAssignmentModel resource_assignment_model: Resource Assignment model (Required). (required)
        :param int id: Resource ID (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_assignment_model', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_edit_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_assignment_model' is set
        if self.api_client.client_side_validation and ('resource_assignment_model' not in params or
                                                       params['resource_assignment_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_assignment_model` when calling `profiles_v2_edit_assignment_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `profiles_v2_edit_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resource_assignment_model' in params:
            body_params = params['resource_assignment_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/resources/editassignment/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_get_device_profile_details_async(self, profile_id, **kwargs):  # noqa: E501
        """Gets Device Profile.  # noqa: E501

        Gets Device Profile Details identified by the Profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_get_device_profile_details_async(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: Profile Id (Required). (required)
        :return: DeviceProfileV2Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_get_device_profile_details_async_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_get_device_profile_details_async_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def profiles_v2_get_device_profile_details_async_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """Gets Device Profile.  # noqa: E501

        Gets Device Profile Details identified by the Profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_get_device_profile_details_async_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: Profile Id (Required). (required)
        :return: DeviceProfileV2Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_get_device_profile_details_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if self.api_client.client_side_validation and ('profile_id' not in params or
                                                       params['profile_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_id` when calling `profiles_v2_get_device_profile_details_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceProfileV2Entity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_get_payload_keys(self, platform, payload, **kwargs):  # noqa: E501
        """Gets PayloadKeys.  # noqa: E501

        Gets PayloadKeys for the specified Platform and Payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_get_payload_keys(platform, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform: Platform Name (Required). (required)
        :param str payload: Payload Name (Required). (required)
        :param str context_type: Context Type.
        :return: DeviceProfileV2Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_get_payload_keys_with_http_info(platform, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_get_payload_keys_with_http_info(platform, payload, **kwargs)  # noqa: E501
            return data

    def profiles_v2_get_payload_keys_with_http_info(self, platform, payload, **kwargs):  # noqa: E501
        """Gets PayloadKeys.  # noqa: E501

        Gets PayloadKeys for the specified Platform and Payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_get_payload_keys_with_http_info(platform, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str platform: Platform Name (Required). (required)
        :param str payload: Payload Name (Required). (required)
        :param str context_type: Context Type.
        :return: DeviceProfileV2Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['platform', 'payload', 'context_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_get_payload_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'platform' is set
        if self.api_client.client_side_validation and ('platform' not in params or
                                                       params['platform'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `platform` when calling `profiles_v2_get_payload_keys`")  # noqa: E501
        # verify the required parameter 'payload' is set
        if self.api_client.client_side_validation and ('payload' not in params or
                                                       params['payload'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `profiles_v2_get_payload_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'platform' in params:
            path_params['platform'] = params['platform']  # noqa: E501
        if 'payload' in params:
            path_params['payload'] = params['payload']  # noqa: E501

        query_params = []
        if 'context_type' in params:
            query_params.append(('contextType', params['context_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/{platform}/payloads/{payload}/getpayloadkeys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceProfileV2Entity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_get_profile_resource_details(self, id, **kwargs):  # noqa: E501
        """Gets a Resource for a given Resource ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_get_profile_resource_details(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Resource ID (Required). (required)
        :return: ProfileResourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_get_profile_resource_details_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_get_profile_resource_details_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def profiles_v2_get_profile_resource_details_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets a Resource for a given Resource ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_get_profile_resource_details_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Resource ID (Required). (required)
        :return: ProfileResourceModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_get_profile_resource_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `profiles_v2_get_profile_resource_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/resources/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileResourceModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_get_profile_resource_keys(self, resource_type, **kwargs):  # noqa: E501
        """Gets Resource keys and advanced settings for the specified Resource type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_get_profile_resource_keys(resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: ResourceType (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_get_profile_resource_keys_with_http_info(resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_get_profile_resource_keys_with_http_info(resource_type, **kwargs)  # noqa: E501
            return data

    def profiles_v2_get_profile_resource_keys_with_http_info(self, resource_type, **kwargs):  # noqa: E501
        """Gets Resource keys and advanced settings for the specified Resource type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_get_profile_resource_keys_with_http_info(resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: ResourceType (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_get_profile_resource_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in params or
                                                       params['resource_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_type` when calling `profiles_v2_get_profile_resource_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/resources/{resourceType}/resourcekeys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_search_profiles(self, **kwargs):  # noqa: E501
        """Gets List of profiles based on the search criteria.  # noqa: E501

        The search result will contain profile's basic informations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_search_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization Group ID.
        :param object organizationgroupuuid: Organization group uuid, based on we search the profiles, organizationgroupid will be ignored if valid organizationgroupuuid is Passed. 
        :param str platform: Platform name.
        :param str profiletype: Profile Type.
        :param str status: Profile status (Active or Inactive).
        :param str searchtext: search text.
        :param str orderby: Orderby parameter name.
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :param int page: Page number.
        :param int pagesize: Maximum results which should be returned in each page.
        :param bool includeandroidforwork: It will include androidforwork profiles.
        :param str payload_name: search with anyone of the payload name :Passcode, Email, Wi-Fi, Restriction, Vpn, CustomSetting, CustomAttribute, ExchangeActiveSync, ExchangeWebServices, Device,              SharedDevice, Notifications, HomeScreenLayout, GoogleAccount, ManagedDomains, WebClips, BookmarkSettings, SingleAppMode, SingleSignOn, Permissions, PublicAppAutoUpdate, CustomMessages, ApplicationControl,              NetworkSharePoint, DiskEncryption, KernelExtension, PrivacyPreferences, SmartCard, ConferenceRoomDisplay, WindowsLicensing, OemUpdates, WindowsAutomaticUpdates, Encryption, BIOS, UserData, Customization, PassportForWork,              Scep, Firewall, Proxy, Windows10Kiosk, Antivirus, P2PBranchCacheSettings, UnifiedWriteFilter, AssignedAccess, ShortcutSettings, Certificate.
        :return: ProfileSearchResultV2Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_search_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_search_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v2_search_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """Gets List of profiles based on the search criteria.  # noqa: E501

        The search result will contain profile's basic informations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_search_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization Group ID.
        :param object organizationgroupuuid: Organization group uuid, based on we search the profiles, organizationgroupid will be ignored if valid organizationgroupuuid is Passed. 
        :param str platform: Platform name.
        :param str profiletype: Profile Type.
        :param str status: Profile status (Active or Inactive).
        :param str searchtext: search text.
        :param str orderby: Orderby parameter name.
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :param int page: Page number.
        :param int pagesize: Maximum results which should be returned in each page.
        :param bool includeandroidforwork: It will include androidforwork profiles.
        :param str payload_name: search with anyone of the payload name :Passcode, Email, Wi-Fi, Restriction, Vpn, CustomSetting, CustomAttribute, ExchangeActiveSync, ExchangeWebServices, Device,              SharedDevice, Notifications, HomeScreenLayout, GoogleAccount, ManagedDomains, WebClips, BookmarkSettings, SingleAppMode, SingleSignOn, Permissions, PublicAppAutoUpdate, CustomMessages, ApplicationControl,              NetworkSharePoint, DiskEncryption, KernelExtension, PrivacyPreferences, SmartCard, ConferenceRoomDisplay, WindowsLicensing, OemUpdates, WindowsAutomaticUpdates, Encryption, BIOS, UserData, Customization, PassportForWork,              Scep, Firewall, Proxy, Windows10Kiosk, Antivirus, P2PBranchCacheSettings, UnifiedWriteFilter, AssignedAccess, ShortcutSettings, Certificate.
        :return: ProfileSearchResultV2Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'organizationgroupuuid', 'platform', 'profiletype', 'status', 'searchtext', 'orderby', 'sortorder', 'page', 'pagesize', 'includeandroidforwork', 'payload_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_search_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'profiletype' in params:
            query_params.append(('profiletype', params['profiletype']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'searchtext' in params:
            query_params.append(('searchtext', params['searchtext']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'includeandroidforwork' in params:
            query_params.append(('includeandroidforwork', params['includeandroidforwork']))  # noqa: E501
        if 'payload_name' in params:
            query_params.append(('payloadName', params['payload_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileSearchResultV2Entity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_update_android_device_profile_async(self, **kwargs):  # noqa: E501
        """Updates an ANDROID Device Profile.  If the CreateNewVersion key is empty or false, a new Profile version will not be created but AssignedSmartGroups, RootLocationGroup, AssignedGeofenceArea and AssignedSchedule will be saved and published.  Else if it's true, new version of the profile will be created and published.  # noqa: E501

        1. v2  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_android_device_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AndroidDeviceProfileV2Entity device_profile: AndroidDeviceProfileEntity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_update_android_device_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_update_android_device_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v2_update_android_device_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """Updates an ANDROID Device Profile.  If the CreateNewVersion key is empty or false, a new Profile version will not be created but AssignedSmartGroups, RootLocationGroup, AssignedGeofenceArea and AssignedSchedule will be saved and published.  Else if it's true, new version of the profile will be created and published.  # noqa: E501

        1. v2  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_android_device_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AndroidDeviceProfileV2Entity device_profile: AndroidDeviceProfileEntity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_update_android_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/android/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_update_apple_device_profile_async(self, **kwargs):  # noqa: E501
        """Updates an Apple iOS device profile.  # noqa: E501

        1. Updates an Apple device profile identified by its numeric ID.  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_apple_device_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleDeviceProfileV2Entity device_profile: Apple Device Profile V2 Entity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_update_apple_device_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_update_apple_device_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v2_update_apple_device_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """Updates an Apple iOS device profile.  # noqa: E501

        1. Updates an Apple device profile identified by its numeric ID.  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_apple_device_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleDeviceProfileV2Entity device_profile: Apple Device Profile V2 Entity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_update_apple_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/apple/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_update_apple_os_x_device_profile_async(self, **kwargs):  # noqa: E501
        """Updates an Apple macOS device Profile.  # noqa: E501

        1. Updates an Apple macOS device profile identified by its numeric ID.  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_apple_os_x_device_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleOsXDeviceProfileEntity device_profile: Apple macOS Device Profile Entity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_update_apple_os_x_device_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_update_apple_os_x_device_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v2_update_apple_os_x_device_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """Updates an Apple macOS device Profile.  # noqa: E501

        1. Updates an Apple macOS device profile identified by its numeric ID.  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_apple_os_x_device_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleOsXDeviceProfileEntity device_profile: Apple macOS Device Profile Entity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_update_apple_os_x_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/appleosx/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_update_apple_tv_profiles(self, apple_tv_device_profile_v2_entity, profile_id, **kwargs):  # noqa: E501
        """New - Update an existing profile for apple tv  # noqa: E501

        Update an existing profile for apple tv with new configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_apple_tv_profiles(apple_tv_device_profile_v2_entity, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleTvDeviceProfileV2Entity apple_tv_device_profile_v2_entity: Apple tv device profile to be updated(Required) (required)
        :param int profile_id: Profile id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_update_apple_tv_profiles_with_http_info(apple_tv_device_profile_v2_entity, profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_update_apple_tv_profiles_with_http_info(apple_tv_device_profile_v2_entity, profile_id, **kwargs)  # noqa: E501
            return data

    def profiles_v2_update_apple_tv_profiles_with_http_info(self, apple_tv_device_profile_v2_entity, profile_id, **kwargs):  # noqa: E501
        """New - Update an existing profile for apple tv  # noqa: E501

        Update an existing profile for apple tv with new configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_apple_tv_profiles_with_http_info(apple_tv_device_profile_v2_entity, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AppleTvDeviceProfileV2Entity apple_tv_device_profile_v2_entity: Apple tv device profile to be updated(Required) (required)
        :param int profile_id: Profile id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['apple_tv_device_profile_v2_entity', 'profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_update_apple_tv_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'apple_tv_device_profile_v2_entity' is set
        if self.api_client.client_side_validation and ('apple_tv_device_profile_v2_entity' not in params or
                                                       params['apple_tv_device_profile_v2_entity'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `apple_tv_device_profile_v2_entity` when calling `profiles_v2_update_apple_tv_profiles`")  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if self.api_client.client_side_validation and ('profile_id' not in params or
                                                       params['profile_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_id` when calling `profiles_v2_update_apple_tv_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'apple_tv_device_profile_v2_entity' in params:
            body_params = params['apple_tv_device_profile_v2_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/appletv/{profileId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_update_epson_printer_profiles(self, epson_printer_profile_model, profile_id, **kwargs):  # noqa: E501
        """New - Update the existing printer profile for Epson.  # noqa: E501

        Update the existing Epson printer profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_epson_printer_profiles(epson_printer_profile_model, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EpsonPrinterProfileV2Model epson_printer_profile_model: Epson device profile to be updated.(Required) (required)
        :param int profile_id: Profile id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_update_epson_printer_profiles_with_http_info(epson_printer_profile_model, profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_update_epson_printer_profiles_with_http_info(epson_printer_profile_model, profile_id, **kwargs)  # noqa: E501
            return data

    def profiles_v2_update_epson_printer_profiles_with_http_info(self, epson_printer_profile_model, profile_id, **kwargs):  # noqa: E501
        """New - Update the existing printer profile for Epson.  # noqa: E501

        Update the existing Epson printer profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_epson_printer_profiles_with_http_info(epson_printer_profile_model, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EpsonPrinterProfileV2Model epson_printer_profile_model: Epson device profile to be updated.(Required) (required)
        :param int profile_id: Profile id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['epson_printer_profile_model', 'profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_update_epson_printer_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'epson_printer_profile_model' is set
        if self.api_client.client_side_validation and ('epson_printer_profile_model' not in params or
                                                       params['epson_printer_profile_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `epson_printer_profile_model` when calling `profiles_v2_update_epson_printer_profiles`")  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if self.api_client.client_side_validation and ('profile_id' not in params or
                                                       params['profile_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_id` when calling `profiles_v2_update_epson_printer_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'epson_printer_profile_model' in params:
            body_params = params['epson_printer_profile_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/epson/{profileId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_update_profile_resource_async(self, resource_type, **kwargs):  # noqa: E501
        """Updates the given Resource entity.  # noqa: E501

        Updates the passed in Resource Entity(VPN/Wifi/EAS entity).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_profile_resource_async(resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: (required)
        :param str resource_name: Gets or sets resource name.
        :param str resource_description: Gets or sets resource description.
        :param int resource_id: Gets or sets resource id.
        :param str resource_assignment_assignment_type: Gets or sets assignment Type for Resource.
        :param int resource_assignment_managed_location_group_id: Gets or sets root Organization Group Id.
        :param list[int] resource_assignment_assigned_smart_groups: Gets or sets the SmartGroups need to be assigned.
        :param list[int] resource_assignment_excluded_smart_groups: Gets or sets the SmartGroups need to be excluded.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_update_profile_resource_async_with_http_info(resource_type, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_update_profile_resource_async_with_http_info(resource_type, **kwargs)  # noqa: E501
            return data

    def profiles_v2_update_profile_resource_async_with_http_info(self, resource_type, **kwargs):  # noqa: E501
        """Updates the given Resource entity.  # noqa: E501

        Updates the passed in Resource Entity(VPN/Wifi/EAS entity).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_profile_resource_async_with_http_info(resource_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str resource_type: (required)
        :param str resource_name: Gets or sets resource name.
        :param str resource_description: Gets or sets resource description.
        :param int resource_id: Gets or sets resource id.
        :param str resource_assignment_assignment_type: Gets or sets assignment Type for Resource.
        :param int resource_assignment_managed_location_group_id: Gets or sets root Organization Group Id.
        :param list[int] resource_assignment_assigned_smart_groups: Gets or sets the SmartGroups need to be assigned.
        :param list[int] resource_assignment_excluded_smart_groups: Gets or sets the SmartGroups need to be excluded.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_type', 'resource_name', 'resource_description', 'resource_id', 'resource_assignment_assignment_type', 'resource_assignment_managed_location_group_id', 'resource_assignment_assigned_smart_groups', 'resource_assignment_excluded_smart_groups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_update_profile_resource_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_type' is set
        if self.api_client.client_side_validation and ('resource_type' not in params or
                                                       params['resource_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `resource_type` when calling `profiles_v2_update_profile_resource_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']  # noqa: E501

        query_params = []
        if 'resource_name' in params:
            query_params.append(('resource.name', params['resource_name']))  # noqa: E501
        if 'resource_description' in params:
            query_params.append(('resource.description', params['resource_description']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resource.id', params['resource_id']))  # noqa: E501
        if 'resource_assignment_assignment_type' in params:
            query_params.append(('resource.assignment.assignmentType', params['resource_assignment_assignment_type']))  # noqa: E501
        if 'resource_assignment_managed_location_group_id' in params:
            query_params.append(('resource.assignment.managedLocationGroupID', params['resource_assignment_managed_location_group_id']))  # noqa: E501
        if 'resource_assignment_assigned_smart_groups' in params:
            query_params.append(('resource.assignment.assignedSmartGroups', params['resource_assignment_assigned_smart_groups']))  # noqa: E501
            collection_formats['resource.assignment.assignedSmartGroups'] = 'multi'  # noqa: E501
        if 'resource_assignment_excluded_smart_groups' in params:
            query_params.append(('resource.assignment.excludedSmartGroups', params['resource_assignment_excluded_smart_groups']))  # noqa: E501
            collection_formats['resource.assignment.excludedSmartGroups'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/resources/{resourceType}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v2_update_qnx_device_profile_async(self, **kwargs):  # noqa: E501
        """Updates the custom attributes details of existing QNX Device Profile.  # noqa: E501

        1. Updates the details of existing QNX profiles. <br> The details majorly include the custom attribute name, value and application group.</br>  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_qnx_device_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QnxDeviceProfileEntity device_profile: Payload containing the details of the profile to be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v2_update_qnx_device_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v2_update_qnx_device_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v2_update_qnx_device_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """Updates the custom attributes details of existing QNX Device Profile.  # noqa: E501

        1. Updates the details of existing QNX profiles. <br> The details majorly include the custom attribute name, value and application group.</br>  2. For Compliance Assignment Type Allow Removal should always be Never.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v2_update_qnx_device_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QnxDeviceProfileEntity device_profile: Payload containing the details of the profile to be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v2_update_qnx_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/qnx/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
