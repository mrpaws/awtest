# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXRestrictionApplicationsPayloadEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_centre': 'AppleOsXRestrictionGameCentrePayloadEntity_',
        'safari': 'AppleOsXRestrictionSafariPayloadEntity_',
        'camera': 'AppleOsXRestrictionCameraPayloadEntity_',
        'app_store': 'AppleOsXRestrictionAppStorePayloadEntity_',
        'apple_music': 'AppleOsXRestrictionAppleMusicPayloadEntity_',
        'restrict_which_applications_are_allowed_to_launch': 'bool',
        'allow_application': 'list[str]',
        'allow_folders': 'list[str]',
        'disallow_folders': 'list[str]'
    }

    attribute_map = {
        'game_centre': 'GameCentre',
        'safari': 'Safari',
        'camera': 'Camera',
        'app_store': 'AppStore',
        'apple_music': 'AppleMusic',
        'restrict_which_applications_are_allowed_to_launch': 'RestrictWhichApplicationsAreAllowedToLaunch',
        'allow_application': 'AllowApplication',
        'allow_folders': 'AllowFolders',
        'disallow_folders': 'DisallowFolders'
    }

    def __init__(self, game_centre=None, safari=None, camera=None, app_store=None, apple_music=None, restrict_which_applications_are_allowed_to_launch=None, allow_application=None, allow_folders=None, disallow_folders=None, _configuration=None):  # noqa: E501
        """AppleOsXRestrictionApplicationsPayloadEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._game_centre = None
        self._safari = None
        self._camera = None
        self._app_store = None
        self._apple_music = None
        self._restrict_which_applications_are_allowed_to_launch = None
        self._allow_application = None
        self._allow_folders = None
        self._disallow_folders = None
        self.discriminator = None

        if game_centre is not None:
            self.game_centre = game_centre
        if safari is not None:
            self.safari = safari
        if camera is not None:
            self.camera = camera
        if app_store is not None:
            self.app_store = app_store
        if apple_music is not None:
            self.apple_music = apple_music
        if restrict_which_applications_are_allowed_to_launch is not None:
            self.restrict_which_applications_are_allowed_to_launch = restrict_which_applications_are_allowed_to_launch
        if allow_application is not None:
            self.allow_application = allow_application
        if allow_folders is not None:
            self.allow_folders = allow_folders
        if disallow_folders is not None:
            self.disallow_folders = disallow_folders

    @property
    def game_centre(self):
        """Gets the game_centre of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501

        Gets or sets restriction Game Center payload.  # noqa: E501

        :return: The game_centre of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionGameCentrePayloadEntity_
        """
        return self._game_centre

    @game_centre.setter
    def game_centre(self, game_centre):
        """Sets the game_centre of this AppleOsXRestrictionApplicationsPayloadEntity.

        Gets or sets restriction Game Center payload.  # noqa: E501

        :param game_centre: The game_centre of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionGameCentrePayloadEntity_
        """

        self._game_centre = game_centre

    @property
    def safari(self):
        """Gets the safari of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501

        Gets or sets restriction Safari payload.  # noqa: E501

        :return: The safari of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionSafariPayloadEntity_
        """
        return self._safari

    @safari.setter
    def safari(self, safari):
        """Sets the safari of this AppleOsXRestrictionApplicationsPayloadEntity.

        Gets or sets restriction Safari payload.  # noqa: E501

        :param safari: The safari of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionSafariPayloadEntity_
        """

        self._safari = safari

    @property
    def camera(self):
        """Gets the camera of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501

        Gets or sets restriction Camera payload.  # noqa: E501

        :return: The camera of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionCameraPayloadEntity_
        """
        return self._camera

    @camera.setter
    def camera(self, camera):
        """Sets the camera of this AppleOsXRestrictionApplicationsPayloadEntity.

        Gets or sets restriction Camera payload.  # noqa: E501

        :param camera: The camera of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionCameraPayloadEntity_
        """

        self._camera = camera

    @property
    def app_store(self):
        """Gets the app_store of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501

        Gets or sets restriction App Store payload.  # noqa: E501

        :return: The app_store of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionAppStorePayloadEntity_
        """
        return self._app_store

    @app_store.setter
    def app_store(self, app_store):
        """Sets the app_store of this AppleOsXRestrictionApplicationsPayloadEntity.

        Gets or sets restriction App Store payload.  # noqa: E501

        :param app_store: The app_store of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionAppStorePayloadEntity_
        """

        self._app_store = app_store

    @property
    def apple_music(self):
        """Gets the apple_music of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501

        Gets or sets restriction Apple Music payload.  # noqa: E501

        :return: The apple_music of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionAppleMusicPayloadEntity_
        """
        return self._apple_music

    @apple_music.setter
    def apple_music(self, apple_music):
        """Sets the apple_music of this AppleOsXRestrictionApplicationsPayloadEntity.

        Gets or sets restriction Apple Music payload.  # noqa: E501

        :param apple_music: The apple_music of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionAppleMusicPayloadEntity_
        """

        self._apple_music = apple_music

    @property
    def restrict_which_applications_are_allowed_to_launch(self):
        """Gets the restrict_which_applications_are_allowed_to_launch of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Family Controls.  # noqa: E501

        :return: The restrict_which_applications_are_allowed_to_launch of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_which_applications_are_allowed_to_launch

    @restrict_which_applications_are_allowed_to_launch.setter
    def restrict_which_applications_are_allowed_to_launch(self, restrict_which_applications_are_allowed_to_launch):
        """Sets the restrict_which_applications_are_allowed_to_launch of this AppleOsXRestrictionApplicationsPayloadEntity.

        Gets or sets a value indicating whether whether to enable of the Family Controls.  # noqa: E501

        :param restrict_which_applications_are_allowed_to_launch: The restrict_which_applications_are_allowed_to_launch of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._restrict_which_applications_are_allowed_to_launch = restrict_which_applications_are_allowed_to_launch

    @property
    def allow_application(self):
        """Gets the allow_application of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501

        Gets or sets list of applications to be allowed.  # noqa: E501

        :return: The allow_application of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow_application

    @allow_application.setter
    def allow_application(self, allow_application):
        """Sets the allow_application of this AppleOsXRestrictionApplicationsPayloadEntity.

        Gets or sets list of applications to be allowed.  # noqa: E501

        :param allow_application: The allow_application of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._allow_application = allow_application

    @property
    def allow_folders(self):
        """Gets the allow_folders of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501

        Gets or sets list of folders to be allowed.  # noqa: E501

        :return: The allow_folders of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow_folders

    @allow_folders.setter
    def allow_folders(self, allow_folders):
        """Sets the allow_folders of this AppleOsXRestrictionApplicationsPayloadEntity.

        Gets or sets list of folders to be allowed.  # noqa: E501

        :param allow_folders: The allow_folders of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._allow_folders = allow_folders

    @property
    def disallow_folders(self):
        """Gets the disallow_folders of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501

        Gets or sets list of folders to be disallowed.  # noqa: E501

        :return: The disallow_folders of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._disallow_folders

    @disallow_folders.setter
    def disallow_folders(self, disallow_folders):
        """Sets the disallow_folders of this AppleOsXRestrictionApplicationsPayloadEntity.

        Gets or sets list of folders to be disallowed.  # noqa: E501

        :param disallow_folders: The disallow_folders of this AppleOsXRestrictionApplicationsPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._disallow_folders = disallow_folders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXRestrictionApplicationsPayloadEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXRestrictionApplicationsPayloadEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXRestrictionApplicationsPayloadEntity):
            return True

        return self.to_dict() != other.to_dict()
