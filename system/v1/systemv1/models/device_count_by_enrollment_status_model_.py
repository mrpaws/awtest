# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class DeviceCountByEnrollmentStatusModel_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discovered': 'int',
        'registered': 'int',
        'enrollment_in_progress': 'int',
        'enrolled': 'int',
        'enterprise_wipe_pending': 'int',
        'device_wipe_pending': 'int',
        'retired': 'int',
        'unenrolled': 'int',
        'app_catalog_only': 'int',
        'black_listed': 'int',
        'pending_agent': 'int',
        'unenrolled_by_feedback_service': 'int'
    }

    attribute_map = {
        'discovered': 'Discovered',
        'registered': 'Registered',
        'enrollment_in_progress': 'EnrollmentInProgress',
        'enrolled': 'Enrolled',
        'enterprise_wipe_pending': 'EnterpriseWipePending',
        'device_wipe_pending': 'DeviceWipePending',
        'retired': 'Retired',
        'unenrolled': 'Unenrolled',
        'app_catalog_only': 'AppCatalogOnly',
        'black_listed': 'BlackListed',
        'pending_agent': 'PendingAgent',
        'unenrolled_by_feedback_service': 'UnenrolledByFeedbackService'
    }

    def __init__(self, discovered=None, registered=None, enrollment_in_progress=None, enrolled=None, enterprise_wipe_pending=None, device_wipe_pending=None, retired=None, unenrolled=None, app_catalog_only=None, black_listed=None, pending_agent=None, unenrolled_by_feedback_service=None, _configuration=None):  # noqa: E501
        """DeviceCountByEnrollmentStatusModel_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._discovered = None
        self._registered = None
        self._enrollment_in_progress = None
        self._enrolled = None
        self._enterprise_wipe_pending = None
        self._device_wipe_pending = None
        self._retired = None
        self._unenrolled = None
        self._app_catalog_only = None
        self._black_listed = None
        self._pending_agent = None
        self._unenrolled_by_feedback_service = None
        self.discriminator = None

        if discovered is not None:
            self.discovered = discovered
        if registered is not None:
            self.registered = registered
        if enrollment_in_progress is not None:
            self.enrollment_in_progress = enrollment_in_progress
        if enrolled is not None:
            self.enrolled = enrolled
        if enterprise_wipe_pending is not None:
            self.enterprise_wipe_pending = enterprise_wipe_pending
        if device_wipe_pending is not None:
            self.device_wipe_pending = device_wipe_pending
        if retired is not None:
            self.retired = retired
        if unenrolled is not None:
            self.unenrolled = unenrolled
        if app_catalog_only is not None:
            self.app_catalog_only = app_catalog_only
        if black_listed is not None:
            self.black_listed = black_listed
        if pending_agent is not None:
            self.pending_agent = pending_agent
        if unenrolled_by_feedback_service is not None:
            self.unenrolled_by_feedback_service = unenrolled_by_feedback_service

    @property
    def discovered(self):
        """Gets the discovered of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the Discovered device count for this Location Group.  # noqa: E501

        :return: The discovered of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._discovered

    @discovered.setter
    def discovered(self, discovered):
        """Sets the discovered of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the Discovered device count for this Location Group.  # noqa: E501

        :param discovered: The discovered of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._discovered = discovered

    @property
    def registered(self):
        """Gets the registered of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the Registered device count for this Location Group.  # noqa: E501

        :return: The registered of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the Registered device count for this Location Group.  # noqa: E501

        :param registered: The registered of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._registered = registered

    @property
    def enrollment_in_progress(self):
        """Gets the enrollment_in_progress of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the EnrollmentInProgress device count for this Location Group.  # noqa: E501

        :return: The enrollment_in_progress of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_in_progress

    @enrollment_in_progress.setter
    def enrollment_in_progress(self, enrollment_in_progress):
        """Sets the enrollment_in_progress of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the EnrollmentInProgress device count for this Location Group.  # noqa: E501

        :param enrollment_in_progress: The enrollment_in_progress of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._enrollment_in_progress = enrollment_in_progress

    @property
    def enrolled(self):
        """Gets the enrolled of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the Enrolled device count for this Location Group.  # noqa: E501

        :return: The enrolled of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._enrolled

    @enrolled.setter
    def enrolled(self, enrolled):
        """Sets the enrolled of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the Enrolled device count for this Location Group.  # noqa: E501

        :param enrolled: The enrolled of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._enrolled = enrolled

    @property
    def enterprise_wipe_pending(self):
        """Gets the enterprise_wipe_pending of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the EnterpriseWipe device count for this Location Group.  # noqa: E501

        :return: The enterprise_wipe_pending of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._enterprise_wipe_pending

    @enterprise_wipe_pending.setter
    def enterprise_wipe_pending(self, enterprise_wipe_pending):
        """Sets the enterprise_wipe_pending of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the EnterpriseWipe device count for this Location Group.  # noqa: E501

        :param enterprise_wipe_pending: The enterprise_wipe_pending of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._enterprise_wipe_pending = enterprise_wipe_pending

    @property
    def device_wipe_pending(self):
        """Gets the device_wipe_pending of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the EnterprisePending device count for this Location Group.  # noqa: E501

        :return: The device_wipe_pending of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._device_wipe_pending

    @device_wipe_pending.setter
    def device_wipe_pending(self, device_wipe_pending):
        """Sets the device_wipe_pending of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the EnterprisePending device count for this Location Group.  # noqa: E501

        :param device_wipe_pending: The device_wipe_pending of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._device_wipe_pending = device_wipe_pending

    @property
    def retired(self):
        """Gets the retired of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the Retired device count for this Location Group.  # noqa: E501

        :return: The retired of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._retired

    @retired.setter
    def retired(self, retired):
        """Sets the retired of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the Retired device count for this Location Group.  # noqa: E501

        :param retired: The retired of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._retired = retired

    @property
    def unenrolled(self):
        """Gets the unenrolled of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the Unenrolled device count for this Location Group.  # noqa: E501

        :return: The unenrolled of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._unenrolled

    @unenrolled.setter
    def unenrolled(self, unenrolled):
        """Sets the unenrolled of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the Unenrolled device count for this Location Group.  # noqa: E501

        :param unenrolled: The unenrolled of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._unenrolled = unenrolled

    @property
    def app_catalog_only(self):
        """Gets the app_catalog_only of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the AppCatalogOnly device count for this Location Group.  # noqa: E501

        :return: The app_catalog_only of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._app_catalog_only

    @app_catalog_only.setter
    def app_catalog_only(self, app_catalog_only):
        """Sets the app_catalog_only of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the AppCatalogOnly device count for this Location Group.  # noqa: E501

        :param app_catalog_only: The app_catalog_only of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._app_catalog_only = app_catalog_only

    @property
    def black_listed(self):
        """Gets the black_listed of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the BlackListed device count for this Location Group.  # noqa: E501

        :return: The black_listed of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._black_listed

    @black_listed.setter
    def black_listed(self, black_listed):
        """Sets the black_listed of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the BlackListed device count for this Location Group.  # noqa: E501

        :param black_listed: The black_listed of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._black_listed = black_listed

    @property
    def pending_agent(self):
        """Gets the pending_agent of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the PendingAgent device count for this Location Group.  # noqa: E501

        :return: The pending_agent of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._pending_agent

    @pending_agent.setter
    def pending_agent(self, pending_agent):
        """Sets the pending_agent of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the PendingAgent device count for this Location Group.  # noqa: E501

        :param pending_agent: The pending_agent of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._pending_agent = pending_agent

    @property
    def unenrolled_by_feedback_service(self):
        """Gets the unenrolled_by_feedback_service of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501

        Gets or sets the UnenrolledByFeedbackService device count for this Location Group.  # noqa: E501

        :return: The unenrolled_by_feedback_service of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :rtype: int
        """
        return self._unenrolled_by_feedback_service

    @unenrolled_by_feedback_service.setter
    def unenrolled_by_feedback_service(self, unenrolled_by_feedback_service):
        """Sets the unenrolled_by_feedback_service of this DeviceCountByEnrollmentStatusModel_.

        Gets or sets the UnenrolledByFeedbackService device count for this Location Group.  # noqa: E501

        :param unenrolled_by_feedback_service: The unenrolled_by_feedback_service of this DeviceCountByEnrollmentStatusModel_.  # noqa: E501
        :type: int
        """

        self._unenrolled_by_feedback_service = unenrolled_by_feedback_service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCountByEnrollmentStatusModel_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCountByEnrollmentStatusModel_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCountByEnrollmentStatusModel_):
            return True

        return self.to_dict() != other.to_dict()
