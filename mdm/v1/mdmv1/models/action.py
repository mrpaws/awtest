# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class Action(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type_id': 'int',
        'item_id': 'int',
        'persist': 'bool',
        'app_tunneling': 'bool',
        'android_legacy_vpn_profile_uuid': 'str',
        'android_for_work_vpn_profile_uuid': 'str'
    }

    attribute_map = {
        'action_type_id': 'ActionTypeID',
        'item_id': 'ItemID',
        'persist': 'Persist',
        'app_tunneling': 'AppTunneling',
        'android_legacy_vpn_profile_uuid': 'AndroidLegacyVpnProfileUuid',
        'android_for_work_vpn_profile_uuid': 'AndroidForWorkVpnProfileUuid'
    }

    def __init__(self, action_type_id=None, item_id=None, persist=None, app_tunneling=None, android_legacy_vpn_profile_uuid=None, android_for_work_vpn_profile_uuid=None, _configuration=None):  # noqa: E501
        """Action - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action_type_id = None
        self._item_id = None
        self._persist = None
        self._app_tunneling = None
        self._android_legacy_vpn_profile_uuid = None
        self._android_for_work_vpn_profile_uuid = None
        self.discriminator = None

        if action_type_id is not None:
            self.action_type_id = action_type_id
        if item_id is not None:
            self.item_id = item_id
        if persist is not None:
            self.persist = persist
        if app_tunneling is not None:
            self.app_tunneling = app_tunneling
        if android_legacy_vpn_profile_uuid is not None:
            self.android_legacy_vpn_profile_uuid = android_legacy_vpn_profile_uuid
        if android_for_work_vpn_profile_uuid is not None:
            self.android_for_work_vpn_profile_uuid = android_for_work_vpn_profile_uuid

    @property
    def action_type_id(self):
        """Gets the action_type_id of this Action.  # noqa: E501

        Gets or sets type of Actions [Eg. 1 - InstallProfile, 2 - UninstallProfile, 3 - InstallApplication, 4 - UninstallApplication].  # noqa: E501

        :return: The action_type_id of this Action.  # noqa: E501
        :rtype: int
        """
        return self._action_type_id

    @action_type_id.setter
    def action_type_id(self, action_type_id):
        """Sets the action_type_id of this Action.

        Gets or sets type of Actions [Eg. 1 - InstallProfile, 2 - UninstallProfile, 3 - InstallApplication, 4 - UninstallApplication].  # noqa: E501

        :param action_type_id: The action_type_id of this Action.  # noqa: E501
        :type: int
        """

        self._action_type_id = action_type_id

    @property
    def item_id(self):
        """Gets the item_id of this Action.  # noqa: E501

        Gets or sets provisioning Enabled Application ID or Profile ID.  # noqa: E501

        :return: The item_id of this Action.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Action.

        Gets or sets provisioning Enabled Application ID or Profile ID.  # noqa: E501

        :param item_id: The item_id of this Action.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def persist(self):
        """Gets the persist of this Action.  # noqa: E501

        Gets or sets a value indicating whether flag to indicate whether Resulted Action should Persist through enterprise reset.  # noqa: E501

        :return: The persist of this Action.  # noqa: E501
        :rtype: bool
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this Action.

        Gets or sets a value indicating whether flag to indicate whether Resulted Action should Persist through enterprise reset.  # noqa: E501

        :param persist: The persist of this Action.  # noqa: E501
        :type: bool
        """

        self._persist = persist

    @property
    def app_tunneling(self):
        """Gets the app_tunneling of this Action.  # noqa: E501

        Gets or sets a value indicating whether gets or Sets whether AppTunneling should be configured.  # noqa: E501

        :return: The app_tunneling of this Action.  # noqa: E501
        :rtype: bool
        """
        return self._app_tunneling

    @app_tunneling.setter
    def app_tunneling(self, app_tunneling):
        """Sets the app_tunneling of this Action.

        Gets or sets a value indicating whether gets or Sets whether AppTunneling should be configured.  # noqa: E501

        :param app_tunneling: The app_tunneling of this Action.  # noqa: E501
        :type: bool
        """

        self._app_tunneling = app_tunneling

    @property
    def android_legacy_vpn_profile_uuid(self):
        """Gets the android_legacy_vpn_profile_uuid of this Action.  # noqa: E501

        Gets or Sets Android Legacy VPN profile UUID.  # noqa: E501

        :return: The android_legacy_vpn_profile_uuid of this Action.  # noqa: E501
        :rtype: str
        """
        return self._android_legacy_vpn_profile_uuid

    @android_legacy_vpn_profile_uuid.setter
    def android_legacy_vpn_profile_uuid(self, android_legacy_vpn_profile_uuid):
        """Sets the android_legacy_vpn_profile_uuid of this Action.

        Gets or Sets Android Legacy VPN profile UUID.  # noqa: E501

        :param android_legacy_vpn_profile_uuid: The android_legacy_vpn_profile_uuid of this Action.  # noqa: E501
        :type: str
        """

        self._android_legacy_vpn_profile_uuid = android_legacy_vpn_profile_uuid

    @property
    def android_for_work_vpn_profile_uuid(self):
        """Gets the android_for_work_vpn_profile_uuid of this Action.  # noqa: E501

        Gets or Sets Android For Work VPN profile UUID.  # noqa: E501

        :return: The android_for_work_vpn_profile_uuid of this Action.  # noqa: E501
        :rtype: str
        """
        return self._android_for_work_vpn_profile_uuid

    @android_for_work_vpn_profile_uuid.setter
    def android_for_work_vpn_profile_uuid(self, android_for_work_vpn_profile_uuid):
        """Sets the android_for_work_vpn_profile_uuid of this Action.

        Gets or Sets Android For Work VPN profile UUID.  # noqa: E501

        :param android_for_work_vpn_profile_uuid: The android_for_work_vpn_profile_uuid of this Action.  # noqa: E501
        :type: str
        """

        self._android_for_work_vpn_profile_uuid = android_for_work_vpn_profile_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Action, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Action):
            return True

        return self.to_dict() != other.to_dict()
