# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv2.configuration import Configuration


class AdminUser_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'str',
        'organization_group_uuid': 'str',
        'time_zone_identifier': 'str',
        'is_active_directory_user': 'bool',
        'requires_password_change': 'bool',
        'message_type': 'int',
        'message_template_id': 'int',
        'external_id': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'password': 'Password',
        'organization_group_uuid': 'OrganizationGroupUuid',
        'time_zone_identifier': 'TimeZoneIdentifier',
        'is_active_directory_user': 'IsActiveDirectoryUser',
        'requires_password_change': 'RequiresPasswordChange',
        'message_type': 'MessageType',
        'message_template_id': 'MessageTemplateId',
        'external_id': 'ExternalId',
        'uuid': 'Uuid'
    }

    def __init__(self, password=None, organization_group_uuid=None, time_zone_identifier=None, is_active_directory_user=None, requires_password_change=None, message_type=None, message_template_id=None, external_id=None, uuid=None, _configuration=None):  # noqa: E501
        """AdminUser_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._password = None
        self._organization_group_uuid = None
        self._time_zone_identifier = None
        self._is_active_directory_user = None
        self._requires_password_change = None
        self._message_type = None
        self._message_template_id = None
        self._external_id = None
        self._uuid = None
        self.discriminator = None

        if password is not None:
            self.password = password
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if time_zone_identifier is not None:
            self.time_zone_identifier = time_zone_identifier
        if is_active_directory_user is not None:
            self.is_active_directory_user = is_active_directory_user
        if requires_password_change is not None:
            self.requires_password_change = requires_password_change
        if message_type is not None:
            self.message_type = message_type
        if message_template_id is not None:
            self.message_template_id = message_template_id
        if external_id is not None:
            self.external_id = external_id
        if uuid is not None:
            self.uuid = uuid

    @property
    def password(self):
        """Gets the password of this AdminUser_.  # noqa: E501

        Gets or sets admin user password.  # noqa: E501

        :return: The password of this AdminUser_.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AdminUser_.

        Gets or sets admin user password.  # noqa: E501

        :param password: The password of this AdminUser_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                password is not None and len(password) > 50):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 0):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `0`")  # noqa: E501

        self._password = password

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this AdminUser_.  # noqa: E501

        Gets or sets organization group UUID of the admin user.  # noqa: E501

        :return: The organization_group_uuid of this AdminUser_.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this AdminUser_.

        Gets or sets organization group UUID of the admin user.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this AdminUser_.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def time_zone_identifier(self):
        """Gets the time_zone_identifier of this AdminUser_.  # noqa: E501

        Gets or sets time zone label key.  # noqa: E501

        :return: The time_zone_identifier of this AdminUser_.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_identifier

    @time_zone_identifier.setter
    def time_zone_identifier(self, time_zone_identifier):
        """Sets the time_zone_identifier of this AdminUser_.

        Gets or sets time zone label key.  # noqa: E501

        :param time_zone_identifier: The time_zone_identifier of this AdminUser_.  # noqa: E501
        :type: str
        """

        self._time_zone_identifier = time_zone_identifier

    @property
    def is_active_directory_user(self):
        """Gets the is_active_directory_user of this AdminUser_.  # noqa: E501

        Gets or sets a value indicating whether flag to indicate whether the admin user is LDAP/AD user.  # noqa: E501

        :return: The is_active_directory_user of this AdminUser_.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_directory_user

    @is_active_directory_user.setter
    def is_active_directory_user(self, is_active_directory_user):
        """Sets the is_active_directory_user of this AdminUser_.

        Gets or sets a value indicating whether flag to indicate whether the admin user is LDAP/AD user.  # noqa: E501

        :param is_active_directory_user: The is_active_directory_user of this AdminUser_.  # noqa: E501
        :type: bool
        """

        self._is_active_directory_user = is_active_directory_user

    @property
    def requires_password_change(self):
        """Gets the requires_password_change of this AdminUser_.  # noqa: E501

        Gets or sets a value indicating whether flag to indicate whether the admin user requires to change the password on next login.  # noqa: E501

        :return: The requires_password_change of this AdminUser_.  # noqa: E501
        :rtype: bool
        """
        return self._requires_password_change

    @requires_password_change.setter
    def requires_password_change(self, requires_password_change):
        """Sets the requires_password_change of this AdminUser_.

        Gets or sets a value indicating whether flag to indicate whether the admin user requires to change the password on next login.  # noqa: E501

        :param requires_password_change: The requires_password_change of this AdminUser_.  # noqa: E501
        :type: bool
        """

        self._requires_password_change = requires_password_change

    @property
    def message_type(self):
        """Gets the message_type of this AdminUser_.  # noqa: E501

        Gets or sets message type.  # noqa: E501

        :return: The message_type of this AdminUser_.  # noqa: E501
        :rtype: int
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this AdminUser_.

        Gets or sets message type.  # noqa: E501

        :param message_type: The message_type of this AdminUser_.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, -1]  # noqa: E501
        if (self._configuration.client_side_validation and
                message_type not in allowed_values):
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def message_template_id(self):
        """Gets the message_template_id of this AdminUser_.  # noqa: E501

        Gets or sets message template id.  # noqa: E501

        :return: The message_template_id of this AdminUser_.  # noqa: E501
        :rtype: int
        """
        return self._message_template_id

    @message_template_id.setter
    def message_template_id(self, message_template_id):
        """Sets the message_template_id of this AdminUser_.

        Gets or sets message template id.  # noqa: E501

        :param message_template_id: The message_template_id of this AdminUser_.  # noqa: E501
        :type: int
        """

        self._message_template_id = message_template_id

    @property
    def external_id(self):
        """Gets the external_id of this AdminUser_.  # noqa: E501

        Gets or sets external id.  # noqa: E501

        :return: The external_id of this AdminUser_.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AdminUser_.

        Gets or sets external id.  # noqa: E501

        :param external_id: The external_id of this AdminUser_.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def uuid(self):
        """Gets the uuid of this AdminUser_.  # noqa: E501


        :return: The uuid of this AdminUser_.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AdminUser_.


        :param uuid: The uuid of this AdminUser_.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminUser_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminUser_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdminUser_):
            return True

        return self.to_dict() != other.to_dict()
