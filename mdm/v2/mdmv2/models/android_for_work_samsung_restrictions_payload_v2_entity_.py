# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkSamsungRestrictionsPayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_airplane_mode': 'bool',
        'allow_microphone': 'bool',
        'allow_home_key': 'bool',
        'allow_mock_locations': 'bool',
        'allow_clipboard': 'bool',
        'allow_account_removal': 'bool',
        'allow_power_off': 'bool',
        'allow_audio_recording': 'bool',
        'allow_video_recording': 'bool',
        'allow_killing_activities_on_leave': 'bool',
        'allow_ota_upgrade': 'bool',
        'allow_efota_registration': 'bool',
        'allow_developer_options': 'bool',
        'allow_background_data': 'bool',
        'allow_bt_desktop_connectivity': 'bool',
        'allow_bt_data_transfer': 'bool',
        'allow_wi_fi': 'bool',
        'allow_wifi_profiles': 'bool',
        'allow_cellular_data': 'bool',
        'allow_settings_changes': 'bool',
        'allow_unsecure_wifi': 'bool',
        'allow_wifi_direct': 'bool',
        'allow_roaming_voice_calls': 'bool',
        'allow_usb_tethering': 'bool',
        'allow_system_bar': 'bool',
        'allow_volume_key': 'bool',
        'allow_firmware_recovery': 'bool',
        'allow_stop_system_app': 'bool',
        'allow_roaming_data': 'bool',
        'allow_incoming_mms': 'bool',
        'allow_unsecure_vpn_connection': 'bool',
        'a2dp_enable': 'bool',
        'ftp_enable': 'bool',
        'gatt_enable': 'bool',
        'hdp_enable': 'bool',
        'hfp_enable': 'bool',
        'hid_enable': 'bool',
        'map_enable': 'bool',
        'opp_enable': 'bool',
        'enable_secure_mode': 'bool',
        'allow_sd_card_move': 'bool',
        'allow_voice_dialer': 'bool',
        'allow_headphones': 'bool',
        'allow_background_process_limit': 'bool',
        'allow_google_accounts_auto_sync': 'bool',
        'allow_sd_card_write': 'bool',
        'allow_usb_host_storage': 'bool',
        'allow_google_crash_report': 'bool',
        'allow_s_beam': 'bool',
        'allow_s_voice': 'bool',
        'allow_bt_outgoing_calls': 'bool',
        'allow_bt_discoverable_mode': 'bool',
        'pan_enable': 'bool',
        'pbap_enable': 'bool',
        'sap_enable': 'bool',
        'allow_auto_connection_wi_fi': 'bool',
        'allow_prompt_credentials': 'bool',
        'allow_vpn': 'bool',
        'allow_roaming_sync': 'bool',
        'allow_auto_sync_when_roaming_disabled': 'bool',
        'allow_non_emergency_calls': 'bool',
        'allow_user_mobile_data_limit': 'bool',
        'allow_wap_push': 'bool',
        'set_device_font': 'bool',
        'set_device_font_size': 'bool',
        'allow_task_manager': 'bool',
        'allow_menu_key': 'bool',
        'allow_back_key': 'bool',
        'allow_lock_screen_settings': 'bool',
        'allow_search_key': 'bool'
    }

    attribute_map = {
        'allow_airplane_mode': 'AllowAirplaneMode',
        'allow_microphone': 'AllowMicrophone',
        'allow_home_key': 'AllowHomeKey',
        'allow_mock_locations': 'AllowMockLocations',
        'allow_clipboard': 'AllowClipboard',
        'allow_account_removal': 'AllowAccountRemoval',
        'allow_power_off': 'AllowPowerOff',
        'allow_audio_recording': 'AllowAudioRecording',
        'allow_video_recording': 'AllowVideoRecording',
        'allow_killing_activities_on_leave': 'AllowKillingActivitiesOnLeave',
        'allow_ota_upgrade': 'AllowOTAUpgrade',
        'allow_efota_registration': 'AllowEfotaRegistration',
        'allow_developer_options': 'AllowDeveloperOptions',
        'allow_background_data': 'AllowBackgroundData',
        'allow_bt_desktop_connectivity': 'AllowBTDesktopConnectivity',
        'allow_bt_data_transfer': 'AllowBTDataTransfer',
        'allow_wi_fi': 'AllowWiFi',
        'allow_wifi_profiles': 'AllowWifiProfiles',
        'allow_cellular_data': 'AllowCellularData',
        'allow_settings_changes': 'AllowSettingsChanges',
        'allow_unsecure_wifi': 'AllowUnsecureWifi',
        'allow_wifi_direct': 'AllowWifiDirect',
        'allow_roaming_voice_calls': 'AllowRoamingVoiceCalls',
        'allow_usb_tethering': 'AllowUSBTethering',
        'allow_system_bar': 'AllowSystemBar',
        'allow_volume_key': 'AllowVolumeKey',
        'allow_firmware_recovery': 'AllowFirmwareRecovery',
        'allow_stop_system_app': 'AllowStopSystemApp',
        'allow_roaming_data': 'AllowRoamingData',
        'allow_incoming_mms': 'AllowIncomingMms',
        'allow_unsecure_vpn_connection': 'AllowUnsecureVPNConnection',
        'a2dp_enable': 'A2dpEnable',
        'ftp_enable': 'FtpEnable',
        'gatt_enable': 'GattEnable',
        'hdp_enable': 'HdpEnable',
        'hfp_enable': 'HfpEnable',
        'hid_enable': 'HidEnable',
        'map_enable': 'MapEnable',
        'opp_enable': 'OppEnable',
        'enable_secure_mode': 'EnableSecureMode',
        'allow_sd_card_move': 'AllowSDCardMove',
        'allow_voice_dialer': 'AllowVoiceDialer',
        'allow_headphones': 'AllowHeadphones',
        'allow_background_process_limit': 'AllowBackgroundProcessLimit',
        'allow_google_accounts_auto_sync': 'AllowGoogleAccountsAutoSync',
        'allow_sd_card_write': 'AllowSDCardWrite',
        'allow_usb_host_storage': 'AllowUsbHostStorage',
        'allow_google_crash_report': 'AllowGoogleCrashReport',
        'allow_s_beam': 'AllowSBeam',
        'allow_s_voice': 'AllowSVoice',
        'allow_bt_outgoing_calls': 'AllowBTOutgoingCalls',
        'allow_bt_discoverable_mode': 'AllowBTDiscoverableMode',
        'pan_enable': 'PanEnable',
        'pbap_enable': 'PbapEnable',
        'sap_enable': 'SapEnable',
        'allow_auto_connection_wi_fi': 'AllowAutoConnectionWiFi',
        'allow_prompt_credentials': 'AllowPromptCredentials',
        'allow_vpn': 'AllowVPN',
        'allow_roaming_sync': 'AllowRoamingSync',
        'allow_auto_sync_when_roaming_disabled': 'AllowAutoSyncWhenRoamingDisabled',
        'allow_non_emergency_calls': 'AllowNonEmergencyCalls',
        'allow_user_mobile_data_limit': 'AllowUserMobileDataLimit',
        'allow_wap_push': 'AllowWapPush',
        'set_device_font': 'SetDeviceFont',
        'set_device_font_size': 'SetDeviceFontSize',
        'allow_task_manager': 'AllowTaskManager',
        'allow_menu_key': 'AllowMenuKey',
        'allow_back_key': 'AllowBackKey',
        'allow_lock_screen_settings': 'AllowLockScreenSettings',
        'allow_search_key': 'AllowSearchKey'
    }

    def __init__(self, allow_airplane_mode=None, allow_microphone=None, allow_home_key=None, allow_mock_locations=None, allow_clipboard=None, allow_account_removal=None, allow_power_off=None, allow_audio_recording=None, allow_video_recording=None, allow_killing_activities_on_leave=None, allow_ota_upgrade=None, allow_efota_registration=None, allow_developer_options=None, allow_background_data=None, allow_bt_desktop_connectivity=None, allow_bt_data_transfer=None, allow_wi_fi=None, allow_wifi_profiles=None, allow_cellular_data=None, allow_settings_changes=None, allow_unsecure_wifi=None, allow_wifi_direct=None, allow_roaming_voice_calls=None, allow_usb_tethering=None, allow_system_bar=None, allow_volume_key=None, allow_firmware_recovery=None, allow_stop_system_app=None, allow_roaming_data=None, allow_incoming_mms=None, allow_unsecure_vpn_connection=None, a2dp_enable=None, ftp_enable=None, gatt_enable=None, hdp_enable=None, hfp_enable=None, hid_enable=None, map_enable=None, opp_enable=None, enable_secure_mode=None, allow_sd_card_move=None, allow_voice_dialer=None, allow_headphones=None, allow_background_process_limit=None, allow_google_accounts_auto_sync=None, allow_sd_card_write=None, allow_usb_host_storage=None, allow_google_crash_report=None, allow_s_beam=None, allow_s_voice=None, allow_bt_outgoing_calls=None, allow_bt_discoverable_mode=None, pan_enable=None, pbap_enable=None, sap_enable=None, allow_auto_connection_wi_fi=None, allow_prompt_credentials=None, allow_vpn=None, allow_roaming_sync=None, allow_auto_sync_when_roaming_disabled=None, allow_non_emergency_calls=None, allow_user_mobile_data_limit=None, allow_wap_push=None, set_device_font=None, set_device_font_size=None, allow_task_manager=None, allow_menu_key=None, allow_back_key=None, allow_lock_screen_settings=None, allow_search_key=None, _configuration=None):  # noqa: E501
        """AndroidForWorkSamsungRestrictionsPayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_airplane_mode = None
        self._allow_microphone = None
        self._allow_home_key = None
        self._allow_mock_locations = None
        self._allow_clipboard = None
        self._allow_account_removal = None
        self._allow_power_off = None
        self._allow_audio_recording = None
        self._allow_video_recording = None
        self._allow_killing_activities_on_leave = None
        self._allow_ota_upgrade = None
        self._allow_efota_registration = None
        self._allow_developer_options = None
        self._allow_background_data = None
        self._allow_bt_desktop_connectivity = None
        self._allow_bt_data_transfer = None
        self._allow_wi_fi = None
        self._allow_wifi_profiles = None
        self._allow_cellular_data = None
        self._allow_settings_changes = None
        self._allow_unsecure_wifi = None
        self._allow_wifi_direct = None
        self._allow_roaming_voice_calls = None
        self._allow_usb_tethering = None
        self._allow_system_bar = None
        self._allow_volume_key = None
        self._allow_firmware_recovery = None
        self._allow_stop_system_app = None
        self._allow_roaming_data = None
        self._allow_incoming_mms = None
        self._allow_unsecure_vpn_connection = None
        self._a2dp_enable = None
        self._ftp_enable = None
        self._gatt_enable = None
        self._hdp_enable = None
        self._hfp_enable = None
        self._hid_enable = None
        self._map_enable = None
        self._opp_enable = None
        self._enable_secure_mode = None
        self._allow_sd_card_move = None
        self._allow_voice_dialer = None
        self._allow_headphones = None
        self._allow_background_process_limit = None
        self._allow_google_accounts_auto_sync = None
        self._allow_sd_card_write = None
        self._allow_usb_host_storage = None
        self._allow_google_crash_report = None
        self._allow_s_beam = None
        self._allow_s_voice = None
        self._allow_bt_outgoing_calls = None
        self._allow_bt_discoverable_mode = None
        self._pan_enable = None
        self._pbap_enable = None
        self._sap_enable = None
        self._allow_auto_connection_wi_fi = None
        self._allow_prompt_credentials = None
        self._allow_vpn = None
        self._allow_roaming_sync = None
        self._allow_auto_sync_when_roaming_disabled = None
        self._allow_non_emergency_calls = None
        self._allow_user_mobile_data_limit = None
        self._allow_wap_push = None
        self._set_device_font = None
        self._set_device_font_size = None
        self._allow_task_manager = None
        self._allow_menu_key = None
        self._allow_back_key = None
        self._allow_lock_screen_settings = None
        self._allow_search_key = None
        self.discriminator = None

        if allow_airplane_mode is not None:
            self.allow_airplane_mode = allow_airplane_mode
        if allow_microphone is not None:
            self.allow_microphone = allow_microphone
        if allow_home_key is not None:
            self.allow_home_key = allow_home_key
        if allow_mock_locations is not None:
            self.allow_mock_locations = allow_mock_locations
        if allow_clipboard is not None:
            self.allow_clipboard = allow_clipboard
        if allow_account_removal is not None:
            self.allow_account_removal = allow_account_removal
        if allow_power_off is not None:
            self.allow_power_off = allow_power_off
        if allow_audio_recording is not None:
            self.allow_audio_recording = allow_audio_recording
        if allow_video_recording is not None:
            self.allow_video_recording = allow_video_recording
        if allow_killing_activities_on_leave is not None:
            self.allow_killing_activities_on_leave = allow_killing_activities_on_leave
        if allow_ota_upgrade is not None:
            self.allow_ota_upgrade = allow_ota_upgrade
        if allow_efota_registration is not None:
            self.allow_efota_registration = allow_efota_registration
        if allow_developer_options is not None:
            self.allow_developer_options = allow_developer_options
        if allow_background_data is not None:
            self.allow_background_data = allow_background_data
        if allow_bt_desktop_connectivity is not None:
            self.allow_bt_desktop_connectivity = allow_bt_desktop_connectivity
        if allow_bt_data_transfer is not None:
            self.allow_bt_data_transfer = allow_bt_data_transfer
        if allow_wi_fi is not None:
            self.allow_wi_fi = allow_wi_fi
        if allow_wifi_profiles is not None:
            self.allow_wifi_profiles = allow_wifi_profiles
        if allow_cellular_data is not None:
            self.allow_cellular_data = allow_cellular_data
        if allow_settings_changes is not None:
            self.allow_settings_changes = allow_settings_changes
        if allow_unsecure_wifi is not None:
            self.allow_unsecure_wifi = allow_unsecure_wifi
        if allow_wifi_direct is not None:
            self.allow_wifi_direct = allow_wifi_direct
        if allow_roaming_voice_calls is not None:
            self.allow_roaming_voice_calls = allow_roaming_voice_calls
        if allow_usb_tethering is not None:
            self.allow_usb_tethering = allow_usb_tethering
        if allow_system_bar is not None:
            self.allow_system_bar = allow_system_bar
        if allow_volume_key is not None:
            self.allow_volume_key = allow_volume_key
        if allow_firmware_recovery is not None:
            self.allow_firmware_recovery = allow_firmware_recovery
        if allow_stop_system_app is not None:
            self.allow_stop_system_app = allow_stop_system_app
        if allow_roaming_data is not None:
            self.allow_roaming_data = allow_roaming_data
        if allow_incoming_mms is not None:
            self.allow_incoming_mms = allow_incoming_mms
        if allow_unsecure_vpn_connection is not None:
            self.allow_unsecure_vpn_connection = allow_unsecure_vpn_connection
        if a2dp_enable is not None:
            self.a2dp_enable = a2dp_enable
        if ftp_enable is not None:
            self.ftp_enable = ftp_enable
        if gatt_enable is not None:
            self.gatt_enable = gatt_enable
        if hdp_enable is not None:
            self.hdp_enable = hdp_enable
        if hfp_enable is not None:
            self.hfp_enable = hfp_enable
        if hid_enable is not None:
            self.hid_enable = hid_enable
        if map_enable is not None:
            self.map_enable = map_enable
        if opp_enable is not None:
            self.opp_enable = opp_enable
        if enable_secure_mode is not None:
            self.enable_secure_mode = enable_secure_mode
        if allow_sd_card_move is not None:
            self.allow_sd_card_move = allow_sd_card_move
        if allow_voice_dialer is not None:
            self.allow_voice_dialer = allow_voice_dialer
        if allow_headphones is not None:
            self.allow_headphones = allow_headphones
        if allow_background_process_limit is not None:
            self.allow_background_process_limit = allow_background_process_limit
        if allow_google_accounts_auto_sync is not None:
            self.allow_google_accounts_auto_sync = allow_google_accounts_auto_sync
        if allow_sd_card_write is not None:
            self.allow_sd_card_write = allow_sd_card_write
        if allow_usb_host_storage is not None:
            self.allow_usb_host_storage = allow_usb_host_storage
        if allow_google_crash_report is not None:
            self.allow_google_crash_report = allow_google_crash_report
        if allow_s_beam is not None:
            self.allow_s_beam = allow_s_beam
        if allow_s_voice is not None:
            self.allow_s_voice = allow_s_voice
        if allow_bt_outgoing_calls is not None:
            self.allow_bt_outgoing_calls = allow_bt_outgoing_calls
        if allow_bt_discoverable_mode is not None:
            self.allow_bt_discoverable_mode = allow_bt_discoverable_mode
        if pan_enable is not None:
            self.pan_enable = pan_enable
        if pbap_enable is not None:
            self.pbap_enable = pbap_enable
        if sap_enable is not None:
            self.sap_enable = sap_enable
        if allow_auto_connection_wi_fi is not None:
            self.allow_auto_connection_wi_fi = allow_auto_connection_wi_fi
        if allow_prompt_credentials is not None:
            self.allow_prompt_credentials = allow_prompt_credentials
        if allow_vpn is not None:
            self.allow_vpn = allow_vpn
        if allow_roaming_sync is not None:
            self.allow_roaming_sync = allow_roaming_sync
        if allow_auto_sync_when_roaming_disabled is not None:
            self.allow_auto_sync_when_roaming_disabled = allow_auto_sync_when_roaming_disabled
        if allow_non_emergency_calls is not None:
            self.allow_non_emergency_calls = allow_non_emergency_calls
        if allow_user_mobile_data_limit is not None:
            self.allow_user_mobile_data_limit = allow_user_mobile_data_limit
        if allow_wap_push is not None:
            self.allow_wap_push = allow_wap_push
        if set_device_font is not None:
            self.set_device_font = set_device_font
        if set_device_font_size is not None:
            self.set_device_font_size = set_device_font_size
        if allow_task_manager is not None:
            self.allow_task_manager = allow_task_manager
        if allow_menu_key is not None:
            self.allow_menu_key = allow_menu_key
        if allow_back_key is not None:
            self.allow_back_key = allow_back_key
        if allow_lock_screen_settings is not None:
            self.allow_lock_screen_settings = allow_lock_screen_settings
        if allow_search_key is not None:
            self.allow_search_key = allow_search_key

    @property
    def allow_airplane_mode(self):
        """Gets the allow_airplane_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow airplane mode setting.  # noqa: E501

        :return: The allow_airplane_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_airplane_mode

    @allow_airplane_mode.setter
    def allow_airplane_mode(self, allow_airplane_mode):
        """Sets the allow_airplane_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow airplane mode setting.  # noqa: E501

        :param allow_airplane_mode: The allow_airplane_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_airplane_mode = allow_airplane_mode

    @property
    def allow_microphone(self):
        """Gets the allow_microphone of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow microphone setting.  # noqa: E501

        :return: The allow_microphone of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_microphone

    @allow_microphone.setter
    def allow_microphone(self, allow_microphone):
        """Sets the allow_microphone of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow microphone setting.  # noqa: E501

        :param allow_microphone: The allow_microphone of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_microphone = allow_microphone

    @property
    def allow_home_key(self):
        """Gets the allow_home_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow home key setting.  # noqa: E501

        :return: The allow_home_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_home_key

    @allow_home_key.setter
    def allow_home_key(self, allow_home_key):
        """Sets the allow_home_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow home key setting.  # noqa: E501

        :param allow_home_key: The allow_home_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_home_key = allow_home_key

    @property
    def allow_mock_locations(self):
        """Gets the allow_mock_locations of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow mock locations setting.  # noqa: E501

        :return: The allow_mock_locations of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_mock_locations

    @allow_mock_locations.setter
    def allow_mock_locations(self, allow_mock_locations):
        """Sets the allow_mock_locations of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow mock locations setting.  # noqa: E501

        :param allow_mock_locations: The allow_mock_locations of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_mock_locations = allow_mock_locations

    @property
    def allow_clipboard(self):
        """Gets the allow_clipboard of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow clipboard setting.  # noqa: E501

        :return: The allow_clipboard of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_clipboard

    @allow_clipboard.setter
    def allow_clipboard(self, allow_clipboard):
        """Sets the allow_clipboard of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow clipboard setting.  # noqa: E501

        :param allow_clipboard: The allow_clipboard of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_clipboard = allow_clipboard

    @property
    def allow_account_removal(self):
        """Gets the allow_account_removal of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow account removal setting.  # noqa: E501

        :return: The allow_account_removal of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_account_removal

    @allow_account_removal.setter
    def allow_account_removal(self, allow_account_removal):
        """Sets the allow_account_removal of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow account removal setting.  # noqa: E501

        :param allow_account_removal: The allow_account_removal of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_account_removal = allow_account_removal

    @property
    def allow_power_off(self):
        """Gets the allow_power_off of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow power off setting.  # noqa: E501

        :return: The allow_power_off of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_power_off

    @allow_power_off.setter
    def allow_power_off(self, allow_power_off):
        """Sets the allow_power_off of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow power off setting.  # noqa: E501

        :param allow_power_off: The allow_power_off of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_power_off = allow_power_off

    @property
    def allow_audio_recording(self):
        """Gets the allow_audio_recording of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow audio recording setting.  # noqa: E501

        :return: The allow_audio_recording of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_audio_recording

    @allow_audio_recording.setter
    def allow_audio_recording(self, allow_audio_recording):
        """Sets the allow_audio_recording of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow audio recording setting.  # noqa: E501

        :param allow_audio_recording: The allow_audio_recording of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_audio_recording = allow_audio_recording

    @property
    def allow_video_recording(self):
        """Gets the allow_video_recording of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow video recording setting.  # noqa: E501

        :return: The allow_video_recording of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_video_recording

    @allow_video_recording.setter
    def allow_video_recording(self, allow_video_recording):
        """Sets the allow_video_recording of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow video recording setting.  # noqa: E501

        :param allow_video_recording: The allow_video_recording of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_video_recording = allow_video_recording

    @property
    def allow_killing_activities_on_leave(self):
        """Gets the allow_killing_activities_on_leave of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow killing activities on leave setting.  # noqa: E501

        :return: The allow_killing_activities_on_leave of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_killing_activities_on_leave

    @allow_killing_activities_on_leave.setter
    def allow_killing_activities_on_leave(self, allow_killing_activities_on_leave):
        """Sets the allow_killing_activities_on_leave of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow killing activities on leave setting.  # noqa: E501

        :param allow_killing_activities_on_leave: The allow_killing_activities_on_leave of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_killing_activities_on_leave = allow_killing_activities_on_leave

    @property
    def allow_ota_upgrade(self):
        """Gets the allow_ota_upgrade of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowOTAUpgrade.  # noqa: E501

        :return: The allow_ota_upgrade of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_ota_upgrade

    @allow_ota_upgrade.setter
    def allow_ota_upgrade(self, allow_ota_upgrade):
        """Sets the allow_ota_upgrade of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowOTAUpgrade.  # noqa: E501

        :param allow_ota_upgrade: The allow_ota_upgrade of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_ota_upgrade = allow_ota_upgrade

    @property
    def allow_efota_registration(self):
        """Gets the allow_efota_registration of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowEfotaRegistration.  # noqa: E501

        :return: The allow_efota_registration of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_efota_registration

    @allow_efota_registration.setter
    def allow_efota_registration(self, allow_efota_registration):
        """Sets the allow_efota_registration of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowEfotaRegistration.  # noqa: E501

        :param allow_efota_registration: The allow_efota_registration of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_efota_registration = allow_efota_registration

    @property
    def allow_developer_options(self):
        """Gets the allow_developer_options of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowDeveloperOptions.  # noqa: E501

        :return: The allow_developer_options of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_developer_options

    @allow_developer_options.setter
    def allow_developer_options(self, allow_developer_options):
        """Sets the allow_developer_options of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowDeveloperOptions.  # noqa: E501

        :param allow_developer_options: The allow_developer_options of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_developer_options = allow_developer_options

    @property
    def allow_background_data(self):
        """Gets the allow_background_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowBackgroundData.  # noqa: E501

        :return: The allow_background_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_background_data

    @allow_background_data.setter
    def allow_background_data(self, allow_background_data):
        """Sets the allow_background_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowBackgroundData.  # noqa: E501

        :param allow_background_data: The allow_background_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_background_data = allow_background_data

    @property
    def allow_bt_desktop_connectivity(self):
        """Gets the allow_bt_desktop_connectivity of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowBTDesktopConnectivity.  # noqa: E501

        :return: The allow_bt_desktop_connectivity of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bt_desktop_connectivity

    @allow_bt_desktop_connectivity.setter
    def allow_bt_desktop_connectivity(self, allow_bt_desktop_connectivity):
        """Sets the allow_bt_desktop_connectivity of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowBTDesktopConnectivity.  # noqa: E501

        :param allow_bt_desktop_connectivity: The allow_bt_desktop_connectivity of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_bt_desktop_connectivity = allow_bt_desktop_connectivity

    @property
    def allow_bt_data_transfer(self):
        """Gets the allow_bt_data_transfer of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowBTDataTransfer.  # noqa: E501

        :return: The allow_bt_data_transfer of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bt_data_transfer

    @allow_bt_data_transfer.setter
    def allow_bt_data_transfer(self, allow_bt_data_transfer):
        """Sets the allow_bt_data_transfer of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowBTDataTransfer.  # noqa: E501

        :param allow_bt_data_transfer: The allow_bt_data_transfer of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_bt_data_transfer = allow_bt_data_transfer

    @property
    def allow_wi_fi(self):
        """Gets the allow_wi_fi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowWiFi.  # noqa: E501

        :return: The allow_wi_fi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wi_fi

    @allow_wi_fi.setter
    def allow_wi_fi(self, allow_wi_fi):
        """Sets the allow_wi_fi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowWiFi.  # noqa: E501

        :param allow_wi_fi: The allow_wi_fi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_wi_fi = allow_wi_fi

    @property
    def allow_wifi_profiles(self):
        """Gets the allow_wifi_profiles of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowWifiProfiles.  # noqa: E501

        :return: The allow_wifi_profiles of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wifi_profiles

    @allow_wifi_profiles.setter
    def allow_wifi_profiles(self, allow_wifi_profiles):
        """Sets the allow_wifi_profiles of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowWifiProfiles.  # noqa: E501

        :param allow_wifi_profiles: The allow_wifi_profiles of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_wifi_profiles = allow_wifi_profiles

    @property
    def allow_cellular_data(self):
        """Gets the allow_cellular_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowCellularData.  # noqa: E501

        :return: The allow_cellular_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_cellular_data

    @allow_cellular_data.setter
    def allow_cellular_data(self, allow_cellular_data):
        """Sets the allow_cellular_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowCellularData.  # noqa: E501

        :param allow_cellular_data: The allow_cellular_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_cellular_data = allow_cellular_data

    @property
    def allow_settings_changes(self):
        """Gets the allow_settings_changes of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowSettingsChanges.  # noqa: E501

        :return: The allow_settings_changes of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_settings_changes

    @allow_settings_changes.setter
    def allow_settings_changes(self, allow_settings_changes):
        """Sets the allow_settings_changes of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowSettingsChanges.  # noqa: E501

        :param allow_settings_changes: The allow_settings_changes of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_settings_changes = allow_settings_changes

    @property
    def allow_unsecure_wifi(self):
        """Gets the allow_unsecure_wifi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowUnsecureWifi.  # noqa: E501

        :return: The allow_unsecure_wifi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unsecure_wifi

    @allow_unsecure_wifi.setter
    def allow_unsecure_wifi(self, allow_unsecure_wifi):
        """Sets the allow_unsecure_wifi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowUnsecureWifi.  # noqa: E501

        :param allow_unsecure_wifi: The allow_unsecure_wifi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_unsecure_wifi = allow_unsecure_wifi

    @property
    def allow_wifi_direct(self):
        """Gets the allow_wifi_direct of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowWifiDirect.  # noqa: E501

        :return: The allow_wifi_direct of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wifi_direct

    @allow_wifi_direct.setter
    def allow_wifi_direct(self, allow_wifi_direct):
        """Sets the allow_wifi_direct of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowWifiDirect.  # noqa: E501

        :param allow_wifi_direct: The allow_wifi_direct of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_wifi_direct = allow_wifi_direct

    @property
    def allow_roaming_voice_calls(self):
        """Gets the allow_roaming_voice_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowRoamingVoiceCalls.  # noqa: E501

        :return: The allow_roaming_voice_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_roaming_voice_calls

    @allow_roaming_voice_calls.setter
    def allow_roaming_voice_calls(self, allow_roaming_voice_calls):
        """Sets the allow_roaming_voice_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowRoamingVoiceCalls.  # noqa: E501

        :param allow_roaming_voice_calls: The allow_roaming_voice_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_roaming_voice_calls = allow_roaming_voice_calls

    @property
    def allow_usb_tethering(self):
        """Gets the allow_usb_tethering of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowUSBTethering.  # noqa: E501

        :return: The allow_usb_tethering of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_tethering

    @allow_usb_tethering.setter
    def allow_usb_tethering(self, allow_usb_tethering):
        """Sets the allow_usb_tethering of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowUSBTethering.  # noqa: E501

        :param allow_usb_tethering: The allow_usb_tethering of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_usb_tethering = allow_usb_tethering

    @property
    def allow_system_bar(self):
        """Gets the allow_system_bar of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowSystemBar.  # noqa: E501

        :return: The allow_system_bar of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_system_bar

    @allow_system_bar.setter
    def allow_system_bar(self, allow_system_bar):
        """Sets the allow_system_bar of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowSystemBar.  # noqa: E501

        :param allow_system_bar: The allow_system_bar of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_system_bar = allow_system_bar

    @property
    def allow_volume_key(self):
        """Gets the allow_volume_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowVolumeKey.  # noqa: E501

        :return: The allow_volume_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_volume_key

    @allow_volume_key.setter
    def allow_volume_key(self, allow_volume_key):
        """Sets the allow_volume_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowVolumeKey.  # noqa: E501

        :param allow_volume_key: The allow_volume_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_volume_key = allow_volume_key

    @property
    def allow_firmware_recovery(self):
        """Gets the allow_firmware_recovery of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowFirmwareRecovery.  # noqa: E501

        :return: The allow_firmware_recovery of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_firmware_recovery

    @allow_firmware_recovery.setter
    def allow_firmware_recovery(self, allow_firmware_recovery):
        """Sets the allow_firmware_recovery of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowFirmwareRecovery.  # noqa: E501

        :param allow_firmware_recovery: The allow_firmware_recovery of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_firmware_recovery = allow_firmware_recovery

    @property
    def allow_stop_system_app(self):
        """Gets the allow_stop_system_app of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowStopSystemApp.  # noqa: E501

        :return: The allow_stop_system_app of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_stop_system_app

    @allow_stop_system_app.setter
    def allow_stop_system_app(self, allow_stop_system_app):
        """Sets the allow_stop_system_app of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowStopSystemApp.  # noqa: E501

        :param allow_stop_system_app: The allow_stop_system_app of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_stop_system_app = allow_stop_system_app

    @property
    def allow_roaming_data(self):
        """Gets the allow_roaming_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowRoamingData.  # noqa: E501

        :return: The allow_roaming_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_roaming_data

    @allow_roaming_data.setter
    def allow_roaming_data(self, allow_roaming_data):
        """Sets the allow_roaming_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowRoamingData.  # noqa: E501

        :param allow_roaming_data: The allow_roaming_data of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_roaming_data = allow_roaming_data

    @property
    def allow_incoming_mms(self):
        """Gets the allow_incoming_mms of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowIncomingMms.  # noqa: E501

        :return: The allow_incoming_mms of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_incoming_mms

    @allow_incoming_mms.setter
    def allow_incoming_mms(self, allow_incoming_mms):
        """Sets the allow_incoming_mms of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowIncomingMms.  # noqa: E501

        :param allow_incoming_mms: The allow_incoming_mms of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_incoming_mms = allow_incoming_mms

    @property
    def allow_unsecure_vpn_connection(self):
        """Gets the allow_unsecure_vpn_connection of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowUnsecureVPNConnection.  # noqa: E501

        :return: The allow_unsecure_vpn_connection of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unsecure_vpn_connection

    @allow_unsecure_vpn_connection.setter
    def allow_unsecure_vpn_connection(self, allow_unsecure_vpn_connection):
        """Sets the allow_unsecure_vpn_connection of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowUnsecureVPNConnection.  # noqa: E501

        :param allow_unsecure_vpn_connection: The allow_unsecure_vpn_connection of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_unsecure_vpn_connection = allow_unsecure_vpn_connection

    @property
    def a2dp_enable(self):
        """Gets the a2dp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether a2dpEnable.  # noqa: E501

        :return: The a2dp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._a2dp_enable

    @a2dp_enable.setter
    def a2dp_enable(self, a2dp_enable):
        """Sets the a2dp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether a2dpEnable.  # noqa: E501

        :param a2dp_enable: The a2dp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._a2dp_enable = a2dp_enable

    @property
    def ftp_enable(self):
        """Gets the ftp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether ftpEnable.  # noqa: E501

        :return: The ftp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._ftp_enable

    @ftp_enable.setter
    def ftp_enable(self, ftp_enable):
        """Sets the ftp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether ftpEnable.  # noqa: E501

        :param ftp_enable: The ftp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._ftp_enable = ftp_enable

    @property
    def gatt_enable(self):
        """Gets the gatt_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether gattEnable.  # noqa: E501

        :return: The gatt_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._gatt_enable

    @gatt_enable.setter
    def gatt_enable(self, gatt_enable):
        """Sets the gatt_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether gattEnable.  # noqa: E501

        :param gatt_enable: The gatt_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._gatt_enable = gatt_enable

    @property
    def hdp_enable(self):
        """Gets the hdp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether hdpEnable.  # noqa: E501

        :return: The hdp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._hdp_enable

    @hdp_enable.setter
    def hdp_enable(self, hdp_enable):
        """Sets the hdp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether hdpEnable.  # noqa: E501

        :param hdp_enable: The hdp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._hdp_enable = hdp_enable

    @property
    def hfp_enable(self):
        """Gets the hfp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether hfpEnable.  # noqa: E501

        :return: The hfp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._hfp_enable

    @hfp_enable.setter
    def hfp_enable(self, hfp_enable):
        """Sets the hfp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether hfpEnable.  # noqa: E501

        :param hfp_enable: The hfp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._hfp_enable = hfp_enable

    @property
    def hid_enable(self):
        """Gets the hid_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether hidEnable.  # noqa: E501

        :return: The hid_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._hid_enable

    @hid_enable.setter
    def hid_enable(self, hid_enable):
        """Sets the hid_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether hidEnable.  # noqa: E501

        :param hid_enable: The hid_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._hid_enable = hid_enable

    @property
    def map_enable(self):
        """Gets the map_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether mapEnable.  # noqa: E501

        :return: The map_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._map_enable

    @map_enable.setter
    def map_enable(self, map_enable):
        """Sets the map_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether mapEnable.  # noqa: E501

        :param map_enable: The map_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._map_enable = map_enable

    @property
    def opp_enable(self):
        """Gets the opp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether oppEnable.  # noqa: E501

        :return: The opp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._opp_enable

    @opp_enable.setter
    def opp_enable(self, opp_enable):
        """Sets the opp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether oppEnable.  # noqa: E501

        :param opp_enable: The opp_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._opp_enable = opp_enable

    @property
    def enable_secure_mode(self):
        """Gets the enable_secure_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether oppEnable.  # noqa: E501

        :return: The enable_secure_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_secure_mode

    @enable_secure_mode.setter
    def enable_secure_mode(self, enable_secure_mode):
        """Sets the enable_secure_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether oppEnable.  # noqa: E501

        :param enable_secure_mode: The enable_secure_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_secure_mode = enable_secure_mode

    @property
    def allow_sd_card_move(self):
        """Gets the allow_sd_card_move of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowSDCardMove.  # noqa: E501

        :return: The allow_sd_card_move of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sd_card_move

    @allow_sd_card_move.setter
    def allow_sd_card_move(self, allow_sd_card_move):
        """Sets the allow_sd_card_move of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowSDCardMove.  # noqa: E501

        :param allow_sd_card_move: The allow_sd_card_move of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_sd_card_move = allow_sd_card_move

    @property
    def allow_voice_dialer(self):
        """Gets the allow_voice_dialer of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowVoiceDialer.  # noqa: E501

        :return: The allow_voice_dialer of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_voice_dialer

    @allow_voice_dialer.setter
    def allow_voice_dialer(self, allow_voice_dialer):
        """Sets the allow_voice_dialer of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowVoiceDialer.  # noqa: E501

        :param allow_voice_dialer: The allow_voice_dialer of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_voice_dialer = allow_voice_dialer

    @property
    def allow_headphones(self):
        """Gets the allow_headphones of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowHeadphones.  # noqa: E501

        :return: The allow_headphones of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_headphones

    @allow_headphones.setter
    def allow_headphones(self, allow_headphones):
        """Sets the allow_headphones of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowHeadphones.  # noqa: E501

        :param allow_headphones: The allow_headphones of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_headphones = allow_headphones

    @property
    def allow_background_process_limit(self):
        """Gets the allow_background_process_limit of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowBackgroundProcessLimit.  # noqa: E501

        :return: The allow_background_process_limit of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_background_process_limit

    @allow_background_process_limit.setter
    def allow_background_process_limit(self, allow_background_process_limit):
        """Sets the allow_background_process_limit of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowBackgroundProcessLimit.  # noqa: E501

        :param allow_background_process_limit: The allow_background_process_limit of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_background_process_limit = allow_background_process_limit

    @property
    def allow_google_accounts_auto_sync(self):
        """Gets the allow_google_accounts_auto_sync of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowGoogleAccountsAutoSync.  # noqa: E501

        :return: The allow_google_accounts_auto_sync of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_google_accounts_auto_sync

    @allow_google_accounts_auto_sync.setter
    def allow_google_accounts_auto_sync(self, allow_google_accounts_auto_sync):
        """Sets the allow_google_accounts_auto_sync of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowGoogleAccountsAutoSync.  # noqa: E501

        :param allow_google_accounts_auto_sync: The allow_google_accounts_auto_sync of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_google_accounts_auto_sync = allow_google_accounts_auto_sync

    @property
    def allow_sd_card_write(self):
        """Gets the allow_sd_card_write of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowSDCardWrite.  # noqa: E501

        :return: The allow_sd_card_write of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sd_card_write

    @allow_sd_card_write.setter
    def allow_sd_card_write(self, allow_sd_card_write):
        """Sets the allow_sd_card_write of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowSDCardWrite.  # noqa: E501

        :param allow_sd_card_write: The allow_sd_card_write of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_sd_card_write = allow_sd_card_write

    @property
    def allow_usb_host_storage(self):
        """Gets the allow_usb_host_storage of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowUsbHostStorage.  # noqa: E501

        :return: The allow_usb_host_storage of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_host_storage

    @allow_usb_host_storage.setter
    def allow_usb_host_storage(self, allow_usb_host_storage):
        """Sets the allow_usb_host_storage of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowUsbHostStorage.  # noqa: E501

        :param allow_usb_host_storage: The allow_usb_host_storage of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_usb_host_storage = allow_usb_host_storage

    @property
    def allow_google_crash_report(self):
        """Gets the allow_google_crash_report of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowGoogleCrashReport.  # noqa: E501

        :return: The allow_google_crash_report of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_google_crash_report

    @allow_google_crash_report.setter
    def allow_google_crash_report(self, allow_google_crash_report):
        """Sets the allow_google_crash_report of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowGoogleCrashReport.  # noqa: E501

        :param allow_google_crash_report: The allow_google_crash_report of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_google_crash_report = allow_google_crash_report

    @property
    def allow_s_beam(self):
        """Gets the allow_s_beam of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowSBeam.  # noqa: E501

        :return: The allow_s_beam of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_s_beam

    @allow_s_beam.setter
    def allow_s_beam(self, allow_s_beam):
        """Sets the allow_s_beam of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowSBeam.  # noqa: E501

        :param allow_s_beam: The allow_s_beam of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_s_beam = allow_s_beam

    @property
    def allow_s_voice(self):
        """Gets the allow_s_voice of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowSVoice.  # noqa: E501

        :return: The allow_s_voice of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_s_voice

    @allow_s_voice.setter
    def allow_s_voice(self, allow_s_voice):
        """Sets the allow_s_voice of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowSVoice.  # noqa: E501

        :param allow_s_voice: The allow_s_voice of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_s_voice = allow_s_voice

    @property
    def allow_bt_outgoing_calls(self):
        """Gets the allow_bt_outgoing_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowBTOutgoingCalls.  # noqa: E501

        :return: The allow_bt_outgoing_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bt_outgoing_calls

    @allow_bt_outgoing_calls.setter
    def allow_bt_outgoing_calls(self, allow_bt_outgoing_calls):
        """Sets the allow_bt_outgoing_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowBTOutgoingCalls.  # noqa: E501

        :param allow_bt_outgoing_calls: The allow_bt_outgoing_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_bt_outgoing_calls = allow_bt_outgoing_calls

    @property
    def allow_bt_discoverable_mode(self):
        """Gets the allow_bt_discoverable_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowBTDiscoverableMode.  # noqa: E501

        :return: The allow_bt_discoverable_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bt_discoverable_mode

    @allow_bt_discoverable_mode.setter
    def allow_bt_discoverable_mode(self, allow_bt_discoverable_mode):
        """Sets the allow_bt_discoverable_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowBTDiscoverableMode.  # noqa: E501

        :param allow_bt_discoverable_mode: The allow_bt_discoverable_mode of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_bt_discoverable_mode = allow_bt_discoverable_mode

    @property
    def pan_enable(self):
        """Gets the pan_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether panEnable.  # noqa: E501

        :return: The pan_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._pan_enable

    @pan_enable.setter
    def pan_enable(self, pan_enable):
        """Sets the pan_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether panEnable.  # noqa: E501

        :param pan_enable: The pan_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._pan_enable = pan_enable

    @property
    def pbap_enable(self):
        """Gets the pbap_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether pbapEnable.  # noqa: E501

        :return: The pbap_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._pbap_enable

    @pbap_enable.setter
    def pbap_enable(self, pbap_enable):
        """Sets the pbap_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether pbapEnable.  # noqa: E501

        :param pbap_enable: The pbap_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._pbap_enable = pbap_enable

    @property
    def sap_enable(self):
        """Gets the sap_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether sapEnable.  # noqa: E501

        :return: The sap_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._sap_enable

    @sap_enable.setter
    def sap_enable(self, sap_enable):
        """Sets the sap_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether sapEnable.  # noqa: E501

        :param sap_enable: The sap_enable of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._sap_enable = sap_enable

    @property
    def allow_auto_connection_wi_fi(self):
        """Gets the allow_auto_connection_wi_fi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowAutoConnectionWiFi.  # noqa: E501

        :return: The allow_auto_connection_wi_fi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_auto_connection_wi_fi

    @allow_auto_connection_wi_fi.setter
    def allow_auto_connection_wi_fi(self, allow_auto_connection_wi_fi):
        """Sets the allow_auto_connection_wi_fi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowAutoConnectionWiFi.  # noqa: E501

        :param allow_auto_connection_wi_fi: The allow_auto_connection_wi_fi of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_auto_connection_wi_fi = allow_auto_connection_wi_fi

    @property
    def allow_prompt_credentials(self):
        """Gets the allow_prompt_credentials of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowPromptCredentials.  # noqa: E501

        :return: The allow_prompt_credentials of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_prompt_credentials

    @allow_prompt_credentials.setter
    def allow_prompt_credentials(self, allow_prompt_credentials):
        """Sets the allow_prompt_credentials of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowPromptCredentials.  # noqa: E501

        :param allow_prompt_credentials: The allow_prompt_credentials of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_prompt_credentials = allow_prompt_credentials

    @property
    def allow_vpn(self):
        """Gets the allow_vpn of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowVPN.  # noqa: E501

        :return: The allow_vpn of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_vpn

    @allow_vpn.setter
    def allow_vpn(self, allow_vpn):
        """Sets the allow_vpn of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowVPN.  # noqa: E501

        :param allow_vpn: The allow_vpn of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_vpn = allow_vpn

    @property
    def allow_roaming_sync(self):
        """Gets the allow_roaming_sync of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowRoamingSync.  # noqa: E501

        :return: The allow_roaming_sync of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_roaming_sync

    @allow_roaming_sync.setter
    def allow_roaming_sync(self, allow_roaming_sync):
        """Sets the allow_roaming_sync of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowRoamingSync.  # noqa: E501

        :param allow_roaming_sync: The allow_roaming_sync of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_roaming_sync = allow_roaming_sync

    @property
    def allow_auto_sync_when_roaming_disabled(self):
        """Gets the allow_auto_sync_when_roaming_disabled of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowAutoSyncWhenRoamingDisabled.  # noqa: E501

        :return: The allow_auto_sync_when_roaming_disabled of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_auto_sync_when_roaming_disabled

    @allow_auto_sync_when_roaming_disabled.setter
    def allow_auto_sync_when_roaming_disabled(self, allow_auto_sync_when_roaming_disabled):
        """Sets the allow_auto_sync_when_roaming_disabled of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowAutoSyncWhenRoamingDisabled.  # noqa: E501

        :param allow_auto_sync_when_roaming_disabled: The allow_auto_sync_when_roaming_disabled of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_auto_sync_when_roaming_disabled = allow_auto_sync_when_roaming_disabled

    @property
    def allow_non_emergency_calls(self):
        """Gets the allow_non_emergency_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowNonEmergencyCalls.  # noqa: E501

        :return: The allow_non_emergency_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_non_emergency_calls

    @allow_non_emergency_calls.setter
    def allow_non_emergency_calls(self, allow_non_emergency_calls):
        """Sets the allow_non_emergency_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowNonEmergencyCalls.  # noqa: E501

        :param allow_non_emergency_calls: The allow_non_emergency_calls of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_non_emergency_calls = allow_non_emergency_calls

    @property
    def allow_user_mobile_data_limit(self):
        """Gets the allow_user_mobile_data_limit of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowUserMobileDataLimit.  # noqa: E501

        :return: The allow_user_mobile_data_limit of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_mobile_data_limit

    @allow_user_mobile_data_limit.setter
    def allow_user_mobile_data_limit(self, allow_user_mobile_data_limit):
        """Sets the allow_user_mobile_data_limit of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowUserMobileDataLimit.  # noqa: E501

        :param allow_user_mobile_data_limit: The allow_user_mobile_data_limit of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_user_mobile_data_limit = allow_user_mobile_data_limit

    @property
    def allow_wap_push(self):
        """Gets the allow_wap_push of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowWapPush.  # noqa: E501

        :return: The allow_wap_push of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wap_push

    @allow_wap_push.setter
    def allow_wap_push(self, allow_wap_push):
        """Sets the allow_wap_push of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowWapPush.  # noqa: E501

        :param allow_wap_push: The allow_wap_push of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_wap_push = allow_wap_push

    @property
    def set_device_font(self):
        """Gets the set_device_font of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether setDeviceFont.  # noqa: E501

        :return: The set_device_font of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._set_device_font

    @set_device_font.setter
    def set_device_font(self, set_device_font):
        """Sets the set_device_font of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether setDeviceFont.  # noqa: E501

        :param set_device_font: The set_device_font of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._set_device_font = set_device_font

    @property
    def set_device_font_size(self):
        """Gets the set_device_font_size of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether setDeviceFontSize.  # noqa: E501

        :return: The set_device_font_size of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._set_device_font_size

    @set_device_font_size.setter
    def set_device_font_size(self, set_device_font_size):
        """Sets the set_device_font_size of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether setDeviceFontSize.  # noqa: E501

        :param set_device_font_size: The set_device_font_size of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._set_device_font_size = set_device_font_size

    @property
    def allow_task_manager(self):
        """Gets the allow_task_manager of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowTaskManager.  # noqa: E501

        :return: The allow_task_manager of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_task_manager

    @allow_task_manager.setter
    def allow_task_manager(self, allow_task_manager):
        """Sets the allow_task_manager of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowTaskManager.  # noqa: E501

        :param allow_task_manager: The allow_task_manager of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_task_manager = allow_task_manager

    @property
    def allow_menu_key(self):
        """Gets the allow_menu_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowMenuKey.  # noqa: E501

        :return: The allow_menu_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_menu_key

    @allow_menu_key.setter
    def allow_menu_key(self, allow_menu_key):
        """Sets the allow_menu_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowMenuKey.  # noqa: E501

        :param allow_menu_key: The allow_menu_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_menu_key = allow_menu_key

    @property
    def allow_back_key(self):
        """Gets the allow_back_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowBackKey.  # noqa: E501

        :return: The allow_back_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_back_key

    @allow_back_key.setter
    def allow_back_key(self, allow_back_key):
        """Sets the allow_back_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowBackKey.  # noqa: E501

        :param allow_back_key: The allow_back_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_back_key = allow_back_key

    @property
    def allow_lock_screen_settings(self):
        """Gets the allow_lock_screen_settings of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowLockScreenSettings.  # noqa: E501

        :return: The allow_lock_screen_settings of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_lock_screen_settings

    @allow_lock_screen_settings.setter
    def allow_lock_screen_settings(self, allow_lock_screen_settings):
        """Sets the allow_lock_screen_settings of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowLockScreenSettings.  # noqa: E501

        :param allow_lock_screen_settings: The allow_lock_screen_settings of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_lock_screen_settings = allow_lock_screen_settings

    @property
    def allow_search_key(self):
        """Gets the allow_search_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowSearchKey.  # noqa: E501

        :return: The allow_search_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_search_key

    @allow_search_key.setter
    def allow_search_key(self, allow_search_key):
        """Sets the allow_search_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allowSearchKey.  # noqa: E501

        :param allow_search_key: The allow_search_key of this AndroidForWorkSamsungRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_search_key = allow_search_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkSamsungRestrictionsPayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkSamsungRestrictionsPayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkSamsungRestrictionsPayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
