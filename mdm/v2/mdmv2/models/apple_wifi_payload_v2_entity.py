# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleWifiPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_set_identifier': 'str',
        'hidden_network': 'bool',
        'security_type': 'str',
        'password': 'str',
        'tls': 'bool',
        'ttls': 'bool',
        'leap': 'bool',
        'peap': 'bool',
        'eapfast': 'bool',
        'eapsim': 'bool',
        'tls_minimum_version': 'str',
        'tls_maximum_version': 'str',
        'provision_pac': 'bool',
        'provision_pac_anonymously': 'bool',
        'use_pac': 'bool',
        'allow_trust_exceptions': 'bool',
        'inner_identity': 'str',
        'user_per_connection_password': 'bool',
        'user_name': 'str',
        'user_password': 'str',
        'trusted_server_certificate_names': 'list[str]',
        'trusted_certificates': 'list[str]',
        'outer_identity': 'str',
        'identity_certificate': 'str',
        'auto_join': 'bool',
        'proxy_type': 'str',
        'proxy_server': 'str',
        'proxy_server_port': 'int',
        'proxy_username': 'str',
        'proxy_password': 'str',
        'proxy_url': 'str',
        'wi_fi_hotspot': 'bool',
        'domain_name': 'str',
        'displayed_operator_name': 'str',
        'service_provider_roaming_enabled': 'bool',
        'disable_association_mac_randomization': 'bool',
        'roaming_consortium_organization_id': 'list[str]',
        'network_access_id': 'list[str]',
        'mcc_mnc': 'list[str]',
        'enable_qo_s_marking': 'bool',
        'qo_s_marking_apple_audio_video_calls': 'bool',
        'whitelist_specific_apps': 'list[str]',
        'fastlane_qos_marking': 'int',
        'proxy_pac_fallback_allowed': 'bool',
        'bypass_captive_portal': 'bool',
        'allowlist_specific_apps': 'list[str]'
    }

    attribute_map = {
        'service_set_identifier': 'ServiceSetIdentifier',
        'hidden_network': 'HiddenNetwork',
        'security_type': 'SecurityType',
        'password': 'Password',
        'tls': 'TLS',
        'ttls': 'TTLS',
        'leap': 'LEAP',
        'peap': 'PEAP',
        'eapfast': 'EAPFAST',
        'eapsim': 'EAPSIM',
        'tls_minimum_version': 'TLSMinimumVersion',
        'tls_maximum_version': 'TLSMaximumVersion',
        'provision_pac': 'ProvisionPAC',
        'provision_pac_anonymously': 'ProvisionPACAnonymously',
        'use_pac': 'UsePAC',
        'allow_trust_exceptions': 'AllowTrustExceptions',
        'inner_identity': 'InnerIdentity',
        'user_per_connection_password': 'UserPerConnectionPassword',
        'user_name': 'UserName',
        'user_password': 'UserPassword',
        'trusted_server_certificate_names': 'TrustedServerCertificateNames',
        'trusted_certificates': 'TrustedCertificates',
        'outer_identity': 'OuterIdentity',
        'identity_certificate': 'IdentityCertificate',
        'auto_join': 'AutoJoin',
        'proxy_type': 'ProxyType',
        'proxy_server': 'ProxyServer',
        'proxy_server_port': 'ProxyServerPort',
        'proxy_username': 'ProxyUsername',
        'proxy_password': 'ProxyPassword',
        'proxy_url': 'ProxyUrl',
        'wi_fi_hotspot': 'WiFiHotspot',
        'domain_name': 'DomainName',
        'displayed_operator_name': 'DisplayedOperatorName',
        'service_provider_roaming_enabled': 'ServiceProviderRoamingEnabled',
        'disable_association_mac_randomization': 'DisableAssociationMACRandomization',
        'roaming_consortium_organization_id': 'RoamingConsortiumOrganizationID',
        'network_access_id': 'NetworkAccessId',
        'mcc_mnc': 'MccMnc',
        'enable_qo_s_marking': 'EnableQoSMarking',
        'qo_s_marking_apple_audio_video_calls': 'QoSMarkingAppleAudioVideoCalls',
        'whitelist_specific_apps': 'WhitelistSpecificApps',
        'fastlane_qos_marking': 'FastlaneQosMarking',
        'proxy_pac_fallback_allowed': 'ProxyPACFallbackAllowed',
        'bypass_captive_portal': 'BypassCaptivePortal',
        'allowlist_specific_apps': 'AllowlistSpecificApps'
    }

    def __init__(self, service_set_identifier=None, hidden_network=None, security_type=None, password=None, tls=None, ttls=None, leap=None, peap=None, eapfast=None, eapsim=None, tls_minimum_version=None, tls_maximum_version=None, provision_pac=None, provision_pac_anonymously=None, use_pac=None, allow_trust_exceptions=None, inner_identity=None, user_per_connection_password=None, user_name=None, user_password=None, trusted_server_certificate_names=None, trusted_certificates=None, outer_identity=None, identity_certificate=None, auto_join=None, proxy_type=None, proxy_server=None, proxy_server_port=None, proxy_username=None, proxy_password=None, proxy_url=None, wi_fi_hotspot=None, domain_name=None, displayed_operator_name=None, service_provider_roaming_enabled=None, disable_association_mac_randomization=None, roaming_consortium_organization_id=None, network_access_id=None, mcc_mnc=None, enable_qo_s_marking=None, qo_s_marking_apple_audio_video_calls=None, whitelist_specific_apps=None, fastlane_qos_marking=None, proxy_pac_fallback_allowed=None, bypass_captive_portal=None, allowlist_specific_apps=None, _configuration=None):  # noqa: E501
        """AppleWifiPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._service_set_identifier = None
        self._hidden_network = None
        self._security_type = None
        self._password = None
        self._tls = None
        self._ttls = None
        self._leap = None
        self._peap = None
        self._eapfast = None
        self._eapsim = None
        self._tls_minimum_version = None
        self._tls_maximum_version = None
        self._provision_pac = None
        self._provision_pac_anonymously = None
        self._use_pac = None
        self._allow_trust_exceptions = None
        self._inner_identity = None
        self._user_per_connection_password = None
        self._user_name = None
        self._user_password = None
        self._trusted_server_certificate_names = None
        self._trusted_certificates = None
        self._outer_identity = None
        self._identity_certificate = None
        self._auto_join = None
        self._proxy_type = None
        self._proxy_server = None
        self._proxy_server_port = None
        self._proxy_username = None
        self._proxy_password = None
        self._proxy_url = None
        self._wi_fi_hotspot = None
        self._domain_name = None
        self._displayed_operator_name = None
        self._service_provider_roaming_enabled = None
        self._disable_association_mac_randomization = None
        self._roaming_consortium_organization_id = None
        self._network_access_id = None
        self._mcc_mnc = None
        self._enable_qo_s_marking = None
        self._qo_s_marking_apple_audio_video_calls = None
        self._whitelist_specific_apps = None
        self._fastlane_qos_marking = None
        self._proxy_pac_fallback_allowed = None
        self._bypass_captive_portal = None
        self._allowlist_specific_apps = None
        self.discriminator = None

        if service_set_identifier is not None:
            self.service_set_identifier = service_set_identifier
        if hidden_network is not None:
            self.hidden_network = hidden_network
        if security_type is not None:
            self.security_type = security_type
        if password is not None:
            self.password = password
        if tls is not None:
            self.tls = tls
        if ttls is not None:
            self.ttls = ttls
        if leap is not None:
            self.leap = leap
        if peap is not None:
            self.peap = peap
        if eapfast is not None:
            self.eapfast = eapfast
        if eapsim is not None:
            self.eapsim = eapsim
        if tls_minimum_version is not None:
            self.tls_minimum_version = tls_minimum_version
        if tls_maximum_version is not None:
            self.tls_maximum_version = tls_maximum_version
        if provision_pac is not None:
            self.provision_pac = provision_pac
        if provision_pac_anonymously is not None:
            self.provision_pac_anonymously = provision_pac_anonymously
        if use_pac is not None:
            self.use_pac = use_pac
        if allow_trust_exceptions is not None:
            self.allow_trust_exceptions = allow_trust_exceptions
        if inner_identity is not None:
            self.inner_identity = inner_identity
        if user_per_connection_password is not None:
            self.user_per_connection_password = user_per_connection_password
        if user_name is not None:
            self.user_name = user_name
        if user_password is not None:
            self.user_password = user_password
        if trusted_server_certificate_names is not None:
            self.trusted_server_certificate_names = trusted_server_certificate_names
        if trusted_certificates is not None:
            self.trusted_certificates = trusted_certificates
        if outer_identity is not None:
            self.outer_identity = outer_identity
        if identity_certificate is not None:
            self.identity_certificate = identity_certificate
        if auto_join is not None:
            self.auto_join = auto_join
        if proxy_type is not None:
            self.proxy_type = proxy_type
        if proxy_server is not None:
            self.proxy_server = proxy_server
        if proxy_server_port is not None:
            self.proxy_server_port = proxy_server_port
        if proxy_username is not None:
            self.proxy_username = proxy_username
        if proxy_password is not None:
            self.proxy_password = proxy_password
        if proxy_url is not None:
            self.proxy_url = proxy_url
        if wi_fi_hotspot is not None:
            self.wi_fi_hotspot = wi_fi_hotspot
        if domain_name is not None:
            self.domain_name = domain_name
        if displayed_operator_name is not None:
            self.displayed_operator_name = displayed_operator_name
        if service_provider_roaming_enabled is not None:
            self.service_provider_roaming_enabled = service_provider_roaming_enabled
        if disable_association_mac_randomization is not None:
            self.disable_association_mac_randomization = disable_association_mac_randomization
        if roaming_consortium_organization_id is not None:
            self.roaming_consortium_organization_id = roaming_consortium_organization_id
        if network_access_id is not None:
            self.network_access_id = network_access_id
        if mcc_mnc is not None:
            self.mcc_mnc = mcc_mnc
        if enable_qo_s_marking is not None:
            self.enable_qo_s_marking = enable_qo_s_marking
        if qo_s_marking_apple_audio_video_calls is not None:
            self.qo_s_marking_apple_audio_video_calls = qo_s_marking_apple_audio_video_calls
        if whitelist_specific_apps is not None:
            self.whitelist_specific_apps = whitelist_specific_apps
        if fastlane_qos_marking is not None:
            self.fastlane_qos_marking = fastlane_qos_marking
        if proxy_pac_fallback_allowed is not None:
            self.proxy_pac_fallback_allowed = proxy_pac_fallback_allowed
        if bypass_captive_portal is not None:
            self.bypass_captive_portal = bypass_captive_portal
        if allowlist_specific_apps is not None:
            self.allowlist_specific_apps = allowlist_specific_apps

    @property
    def service_set_identifier(self):
        """Gets the service_set_identifier of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets sSID of the Wi-Fi network to be used.  # noqa: E501

        :return: The service_set_identifier of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._service_set_identifier

    @service_set_identifier.setter
    def service_set_identifier(self, service_set_identifier):
        """Sets the service_set_identifier of this AppleWifiPayloadV2Entity.

        Gets or sets sSID of the Wi-Fi network to be used.  # noqa: E501

        :param service_set_identifier: The service_set_identifier of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._service_set_identifier = service_set_identifier

    @property
    def hidden_network(self):
        """Gets the hidden_network of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether besides SSID, the device uses information such as broadcast type and encryption type to differentiate a network.  # noqa: E501

        :return: The hidden_network of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_network

    @hidden_network.setter
    def hidden_network(self, hidden_network):
        """Sets the hidden_network of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether besides SSID, the device uses information such as broadcast type and encryption type to differentiate a network.  # noqa: E501

        :param hidden_network: The hidden_network of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._hidden_network = hidden_network

    @property
    def security_type(self):
        """Gets the security_type of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the encryption type of the Wi-FI network.  # noqa: E501

        :return: The security_type of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this AppleWifiPayloadV2Entity.

        Gets or sets the encryption type of the Wi-FI network.  # noqa: E501

        :param security_type: The security_type of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._security_type = security_type

    @property
    def password(self):
        """Gets the password of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets sSID password (Pre-Shared Key).  # noqa: E501

        :return: The password of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AppleWifiPayloadV2Entity.

        Gets or sets sSID password (Pre-Shared Key).  # noqa: E501

        :param password: The password of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def tls(self):
        """Gets the tls of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, TLS is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The tls of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, TLS is used for the Extensible Authentication Protocol.  # noqa: E501

        :param tls: The tls of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._tls = tls

    @property
    def ttls(self):
        """Gets the ttls of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, TTLS is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The ttls of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._ttls

    @ttls.setter
    def ttls(self, ttls):
        """Sets the ttls of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, TTLS is used for the Extensible Authentication Protocol.  # noqa: E501

        :param ttls: The ttls of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._ttls = ttls

    @property
    def leap(self):
        """Gets the leap of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, LEAP is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The leap of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._leap

    @leap.setter
    def leap(self, leap):
        """Sets the leap of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, LEAP is used for the Extensible Authentication Protocol.  # noqa: E501

        :param leap: The leap of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._leap = leap

    @property
    def peap(self):
        """Gets the peap of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, PEAP is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The peap of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._peap

    @peap.setter
    def peap(self, peap):
        """Sets the peap of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, PEAP is used for the Extensible Authentication Protocol.  # noqa: E501

        :param peap: The peap of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._peap = peap

    @property
    def eapfast(self):
        """Gets the eapfast of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, EAP-FAST is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The eapfast of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._eapfast

    @eapfast.setter
    def eapfast(self, eapfast):
        """Sets the eapfast of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, EAP-FAST is used for the Extensible Authentication Protocol.  # noqa: E501

        :param eapfast: The eapfast of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._eapfast = eapfast

    @property
    def eapsim(self):
        """Gets the eapsim of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, EAP-SIM is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The eapsim of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._eapsim

    @eapsim.setter
    def eapsim(self, eapsim):
        """Sets the eapsim of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, EAP-SIM is used for the Extensible Authentication Protocol.  # noqa: E501

        :param eapsim: The eapsim of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._eapsim = eapsim

    @property
    def tls_minimum_version(self):
        """Gets the tls_minimum_version of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the minimum TLS version to be used with EAP-TLS authentication. If no value is specified, the default minimum is 1.0.  # noqa: E501

        :return: The tls_minimum_version of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._tls_minimum_version

    @tls_minimum_version.setter
    def tls_minimum_version(self, tls_minimum_version):
        """Sets the tls_minimum_version of this AppleWifiPayloadV2Entity.

        Gets or sets the minimum TLS version to be used with EAP-TLS authentication. If no value is specified, the default minimum is 1.0.  # noqa: E501

        :param tls_minimum_version: The tls_minimum_version of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._tls_minimum_version = tls_minimum_version

    @property
    def tls_maximum_version(self):
        """Gets the tls_maximum_version of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the maximum TLS version to be used with EAP-TLS authentication. If no value is specified, the default maximum is 1.2.  # noqa: E501

        :return: The tls_maximum_version of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._tls_maximum_version

    @tls_maximum_version.setter
    def tls_maximum_version(self, tls_maximum_version):
        """Sets the tls_maximum_version of this AppleWifiPayloadV2Entity.

        Gets or sets the maximum TLS version to be used with EAP-TLS authentication. If no value is specified, the default maximum is 1.2.  # noqa: E501

        :param tls_maximum_version: The tls_maximum_version of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._tls_maximum_version = tls_maximum_version

    @property
    def provision_pac(self):
        """Gets the provision_pac of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, allows PAC provisioning.  # noqa: E501

        :return: The provision_pac of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._provision_pac

    @provision_pac.setter
    def provision_pac(self, provision_pac):
        """Sets the provision_pac of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, allows PAC provisioning.  # noqa: E501

        :param provision_pac: The provision_pac of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._provision_pac = provision_pac

    @property
    def provision_pac_anonymously(self):
        """Gets the provision_pac_anonymously of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, provisions the device anonymously.  # noqa: E501

        :return: The provision_pac_anonymously of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._provision_pac_anonymously

    @provision_pac_anonymously.setter
    def provision_pac_anonymously(self, provision_pac_anonymously):
        """Sets the provision_pac_anonymously of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, provisions the device anonymously.  # noqa: E501

        :param provision_pac_anonymously: The provision_pac_anonymously of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._provision_pac_anonymously = provision_pac_anonymously

    @property
    def use_pac(self):
        """Gets the use_pac of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, the device will use an existing PAC if it's present.  # noqa: E501

        :return: The use_pac of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_pac

    @use_pac.setter
    def use_pac(self, use_pac):
        """Sets the use_pac of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, the device will use an existing PAC if it's present.  # noqa: E501

        :param use_pac: The use_pac of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_pac = use_pac

    @property
    def allow_trust_exceptions(self):
        """Gets the allow_trust_exceptions of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, allows a dynamic trust decision by the user.  # noqa: E501

        :return: The allow_trust_exceptions of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_trust_exceptions

    @allow_trust_exceptions.setter
    def allow_trust_exceptions(self, allow_trust_exceptions):
        """Sets the allow_trust_exceptions of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, allows a dynamic trust decision by the user.  # noqa: E501

        :param allow_trust_exceptions: The allow_trust_exceptions of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_trust_exceptions = allow_trust_exceptions

    @property
    def inner_identity(self):
        """Gets the inner_identity of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets specifies the inner authentication used by the TTLS module.  # noqa: E501

        :return: The inner_identity of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._inner_identity

    @inner_identity.setter
    def inner_identity(self, inner_identity):
        """Sets the inner_identity of this AppleWifiPayloadV2Entity.

        Gets or sets specifies the inner authentication used by the TTLS module.  # noqa: E501

        :param inner_identity: The inner_identity of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._inner_identity = inner_identity

    @property
    def user_per_connection_password(self):
        """Gets the user_per_connection_password of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, the user will be prompted for a password each time they connect to the network.  # noqa: E501

        :return: The user_per_connection_password of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._user_per_connection_password

    @user_per_connection_password.setter
    def user_per_connection_password(self, user_per_connection_password):
        """Sets the user_per_connection_password of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, the user will be prompted for a password each time they connect to the network.  # noqa: E501

        :param user_per_connection_password: The user_per_connection_password of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._user_per_connection_password = user_per_connection_password

    @property
    def user_name(self):
        """Gets the user_name of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the username used for authentication.  # noqa: E501

        :return: The user_name of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AppleWifiPayloadV2Entity.

        Gets or sets the username used for authentication.  # noqa: E501

        :param user_name: The user_name of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_password(self):
        """Gets the user_password of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the password used for authentication.  # noqa: E501

        :return: The user_password of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._user_password

    @user_password.setter
    def user_password(self, user_password):
        """Sets the user_password of this AppleWifiPayloadV2Entity.

        Gets or sets the password used for authentication.  # noqa: E501

        :param user_password: The user_password of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._user_password = user_password

    @property
    def trusted_server_certificate_names(self):
        """Gets the trusted_server_certificate_names of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets tLS trusted server common names.  # noqa: E501

        :return: The trusted_server_certificate_names of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._trusted_server_certificate_names

    @trusted_server_certificate_names.setter
    def trusted_server_certificate_names(self, trusted_server_certificate_names):
        """Sets the trusted_server_certificate_names of this AppleWifiPayloadV2Entity.

        Gets or sets tLS trusted server common names.  # noqa: E501

        :param trusted_server_certificate_names: The trusted_server_certificate_names of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._trusted_server_certificate_names = trusted_server_certificate_names

    @property
    def trusted_certificates(self):
        """Gets the trusted_certificates of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets certificates to be trusted for this authentication.  # noqa: E501

        :return: The trusted_certificates of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._trusted_certificates

    @trusted_certificates.setter
    def trusted_certificates(self, trusted_certificates):
        """Sets the trusted_certificates of this AppleWifiPayloadV2Entity.

        Gets or sets certificates to be trusted for this authentication.  # noqa: E501

        :param trusted_certificates: The trusted_certificates of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._trusted_certificates = trusted_certificates

    @property
    def outer_identity(self):
        """Gets the outer_identity of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets this key is only relevant to TTLS, PEAP, and EAP-FAST for allowing the user to hide his or her identity.  # noqa: E501

        :return: The outer_identity of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outer_identity

    @outer_identity.setter
    def outer_identity(self, outer_identity):
        """Sets the outer_identity of this AppleWifiPayloadV2Entity.

        Gets or sets this key is only relevant to TTLS, PEAP, and EAP-FAST for allowing the user to hide his or her identity.  # noqa: E501

        :param outer_identity: The outer_identity of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outer_identity = outer_identity

    @property
    def identity_certificate(self):
        """Gets the identity_certificate of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the certificate payload to use for the identity credential.  # noqa: E501

        :return: The identity_certificate of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._identity_certificate

    @identity_certificate.setter
    def identity_certificate(self, identity_certificate):
        """Sets the identity_certificate of this AppleWifiPayloadV2Entity.

        Gets or sets the certificate payload to use for the identity credential.  # noqa: E501

        :param identity_certificate: The identity_certificate of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._identity_certificate = identity_certificate

    @property
    def auto_join(self):
        """Gets the auto_join of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, the network is auto-joined on iOS 5+.  # noqa: E501

        :return: The auto_join of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._auto_join

    @auto_join.setter
    def auto_join(self, auto_join):
        """Sets the auto_join of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, the network is auto-joined on iOS 5+.  # noqa: E501

        :param auto_join: The auto_join of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._auto_join = auto_join

    @property
    def proxy_type(self):
        """Gets the proxy_type of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets proxy type on iOS 5+.  # noqa: E501

        :return: The proxy_type of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_type

    @proxy_type.setter
    def proxy_type(self, proxy_type):
        """Sets the proxy_type of this AppleWifiPayloadV2Entity.

        Gets or sets proxy type on iOS 5+.  # noqa: E501

        :param proxy_type: The proxy_type of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy_type = proxy_type

    @property
    def proxy_server(self):
        """Gets the proxy_server of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the host name of the HTTP proxy.  # noqa: E501

        :return: The proxy_server of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_server

    @proxy_server.setter
    def proxy_server(self, proxy_server):
        """Sets the proxy_server of this AppleWifiPayloadV2Entity.

        Gets or sets the host name of the HTTP proxy.  # noqa: E501

        :param proxy_server: The proxy_server of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy_server = proxy_server

    @property
    def proxy_server_port(self):
        """Gets the proxy_server_port of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the port number of the HTTP proxy.  # noqa: E501

        :return: The proxy_server_port of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._proxy_server_port

    @proxy_server_port.setter
    def proxy_server_port(self, proxy_server_port):
        """Sets the proxy_server_port of this AppleWifiPayloadV2Entity.

        Gets or sets the port number of the HTTP proxy.  # noqa: E501

        :param proxy_server_port: The proxy_server_port of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._proxy_server_port = proxy_server_port

    @property
    def proxy_username(self):
        """Gets the proxy_username of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the username used for authentication.  # noqa: E501

        :return: The proxy_username of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_username

    @proxy_username.setter
    def proxy_username(self, proxy_username):
        """Sets the proxy_username of this AppleWifiPayloadV2Entity.

        Gets or sets the username used for authentication.  # noqa: E501

        :param proxy_username: The proxy_username of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy_username = proxy_username

    @property
    def proxy_password(self):
        """Gets the proxy_password of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the password used for authentication.  # noqa: E501

        :return: The proxy_password of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_password

    @proxy_password.setter
    def proxy_password(self, proxy_password):
        """Sets the proxy_password of this AppleWifiPayloadV2Entity.

        Gets or sets the password used for authentication.  # noqa: E501

        :param proxy_password: The proxy_password of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy_password = proxy_password

    @property
    def proxy_url(self):
        """Gets the proxy_url of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets uRL to the location of the proxy auto-configuration file.  # noqa: E501

        :return: The proxy_url of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """Sets the proxy_url of this AppleWifiPayloadV2Entity.

        Gets or sets uRL to the location of the proxy auto-configuration file.  # noqa: E501

        :param proxy_url: The proxy_url of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy_url = proxy_url

    @property
    def wi_fi_hotspot(self):
        """Gets the wi_fi_hotspot of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, the network is treated as a hotspot on iOS 7+.  # noqa: E501

        :return: The wi_fi_hotspot of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._wi_fi_hotspot

    @wi_fi_hotspot.setter
    def wi_fi_hotspot(self, wi_fi_hotspot):
        """Sets the wi_fi_hotspot of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, the network is treated as a hotspot on iOS 7+.  # noqa: E501

        :param wi_fi_hotspot: The wi_fi_hotspot of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._wi_fi_hotspot = wi_fi_hotspot

    @property
    def domain_name(self):
        """Gets the domain_name of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets domain Name used for Wi-Fi Hotspot 2.0 negotiation on iOS 7+.  # noqa: E501

        :return: The domain_name of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this AppleWifiPayloadV2Entity.

        Gets or sets domain Name used for Wi-Fi Hotspot 2.0 negotiation on iOS 7+.  # noqa: E501

        :param domain_name: The domain_name of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def displayed_operator_name(self):
        """Gets the displayed_operator_name of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets the operator name to display when connected to this network on iOS 7+.  # noqa: E501

        :return: The displayed_operator_name of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._displayed_operator_name

    @displayed_operator_name.setter
    def displayed_operator_name(self, displayed_operator_name):
        """Sets the displayed_operator_name of this AppleWifiPayloadV2Entity.

        Gets or sets the operator name to display when connected to this network on iOS 7+.  # noqa: E501

        :param displayed_operator_name: The displayed_operator_name of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._displayed_operator_name = displayed_operator_name

    @property
    def service_provider_roaming_enabled(self):
        """Gets the service_provider_roaming_enabled of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, allows connection to roaming service providers on iOS 7+.  # noqa: E501

        :return: The service_provider_roaming_enabled of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._service_provider_roaming_enabled

    @service_provider_roaming_enabled.setter
    def service_provider_roaming_enabled(self, service_provider_roaming_enabled):
        """Sets the service_provider_roaming_enabled of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if true, allows connection to roaming service providers on iOS 7+.  # noqa: E501

        :param service_provider_roaming_enabled: The service_provider_roaming_enabled of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._service_provider_roaming_enabled = service_provider_roaming_enabled

    @property
    def disable_association_mac_randomization(self):
        """Gets the disable_association_mac_randomization of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether MAC randomization is disabled.  # noqa: E501

        :return: The disable_association_mac_randomization of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._disable_association_mac_randomization

    @disable_association_mac_randomization.setter
    def disable_association_mac_randomization(self, disable_association_mac_randomization):
        """Sets the disable_association_mac_randomization of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether MAC randomization is disabled.  # noqa: E501

        :param disable_association_mac_randomization: The disable_association_mac_randomization of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._disable_association_mac_randomization = disable_association_mac_randomization

    @property
    def roaming_consortium_organization_id(self):
        """Gets the roaming_consortium_organization_id of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets array of Roaming Consortium Organization Identifiers used for Wi-Fi Hotspot 2.0 negotiation on iOS 7+.  # noqa: E501

        :return: The roaming_consortium_organization_id of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._roaming_consortium_organization_id

    @roaming_consortium_organization_id.setter
    def roaming_consortium_organization_id(self, roaming_consortium_organization_id):
        """Sets the roaming_consortium_organization_id of this AppleWifiPayloadV2Entity.

        Gets or sets array of Roaming Consortium Organization Identifiers used for Wi-Fi Hotspot 2.0 negotiation on iOS 7+.  # noqa: E501

        :param roaming_consortium_organization_id: The roaming_consortium_organization_id of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._roaming_consortium_organization_id = roaming_consortium_organization_id

    @property
    def network_access_id(self):
        """Gets the network_access_id of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets list of Network Access Identifier Realm names used for Wi-Fi Hotspot 2.0 negotiation on iOS 7+.  # noqa: E501

        :return: The network_access_id of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._network_access_id

    @network_access_id.setter
    def network_access_id(self, network_access_id):
        """Sets the network_access_id of this AppleWifiPayloadV2Entity.

        Gets or sets list of Network Access Identifier Realm names used for Wi-Fi Hotspot 2.0 negotiation on iOS 7+.  # noqa: E501

        :param network_access_id: The network_access_id of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._network_access_id = network_access_id

    @property
    def mcc_mnc(self):
        """Gets the mcc_mnc of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets list of Mobile Country Code (MCC)/Mobile Network Code (MNC) pairs used for Wi-Fi Hotspot 2.0 negotiation on iOS 7+.  # noqa: E501

        :return: The mcc_mnc of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._mcc_mnc

    @mcc_mnc.setter
    def mcc_mnc(self, mcc_mnc):
        """Sets the mcc_mnc of this AppleWifiPayloadV2Entity.

        Gets or sets list of Mobile Country Code (MCC)/Mobile Network Code (MNC) pairs used for Wi-Fi Hotspot 2.0 negotiation on iOS 7+.  # noqa: E501

        :param mcc_mnc: The mcc_mnc of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._mcc_mnc = mcc_mnc

    @property
    def enable_qo_s_marking(self):
        """Gets the enable_qo_s_marking of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether may be used to disable L3 marking and only use L2 marking for traffic sent to the Wi-Fi network.  # noqa: E501

        :return: The enable_qo_s_marking of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_qo_s_marking

    @enable_qo_s_marking.setter
    def enable_qo_s_marking(self, enable_qo_s_marking):
        """Sets the enable_qo_s_marking of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether may be used to disable L3 marking and only use L2 marking for traffic sent to the Wi-Fi network.  # noqa: E501

        :param enable_qo_s_marking: The enable_qo_s_marking of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_qo_s_marking = enable_qo_s_marking

    @property
    def qo_s_marking_apple_audio_video_calls(self):
        """Gets the qo_s_marking_apple_audio_video_calls of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether specifies if audio and video traffic of built-in audio/video services such as FaceTime and Wi-Fi Calling will be whitelisted for L2 and L3 marking for traffic sent to the Wi-Fi network.  # noqa: E501

        :return: The qo_s_marking_apple_audio_video_calls of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._qo_s_marking_apple_audio_video_calls

    @qo_s_marking_apple_audio_video_calls.setter
    def qo_s_marking_apple_audio_video_calls(self, qo_s_marking_apple_audio_video_calls):
        """Sets the qo_s_marking_apple_audio_video_calls of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether specifies if audio and video traffic of built-in audio/video services such as FaceTime and Wi-Fi Calling will be whitelisted for L2 and L3 marking for traffic sent to the Wi-Fi network.  # noqa: E501

        :param qo_s_marking_apple_audio_video_calls: The qo_s_marking_apple_audio_video_calls of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._qo_s_marking_apple_audio_video_calls = qo_s_marking_apple_audio_video_calls

    @property
    def whitelist_specific_apps(self):
        """Gets the whitelist_specific_apps of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets array of app bundle identifiers that will be whitelisted for L2 and L3 marking for traffic sent to the Wi-Fi network.  # noqa: E501

        :return: The whitelist_specific_apps of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._whitelist_specific_apps

    @whitelist_specific_apps.setter
    def whitelist_specific_apps(self, whitelist_specific_apps):
        """Sets the whitelist_specific_apps of this AppleWifiPayloadV2Entity.

        Gets or sets array of app bundle identifiers that will be whitelisted for L2 and L3 marking for traffic sent to the Wi-Fi network.  # noqa: E501

        :param whitelist_specific_apps: The whitelist_specific_apps of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._whitelist_specific_apps = whitelist_specific_apps

    @property
    def fastlane_qos_marking(self):
        """Gets the fastlane_qos_marking of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets fastlane QoS Marking 1 : Restrict QoS Marking, 2: Do Not Restrict QoS Marking.  # noqa: E501

        :return: The fastlane_qos_marking of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._fastlane_qos_marking

    @fastlane_qos_marking.setter
    def fastlane_qos_marking(self, fastlane_qos_marking):
        """Sets the fastlane_qos_marking of this AppleWifiPayloadV2Entity.

        Gets or sets fastlane QoS Marking 1 : Restrict QoS Marking, 2: Do Not Restrict QoS Marking.  # noqa: E501

        :param fastlane_qos_marking: The fastlane_qos_marking of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._fastlane_qos_marking = fastlane_qos_marking

    @property
    def proxy_pac_fallback_allowed(self):
        """Gets the proxy_pac_fallback_allowed of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if false, prevents the device from connecting directly to the destination if the PAC file is unreachable on iOS 7+.  # noqa: E501

        :return: The proxy_pac_fallback_allowed of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._proxy_pac_fallback_allowed

    @proxy_pac_fallback_allowed.setter
    def proxy_pac_fallback_allowed(self, proxy_pac_fallback_allowed):
        """Sets the proxy_pac_fallback_allowed of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if false, prevents the device from connecting directly to the destination if the PAC file is unreachable on iOS 7+.  # noqa: E501

        :param proxy_pac_fallback_allowed: The proxy_pac_fallback_allowed of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._proxy_pac_fallback_allowed = proxy_pac_fallback_allowed

    @property
    def bypass_captive_portal(self):
        """Gets the bypass_captive_portal of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, Captive Network detection will be bypassed when the device connects to the network on iOS 10+.  # noqa: E501

        :return: The bypass_captive_portal of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._bypass_captive_portal

    @bypass_captive_portal.setter
    def bypass_captive_portal(self, bypass_captive_portal):
        """Sets the bypass_captive_portal of this AppleWifiPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, Captive Network detection will be bypassed when the device connects to the network on iOS 10+.  # noqa: E501

        :param bypass_captive_portal: The bypass_captive_portal of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._bypass_captive_portal = bypass_captive_portal

    @property
    def allowlist_specific_apps(self):
        """Gets the allowlist_specific_apps of this AppleWifiPayloadV2Entity.  # noqa: E501

        Gets or sets array of app bundle identifiers that will be allowed for L2 and L3 marking for traffic sent to the Wi-Fi network.  # noqa: E501

        :return: The allowlist_specific_apps of this AppleWifiPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowlist_specific_apps

    @allowlist_specific_apps.setter
    def allowlist_specific_apps(self, allowlist_specific_apps):
        """Sets the allowlist_specific_apps of this AppleWifiPayloadV2Entity.

        Gets or sets array of app bundle identifiers that will be allowed for L2 and L3 marking for traffic sent to the Wi-Fi network.  # noqa: E501

        :param allowlist_specific_apps: The allowlist_specific_apps of this AppleWifiPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._allowlist_specific_apps = allowlist_specific_apps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleWifiPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleWifiPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleWifiPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
