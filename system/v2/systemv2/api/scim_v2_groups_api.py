# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv2.api_client import ApiClient


class ScimV2GroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def scim_v2_groups_create_group_async(self, create_group_request, **kwargs):  # noqa: E501
        """New - Create a group.  # noqa: E501

        Endpoint to create a group. As of now, we only support importing user groups from  a directory service into Workspace One UEM.   When importing a user group form directory service, one needs to pass externalId.   In case of a directory custom group, its required to pass displayName for the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_create_group_async(create_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGroupRequest create_group_request: The group to be created.(Required) (required)
        :return: GroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scim_v2_groups_create_group_async_with_http_info(create_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.scim_v2_groups_create_group_async_with_http_info(create_group_request, **kwargs)  # noqa: E501
            return data

    def scim_v2_groups_create_group_async_with_http_info(self, create_group_request, **kwargs):  # noqa: E501
        """New - Create a group.  # noqa: E501

        Endpoint to create a group. As of now, we only support importing user groups from  a directory service into Workspace One UEM.   When importing a user group form directory service, one needs to pass externalId.   In case of a directory custom group, its required to pass displayName for the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_create_group_async_with_http_info(create_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateGroupRequest create_group_request: The group to be created.(Required) (required)
        :return: GroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_group_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_groups_create_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_group_request' is set
        if self.api_client.client_side_validation and ('create_group_request' not in params or
                                                       params['create_group_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_group_request` when calling `scim_v2_groups_create_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_group_request' in params:
            body_params = params['create_group_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scim/v2/Groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scim_v2_groups_get_user_group_by_uuid(self, uuid, **kwargs):  # noqa: E501
        """New - Get the group details by UUID  # noqa: E501

        Get the enrollment/admin group details by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_get_user_group_by_uuid(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an group(Required) (required)
        :return: GroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scim_v2_groups_get_user_group_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.scim_v2_groups_get_user_group_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def scim_v2_groups_get_user_group_by_uuid_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Get the group details by UUID  # noqa: E501

        Get the enrollment/admin group details by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_get_user_group_by_uuid_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an group(Required) (required)
        :return: GroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_groups_get_user_group_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `scim_v2_groups_get_user_group_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scim/v2/Groups/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scim_v2_groups_get_user_groups(self, **kwargs):  # noqa: E501
        """New - Get a group list  # noqa: E501

        Get the group list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_get_user_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: The filter string used to request a subset of resources.
        :param str attributes: A comma separated list of strings indicating the names of resource attributes to return in the response.
        :param str excluded_attributes: A comma separated list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.
        :param str sort_by: A string indicating the attribute to be used to order the returned responses.
        :param str sort_order: A string indicating the order in which the 'sortBy' parameter is applied.
        :param str start_index: A 1-based integer indicating the index of the first query result.
        :param str count: An integer indicating the maximum number of query results per page.
        :return: GroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scim_v2_groups_get_user_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.scim_v2_groups_get_user_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def scim_v2_groups_get_user_groups_with_http_info(self, **kwargs):  # noqa: E501
        """New - Get a group list  # noqa: E501

        Get the group list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_get_user_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: The filter string used to request a subset of resources.
        :param str attributes: A comma separated list of strings indicating the names of resource attributes to return in the response.
        :param str excluded_attributes: A comma separated list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.
        :param str sort_by: A string indicating the attribute to be used to order the returned responses.
        :param str sort_order: A string indicating the order in which the 'sortBy' parameter is applied.
        :param str start_index: A 1-based integer indicating the index of the first query result.
        :param str count: An integer indicating the maximum number of query results per page.
        :return: GroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'attributes', 'excluded_attributes', 'sort_by', 'sort_order', 'start_index', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_groups_get_user_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
        if 'excluded_attributes' in params:
            query_params.append(('excludedAttributes', params['excluded_attributes']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scim/v2/Groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scim_v2_groups_group_actions_async(self, uuid, body, **kwargs):  # noqa: E501
        """New - Operations on groups.  # noqa: E501

        Operations on groups. Currently we support patch operation only on LastSyncOn. Sync will be performed only when the LastSyncOn is passed as mm/dd/yyyy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_group_actions_async(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of a group(Required) (required)
        :param GroupPatchRequest body: patch operations list(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scim_v2_groups_group_actions_async_with_http_info(uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.scim_v2_groups_group_actions_async_with_http_info(uuid, body, **kwargs)  # noqa: E501
            return data

    def scim_v2_groups_group_actions_async_with_http_info(self, uuid, body, **kwargs):  # noqa: E501
        """New - Operations on groups.  # noqa: E501

        Operations on groups. Currently we support patch operation only on LastSyncOn. Sync will be performed only when the LastSyncOn is passed as mm/dd/yyyy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_group_actions_async_with_http_info(uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of a group(Required) (required)
        :param GroupPatchRequest body: patch operations list(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_groups_group_actions_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `scim_v2_groups_group_actions_async`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `scim_v2_groups_group_actions_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scim/v2/Groups/{uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scim_v2_groups_search_groups(self, search_request, **kwargs):  # noqa: E501
        """New - Search for groups.  # noqa: E501

        Search for groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_search_groups(search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest search_request: The search criteria to returned responses.(Required) (required)
        :return: GroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scim_v2_groups_search_groups_with_http_info(search_request, **kwargs)  # noqa: E501
        else:
            (data) = self.scim_v2_groups_search_groups_with_http_info(search_request, **kwargs)  # noqa: E501
            return data

    def scim_v2_groups_search_groups_with_http_info(self, search_request, **kwargs):  # noqa: E501
        """New - Search for groups.  # noqa: E501

        Search for groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scim_v2_groups_search_groups_with_http_info(search_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest search_request: The search criteria to returned responses.(Required) (required)
        :return: GroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scim_v2_groups_search_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_request' is set
        if self.api_client.client_side_validation and ('search_request' not in params or
                                                       params['search_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_request` when calling `scim_v2_groups_search_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search_request' in params:
            body_params = params['search_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/scim+json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/scim+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scim/v2/Groups/.search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
