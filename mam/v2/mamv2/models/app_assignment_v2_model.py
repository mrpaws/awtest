# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv2.configuration import Configuration


class AppAssignmentV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority': 'int',
        'distribution': 'AppAssignmentDistributionV2Model',
        'restriction': 'AppAssignmentRestrictionV1Model',
        'tunnel': 'AppAssignmentTunnelV1Model',
        'application_configuration': 'list[AppConfigurationV1Model]',
        'application_attributes': 'list[AppConfigurationV1Model]',
        'is_dynamic_template_saved': 'bool',
        'is_apple_education_assignment': 'bool',
        'is_android_enterprise_config_template': 'bool',
        'app_profiles_mapping': 'list[ApplicationDeploymentProfileMapV1Model]'
    }

    attribute_map = {
        'priority': 'priority',
        'distribution': 'distribution',
        'restriction': 'restriction',
        'tunnel': 'tunnel',
        'application_configuration': 'application_configuration',
        'application_attributes': 'application_attributes',
        'is_dynamic_template_saved': 'is_dynamic_template_saved',
        'is_apple_education_assignment': 'is_apple_education_assignment',
        'is_android_enterprise_config_template': 'is_android_enterprise_config_template',
        'app_profiles_mapping': 'app_profiles_mapping'
    }

    def __init__(self, priority=None, distribution=None, restriction=None, tunnel=None, application_configuration=None, application_attributes=None, is_dynamic_template_saved=None, is_apple_education_assignment=None, is_android_enterprise_config_template=None, app_profiles_mapping=None, _configuration=None):  # noqa: E501
        """AppAssignmentV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._priority = None
        self._distribution = None
        self._restriction = None
        self._tunnel = None
        self._application_configuration = None
        self._application_attributes = None
        self._is_dynamic_template_saved = None
        self._is_apple_education_assignment = None
        self._is_android_enterprise_config_template = None
        self._app_profiles_mapping = None
        self.discriminator = None

        self.priority = priority
        self.distribution = distribution
        if restriction is not None:
            self.restriction = restriction
        if tunnel is not None:
            self.tunnel = tunnel
        if application_configuration is not None:
            self.application_configuration = application_configuration
        if application_attributes is not None:
            self.application_attributes = application_attributes
        if is_dynamic_template_saved is not None:
            self.is_dynamic_template_saved = is_dynamic_template_saved
        if is_apple_education_assignment is not None:
            self.is_apple_education_assignment = is_apple_education_assignment
        if is_android_enterprise_config_template is not None:
            self.is_android_enterprise_config_template = is_android_enterprise_config_template
        if app_profiles_mapping is not None:
            self.app_profiles_mapping = app_profiles_mapping

    @property
    def priority(self):
        """Gets the priority of this AppAssignmentV2Model.  # noqa: E501

        Priority of an assignment policy with 0 being the highest priority.  # noqa: E501

        :return: The priority of this AppAssignmentV2Model.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AppAssignmentV2Model.

        Priority of an assignment policy with 0 being the highest priority.  # noqa: E501

        :param priority: The priority of this AppAssignmentV2Model.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def distribution(self):
        """Gets the distribution of this AppAssignmentV2Model.  # noqa: E501

        App assignment distribution model  # noqa: E501

        :return: The distribution of this AppAssignmentV2Model.  # noqa: E501
        :rtype: AppAssignmentDistributionV2Model
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this AppAssignmentV2Model.

        App assignment distribution model  # noqa: E501

        :param distribution: The distribution of this AppAssignmentV2Model.  # noqa: E501
        :type: AppAssignmentDistributionV2Model
        """
        if self._configuration.client_side_validation and distribution is None:
            raise ValueError("Invalid value for `distribution`, must not be `None`")  # noqa: E501

        self._distribution = distribution

    @property
    def restriction(self):
        """Gets the restriction of this AppAssignmentV2Model.  # noqa: E501

        App assignment restriction model  # noqa: E501

        :return: The restriction of this AppAssignmentV2Model.  # noqa: E501
        :rtype: AppAssignmentRestrictionV1Model
        """
        return self._restriction

    @restriction.setter
    def restriction(self, restriction):
        """Sets the restriction of this AppAssignmentV2Model.

        App assignment restriction model  # noqa: E501

        :param restriction: The restriction of this AppAssignmentV2Model.  # noqa: E501
        :type: AppAssignmentRestrictionV1Model
        """

        self._restriction = restriction

    @property
    def tunnel(self):
        """Gets the tunnel of this AppAssignmentV2Model.  # noqa: E501

        App assignment tunnel model  # noqa: E501

        :return: The tunnel of this AppAssignmentV2Model.  # noqa: E501
        :rtype: AppAssignmentTunnelV1Model
        """
        return self._tunnel

    @tunnel.setter
    def tunnel(self, tunnel):
        """Sets the tunnel of this AppAssignmentV2Model.

        App assignment tunnel model  # noqa: E501

        :param tunnel: The tunnel of this AppAssignmentV2Model.  # noqa: E501
        :type: AppAssignmentTunnelV1Model
        """

        self._tunnel = tunnel

    @property
    def application_configuration(self):
        """Gets the application_configuration of this AppAssignmentV2Model.  # noqa: E501

        List of application configurations.  # noqa: E501

        :return: The application_configuration of this AppAssignmentV2Model.  # noqa: E501
        :rtype: list[AppConfigurationV1Model]
        """
        return self._application_configuration

    @application_configuration.setter
    def application_configuration(self, application_configuration):
        """Sets the application_configuration of this AppAssignmentV2Model.

        List of application configurations.  # noqa: E501

        :param application_configuration: The application_configuration of this AppAssignmentV2Model.  # noqa: E501
        :type: list[AppConfigurationV1Model]
        """

        self._application_configuration = application_configuration

    @property
    def application_attributes(self):
        """Gets the application_attributes of this AppAssignmentV2Model.  # noqa: E501

        List of application attributes.  # noqa: E501

        :return: The application_attributes of this AppAssignmentV2Model.  # noqa: E501
        :rtype: list[AppConfigurationV1Model]
        """
        return self._application_attributes

    @application_attributes.setter
    def application_attributes(self, application_attributes):
        """Sets the application_attributes of this AppAssignmentV2Model.

        List of application attributes.  # noqa: E501

        :param application_attributes: The application_attributes of this AppAssignmentV2Model.  # noqa: E501
        :type: list[AppConfigurationV1Model]
        """

        self._application_attributes = application_attributes

    @property
    def is_dynamic_template_saved(self):
        """Gets the is_dynamic_template_saved of this AppAssignmentV2Model.  # noqa: E501

        Flag to check if the assignment configuration is being saved through DDUI.  # noqa: E501

        :return: The is_dynamic_template_saved of this AppAssignmentV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._is_dynamic_template_saved

    @is_dynamic_template_saved.setter
    def is_dynamic_template_saved(self, is_dynamic_template_saved):
        """Sets the is_dynamic_template_saved of this AppAssignmentV2Model.

        Flag to check if the assignment configuration is being saved through DDUI.  # noqa: E501

        :param is_dynamic_template_saved: The is_dynamic_template_saved of this AppAssignmentV2Model.  # noqa: E501
        :type: bool
        """

        self._is_dynamic_template_saved = is_dynamic_template_saved

    @property
    def is_apple_education_assignment(self):
        """Gets the is_apple_education_assignment of this AppAssignmentV2Model.  # noqa: E501

        Gets or sets a value indicating whether an Apple education assignment is configured or not.  Edu assignment does not allow deletion on assignment page, this is used to group edu assignment separately  with other assignment.  # noqa: E501

        :return: The is_apple_education_assignment of this AppAssignmentV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._is_apple_education_assignment

    @is_apple_education_assignment.setter
    def is_apple_education_assignment(self, is_apple_education_assignment):
        """Sets the is_apple_education_assignment of this AppAssignmentV2Model.

        Gets or sets a value indicating whether an Apple education assignment is configured or not.  Edu assignment does not allow deletion on assignment page, this is used to group edu assignment separately  with other assignment.  # noqa: E501

        :param is_apple_education_assignment: The is_apple_education_assignment of this AppAssignmentV2Model.  # noqa: E501
        :type: bool
        """

        self._is_apple_education_assignment = is_apple_education_assignment

    @property
    def is_android_enterprise_config_template(self):
        """Gets the is_android_enterprise_config_template of this AppAssignmentV2Model.  # noqa: E501

        Gets or sets a value indicating whether the configuration was saved from managed configuration enterprise template.  # noqa: E501

        :return: The is_android_enterprise_config_template of this AppAssignmentV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._is_android_enterprise_config_template

    @is_android_enterprise_config_template.setter
    def is_android_enterprise_config_template(self, is_android_enterprise_config_template):
        """Sets the is_android_enterprise_config_template of this AppAssignmentV2Model.

        Gets or sets a value indicating whether the configuration was saved from managed configuration enterprise template.  # noqa: E501

        :param is_android_enterprise_config_template: The is_android_enterprise_config_template of this AppAssignmentV2Model.  # noqa: E501
        :type: bool
        """

        self._is_android_enterprise_config_template = is_android_enterprise_config_template

    @property
    def app_profiles_mapping(self):
        """Gets the app_profiles_mapping of this AppAssignmentV2Model.  # noqa: E501

        Gets or sets a SDK profile, modular SDK profile mappings with the assignment.  # noqa: E501

        :return: The app_profiles_mapping of this AppAssignmentV2Model.  # noqa: E501
        :rtype: list[ApplicationDeploymentProfileMapV1Model]
        """
        return self._app_profiles_mapping

    @app_profiles_mapping.setter
    def app_profiles_mapping(self, app_profiles_mapping):
        """Sets the app_profiles_mapping of this AppAssignmentV2Model.

        Gets or sets a SDK profile, modular SDK profile mappings with the assignment.  # noqa: E501

        :param app_profiles_mapping: The app_profiles_mapping of this AppAssignmentV2Model.  # noqa: E501
        :type: list[ApplicationDeploymentProfileMapV1Model]
        """

        self._app_profiles_mapping = app_profiles_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppAssignmentV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppAssignmentV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppAssignmentV2Model):
            return True

        return self.to_dict() != other.to_dict()
