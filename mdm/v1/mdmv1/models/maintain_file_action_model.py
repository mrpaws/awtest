# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class MaintainFileActionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maintain_general_input': 'MaintainGeneralAPIModel_',
        'name': 'str',
        'description': 'str',
        'device_platform_id': 'int',
        'remove_on_uninstall': 'bool',
        'manifest_install_steps': 'list[FileActionManifestStepModel]',
        'manifest_un_install_steps': 'list[FileActionManifestStepModel]',
        'repository_files': 'list[RepositoryFileModel]',
        'blob_files': 'list[BlobFileModel]',
        'file_action_uuid': 'str'
    }

    attribute_map = {
        'maintain_general_input': 'MaintainGeneralInput',
        'name': 'Name',
        'description': 'Description',
        'device_platform_id': 'DevicePlatformID',
        'remove_on_uninstall': 'RemoveOnUninstall',
        'manifest_install_steps': 'ManifestInstallSteps',
        'manifest_un_install_steps': 'ManifestUnInstallSteps',
        'repository_files': 'RepositoryFiles',
        'blob_files': 'BlobFiles',
        'file_action_uuid': 'FileActionUUID'
    }

    def __init__(self, maintain_general_input=None, name=None, description=None, device_platform_id=None, remove_on_uninstall=None, manifest_install_steps=None, manifest_un_install_steps=None, repository_files=None, blob_files=None, file_action_uuid=None, _configuration=None):  # noqa: E501
        """MaintainFileActionModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._maintain_general_input = None
        self._name = None
        self._description = None
        self._device_platform_id = None
        self._remove_on_uninstall = None
        self._manifest_install_steps = None
        self._manifest_un_install_steps = None
        self._repository_files = None
        self._blob_files = None
        self._file_action_uuid = None
        self.discriminator = None

        if maintain_general_input is not None:
            self.maintain_general_input = maintain_general_input
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if device_platform_id is not None:
            self.device_platform_id = device_platform_id
        if remove_on_uninstall is not None:
            self.remove_on_uninstall = remove_on_uninstall
        if manifest_install_steps is not None:
            self.manifest_install_steps = manifest_install_steps
        if manifest_un_install_steps is not None:
            self.manifest_un_install_steps = manifest_un_install_steps
        if repository_files is not None:
            self.repository_files = repository_files
        if blob_files is not None:
            self.blob_files = blob_files
        if file_action_uuid is not None:
            self.file_action_uuid = file_action_uuid

    @property
    def maintain_general_input(self):
        """Gets the maintain_general_input of this MaintainFileActionModel.  # noqa: E501

        Gets or sets this holds Organization Group ID and whether there is permission to insert to the Organization Group or not.  # noqa: E501

        :return: The maintain_general_input of this MaintainFileActionModel.  # noqa: E501
        :rtype: MaintainGeneralAPIModel_
        """
        return self._maintain_general_input

    @maintain_general_input.setter
    def maintain_general_input(self, maintain_general_input):
        """Sets the maintain_general_input of this MaintainFileActionModel.

        Gets or sets this holds Organization Group ID and whether there is permission to insert to the Organization Group or not.  # noqa: E501

        :param maintain_general_input: The maintain_general_input of this MaintainFileActionModel.  # noqa: E501
        :type: MaintainGeneralAPIModel_
        """

        self._maintain_general_input = maintain_general_input

    @property
    def name(self):
        """Gets the name of this MaintainFileActionModel.  # noqa: E501

        Gets or sets name of the File Action.  # noqa: E501

        :return: The name of this MaintainFileActionModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MaintainFileActionModel.

        Gets or sets name of the File Action.  # noqa: E501

        :param name: The name of this MaintainFileActionModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MaintainFileActionModel.  # noqa: E501

        Gets or sets description of the File Action.  # noqa: E501

        :return: The description of this MaintainFileActionModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MaintainFileActionModel.

        Gets or sets description of the File Action.  # noqa: E501

        :param description: The description of this MaintainFileActionModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_platform_id(self):
        """Gets the device_platform_id of this MaintainFileActionModel.  # noqa: E501

        Gets or sets device platform that file/action will be created for.  # noqa: E501

        :return: The device_platform_id of this MaintainFileActionModel.  # noqa: E501
        :rtype: int
        """
        return self._device_platform_id

    @device_platform_id.setter
    def device_platform_id(self, device_platform_id):
        """Sets the device_platform_id of this MaintainFileActionModel.

        Gets or sets device platform that file/action will be created for.  # noqa: E501

        :param device_platform_id: The device_platform_id of this MaintainFileActionModel.  # noqa: E501
        :type: int
        """

        self._device_platform_id = device_platform_id

    @property
    def remove_on_uninstall(self):
        """Gets the remove_on_uninstall of this MaintainFileActionModel.  # noqa: E501

        Gets or sets a value indicating whether flag to indicate if files should automatically be removed on uninstall.  # noqa: E501

        :return: The remove_on_uninstall of this MaintainFileActionModel.  # noqa: E501
        :rtype: bool
        """
        return self._remove_on_uninstall

    @remove_on_uninstall.setter
    def remove_on_uninstall(self, remove_on_uninstall):
        """Sets the remove_on_uninstall of this MaintainFileActionModel.

        Gets or sets a value indicating whether flag to indicate if files should automatically be removed on uninstall.  # noqa: E501

        :param remove_on_uninstall: The remove_on_uninstall of this MaintainFileActionModel.  # noqa: E501
        :type: bool
        """

        self._remove_on_uninstall = remove_on_uninstall

    @property
    def manifest_install_steps(self):
        """Gets the manifest_install_steps of this MaintainFileActionModel.  # noqa: E501

        Gets or sets details of Manifest Install Steps.  # noqa: E501

        :return: The manifest_install_steps of this MaintainFileActionModel.  # noqa: E501
        :rtype: list[FileActionManifestStepModel]
        """
        return self._manifest_install_steps

    @manifest_install_steps.setter
    def manifest_install_steps(self, manifest_install_steps):
        """Sets the manifest_install_steps of this MaintainFileActionModel.

        Gets or sets details of Manifest Install Steps.  # noqa: E501

        :param manifest_install_steps: The manifest_install_steps of this MaintainFileActionModel.  # noqa: E501
        :type: list[FileActionManifestStepModel]
        """

        self._manifest_install_steps = manifest_install_steps

    @property
    def manifest_un_install_steps(self):
        """Gets the manifest_un_install_steps of this MaintainFileActionModel.  # noqa: E501

        Gets or sets details of Manifest UnInstall Steps.  # noqa: E501

        :return: The manifest_un_install_steps of this MaintainFileActionModel.  # noqa: E501
        :rtype: list[FileActionManifestStepModel]
        """
        return self._manifest_un_install_steps

    @manifest_un_install_steps.setter
    def manifest_un_install_steps(self, manifest_un_install_steps):
        """Sets the manifest_un_install_steps of this MaintainFileActionModel.

        Gets or sets details of Manifest UnInstall Steps.  # noqa: E501

        :param manifest_un_install_steps: The manifest_un_install_steps of this MaintainFileActionModel.  # noqa: E501
        :type: list[FileActionManifestStepModel]
        """

        self._manifest_un_install_steps = manifest_un_install_steps

    @property
    def repository_files(self):
        """Gets the repository_files of this MaintainFileActionModel.  # noqa: E501

        Gets or sets details of Repository Files.  # noqa: E501

        :return: The repository_files of this MaintainFileActionModel.  # noqa: E501
        :rtype: list[RepositoryFileModel]
        """
        return self._repository_files

    @repository_files.setter
    def repository_files(self, repository_files):
        """Sets the repository_files of this MaintainFileActionModel.

        Gets or sets details of Repository Files.  # noqa: E501

        :param repository_files: The repository_files of this MaintainFileActionModel.  # noqa: E501
        :type: list[RepositoryFileModel]
        """

        self._repository_files = repository_files

    @property
    def blob_files(self):
        """Gets the blob_files of this MaintainFileActionModel.  # noqa: E501

        Gets or sets details of Blob Files.  # noqa: E501

        :return: The blob_files of this MaintainFileActionModel.  # noqa: E501
        :rtype: list[BlobFileModel]
        """
        return self._blob_files

    @blob_files.setter
    def blob_files(self, blob_files):
        """Sets the blob_files of this MaintainFileActionModel.

        Gets or sets details of Blob Files.  # noqa: E501

        :param blob_files: The blob_files of this MaintainFileActionModel.  # noqa: E501
        :type: list[BlobFileModel]
        """

        self._blob_files = blob_files

    @property
    def file_action_uuid(self):
        """Gets the file_action_uuid of this MaintainFileActionModel.  # noqa: E501

        Gets or sets unique identifier of the File Action.  # noqa: E501

        :return: The file_action_uuid of this MaintainFileActionModel.  # noqa: E501
        :rtype: str
        """
        return self._file_action_uuid

    @file_action_uuid.setter
    def file_action_uuid(self, file_action_uuid):
        """Sets the file_action_uuid of this MaintainFileActionModel.

        Gets or sets unique identifier of the File Action.  # noqa: E501

        :param file_action_uuid: The file_action_uuid of this MaintainFileActionModel.  # noqa: E501
        :type: str
        """

        self._file_action_uuid = file_action_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintainFileActionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintainFileActionModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaintainFileActionModel):
            return True

        return self.to_dict() != other.to_dict()
