# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ProvisioningJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'device_uuid': 'str',
        'job_id': 'int',
        'job_uuid': 'str',
        'job_state': 'str',
        'job_type': 'str',
        'modified_date': 'datetime',
        'organization_group': 'str',
        'part_of_set': 'str',
        'product': 'str',
        'product_set': 'str',
        'error_code': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'device_id': 'DeviceID',
        'device_uuid': 'DeviceUuid',
        'job_id': 'JobID',
        'job_uuid': 'JobUuid',
        'job_state': 'JobState',
        'job_type': 'JobType',
        'modified_date': 'ModifiedDate',
        'organization_group': 'OrganizationGroup',
        'part_of_set': 'PartOfSet',
        'product': 'Product',
        'product_set': 'ProductSet',
        'error_code': 'ErrorCode',
        'error_message': 'ErrorMessage'
    }

    def __init__(self, device_id=None, device_uuid=None, job_id=None, job_uuid=None, job_state=None, job_type=None, modified_date=None, organization_group=None, part_of_set=None, product=None, product_set=None, error_code=None, error_message=None, _configuration=None):  # noqa: E501
        """ProvisioningJob - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_id = None
        self._device_uuid = None
        self._job_id = None
        self._job_uuid = None
        self._job_state = None
        self._job_type = None
        self._modified_date = None
        self._organization_group = None
        self._part_of_set = None
        self._product = None
        self._product_set = None
        self._error_code = None
        self._error_message = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if job_id is not None:
            self.job_id = job_id
        if job_uuid is not None:
            self.job_uuid = job_uuid
        if job_state is not None:
            self.job_state = job_state
        if job_type is not None:
            self.job_type = job_type
        if modified_date is not None:
            self.modified_date = modified_date
        if organization_group is not None:
            self.organization_group = organization_group
        if part_of_set is not None:
            self.part_of_set = part_of_set
        if product is not None:
            self.product = product
        if product_set is not None:
            self.product_set = product_set
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message

    @property
    def device_id(self):
        """Gets the device_id of this ProvisioningJob.  # noqa: E501

        Gets or sets Device Id.  # noqa: E501

        :return: The device_id of this ProvisioningJob.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ProvisioningJob.

        Gets or sets Device Id.  # noqa: E501

        :param device_id: The device_id of this ProvisioningJob.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def device_uuid(self):
        """Gets the device_uuid of this ProvisioningJob.  # noqa: E501

        Gets or sets Device UUId.  # noqa: E501

        :return: The device_uuid of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this ProvisioningJob.

        Gets or sets Device UUId.  # noqa: E501

        :param device_uuid: The device_uuid of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def job_id(self):
        """Gets the job_id of this ProvisioningJob.  # noqa: E501

        Gets or sets Job Id.  # noqa: E501

        :return: The job_id of this ProvisioningJob.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this ProvisioningJob.

        Gets or sets Job Id.  # noqa: E501

        :param job_id: The job_id of this ProvisioningJob.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def job_uuid(self):
        """Gets the job_uuid of this ProvisioningJob.  # noqa: E501

        Gets or sets Job JobUuid.  # noqa: E501

        :return: The job_uuid of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._job_uuid

    @job_uuid.setter
    def job_uuid(self, job_uuid):
        """Sets the job_uuid of this ProvisioningJob.

        Gets or sets Job JobUuid.  # noqa: E501

        :param job_uuid: The job_uuid of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._job_uuid = job_uuid

    @property
    def job_state(self):
        """Gets the job_state of this ProvisioningJob.  # noqa: E501

        Gets or sets Job State.  # noqa: E501

        :return: The job_state of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state):
        """Sets the job_state of this ProvisioningJob.

        Gets or sets Job State.  # noqa: E501

        :param job_state: The job_state of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._job_state = job_state

    @property
    def job_type(self):
        """Gets the job_type of this ProvisioningJob.  # noqa: E501

        Gets or sets Job Type.  # noqa: E501

        :return: The job_type of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this ProvisioningJob.

        Gets or sets Job Type.  # noqa: E501

        :param job_type: The job_type of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._job_type = job_type

    @property
    def modified_date(self):
        """Gets the modified_date of this ProvisioningJob.  # noqa: E501

        Gets or sets Modified Date.  # noqa: E501

        :return: The modified_date of this ProvisioningJob.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ProvisioningJob.

        Gets or sets Modified Date.  # noqa: E501

        :param modified_date: The modified_date of this ProvisioningJob.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def organization_group(self):
        """Gets the organization_group of this ProvisioningJob.  # noqa: E501

        Gets or sets Organization Group.  # noqa: E501

        :return: The organization_group of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._organization_group

    @organization_group.setter
    def organization_group(self, organization_group):
        """Sets the organization_group of this ProvisioningJob.

        Gets or sets Organization Group.  # noqa: E501

        :param organization_group: The organization_group of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._organization_group = organization_group

    @property
    def part_of_set(self):
        """Gets the part_of_set of this ProvisioningJob.  # noqa: E501

        Gets or sets whether part of a Product Set or not.  # noqa: E501

        :return: The part_of_set of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._part_of_set

    @part_of_set.setter
    def part_of_set(self, part_of_set):
        """Sets the part_of_set of this ProvisioningJob.

        Gets or sets whether part of a Product Set or not.  # noqa: E501

        :param part_of_set: The part_of_set of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._part_of_set = part_of_set

    @property
    def product(self):
        """Gets the product of this ProvisioningJob.  # noqa: E501

        Gets or sets Product Name.  # noqa: E501

        :return: The product of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProvisioningJob.

        Gets or sets Product Name.  # noqa: E501

        :param product: The product of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def product_set(self):
        """Gets the product_set of this ProvisioningJob.  # noqa: E501

        Gets or sets Product Set Name.  # noqa: E501

        :return: The product_set of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._product_set

    @product_set.setter
    def product_set(self, product_set):
        """Sets the product_set of this ProvisioningJob.

        Gets or sets Product Set Name.  # noqa: E501

        :param product_set: The product_set of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._product_set = product_set

    @property
    def error_code(self):
        """Gets the error_code of this ProvisioningJob.  # noqa: E501

        Gets or sets the error code.  # noqa: E501

        :return: The error_code of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ProvisioningJob.

        Gets or sets the error code.  # noqa: E501

        :param error_code: The error_code of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this ProvisioningJob.  # noqa: E501

        Gets or sets the error message.  # noqa: E501

        :return: The error_message of this ProvisioningJob.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ProvisioningJob.

        Gets or sets the error message.  # noqa: E501

        :param error_message: The error_message of this ProvisioningJob.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisioningJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisioningJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProvisioningJob):
            return True

        return self.to_dict() != other.to_dict()
