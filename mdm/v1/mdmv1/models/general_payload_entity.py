# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class GeneralPayloadEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_id': 'int',
        'name': 'str',
        'description': 'str',
        'is_managed': 'bool',
        'profile_scope': 'str',
        'assignment_type': 'str',
        'minimum_operating_system': 'str',
        'device_model': 'str',
        'ownership_type': 'str',
        'is_active': 'bool',
        'enable_provisioning': 'bool',
        'password': 'str',
        'allow_removal': 'str',
        'managed_location_group_id': 'int',
        'assigned_location_group_id': 'list[int]',
        'user_groups': 'list[int]',
        'areas': 'list[int]',
        'schedules': 'list[int]',
        'expiration_date': 'str'
    }

    attribute_map = {
        'profile_id': 'ProfileId',
        'name': 'Name',
        'description': 'Description',
        'is_managed': 'IsManaged',
        'profile_scope': 'ProfileScope',
        'assignment_type': 'AssignmentType',
        'minimum_operating_system': 'MinimumOperatingSystem',
        'device_model': 'DeviceModel',
        'ownership_type': 'OwnershipType',
        'is_active': 'IsActive',
        'enable_provisioning': 'EnableProvisioning',
        'password': 'Password',
        'allow_removal': 'AllowRemoval',
        'managed_location_group_id': 'ManagedLocationGroupID',
        'assigned_location_group_id': 'AssignedLocationGroupID',
        'user_groups': 'UserGroups',
        'areas': 'Areas',
        'schedules': 'Schedules',
        'expiration_date': 'ExpirationDate'
    }

    def __init__(self, profile_id=None, name=None, description=None, is_managed=None, profile_scope=None, assignment_type=None, minimum_operating_system=None, device_model=None, ownership_type=None, is_active=None, enable_provisioning=None, password=None, allow_removal=None, managed_location_group_id=None, assigned_location_group_id=None, user_groups=None, areas=None, schedules=None, expiration_date=None, _configuration=None):  # noqa: E501
        """GeneralPayloadEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._profile_id = None
        self._name = None
        self._description = None
        self._is_managed = None
        self._profile_scope = None
        self._assignment_type = None
        self._minimum_operating_system = None
        self._device_model = None
        self._ownership_type = None
        self._is_active = None
        self._enable_provisioning = None
        self._password = None
        self._allow_removal = None
        self._managed_location_group_id = None
        self._assigned_location_group_id = None
        self._user_groups = None
        self._areas = None
        self._schedules = None
        self._expiration_date = None
        self.discriminator = None

        if profile_id is not None:
            self.profile_id = profile_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_managed is not None:
            self.is_managed = is_managed
        if profile_scope is not None:
            self.profile_scope = profile_scope
        if assignment_type is not None:
            self.assignment_type = assignment_type
        if minimum_operating_system is not None:
            self.minimum_operating_system = minimum_operating_system
        if device_model is not None:
            self.device_model = device_model
        if ownership_type is not None:
            self.ownership_type = ownership_type
        if is_active is not None:
            self.is_active = is_active
        if enable_provisioning is not None:
            self.enable_provisioning = enable_provisioning
        if password is not None:
            self.password = password
        if allow_removal is not None:
            self.allow_removal = allow_removal
        if managed_location_group_id is not None:
            self.managed_location_group_id = managed_location_group_id
        if assigned_location_group_id is not None:
            self.assigned_location_group_id = assigned_location_group_id
        if user_groups is not None:
            self.user_groups = user_groups
        if areas is not None:
            self.areas = areas
        if schedules is not None:
            self.schedules = schedules
        if expiration_date is not None:
            self.expiration_date = expiration_date

    @property
    def profile_id(self):
        """Gets the profile_id of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets profileId.  # noqa: E501

        :return: The profile_id of this GeneralPayloadEntity.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this GeneralPayloadEntity.

        Gets or sets profileId.  # noqa: E501

        :param profile_id: The profile_id of this GeneralPayloadEntity.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    @property
    def name(self):
        """Gets the name of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets name.  # noqa: E501

        :return: The name of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeneralPayloadEntity.

        Gets or sets name.  # noqa: E501

        :param name: The name of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets description.  # noqa: E501

        :return: The description of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GeneralPayloadEntity.

        Gets or sets description.  # noqa: E501

        :param description: The description of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_managed(self):
        """Gets the is_managed of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether is Managed.  # noqa: E501

        :return: The is_managed of this GeneralPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._is_managed

    @is_managed.setter
    def is_managed(self, is_managed):
        """Sets the is_managed of this GeneralPayloadEntity.

        Gets or sets a value indicating whether is Managed.  # noqa: E501

        :param is_managed: The is_managed of this GeneralPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._is_managed = is_managed

    @property
    def profile_scope(self):
        """Gets the profile_scope of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets device Profile Scope.  # noqa: E501

        :return: The profile_scope of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._profile_scope

    @profile_scope.setter
    def profile_scope(self, profile_scope):
        """Sets the profile_scope of this GeneralPayloadEntity.

        Gets or sets device Profile Scope.  # noqa: E501

        :param profile_scope: The profile_scope of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._profile_scope = profile_scope

    @property
    def assignment_type(self):
        """Gets the assignment_type of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets assignment Type.  # noqa: E501

        :return: The assignment_type of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this GeneralPayloadEntity.

        Gets or sets assignment Type.  # noqa: E501

        :param assignment_type: The assignment_type of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._assignment_type = assignment_type

    @property
    def minimum_operating_system(self):
        """Gets the minimum_operating_system of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets minimum Operating System profile applies to.  # noqa: E501

        :return: The minimum_operating_system of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._minimum_operating_system

    @minimum_operating_system.setter
    def minimum_operating_system(self, minimum_operating_system):
        """Sets the minimum_operating_system of this GeneralPayloadEntity.

        Gets or sets minimum Operating System profile applies to.  # noqa: E501

        :param minimum_operating_system: The minimum_operating_system of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._minimum_operating_system = minimum_operating_system

    @property
    def device_model(self):
        """Gets the device_model of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets Device Model.  # noqa: E501

        :return: The device_model of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this GeneralPayloadEntity.

        Gets or sets Device Model.  # noqa: E501

        :param device_model: The device_model of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._device_model = device_model

    @property
    def ownership_type(self):
        """Gets the ownership_type of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets ownershipType.  # noqa: E501

        :return: The ownership_type of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._ownership_type

    @ownership_type.setter
    def ownership_type(self, ownership_type):
        """Sets the ownership_type of this GeneralPayloadEntity.

        Gets or sets ownershipType.  # noqa: E501

        :param ownership_type: The ownership_type of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._ownership_type = ownership_type

    @property
    def is_active(self):
        """Gets the is_active of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether is Active.  # noqa: E501

        :return: The is_active of this GeneralPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this GeneralPayloadEntity.

        Gets or sets a value indicating whether is Active.  # noqa: E501

        :param is_active: The is_active of this GeneralPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def enable_provisioning(self):
        """Gets the enable_provisioning of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether flag to indicate Profile will be used for Product Provisioning. Valid values: true, false.  # noqa: E501

        :return: The enable_provisioning of this GeneralPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_provisioning

    @enable_provisioning.setter
    def enable_provisioning(self, enable_provisioning):
        """Sets the enable_provisioning of this GeneralPayloadEntity.

        Gets or sets a value indicating whether flag to indicate Profile will be used for Product Provisioning. Valid values: true, false.  # noqa: E501

        :param enable_provisioning: The enable_provisioning of this GeneralPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._enable_provisioning = enable_provisioning

    @property
    def password(self):
        """Gets the password of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets unlock Password.  # noqa: E501

        :return: The password of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this GeneralPayloadEntity.

        Gets or sets unlock Password.  # noqa: E501

        :param password: The password of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def allow_removal(self):
        """Gets the allow_removal of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets AllowRemoval.  # noqa: E501

        :return: The allow_removal of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._allow_removal

    @allow_removal.setter
    def allow_removal(self, allow_removal):
        """Sets the allow_removal of this GeneralPayloadEntity.

        Gets or sets AllowRemoval.  # noqa: E501

        :param allow_removal: The allow_removal of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._allow_removal = allow_removal

    @property
    def managed_location_group_id(self):
        """Gets the managed_location_group_id of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets the ID of the RootLocationGroup.  # noqa: E501

        :return: The managed_location_group_id of this GeneralPayloadEntity.  # noqa: E501
        :rtype: int
        """
        return self._managed_location_group_id

    @managed_location_group_id.setter
    def managed_location_group_id(self, managed_location_group_id):
        """Sets the managed_location_group_id of this GeneralPayloadEntity.

        Gets or sets the ID of the RootLocationGroup.  # noqa: E501

        :param managed_location_group_id: The managed_location_group_id of this GeneralPayloadEntity.  # noqa: E501
        :type: int
        """

        self._managed_location_group_id = managed_location_group_id

    @property
    def assigned_location_group_id(self):
        """Gets the assigned_location_group_id of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets location Identifiers.  # noqa: E501

        :return: The assigned_location_group_id of this GeneralPayloadEntity.  # noqa: E501
        :rtype: list[int]
        """
        return self._assigned_location_group_id

    @assigned_location_group_id.setter
    def assigned_location_group_id(self, assigned_location_group_id):
        """Sets the assigned_location_group_id of this GeneralPayloadEntity.

        Gets or sets location Identifiers.  # noqa: E501

        :param assigned_location_group_id: The assigned_location_group_id of this GeneralPayloadEntity.  # noqa: E501
        :type: list[int]
        """

        self._assigned_location_group_id = assigned_location_group_id

    @property
    def user_groups(self):
        """Gets the user_groups of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets assigned User Groups.  # noqa: E501

        :return: The user_groups of this GeneralPayloadEntity.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this GeneralPayloadEntity.

        Gets or sets assigned User Groups.  # noqa: E501

        :param user_groups: The user_groups of this GeneralPayloadEntity.  # noqa: E501
        :type: list[int]
        """

        self._user_groups = user_groups

    @property
    def areas(self):
        """Gets the areas of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets assigned Areas.  # noqa: E501

        :return: The areas of this GeneralPayloadEntity.  # noqa: E501
        :rtype: list[int]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this GeneralPayloadEntity.

        Gets or sets assigned Areas.  # noqa: E501

        :param areas: The areas of this GeneralPayloadEntity.  # noqa: E501
        :type: list[int]
        """

        self._areas = areas

    @property
    def schedules(self):
        """Gets the schedules of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets assigned Schedules.  # noqa: E501

        :return: The schedules of this GeneralPayloadEntity.  # noqa: E501
        :rtype: list[int]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this GeneralPayloadEntity.

        Gets or sets assigned Schedules.  # noqa: E501

        :param schedules: The schedules of this GeneralPayloadEntity.  # noqa: E501
        :type: list[int]
        """

        self._schedules = schedules

    @property
    def expiration_date(self):
        """Gets the expiration_date of this GeneralPayloadEntity.  # noqa: E501

        Gets or sets expiration Date of the Profile [Applicable for Apple Profiles].  # noqa: E501

        :return: The expiration_date of this GeneralPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this GeneralPayloadEntity.

        Gets or sets expiration Date of the Profile [Applicable for Apple Profiles].  # noqa: E501

        :param expiration_date: The expiration_date of this GeneralPayloadEntity.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneralPayloadEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralPayloadEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeneralPayloadEntity):
            return True

        return self.to_dict() != other.to_dict()
