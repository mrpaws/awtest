# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXDiskEncryptionFileVault2PayloadEntity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'show_recovery_key': 'bool',
        'recovery_type': 'int',
        'file_vault_enterprise_certificate': 'str',
        'file_vault_user': 'int',
        'username': 'str',
        'prompt_to_enable_file_vault_at': 'int',
        'number_of_times_user_can_bypass': 'int'
    }

    attribute_map = {
        'enable': 'Enable',
        'show_recovery_key': 'ShowRecoveryKey',
        'recovery_type': 'RecoveryType',
        'file_vault_enterprise_certificate': 'FileVaultEnterpriseCertificate',
        'file_vault_user': 'FileVaultUser',
        'username': 'Username',
        'prompt_to_enable_file_vault_at': 'PromptToEnableFileVaultAt',
        'number_of_times_user_can_bypass': 'NumberOfTimesUserCanBypass'
    }

    def __init__(self, enable=None, show_recovery_key=None, recovery_type=None, file_vault_enterprise_certificate=None, file_vault_user=None, username=None, prompt_to_enable_file_vault_at=None, number_of_times_user_can_bypass=None, _configuration=None):  # noqa: E501
        """AppleOsXDiskEncryptionFileVault2PayloadEntity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enable = None
        self._show_recovery_key = None
        self._recovery_type = None
        self._file_vault_enterprise_certificate = None
        self._file_vault_user = None
        self._username = None
        self._prompt_to_enable_file_vault_at = None
        self._number_of_times_user_can_bypass = None
        self.discriminator = None

        if enable is not None:
            self.enable = enable
        if show_recovery_key is not None:
            self.show_recovery_key = show_recovery_key
        if recovery_type is not None:
            self.recovery_type = recovery_type
        if file_vault_enterprise_certificate is not None:
            self.file_vault_enterprise_certificate = file_vault_enterprise_certificate
        if file_vault_user is not None:
            self.file_vault_user = file_vault_user
        if username is not None:
            self.username = username
        if prompt_to_enable_file_vault_at is not None:
            self.prompt_to_enable_file_vault_at = prompt_to_enable_file_vault_at
        if number_of_times_user_can_bypass is not None:
            self.number_of_times_user_can_bypass = number_of_times_user_can_bypass

    @property
    def enable(self):
        """Gets the enable of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether indicates whether disk encryption should be enforced.  # noqa: E501

        :return: The enable of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.

        Gets or sets a value indicating whether indicates whether disk encryption should be enforced.  # noqa: E501

        :param enable: The enable of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def show_recovery_key(self):
        """Gets the show_recovery_key of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501

        Gets or sets indicates whether the personal recovery key should be shown.  # noqa: E501

        :return: The show_recovery_key of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._show_recovery_key

    @show_recovery_key.setter
    def show_recovery_key(self, show_recovery_key):
        """Sets the show_recovery_key of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.

        Gets or sets indicates whether the personal recovery key should be shown.  # noqa: E501

        :param show_recovery_key: The show_recovery_key of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._show_recovery_key = show_recovery_key

    @property
    def recovery_type(self):
        """Gets the recovery_type of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501

        Gets or sets indicates whether the recovery key type is personal (1), institutional (2) or personal and corporate (3).  # noqa: E501

        :return: The recovery_type of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :rtype: int
        """
        return self._recovery_type

    @recovery_type.setter
    def recovery_type(self, recovery_type):
        """Sets the recovery_type of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.

        Gets or sets indicates whether the recovery key type is personal (1), institutional (2) or personal and corporate (3).  # noqa: E501

        :param recovery_type: The recovery_type of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :type: int
        """

        self._recovery_type = recovery_type

    @property
    def file_vault_enterprise_certificate(self):
        """Gets the file_vault_enterprise_certificate of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501

        Gets or sets name of the certificate configured in the credential payload, ex. Certificate #1.  # noqa: E501

        :return: The file_vault_enterprise_certificate of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :rtype: str
        """
        return self._file_vault_enterprise_certificate

    @file_vault_enterprise_certificate.setter
    def file_vault_enterprise_certificate(self, file_vault_enterprise_certificate):
        """Sets the file_vault_enterprise_certificate of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.

        Gets or sets name of the certificate configured in the credential payload, ex. Certificate #1.  # noqa: E501

        :param file_vault_enterprise_certificate: The file_vault_enterprise_certificate of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :type: str
        """

        self._file_vault_enterprise_certificate = file_vault_enterprise_certificate

    @property
    def file_vault_user(self):
        """Gets the file_vault_user of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501

        Gets or sets user type that will be added to FileVault, Current or Next Login User (1), or Specific User(2).  # noqa: E501

        :return: The file_vault_user of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :rtype: int
        """
        return self._file_vault_user

    @file_vault_user.setter
    def file_vault_user(self, file_vault_user):
        """Sets the file_vault_user of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.

        Gets or sets user type that will be added to FileVault, Current or Next Login User (1), or Specific User(2).  # noqa: E501

        :param file_vault_user: The file_vault_user of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                file_vault_user not in allowed_values):
            raise ValueError(
                "Invalid value for `file_vault_user` ({0}), must be one of {1}"  # noqa: E501
                .format(file_vault_user, allowed_values)
            )

        self._file_vault_user = file_vault_user

    @property
    def username(self):
        """Gets the username of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501

        Gets or sets user name of the Open Directory user that will be added to FileVault.  # noqa: E501

        :return: The username of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.

        Gets or sets user name of the Open Directory user that will be added to FileVault.  # noqa: E501

        :param username: The username of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def prompt_to_enable_file_vault_at(self):
        """Gets the prompt_to_enable_file_vault_at of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501

        Gets or sets when to prompt to enable FileVault, Both Login and Logout (1), Logout Only (2)  or Login Only (3).  # noqa: E501

        :return: The prompt_to_enable_file_vault_at of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :rtype: int
        """
        return self._prompt_to_enable_file_vault_at

    @prompt_to_enable_file_vault_at.setter
    def prompt_to_enable_file_vault_at(self, prompt_to_enable_file_vault_at):
        """Sets the prompt_to_enable_file_vault_at of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.

        Gets or sets when to prompt to enable FileVault, Both Login and Logout (1), Logout Only (2)  or Login Only (3).  # noqa: E501

        :param prompt_to_enable_file_vault_at: The prompt_to_enable_file_vault_at of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                prompt_to_enable_file_vault_at not in allowed_values):
            raise ValueError(
                "Invalid value for `prompt_to_enable_file_vault_at` ({0}), must be one of {1}"  # noqa: E501
                .format(prompt_to_enable_file_vault_at, allowed_values)
            )

        self._prompt_to_enable_file_vault_at = prompt_to_enable_file_vault_at

    @property
    def number_of_times_user_can_bypass(self):
        """Gets the number_of_times_user_can_bypass of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501

        Gets or sets number of times user can bypass enabling FileVault, this will be used to set the value of DeferForceAtUserLoginMaxBypassAttempts and DeferDontAskAtUserLogout.  # noqa: E501

        :return: The number_of_times_user_can_bypass of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :rtype: int
        """
        return self._number_of_times_user_can_bypass

    @number_of_times_user_can_bypass.setter
    def number_of_times_user_can_bypass(self, number_of_times_user_can_bypass):
        """Sets the number_of_times_user_can_bypass of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.

        Gets or sets number of times user can bypass enabling FileVault, this will be used to set the value of DeferForceAtUserLoginMaxBypassAttempts and DeferDontAskAtUserLogout.  # noqa: E501

        :param number_of_times_user_can_bypass: The number_of_times_user_can_bypass of this AppleOsXDiskEncryptionFileVault2PayloadEntity_.  # noqa: E501
        :type: int
        """

        self._number_of_times_user_can_bypass = number_of_times_user_can_bypass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXDiskEncryptionFileVault2PayloadEntity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXDiskEncryptionFileVault2PayloadEntity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXDiskEncryptionFileVault2PayloadEntity_):
            return True

        return self.to_dict() != other.to_dict()
