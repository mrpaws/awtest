# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXPasscodePayloadEntity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'require_passcode_on_device': 'bool',
        'allow_simple_value': 'bool',
        'require_alphanumeric_value': 'bool',
        'minimum_passcode_length': 'int',
        'minimum_number_of_complex_characters': 'str',
        'maximum_passcode_age': 'str',
        'auto_lock': 'str',
        'grace_period': 'int',
        'max_failed_attempts': 'int',
        'pin_history': 'int',
        'minutes_until_failed_login_reset': 'int'
    }

    attribute_map = {
        'require_passcode_on_device': 'RequirePasscodeOnDevice',
        'allow_simple_value': 'AllowSimpleValue',
        'require_alphanumeric_value': 'RequireAlphanumericValue',
        'minimum_passcode_length': 'MinimumPasscodeLength',
        'minimum_number_of_complex_characters': 'MinimumNumberOfComplexCharacters',
        'maximum_passcode_age': 'MaximumPasscodeAge',
        'auto_lock': 'AutoLock',
        'grace_period': 'GracePeriod',
        'max_failed_attempts': 'MaxFailedAttempts',
        'pin_history': 'pinHistory',
        'minutes_until_failed_login_reset': 'minutesUntilFailedLoginReset'
    }

    def __init__(self, require_passcode_on_device=None, allow_simple_value=None, require_alphanumeric_value=None, minimum_passcode_length=None, minimum_number_of_complex_characters=None, maximum_passcode_age=None, auto_lock=None, grace_period=None, max_failed_attempts=None, pin_history=None, minutes_until_failed_login_reset=None, _configuration=None):  # noqa: E501
        """AppleOsXPasscodePayloadEntity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._require_passcode_on_device = None
        self._allow_simple_value = None
        self._require_alphanumeric_value = None
        self._minimum_passcode_length = None
        self._minimum_number_of_complex_characters = None
        self._maximum_passcode_age = None
        self._auto_lock = None
        self._grace_period = None
        self._max_failed_attempts = None
        self._pin_history = None
        self._minutes_until_failed_login_reset = None
        self.discriminator = None

        if require_passcode_on_device is not None:
            self.require_passcode_on_device = require_passcode_on_device
        if allow_simple_value is not None:
            self.allow_simple_value = allow_simple_value
        if require_alphanumeric_value is not None:
            self.require_alphanumeric_value = require_alphanumeric_value
        if minimum_passcode_length is not None:
            self.minimum_passcode_length = minimum_passcode_length
        if minimum_number_of_complex_characters is not None:
            self.minimum_number_of_complex_characters = minimum_number_of_complex_characters
        if maximum_passcode_age is not None:
            self.maximum_passcode_age = maximum_passcode_age
        if auto_lock is not None:
            self.auto_lock = auto_lock
        if grace_period is not None:
            self.grace_period = grace_period
        if max_failed_attempts is not None:
            self.max_failed_attempts = max_failed_attempts
        if pin_history is not None:
            self.pin_history = pin_history
        if minutes_until_failed_login_reset is not None:
            self.minutes_until_failed_login_reset = minutes_until_failed_login_reset

    @property
    def require_passcode_on_device(self):
        """Gets the require_passcode_on_device of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether determines whether the user is forced to set a PIN.  # noqa: E501

        :return: The require_passcode_on_device of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._require_passcode_on_device

    @require_passcode_on_device.setter
    def require_passcode_on_device(self, require_passcode_on_device):
        """Sets the require_passcode_on_device of this AppleOsXPasscodePayloadEntity_.

        Gets or sets a value indicating whether determines whether the user is forced to set a PIN.  # noqa: E501

        :param require_passcode_on_device: The require_passcode_on_device of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._require_passcode_on_device = require_passcode_on_device

    @property
    def allow_simple_value(self):
        """Gets the allow_simple_value of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether determines whether a simple passcode is allowed.  # noqa: E501

        :return: The allow_simple_value of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_simple_value

    @allow_simple_value.setter
    def allow_simple_value(self, allow_simple_value):
        """Sets the allow_simple_value of this AppleOsXPasscodePayloadEntity_.

        Gets or sets a value indicating whether determines whether a simple passcode is allowed.  # noqa: E501

        :param allow_simple_value: The allow_simple_value of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._allow_simple_value = allow_simple_value

    @property
    def require_alphanumeric_value(self):
        """Gets the require_alphanumeric_value of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether specifies whether the user must enter alphabetic characters (\"abcd\"), or if numbers are sufficient.  # noqa: E501

        :return: The require_alphanumeric_value of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._require_alphanumeric_value

    @require_alphanumeric_value.setter
    def require_alphanumeric_value(self, require_alphanumeric_value):
        """Sets the require_alphanumeric_value of this AppleOsXPasscodePayloadEntity_.

        Gets or sets a value indicating whether specifies whether the user must enter alphabetic characters (\"abcd\"), or if numbers are sufficient.  # noqa: E501

        :param require_alphanumeric_value: The require_alphanumeric_value of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._require_alphanumeric_value = require_alphanumeric_value

    @property
    def minimum_passcode_length(self):
        """Gets the minimum_passcode_length of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets specifies the minimum overall length of the passcode.  # noqa: E501

        :return: The minimum_passcode_length of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: int
        """
        return self._minimum_passcode_length

    @minimum_passcode_length.setter
    def minimum_passcode_length(self, minimum_passcode_length):
        """Sets the minimum_passcode_length of this AppleOsXPasscodePayloadEntity_.

        Gets or sets specifies the minimum overall length of the passcode.  # noqa: E501

        :param minimum_passcode_length: The minimum_passcode_length of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: int
        """

        self._minimum_passcode_length = minimum_passcode_length

    @property
    def minimum_number_of_complex_characters(self):
        """Gets the minimum_number_of_complex_characters of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets specifies the minimum number of complex characters that a passcode must contain.  # noqa: E501

        :return: The minimum_number_of_complex_characters of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: str
        """
        return self._minimum_number_of_complex_characters

    @minimum_number_of_complex_characters.setter
    def minimum_number_of_complex_characters(self, minimum_number_of_complex_characters):
        """Sets the minimum_number_of_complex_characters of this AppleOsXPasscodePayloadEntity_.

        Gets or sets specifies the minimum number of complex characters that a passcode must contain.  # noqa: E501

        :param minimum_number_of_complex_characters: The minimum_number_of_complex_characters of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: str
        """

        self._minimum_number_of_complex_characters = minimum_number_of_complex_characters

    @property
    def maximum_passcode_age(self):
        """Gets the maximum_passcode_age of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets specifies the number of days for which the passcode can remain unchanged.  # noqa: E501

        :return: The maximum_passcode_age of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: str
        """
        return self._maximum_passcode_age

    @maximum_passcode_age.setter
    def maximum_passcode_age(self, maximum_passcode_age):
        """Sets the maximum_passcode_age of this AppleOsXPasscodePayloadEntity_.

        Gets or sets specifies the number of days for which the passcode can remain unchanged.  # noqa: E501

        :param maximum_passcode_age: The maximum_passcode_age of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: str
        """

        self._maximum_passcode_age = maximum_passcode_age

    @property
    def auto_lock(self):
        """Gets the auto_lock of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets specifies the number of minutes for which the device can be idle (without being unlocked by the user) before it gets locked by the system.  # noqa: E501

        :return: The auto_lock of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: str
        """
        return self._auto_lock

    @auto_lock.setter
    def auto_lock(self, auto_lock):
        """Sets the auto_lock of this AppleOsXPasscodePayloadEntity_.

        Gets or sets specifies the number of minutes for which the device can be idle (without being unlocked by the user) before it gets locked by the system.  # noqa: E501

        :param auto_lock: The auto_lock of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: str
        """

        self._auto_lock = auto_lock

    @property
    def grace_period(self):
        """Gets the grace_period of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets maximum grace period for passcode on the device in minutes.  # noqa: E501

        :return: The grace_period of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this AppleOsXPasscodePayloadEntity_.

        Gets or sets maximum grace period for passcode on the device in minutes.  # noqa: E501

        :param grace_period: The grace_period of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: int
        """

        self._grace_period = grace_period

    @property
    def max_failed_attempts(self):
        """Gets the max_failed_attempts of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets specifies the number of allowed failed attempts to enter the passcode at the device's lock screen.  # noqa: E501

        :return: The max_failed_attempts of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: int
        """
        return self._max_failed_attempts

    @max_failed_attempts.setter
    def max_failed_attempts(self, max_failed_attempts):
        """Sets the max_failed_attempts of this AppleOsXPasscodePayloadEntity_.

        Gets or sets specifies the number of allowed failed attempts to enter the passcode at the device's lock screen.  # noqa: E501

        :param max_failed_attempts: The max_failed_attempts of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: int
        """

        self._max_failed_attempts = max_failed_attempts

    @property
    def pin_history(self):
        """Gets the pin_history of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets when the user changes the passcode, it has to be unique within the last N entries in the history. Minimum value is 1, maximum value is 50.  # noqa: E501

        :return: The pin_history of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: int
        """
        return self._pin_history

    @pin_history.setter
    def pin_history(self, pin_history):
        """Sets the pin_history of this AppleOsXPasscodePayloadEntity_.

        Gets or sets when the user changes the passcode, it has to be unique within the last N entries in the history. Minimum value is 1, maximum value is 50.  # noqa: E501

        :param pin_history: The pin_history of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: int
        """

        self._pin_history = pin_history

    @property
    def minutes_until_failed_login_reset(self):
        """Gets the minutes_until_failed_login_reset of this AppleOsXPasscodePayloadEntity_.  # noqa: E501

        Gets or sets specifies the number of minutes that must pass after a failed login attempt before the failed login attempt-counter is reset.  # noqa: E501

        :return: The minutes_until_failed_login_reset of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :rtype: int
        """
        return self._minutes_until_failed_login_reset

    @minutes_until_failed_login_reset.setter
    def minutes_until_failed_login_reset(self, minutes_until_failed_login_reset):
        """Sets the minutes_until_failed_login_reset of this AppleOsXPasscodePayloadEntity_.

        Gets or sets specifies the number of minutes that must pass after a failed login attempt before the failed login attempt-counter is reset.  # noqa: E501

        :param minutes_until_failed_login_reset: The minutes_until_failed_login_reset of this AppleOsXPasscodePayloadEntity_.  # noqa: E501
        :type: int
        """

        self._minutes_until_failed_login_reset = minutes_until_failed_login_reset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXPasscodePayloadEntity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXPasscodePayloadEntity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXPasscodePayloadEntity_):
            return True

        return self.to_dict() != other.to_dict()
