# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkEASWorkManageSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_type': 'int',
        'allow_contacts_calendar_sync': 'bool',
        'enable_vendor_keys': 'bool',
        'vendor_config_keys': 'list[str]',
        'vendor_config_values': 'list[str]'
    }

    attribute_map = {
        'server_type': 'ServerType',
        'allow_contacts_calendar_sync': 'AllowContactsCalendarSync',
        'enable_vendor_keys': 'EnableVendorKeys',
        'vendor_config_keys': 'VendorConfigKeys',
        'vendor_config_values': 'VendorConfigValues'
    }

    def __init__(self, server_type=None, allow_contacts_calendar_sync=None, enable_vendor_keys=None, vendor_config_keys=None, vendor_config_values=None, _configuration=None):  # noqa: E501
        """AndroidForWorkEASWorkManageSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._server_type = None
        self._allow_contacts_calendar_sync = None
        self._enable_vendor_keys = None
        self._vendor_config_keys = None
        self._vendor_config_values = None
        self.discriminator = None

        if server_type is not None:
            self.server_type = server_type
        if allow_contacts_calendar_sync is not None:
            self.allow_contacts_calendar_sync = allow_contacts_calendar_sync
        if enable_vendor_keys is not None:
            self.enable_vendor_keys = enable_vendor_keys
        if vendor_config_keys is not None:
            self.vendor_config_keys = vendor_config_keys
        if vendor_config_values is not None:
            self.vendor_config_values = vendor_config_values

    @property
    def server_type(self):
        """Gets the server_type of this AndroidForWorkEASWorkManageSettings.  # noqa: E501

        Gets or sets the type of the server.  # noqa: E501

        :return: The server_type of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :rtype: int
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this AndroidForWorkEASWorkManageSettings.

        Gets or sets the type of the server.  # noqa: E501

        :param server_type: The server_type of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :type: int
        """

        self._server_type = server_type

    @property
    def allow_contacts_calendar_sync(self):
        """Gets the allow_contacts_calendar_sync of this AndroidForWorkEASWorkManageSettings.  # noqa: E501

        Gets or sets a value indicating whether [allow contacts calendar synchronize].  # noqa: E501

        :return: The allow_contacts_calendar_sync of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_contacts_calendar_sync

    @allow_contacts_calendar_sync.setter
    def allow_contacts_calendar_sync(self, allow_contacts_calendar_sync):
        """Sets the allow_contacts_calendar_sync of this AndroidForWorkEASWorkManageSettings.

        Gets or sets a value indicating whether [allow contacts calendar synchronize].  # noqa: E501

        :param allow_contacts_calendar_sync: The allow_contacts_calendar_sync of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :type: bool
        """

        self._allow_contacts_calendar_sync = allow_contacts_calendar_sync

    @property
    def enable_vendor_keys(self):
        """Gets the enable_vendor_keys of this AndroidForWorkEASWorkManageSettings.  # noqa: E501

        Gets or sets a value indicating whether [enable vendor keys].  # noqa: E501

        :return: The enable_vendor_keys of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_vendor_keys

    @enable_vendor_keys.setter
    def enable_vendor_keys(self, enable_vendor_keys):
        """Sets the enable_vendor_keys of this AndroidForWorkEASWorkManageSettings.

        Gets or sets a value indicating whether [enable vendor keys].  # noqa: E501

        :param enable_vendor_keys: The enable_vendor_keys of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :type: bool
        """

        self._enable_vendor_keys = enable_vendor_keys

    @property
    def vendor_config_keys(self):
        """Gets the vendor_config_keys of this AndroidForWorkEASWorkManageSettings.  # noqa: E501

        Gets or sets the vendor configuration key.  # noqa: E501

        :return: The vendor_config_keys of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendor_config_keys

    @vendor_config_keys.setter
    def vendor_config_keys(self, vendor_config_keys):
        """Sets the vendor_config_keys of this AndroidForWorkEASWorkManageSettings.

        Gets or sets the vendor configuration key.  # noqa: E501

        :param vendor_config_keys: The vendor_config_keys of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :type: list[str]
        """

        self._vendor_config_keys = vendor_config_keys

    @property
    def vendor_config_values(self):
        """Gets the vendor_config_values of this AndroidForWorkEASWorkManageSettings.  # noqa: E501

        Gets or sets the vendor configuration value.  # noqa: E501

        :return: The vendor_config_values of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendor_config_values

    @vendor_config_values.setter
    def vendor_config_values(self, vendor_config_values):
        """Sets the vendor_config_values of this AndroidForWorkEASWorkManageSettings.

        Gets or sets the vendor configuration value.  # noqa: E501

        :param vendor_config_values: The vendor_config_values of this AndroidForWorkEASWorkManageSettings.  # noqa: E501
        :type: list[str]
        """

        self._vendor_config_values = vendor_config_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkEASWorkManageSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkEASWorkManageSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkEASWorkManageSettings):
            return True

        return self.to_dict() != other.to_dict()
