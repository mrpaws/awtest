# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceModelDetailsV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_manufacturer_name': 'str',
        'model': 'str',
        'model_number': 'str',
        'reported_name': 'str'
    }

    attribute_map = {
        'device_manufacturer_name': 'device_manufacturer_name',
        'model': 'model',
        'model_number': 'model_number',
        'reported_name': 'reported_name'
    }

    def __init__(self, device_manufacturer_name=None, model=None, model_number=None, reported_name=None, _configuration=None):  # noqa: E501
        """DeviceModelDetailsV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_manufacturer_name = None
        self._model = None
        self._model_number = None
        self._reported_name = None
        self.discriminator = None

        if device_manufacturer_name is not None:
            self.device_manufacturer_name = device_manufacturer_name
        if model is not None:
            self.model = model
        if model_number is not None:
            self.model_number = model_number
        if reported_name is not None:
            self.reported_name = reported_name

    @property
    def device_manufacturer_name(self):
        """Gets the device_manufacturer_name of this DeviceModelDetailsV1Model.  # noqa: E501

        Name of the device manufacturer.  # noqa: E501

        :return: The device_manufacturer_name of this DeviceModelDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_manufacturer_name

    @device_manufacturer_name.setter
    def device_manufacturer_name(self, device_manufacturer_name):
        """Sets the device_manufacturer_name of this DeviceModelDetailsV1Model.

        Name of the device manufacturer.  # noqa: E501

        :param device_manufacturer_name: The device_manufacturer_name of this DeviceModelDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._device_manufacturer_name = device_manufacturer_name

    @property
    def model(self):
        """Gets the model of this DeviceModelDetailsV1Model.  # noqa: E501

        Device model.  # noqa: E501

        :return: The model of this DeviceModelDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceModelDetailsV1Model.

        Device model.  # noqa: E501

        :param model: The model of this DeviceModelDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def model_number(self):
        """Gets the model_number of this DeviceModelDetailsV1Model.  # noqa: E501

        Device model number.  # noqa: E501

        :return: The model_number of this DeviceModelDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._model_number

    @model_number.setter
    def model_number(self, model_number):
        """Sets the model_number of this DeviceModelDetailsV1Model.

        Device model number.  # noqa: E501

        :param model_number: The model_number of this DeviceModelDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._model_number = model_number

    @property
    def reported_name(self):
        """Gets the reported_name of this DeviceModelDetailsV1Model.  # noqa: E501

        Device reported name for model and make of a device  # noqa: E501

        :return: The reported_name of this DeviceModelDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._reported_name

    @reported_name.setter
    def reported_name(self, reported_name):
        """Sets the reported_name of this DeviceModelDetailsV1Model.

        Device reported name for model and make of a device  # noqa: E501

        :param reported_name: The reported_name of this DeviceModelDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._reported_name = reported_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceModelDetailsV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceModelDetailsV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceModelDetailsV1Model):
            return True

        return self.to_dict() != other.to_dict()
