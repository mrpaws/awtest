# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidContainerEmailPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_account_name': 'str',
        'email_address': 'str',
        'email_sender_name': 'str',
        'allow_silent_notification': 'bool',
        'email_signature': 'str',
        'default_account': 'bool',
        'allow_email_forwarding': 'bool',
        'allow_html_email': 'bool',
        'smime_cert': 'str',
        'allow_smime_cert_select': 'bool',
        'require_encrypted_smime': 'bool',
        'require_signed_smime': 'bool',
        'incoming_mail_server_use_ssl': 'bool',
        'incoming_mail_server_protocol': 'str',
        'incoming_mail_server_host_name': 'str',
        'incoming_mail_server_port_number': 'int',
        'incoming_mail_server_username': 'str',
        'incoming_mail_server_password': 'str',
        'incoming_mail_server_accept_certs': 'bool',
        'outgoing_mail_server_use_ssl': 'bool',
        'outgoing_mail_server_protocol': 'str',
        'outgoing_mail_server_hostname': 'str',
        'outgoing_mail_server_port_number': 'int',
        'outgoing_mail_server_username': 'str',
        'outgoing_mail_server_password': 'str',
        'outgoing_mail_server_accept_certs': 'bool',
        'smime_cert_payload_uuid': 'str'
    }

    attribute_map = {
        'email_account_name': 'EmailAccountName',
        'email_address': 'EmailAddress',
        'email_sender_name': 'EmailSenderName',
        'allow_silent_notification': 'AllowSilentNotification',
        'email_signature': 'EmailSignature',
        'default_account': 'DefaultAccount',
        'allow_email_forwarding': 'AllowEmailForwarding',
        'allow_html_email': 'AllowHtmlEmail',
        'smime_cert': 'SMIMECert',
        'allow_smime_cert_select': 'AllowSMIMECertSelect',
        'require_encrypted_smime': 'RequireEncryptedSMIME',
        'require_signed_smime': 'RequireSignedSMIME',
        'incoming_mail_server_use_ssl': 'IncomingMailServerUseSSL',
        'incoming_mail_server_protocol': 'IncomingMailServerProtocol',
        'incoming_mail_server_host_name': 'IncomingMailServerHostName',
        'incoming_mail_server_port_number': 'IncomingMailServerPortNumber',
        'incoming_mail_server_username': 'IncomingMailServerUsername',
        'incoming_mail_server_password': 'IncomingMailServerPassword',
        'incoming_mail_server_accept_certs': 'IncomingMailServerAcceptCerts',
        'outgoing_mail_server_use_ssl': 'OutgoingMailServerUseSSL',
        'outgoing_mail_server_protocol': 'OutgoingMailServerProtocol',
        'outgoing_mail_server_hostname': 'OutgoingMailServerHostname',
        'outgoing_mail_server_port_number': 'OutgoingMailServerPortNumber',
        'outgoing_mail_server_username': 'OutgoingMailServerUsername',
        'outgoing_mail_server_password': 'OutgoingMailServerPassword',
        'outgoing_mail_server_accept_certs': 'OutgoingMailServerAcceptCerts',
        'smime_cert_payload_uuid': 'SMIMECertPayloadUUID'
    }

    def __init__(self, email_account_name=None, email_address=None, email_sender_name=None, allow_silent_notification=None, email_signature=None, default_account=None, allow_email_forwarding=None, allow_html_email=None, smime_cert=None, allow_smime_cert_select=None, require_encrypted_smime=None, require_signed_smime=None, incoming_mail_server_use_ssl=None, incoming_mail_server_protocol=None, incoming_mail_server_host_name=None, incoming_mail_server_port_number=None, incoming_mail_server_username=None, incoming_mail_server_password=None, incoming_mail_server_accept_certs=None, outgoing_mail_server_use_ssl=None, outgoing_mail_server_protocol=None, outgoing_mail_server_hostname=None, outgoing_mail_server_port_number=None, outgoing_mail_server_username=None, outgoing_mail_server_password=None, outgoing_mail_server_accept_certs=None, smime_cert_payload_uuid=None, _configuration=None):  # noqa: E501
        """AndroidContainerEmailPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email_account_name = None
        self._email_address = None
        self._email_sender_name = None
        self._allow_silent_notification = None
        self._email_signature = None
        self._default_account = None
        self._allow_email_forwarding = None
        self._allow_html_email = None
        self._smime_cert = None
        self._allow_smime_cert_select = None
        self._require_encrypted_smime = None
        self._require_signed_smime = None
        self._incoming_mail_server_use_ssl = None
        self._incoming_mail_server_protocol = None
        self._incoming_mail_server_host_name = None
        self._incoming_mail_server_port_number = None
        self._incoming_mail_server_username = None
        self._incoming_mail_server_password = None
        self._incoming_mail_server_accept_certs = None
        self._outgoing_mail_server_use_ssl = None
        self._outgoing_mail_server_protocol = None
        self._outgoing_mail_server_hostname = None
        self._outgoing_mail_server_port_number = None
        self._outgoing_mail_server_username = None
        self._outgoing_mail_server_password = None
        self._outgoing_mail_server_accept_certs = None
        self._smime_cert_payload_uuid = None
        self.discriminator = None

        if email_account_name is not None:
            self.email_account_name = email_account_name
        if email_address is not None:
            self.email_address = email_address
        if email_sender_name is not None:
            self.email_sender_name = email_sender_name
        if allow_silent_notification is not None:
            self.allow_silent_notification = allow_silent_notification
        if email_signature is not None:
            self.email_signature = email_signature
        if default_account is not None:
            self.default_account = default_account
        if allow_email_forwarding is not None:
            self.allow_email_forwarding = allow_email_forwarding
        if allow_html_email is not None:
            self.allow_html_email = allow_html_email
        if smime_cert is not None:
            self.smime_cert = smime_cert
        if allow_smime_cert_select is not None:
            self.allow_smime_cert_select = allow_smime_cert_select
        if require_encrypted_smime is not None:
            self.require_encrypted_smime = require_encrypted_smime
        if require_signed_smime is not None:
            self.require_signed_smime = require_signed_smime
        if incoming_mail_server_use_ssl is not None:
            self.incoming_mail_server_use_ssl = incoming_mail_server_use_ssl
        if incoming_mail_server_protocol is not None:
            self.incoming_mail_server_protocol = incoming_mail_server_protocol
        if incoming_mail_server_host_name is not None:
            self.incoming_mail_server_host_name = incoming_mail_server_host_name
        if incoming_mail_server_port_number is not None:
            self.incoming_mail_server_port_number = incoming_mail_server_port_number
        if incoming_mail_server_username is not None:
            self.incoming_mail_server_username = incoming_mail_server_username
        if incoming_mail_server_password is not None:
            self.incoming_mail_server_password = incoming_mail_server_password
        if incoming_mail_server_accept_certs is not None:
            self.incoming_mail_server_accept_certs = incoming_mail_server_accept_certs
        if outgoing_mail_server_use_ssl is not None:
            self.outgoing_mail_server_use_ssl = outgoing_mail_server_use_ssl
        if outgoing_mail_server_protocol is not None:
            self.outgoing_mail_server_protocol = outgoing_mail_server_protocol
        if outgoing_mail_server_hostname is not None:
            self.outgoing_mail_server_hostname = outgoing_mail_server_hostname
        if outgoing_mail_server_port_number is not None:
            self.outgoing_mail_server_port_number = outgoing_mail_server_port_number
        if outgoing_mail_server_username is not None:
            self.outgoing_mail_server_username = outgoing_mail_server_username
        if outgoing_mail_server_password is not None:
            self.outgoing_mail_server_password = outgoing_mail_server_password
        if outgoing_mail_server_accept_certs is not None:
            self.outgoing_mail_server_accept_certs = outgoing_mail_server_accept_certs
        if smime_cert_payload_uuid is not None:
            self.smime_cert_payload_uuid = smime_cert_payload_uuid

    @property
    def email_account_name(self):
        """Gets the email_account_name of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets email account name.  # noqa: E501

        :return: The email_account_name of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._email_account_name

    @email_account_name.setter
    def email_account_name(self, email_account_name):
        """Sets the email_account_name of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets email account name.  # noqa: E501

        :param email_account_name: The email_account_name of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._email_account_name = email_account_name

    @property
    def email_address(self):
        """Gets the email_address of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets email address.  # noqa: E501

        :return: The email_address of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets email address.  # noqa: E501

        :param email_address: The email_address of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def email_sender_name(self):
        """Gets the email_sender_name of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets email sender name.  # noqa: E501

        :return: The email_sender_name of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._email_sender_name

    @email_sender_name.setter
    def email_sender_name(self, email_sender_name):
        """Sets the email_sender_name of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets email sender name.  # noqa: E501

        :param email_sender_name: The email_sender_name of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._email_sender_name = email_sender_name

    @property
    def allow_silent_notification(self):
        """Gets the allow_silent_notification of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets allow Silent Notification.  # noqa: E501

        :return: The allow_silent_notification of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_silent_notification

    @allow_silent_notification.setter
    def allow_silent_notification(self, allow_silent_notification):
        """Sets the allow_silent_notification of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets allow Silent Notification.  # noqa: E501

        :param allow_silent_notification: The allow_silent_notification of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_silent_notification = allow_silent_notification

    @property
    def email_signature(self):
        """Gets the email_signature of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets email Signature.  # noqa: E501

        :return: The email_signature of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._email_signature

    @email_signature.setter
    def email_signature(self, email_signature):
        """Sets the email_signature of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets email Signature.  # noqa: E501

        :param email_signature: The email_signature of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._email_signature = email_signature

    @property
    def default_account(self):
        """Gets the default_account of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets default Account.  # noqa: E501

        :return: The default_account of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._default_account

    @default_account.setter
    def default_account(self, default_account):
        """Sets the default_account of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets default Account.  # noqa: E501

        :param default_account: The default_account of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._default_account = default_account

    @property
    def allow_email_forwarding(self):
        """Gets the allow_email_forwarding of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether sets Allow Email Forwarding.  # noqa: E501

        :return: The allow_email_forwarding of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_email_forwarding

    @allow_email_forwarding.setter
    def allow_email_forwarding(self, allow_email_forwarding):
        """Sets the allow_email_forwarding of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets a value indicating whether sets Allow Email Forwarding.  # noqa: E501

        :param allow_email_forwarding: The allow_email_forwarding of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_email_forwarding = allow_email_forwarding

    @property
    def allow_html_email(self):
        """Gets the allow_html_email of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether sets Allow Html Email.  # noqa: E501

        :return: The allow_html_email of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_html_email

    @allow_html_email.setter
    def allow_html_email(self, allow_html_email):
        """Sets the allow_html_email of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets a value indicating whether sets Allow Html Email.  # noqa: E501

        :param allow_html_email: The allow_html_email of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_html_email = allow_html_email

    @property
    def smime_cert(self):
        """Gets the smime_cert of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets sMIME Cert.  # noqa: E501

        :return: The smime_cert of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._smime_cert

    @smime_cert.setter
    def smime_cert(self, smime_cert):
        """Sets the smime_cert of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets sMIME Cert.  # noqa: E501

        :param smime_cert: The smime_cert of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._smime_cert = smime_cert

    @property
    def allow_smime_cert_select(self):
        """Gets the allow_smime_cert_select of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether sets Allow SMIME Cert Select.  # noqa: E501

        :return: The allow_smime_cert_select of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_smime_cert_select

    @allow_smime_cert_select.setter
    def allow_smime_cert_select(self, allow_smime_cert_select):
        """Sets the allow_smime_cert_select of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets a value indicating whether sets Allow SMIME Cert Select.  # noqa: E501

        :param allow_smime_cert_select: The allow_smime_cert_select of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_smime_cert_select = allow_smime_cert_select

    @property
    def require_encrypted_smime(self):
        """Gets the require_encrypted_smime of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether sets Require Encrypted SMIME.  # noqa: E501

        :return: The require_encrypted_smime of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._require_encrypted_smime

    @require_encrypted_smime.setter
    def require_encrypted_smime(self, require_encrypted_smime):
        """Sets the require_encrypted_smime of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets a value indicating whether sets Require Encrypted SMIME.  # noqa: E501

        :param require_encrypted_smime: The require_encrypted_smime of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._require_encrypted_smime = require_encrypted_smime

    @property
    def require_signed_smime(self):
        """Gets the require_signed_smime of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether sets Require Signed SMIME.  # noqa: E501

        :return: The require_signed_smime of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._require_signed_smime

    @require_signed_smime.setter
    def require_signed_smime(self, require_signed_smime):
        """Sets the require_signed_smime of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets a value indicating whether sets Require Signed SMIME.  # noqa: E501

        :param require_signed_smime: The require_signed_smime of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._require_signed_smime = require_signed_smime

    @property
    def incoming_mail_server_use_ssl(self):
        """Gets the incoming_mail_server_use_ssl of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether sets Incoming MailServer Use SSL.  # noqa: E501

        :return: The incoming_mail_server_use_ssl of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._incoming_mail_server_use_ssl

    @incoming_mail_server_use_ssl.setter
    def incoming_mail_server_use_ssl(self, incoming_mail_server_use_ssl):
        """Sets the incoming_mail_server_use_ssl of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets a value indicating whether sets Incoming MailServer Use SSL.  # noqa: E501

        :param incoming_mail_server_use_ssl: The incoming_mail_server_use_ssl of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._incoming_mail_server_use_ssl = incoming_mail_server_use_ssl

    @property
    def incoming_mail_server_protocol(self):
        """Gets the incoming_mail_server_protocol of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets incoming Mail Server Protocol.  # noqa: E501

        :return: The incoming_mail_server_protocol of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_protocol

    @incoming_mail_server_protocol.setter
    def incoming_mail_server_protocol(self, incoming_mail_server_protocol):
        """Sets the incoming_mail_server_protocol of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets incoming Mail Server Protocol.  # noqa: E501

        :param incoming_mail_server_protocol: The incoming_mail_server_protocol of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_protocol = incoming_mail_server_protocol

    @property
    def incoming_mail_server_host_name(self):
        """Gets the incoming_mail_server_host_name of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets incoming MailServer HostName.  # noqa: E501

        :return: The incoming_mail_server_host_name of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_host_name

    @incoming_mail_server_host_name.setter
    def incoming_mail_server_host_name(self, incoming_mail_server_host_name):
        """Sets the incoming_mail_server_host_name of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets incoming MailServer HostName.  # noqa: E501

        :param incoming_mail_server_host_name: The incoming_mail_server_host_name of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_host_name = incoming_mail_server_host_name

    @property
    def incoming_mail_server_port_number(self):
        """Gets the incoming_mail_server_port_number of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets incoming MailServer Port Number.  # noqa: E501

        :return: The incoming_mail_server_port_number of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._incoming_mail_server_port_number

    @incoming_mail_server_port_number.setter
    def incoming_mail_server_port_number(self, incoming_mail_server_port_number):
        """Sets the incoming_mail_server_port_number of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets incoming MailServer Port Number.  # noqa: E501

        :param incoming_mail_server_port_number: The incoming_mail_server_port_number of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._incoming_mail_server_port_number = incoming_mail_server_port_number

    @property
    def incoming_mail_server_username(self):
        """Gets the incoming_mail_server_username of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets incoming MailServer Username.  # noqa: E501

        :return: The incoming_mail_server_username of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_username

    @incoming_mail_server_username.setter
    def incoming_mail_server_username(self, incoming_mail_server_username):
        """Sets the incoming_mail_server_username of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets incoming MailServer Username.  # noqa: E501

        :param incoming_mail_server_username: The incoming_mail_server_username of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_username = incoming_mail_server_username

    @property
    def incoming_mail_server_password(self):
        """Gets the incoming_mail_server_password of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets incoming MailServer Password.  # noqa: E501

        :return: The incoming_mail_server_password of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_password

    @incoming_mail_server_password.setter
    def incoming_mail_server_password(self, incoming_mail_server_password):
        """Sets the incoming_mail_server_password of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets incoming MailServer Password.  # noqa: E501

        :param incoming_mail_server_password: The incoming_mail_server_password of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_password = incoming_mail_server_password

    @property
    def incoming_mail_server_accept_certs(self):
        """Gets the incoming_mail_server_accept_certs of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether sets Incoming MailServer Accept Certs.  # noqa: E501

        :return: The incoming_mail_server_accept_certs of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._incoming_mail_server_accept_certs

    @incoming_mail_server_accept_certs.setter
    def incoming_mail_server_accept_certs(self, incoming_mail_server_accept_certs):
        """Sets the incoming_mail_server_accept_certs of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets a value indicating whether sets Incoming MailServer Accept Certs.  # noqa: E501

        :param incoming_mail_server_accept_certs: The incoming_mail_server_accept_certs of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._incoming_mail_server_accept_certs = incoming_mail_server_accept_certs

    @property
    def outgoing_mail_server_use_ssl(self):
        """Gets the outgoing_mail_server_use_ssl of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether sets Outgoing MailServer Use SSL.  # noqa: E501

        :return: The outgoing_mail_server_use_ssl of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._outgoing_mail_server_use_ssl

    @outgoing_mail_server_use_ssl.setter
    def outgoing_mail_server_use_ssl(self, outgoing_mail_server_use_ssl):
        """Sets the outgoing_mail_server_use_ssl of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets a value indicating whether sets Outgoing MailServer Use SSL.  # noqa: E501

        :param outgoing_mail_server_use_ssl: The outgoing_mail_server_use_ssl of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._outgoing_mail_server_use_ssl = outgoing_mail_server_use_ssl

    @property
    def outgoing_mail_server_protocol(self):
        """Gets the outgoing_mail_server_protocol of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets outgoing Mail Server Protocol.  # noqa: E501

        :return: The outgoing_mail_server_protocol of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_protocol

    @outgoing_mail_server_protocol.setter
    def outgoing_mail_server_protocol(self, outgoing_mail_server_protocol):
        """Sets the outgoing_mail_server_protocol of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets outgoing Mail Server Protocol.  # noqa: E501

        :param outgoing_mail_server_protocol: The outgoing_mail_server_protocol of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_protocol = outgoing_mail_server_protocol

    @property
    def outgoing_mail_server_hostname(self):
        """Gets the outgoing_mail_server_hostname of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets outgoing MailServer HostName.  # noqa: E501

        :return: The outgoing_mail_server_hostname of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_hostname

    @outgoing_mail_server_hostname.setter
    def outgoing_mail_server_hostname(self, outgoing_mail_server_hostname):
        """Sets the outgoing_mail_server_hostname of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets outgoing MailServer HostName.  # noqa: E501

        :param outgoing_mail_server_hostname: The outgoing_mail_server_hostname of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_hostname = outgoing_mail_server_hostname

    @property
    def outgoing_mail_server_port_number(self):
        """Gets the outgoing_mail_server_port_number of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets outgoing MailServer Port Number.  # noqa: E501

        :return: The outgoing_mail_server_port_number of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._outgoing_mail_server_port_number

    @outgoing_mail_server_port_number.setter
    def outgoing_mail_server_port_number(self, outgoing_mail_server_port_number):
        """Sets the outgoing_mail_server_port_number of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets outgoing MailServer Port Number.  # noqa: E501

        :param outgoing_mail_server_port_number: The outgoing_mail_server_port_number of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._outgoing_mail_server_port_number = outgoing_mail_server_port_number

    @property
    def outgoing_mail_server_username(self):
        """Gets the outgoing_mail_server_username of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets outgoing MailServer Username.  # noqa: E501

        :return: The outgoing_mail_server_username of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_username

    @outgoing_mail_server_username.setter
    def outgoing_mail_server_username(self, outgoing_mail_server_username):
        """Sets the outgoing_mail_server_username of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets outgoing MailServer Username.  # noqa: E501

        :param outgoing_mail_server_username: The outgoing_mail_server_username of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_username = outgoing_mail_server_username

    @property
    def outgoing_mail_server_password(self):
        """Gets the outgoing_mail_server_password of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets outgoing MailServer Password.  # noqa: E501

        :return: The outgoing_mail_server_password of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_password

    @outgoing_mail_server_password.setter
    def outgoing_mail_server_password(self, outgoing_mail_server_password):
        """Sets the outgoing_mail_server_password of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets outgoing MailServer Password.  # noqa: E501

        :param outgoing_mail_server_password: The outgoing_mail_server_password of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_password = outgoing_mail_server_password

    @property
    def outgoing_mail_server_accept_certs(self):
        """Gets the outgoing_mail_server_accept_certs of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether sets Outgoing MailServer Accept Certs.  # noqa: E501

        :return: The outgoing_mail_server_accept_certs of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._outgoing_mail_server_accept_certs

    @outgoing_mail_server_accept_certs.setter
    def outgoing_mail_server_accept_certs(self, outgoing_mail_server_accept_certs):
        """Sets the outgoing_mail_server_accept_certs of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets a value indicating whether sets Outgoing MailServer Accept Certs.  # noqa: E501

        :param outgoing_mail_server_accept_certs: The outgoing_mail_server_accept_certs of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._outgoing_mail_server_accept_certs = outgoing_mail_server_accept_certs

    @property
    def smime_cert_payload_uuid(self):
        """Gets the smime_cert_payload_uuid of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501

        Gets or sets sMIME Cert Payload UUID.  # noqa: E501

        :return: The smime_cert_payload_uuid of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._smime_cert_payload_uuid

    @smime_cert_payload_uuid.setter
    def smime_cert_payload_uuid(self, smime_cert_payload_uuid):
        """Sets the smime_cert_payload_uuid of this AndroidContainerEmailPayloadV2Entity.

        Gets or sets sMIME Cert Payload UUID.  # noqa: E501

        :param smime_cert_payload_uuid: The smime_cert_payload_uuid of this AndroidContainerEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._smime_cert_payload_uuid = smime_cert_payload_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidContainerEmailPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidContainerEmailPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidContainerEmailPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
