# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class PurchasedAppDeploymentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_type': 'str',
        'remove_on_unenroll': 'bool',
        'prevent_application_backup': 'bool',
        'allow_management': 'bool',
        'use_vpn': 'bool',
        'vpn_profile_id': 'int',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'assignment_type': 'AssignmentType',
        'remove_on_unenroll': 'RemoveOnUnenroll',
        'prevent_application_backup': 'PreventApplicationBackup',
        'allow_management': 'AllowManagement',
        'use_vpn': 'UseVPN',
        'vpn_profile_id': 'VPNProfileId',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, assignment_type=None, remove_on_unenroll=None, prevent_application_backup=None, allow_management=None, use_vpn=None, vpn_profile_id=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """PurchasedAppDeploymentModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assignment_type = None
        self._remove_on_unenroll = None
        self._prevent_application_backup = None
        self._allow_management = None
        self._use_vpn = None
        self._vpn_profile_id = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if assignment_type is not None:
            self.assignment_type = assignment_type
        if remove_on_unenroll is not None:
            self.remove_on_unenroll = remove_on_unenroll
        if prevent_application_backup is not None:
            self.prevent_application_backup = prevent_application_backup
        if allow_management is not None:
            self.allow_management = allow_management
        if use_vpn is not None:
            self.use_vpn = use_vpn
        if vpn_profile_id is not None:
            self.vpn_profile_id = vpn_profile_id
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def assignment_type(self):
        """Gets the assignment_type of this PurchasedAppDeploymentModel.  # noqa: E501

        Gets or sets assignment Type, Auto or OnDemand.  # noqa: E501

        :return: The assignment_type of this PurchasedAppDeploymentModel.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this PurchasedAppDeploymentModel.

        Gets or sets assignment Type, Auto or OnDemand.  # noqa: E501

        :param assignment_type: The assignment_type of this PurchasedAppDeploymentModel.  # noqa: E501
        :type: str
        """

        self._assignment_type = assignment_type

    @property
    def remove_on_unenroll(self):
        """Gets the remove_on_unenroll of this PurchasedAppDeploymentModel.  # noqa: E501

        Gets or sets a value indicating whether whether remove the app once device is un-enrolled.  # noqa: E501

        :return: The remove_on_unenroll of this PurchasedAppDeploymentModel.  # noqa: E501
        :rtype: bool
        """
        return self._remove_on_unenroll

    @remove_on_unenroll.setter
    def remove_on_unenroll(self, remove_on_unenroll):
        """Sets the remove_on_unenroll of this PurchasedAppDeploymentModel.

        Gets or sets a value indicating whether whether remove the app once device is un-enrolled.  # noqa: E501

        :param remove_on_unenroll: The remove_on_unenroll of this PurchasedAppDeploymentModel.  # noqa: E501
        :type: bool
        """

        self._remove_on_unenroll = remove_on_unenroll

    @property
    def prevent_application_backup(self):
        """Gets the prevent_application_backup of this PurchasedAppDeploymentModel.  # noqa: E501

        Gets or sets a value indicating whether whether prevent the application back up.  # noqa: E501

        :return: The prevent_application_backup of this PurchasedAppDeploymentModel.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_application_backup

    @prevent_application_backup.setter
    def prevent_application_backup(self, prevent_application_backup):
        """Sets the prevent_application_backup of this PurchasedAppDeploymentModel.

        Gets or sets a value indicating whether whether prevent the application back up.  # noqa: E501

        :param prevent_application_backup: The prevent_application_backup of this PurchasedAppDeploymentModel.  # noqa: E501
        :type: bool
        """

        self._prevent_application_backup = prevent_application_backup

    @property
    def allow_management(self):
        """Gets the allow_management of this PurchasedAppDeploymentModel.  # noqa: E501

        Gets or sets a value indicating whether true if admin chooses to assume management of user installed apps.  # noqa: E501

        :return: The allow_management of this PurchasedAppDeploymentModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_management

    @allow_management.setter
    def allow_management(self, allow_management):
        """Sets the allow_management of this PurchasedAppDeploymentModel.

        Gets or sets a value indicating whether true if admin chooses to assume management of user installed apps.  # noqa: E501

        :param allow_management: The allow_management of this PurchasedAppDeploymentModel.  # noqa: E501
        :type: bool
        """

        self._allow_management = allow_management

    @property
    def use_vpn(self):
        """Gets the use_vpn of this PurchasedAppDeploymentModel.  # noqa: E501

        Gets or sets a value indicating whether whether use VPN for the application. If true, needs to provide the VPNProfileId.  # noqa: E501

        :return: The use_vpn of this PurchasedAppDeploymentModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_vpn

    @use_vpn.setter
    def use_vpn(self, use_vpn):
        """Sets the use_vpn of this PurchasedAppDeploymentModel.

        Gets or sets a value indicating whether whether use VPN for the application. If true, needs to provide the VPNProfileId.  # noqa: E501

        :param use_vpn: The use_vpn of this PurchasedAppDeploymentModel.  # noqa: E501
        :type: bool
        """

        self._use_vpn = use_vpn

    @property
    def vpn_profile_id(self):
        """Gets the vpn_profile_id of this PurchasedAppDeploymentModel.  # noqa: E501

        Gets or sets a value indicating the ID for the VPN profile associated with the application, required if UseVPN is true.  # noqa: E501

        :return: The vpn_profile_id of this PurchasedAppDeploymentModel.  # noqa: E501
        :rtype: int
        """
        return self._vpn_profile_id

    @vpn_profile_id.setter
    def vpn_profile_id(self, vpn_profile_id):
        """Sets the vpn_profile_id of this PurchasedAppDeploymentModel.

        Gets or sets a value indicating the ID for the VPN profile associated with the application, required if UseVPN is true.  # noqa: E501

        :param vpn_profile_id: The vpn_profile_id of this PurchasedAppDeploymentModel.  # noqa: E501
        :type: int
        """

        self._vpn_profile_id = vpn_profile_id

    @property
    def id(self):
        """Gets the id of this PurchasedAppDeploymentModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this PurchasedAppDeploymentModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PurchasedAppDeploymentModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this PurchasedAppDeploymentModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this PurchasedAppDeploymentModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this PurchasedAppDeploymentModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PurchasedAppDeploymentModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this PurchasedAppDeploymentModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchasedAppDeploymentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchasedAppDeploymentModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PurchasedAppDeploymentModel):
            return True

        return self.to_dict() != other.to_dict()
