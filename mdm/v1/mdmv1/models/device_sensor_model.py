# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceSensorModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'value': 'str',
        'last_executed_at': 'datetime'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'value': 'value',
        'last_executed_at': 'last_executed_at'
    }

    def __init__(self, uuid=None, name=None, value=None, last_executed_at=None, _configuration=None):  # noqa: E501
        """DeviceSensorModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uuid = None
        self._name = None
        self._value = None
        self._last_executed_at = None
        self.discriminator = None

        self.uuid = uuid
        self.name = name
        self.value = value
        self.last_executed_at = last_executed_at

    @property
    def uuid(self):
        """Gets the uuid of this DeviceSensorModel.  # noqa: E501

        The unique identifier of the sensor in UEM system.  # noqa: E501

        :return: The uuid of this DeviceSensorModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceSensorModel.

        The unique identifier of the sensor in UEM system.  # noqa: E501

        :param uuid: The uuid of this DeviceSensorModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this DeviceSensorModel.  # noqa: E501

        The sensor name.  # noqa: E501

        :return: The name of this DeviceSensorModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceSensorModel.

        The sensor name.  # noqa: E501

        :param name: The name of this DeviceSensorModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this DeviceSensorModel.  # noqa: E501

        The sensor value.  # noqa: E501

        :return: The value of this DeviceSensorModel.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DeviceSensorModel.

        The sensor value.  # noqa: E501

        :param value: The value of this DeviceSensorModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def last_executed_at(self):
        """Gets the last_executed_at of this DeviceSensorModel.  # noqa: E501

        A timestamp specifying when the sensor script was last executed.  # noqa: E501

        :return: The last_executed_at of this DeviceSensorModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_executed_at

    @last_executed_at.setter
    def last_executed_at(self, last_executed_at):
        """Sets the last_executed_at of this DeviceSensorModel.

        A timestamp specifying when the sensor script was last executed.  # noqa: E501

        :param last_executed_at: The last_executed_at of this DeviceSensorModel.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and last_executed_at is None:
            raise ValueError("Invalid value for `last_executed_at`, must not be `None`")  # noqa: E501

        self._last_executed_at = last_executed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceSensorModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSensorModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceSensorModel):
            return True

        return self.to_dict() != other.to_dict()
