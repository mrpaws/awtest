# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleGoogleAccountPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_description': 'str',
        'account_name': 'str',
        'default_calling_app': 'str',
        'email_address': 'str'
    }

    attribute_map = {
        'account_description': 'AccountDescription',
        'account_name': 'AccountName',
        'default_calling_app': 'DefaultCallingApp',
        'email_address': 'EmailAddress'
    }

    def __init__(self, account_description=None, account_name=None, default_calling_app=None, email_address=None, _configuration=None):  # noqa: E501
        """AppleGoogleAccountPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_description = None
        self._account_name = None
        self._default_calling_app = None
        self._email_address = None
        self.discriminator = None

        if account_description is not None:
            self.account_description = account_description
        if account_name is not None:
            self.account_name = account_name
        if default_calling_app is not None:
            self.default_calling_app = default_calling_app
        if email_address is not None:
            self.email_address = email_address

    @property
    def account_description(self):
        """Gets the account_description of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501

        Gets or sets a user-visible description of the email account, shown in the Mail and Settings applications.  # noqa: E501

        :return: The account_description of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._account_description

    @account_description.setter
    def account_description(self, account_description):
        """Sets the account_description of this AppleGoogleAccountPayloadV2Entity.

        Gets or sets a user-visible description of the email account, shown in the Mail and Settings applications.  # noqa: E501

        :param account_description: The account_description of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._account_description = account_description

    @property
    def account_name(self):
        """Gets the account_name of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501

        Gets or sets the user’s full name for the Google account. This name will appear in sent messages.  # noqa: E501

        :return: The account_name of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AppleGoogleAccountPayloadV2Entity.

        Gets or sets the user’s full name for the Google account. This name will appear in sent messages.  # noqa: E501

        :param account_name: The account_name of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def default_calling_app(self):
        """Gets the default_calling_app of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501

        Gets or sets the bundle identifier for the default application that handles audio calls made to contacts from this account.  # noqa: E501

        :return: The default_calling_app of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._default_calling_app

    @default_calling_app.setter
    def default_calling_app(self, default_calling_app):
        """Sets the default_calling_app of this AppleGoogleAccountPayloadV2Entity.

        Gets or sets the bundle identifier for the default application that handles audio calls made to contacts from this account.  # noqa: E501

        :param default_calling_app: The default_calling_app of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._default_calling_app = default_calling_app

    @property
    def email_address(self):
        """Gets the email_address of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501

        Gets or sets the full Google email address for the account.  # noqa: E501

        :return: The email_address of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AppleGoogleAccountPayloadV2Entity.

        Gets or sets the full Google email address for the account.  # noqa: E501

        :param email_address: The email_address of this AppleGoogleAccountPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleGoogleAccountPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleGoogleAccountPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleGoogleAccountPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
