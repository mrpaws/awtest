# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidVpnPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_type': 'str',
        'connection_name': 'str',
        'server': 'str',
        'user_name': 'str',
        'shared_secret': 'str',
        'per_app_vpn': 'bool',
        'ikeid_type': 'int',
        'ikeid_value': 'str',
        'encryption': 'bool',
        'pre_shared_key': 'str',
        'payload_certificate_name': 'str',
        'realm': 'str',
        'role': 'str',
        'password': 'str',
        'use_web_logon_for_authentication': 'bool',
        'gateway_uid': 'str',
        'enable_vpnon_demand': 'bool',
        'vpn_enabled_wrapper': 'str',
        'websense_password': 'str',
        'websense_username': 'str',
        'websense_server': 'str'
    }

    attribute_map = {
        'connection_type': 'ConnectionType',
        'connection_name': 'ConnectionName',
        'server': 'Server',
        'user_name': 'UserName',
        'shared_secret': 'SharedSecret',
        'per_app_vpn': 'PerAppVpn',
        'ikeid_type': 'IKEIdType',
        'ikeid_value': 'IKEIdValue',
        'encryption': 'Encryption',
        'pre_shared_key': 'PreSharedKey',
        'payload_certificate_name': 'PayloadCertificateName',
        'realm': 'Realm',
        'role': 'Role',
        'password': 'Password',
        'use_web_logon_for_authentication': 'UseWebLogonForAuthentication',
        'gateway_uid': 'GatewayUID',
        'enable_vpnon_demand': 'EnableVPNOnDemand',
        'vpn_enabled_wrapper': 'VPNEnabledWrapper',
        'websense_password': 'WebsensePassword',
        'websense_username': 'WebsenseUsername',
        'websense_server': 'WebsenseServer'
    }

    def __init__(self, connection_type=None, connection_name=None, server=None, user_name=None, shared_secret=None, per_app_vpn=None, ikeid_type=None, ikeid_value=None, encryption=None, pre_shared_key=None, payload_certificate_name=None, realm=None, role=None, password=None, use_web_logon_for_authentication=None, gateway_uid=None, enable_vpnon_demand=None, vpn_enabled_wrapper=None, websense_password=None, websense_username=None, websense_server=None, _configuration=None):  # noqa: E501
        """AndroidVpnPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_type = None
        self._connection_name = None
        self._server = None
        self._user_name = None
        self._shared_secret = None
        self._per_app_vpn = None
        self._ikeid_type = None
        self._ikeid_value = None
        self._encryption = None
        self._pre_shared_key = None
        self._payload_certificate_name = None
        self._realm = None
        self._role = None
        self._password = None
        self._use_web_logon_for_authentication = None
        self._gateway_uid = None
        self._enable_vpnon_demand = None
        self._vpn_enabled_wrapper = None
        self._websense_password = None
        self._websense_username = None
        self._websense_server = None
        self.discriminator = None

        if connection_type is not None:
            self.connection_type = connection_type
        if connection_name is not None:
            self.connection_name = connection_name
        if server is not None:
            self.server = server
        if user_name is not None:
            self.user_name = user_name
        if shared_secret is not None:
            self.shared_secret = shared_secret
        if per_app_vpn is not None:
            self.per_app_vpn = per_app_vpn
        if ikeid_type is not None:
            self.ikeid_type = ikeid_type
        if ikeid_value is not None:
            self.ikeid_value = ikeid_value
        if encryption is not None:
            self.encryption = encryption
        if pre_shared_key is not None:
            self.pre_shared_key = pre_shared_key
        if payload_certificate_name is not None:
            self.payload_certificate_name = payload_certificate_name
        if realm is not None:
            self.realm = realm
        if role is not None:
            self.role = role
        if password is not None:
            self.password = password
        if use_web_logon_for_authentication is not None:
            self.use_web_logon_for_authentication = use_web_logon_for_authentication
        if gateway_uid is not None:
            self.gateway_uid = gateway_uid
        if enable_vpnon_demand is not None:
            self.enable_vpnon_demand = enable_vpnon_demand
        if vpn_enabled_wrapper is not None:
            self.vpn_enabled_wrapper = vpn_enabled_wrapper
        if websense_password is not None:
            self.websense_password = websense_password
        if websense_username is not None:
            self.websense_username = websense_username
        if websense_server is not None:
            self.websense_server = websense_server

    @property
    def connection_type(self):
        """Gets the connection_type of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the type of the VPN.  # noqa: E501

        :return: The connection_type of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this AndroidVpnPayloadV2Entity.

        Gets or sets the type of the VPN.  # noqa: E501

        :param connection_type: The connection_type of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def connection_name(self):
        """Gets the connection_name of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the connection.  # noqa: E501

        :return: The connection_name of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this AndroidVpnPayloadV2Entity.

        Gets or sets the name of the connection.  # noqa: E501

        :param connection_name: The connection_name of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._connection_name = connection_name

    @property
    def server(self):
        """Gets the server of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the server.  # noqa: E501

        :return: The server of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this AndroidVpnPayloadV2Entity.

        Gets or sets the name of the server.  # noqa: E501

        :param server: The server of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def user_name(self):
        """Gets the user_name of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the username.  # noqa: E501

        :return: The user_name of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AndroidVpnPayloadV2Entity.

        Gets or sets the username.  # noqa: E501

        :param user_name: The user_name of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def shared_secret(self):
        """Gets the shared_secret of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the L2TP shared secret.  # noqa: E501

        :return: The shared_secret of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this AndroidVpnPayloadV2Entity.

        Gets or sets the L2TP shared secret.  # noqa: E501

        :param shared_secret: The shared_secret of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._shared_secret = shared_secret

    @property
    def per_app_vpn(self):
        """Gets the per_app_vpn of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [per application VPN].  # noqa: E501

        :return: The per_app_vpn of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._per_app_vpn

    @per_app_vpn.setter
    def per_app_vpn(self, per_app_vpn):
        """Sets the per_app_vpn of this AndroidVpnPayloadV2Entity.

        Gets or sets a value indicating whether [per application VPN].  # noqa: E501

        :param per_app_vpn: The per_app_vpn of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._per_app_vpn = per_app_vpn

    @property
    def ikeid_type(self):
        """Gets the ikeid_type of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the type of the ike identifier.  # noqa: E501

        :return: The ikeid_type of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._ikeid_type

    @ikeid_type.setter
    def ikeid_type(self, ikeid_type):
        """Sets the ikeid_type of this AndroidVpnPayloadV2Entity.

        Gets or sets the type of the ike identifier.  # noqa: E501

        :param ikeid_type: The ikeid_type of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._ikeid_type = ikeid_type

    @property
    def ikeid_value(self):
        """Gets the ikeid_value of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the ike identifier value.  # noqa: E501

        :return: The ikeid_value of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._ikeid_value

    @ikeid_value.setter
    def ikeid_value(self, ikeid_value):
        """Sets the ikeid_value of this AndroidVpnPayloadV2Entity.

        Gets or sets the ike identifier value.  # noqa: E501

        :param ikeid_value: The ikeid_value of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._ikeid_value = ikeid_value

    @property
    def encryption(self):
        """Gets the encryption of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidVpnPayloadV2Entity} is encryption.  # noqa: E501

        :return: The encryption of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this AndroidVpnPayloadV2Entity.

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidVpnPayloadV2Entity} is encryption.  # noqa: E501

        :param encryption: The encryption of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._encryption = encryption

    @property
    def pre_shared_key(self):
        """Gets the pre_shared_key of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the L2TP ip sec preshared key.  # noqa: E501

        :return: The pre_shared_key of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._pre_shared_key

    @pre_shared_key.setter
    def pre_shared_key(self, pre_shared_key):
        """Sets the pre_shared_key of this AndroidVpnPayloadV2Entity.

        Gets or sets the L2TP ip sec preshared key.  # noqa: E501

        :param pre_shared_key: The pre_shared_key of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._pre_shared_key = pre_shared_key

    @property
    def payload_certificate_name(self):
        """Gets the payload_certificate_name of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the payload certificate.  # noqa: E501

        :return: The payload_certificate_name of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._payload_certificate_name

    @payload_certificate_name.setter
    def payload_certificate_name(self, payload_certificate_name):
        """Sets the payload_certificate_name of this AndroidVpnPayloadV2Entity.

        Gets or sets the name of the payload certificate.  # noqa: E501

        :param payload_certificate_name: The payload_certificate_name of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._payload_certificate_name = payload_certificate_name

    @property
    def realm(self):
        """Gets the realm of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the realm.  # noqa: E501

        :return: The realm of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this AndroidVpnPayloadV2Entity.

        Gets or sets the realm.  # noqa: E501

        :param realm: The realm of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._realm = realm

    @property
    def role(self):
        """Gets the role of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the role.  # noqa: E501

        :return: The role of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AndroidVpnPayloadV2Entity.

        Gets or sets the role.  # noqa: E501

        :param role: The role of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def password(self):
        """Gets the password of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the password.  # noqa: E501

        :return: The password of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AndroidVpnPayloadV2Entity.

        Gets or sets the password.  # noqa: E501

        :param password: The password of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def use_web_logon_for_authentication(self):
        """Gets the use_web_logon_for_authentication of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [web logon].  # noqa: E501

        :return: The use_web_logon_for_authentication of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_web_logon_for_authentication

    @use_web_logon_for_authentication.setter
    def use_web_logon_for_authentication(self, use_web_logon_for_authentication):
        """Sets the use_web_logon_for_authentication of this AndroidVpnPayloadV2Entity.

        Gets or sets a value indicating whether [web logon].  # noqa: E501

        :param use_web_logon_for_authentication: The use_web_logon_for_authentication of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_web_logon_for_authentication = use_web_logon_for_authentication

    @property
    def gateway_uid(self):
        """Gets the gateway_uid of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the gateway uid.  # noqa: E501

        :return: The gateway_uid of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._gateway_uid

    @gateway_uid.setter
    def gateway_uid(self, gateway_uid):
        """Sets the gateway_uid of this AndroidVpnPayloadV2Entity.

        Gets or sets the gateway uid.  # noqa: E501

        :param gateway_uid: The gateway_uid of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._gateway_uid = gateway_uid

    @property
    def enable_vpnon_demand(self):
        """Gets the enable_vpnon_demand of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enable VPN on demand].  # noqa: E501

        :return: The enable_vpnon_demand of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_vpnon_demand

    @enable_vpnon_demand.setter
    def enable_vpnon_demand(self, enable_vpnon_demand):
        """Sets the enable_vpnon_demand of this AndroidVpnPayloadV2Entity.

        Gets or sets a value indicating whether [enable VPN on demand].  # noqa: E501

        :param enable_vpnon_demand: The enable_vpnon_demand of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_vpnon_demand = enable_vpnon_demand

    @property
    def vpn_enabled_wrapper(self):
        """Gets the vpn_enabled_wrapper of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the VPN enabled wrapper.  # noqa: E501

        :return: The vpn_enabled_wrapper of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._vpn_enabled_wrapper

    @vpn_enabled_wrapper.setter
    def vpn_enabled_wrapper(self, vpn_enabled_wrapper):
        """Sets the vpn_enabled_wrapper of this AndroidVpnPayloadV2Entity.

        Gets or sets the VPN enabled wrapper.  # noqa: E501

        :param vpn_enabled_wrapper: The vpn_enabled_wrapper of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._vpn_enabled_wrapper = vpn_enabled_wrapper

    @property
    def websense_password(self):
        """Gets the websense_password of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the websense password.  # noqa: E501

        :return: The websense_password of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._websense_password

    @websense_password.setter
    def websense_password(self, websense_password):
        """Sets the websense_password of this AndroidVpnPayloadV2Entity.

        Gets or sets the websense password.  # noqa: E501

        :param websense_password: The websense_password of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._websense_password = websense_password

    @property
    def websense_username(self):
        """Gets the websense_username of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the websense username.  # noqa: E501

        :return: The websense_username of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._websense_username

    @websense_username.setter
    def websense_username(self, websense_username):
        """Sets the websense_username of this AndroidVpnPayloadV2Entity.

        Gets or sets the websense username.  # noqa: E501

        :param websense_username: The websense_username of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._websense_username = websense_username

    @property
    def websense_server(self):
        """Gets the websense_server of this AndroidVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the websense server.  # noqa: E501

        :return: The websense_server of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._websense_server

    @websense_server.setter
    def websense_server(self, websense_server):
        """Sets the websense_server of this AndroidVpnPayloadV2Entity.

        Gets or sets the websense server.  # noqa: E501

        :param websense_server: The websense_server of this AndroidVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._websense_server = websense_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidVpnPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidVpnPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidVpnPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
