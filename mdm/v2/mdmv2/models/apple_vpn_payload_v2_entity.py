# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleVpnPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_name': 'str',
        'connection_type': 'str',
        'communication_server': 'str',
        'account': 'str',
        'realm': 'str',
        'role': 'str',
        'encryption_level': 'int',
        'send_all_traffic': 'bool',
        'user_authentication': 'int',
        'machine_authentication': 'int',
        'group_name': 'str',
        'prompt_for_password': 'bool',
        'use_hybrid_authentication': 'bool',
        'shared_secret': 'str',
        'proxy_server_auto_config_url': 'str',
        'proxy': 'str',
        'proxy_server': 'str',
        'port': 'str',
        'proxy_username': 'str',
        'proxy_password': 'str',
        'proxy_auto_discovery_enable': 'int',
        'vpn_user_authentication': 'str',
        'vpn_password': 'str',
        'enable_vpnon_demand': 'bool',
        'use_alternativei_os7_syntax': 'bool',
        'identity_certificate': 'str',
        'include_user_pin': 'bool',
        'login_group_or_domain': 'str',
        'vpn_on_demand_models': 'list[AppleVpnOnDemandEntity]',
        'identifier': 'str',
        'custom_data': 'list[CustomDataEntity]',
        'blue_coat_customer_id': 'str',
        'per_app_vpn': 'bool',
        'connect_automatically': 'bool',
        'safari_domains': 'list[str]',
        'websense_server': 'str',
        'websense_username': 'str',
        'websense_password': 'str',
        'local_identifier': 'str',
        'remote_identifier': 'str',
        'credential': 'str',
        'ikev2_certificate_uuid': 'str',
        'server_certificate_issuer_common_name': 'str',
        'server_certificate_common_name': 'str',
        'extended_auth_enabled': 'int',
        'extended_authentication': 'str',
        'eap_certificate_uuid': 'str',
        'eap_credential': 'str',
        'eap_account': 'str',
        'eap_password': 'str',
        'tls_minimum_version': 'str',
        'tls_maximum_version': 'str',
        'dead_peer_detection_rate': 'str',
        'disable_redirect': 'int',
        'disable_mobike': 'int',
        'use_configuration_attribute_internal_ip_subnet': 'int',
        'nat_keep_alive_offload_enable': 'int',
        'nat_keep_alive_interval': 'int',
        'enable_pfs': 'int',
        'sa_parameters': 'str',
        'encryption_algorithm': 'str',
        'integrity_algorithm': 'str',
        'diffie_hellman_group': 'str',
        'enable_fallback': 'bool',
        'life_time_in_minutes': 'int',
        'provider_type': 'str',
        'mail_domains': 'list[str]',
        'contacts_domains': 'list[str]',
        'calendar_domains': 'list[str]',
        'associated_domains': 'list[str]',
        'excluded_domains': 'list[str]',
        'exclude_local_networks': 'bool',
        'include_all_networks': 'bool'
    }

    attribute_map = {
        'connection_name': 'ConnectionName',
        'connection_type': 'ConnectionType',
        'communication_server': 'CommunicationServer',
        'account': 'Account',
        'realm': 'Realm',
        'role': 'Role',
        'encryption_level': 'EncryptionLevel',
        'send_all_traffic': 'SendAllTraffic',
        'user_authentication': 'UserAuthentication',
        'machine_authentication': 'MachineAuthentication',
        'group_name': 'GroupName',
        'prompt_for_password': 'PromptForPassword',
        'use_hybrid_authentication': 'UseHybridAuthentication',
        'shared_secret': 'SharedSecret',
        'proxy_server_auto_config_url': 'ProxyServerAutoConfigURL',
        'proxy': 'Proxy',
        'proxy_server': 'ProxyServer',
        'port': 'Port',
        'proxy_username': 'ProxyUsername',
        'proxy_password': 'ProxyPassword',
        'proxy_auto_discovery_enable': 'ProxyAutoDiscoveryEnable',
        'vpn_user_authentication': 'VpnUserAuthentication',
        'vpn_password': 'VpnPassword',
        'enable_vpnon_demand': 'EnableVPNOnDemand',
        'use_alternativei_os7_syntax': 'UseAlternativeiOS7Syntax',
        'identity_certificate': 'IdentityCertificate',
        'include_user_pin': 'IncludeUserPIN',
        'login_group_or_domain': 'LoginGroupOrDomain',
        'vpn_on_demand_models': 'VpnOnDemandModels',
        'identifier': 'Identifier',
        'custom_data': 'CustomData',
        'blue_coat_customer_id': 'BlueCoatCustomerID',
        'per_app_vpn': 'PerAppVpn',
        'connect_automatically': 'ConnectAutomatically',
        'safari_domains': 'SafariDomains',
        'websense_server': 'WebsenseServer',
        'websense_username': 'WebsenseUsername',
        'websense_password': 'WebsensePassword',
        'local_identifier': 'LocalIdentifier',
        'remote_identifier': 'RemoteIdentifier',
        'credential': 'Credential',
        'ikev2_certificate_uuid': 'IKEv2CertificateUUID',
        'server_certificate_issuer_common_name': 'ServerCertificateIssuerCommonName',
        'server_certificate_common_name': 'ServerCertificateCommonName',
        'extended_auth_enabled': 'ExtendedAuthEnabled',
        'extended_authentication': 'ExtendedAuthentication',
        'eap_certificate_uuid': 'EAPCertificateUUID',
        'eap_credential': 'EAPCredential',
        'eap_account': 'EAPAccount',
        'eap_password': 'EAPPassword',
        'tls_minimum_version': 'TLSMinimumVersion',
        'tls_maximum_version': 'TLSMaximumVersion',
        'dead_peer_detection_rate': 'DeadPeerDetectionRate',
        'disable_redirect': 'DisableRedirect',
        'disable_mobike': 'DisableMOBIKE',
        'use_configuration_attribute_internal_ip_subnet': 'UseConfigurationAttributeInternalIPSubnet',
        'nat_keep_alive_offload_enable': 'NATKeepAliveOffloadEnable',
        'nat_keep_alive_interval': 'NATKeepAliveInterval',
        'enable_pfs': 'EnablePFS',
        'sa_parameters': 'SAParameters',
        'encryption_algorithm': 'EncryptionAlgorithm',
        'integrity_algorithm': 'IntegrityAlgorithm',
        'diffie_hellman_group': 'DiffieHellmanGroup',
        'enable_fallback': 'EnableFallback',
        'life_time_in_minutes': 'LifeTimeInMinutes',
        'provider_type': 'ProviderType',
        'mail_domains': 'MailDomains',
        'contacts_domains': 'ContactsDomains',
        'calendar_domains': 'CalendarDomains',
        'associated_domains': 'AssociatedDomains',
        'excluded_domains': 'ExcludedDomains',
        'exclude_local_networks': 'ExcludeLocalNetworks',
        'include_all_networks': 'IncludeAllNetworks'
    }

    def __init__(self, connection_name=None, connection_type=None, communication_server=None, account=None, realm=None, role=None, encryption_level=None, send_all_traffic=None, user_authentication=None, machine_authentication=None, group_name=None, prompt_for_password=None, use_hybrid_authentication=None, shared_secret=None, proxy_server_auto_config_url=None, proxy=None, proxy_server=None, port=None, proxy_username=None, proxy_password=None, proxy_auto_discovery_enable=None, vpn_user_authentication=None, vpn_password=None, enable_vpnon_demand=None, use_alternativei_os7_syntax=None, identity_certificate=None, include_user_pin=None, login_group_or_domain=None, vpn_on_demand_models=None, identifier=None, custom_data=None, blue_coat_customer_id=None, per_app_vpn=None, connect_automatically=None, safari_domains=None, websense_server=None, websense_username=None, websense_password=None, local_identifier=None, remote_identifier=None, credential=None, ikev2_certificate_uuid=None, server_certificate_issuer_common_name=None, server_certificate_common_name=None, extended_auth_enabled=None, extended_authentication=None, eap_certificate_uuid=None, eap_credential=None, eap_account=None, eap_password=None, tls_minimum_version=None, tls_maximum_version=None, dead_peer_detection_rate=None, disable_redirect=None, disable_mobike=None, use_configuration_attribute_internal_ip_subnet=None, nat_keep_alive_offload_enable=None, nat_keep_alive_interval=None, enable_pfs=None, sa_parameters=None, encryption_algorithm=None, integrity_algorithm=None, diffie_hellman_group=None, enable_fallback=None, life_time_in_minutes=None, provider_type=None, mail_domains=None, contacts_domains=None, calendar_domains=None, associated_domains=None, excluded_domains=None, exclude_local_networks=None, include_all_networks=None, _configuration=None):  # noqa: E501
        """AppleVpnPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_name = None
        self._connection_type = None
        self._communication_server = None
        self._account = None
        self._realm = None
        self._role = None
        self._encryption_level = None
        self._send_all_traffic = None
        self._user_authentication = None
        self._machine_authentication = None
        self._group_name = None
        self._prompt_for_password = None
        self._use_hybrid_authentication = None
        self._shared_secret = None
        self._proxy_server_auto_config_url = None
        self._proxy = None
        self._proxy_server = None
        self._port = None
        self._proxy_username = None
        self._proxy_password = None
        self._proxy_auto_discovery_enable = None
        self._vpn_user_authentication = None
        self._vpn_password = None
        self._enable_vpnon_demand = None
        self._use_alternativei_os7_syntax = None
        self._identity_certificate = None
        self._include_user_pin = None
        self._login_group_or_domain = None
        self._vpn_on_demand_models = None
        self._identifier = None
        self._custom_data = None
        self._blue_coat_customer_id = None
        self._per_app_vpn = None
        self._connect_automatically = None
        self._safari_domains = None
        self._websense_server = None
        self._websense_username = None
        self._websense_password = None
        self._local_identifier = None
        self._remote_identifier = None
        self._credential = None
        self._ikev2_certificate_uuid = None
        self._server_certificate_issuer_common_name = None
        self._server_certificate_common_name = None
        self._extended_auth_enabled = None
        self._extended_authentication = None
        self._eap_certificate_uuid = None
        self._eap_credential = None
        self._eap_account = None
        self._eap_password = None
        self._tls_minimum_version = None
        self._tls_maximum_version = None
        self._dead_peer_detection_rate = None
        self._disable_redirect = None
        self._disable_mobike = None
        self._use_configuration_attribute_internal_ip_subnet = None
        self._nat_keep_alive_offload_enable = None
        self._nat_keep_alive_interval = None
        self._enable_pfs = None
        self._sa_parameters = None
        self._encryption_algorithm = None
        self._integrity_algorithm = None
        self._diffie_hellman_group = None
        self._enable_fallback = None
        self._life_time_in_minutes = None
        self._provider_type = None
        self._mail_domains = None
        self._contacts_domains = None
        self._calendar_domains = None
        self._associated_domains = None
        self._excluded_domains = None
        self._exclude_local_networks = None
        self._include_all_networks = None
        self.discriminator = None

        if connection_name is not None:
            self.connection_name = connection_name
        if connection_type is not None:
            self.connection_type = connection_type
        if communication_server is not None:
            self.communication_server = communication_server
        if account is not None:
            self.account = account
        if realm is not None:
            self.realm = realm
        if role is not None:
            self.role = role
        if encryption_level is not None:
            self.encryption_level = encryption_level
        if send_all_traffic is not None:
            self.send_all_traffic = send_all_traffic
        if user_authentication is not None:
            self.user_authentication = user_authentication
        if machine_authentication is not None:
            self.machine_authentication = machine_authentication
        if group_name is not None:
            self.group_name = group_name
        if prompt_for_password is not None:
            self.prompt_for_password = prompt_for_password
        if use_hybrid_authentication is not None:
            self.use_hybrid_authentication = use_hybrid_authentication
        if shared_secret is not None:
            self.shared_secret = shared_secret
        if proxy_server_auto_config_url is not None:
            self.proxy_server_auto_config_url = proxy_server_auto_config_url
        if proxy is not None:
            self.proxy = proxy
        if proxy_server is not None:
            self.proxy_server = proxy_server
        if port is not None:
            self.port = port
        if proxy_username is not None:
            self.proxy_username = proxy_username
        if proxy_password is not None:
            self.proxy_password = proxy_password
        if proxy_auto_discovery_enable is not None:
            self.proxy_auto_discovery_enable = proxy_auto_discovery_enable
        if vpn_user_authentication is not None:
            self.vpn_user_authentication = vpn_user_authentication
        if vpn_password is not None:
            self.vpn_password = vpn_password
        if enable_vpnon_demand is not None:
            self.enable_vpnon_demand = enable_vpnon_demand
        if use_alternativei_os7_syntax is not None:
            self.use_alternativei_os7_syntax = use_alternativei_os7_syntax
        if identity_certificate is not None:
            self.identity_certificate = identity_certificate
        if include_user_pin is not None:
            self.include_user_pin = include_user_pin
        if login_group_or_domain is not None:
            self.login_group_or_domain = login_group_or_domain
        if vpn_on_demand_models is not None:
            self.vpn_on_demand_models = vpn_on_demand_models
        if identifier is not None:
            self.identifier = identifier
        if custom_data is not None:
            self.custom_data = custom_data
        if blue_coat_customer_id is not None:
            self.blue_coat_customer_id = blue_coat_customer_id
        if per_app_vpn is not None:
            self.per_app_vpn = per_app_vpn
        if connect_automatically is not None:
            self.connect_automatically = connect_automatically
        if safari_domains is not None:
            self.safari_domains = safari_domains
        if websense_server is not None:
            self.websense_server = websense_server
        if websense_username is not None:
            self.websense_username = websense_username
        if websense_password is not None:
            self.websense_password = websense_password
        if local_identifier is not None:
            self.local_identifier = local_identifier
        if remote_identifier is not None:
            self.remote_identifier = remote_identifier
        if credential is not None:
            self.credential = credential
        if ikev2_certificate_uuid is not None:
            self.ikev2_certificate_uuid = ikev2_certificate_uuid
        if server_certificate_issuer_common_name is not None:
            self.server_certificate_issuer_common_name = server_certificate_issuer_common_name
        if server_certificate_common_name is not None:
            self.server_certificate_common_name = server_certificate_common_name
        if extended_auth_enabled is not None:
            self.extended_auth_enabled = extended_auth_enabled
        if extended_authentication is not None:
            self.extended_authentication = extended_authentication
        if eap_certificate_uuid is not None:
            self.eap_certificate_uuid = eap_certificate_uuid
        if eap_credential is not None:
            self.eap_credential = eap_credential
        if eap_account is not None:
            self.eap_account = eap_account
        if eap_password is not None:
            self.eap_password = eap_password
        if tls_minimum_version is not None:
            self.tls_minimum_version = tls_minimum_version
        if tls_maximum_version is not None:
            self.tls_maximum_version = tls_maximum_version
        if dead_peer_detection_rate is not None:
            self.dead_peer_detection_rate = dead_peer_detection_rate
        if disable_redirect is not None:
            self.disable_redirect = disable_redirect
        if disable_mobike is not None:
            self.disable_mobike = disable_mobike
        if use_configuration_attribute_internal_ip_subnet is not None:
            self.use_configuration_attribute_internal_ip_subnet = use_configuration_attribute_internal_ip_subnet
        if nat_keep_alive_offload_enable is not None:
            self.nat_keep_alive_offload_enable = nat_keep_alive_offload_enable
        if nat_keep_alive_interval is not None:
            self.nat_keep_alive_interval = nat_keep_alive_interval
        if enable_pfs is not None:
            self.enable_pfs = enable_pfs
        if sa_parameters is not None:
            self.sa_parameters = sa_parameters
        if encryption_algorithm is not None:
            self.encryption_algorithm = encryption_algorithm
        if integrity_algorithm is not None:
            self.integrity_algorithm = integrity_algorithm
        if diffie_hellman_group is not None:
            self.diffie_hellman_group = diffie_hellman_group
        if enable_fallback is not None:
            self.enable_fallback = enable_fallback
        if life_time_in_minutes is not None:
            self.life_time_in_minutes = life_time_in_minutes
        if provider_type is not None:
            self.provider_type = provider_type
        if mail_domains is not None:
            self.mail_domains = mail_domains
        if contacts_domains is not None:
            self.contacts_domains = contacts_domains
        if calendar_domains is not None:
            self.calendar_domains = calendar_domains
        if associated_domains is not None:
            self.associated_domains = associated_domains
        if excluded_domains is not None:
            self.excluded_domains = excluded_domains
        if exclude_local_networks is not None:
            self.exclude_local_networks = exclude_local_networks
        if include_all_networks is not None:
            self.include_all_networks = include_all_networks

    @property
    def connection_name(self):
        """Gets the connection_name of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets description of the VPN connection displayed on the device.  # noqa: E501

        :return: The connection_name of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this AppleVpnPayloadV2Entity.

        Gets or sets description of the VPN connection displayed on the device.  # noqa: E501

        :param connection_name: The connection_name of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._connection_name = connection_name

    @property
    def connection_type(self):
        """Gets the connection_type of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets determines the settings available in the payload for this type of VPN connection.  # noqa: E501

        :return: The connection_type of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this AppleVpnPayloadV2Entity.

        Gets or sets determines the settings available in the payload for this type of VPN connection.  # noqa: E501

        :param connection_type: The connection_type of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def communication_server(self):
        """Gets the communication_server of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets iP address or host name of VPN server.  # noqa: E501

        :return: The communication_server of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._communication_server

    @communication_server.setter
    def communication_server(self, communication_server):
        """Sets the communication_server of this AppleVpnPayloadV2Entity.

        Gets or sets iP address or host name of VPN server.  # noqa: E501

        :param communication_server: The communication_server of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._communication_server = communication_server

    @property
    def account(self):
        """Gets the account of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets username used for authentication.  # noqa: E501

        :return: The account of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AppleVpnPayloadV2Entity.

        Gets or sets username used for authentication.  # noqa: E501

        :param account: The account of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def realm(self):
        """Gets the realm of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets authentication Realm, a grouping of authentication resources.  # noqa: E501

        :return: The realm of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this AppleVpnPayloadV2Entity.

        Gets or sets authentication Realm, a grouping of authentication resources.  # noqa: E501

        :param realm: The realm of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._realm = realm

    @property
    def role(self):
        """Gets the role of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the users role to access the network.  # noqa: E501

        :return: The role of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AppleVpnPayloadV2Entity.

        Gets or sets the users role to access the network.  # noqa: E501

        :param role: The role of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def encryption_level(self):
        """Gets the encryption_level of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets level of data encryption applied to the connection. 1: None, 2: Automatic, 3: Maximum Bit.  # noqa: E501

        :return: The encryption_level of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._encryption_level

    @encryption_level.setter
    def encryption_level(self, encryption_level):
        """Sets the encryption_level of this AppleVpnPayloadV2Entity.

        Gets or sets level of data encryption applied to the connection. 1: None, 2: Automatic, 3: Maximum Bit.  # noqa: E501

        :param encryption_level: The encryption_level of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._encryption_level = encryption_level

    @property
    def send_all_traffic(self):
        """Gets the send_all_traffic of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, all network traffic is sent over VPN.  # noqa: E501

        :return: The send_all_traffic of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._send_all_traffic

    @send_all_traffic.setter
    def send_all_traffic(self, send_all_traffic):
        """Sets the send_all_traffic of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether if true, all network traffic is sent over VPN.  # noqa: E501

        :param send_all_traffic: The send_all_traffic of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._send_all_traffic = send_all_traffic

    @property
    def user_authentication(self):
        """Gets the user_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets authentication type for connection. 0: Password, 1: RSA SecurId.  # noqa: E501

        :return: The user_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._user_authentication

    @user_authentication.setter
    def user_authentication(self, user_authentication):
        """Sets the user_authentication of this AppleVpnPayloadV2Entity.

        Gets or sets authentication type for connection. 0: Password, 1: RSA SecurId.  # noqa: E501

        :param user_authentication: The user_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._user_authentication = user_authentication

    @property
    def machine_authentication(self):
        """Gets the machine_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the authentication mode for IPSec. 1: Shared Secret, 2: Certificate.  # noqa: E501

        :return: The machine_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._machine_authentication

    @machine_authentication.setter
    def machine_authentication(self, machine_authentication):
        """Sets the machine_authentication of this AppleVpnPayloadV2Entity.

        Gets or sets the authentication mode for IPSec. 1: Shared Secret, 2: Certificate.  # noqa: E501

        :param machine_authentication: The machine_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._machine_authentication = machine_authentication

    @property
    def group_name(self):
        """Gets the group_name of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the group to use.  # noqa: E501

        :return: The group_name of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this AppleVpnPayloadV2Entity.

        Gets or sets the name of the group to use.  # noqa: E501

        :param group_name: The group_name of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def prompt_for_password(self):
        """Gets the prompt_for_password of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether when true, the user is prompted to privide the password on the device.  # noqa: E501

        :return: The prompt_for_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._prompt_for_password

    @prompt_for_password.setter
    def prompt_for_password(self, prompt_for_password):
        """Sets the prompt_for_password of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether when true, the user is prompted to privide the password on the device.  # noqa: E501

        :param prompt_for_password: The prompt_for_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._prompt_for_password = prompt_for_password

    @property
    def use_hybrid_authentication(self):
        """Gets the use_hybrid_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether specifies if a combination of Secret, Name and Certificate need to be used for Authentication.  # noqa: E501

        :return: The use_hybrid_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_hybrid_authentication

    @use_hybrid_authentication.setter
    def use_hybrid_authentication(self, use_hybrid_authentication):
        """Sets the use_hybrid_authentication of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether specifies if a combination of Secret, Name and Certificate need to be used for Authentication.  # noqa: E501

        :param use_hybrid_authentication: The use_hybrid_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_hybrid_authentication = use_hybrid_authentication

    @property
    def shared_secret(self):
        """Gets the shared_secret of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the shared secret for this VPN account.  # noqa: E501

        :return: The shared_secret of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this AppleVpnPayloadV2Entity.

        Gets or sets the shared secret for this VPN account.  # noqa: E501

        :param shared_secret: The shared_secret of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._shared_secret = shared_secret

    @property
    def proxy_server_auto_config_url(self):
        """Gets the proxy_server_auto_config_url of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets uRL to the location of the proxy auto-configuration file.  # noqa: E501

        :return: The proxy_server_auto_config_url of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_server_auto_config_url

    @proxy_server_auto_config_url.setter
    def proxy_server_auto_config_url(self, proxy_server_auto_config_url):
        """Sets the proxy_server_auto_config_url of this AppleVpnPayloadV2Entity.

        Gets or sets uRL to the location of the proxy auto-configuration file.  # noqa: E501

        :param proxy_server_auto_config_url: The proxy_server_auto_config_url of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy_server_auto_config_url = proxy_server_auto_config_url

    @property
    def proxy(self):
        """Gets the proxy of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets proxy type.  # noqa: E501

        :return: The proxy of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this AppleVpnPayloadV2Entity.

        Gets or sets proxy type.  # noqa: E501

        :param proxy: The proxy of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy = proxy

    @property
    def proxy_server(self):
        """Gets the proxy_server of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the host name of the HTTP proxy.  # noqa: E501

        :return: The proxy_server of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_server

    @proxy_server.setter
    def proxy_server(self, proxy_server):
        """Sets the proxy_server of this AppleVpnPayloadV2Entity.

        Gets or sets the host name of the HTTP proxy.  # noqa: E501

        :param proxy_server: The proxy_server of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy_server = proxy_server

    @property
    def port(self):
        """Gets the port of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the port number of the HTTP proxy.  # noqa: E501

        :return: The port of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this AppleVpnPayloadV2Entity.

        Gets or sets the port number of the HTTP proxy.  # noqa: E501

        :param port: The port of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def proxy_username(self):
        """Gets the proxy_username of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the username used for authentication.  # noqa: E501

        :return: The proxy_username of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_username

    @proxy_username.setter
    def proxy_username(self, proxy_username):
        """Sets the proxy_username of this AppleVpnPayloadV2Entity.

        Gets or sets the username used for authentication.  # noqa: E501

        :param proxy_username: The proxy_username of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy_username = proxy_username

    @property
    def proxy_password(self):
        """Gets the proxy_password of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the password used for authentication.  # noqa: E501

        :return: The proxy_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_password

    @proxy_password.setter
    def proxy_password(self, proxy_password):
        """Sets the proxy_password of this AppleVpnPayloadV2Entity.

        Gets or sets the password used for authentication.  # noqa: E501

        :param proxy_password: The proxy_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy_password = proxy_password

    @property
    def proxy_auto_discovery_enable(self):
        """Gets the proxy_auto_discovery_enable of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets proxy auto discovery enable.  # noqa: E501

        :return: The proxy_auto_discovery_enable of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._proxy_auto_discovery_enable

    @proxy_auto_discovery_enable.setter
    def proxy_auto_discovery_enable(self, proxy_auto_discovery_enable):
        """Sets the proxy_auto_discovery_enable of this AppleVpnPayloadV2Entity.

        Gets or sets proxy auto discovery enable.  # noqa: E501

        :param proxy_auto_discovery_enable: The proxy_auto_discovery_enable of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._proxy_auto_discovery_enable = proxy_auto_discovery_enable

    @property
    def vpn_user_authentication(self):
        """Gets the vpn_user_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets vPN authentication method.  # noqa: E501

        :return: The vpn_user_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._vpn_user_authentication

    @vpn_user_authentication.setter
    def vpn_user_authentication(self, vpn_user_authentication):
        """Sets the vpn_user_authentication of this AppleVpnPayloadV2Entity.

        Gets or sets vPN authentication method.  # noqa: E501

        :param vpn_user_authentication: The vpn_user_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._vpn_user_authentication = vpn_user_authentication

    @property
    def vpn_password(self):
        """Gets the vpn_password of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the password used for authentication.  # noqa: E501

        :return: The vpn_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._vpn_password

    @vpn_password.setter
    def vpn_password(self, vpn_password):
        """Sets the vpn_password of this AppleVpnPayloadV2Entity.

        Gets or sets the password used for authentication.  # noqa: E501

        :param vpn_password: The vpn_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._vpn_password = vpn_password

    @property
    def enable_vpnon_demand(self):
        """Gets the enable_vpnon_demand of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether setting to true, enables VPN On-Demand feature for networks that user certificate based Authentication.  # noqa: E501

        :return: The enable_vpnon_demand of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_vpnon_demand

    @enable_vpnon_demand.setter
    def enable_vpnon_demand(self, enable_vpnon_demand):
        """Sets the enable_vpnon_demand of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether setting to true, enables VPN On-Demand feature for networks that user certificate based Authentication.  # noqa: E501

        :param enable_vpnon_demand: The enable_vpnon_demand of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_vpnon_demand = enable_vpnon_demand

    @property
    def use_alternativei_os7_syntax(self):
        """Gets the use_alternativei_os7_syntax of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether enable the option for VPN On Demand to work on iOS 7 devices by utilizing the new keys in the VPN profile.  # noqa: E501

        :return: The use_alternativei_os7_syntax of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_alternativei_os7_syntax

    @use_alternativei_os7_syntax.setter
    def use_alternativei_os7_syntax(self, use_alternativei_os7_syntax):
        """Sets the use_alternativei_os7_syntax of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether enable the option for VPN On Demand to work on iOS 7 devices by utilizing the new keys in the VPN profile.  # noqa: E501

        :param use_alternativei_os7_syntax: The use_alternativei_os7_syntax of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_alternativei_os7_syntax = use_alternativei_os7_syntax

    @property
    def identity_certificate(self):
        """Gets the identity_certificate of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the crtificate name for IPSec.  # noqa: E501

        :return: The identity_certificate of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._identity_certificate

    @identity_certificate.setter
    def identity_certificate(self, identity_certificate):
        """Sets the identity_certificate of this AppleVpnPayloadV2Entity.

        Gets or sets the crtificate name for IPSec.  # noqa: E501

        :param identity_certificate: The identity_certificate of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._identity_certificate = identity_certificate

    @property
    def include_user_pin(self):
        """Gets the include_user_pin of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether setting to true sends the device user's pin along with the authentication.  # noqa: E501

        :return: The include_user_pin of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._include_user_pin

    @include_user_pin.setter
    def include_user_pin(self, include_user_pin):
        """Sets the include_user_pin of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether setting to true sends the device user's pin along with the authentication.  # noqa: E501

        :param include_user_pin: The include_user_pin of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._include_user_pin = include_user_pin

    @property
    def login_group_or_domain(self):
        """Gets the login_group_or_domain of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets domain name for VPN connection.  # noqa: E501

        :return: The login_group_or_domain of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._login_group_or_domain

    @login_group_or_domain.setter
    def login_group_or_domain(self, login_group_or_domain):
        """Sets the login_group_or_domain of this AppleVpnPayloadV2Entity.

        Gets or sets domain name for VPN connection.  # noqa: E501

        :param login_group_or_domain: The login_group_or_domain of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._login_group_or_domain = login_group_or_domain

    @property
    def vpn_on_demand_models(self):
        """Gets the vpn_on_demand_models of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets list of the VPN On Demand Action Parameters.  # noqa: E501

        :return: The vpn_on_demand_models of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: list[AppleVpnOnDemandEntity]
        """
        return self._vpn_on_demand_models

    @vpn_on_demand_models.setter
    def vpn_on_demand_models(self, vpn_on_demand_models):
        """Sets the vpn_on_demand_models of this AppleVpnPayloadV2Entity.

        Gets or sets list of the VPN On Demand Action Parameters.  # noqa: E501

        :param vpn_on_demand_models: The vpn_on_demand_models of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: list[AppleVpnOnDemandEntity]
        """

        self._vpn_on_demand_models = vpn_on_demand_models

    @property
    def identifier(self):
        """Gets the identifier of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets identifier for the custom VPN connection.  # noqa: E501

        :return: The identifier of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AppleVpnPayloadV2Entity.

        Gets or sets identifier for the custom VPN connection.  # noqa: E501

        :param identifier: The identifier of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def custom_data(self):
        """Gets the custom_data of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets list of Custom data.  # noqa: E501

        :return: The custom_data of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: list[CustomDataEntity]
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this AppleVpnPayloadV2Entity.

        Gets or sets list of Custom data.  # noqa: E501

        :param custom_data: The custom_data of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: list[CustomDataEntity]
        """

        self._custom_data = custom_data

    @property
    def blue_coat_customer_id(self):
        """Gets the blue_coat_customer_id of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets customer ID for Blue Coat Connections.  # noqa: E501

        :return: The blue_coat_customer_id of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._blue_coat_customer_id

    @blue_coat_customer_id.setter
    def blue_coat_customer_id(self, blue_coat_customer_id):
        """Sets the blue_coat_customer_id of this AppleVpnPayloadV2Entity.

        Gets or sets customer ID for Blue Coat Connections.  # noqa: E501

        :param blue_coat_customer_id: The blue_coat_customer_id of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._blue_coat_customer_id = blue_coat_customer_id

    @property
    def per_app_vpn(self):
        """Gets the per_app_vpn of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether per-app VPN that needed to be configured on the device.  # noqa: E501

        :return: The per_app_vpn of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._per_app_vpn

    @per_app_vpn.setter
    def per_app_vpn(self, per_app_vpn):
        """Sets the per_app_vpn of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether per-app VPN that needed to be configured on the device.  # noqa: E501

        :param per_app_vpn: The per_app_vpn of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._per_app_vpn = per_app_vpn

    @property
    def connect_automatically(self):
        """Gets the connect_automatically of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether enabled when PerAppVpn tag is set to true. Specifies if the VPN connection has to be made automatically.  # noqa: E501

        :return: The connect_automatically of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._connect_automatically

    @connect_automatically.setter
    def connect_automatically(self, connect_automatically):
        """Sets the connect_automatically of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether enabled when PerAppVpn tag is set to true. Specifies if the VPN connection has to be made automatically.  # noqa: E501

        :param connect_automatically: The connect_automatically of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._connect_automatically = connect_automatically

    @property
    def safari_domains(self):
        """Gets the safari_domains of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets list of Domains that should trigger this VPN connection in Safari.  # noqa: E501

        :return: The safari_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._safari_domains

    @safari_domains.setter
    def safari_domains(self, safari_domains):
        """Sets the safari_domains of this AppleVpnPayloadV2Entity.

        Gets or sets list of Domains that should trigger this VPN connection in Safari.  # noqa: E501

        :param safari_domains: The safari_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._safari_domains = safari_domains

    @property
    def websense_server(self):
        """Gets the websense_server of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the Websense Server.  # noqa: E501

        :return: The websense_server of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._websense_server

    @websense_server.setter
    def websense_server(self, websense_server):
        """Sets the websense_server of this AppleVpnPayloadV2Entity.

        Gets or sets the Websense Server.  # noqa: E501

        :param websense_server: The websense_server of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._websense_server = websense_server

    @property
    def websense_username(self):
        """Gets the websense_username of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the Websense Username.  # noqa: E501

        :return: The websense_username of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._websense_username

    @websense_username.setter
    def websense_username(self, websense_username):
        """Sets the websense_username of this AppleVpnPayloadV2Entity.

        Gets or sets the Websense Username.  # noqa: E501

        :param websense_username: The websense_username of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._websense_username = websense_username

    @property
    def websense_password(self):
        """Gets the websense_password of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the Websense password.  # noqa: E501

        :return: The websense_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._websense_password

    @websense_password.setter
    def websense_password(self, websense_password):
        """Sets the websense_password of this AppleVpnPayloadV2Entity.

        Gets or sets the Websense password.  # noqa: E501

        :param websense_password: The websense_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._websense_password = websense_password

    @property
    def local_identifier(self):
        """Gets the local_identifier of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the identifier for the IKEv2 client in one of the following format: FQDN, UserFQDN, Addres, or ASN1DN.  # noqa: E501

        :return: The local_identifier of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._local_identifier

    @local_identifier.setter
    def local_identifier(self, local_identifier):
        """Sets the local_identifier of this AppleVpnPayloadV2Entity.

        Gets or sets the identifier for the IKEv2 client in one of the following format: FQDN, UserFQDN, Addres, or ASN1DN.  # noqa: E501

        :param local_identifier: The local_identifier of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._local_identifier = local_identifier

    @property
    def remote_identifier(self):
        """Gets the remote_identifier of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the remote identifier for IKEv2 in one of the following formats: FQDN, UserFQDN, Addres, or ASN1DN.  # noqa: E501

        :return: The remote_identifier of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._remote_identifier

    @remote_identifier.setter
    def remote_identifier(self, remote_identifier):
        """Sets the remote_identifier of this AppleVpnPayloadV2Entity.

        Gets or sets the remote identifier for IKEv2 in one of the following formats: FQDN, UserFQDN, Addres, or ASN1DN.  # noqa: E501

        :param remote_identifier: The remote_identifier of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._remote_identifier = remote_identifier

    @property
    def credential(self):
        """Gets the credential of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the crtificate name for IKEv2.  # noqa: E501

        :return: The credential of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this AppleVpnPayloadV2Entity.

        Gets or sets the crtificate name for IKEv2.  # noqa: E501

        :param credential: The credential of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._credential = credential

    @property
    def ikev2_certificate_uuid(self):
        """Gets the ikev2_certificate_uuid of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a globally unique identifier for the IKEv2 Certificate.  # noqa: E501

        :return: The ikev2_certificate_uuid of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._ikev2_certificate_uuid

    @ikev2_certificate_uuid.setter
    def ikev2_certificate_uuid(self, ikev2_certificate_uuid):
        """Sets the ikev2_certificate_uuid of this AppleVpnPayloadV2Entity.

        Gets or sets a globally unique identifier for the IKEv2 Certificate.  # noqa: E501

        :param ikev2_certificate_uuid: The ikev2_certificate_uuid of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._ikev2_certificate_uuid = ikev2_certificate_uuid

    @property
    def server_certificate_issuer_common_name(self):
        """Gets the server_certificate_issuer_common_name of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets common Name of the server certificate issuer. If set, this field will cause IKE to send a certificate request based on this certificate issuer to the server.  # noqa: E501

        :return: The server_certificate_issuer_common_name of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._server_certificate_issuer_common_name

    @server_certificate_issuer_common_name.setter
    def server_certificate_issuer_common_name(self, server_certificate_issuer_common_name):
        """Sets the server_certificate_issuer_common_name of this AppleVpnPayloadV2Entity.

        Gets or sets common Name of the server certificate issuer. If set, this field will cause IKE to send a certificate request based on this certificate issuer to the server.  # noqa: E501

        :param server_certificate_issuer_common_name: The server_certificate_issuer_common_name of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._server_certificate_issuer_common_name = server_certificate_issuer_common_name

    @property
    def server_certificate_common_name(self):
        """Gets the server_certificate_common_name of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets common Name of the server certificate. This name is used to validate the certificate sent by the IKE server. If not set, the Remote Identifier will be used to validate the certificate.  # noqa: E501

        :return: The server_certificate_common_name of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._server_certificate_common_name

    @server_certificate_common_name.setter
    def server_certificate_common_name(self, server_certificate_common_name):
        """Sets the server_certificate_common_name of this AppleVpnPayloadV2Entity.

        Gets or sets common Name of the server certificate. This name is used to validate the certificate sent by the IKE server. If not set, the Remote Identifier will be used to validate the certificate.  # noqa: E501

        :param server_certificate_common_name: The server_certificate_common_name of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._server_certificate_common_name = server_certificate_common_name

    @property
    def extended_auth_enabled(self):
        """Gets the extended_auth_enabled of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets set to 1 to enable EAP-only authentication (see AuthenticationMethod, above). Defaults to 0.  # noqa: E501

        :return: The extended_auth_enabled of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._extended_auth_enabled

    @extended_auth_enabled.setter
    def extended_auth_enabled(self, extended_auth_enabled):
        """Sets the extended_auth_enabled of this AppleVpnPayloadV2Entity.

        Gets or sets set to 1 to enable EAP-only authentication (see AuthenticationMethod, above). Defaults to 0.  # noqa: E501

        :param extended_auth_enabled: The extended_auth_enabled of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._extended_auth_enabled = extended_auth_enabled

    @property
    def extended_authentication(self):
        """Gets the extended_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets extended authentication method for IKEv2. One of the following: UserNamePassword or Certificate.  # noqa: E501

        :return: The extended_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._extended_authentication

    @extended_authentication.setter
    def extended_authentication(self, extended_authentication):
        """Sets the extended_authentication of this AppleVpnPayloadV2Entity.

        Gets or sets extended authentication method for IKEv2. One of the following: UserNamePassword or Certificate.  # noqa: E501

        :param extended_authentication: The extended_authentication of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._extended_authentication = extended_authentication

    @property
    def eap_certificate_uuid(self):
        """Gets the eap_certificate_uuid of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a globally unique identifier for EAP certificate.  # noqa: E501

        :return: The eap_certificate_uuid of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._eap_certificate_uuid

    @eap_certificate_uuid.setter
    def eap_certificate_uuid(self, eap_certificate_uuid):
        """Sets the eap_certificate_uuid of this AppleVpnPayloadV2Entity.

        Gets or sets a globally unique identifier for EAP certificate.  # noqa: E501

        :param eap_certificate_uuid: The eap_certificate_uuid of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._eap_certificate_uuid = eap_certificate_uuid

    @property
    def eap_credential(self):
        """Gets the eap_credential of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the EAP crtificate name.  # noqa: E501

        :return: The eap_credential of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._eap_credential

    @eap_credential.setter
    def eap_credential(self, eap_credential):
        """Sets the eap_credential of this AppleVpnPayloadV2Entity.

        Gets or sets the EAP crtificate name.  # noqa: E501

        :param eap_credential: The eap_credential of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._eap_credential = eap_credential

    @property
    def eap_account(self):
        """Gets the eap_account of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets username used for EAP.  # noqa: E501

        :return: The eap_account of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._eap_account

    @eap_account.setter
    def eap_account(self, eap_account):
        """Sets the eap_account of this AppleVpnPayloadV2Entity.

        Gets or sets username used for EAP.  # noqa: E501

        :param eap_account: The eap_account of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._eap_account = eap_account

    @property
    def eap_password(self):
        """Gets the eap_password of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets password used for EAP.  # noqa: E501

        :return: The eap_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._eap_password

    @eap_password.setter
    def eap_password(self, eap_password):
        """Sets the eap_password of this AppleVpnPayloadV2Entity.

        Gets or sets password used for EAP.  # noqa: E501

        :param eap_password: The eap_password of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._eap_password = eap_password

    @property
    def tls_minimum_version(self):
        """Gets the tls_minimum_version of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the minimum TLS version to be used with EAP-TLS authentication. If no value is specified, the default minimum is 1.0.  # noqa: E501

        :return: The tls_minimum_version of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._tls_minimum_version

    @tls_minimum_version.setter
    def tls_minimum_version(self, tls_minimum_version):
        """Sets the tls_minimum_version of this AppleVpnPayloadV2Entity.

        Gets or sets the minimum TLS version to be used with EAP-TLS authentication. If no value is specified, the default minimum is 1.0.  # noqa: E501

        :param tls_minimum_version: The tls_minimum_version of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._tls_minimum_version = tls_minimum_version

    @property
    def tls_maximum_version(self):
        """Gets the tls_maximum_version of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets the maximum TLS version to be used with EAP-TLS authentication. If no value is specified, the default maximum is 1.2.  # noqa: E501

        :return: The tls_maximum_version of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._tls_maximum_version

    @tls_maximum_version.setter
    def tls_maximum_version(self, tls_maximum_version):
        """Sets the tls_maximum_version of this AppleVpnPayloadV2Entity.

        Gets or sets the maximum TLS version to be used with EAP-TLS authentication. If no value is specified, the default maximum is 1.2.  # noqa: E501

        :param tls_maximum_version: The tls_maximum_version of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._tls_maximum_version = tls_maximum_version

    @property
    def dead_peer_detection_rate(self):
        """Gets the dead_peer_detection_rate of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets dead peer detection rate for IKEv2. One of the following: None, Low(every 30 minutes), Medium(every 10 minutes), or High(every minute).  # noqa: E501

        :return: The dead_peer_detection_rate of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._dead_peer_detection_rate

    @dead_peer_detection_rate.setter
    def dead_peer_detection_rate(self, dead_peer_detection_rate):
        """Sets the dead_peer_detection_rate of this AppleVpnPayloadV2Entity.

        Gets or sets dead peer detection rate for IKEv2. One of the following: None, Low(every 30 minutes), Medium(every 10 minutes), or High(every minute).  # noqa: E501

        :param dead_peer_detection_rate: The dead_peer_detection_rate of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._dead_peer_detection_rate = dead_peer_detection_rate

    @property
    def disable_redirect(self):
        """Gets the disable_redirect of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets if set to 1, disables IKEv2 redirect. If not set, the IKEv2 connection would be redirected if a redirect request is received from the server. Defaults to 0.  # noqa: E501

        :return: The disable_redirect of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._disable_redirect

    @disable_redirect.setter
    def disable_redirect(self, disable_redirect):
        """Sets the disable_redirect of this AppleVpnPayloadV2Entity.

        Gets or sets if set to 1, disables IKEv2 redirect. If not set, the IKEv2 connection would be redirected if a redirect request is received from the server. Defaults to 0.  # noqa: E501

        :param disable_redirect: The disable_redirect of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._disable_redirect = disable_redirect

    @property
    def disable_mobike(self):
        """Gets the disable_mobike of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets if set to 1, disables MOBIKE. Defaults to 0.  # noqa: E501

        :return: The disable_mobike of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._disable_mobike

    @disable_mobike.setter
    def disable_mobike(self, disable_mobike):
        """Sets the disable_mobike of this AppleVpnPayloadV2Entity.

        Gets or sets if set to 1, disables MOBIKE. Defaults to 0.  # noqa: E501

        :param disable_mobike: The disable_mobike of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._disable_mobike = disable_mobike

    @property
    def use_configuration_attribute_internal_ip_subnet(self):
        """Gets the use_configuration_attribute_internal_ip_subnet of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets if set to 1, negotiations should use IKEv2 Configuration Attribute INTERNAL_IP4_SUBNET and INTERNAL_IP6_SUBNET. Defaults to 0.  # noqa: E501

        :return: The use_configuration_attribute_internal_ip_subnet of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._use_configuration_attribute_internal_ip_subnet

    @use_configuration_attribute_internal_ip_subnet.setter
    def use_configuration_attribute_internal_ip_subnet(self, use_configuration_attribute_internal_ip_subnet):
        """Sets the use_configuration_attribute_internal_ip_subnet of this AppleVpnPayloadV2Entity.

        Gets or sets if set to 1, negotiations should use IKEv2 Configuration Attribute INTERNAL_IP4_SUBNET and INTERNAL_IP6_SUBNET. Defaults to 0.  # noqa: E501

        :param use_configuration_attribute_internal_ip_subnet: The use_configuration_attribute_internal_ip_subnet of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._use_configuration_attribute_internal_ip_subnet = use_configuration_attribute_internal_ip_subnet

    @property
    def nat_keep_alive_offload_enable(self):
        """Gets the nat_keep_alive_offload_enable of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets set to 1 to enable and 0 to disable NAT Keepalive offload for Always On VPN IKEv2 connections. Defaults to 1.  # noqa: E501

        :return: The nat_keep_alive_offload_enable of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._nat_keep_alive_offload_enable

    @nat_keep_alive_offload_enable.setter
    def nat_keep_alive_offload_enable(self, nat_keep_alive_offload_enable):
        """Sets the nat_keep_alive_offload_enable of this AppleVpnPayloadV2Entity.

        Gets or sets set to 1 to enable and 0 to disable NAT Keepalive offload for Always On VPN IKEv2 connections. Defaults to 1.  # noqa: E501

        :param nat_keep_alive_offload_enable: The nat_keep_alive_offload_enable of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._nat_keep_alive_offload_enable = nat_keep_alive_offload_enable

    @property
    def nat_keep_alive_interval(self):
        """Gets the nat_keep_alive_interval of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets controls the interval over which Keepalive packets are sent by the device. The minimum value is 20 seconds. If no key is specified, the default is 20 seconds.  # noqa: E501

        :return: The nat_keep_alive_interval of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._nat_keep_alive_interval

    @nat_keep_alive_interval.setter
    def nat_keep_alive_interval(self, nat_keep_alive_interval):
        """Sets the nat_keep_alive_interval of this AppleVpnPayloadV2Entity.

        Gets or sets controls the interval over which Keepalive packets are sent by the device. The minimum value is 20 seconds. If no key is specified, the default is 20 seconds.  # noqa: E501

        :param nat_keep_alive_interval: The nat_keep_alive_interval of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._nat_keep_alive_interval = nat_keep_alive_interval

    @property
    def enable_pfs(self):
        """Gets the enable_pfs of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets set to 1 to enable Perfect Forward Secrecy (PFS) for IKEv2 Connections. Default is 0.  # noqa: E501

        :return: The enable_pfs of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._enable_pfs

    @enable_pfs.setter
    def enable_pfs(self, enable_pfs):
        """Sets the enable_pfs of this AppleVpnPayloadV2Entity.

        Gets or sets set to 1 to enable Perfect Forward Secrecy (PFS) for IKEv2 Connections. Default is 0.  # noqa: E501

        :param enable_pfs: The enable_pfs of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._enable_pfs = enable_pfs

    @property
    def sa_parameters(self):
        """Gets the sa_parameters of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets security Association parameter for IKEv2. One of the following: 1(IKE2) or 2(Child).  # noqa: E501

        :return: The sa_parameters of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._sa_parameters

    @sa_parameters.setter
    def sa_parameters(self, sa_parameters):
        """Sets the sa_parameters of this AppleVpnPayloadV2Entity.

        Gets or sets security Association parameter for IKEv2. One of the following: 1(IKE2) or 2(Child).  # noqa: E501

        :param sa_parameters: The sa_parameters of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._sa_parameters = sa_parameters

    @property
    def encryption_algorithm(self):
        """Gets the encryption_algorithm of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets encryption algorithm for IKEv2. One of the following: DES, 3DES, AES-128, AES-256, AES-128-GCM, AES-256-GCM, or ChaCha20Poly1305.  # noqa: E501

        :return: The encryption_algorithm of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._encryption_algorithm

    @encryption_algorithm.setter
    def encryption_algorithm(self, encryption_algorithm):
        """Sets the encryption_algorithm of this AppleVpnPayloadV2Entity.

        Gets or sets encryption algorithm for IKEv2. One of the following: DES, 3DES, AES-128, AES-256, AES-128-GCM, AES-256-GCM, or ChaCha20Poly1305.  # noqa: E501

        :param encryption_algorithm: The encryption_algorithm of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._encryption_algorithm = encryption_algorithm

    @property
    def integrity_algorithm(self):
        """Gets the integrity_algorithm of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets integrity algorithm for IKEv2. One of the following: SHA1-96, SHA1-160, SHA2-256, SHA2-384, or SHA2-512.  # noqa: E501

        :return: The integrity_algorithm of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._integrity_algorithm

    @integrity_algorithm.setter
    def integrity_algorithm(self, integrity_algorithm):
        """Sets the integrity_algorithm of this AppleVpnPayloadV2Entity.

        Gets or sets integrity algorithm for IKEv2. One of the following: SHA1-96, SHA1-160, SHA2-256, SHA2-384, or SHA2-512.  # noqa: E501

        :param integrity_algorithm: The integrity_algorithm of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._integrity_algorithm = integrity_algorithm

    @property
    def diffie_hellman_group(self):
        """Gets the diffie_hellman_group of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets diffie Hellman group for IKEv2. One of the following: 1, 2, 5, 14, 15, 16, 17, 18, 19, 20, 21, or 31.  # noqa: E501

        :return: The diffie_hellman_group of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._diffie_hellman_group

    @diffie_hellman_group.setter
    def diffie_hellman_group(self, diffie_hellman_group):
        """Sets the diffie_hellman_group of this AppleVpnPayloadV2Entity.

        Gets or sets diffie Hellman group for IKEv2. One of the following: 1, 2, 5, 14, 15, 16, 17, 18, 19, 20, 21, or 31.  # noqa: E501

        :param diffie_hellman_group: The diffie_hellman_group of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._diffie_hellman_group = diffie_hellman_group

    @property
    def enable_fallback(self):
        """Gets the enable_fallback of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets enable fallback for IKEv2. If true, enables a tunnel over cellular data to carry traffic that is eligible for WiFi Assist and also requires VPN. Enabling fallback requires that the server support multiple tunnels for a single user.  # noqa: E501

        :return: The enable_fallback of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_fallback

    @enable_fallback.setter
    def enable_fallback(self, enable_fallback):
        """Sets the enable_fallback of this AppleVpnPayloadV2Entity.

        Gets or sets enable fallback for IKEv2. If true, enables a tunnel over cellular data to carry traffic that is eligible for WiFi Assist and also requires VPN. Enabling fallback requires that the server support multiple tunnels for a single user.  # noqa: E501

        :param enable_fallback: The enable_fallback of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_fallback = enable_fallback

    @property
    def life_time_in_minutes(self):
        """Gets the life_time_in_minutes of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets sA lifetime (rekey interval) in minutes. Valid values are 10 through 1440. Defaults to 1440 minutes.  # noqa: E501

        :return: The life_time_in_minutes of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._life_time_in_minutes

    @life_time_in_minutes.setter
    def life_time_in_minutes(self, life_time_in_minutes):
        """Sets the life_time_in_minutes of this AppleVpnPayloadV2Entity.

        Gets or sets sA lifetime (rekey interval) in minutes. Valid values are 10 through 1440. Defaults to 1440 minutes.  # noqa: E501

        :param life_time_in_minutes: The life_time_in_minutes of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._life_time_in_minutes = life_time_in_minutes

    @property
    def provider_type(self):
        """Gets the provider_type of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or Sets Provider type.  # noqa: E501

        :return: The provider_type of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this AppleVpnPayloadV2Entity.

        Gets or Sets Provider type.  # noqa: E501

        :param provider_type: The provider_type of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._provider_type = provider_type

    @property
    def mail_domains(self):
        """Gets the mail_domains of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets list of mail domains.  # noqa: E501

        :return: The mail_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._mail_domains

    @mail_domains.setter
    def mail_domains(self, mail_domains):
        """Sets the mail_domains of this AppleVpnPayloadV2Entity.

        Gets or sets list of mail domains.  # noqa: E501

        :param mail_domains: The mail_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._mail_domains = mail_domains

    @property
    def contacts_domains(self):
        """Gets the contacts_domains of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets list of contacts domains.  # noqa: E501

        :return: The contacts_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts_domains

    @contacts_domains.setter
    def contacts_domains(self, contacts_domains):
        """Sets the contacts_domains of this AppleVpnPayloadV2Entity.

        Gets or sets list of contacts domains.  # noqa: E501

        :param contacts_domains: The contacts_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._contacts_domains = contacts_domains

    @property
    def calendar_domains(self):
        """Gets the calendar_domains of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets list of calendar domains.  # noqa: E501

        :return: The calendar_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._calendar_domains

    @calendar_domains.setter
    def calendar_domains(self, calendar_domains):
        """Sets the calendar_domains of this AppleVpnPayloadV2Entity.

        Gets or sets list of calendar domains.  # noqa: E501

        :param calendar_domains: The calendar_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._calendar_domains = calendar_domains

    @property
    def associated_domains(self):
        """Gets the associated_domains of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets list of associated domains.  # noqa: E501

        :return: The associated_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._associated_domains

    @associated_domains.setter
    def associated_domains(self, associated_domains):
        """Sets the associated_domains of this AppleVpnPayloadV2Entity.

        Gets or sets list of associated domains.  # noqa: E501

        :param associated_domains: The associated_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._associated_domains = associated_domains

    @property
    def excluded_domains(self):
        """Gets the excluded_domains of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets list of excluded domains.  # noqa: E501

        :return: The excluded_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_domains

    @excluded_domains.setter
    def excluded_domains(self, excluded_domains):
        """Sets the excluded_domains of this AppleVpnPayloadV2Entity.

        Gets or sets list of excluded domains.  # noqa: E501

        :param excluded_domains: The excluded_domains of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._excluded_domains = excluded_domains

    @property
    def exclude_local_networks(self):
        """Gets the exclude_local_networks of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether routes all local network traffic outside VPN.  # noqa: E501

        :return: The exclude_local_networks of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_local_networks

    @exclude_local_networks.setter
    def exclude_local_networks(self, exclude_local_networks):
        """Sets the exclude_local_networks of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether routes all local network traffic outside VPN.  # noqa: E501

        :param exclude_local_networks: The exclude_local_networks of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._exclude_local_networks = exclude_local_networks

    @property
    def include_all_networks(self):
        """Gets the include_all_networks of this AppleVpnPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether routes all traffic through VPN.  # noqa: E501

        :return: The include_all_networks of this AppleVpnPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._include_all_networks

    @include_all_networks.setter
    def include_all_networks(self, include_all_networks):
        """Sets the include_all_networks of this AppleVpnPayloadV2Entity.

        Gets or sets a value indicating whether routes all traffic through VPN.  # noqa: E501

        :param include_all_networks: The include_all_networks of this AppleVpnPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._include_all_networks = include_all_networks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleVpnPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleVpnPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleVpnPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
