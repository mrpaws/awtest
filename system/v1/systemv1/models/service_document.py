# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class ServiceDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_name': 'str',
        'product_copyright': 'str',
        'product_version': 'str',
        'version': 'int',
        'resources': 'ServiceDocumentResources',
        'build_key': 'str',
        'commit_id': 'str',
        'control_plane_version_details': 'ControlPlaneVersionDetails'
    }

    attribute_map = {
        'product_name': 'ProductName',
        'product_copyright': 'ProductCopyright',
        'product_version': 'ProductVersion',
        'version': 'Version',
        'resources': 'Resources',
        'build_key': 'BuildKey',
        'commit_id': 'CommitId',
        'control_plane_version_details': 'ControlPlaneVersionDetails'
    }

    def __init__(self, product_name=None, product_copyright=None, product_version=None, version=None, resources=None, build_key=None, commit_id=None, control_plane_version_details=None, _configuration=None):  # noqa: E501
        """ServiceDocument - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._product_name = None
        self._product_copyright = None
        self._product_version = None
        self._version = None
        self._resources = None
        self._build_key = None
        self._commit_id = None
        self._control_plane_version_details = None
        self.discriminator = None

        if product_name is not None:
            self.product_name = product_name
        if product_copyright is not None:
            self.product_copyright = product_copyright
        if product_version is not None:
            self.product_version = product_version
        if version is not None:
            self.version = version
        if resources is not None:
            self.resources = resources
        if build_key is not None:
            self.build_key = build_key
        if commit_id is not None:
            self.commit_id = commit_id
        if control_plane_version_details is not None:
            self.control_plane_version_details = control_plane_version_details

    @property
    def product_name(self):
        """Gets the product_name of this ServiceDocument.  # noqa: E501

        Gets or sets name of the product.  # noqa: E501

        :return: The product_name of this ServiceDocument.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ServiceDocument.

        Gets or sets name of the product.  # noqa: E501

        :param product_name: The product_name of this ServiceDocument.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_copyright(self):
        """Gets the product_copyright of this ServiceDocument.  # noqa: E501

        Gets or sets copyright notice.  # noqa: E501

        :return: The product_copyright of this ServiceDocument.  # noqa: E501
        :rtype: str
        """
        return self._product_copyright

    @product_copyright.setter
    def product_copyright(self, product_copyright):
        """Sets the product_copyright of this ServiceDocument.

        Gets or sets copyright notice.  # noqa: E501

        :param product_copyright: The product_copyright of this ServiceDocument.  # noqa: E501
        :type: str
        """

        self._product_copyright = product_copyright

    @property
    def product_version(self):
        """Gets the product_version of this ServiceDocument.  # noqa: E501

        Gets or sets stringified version number of this application's assembly.  # noqa: E501

        :return: The product_version of this ServiceDocument.  # noqa: E501
        :rtype: str
        """
        return self._product_version

    @product_version.setter
    def product_version(self, product_version):
        """Sets the product_version of this ServiceDocument.

        Gets or sets stringified version number of this application's assembly.  # noqa: E501

        :param product_version: The product_version of this ServiceDocument.  # noqa: E501
        :type: str
        """

        self._product_version = product_version

    @property
    def version(self):
        """Gets the version of this ServiceDocument.  # noqa: E501

        Gets or sets version number of the API; increments as API changes are released.  # noqa: E501

        :return: The version of this ServiceDocument.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceDocument.

        Gets or sets version number of the API; increments as API changes are released.  # noqa: E501

        :param version: The version of this ServiceDocument.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def resources(self):
        """Gets the resources of this ServiceDocument.  # noqa: E501

        Gets or sets list of resources within this Workspace.  # noqa: E501

        :return: The resources of this ServiceDocument.  # noqa: E501
        :rtype: ServiceDocumentResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ServiceDocument.

        Gets or sets list of resources within this Workspace.  # noqa: E501

        :param resources: The resources of this ServiceDocument.  # noqa: E501
        :type: ServiceDocumentResources
        """

        self._resources = resources

    @property
    def build_key(self):
        """Gets the build_key of this ServiceDocument.  # noqa: E501

        Gets or sets the BuildKey corresponding to the Bamboo build which created the installer.  # noqa: E501

        :return: The build_key of this ServiceDocument.  # noqa: E501
        :rtype: str
        """
        return self._build_key

    @build_key.setter
    def build_key(self, build_key):
        """Sets the build_key of this ServiceDocument.

        Gets or sets the BuildKey corresponding to the Bamboo build which created the installer.  # noqa: E501

        :param build_key: The build_key of this ServiceDocument.  # noqa: E501
        :type: str
        """

        self._build_key = build_key

    @property
    def commit_id(self):
        """Gets the commit_id of this ServiceDocument.  # noqa: E501

        Gets or sets the last commit which was included in the build.  # noqa: E501

        :return: The commit_id of this ServiceDocument.  # noqa: E501
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this ServiceDocument.

        Gets or sets the last commit which was included in the build.  # noqa: E501

        :param commit_id: The commit_id of this ServiceDocument.  # noqa: E501
        :type: str
        """

        self._commit_id = commit_id

    @property
    def control_plane_version_details(self):
        """Gets the control_plane_version_details of this ServiceDocument.  # noqa: E501

        Gets or sets Control Plane Version Details.  # noqa: E501

        :return: The control_plane_version_details of this ServiceDocument.  # noqa: E501
        :rtype: ControlPlaneVersionDetails
        """
        return self._control_plane_version_details

    @control_plane_version_details.setter
    def control_plane_version_details(self, control_plane_version_details):
        """Sets the control_plane_version_details of this ServiceDocument.

        Gets or sets Control Plane Version Details.  # noqa: E501

        :param control_plane_version_details: The control_plane_version_details of this ServiceDocument.  # noqa: E501
        :type: ControlPlaneVersionDetails
        """

        self._control_plane_version_details = control_plane_version_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceDocument):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceDocument):
            return True

        return self.to_dict() != other.to_dict()
