# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class UsersBatchesV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_uuid': 'str',
        'date_created': 'str',
        'batch_name': 'str',
        'batch_description': 'str',
        'batch_type': 'int',
        'organization_group_uuid': 'str',
        'created_by': 'str',
        'batch_status': 'int',
        'has_status_details': 'bool',
        'can_be_aborted': 'bool'
    }

    attribute_map = {
        'batch_uuid': 'batch_uuid',
        'date_created': 'date_created',
        'batch_name': 'batch_name',
        'batch_description': 'batch_description',
        'batch_type': 'batch_type',
        'organization_group_uuid': 'organization_group_uuid',
        'created_by': 'created_by',
        'batch_status': 'batch_status',
        'has_status_details': 'has_status_details',
        'can_be_aborted': 'can_be_aborted'
    }

    def __init__(self, batch_uuid=None, date_created=None, batch_name=None, batch_description=None, batch_type=None, organization_group_uuid=None, created_by=None, batch_status=None, has_status_details=None, can_be_aborted=None, _configuration=None):  # noqa: E501
        """UsersBatchesV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._batch_uuid = None
        self._date_created = None
        self._batch_name = None
        self._batch_description = None
        self._batch_type = None
        self._organization_group_uuid = None
        self._created_by = None
        self._batch_status = None
        self._has_status_details = None
        self._can_be_aborted = None
        self.discriminator = None

        if batch_uuid is not None:
            self.batch_uuid = batch_uuid
        if date_created is not None:
            self.date_created = date_created
        if batch_name is not None:
            self.batch_name = batch_name
        if batch_description is not None:
            self.batch_description = batch_description
        if batch_type is not None:
            self.batch_type = batch_type
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if created_by is not None:
            self.created_by = created_by
        if batch_status is not None:
            self.batch_status = batch_status
        if has_status_details is not None:
            self.has_status_details = has_status_details
        if can_be_aborted is not None:
            self.can_be_aborted = can_be_aborted

    @property
    def batch_uuid(self):
        """Gets the batch_uuid of this UsersBatchesV1Model.  # noqa: E501

        Batch UUID.  # noqa: E501

        :return: The batch_uuid of this UsersBatchesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._batch_uuid

    @batch_uuid.setter
    def batch_uuid(self, batch_uuid):
        """Sets the batch_uuid of this UsersBatchesV1Model.

        Batch UUID.  # noqa: E501

        :param batch_uuid: The batch_uuid of this UsersBatchesV1Model.  # noqa: E501
        :type: str
        """

        self._batch_uuid = batch_uuid

    @property
    def date_created(self):
        """Gets the date_created of this UsersBatchesV1Model.  # noqa: E501

        Date the batch was created.  # noqa: E501

        :return: The date_created of this UsersBatchesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this UsersBatchesV1Model.

        Date the batch was created.  # noqa: E501

        :param date_created: The date_created of this UsersBatchesV1Model.  # noqa: E501
        :type: str
        """

        self._date_created = date_created

    @property
    def batch_name(self):
        """Gets the batch_name of this UsersBatchesV1Model.  # noqa: E501

        Batch name  # noqa: E501

        :return: The batch_name of this UsersBatchesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._batch_name

    @batch_name.setter
    def batch_name(self, batch_name):
        """Sets the batch_name of this UsersBatchesV1Model.

        Batch name  # noqa: E501

        :param batch_name: The batch_name of this UsersBatchesV1Model.  # noqa: E501
        :type: str
        """

        self._batch_name = batch_name

    @property
    def batch_description(self):
        """Gets the batch_description of this UsersBatchesV1Model.  # noqa: E501

        Batch description.  # noqa: E501

        :return: The batch_description of this UsersBatchesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._batch_description

    @batch_description.setter
    def batch_description(self, batch_description):
        """Sets the batch_description of this UsersBatchesV1Model.

        Batch description.  # noqa: E501

        :param batch_description: The batch_description of this UsersBatchesV1Model.  # noqa: E501
        :type: str
        """

        self._batch_description = batch_description

    @property
    def batch_type(self):
        """Gets the batch_type of this UsersBatchesV1Model.  # noqa: E501

        Batch type.  # noqa: E501

        :return: The batch_type of this UsersBatchesV1Model.  # noqa: E501
        :rtype: int
        """
        return self._batch_type

    @batch_type.setter
    def batch_type(self, batch_type):
        """Sets the batch_type of this UsersBatchesV1Model.

        Batch type.  # noqa: E501

        :param batch_type: The batch_type of this UsersBatchesV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  # noqa: E501
        if (self._configuration.client_side_validation and
                batch_type not in allowed_values):
            raise ValueError(
                "Invalid value for `batch_type` ({0}), must be one of {1}"  # noqa: E501
                .format(batch_type, allowed_values)
            )

        self._batch_type = batch_type

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this UsersBatchesV1Model.  # noqa: E501

        Organization Group UUID.  # noqa: E501

        :return: The organization_group_uuid of this UsersBatchesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this UsersBatchesV1Model.

        Organization Group UUID.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this UsersBatchesV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def created_by(self):
        """Gets the created_by of this UsersBatchesV1Model.  # noqa: E501

        Created by Administrator user.  # noqa: E501

        :return: The created_by of this UsersBatchesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UsersBatchesV1Model.

        Created by Administrator user.  # noqa: E501

        :param created_by: The created_by of this UsersBatchesV1Model.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def batch_status(self):
        """Gets the batch_status of this UsersBatchesV1Model.  # noqa: E501

        Batch status.  # noqa: E501

        :return: The batch_status of this UsersBatchesV1Model.  # noqa: E501
        :rtype: int
        """
        return self._batch_status

    @batch_status.setter
    def batch_status(self, batch_status):
        """Sets the batch_status of this UsersBatchesV1Model.

        Batch status.  # noqa: E501

        :param batch_status: The batch_status of this UsersBatchesV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if (self._configuration.client_side_validation and
                batch_status not in allowed_values):
            raise ValueError(
                "Invalid value for `batch_status` ({0}), must be one of {1}"  # noqa: E501
                .format(batch_status, allowed_values)
            )

        self._batch_status = batch_status

    @property
    def has_status_details(self):
        """Gets the has_status_details of this UsersBatchesV1Model.  # noqa: E501

        Indicates whether batch status has details (error and warnings) or not.  # noqa: E501

        :return: The has_status_details of this UsersBatchesV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._has_status_details

    @has_status_details.setter
    def has_status_details(self, has_status_details):
        """Sets the has_status_details of this UsersBatchesV1Model.

        Indicates whether batch status has details (error and warnings) or not.  # noqa: E501

        :param has_status_details: The has_status_details of this UsersBatchesV1Model.  # noqa: E501
        :type: bool
        """

        self._has_status_details = has_status_details

    @property
    def can_be_aborted(self):
        """Gets the can_be_aborted of this UsersBatchesV1Model.  # noqa: E501

        Indicates whether batch can be aborted or not.  # noqa: E501

        :return: The can_be_aborted of this UsersBatchesV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_aborted

    @can_be_aborted.setter
    def can_be_aborted(self, can_be_aborted):
        """Sets the can_be_aborted of this UsersBatchesV1Model.

        Indicates whether batch can be aborted or not.  # noqa: E501

        :param can_be_aborted: The can_be_aborted of this UsersBatchesV1Model.  # noqa: E501
        :type: bool
        """

        self._can_be_aborted = can_be_aborted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersBatchesV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersBatchesV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsersBatchesV1Model):
            return True

        return self.to_dict() != other.to_dict()
