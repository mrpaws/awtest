# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceContentInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_name': 'str',
        'status': 'int',
        'download_priority': 'int',
        'deploy_mode': 'int',
        'content_type': 'int',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'content_name': 'ContentName',
        'status': 'Status',
        'download_priority': 'DownloadPriority',
        'deploy_mode': 'DeployMode',
        'content_type': 'ContentType',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, content_name=None, status=None, download_priority=None, deploy_mode=None, content_type=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceContentInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._content_name = None
        self._status = None
        self._download_priority = None
        self._deploy_mode = None
        self._content_type = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if content_name is not None:
            self.content_name = content_name
        if status is not None:
            self.status = status
        if download_priority is not None:
            self.download_priority = download_priority
        if deploy_mode is not None:
            self.deploy_mode = deploy_mode
        if content_type is not None:
            self.content_type = content_type
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def content_name(self):
        """Gets the content_name of this DeviceContentInfo.  # noqa: E501

        Gets or sets the name of application.  # noqa: E501

        :return: The content_name of this DeviceContentInfo.  # noqa: E501
        :rtype: str
        """
        return self._content_name

    @content_name.setter
    def content_name(self, content_name):
        """Sets the content_name of this DeviceContentInfo.

        Gets or sets the name of application.  # noqa: E501

        :param content_name: The content_name of this DeviceContentInfo.  # noqa: E501
        :type: str
        """

        self._content_name = content_name

    @property
    def status(self):
        """Gets the status of this DeviceContentInfo.  # noqa: E501

        Gets or sets content status for the device.  # noqa: E501

        :return: The status of this DeviceContentInfo.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceContentInfo.

        Gets or sets content status for the device.  # noqa: E501

        :param status: The status of this DeviceContentInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def download_priority(self):
        """Gets the download_priority of this DeviceContentInfo.  # noqa: E501

        Gets or sets download Priority of the content.  # noqa: E501

        :return: The download_priority of this DeviceContentInfo.  # noqa: E501
        :rtype: int
        """
        return self._download_priority

    @download_priority.setter
    def download_priority(self, download_priority):
        """Sets the download_priority of this DeviceContentInfo.

        Gets or sets download Priority of the content.  # noqa: E501

        :param download_priority: The download_priority of this DeviceContentInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                download_priority not in allowed_values):
            raise ValueError(
                "Invalid value for `download_priority` ({0}), must be one of {1}"  # noqa: E501
                .format(download_priority, allowed_values)
            )

        self._download_priority = download_priority

    @property
    def deploy_mode(self):
        """Gets the deploy_mode of this DeviceContentInfo.  # noqa: E501

        Gets or sets deploy Mode.  # noqa: E501

        :return: The deploy_mode of this DeviceContentInfo.  # noqa: E501
        :rtype: int
        """
        return self._deploy_mode

    @deploy_mode.setter
    def deploy_mode(self, deploy_mode):
        """Sets the deploy_mode of this DeviceContentInfo.

        Gets or sets deploy Mode.  # noqa: E501

        :param deploy_mode: The deploy_mode of this DeviceContentInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                deploy_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `deploy_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(deploy_mode, allowed_values)
            )

        self._deploy_mode = deploy_mode

    @property
    def content_type(self):
        """Gets the content_type of this DeviceContentInfo.  # noqa: E501

        Gets or sets content type of the.  # noqa: E501

        :return: The content_type of this DeviceContentInfo.  # noqa: E501
        :rtype: int
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DeviceContentInfo.

        Gets or sets content type of the.  # noqa: E501

        :param content_type: The content_type of this DeviceContentInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34]  # noqa: E501
        if (self._configuration.client_side_validation and
                content_type not in allowed_values):
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def id(self):
        """Gets the id of this DeviceContentInfo.  # noqa: E501


        :return: The id of this DeviceContentInfo.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceContentInfo.


        :param id: The id of this DeviceContentInfo.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceContentInfo.  # noqa: E501


        :return: The uuid of this DeviceContentInfo.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceContentInfo.


        :param uuid: The uuid of this DeviceContentInfo.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceContentInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceContentInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceContentInfo):
            return True

        return self.to_dict() != other.to_dict()
