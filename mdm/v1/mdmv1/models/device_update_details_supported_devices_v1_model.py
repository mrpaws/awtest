# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceUpdateDetailsSupportedDevicesV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supported_devices': 'list[str]',
        'uuid': 'str',
        'name': 'str',
        'update_type': 'str',
        'version': 'str',
        'release_date': 'datetime',
        'expiration_date': 'datetime',
        'available_for_install': 'bool',
        'is_paused': 'bool',
        'external_key': 'str',
        'description': 'str'
    }

    attribute_map = {
        'supported_devices': 'supported_devices',
        'uuid': 'uuid',
        'name': 'name',
        'update_type': 'update_type',
        'version': 'version',
        'release_date': 'release_date',
        'expiration_date': 'expiration_date',
        'available_for_install': 'available_for_install',
        'is_paused': 'is_paused',
        'external_key': 'external_key',
        'description': 'description'
    }

    def __init__(self, supported_devices=None, uuid=None, name=None, update_type=None, version=None, release_date=None, expiration_date=None, available_for_install=None, is_paused=None, external_key=None, description=None, _configuration=None):  # noqa: E501
        """DeviceUpdateDetailsSupportedDevicesV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._supported_devices = None
        self._uuid = None
        self._name = None
        self._update_type = None
        self._version = None
        self._release_date = None
        self._expiration_date = None
        self._available_for_install = None
        self._is_paused = None
        self._external_key = None
        self._description = None
        self.discriminator = None

        if supported_devices is not None:
            self.supported_devices = supported_devices
        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if update_type is not None:
            self.update_type = update_type
        if version is not None:
            self.version = version
        if release_date is not None:
            self.release_date = release_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if available_for_install is not None:
            self.available_for_install = available_for_install
        if is_paused is not None:
            self.is_paused = is_paused
        if external_key is not None:
            self.external_key = external_key
        if description is not None:
            self.description = description

    @property
    def supported_devices(self):
        """Gets the supported_devices of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets the list of device types that support the update.  # noqa: E501

        :return: The supported_devices of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_devices

    @supported_devices.setter
    def supported_devices(self, supported_devices):
        """Sets the supported_devices of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets the list of device types that support the update.  # noqa: E501

        :param supported_devices: The supported_devices of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: list[str]
        """

        self._supported_devices = supported_devices

    @property
    def uuid(self):
        """Gets the uuid of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets the device update UUID.  # noqa: E501

        :return: The uuid of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets the device update UUID.  # noqa: E501

        :param uuid: The uuid of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets the name of the update.  # noqa: E501

        :return: The name of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets the name of the update.  # noqa: E501

        :param name: The name of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def update_type(self):
        """Gets the update_type of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets the type of the update.  # noqa: E501

        :return: The update_type of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets the type of the update.  # noqa: E501

        :param update_type: The update_type of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: str
        """

        self._update_type = update_type

    @property
    def version(self):
        """Gets the version of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets the version of the update.  # noqa: E501

        :return: The version of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets the version of the update.  # noqa: E501

        :param version: The version of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def release_date(self):
        """Gets the release_date of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets the release date of the update.  # noqa: E501

        :return: The release_date of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets the release date of the update.  # noqa: E501

        :param release_date: The release_date of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: datetime
        """

        self._release_date = release_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets the expiration date of the update.  # noqa: E501

        :return: The expiration_date of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets the expiration date of the update.  # noqa: E501

        :param expiration_date: The expiration_date of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def available_for_install(self):
        """Gets the available_for_install of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets a value indicating whether the update is available for installing.  # noqa: E501

        :return: The available_for_install of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._available_for_install

    @available_for_install.setter
    def available_for_install(self, available_for_install):
        """Sets the available_for_install of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets a value indicating whether the update is available for installing.  # noqa: E501

        :param available_for_install: The available_for_install of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: bool
        """

        self._available_for_install = available_for_install

    @property
    def is_paused(self):
        """Gets the is_paused of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets a value indicating whether the device update is currently paused.  # noqa: E501

        :return: The is_paused of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets a value indicating whether the device update is currently paused.  # noqa: E501

        :param is_paused: The is_paused of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: bool
        """

        self._is_paused = is_paused

    @property
    def external_key(self):
        """Gets the external_key of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets the external key for the device update.  # noqa: E501

        :return: The external_key of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._external_key

    @external_key.setter
    def external_key(self, external_key):
        """Sets the external_key of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets the external key for the device update.  # noqa: E501

        :param external_key: The external_key of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: str
        """

        self._external_key = external_key

    @property
    def description(self):
        """Gets the description of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501

        Gets or sets the external key for the device update.  # noqa: E501

        :return: The description of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceUpdateDetailsSupportedDevicesV1Model.

        Gets or sets the external key for the device update.  # noqa: E501

        :param description: The description of this DeviceUpdateDetailsSupportedDevicesV1Model.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceUpdateDetailsSupportedDevicesV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceUpdateDetailsSupportedDevicesV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceUpdateDetailsSupportedDevicesV1Model):
            return True

        return self.to_dict() != other.to_dict()
