# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class SpecifyScenarioDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_to_be_tested': 'str',
        'test_type': 'str',
        'remove_file_after_test': 'str'
    }

    attribute_map = {
        'file_to_be_tested': 'FileToBeTested',
        'test_type': 'TestType',
        'remove_file_after_test': 'RemoveFileAfterTest'
    }

    def __init__(self, file_to_be_tested=None, test_type=None, remove_file_after_test=None, _configuration=None):  # noqa: E501
        """SpecifyScenarioDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._file_to_be_tested = None
        self._test_type = None
        self._remove_file_after_test = None
        self.discriminator = None

        if file_to_be_tested is not None:
            self.file_to_be_tested = file_to_be_tested
        if test_type is not None:
            self.test_type = test_type
        if remove_file_after_test is not None:
            self.remove_file_after_test = remove_file_after_test

    @property
    def file_to_be_tested(self):
        """Gets the file_to_be_tested of this SpecifyScenarioDetails.  # noqa: E501

        Gets or sets full path and name of test file.  # noqa: E501

        :return: The file_to_be_tested of this SpecifyScenarioDetails.  # noqa: E501
        :rtype: str
        """
        return self._file_to_be_tested

    @file_to_be_tested.setter
    def file_to_be_tested(self, file_to_be_tested):
        """Sets the file_to_be_tested of this SpecifyScenarioDetails.

        Gets or sets full path and name of test file.  # noqa: E501

        :param file_to_be_tested: The file_to_be_tested of this SpecifyScenarioDetails.  # noqa: E501
        :type: str
        """

        self._file_to_be_tested = file_to_be_tested

    @property
    def test_type(self):
        """Gets the test_type of this SpecifyScenarioDetails.  # noqa: E501

        Gets or sets type of test file to be run on the device.The two scenarios are:  File Exists - A designated file on the device must exist in order to evaluate to TRUE.  File Does Not Exist - If the specified file does not exist on the device, the condition will evaluate to TRUE.  # noqa: E501

        :return: The test_type of this SpecifyScenarioDetails.  # noqa: E501
        :rtype: str
        """
        return self._test_type

    @test_type.setter
    def test_type(self, test_type):
        """Sets the test_type of this SpecifyScenarioDetails.

        Gets or sets type of test file to be run on the device.The two scenarios are:  File Exists - A designated file on the device must exist in order to evaluate to TRUE.  File Does Not Exist - If the specified file does not exist on the device, the condition will evaluate to TRUE.  # noqa: E501

        :param test_type: The test_type of this SpecifyScenarioDetails.  # noqa: E501
        :type: str
        """

        self._test_type = test_type

    @property
    def remove_file_after_test(self):
        """Gets the remove_file_after_test of this SpecifyScenarioDetails.  # noqa: E501

        Gets or sets whether to remove the File, once the condition evaluates to TRUE.  # noqa: E501

        :return: The remove_file_after_test of this SpecifyScenarioDetails.  # noqa: E501
        :rtype: str
        """
        return self._remove_file_after_test

    @remove_file_after_test.setter
    def remove_file_after_test(self, remove_file_after_test):
        """Sets the remove_file_after_test of this SpecifyScenarioDetails.

        Gets or sets whether to remove the File, once the condition evaluates to TRUE.  # noqa: E501

        :param remove_file_after_test: The remove_file_after_test of this SpecifyScenarioDetails.  # noqa: E501
        :type: str
        """

        self._remove_file_after_test = remove_file_after_test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecifyScenarioDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecifyScenarioDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpecifyScenarioDetails):
            return True

        return self.to_dict() != other.to_dict()
