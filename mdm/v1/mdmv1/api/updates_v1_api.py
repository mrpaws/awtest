# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class UpdatesV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def updates_v1_bulk_update_device_update_deployment(self, update_uuid, organization_group_uuid, update_deployment_rankings, action, **kwargs):  # noqa: E501
        """New - Bulk update device update deployments based on custom action.  # noqa: E501

        Bulk updates device update deployments based on custom action for a specific device update at the deployment Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_bulk_update_device_update_deployment(update_uuid, organization_group_uuid, update_deployment_rankings, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :param list[DeviceUpdateDeploymentRankingV1Model] update_deployment_rankings: Contains a list of device update deployment rankings.(Required) (required)
        :param str action: Custom action on deployments. Possible values [update-ranking] update-ranking will update all the rankings provided for device update deployments belonging to a specific device update and Organization Group.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_bulk_update_device_update_deployment_with_http_info(update_uuid, organization_group_uuid, update_deployment_rankings, action, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_bulk_update_device_update_deployment_with_http_info(update_uuid, organization_group_uuid, update_deployment_rankings, action, **kwargs)  # noqa: E501
            return data

    def updates_v1_bulk_update_device_update_deployment_with_http_info(self, update_uuid, organization_group_uuid, update_deployment_rankings, action, **kwargs):  # noqa: E501
        """New - Bulk update device update deployments based on custom action.  # noqa: E501

        Bulk updates device update deployments based on custom action for a specific device update at the deployment Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_bulk_update_device_update_deployment_with_http_info(update_uuid, organization_group_uuid, update_deployment_rankings, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :param list[DeviceUpdateDeploymentRankingV1Model] update_deployment_rankings: Contains a list of device update deployment rankings.(Required) (required)
        :param str action: Custom action on deployments. Possible values [update-ranking] update-ranking will update all the rankings provided for device update deployments belonging to a specific device update and Organization Group.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_uuid', 'organization_group_uuid', 'update_deployment_rankings', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_bulk_update_device_update_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_uuid' is set
        if self.api_client.client_side_validation and ('update_uuid' not in params or
                                                       params['update_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_uuid` when calling `updates_v1_bulk_update_device_update_deployment`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `updates_v1_bulk_update_device_update_deployment`")  # noqa: E501
        # verify the required parameter 'update_deployment_rankings' is set
        if self.api_client.client_side_validation and ('update_deployment_rankings' not in params or
                                                       params['update_deployment_rankings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_deployment_rankings` when calling `updates_v1_bulk_update_device_update_deployment`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in params or
                                                       params['action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action` when calling `updates_v1_bulk_update_device_update_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'update_uuid' in params:
            path_params['updateUuid'] = params['update_uuid']  # noqa: E501
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_deployment_rankings' in params:
            body_params = params['update_deployment_rankings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/{updateUuid}/groups/{organizationGroupUuid}/deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_create_update_deployment(self, update_uuid, organization_group_uuid, update_deployment, **kwargs):  # noqa: E501
        """New - Creates a deployment for a specific device update.  # noqa: E501

        Creates a deployment for a specific device update by specifying the deployment parameters and notification preferences for the deployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_create_update_deployment(update_uuid, organization_group_uuid, update_deployment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :param DeviceUpdateDeploymentBaseV1Model update_deployment: Contains the deployment parameters and notification preferences for the deployment.(Required) (required)
        :return: BaseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_create_update_deployment_with_http_info(update_uuid, organization_group_uuid, update_deployment, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_create_update_deployment_with_http_info(update_uuid, organization_group_uuid, update_deployment, **kwargs)  # noqa: E501
            return data

    def updates_v1_create_update_deployment_with_http_info(self, update_uuid, organization_group_uuid, update_deployment, **kwargs):  # noqa: E501
        """New - Creates a deployment for a specific device update.  # noqa: E501

        Creates a deployment for a specific device update by specifying the deployment parameters and notification preferences for the deployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_create_update_deployment_with_http_info(update_uuid, organization_group_uuid, update_deployment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :param DeviceUpdateDeploymentBaseV1Model update_deployment: Contains the deployment parameters and notification preferences for the deployment.(Required) (required)
        :return: BaseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_uuid', 'organization_group_uuid', 'update_deployment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_create_update_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_uuid' is set
        if self.api_client.client_side_validation and ('update_uuid' not in params or
                                                       params['update_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_uuid` when calling `updates_v1_create_update_deployment`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `updates_v1_create_update_deployment`")  # noqa: E501
        # verify the required parameter 'update_deployment' is set
        if self.api_client.client_side_validation and ('update_deployment' not in params or
                                                       params['update_deployment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_deployment` when calling `updates_v1_create_update_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'update_uuid' in params:
            path_params['updateUuid'] = params['update_uuid']  # noqa: E501
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_deployment' in params:
            body_params = params['update_deployment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/{updateUuid}/groups/{organizationGroupUuid}/deployment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_delete_device_update_deployment(self, uuid, **kwargs):  # noqa: E501
        """New - Deletes the device update deployment.  # noqa: E501

        Deletes the device update deployment along with deployment parameters and notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_delete_device_update_deployment(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Deployment UUID(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_delete_device_update_deployment_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_delete_device_update_deployment_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def updates_v1_delete_device_update_deployment_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Deletes the device update deployment.  # noqa: E501

        Deletes the device update deployment along with deployment parameters and notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_delete_device_update_deployment_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Deployment UUID(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_delete_device_update_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `updates_v1_delete_device_update_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/deployments/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_devices_update_action(self, update_uuid, organization_group_uuid, action, **kwargs):  # noqa: E501
        """New - Starts or stops the roll out of the device update for the specific Organization Group.  # noqa: E501

        START will serve the purpose of resuming the roll out of updates if it has been stopped previously.  STOP will pause any further commands being delivered for a specific update in specific Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_devices_update_action(update_uuid, organization_group_uuid, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID (Required) (required)
        :param str organization_group_uuid: Organization Group UUID (Required) (required)
        :param object action: Action for device update. [START, STOP] are accepted values. (Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_devices_update_action_with_http_info(update_uuid, organization_group_uuid, action, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_devices_update_action_with_http_info(update_uuid, organization_group_uuid, action, **kwargs)  # noqa: E501
            return data

    def updates_v1_devices_update_action_with_http_info(self, update_uuid, organization_group_uuid, action, **kwargs):  # noqa: E501
        """New - Starts or stops the roll out of the device update for the specific Organization Group.  # noqa: E501

        START will serve the purpose of resuming the roll out of updates if it has been stopped previously.  STOP will pause any further commands being delivered for a specific update in specific Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_devices_update_action_with_http_info(update_uuid, organization_group_uuid, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID (Required) (required)
        :param str organization_group_uuid: Organization Group UUID (Required) (required)
        :param object action: Action for device update. [START, STOP] are accepted values. (Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_uuid', 'organization_group_uuid', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_devices_update_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_uuid' is set
        if self.api_client.client_side_validation and ('update_uuid' not in params or
                                                       params['update_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_uuid` when calling `updates_v1_devices_update_action`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `updates_v1_devices_update_action`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in params or
                                                       params['action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action` when calling `updates_v1_devices_update_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'update_uuid' in params:
            path_params['updateUuid'] = params['update_uuid']  # noqa: E501
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/{updateUuid}/groups/{organizationGroupUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_get_count_of_device_status(self, update_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the breakdown of device statuses for a given device update at the specified Organization Group  # noqa: E501

        Gets the breakdown of the different device statuses (Idle, Downloading, Installing, DownloadRequiresComputer etc.) for the device update at the specified Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_count_of_device_status(update_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :return: DeviceUpdateCountDeviceStatusV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_get_count_of_device_status_with_http_info(update_uuid, organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_get_count_of_device_status_with_http_info(update_uuid, organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def updates_v1_get_count_of_device_status_with_http_info(self, update_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the breakdown of device statuses for a given device update at the specified Organization Group  # noqa: E501

        Gets the breakdown of the different device statuses (Idle, Downloading, Installing, DownloadRequiresComputer etc.) for the device update at the specified Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_count_of_device_status_with_http_info(update_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :return: DeviceUpdateCountDeviceStatusV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_uuid', 'organization_group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_get_count_of_device_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_uuid' is set
        if self.api_client.client_side_validation and ('update_uuid' not in params or
                                                       params['update_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_uuid` when calling `updates_v1_get_count_of_device_status`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `updates_v1_get_count_of_device_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'update_uuid' in params:
            path_params['updateUuid'] = params['update_uuid']  # noqa: E501
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/{updateUuid}/groups/{organizationGroupUuid}/device-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceUpdateCountDeviceStatusV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_get_deployments_by_device_update(self, uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get deployments for a device update at a specific Organization Group.  # noqa: E501

        Retrieves a list of deployments for a specific device update at a specific Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_deployments_by_device_update(uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Update UUID(Required) (required)
        :param object organization_group_uuid: Organization Group UUID(Required) (required)
        :return: list[DeploymentV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_get_deployments_by_device_update_with_http_info(uuid, organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_get_deployments_by_device_update_with_http_info(uuid, organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def updates_v1_get_deployments_by_device_update_with_http_info(self, uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get deployments for a device update at a specific Organization Group.  # noqa: E501

        Retrieves a list of deployments for a specific device update at a specific Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_deployments_by_device_update_with_http_info(uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Update UUID(Required) (required)
        :param object organization_group_uuid: Organization Group UUID(Required) (required)
        :return: list[DeploymentV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'organization_group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_get_deployments_by_device_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `updates_v1_get_deployments_by_device_update`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `updates_v1_get_deployments_by_device_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'organization_group_uuid' in params:
            query_params.append(('organization_group_uuid', params['organization_group_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/{uuid}/deployments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeploymentV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_get_device_readiness(self, update_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets device readiness for a given device update at the specified Organization Group.  # noqa: E501

        Gets the count of eligible devices, non-eligible devices, devices already on this version, and devices on a higher version for the device update at the specified Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_device_readiness(update_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :return: DeviceUpdateDeviceReadinessV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_get_device_readiness_with_http_info(update_uuid, organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_get_device_readiness_with_http_info(update_uuid, organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def updates_v1_get_device_readiness_with_http_info(self, update_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets device readiness for a given device update at the specified Organization Group.  # noqa: E501

        Gets the count of eligible devices, non-eligible devices, devices already on this version, and devices on a higher version for the device update at the specified Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_device_readiness_with_http_info(update_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :return: DeviceUpdateDeviceReadinessV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_uuid', 'organization_group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_get_device_readiness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_uuid' is set
        if self.api_client.client_side_validation and ('update_uuid' not in params or
                                                       params['update_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_uuid` when calling `updates_v1_get_device_readiness`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `updates_v1_get_device_readiness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'update_uuid' in params:
            path_params['updateUuid'] = params['update_uuid']  # noqa: E501
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/{updateUuid}/groups/{organizationGroupUuid}/device-readiness', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceUpdateDeviceReadinessV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_get_device_update_deployment_details(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the device update deployment details.  # noqa: E501

        Gets the device update deployment details along with deployment parameters and notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_device_update_deployment_details(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Deployment UUID(Required) (required)
        :return: DeviceUpdateDeploymentCreateV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_get_device_update_deployment_details_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_get_device_update_deployment_details_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def updates_v1_get_device_update_deployment_details_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the device update deployment details.  # noqa: E501

        Gets the device update deployment details along with deployment parameters and notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_device_update_deployment_details_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Deployment UUID(Required) (required)
        :return: DeviceUpdateDeploymentCreateV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_get_device_update_deployment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `updates_v1_get_device_update_deployment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/deployments/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceUpdateDeploymentCreateV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_get_device_update_status_by_search_parameters(self, update_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the device update status for all the assigned devices by search parameters  # noqa: E501

        Retrieves the list of all devices assigned to an update with the update status and failure reason (if any) in the specified Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_device_update_status_by_search_parameters(update_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :param str device_name: Filter records based on the device name.
        :param str user: Filter records based on the device user. Accepted values are user's first name or last name.
        :param object status: Filter records based on update status. Accepted values are DOWNLOADING, DOWNLOAD_FAILED, INSTALLING, INSTALL_FAILED, DOWNLOAD_COMPLETE, INSTALL_COMPLETE, NOT_STARTED, IDLE
        :param object reason: Filter records based on the reason for update status. Accepted values are IDLE, DOWNLOADING, DOWNLOAD_FAILED, DOWNLOAD_REQUIRES_COMPUTER, DOWNLOAD_INSUFFICIENT_SPACE, DOWNLOAD_INSUFFICIENT_POWER, DOWNLOAD_INSUFFICIENT_NETWORK, INSTALLING, INSTALL_INSUFFICIENT_SPACE, INSTALL_INSUFFICIENT_POWER, INSTALL_PHONE_CALL_INPROGRESS, INSTALL_FAILED, DOWNLOAD_COMPLETE, INSTALL_COMPLETE, NOT_STARTED
        :param int page: Page number which will be fetched. 1 based index. Default 1.
        :param int page_size: Maximum number of results to be returned in one page. Default 50.
        :return: DeviceUpdateStatusPagedSearchResultsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_get_device_update_status_by_search_parameters_with_http_info(update_uuid, organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_get_device_update_status_by_search_parameters_with_http_info(update_uuid, organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def updates_v1_get_device_update_status_by_search_parameters_with_http_info(self, update_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the device update status for all the assigned devices by search parameters  # noqa: E501

        Retrieves the list of all devices assigned to an update with the update status and failure reason (if any) in the specified Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_device_update_status_by_search_parameters_with_http_info(update_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str update_uuid: Device update UUID(Required) (required)
        :param str organization_group_uuid: Organization Group UUID(Required) (required)
        :param str device_name: Filter records based on the device name.
        :param str user: Filter records based on the device user. Accepted values are user's first name or last name.
        :param object status: Filter records based on update status. Accepted values are DOWNLOADING, DOWNLOAD_FAILED, INSTALLING, INSTALL_FAILED, DOWNLOAD_COMPLETE, INSTALL_COMPLETE, NOT_STARTED, IDLE
        :param object reason: Filter records based on the reason for update status. Accepted values are IDLE, DOWNLOADING, DOWNLOAD_FAILED, DOWNLOAD_REQUIRES_COMPUTER, DOWNLOAD_INSUFFICIENT_SPACE, DOWNLOAD_INSUFFICIENT_POWER, DOWNLOAD_INSUFFICIENT_NETWORK, INSTALLING, INSTALL_INSUFFICIENT_SPACE, INSTALL_INSUFFICIENT_POWER, INSTALL_PHONE_CALL_INPROGRESS, INSTALL_FAILED, DOWNLOAD_COMPLETE, INSTALL_COMPLETE, NOT_STARTED
        :param int page: Page number which will be fetched. 1 based index. Default 1.
        :param int page_size: Maximum number of results to be returned in one page. Default 50.
        :return: DeviceUpdateStatusPagedSearchResultsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_uuid', 'organization_group_uuid', 'device_name', 'user', 'status', 'reason', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_get_device_update_status_by_search_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_uuid' is set
        if self.api_client.client_side_validation and ('update_uuid' not in params or
                                                       params['update_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_uuid` when calling `updates_v1_get_device_update_status_by_search_parameters`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `updates_v1_get_device_update_status_by_search_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'update_uuid' in params:
            path_params['updateUuid'] = params['update_uuid']  # noqa: E501
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'device_name' in params:
            query_params.append(('device_name', params['device_name']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/{updateUuid}/groups/{organizationGroupUuid}/update-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceUpdateStatusPagedSearchResultsV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_get_device_updates_by_search_parameters(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get device updates by search parameters  # noqa: E501

        Retrieve a list of all available device updates based on specified search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_device_updates_by_search_parameters(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object organization_group_uuid: Organization Group UUID(Required) (required)
        :param object platform: Platform name Ex. Apple, AppleOSX, AppleTV.
        :param int page: Page number which will be fetched. 1 based index. Default 1.
        :param int page_size: Maximum number of results to be returned in one page. Default 50.
        :param str update_name: Filter records based on the update name.
        :param str version: Filter records based on the update version.
        :param object release_date: Filter records based on the update release date. Accepted values are LastSevenDays, LastThirtyDays, LastThreeMonths, LastSixMonths, Custom
        :param object expiration_date: Filter records based on the update expiration date. Accepted values are NextSevenDays, NextThirtyDays, NextThreeMonths, NextSixMonths, Custom
        :param datetime custom_release_start_date: Filter records starting from custom release start date. Example formats are \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\"
        :param datetime custom_release_end_date: Filter records starting from custom release end date. Example formats are \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\"
        :param datetime custom_expiry_start_date: Filter records starting from custom expiry start date. Example formats are \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\"
        :param datetime custom_expiry_end_date: Filter records starting from custom expiry end date. Example formats are \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\"
        :param bool update_available: Filter records based on the update status.
        :return: DeviceUpdatePagedSearchResultsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_get_device_updates_by_search_parameters_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_get_device_updates_by_search_parameters_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def updates_v1_get_device_updates_by_search_parameters_with_http_info(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get device updates by search parameters  # noqa: E501

        Retrieve a list of all available device updates based on specified search parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_device_updates_by_search_parameters_with_http_info(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object organization_group_uuid: Organization Group UUID(Required) (required)
        :param object platform: Platform name Ex. Apple, AppleOSX, AppleTV.
        :param int page: Page number which will be fetched. 1 based index. Default 1.
        :param int page_size: Maximum number of results to be returned in one page. Default 50.
        :param str update_name: Filter records based on the update name.
        :param str version: Filter records based on the update version.
        :param object release_date: Filter records based on the update release date. Accepted values are LastSevenDays, LastThirtyDays, LastThreeMonths, LastSixMonths, Custom
        :param object expiration_date: Filter records based on the update expiration date. Accepted values are NextSevenDays, NextThirtyDays, NextThreeMonths, NextSixMonths, Custom
        :param datetime custom_release_start_date: Filter records starting from custom release start date. Example formats are \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\"
        :param datetime custom_release_end_date: Filter records starting from custom release end date. Example formats are \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\"
        :param datetime custom_expiry_start_date: Filter records starting from custom expiry start date. Example formats are \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\"
        :param datetime custom_expiry_end_date: Filter records starting from custom expiry end date. Example formats are \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\"
        :param bool update_available: Filter records based on the update status.
        :return: DeviceUpdatePagedSearchResultsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'platform', 'page', 'page_size', 'update_name', 'version', 'release_date', 'expiration_date', 'custom_release_start_date', 'custom_release_end_date', 'custom_expiry_start_date', 'custom_expiry_end_date', 'update_available']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_get_device_updates_by_search_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `updates_v1_get_device_updates_by_search_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organization_group_uuid' in params:
            query_params.append(('organization_group_uuid', params['organization_group_uuid']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'update_name' in params:
            query_params.append(('update_name', params['update_name']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'release_date' in params:
            query_params.append(('release_date', params['release_date']))  # noqa: E501
        if 'expiration_date' in params:
            query_params.append(('expiration_date', params['expiration_date']))  # noqa: E501
        if 'custom_release_start_date' in params:
            query_params.append(('custom_release_start_date', params['custom_release_start_date']))  # noqa: E501
        if 'custom_release_end_date' in params:
            query_params.append(('custom_release_end_date', params['custom_release_end_date']))  # noqa: E501
        if 'custom_expiry_start_date' in params:
            query_params.append(('custom_expiry_start_date', params['custom_expiry_start_date']))  # noqa: E501
        if 'custom_expiry_end_date' in params:
            query_params.append(('custom_expiry_end_date', params['custom_expiry_end_date']))  # noqa: E501
        if 'update_available' in params:
            query_params.append(('update_available', params['update_available']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceUpdatePagedSearchResultsV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_get_specific_update_details(self, uuid, **kwargs):  # noqa: E501
        """New - Get Specific device update details.  # noqa: E501

        Retrieve details about a specific device update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_specific_update_details(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Update UUID(Required) (required)
        :return: DeviceUpdateDetailsSupportedDevicesV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_get_specific_update_details_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_get_specific_update_details_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def updates_v1_get_specific_update_details_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Get Specific device update details.  # noqa: E501

        Retrieve details about a specific device update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_get_specific_update_details_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Update UUID(Required) (required)
        :return: DeviceUpdateDetailsSupportedDevicesV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_get_specific_update_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `updates_v1_get_specific_update_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceUpdateDetailsSupportedDevicesV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def updates_v1_update_device_update_deployment(self, uuid, deployment_update, **kwargs):  # noqa: E501
        """New - Updates the device update deployment.  # noqa: E501

        Updates the device update deployment along with deployment parameters and notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_update_device_update_deployment(uuid, deployment_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Deployment UUID(Required) (required)
        :param DeviceUpdateDeploymentUpdateV1Model deployment_update: Deployment update information(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.updates_v1_update_device_update_deployment_with_http_info(uuid, deployment_update, **kwargs)  # noqa: E501
        else:
            (data) = self.updates_v1_update_device_update_deployment_with_http_info(uuid, deployment_update, **kwargs)  # noqa: E501
            return data

    def updates_v1_update_device_update_deployment_with_http_info(self, uuid, deployment_update, **kwargs):  # noqa: E501
        """New - Updates the device update deployment.  # noqa: E501

        Updates the device update deployment along with deployment parameters and notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.updates_v1_update_device_update_deployment_with_http_info(uuid, deployment_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Deployment UUID(Required) (required)
        :param DeviceUpdateDeploymentUpdateV1Model deployment_update: Deployment update information(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'deployment_update']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method updates_v1_update_device_update_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `updates_v1_update_device_update_deployment`")  # noqa: E501
        # verify the required parameter 'deployment_update' is set
        if self.api_client.client_side_validation and ('deployment_update' not in params or
                                                       params['deployment_update'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `deployment_update` when calling `updates_v1_update_device_update_deployment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'deployment_update' in params:
            body_params = params['deployment_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/updates/deployments/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
