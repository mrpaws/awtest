# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class ExportedReportsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def exported_reports_v1_create_report_async(self, organization_group_uuid, report_parameters, **kwargs):  # noqa: E501
        """New - Submit a bulk export job matching specified criteria.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_reports_v1_create_report_async(organization_group_uuid, report_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Organization Group UUID.(Required). (required)
        :param ReportParametersV1 report_parameters: Report Parameters(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exported_reports_v1_create_report_async_with_http_info(organization_group_uuid, report_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.exported_reports_v1_create_report_async_with_http_info(organization_group_uuid, report_parameters, **kwargs)  # noqa: E501
            return data

    def exported_reports_v1_create_report_async_with_http_info(self, organization_group_uuid, report_parameters, **kwargs):  # noqa: E501
        """New - Submit a bulk export job matching specified criteria.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_reports_v1_create_report_async_with_http_info(organization_group_uuid, report_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Organization Group UUID.(Required). (required)
        :param ReportParametersV1 report_parameters: Report Parameters(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'report_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exported_reports_v1_create_report_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `exported_reports_v1_create_report_async`")  # noqa: E501
        # verify the required parameter 'report_parameters' is set
        if self.api_client.client_side_validation and ('report_parameters' not in params or
                                                       params['report_parameters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `report_parameters` when calling `exported_reports_v1_create_report_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'report_parameters' in params:
            body_params = params['report_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/exported-reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exported_reports_v1_get_all_exported_reports_async(self, organization_group_uuid, export_type, **kwargs):  # noqa: E501
        """New - Get List of all exported reports by admin.  # noqa: E501

        Get List of all exported reports by admin for each organization group .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_reports_v1_get_all_exported_reports_async(organization_group_uuid, export_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Organization Group UUID.(Required). (required)
        :param object export_type: The export type which the results will be filtered by.(Required) (required)
        :param str search: The text to search for in the name and description for exports.
        :param datetime created_start_date: The start of the created date range in UTC by which the results will be filtered. Format of the date is YYYY-MM-DD.
        :param datetime created_end_date: The end of the created date range in UTC by which the results will be filtered. Format of the date is YYYY-MM-DD.
        :param object sort_column: Order the results by this attribute, default value can be Time Exported.
        :param int page: The specific page number to get.
        :param int page_size: Maximum records per page, default value is 20
        :param object sort_order: The sort order by direction.
        :return: list[ReportsModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exported_reports_v1_get_all_exported_reports_async_with_http_info(organization_group_uuid, export_type, **kwargs)  # noqa: E501
        else:
            (data) = self.exported_reports_v1_get_all_exported_reports_async_with_http_info(organization_group_uuid, export_type, **kwargs)  # noqa: E501
            return data

    def exported_reports_v1_get_all_exported_reports_async_with_http_info(self, organization_group_uuid, export_type, **kwargs):  # noqa: E501
        """New - Get List of all exported reports by admin.  # noqa: E501

        Get List of all exported reports by admin for each organization group .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_reports_v1_get_all_exported_reports_async_with_http_info(organization_group_uuid, export_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Organization Group UUID.(Required). (required)
        :param object export_type: The export type which the results will be filtered by.(Required) (required)
        :param str search: The text to search for in the name and description for exports.
        :param datetime created_start_date: The start of the created date range in UTC by which the results will be filtered. Format of the date is YYYY-MM-DD.
        :param datetime created_end_date: The end of the created date range in UTC by which the results will be filtered. Format of the date is YYYY-MM-DD.
        :param object sort_column: Order the results by this attribute, default value can be Time Exported.
        :param int page: The specific page number to get.
        :param int page_size: Maximum records per page, default value is 20
        :param object sort_order: The sort order by direction.
        :return: list[ReportsModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'export_type', 'search', 'created_start_date', 'created_end_date', 'sort_column', 'page', 'page_size', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exported_reports_v1_get_all_exported_reports_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `exported_reports_v1_get_all_exported_reports_async`")  # noqa: E501
        # verify the required parameter 'export_type' is set
        if self.api_client.client_side_validation and ('export_type' not in params or
                                                       params['export_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `export_type` when calling `exported_reports_v1_get_all_exported_reports_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'export_type' in params:
            query_params.append(('export_type', params['export_type']))  # noqa: E501
        if 'created_start_date' in params:
            query_params.append(('created_start_date', params['created_start_date']))  # noqa: E501
        if 'created_end_date' in params:
            query_params.append(('created_end_date', params['created_end_date']))  # noqa: E501
        if 'sort_column' in params:
            query_params.append(('sort_column', params['sort_column']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/exported-reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReportsModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def exported_reports_v1_get_report_status_async(self, organization_group_uuid, report_uuid, **kwargs):  # noqa: E501
        """New - Get report status.  # noqa: E501

        Get status of exported report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_reports_v1_get_report_status_async(organization_group_uuid, report_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Organization Group UUID.(Required). (required)
        :param str report_uuid: Report UUID.(Required). (required)
        :return: ExportStatusModelV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.exported_reports_v1_get_report_status_async_with_http_info(organization_group_uuid, report_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.exported_reports_v1_get_report_status_async_with_http_info(organization_group_uuid, report_uuid, **kwargs)  # noqa: E501
            return data

    def exported_reports_v1_get_report_status_async_with_http_info(self, organization_group_uuid, report_uuid, **kwargs):  # noqa: E501
        """New - Get report status.  # noqa: E501

        Get status of exported report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.exported_reports_v1_get_report_status_async_with_http_info(organization_group_uuid, report_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Organization Group UUID.(Required). (required)
        :param str report_uuid: Report UUID.(Required). (required)
        :return: ExportStatusModelV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'report_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exported_reports_v1_get_report_status_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `exported_reports_v1_get_report_status_async`")  # noqa: E501
        # verify the required parameter 'report_uuid' is set
        if self.api_client.client_side_validation and ('report_uuid' not in params or
                                                       params['report_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `report_uuid` when calling `exported_reports_v1_get_report_status_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501
        if 'report_uuid' in params:
            path_params['reportUuid'] = params['report_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/exported-reports/{reportUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExportStatusModelV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
