# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ProvisioningQueueCounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'organization_group': 'str',
        'command_queue_count': 'str',
        'policy_engine_queue_count': 'str',
        'min_policy_engine_date_queue': 'str',
        'max_policy_engine_date_queue': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'organization_group': 'OrganizationGroup',
        'command_queue_count': 'CommandQueueCount',
        'policy_engine_queue_count': 'PolicyEngineQueueCount',
        'min_policy_engine_date_queue': 'MinPolicyEngineDateQueue',
        'max_policy_engine_date_queue': 'MaxPolicyEngineDateQueue'
    }

    def __init__(self, id=None, organization_group=None, command_queue_count=None, policy_engine_queue_count=None, min_policy_engine_date_queue=None, max_policy_engine_date_queue=None, _configuration=None):  # noqa: E501
        """ProvisioningQueueCounts - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._organization_group = None
        self._command_queue_count = None
        self._policy_engine_queue_count = None
        self._min_policy_engine_date_queue = None
        self._max_policy_engine_date_queue = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if organization_group is not None:
            self.organization_group = organization_group
        if command_queue_count is not None:
            self.command_queue_count = command_queue_count
        if policy_engine_queue_count is not None:
            self.policy_engine_queue_count = policy_engine_queue_count
        if min_policy_engine_date_queue is not None:
            self.min_policy_engine_date_queue = min_policy_engine_date_queue
        if max_policy_engine_date_queue is not None:
            self.max_policy_engine_date_queue = max_policy_engine_date_queue

    @property
    def id(self):
        """Gets the id of this ProvisioningQueueCounts.  # noqa: E501

        Gets or sets identifier of the product.  # noqa: E501

        :return: The id of this ProvisioningQueueCounts.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProvisioningQueueCounts.

        Gets or sets identifier of the product.  # noqa: E501

        :param id: The id of this ProvisioningQueueCounts.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def organization_group(self):
        """Gets the organization_group of this ProvisioningQueueCounts.  # noqa: E501

        Gets or sets managed Organization Group.  # noqa: E501

        :return: The organization_group of this ProvisioningQueueCounts.  # noqa: E501
        :rtype: str
        """
        return self._organization_group

    @organization_group.setter
    def organization_group(self, organization_group):
        """Sets the organization_group of this ProvisioningQueueCounts.

        Gets or sets managed Organization Group.  # noqa: E501

        :param organization_group: The organization_group of this ProvisioningQueueCounts.  # noqa: E501
        :type: str
        """

        self._organization_group = organization_group

    @property
    def command_queue_count(self):
        """Gets the command_queue_count of this ProvisioningQueueCounts.  # noqa: E501

        Gets or sets total commands in queue count.  # noqa: E501

        :return: The command_queue_count of this ProvisioningQueueCounts.  # noqa: E501
        :rtype: str
        """
        return self._command_queue_count

    @command_queue_count.setter
    def command_queue_count(self, command_queue_count):
        """Sets the command_queue_count of this ProvisioningQueueCounts.

        Gets or sets total commands in queue count.  # noqa: E501

        :param command_queue_count: The command_queue_count of this ProvisioningQueueCounts.  # noqa: E501
        :type: str
        """

        self._command_queue_count = command_queue_count

    @property
    def policy_engine_queue_count(self):
        """Gets the policy_engine_queue_count of this ProvisioningQueueCounts.  # noqa: E501

        Gets or sets total devices in policy engine queue.  # noqa: E501

        :return: The policy_engine_queue_count of this ProvisioningQueueCounts.  # noqa: E501
        :rtype: str
        """
        return self._policy_engine_queue_count

    @policy_engine_queue_count.setter
    def policy_engine_queue_count(self, policy_engine_queue_count):
        """Sets the policy_engine_queue_count of this ProvisioningQueueCounts.

        Gets or sets total devices in policy engine queue.  # noqa: E501

        :param policy_engine_queue_count: The policy_engine_queue_count of this ProvisioningQueueCounts.  # noqa: E501
        :type: str
        """

        self._policy_engine_queue_count = policy_engine_queue_count

    @property
    def min_policy_engine_date_queue(self):
        """Gets the min_policy_engine_date_queue of this ProvisioningQueueCounts.  # noqa: E501

        Gets or sets the oldest date/time in the policy engine queue.  # noqa: E501

        :return: The min_policy_engine_date_queue of this ProvisioningQueueCounts.  # noqa: E501
        :rtype: str
        """
        return self._min_policy_engine_date_queue

    @min_policy_engine_date_queue.setter
    def min_policy_engine_date_queue(self, min_policy_engine_date_queue):
        """Sets the min_policy_engine_date_queue of this ProvisioningQueueCounts.

        Gets or sets the oldest date/time in the policy engine queue.  # noqa: E501

        :param min_policy_engine_date_queue: The min_policy_engine_date_queue of this ProvisioningQueueCounts.  # noqa: E501
        :type: str
        """

        self._min_policy_engine_date_queue = min_policy_engine_date_queue

    @property
    def max_policy_engine_date_queue(self):
        """Gets the max_policy_engine_date_queue of this ProvisioningQueueCounts.  # noqa: E501

        Gets or sets the newest date/time in the policy engine queue.  # noqa: E501

        :return: The max_policy_engine_date_queue of this ProvisioningQueueCounts.  # noqa: E501
        :rtype: str
        """
        return self._max_policy_engine_date_queue

    @max_policy_engine_date_queue.setter
    def max_policy_engine_date_queue(self, max_policy_engine_date_queue):
        """Sets the max_policy_engine_date_queue of this ProvisioningQueueCounts.

        Gets or sets the newest date/time in the policy engine queue.  # noqa: E501

        :param max_policy_engine_date_queue: The max_policy_engine_date_queue of this ProvisioningQueueCounts.  # noqa: E501
        :type: str
        """

        self._max_policy_engine_date_queue = max_policy_engine_date_queue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisioningQueueCounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisioningQueueCounts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProvisioningQueueCounts):
            return True

        return self.to_dict() != other.to_dict()
