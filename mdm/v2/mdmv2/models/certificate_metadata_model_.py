# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class CertificateMetadataModel_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'thumbprint': 'str',
        'subject_name': 'str',
        'issuer_name': 'str',
        'issue_serial_number': 'int',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'certificate_uuid': 'str'
    }

    attribute_map = {
        'thumbprint': 'Thumbprint',
        'subject_name': 'SubjectName',
        'issuer_name': 'IssuerName',
        'issue_serial_number': 'IssueSerialNumber',
        'valid_from': 'ValidFrom',
        'valid_to': 'ValidTo',
        'certificate_uuid': 'CertificateUuid'
    }

    def __init__(self, thumbprint=None, subject_name=None, issuer_name=None, issue_serial_number=None, valid_from=None, valid_to=None, certificate_uuid=None, _configuration=None):  # noqa: E501
        """CertificateMetadataModel_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._thumbprint = None
        self._subject_name = None
        self._issuer_name = None
        self._issue_serial_number = None
        self._valid_from = None
        self._valid_to = None
        self._certificate_uuid = None
        self.discriminator = None

        if thumbprint is not None:
            self.thumbprint = thumbprint
        if subject_name is not None:
            self.subject_name = subject_name
        if issuer_name is not None:
            self.issuer_name = issuer_name
        if issue_serial_number is not None:
            self.issue_serial_number = issue_serial_number
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if certificate_uuid is not None:
            self.certificate_uuid = certificate_uuid

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateMetadataModel_.  # noqa: E501

        Gets or sets certificate Thumbprint.  # noqa: E501

        :return: The thumbprint of this CertificateMetadataModel_.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateMetadataModel_.

        Gets or sets certificate Thumbprint.  # noqa: E501

        :param thumbprint: The thumbprint of this CertificateMetadataModel_.  # noqa: E501
        :type: str
        """

        self._thumbprint = thumbprint

    @property
    def subject_name(self):
        """Gets the subject_name of this CertificateMetadataModel_.  # noqa: E501

        Gets or sets subject Name of the certificate.  # noqa: E501

        :return: The subject_name of this CertificateMetadataModel_.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this CertificateMetadataModel_.

        Gets or sets subject Name of the certificate.  # noqa: E501

        :param subject_name: The subject_name of this CertificateMetadataModel_.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def issuer_name(self):
        """Gets the issuer_name of this CertificateMetadataModel_.  # noqa: E501

        Gets or sets issuer Name.  # noqa: E501

        :return: The issuer_name of this CertificateMetadataModel_.  # noqa: E501
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this CertificateMetadataModel_.

        Gets or sets issuer Name.  # noqa: E501

        :param issuer_name: The issuer_name of this CertificateMetadataModel_.  # noqa: E501
        :type: str
        """

        self._issuer_name = issuer_name

    @property
    def issue_serial_number(self):
        """Gets the issue_serial_number of this CertificateMetadataModel_.  # noqa: E501

        Gets or sets issue Serial Number.  # noqa: E501

        :return: The issue_serial_number of this CertificateMetadataModel_.  # noqa: E501
        :rtype: int
        """
        return self._issue_serial_number

    @issue_serial_number.setter
    def issue_serial_number(self, issue_serial_number):
        """Sets the issue_serial_number of this CertificateMetadataModel_.

        Gets or sets issue Serial Number.  # noqa: E501

        :param issue_serial_number: The issue_serial_number of this CertificateMetadataModel_.  # noqa: E501
        :type: int
        """

        self._issue_serial_number = issue_serial_number

    @property
    def valid_from(self):
        """Gets the valid_from of this CertificateMetadataModel_.  # noqa: E501

        Gets or sets valid From Date.  # noqa: E501

        :return: The valid_from of this CertificateMetadataModel_.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this CertificateMetadataModel_.

        Gets or sets valid From Date.  # noqa: E501

        :param valid_from: The valid_from of this CertificateMetadataModel_.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this CertificateMetadataModel_.  # noqa: E501

        Gets or sets valid To Date.  # noqa: E501

        :return: The valid_to of this CertificateMetadataModel_.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this CertificateMetadataModel_.

        Gets or sets valid To Date.  # noqa: E501

        :param valid_to: The valid_to of this CertificateMetadataModel_.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def certificate_uuid(self):
        """Gets the certificate_uuid of this CertificateMetadataModel_.  # noqa: E501

        Gets or sets certificate Unique Identifier.  # noqa: E501

        :return: The certificate_uuid of this CertificateMetadataModel_.  # noqa: E501
        :rtype: str
        """
        return self._certificate_uuid

    @certificate_uuid.setter
    def certificate_uuid(self, certificate_uuid):
        """Sets the certificate_uuid of this CertificateMetadataModel_.

        Gets or sets certificate Unique Identifier.  # noqa: E501

        :param certificate_uuid: The certificate_uuid of this CertificateMetadataModel_.  # noqa: E501
        :type: str
        """

        self._certificate_uuid = certificate_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateMetadataModel_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateMetadataModel_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateMetadataModel_):
            return True

        return self.to_dict() != other.to_dict()
