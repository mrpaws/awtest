# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ActionManifest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'critical': 'str',
        'file_path_and_name': 'str',
        'source_file_path_and_name': 'str',
        'target_file_path_and_name': 'str',
        'path_and_name_of_folder': 'str',
        'target_folder_path_and_name': 'str',
        'command_line_and_arguments_to_run': 'str',
        'time_out': 'str',
        'process_or_app_to_terminate': 'str',
        'name_of_program_to_uninstall': 'str',
        'airwatch_mdm_agent_upgrade_file': 'str',
        'execute_as_root': 'str',
        'wait': 'str',
        'os_file': 'str',
        'install_un_managed_app': 'str',
        'un_install_un_managed_app': 'str',
        'script_file_path_and_name': 'str',
        'script_to_execute': 'str',
        'software_to_install': 'str',
        'install_file_path': 'str',
        'custom_settings_file': 'str'
    }

    attribute_map = {
        'action_type': 'ActionType',
        'critical': 'Critical',
        'file_path_and_name': 'FilePathAndName',
        'source_file_path_and_name': 'SourceFilePathAndName',
        'target_file_path_and_name': 'TargetFilePathAndName',
        'path_and_name_of_folder': 'PathAndNameOfFolder',
        'target_folder_path_and_name': 'TargetFolderPathAndName',
        'command_line_and_arguments_to_run': 'CommandLineAndArgumentsToRun',
        'time_out': 'TimeOut',
        'process_or_app_to_terminate': 'ProcessOrAppToTerminate',
        'name_of_program_to_uninstall': 'NameOfProgramToUninstall',
        'airwatch_mdm_agent_upgrade_file': 'AirwatchMdmAgentUpgradeFile',
        'execute_as_root': 'ExecuteAsRoot',
        'wait': 'Wait',
        'os_file': 'OsFile',
        'install_un_managed_app': 'InstallUnManagedApp',
        'un_install_un_managed_app': 'UnInstallUnManagedApp',
        'script_file_path_and_name': 'ScriptFilePathAndName',
        'script_to_execute': 'ScriptToExecute',
        'software_to_install': 'SoftwareToInstall',
        'install_file_path': 'InstallFilePath',
        'custom_settings_file': 'CustomSettingsFile'
    }

    def __init__(self, action_type=None, critical=None, file_path_and_name=None, source_file_path_and_name=None, target_file_path_and_name=None, path_and_name_of_folder=None, target_folder_path_and_name=None, command_line_and_arguments_to_run=None, time_out=None, process_or_app_to_terminate=None, name_of_program_to_uninstall=None, airwatch_mdm_agent_upgrade_file=None, execute_as_root=None, wait=None, os_file=None, install_un_managed_app=None, un_install_un_managed_app=None, script_file_path_and_name=None, script_to_execute=None, software_to_install=None, install_file_path=None, custom_settings_file=None, _configuration=None):  # noqa: E501
        """ActionManifest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action_type = None
        self._critical = None
        self._file_path_and_name = None
        self._source_file_path_and_name = None
        self._target_file_path_and_name = None
        self._path_and_name_of_folder = None
        self._target_folder_path_and_name = None
        self._command_line_and_arguments_to_run = None
        self._time_out = None
        self._process_or_app_to_terminate = None
        self._name_of_program_to_uninstall = None
        self._airwatch_mdm_agent_upgrade_file = None
        self._execute_as_root = None
        self._wait = None
        self._os_file = None
        self._install_un_managed_app = None
        self._un_install_un_managed_app = None
        self._script_file_path_and_name = None
        self._script_to_execute = None
        self._software_to_install = None
        self._install_file_path = None
        self._custom_settings_file = None
        self.discriminator = None

        if action_type is not None:
            self.action_type = action_type
        if critical is not None:
            self.critical = critical
        if file_path_and_name is not None:
            self.file_path_and_name = file_path_and_name
        if source_file_path_and_name is not None:
            self.source_file_path_and_name = source_file_path_and_name
        if target_file_path_and_name is not None:
            self.target_file_path_and_name = target_file_path_and_name
        if path_and_name_of_folder is not None:
            self.path_and_name_of_folder = path_and_name_of_folder
        if target_folder_path_and_name is not None:
            self.target_folder_path_and_name = target_folder_path_and_name
        if command_line_and_arguments_to_run is not None:
            self.command_line_and_arguments_to_run = command_line_and_arguments_to_run
        if time_out is not None:
            self.time_out = time_out
        if process_or_app_to_terminate is not None:
            self.process_or_app_to_terminate = process_or_app_to_terminate
        if name_of_program_to_uninstall is not None:
            self.name_of_program_to_uninstall = name_of_program_to_uninstall
        if airwatch_mdm_agent_upgrade_file is not None:
            self.airwatch_mdm_agent_upgrade_file = airwatch_mdm_agent_upgrade_file
        if execute_as_root is not None:
            self.execute_as_root = execute_as_root
        if wait is not None:
            self.wait = wait
        if os_file is not None:
            self.os_file = os_file
        if install_un_managed_app is not None:
            self.install_un_managed_app = install_un_managed_app
        if un_install_un_managed_app is not None:
            self.un_install_un_managed_app = un_install_un_managed_app
        if script_file_path_and_name is not None:
            self.script_file_path_and_name = script_file_path_and_name
        if script_to_execute is not None:
            self.script_to_execute = script_to_execute
        if software_to_install is not None:
            self.software_to_install = software_to_install
        if install_file_path is not None:
            self.install_file_path = install_file_path
        if custom_settings_file is not None:
            self.custom_settings_file = custom_settings_file

    @property
    def action_type(self):
        """Gets the action_type of this ActionManifest.  # noqa: E501

        Gets or sets action to run on the device.  # noqa: E501

        :return: The action_type of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ActionManifest.

        Gets or sets action to run on the device.  # noqa: E501

        :param action_type: The action_type of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def critical(self):
        """Gets the critical of this ActionManifest.  # noqa: E501

        Gets or sets flag variable, 3 options:  Continue - always continue regardless if manifest step fails  Continue on Success - Only continue to next manifest step if that step was successful, otherwise the product install process stops  Continue on Error - Continues when a error code of failed is returned.  # noqa: E501

        :return: The critical of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this ActionManifest.

        Gets or sets flag variable, 3 options:  Continue - always continue regardless if manifest step fails  Continue on Success - Only continue to next manifest step if that step was successful, otherwise the product install process stops  Continue on Error - Continues when a error code of failed is returned.  # noqa: E501

        :param critical: The critical of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._critical = critical

    @property
    def file_path_and_name(self):
        """Gets the file_path_and_name of this ActionManifest.  # noqa: E501

        Gets or sets path and name of File.  # noqa: E501

        :return: The file_path_and_name of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._file_path_and_name

    @file_path_and_name.setter
    def file_path_and_name(self, file_path_and_name):
        """Sets the file_path_and_name of this ActionManifest.

        Gets or sets path and name of File.  # noqa: E501

        :param file_path_and_name: The file_path_and_name of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._file_path_and_name = file_path_and_name

    @property
    def source_file_path_and_name(self):
        """Gets the source_file_path_and_name of this ActionManifest.  # noqa: E501

        Gets or sets path and name of Source File.  # noqa: E501

        :return: The source_file_path_and_name of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._source_file_path_and_name

    @source_file_path_and_name.setter
    def source_file_path_and_name(self, source_file_path_and_name):
        """Sets the source_file_path_and_name of this ActionManifest.

        Gets or sets path and name of Source File.  # noqa: E501

        :param source_file_path_and_name: The source_file_path_and_name of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._source_file_path_and_name = source_file_path_and_name

    @property
    def target_file_path_and_name(self):
        """Gets the target_file_path_and_name of this ActionManifest.  # noqa: E501

        Gets or sets path and name of Target File.  # noqa: E501

        :return: The target_file_path_and_name of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._target_file_path_and_name

    @target_file_path_and_name.setter
    def target_file_path_and_name(self, target_file_path_and_name):
        """Sets the target_file_path_and_name of this ActionManifest.

        Gets or sets path and name of Target File.  # noqa: E501

        :param target_file_path_and_name: The target_file_path_and_name of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._target_file_path_and_name = target_file_path_and_name

    @property
    def path_and_name_of_folder(self):
        """Gets the path_and_name_of_folder of this ActionManifest.  # noqa: E501

        Gets or sets path and name of folder.  # noqa: E501

        :return: The path_and_name_of_folder of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._path_and_name_of_folder

    @path_and_name_of_folder.setter
    def path_and_name_of_folder(self, path_and_name_of_folder):
        """Sets the path_and_name_of_folder of this ActionManifest.

        Gets or sets path and name of folder.  # noqa: E501

        :param path_and_name_of_folder: The path_and_name_of_folder of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._path_and_name_of_folder = path_and_name_of_folder

    @property
    def target_folder_path_and_name(self):
        """Gets the target_folder_path_and_name of this ActionManifest.  # noqa: E501

        Gets or sets path and name of the Target folder.  # noqa: E501

        :return: The target_folder_path_and_name of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._target_folder_path_and_name

    @target_folder_path_and_name.setter
    def target_folder_path_and_name(self, target_folder_path_and_name):
        """Sets the target_folder_path_and_name of this ActionManifest.

        Gets or sets path and name of the Target folder.  # noqa: E501

        :param target_folder_path_and_name: The target_folder_path_and_name of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._target_folder_path_and_name = target_folder_path_and_name

    @property
    def command_line_and_arguments_to_run(self):
        """Gets the command_line_and_arguments_to_run of this ActionManifest.  # noqa: E501

        Gets or sets command line And arguments to run.  # noqa: E501

        :return: The command_line_and_arguments_to_run of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._command_line_and_arguments_to_run

    @command_line_and_arguments_to_run.setter
    def command_line_and_arguments_to_run(self, command_line_and_arguments_to_run):
        """Sets the command_line_and_arguments_to_run of this ActionManifest.

        Gets or sets command line And arguments to run.  # noqa: E501

        :param command_line_and_arguments_to_run: The command_line_and_arguments_to_run of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._command_line_and_arguments_to_run = command_line_and_arguments_to_run

    @property
    def time_out(self):
        """Gets the time_out of this ActionManifest.  # noqa: E501

        Gets or sets how long to wait – 0: No Wait, -1: Wait Indefinitely, or &gt; 0 Wait X seconds.  # noqa: E501

        :return: The time_out of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._time_out

    @time_out.setter
    def time_out(self, time_out):
        """Sets the time_out of this ActionManifest.

        Gets or sets how long to wait – 0: No Wait, -1: Wait Indefinitely, or &gt; 0 Wait X seconds.  # noqa: E501

        :param time_out: The time_out of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._time_out = time_out

    @property
    def process_or_app_to_terminate(self):
        """Gets the process_or_app_to_terminate of this ActionManifest.  # noqa: E501

        Gets or sets process or app to terminate.  # noqa: E501

        :return: The process_or_app_to_terminate of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._process_or_app_to_terminate

    @process_or_app_to_terminate.setter
    def process_or_app_to_terminate(self, process_or_app_to_terminate):
        """Sets the process_or_app_to_terminate of this ActionManifest.

        Gets or sets process or app to terminate.  # noqa: E501

        :param process_or_app_to_terminate: The process_or_app_to_terminate of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._process_or_app_to_terminate = process_or_app_to_terminate

    @property
    def name_of_program_to_uninstall(self):
        """Gets the name_of_program_to_uninstall of this ActionManifest.  # noqa: E501

        Gets or sets name of program to uninstall.  # noqa: E501

        :return: The name_of_program_to_uninstall of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._name_of_program_to_uninstall

    @name_of_program_to_uninstall.setter
    def name_of_program_to_uninstall(self, name_of_program_to_uninstall):
        """Sets the name_of_program_to_uninstall of this ActionManifest.

        Gets or sets name of program to uninstall.  # noqa: E501

        :param name_of_program_to_uninstall: The name_of_program_to_uninstall of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._name_of_program_to_uninstall = name_of_program_to_uninstall

    @property
    def airwatch_mdm_agent_upgrade_file(self):
        """Gets the airwatch_mdm_agent_upgrade_file of this ActionManifest.  # noqa: E501

        Gets or sets airwatch Mdm Agent Upgrade File.  # noqa: E501

        :return: The airwatch_mdm_agent_upgrade_file of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._airwatch_mdm_agent_upgrade_file

    @airwatch_mdm_agent_upgrade_file.setter
    def airwatch_mdm_agent_upgrade_file(self, airwatch_mdm_agent_upgrade_file):
        """Sets the airwatch_mdm_agent_upgrade_file of this ActionManifest.

        Gets or sets airwatch Mdm Agent Upgrade File.  # noqa: E501

        :param airwatch_mdm_agent_upgrade_file: The airwatch_mdm_agent_upgrade_file of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._airwatch_mdm_agent_upgrade_file = airwatch_mdm_agent_upgrade_file

    @property
    def execute_as_root(self):
        """Gets the execute_as_root of this ActionManifest.  # noqa: E501

        Gets or sets whether to execute As Root [Specific to AppleOsX].  # noqa: E501

        :return: The execute_as_root of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._execute_as_root

    @execute_as_root.setter
    def execute_as_root(self, execute_as_root):
        """Sets the execute_as_root of this ActionManifest.

        Gets or sets whether to execute As Root [Specific to AppleOsX].  # noqa: E501

        :param execute_as_root: The execute_as_root of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._execute_as_root = execute_as_root

    @property
    def wait(self):
        """Gets the wait of this ActionManifest.  # noqa: E501

        Gets or sets whether to wait for the action to complete [Specific to WindowsPc].  # noqa: E501

        :return: The wait of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this ActionManifest.

        Gets or sets whether to wait for the action to complete [Specific to WindowsPc].  # noqa: E501

        :param wait: The wait of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._wait = wait

    @property
    def os_file(self):
        """Gets the os_file of this ActionManifest.  # noqa: E501

        Gets or sets file provided for OS Upgrade.  # noqa: E501

        :return: The os_file of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._os_file

    @os_file.setter
    def os_file(self, os_file):
        """Sets the os_file of this ActionManifest.

        Gets or sets file provided for OS Upgrade.  # noqa: E501

        :param os_file: The os_file of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._os_file = os_file

    @property
    def install_un_managed_app(self):
        """Gets the install_un_managed_app of this ActionManifest.  # noqa: E501

        Gets or sets the UnManaged App that is to be installed.  # noqa: E501

        :return: The install_un_managed_app of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._install_un_managed_app

    @install_un_managed_app.setter
    def install_un_managed_app(self, install_un_managed_app):
        """Sets the install_un_managed_app of this ActionManifest.

        Gets or sets the UnManaged App that is to be installed.  # noqa: E501

        :param install_un_managed_app: The install_un_managed_app of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._install_un_managed_app = install_un_managed_app

    @property
    def un_install_un_managed_app(self):
        """Gets the un_install_un_managed_app of this ActionManifest.  # noqa: E501

        Gets or sets the Unmanaged App that is to be uninstalled.  # noqa: E501

        :return: The un_install_un_managed_app of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._un_install_un_managed_app

    @un_install_un_managed_app.setter
    def un_install_un_managed_app(self, un_install_un_managed_app):
        """Sets the un_install_un_managed_app of this ActionManifest.

        Gets or sets the Unmanaged App that is to be uninstalled.  # noqa: E501

        :param un_install_un_managed_app: The un_install_un_managed_app of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._un_install_un_managed_app = un_install_un_managed_app

    @property
    def script_file_path_and_name(self):
        """Gets the script_file_path_and_name of this ActionManifest.  # noqa: E501

        Gets or sets path and Name of the Script file.  # noqa: E501

        :return: The script_file_path_and_name of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._script_file_path_and_name

    @script_file_path_and_name.setter
    def script_file_path_and_name(self, script_file_path_and_name):
        """Sets the script_file_path_and_name of this ActionManifest.

        Gets or sets path and Name of the Script file.  # noqa: E501

        :param script_file_path_and_name: The script_file_path_and_name of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._script_file_path_and_name = script_file_path_and_name

    @property
    def script_to_execute(self):
        """Gets the script_to_execute of this ActionManifest.  # noqa: E501

        Gets or sets script to be executed.  # noqa: E501

        :return: The script_to_execute of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._script_to_execute

    @script_to_execute.setter
    def script_to_execute(self, script_to_execute):
        """Sets the script_to_execute of this ActionManifest.

        Gets or sets script to be executed.  # noqa: E501

        :param script_to_execute: The script_to_execute of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._script_to_execute = script_to_execute

    @property
    def software_to_install(self):
        """Gets the software_to_install of this ActionManifest.  # noqa: E501

        Gets or sets software to be installed.  # noqa: E501

        :return: The software_to_install of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._software_to_install

    @software_to_install.setter
    def software_to_install(self, software_to_install):
        """Sets the software_to_install of this ActionManifest.

        Gets or sets software to be installed.  # noqa: E501

        :param software_to_install: The software_to_install of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._software_to_install = software_to_install

    @property
    def install_file_path(self):
        """Gets the install_file_path of this ActionManifest.  # noqa: E501

        Gets or sets path of the file to be installed.  # noqa: E501

        :return: The install_file_path of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._install_file_path

    @install_file_path.setter
    def install_file_path(self, install_file_path):
        """Sets the install_file_path of this ActionManifest.

        Gets or sets path of the file to be installed.  # noqa: E501

        :param install_file_path: The install_file_path of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._install_file_path = install_file_path

    @property
    def custom_settings_file(self):
        """Gets the custom_settings_file of this ActionManifest.  # noqa: E501

        Gets or sets to apply Custom settings [specific to Android].  # noqa: E501

        :return: The custom_settings_file of this ActionManifest.  # noqa: E501
        :rtype: str
        """
        return self._custom_settings_file

    @custom_settings_file.setter
    def custom_settings_file(self, custom_settings_file):
        """Sets the custom_settings_file of this ActionManifest.

        Gets or sets to apply Custom settings [specific to Android].  # noqa: E501

        :param custom_settings_file: The custom_settings_file of this ActionManifest.  # noqa: E501
        :type: str
        """

        self._custom_settings_file = custom_settings_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionManifest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionManifest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActionManifest):
            return True

        return self.to_dict() != other.to_dict()
