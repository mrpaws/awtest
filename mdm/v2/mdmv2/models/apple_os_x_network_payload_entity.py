# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXNetworkPayloadEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_interface': 'str',
        'service_set_identifier': 'str',
        'hidden_network': 'bool',
        'auto_join': 'bool',
        'security_type': 'str',
        'password': 'str',
        'use_as_login_window_configuration': 'bool',
        'use_directory_authentication': 'bool',
        'tls': 'bool',
        'ttls': 'bool',
        'leap': 'bool',
        'peap': 'bool',
        'eapfast': 'bool',
        'eapsim': 'bool',
        'eapaka': 'bool',
        'tls_minimum_version': 'str',
        'tls_maximum_version': 'str',
        'disable_association_mac_randomization': 'bool',
        'user_name': 'str',
        'user_password': 'str',
        'identity_certificate': 'str',
        'inner_identity': 'str',
        'outer_identity': 'str',
        'use_pac': 'bool',
        'allow_two_rands': 'bool',
        'trusted_certificates': 'list[str]',
        'allow_trust_exceptions': 'bool',
        'proxy_type': 'str',
        'proxy_server': 'str',
        'proxy_server_port': 'int',
        'proxy_username': 'str',
        'proxy_password': 'str',
        'proxy_url': 'str',
        'pac_fallback': 'bool'
    }

    attribute_map = {
        'network_interface': 'NetworkInterface',
        'service_set_identifier': 'ServiceSetIdentifier',
        'hidden_network': 'HiddenNetwork',
        'auto_join': 'AutoJoin',
        'security_type': 'SecurityType',
        'password': 'Password',
        'use_as_login_window_configuration': 'UseAsLoginWindowConfiguration',
        'use_directory_authentication': 'UseDirectoryAuthentication',
        'tls': 'TLS',
        'ttls': 'TTLS',
        'leap': 'LEAP',
        'peap': 'PEAP',
        'eapfast': 'EAPFAST',
        'eapsim': 'EAPSIM',
        'eapaka': 'EAPAKA',
        'tls_minimum_version': 'TLSMinimumVersion',
        'tls_maximum_version': 'TLSMaximumVersion',
        'disable_association_mac_randomization': 'DisableAssociationMACRandomization',
        'user_name': 'UserName',
        'user_password': 'UserPassword',
        'identity_certificate': 'IdentityCertificate',
        'inner_identity': 'InnerIdentity',
        'outer_identity': 'OuterIdentity',
        'use_pac': 'UsePAC',
        'allow_two_rands': 'AllowTwoRANDs',
        'trusted_certificates': 'TrustedCertificates',
        'allow_trust_exceptions': 'AllowTrustExceptions',
        'proxy_type': 'ProxyType',
        'proxy_server': 'ProxyServer',
        'proxy_server_port': 'ProxyServerPort',
        'proxy_username': 'ProxyUsername',
        'proxy_password': 'ProxyPassword',
        'proxy_url': 'ProxyUrl',
        'pac_fallback': 'PacFallback'
    }

    def __init__(self, network_interface=None, service_set_identifier=None, hidden_network=None, auto_join=None, security_type=None, password=None, use_as_login_window_configuration=None, use_directory_authentication=None, tls=None, ttls=None, leap=None, peap=None, eapfast=None, eapsim=None, eapaka=None, tls_minimum_version=None, tls_maximum_version=None, disable_association_mac_randomization=None, user_name=None, user_password=None, identity_certificate=None, inner_identity=None, outer_identity=None, use_pac=None, allow_two_rands=None, trusted_certificates=None, allow_trust_exceptions=None, proxy_type=None, proxy_server=None, proxy_server_port=None, proxy_username=None, proxy_password=None, proxy_url=None, pac_fallback=None, _configuration=None):  # noqa: E501
        """AppleOsXNetworkPayloadEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._network_interface = None
        self._service_set_identifier = None
        self._hidden_network = None
        self._auto_join = None
        self._security_type = None
        self._password = None
        self._use_as_login_window_configuration = None
        self._use_directory_authentication = None
        self._tls = None
        self._ttls = None
        self._leap = None
        self._peap = None
        self._eapfast = None
        self._eapsim = None
        self._eapaka = None
        self._tls_minimum_version = None
        self._tls_maximum_version = None
        self._disable_association_mac_randomization = None
        self._user_name = None
        self._user_password = None
        self._identity_certificate = None
        self._inner_identity = None
        self._outer_identity = None
        self._use_pac = None
        self._allow_two_rands = None
        self._trusted_certificates = None
        self._allow_trust_exceptions = None
        self._proxy_type = None
        self._proxy_server = None
        self._proxy_server_port = None
        self._proxy_username = None
        self._proxy_password = None
        self._proxy_url = None
        self._pac_fallback = None
        self.discriminator = None

        if network_interface is not None:
            self.network_interface = network_interface
        if service_set_identifier is not None:
            self.service_set_identifier = service_set_identifier
        if hidden_network is not None:
            self.hidden_network = hidden_network
        if auto_join is not None:
            self.auto_join = auto_join
        if security_type is not None:
            self.security_type = security_type
        if password is not None:
            self.password = password
        if use_as_login_window_configuration is not None:
            self.use_as_login_window_configuration = use_as_login_window_configuration
        if use_directory_authentication is not None:
            self.use_directory_authentication = use_directory_authentication
        if tls is not None:
            self.tls = tls
        if ttls is not None:
            self.ttls = ttls
        if leap is not None:
            self.leap = leap
        if peap is not None:
            self.peap = peap
        if eapfast is not None:
            self.eapfast = eapfast
        if eapsim is not None:
            self.eapsim = eapsim
        if eapaka is not None:
            self.eapaka = eapaka
        if tls_minimum_version is not None:
            self.tls_minimum_version = tls_minimum_version
        if tls_maximum_version is not None:
            self.tls_maximum_version = tls_maximum_version
        if disable_association_mac_randomization is not None:
            self.disable_association_mac_randomization = disable_association_mac_randomization
        if user_name is not None:
            self.user_name = user_name
        if user_password is not None:
            self.user_password = user_password
        if identity_certificate is not None:
            self.identity_certificate = identity_certificate
        if inner_identity is not None:
            self.inner_identity = inner_identity
        if outer_identity is not None:
            self.outer_identity = outer_identity
        if use_pac is not None:
            self.use_pac = use_pac
        if allow_two_rands is not None:
            self.allow_two_rands = allow_two_rands
        if trusted_certificates is not None:
            self.trusted_certificates = trusted_certificates
        if allow_trust_exceptions is not None:
            self.allow_trust_exceptions = allow_trust_exceptions
        if proxy_type is not None:
            self.proxy_type = proxy_type
        if proxy_server is not None:
            self.proxy_server = proxy_server
        if proxy_server_port is not None:
            self.proxy_server_port = proxy_server_port
        if proxy_username is not None:
            self.proxy_username = proxy_username
        if proxy_password is not None:
            self.proxy_password = proxy_password
        if proxy_url is not None:
            self.proxy_url = proxy_url
        if pac_fallback is not None:
            self.pac_fallback = pac_fallback

    @property
    def network_interface(self):
        """Gets the network_interface of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets network Interface to connect to network using Wi-Fi or Ethernet.  # noqa: E501

        :return: The network_interface of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._network_interface

    @network_interface.setter
    def network_interface(self, network_interface):
        """Sets the network_interface of this AppleOsXNetworkPayloadEntity.

        Gets or sets network Interface to connect to network using Wi-Fi or Ethernet.  # noqa: E501

        :param network_interface: The network_interface of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._network_interface = network_interface

    @property
    def service_set_identifier(self):
        """Gets the service_set_identifier of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets sSID of the Wi-Fi network to be used.  # noqa: E501

        :return: The service_set_identifier of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._service_set_identifier

    @service_set_identifier.setter
    def service_set_identifier(self, service_set_identifier):
        """Sets the service_set_identifier of this AppleOsXNetworkPayloadEntity.

        Gets or sets sSID of the Wi-Fi network to be used.  # noqa: E501

        :param service_set_identifier: The service_set_identifier of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._service_set_identifier = service_set_identifier

    @property
    def hidden_network(self):
        """Gets the hidden_network of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether besides SSID, the device uses information such as broadcast type and encryption type to differentiate a network.  # noqa: E501

        :return: The hidden_network of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_network

    @hidden_network.setter
    def hidden_network(self, hidden_network):
        """Sets the hidden_network of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether besides SSID, the device uses information such as broadcast type and encryption type to differentiate a network.  # noqa: E501

        :param hidden_network: The hidden_network of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._hidden_network = hidden_network

    @property
    def auto_join(self):
        """Gets the auto_join of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, the network is auto-joined on iOS 5+.  # noqa: E501

        :return: The auto_join of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._auto_join

    @auto_join.setter
    def auto_join(self, auto_join):
        """Sets the auto_join of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, the network is auto-joined on iOS 5+.  # noqa: E501

        :param auto_join: The auto_join of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._auto_join = auto_join

    @property
    def security_type(self):
        """Gets the security_type of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the encryption type of the Wi-FI network.  # noqa: E501

        :return: The security_type of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this AppleOsXNetworkPayloadEntity.

        Gets or sets the encryption type of the Wi-FI network.  # noqa: E501

        :param security_type: The security_type of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._security_type = security_type

    @property
    def password(self):
        """Gets the password of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets sSID password (Pre-Shared Key).  # noqa: E501

        :return: The password of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AppleOsXNetworkPayloadEntity.

        Gets or sets sSID password (Pre-Shared Key).  # noqa: E501

        :param password: The password of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def use_as_login_window_configuration(self):
        """Gets the use_as_login_window_configuration of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether it true, allows the user to authenticate to the network at login.  # noqa: E501

        :return: The use_as_login_window_configuration of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._use_as_login_window_configuration

    @use_as_login_window_configuration.setter
    def use_as_login_window_configuration(self, use_as_login_window_configuration):
        """Sets the use_as_login_window_configuration of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether it true, allows the user to authenticate to the network at login.  # noqa: E501

        :param use_as_login_window_configuration: The use_as_login_window_configuration of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._use_as_login_window_configuration = use_as_login_window_configuration

    @property
    def use_directory_authentication(self):
        """Gets the use_directory_authentication of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, the target machine’s directory credentials is used as an authentication method.  # noqa: E501

        :return: The use_directory_authentication of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._use_directory_authentication

    @use_directory_authentication.setter
    def use_directory_authentication(self, use_directory_authentication):
        """Sets the use_directory_authentication of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, the target machine’s directory credentials is used as an authentication method.  # noqa: E501

        :param use_directory_authentication: The use_directory_authentication of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._use_directory_authentication = use_directory_authentication

    @property
    def tls(self):
        """Gets the tls of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, TLS is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The tls of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, TLS is used for the Extensible Authentication Protocol.  # noqa: E501

        :param tls: The tls of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._tls = tls

    @property
    def ttls(self):
        """Gets the ttls of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, TTLS is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The ttls of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._ttls

    @ttls.setter
    def ttls(self, ttls):
        """Sets the ttls of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, TTLS is used for the Extensible Authentication Protocol.  # noqa: E501

        :param ttls: The ttls of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._ttls = ttls

    @property
    def leap(self):
        """Gets the leap of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, LEAP is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The leap of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._leap

    @leap.setter
    def leap(self, leap):
        """Sets the leap of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, LEAP is used for the Extensible Authentication Protocol.  # noqa: E501

        :param leap: The leap of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._leap = leap

    @property
    def peap(self):
        """Gets the peap of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, PEAP is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The peap of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._peap

    @peap.setter
    def peap(self, peap):
        """Sets the peap of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, PEAP is used for the Extensible Authentication Protocol.  # noqa: E501

        :param peap: The peap of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._peap = peap

    @property
    def eapfast(self):
        """Gets the eapfast of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, EAP-FAST is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The eapfast of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._eapfast

    @eapfast.setter
    def eapfast(self, eapfast):
        """Sets the eapfast of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, EAP-FAST is used for the Extensible Authentication Protocol.  # noqa: E501

        :param eapfast: The eapfast of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._eapfast = eapfast

    @property
    def eapsim(self):
        """Gets the eapsim of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, EAP-SIM is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The eapsim of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._eapsim

    @eapsim.setter
    def eapsim(self, eapsim):
        """Sets the eapsim of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, EAP-SIM is used for the Extensible Authentication Protocol.  # noqa: E501

        :param eapsim: The eapsim of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._eapsim = eapsim

    @property
    def eapaka(self):
        """Gets the eapaka of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, EAP-AKA is used for the Extensible Authentication Protocol.  # noqa: E501

        :return: The eapaka of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._eapaka

    @eapaka.setter
    def eapaka(self, eapaka):
        """Sets the eapaka of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, EAP-AKA is used for the Extensible Authentication Protocol.  # noqa: E501

        :param eapaka: The eapaka of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._eapaka = eapaka

    @property
    def tls_minimum_version(self):
        """Gets the tls_minimum_version of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the minimum TLS version to be used with EAP-TLS authentication. If no value is specified, the default minimum is 1.0.  # noqa: E501

        :return: The tls_minimum_version of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._tls_minimum_version

    @tls_minimum_version.setter
    def tls_minimum_version(self, tls_minimum_version):
        """Sets the tls_minimum_version of this AppleOsXNetworkPayloadEntity.

        Gets or sets the minimum TLS version to be used with EAP-TLS authentication. If no value is specified, the default minimum is 1.0.  # noqa: E501

        :param tls_minimum_version: The tls_minimum_version of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._tls_minimum_version = tls_minimum_version

    @property
    def tls_maximum_version(self):
        """Gets the tls_maximum_version of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the maximum TLS version to be used with EAP-TLS authentication. If no value is specified, the default maximum is 1.2.  # noqa: E501

        :return: The tls_maximum_version of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._tls_maximum_version

    @tls_maximum_version.setter
    def tls_maximum_version(self, tls_maximum_version):
        """Sets the tls_maximum_version of this AppleOsXNetworkPayloadEntity.

        Gets or sets the maximum TLS version to be used with EAP-TLS authentication. If no value is specified, the default maximum is 1.2.  # noqa: E501

        :param tls_maximum_version: The tls_maximum_version of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._tls_maximum_version = tls_maximum_version

    @property
    def disable_association_mac_randomization(self):
        """Gets the disable_association_mac_randomization of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether MAC randomization is disabled.  # noqa: E501

        :return: The disable_association_mac_randomization of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._disable_association_mac_randomization

    @disable_association_mac_randomization.setter
    def disable_association_mac_randomization(self, disable_association_mac_randomization):
        """Sets the disable_association_mac_randomization of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether MAC randomization is disabled.  # noqa: E501

        :param disable_association_mac_randomization: The disable_association_mac_randomization of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._disable_association_mac_randomization = disable_association_mac_randomization

    @property
    def user_name(self):
        """Gets the user_name of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the username used for authentication.  # noqa: E501

        :return: The user_name of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AppleOsXNetworkPayloadEntity.

        Gets or sets the username used for authentication.  # noqa: E501

        :param user_name: The user_name of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_password(self):
        """Gets the user_password of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the password used for authentication.  # noqa: E501

        :return: The user_password of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_password

    @user_password.setter
    def user_password(self, user_password):
        """Sets the user_password of this AppleOsXNetworkPayloadEntity.

        Gets or sets the password used for authentication.  # noqa: E501

        :param user_password: The user_password of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._user_password = user_password

    @property
    def identity_certificate(self):
        """Gets the identity_certificate of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the certificate payload to use for the identity credential.  # noqa: E501

        :return: The identity_certificate of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._identity_certificate

    @identity_certificate.setter
    def identity_certificate(self, identity_certificate):
        """Sets the identity_certificate of this AppleOsXNetworkPayloadEntity.

        Gets or sets the certificate payload to use for the identity credential.  # noqa: E501

        :param identity_certificate: The identity_certificate of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._identity_certificate = identity_certificate

    @property
    def inner_identity(self):
        """Gets the inner_identity of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets specifies the inner authentication used by the TTLS module.  # noqa: E501

        :return: The inner_identity of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._inner_identity

    @inner_identity.setter
    def inner_identity(self, inner_identity):
        """Sets the inner_identity of this AppleOsXNetworkPayloadEntity.

        Gets or sets specifies the inner authentication used by the TTLS module.  # noqa: E501

        :param inner_identity: The inner_identity of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._inner_identity = inner_identity

    @property
    def outer_identity(self):
        """Gets the outer_identity of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets this key is only relevant to TTLS, PEAP, and EAP-FAST for allowing the user to hide his or her identity.  # noqa: E501

        :return: The outer_identity of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._outer_identity

    @outer_identity.setter
    def outer_identity(self, outer_identity):
        """Sets the outer_identity of this AppleOsXNetworkPayloadEntity.

        Gets or sets this key is only relevant to TTLS, PEAP, and EAP-FAST for allowing the user to hide his or her identity.  # noqa: E501

        :param outer_identity: The outer_identity of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._outer_identity = outer_identity

    @property
    def use_pac(self):
        """Gets the use_pac of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, the device will use an existing PAC if it's present.  # noqa: E501

        :return: The use_pac of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._use_pac

    @use_pac.setter
    def use_pac(self, use_pac):
        """Sets the use_pac of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, the device will use an existing PAC if it's present.  # noqa: E501

        :param use_pac: The use_pac of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._use_pac = use_pac

    @property
    def allow_two_rands(self):
        """Gets the allow_two_rands of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, two RANDs are used for EAPSIM.  # noqa: E501

        :return: The allow_two_rands of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_two_rands

    @allow_two_rands.setter
    def allow_two_rands(self, allow_two_rands):
        """Sets the allow_two_rands of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, two RANDs are used for EAPSIM.  # noqa: E501

        :param allow_two_rands: The allow_two_rands of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._allow_two_rands = allow_two_rands

    @property
    def trusted_certificates(self):
        """Gets the trusted_certificates of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets certificates to be trusted for this authentication.  # noqa: E501

        :return: The trusted_certificates of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._trusted_certificates

    @trusted_certificates.setter
    def trusted_certificates(self, trusted_certificates):
        """Sets the trusted_certificates of this AppleOsXNetworkPayloadEntity.

        Gets or sets certificates to be trusted for this authentication.  # noqa: E501

        :param trusted_certificates: The trusted_certificates of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._trusted_certificates = trusted_certificates

    @property
    def allow_trust_exceptions(self):
        """Gets the allow_trust_exceptions of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, allows a dynamic trust decision by the user.  # noqa: E501

        :return: The allow_trust_exceptions of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_trust_exceptions

    @allow_trust_exceptions.setter
    def allow_trust_exceptions(self, allow_trust_exceptions):
        """Sets the allow_trust_exceptions of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if true, allows a dynamic trust decision by the user.  # noqa: E501

        :param allow_trust_exceptions: The allow_trust_exceptions of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._allow_trust_exceptions = allow_trust_exceptions

    @property
    def proxy_type(self):
        """Gets the proxy_type of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets proxy type.  # noqa: E501

        :return: The proxy_type of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_type

    @proxy_type.setter
    def proxy_type(self, proxy_type):
        """Sets the proxy_type of this AppleOsXNetworkPayloadEntity.

        Gets or sets proxy type.  # noqa: E501

        :param proxy_type: The proxy_type of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._proxy_type = proxy_type

    @property
    def proxy_server(self):
        """Gets the proxy_server of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the host name of the HTTP proxy.  # noqa: E501

        :return: The proxy_server of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_server

    @proxy_server.setter
    def proxy_server(self, proxy_server):
        """Sets the proxy_server of this AppleOsXNetworkPayloadEntity.

        Gets or sets the host name of the HTTP proxy.  # noqa: E501

        :param proxy_server: The proxy_server of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._proxy_server = proxy_server

    @property
    def proxy_server_port(self):
        """Gets the proxy_server_port of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the port number of the HTTP proxy.  # noqa: E501

        :return: The proxy_server_port of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: int
        """
        return self._proxy_server_port

    @proxy_server_port.setter
    def proxy_server_port(self, proxy_server_port):
        """Sets the proxy_server_port of this AppleOsXNetworkPayloadEntity.

        Gets or sets the port number of the HTTP proxy.  # noqa: E501

        :param proxy_server_port: The proxy_server_port of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: int
        """

        self._proxy_server_port = proxy_server_port

    @property
    def proxy_username(self):
        """Gets the proxy_username of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the username used for authentication.  # noqa: E501

        :return: The proxy_username of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_username

    @proxy_username.setter
    def proxy_username(self, proxy_username):
        """Sets the proxy_username of this AppleOsXNetworkPayloadEntity.

        Gets or sets the username used for authentication.  # noqa: E501

        :param proxy_username: The proxy_username of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._proxy_username = proxy_username

    @property
    def proxy_password(self):
        """Gets the proxy_password of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets the password used for authentication.  # noqa: E501

        :return: The proxy_password of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_password

    @proxy_password.setter
    def proxy_password(self, proxy_password):
        """Sets the proxy_password of this AppleOsXNetworkPayloadEntity.

        Gets or sets the password used for authentication.  # noqa: E501

        :param proxy_password: The proxy_password of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._proxy_password = proxy_password

    @property
    def proxy_url(self):
        """Gets the proxy_url of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets uRL to the location of the proxy auto-configuration file.  # noqa: E501

        :return: The proxy_url of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """Sets the proxy_url of this AppleOsXNetworkPayloadEntity.

        Gets or sets uRL to the location of the proxy auto-configuration file.  # noqa: E501

        :param proxy_url: The proxy_url of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: str
        """

        self._proxy_url = proxy_url

    @property
    def pac_fallback(self):
        """Gets the pac_fallback of this AppleOsXNetworkPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if false, prevents the device from connecting directly to the destination if the PAC file is unreachable.  # noqa: E501

        :return: The pac_fallback of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._pac_fallback

    @pac_fallback.setter
    def pac_fallback(self, pac_fallback):
        """Sets the pac_fallback of this AppleOsXNetworkPayloadEntity.

        Gets or sets a value indicating whether if false, prevents the device from connecting directly to the destination if the PAC file is unreachable.  # noqa: E501

        :param pac_fallback: The pac_fallback of this AppleOsXNetworkPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._pac_fallback = pac_fallback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXNetworkPayloadEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXNetworkPayloadEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXNetworkPayloadEntity):
            return True

        return self.to_dict() != other.to_dict()
