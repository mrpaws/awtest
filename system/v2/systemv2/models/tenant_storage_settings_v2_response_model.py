# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv2.configuration import Configuration


class TenantStorageSettingsV2ResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_capacity_mb': 'int',
        'application_overage_allowed_mb': 'int',
        'application_max_file_size_mb': 'int',
        'application_max_file_size_with_cdn_mb': 'int',
        'content_capacity_mb': 'int',
        'content_overage_allowed_mb': 'int',
        'content_max_file_size_mb': 'int',
        'file_encryption_enabled': 'bool'
    }

    attribute_map = {
        'application_capacity_mb': 'application_capacity_mb',
        'application_overage_allowed_mb': 'application_overage_allowed_mb',
        'application_max_file_size_mb': 'application_max_file_size_mb',
        'application_max_file_size_with_cdn_mb': 'application_max_file_size_with_cdn_mb',
        'content_capacity_mb': 'content_capacity_mb',
        'content_overage_allowed_mb': 'content_overage_allowed_mb',
        'content_max_file_size_mb': 'content_max_file_size_mb',
        'file_encryption_enabled': 'file_encryption_enabled'
    }

    def __init__(self, application_capacity_mb=None, application_overage_allowed_mb=None, application_max_file_size_mb=None, application_max_file_size_with_cdn_mb=None, content_capacity_mb=None, content_overage_allowed_mb=None, content_max_file_size_mb=None, file_encryption_enabled=None, _configuration=None):  # noqa: E501
        """TenantStorageSettingsV2ResponseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application_capacity_mb = None
        self._application_overage_allowed_mb = None
        self._application_max_file_size_mb = None
        self._application_max_file_size_with_cdn_mb = None
        self._content_capacity_mb = None
        self._content_overage_allowed_mb = None
        self._content_max_file_size_mb = None
        self._file_encryption_enabled = None
        self.discriminator = None

        if application_capacity_mb is not None:
            self.application_capacity_mb = application_capacity_mb
        if application_overage_allowed_mb is not None:
            self.application_overage_allowed_mb = application_overage_allowed_mb
        if application_max_file_size_mb is not None:
            self.application_max_file_size_mb = application_max_file_size_mb
        if application_max_file_size_with_cdn_mb is not None:
            self.application_max_file_size_with_cdn_mb = application_max_file_size_with_cdn_mb
        if content_capacity_mb is not None:
            self.content_capacity_mb = content_capacity_mb
        if content_overage_allowed_mb is not None:
            self.content_overage_allowed_mb = content_overage_allowed_mb
        if content_max_file_size_mb is not None:
            self.content_max_file_size_mb = content_max_file_size_mb
        if file_encryption_enabled is not None:
            self.file_encryption_enabled = file_encryption_enabled

    @property
    def application_capacity_mb(self):
        """Gets the application_capacity_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501

        The application capacity in tenant storage(MB).  # noqa: E501

        :return: The application_capacity_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._application_capacity_mb

    @application_capacity_mb.setter
    def application_capacity_mb(self, application_capacity_mb):
        """Sets the application_capacity_mb of this TenantStorageSettingsV2ResponseModel.

        The application capacity in tenant storage(MB).  # noqa: E501

        :param application_capacity_mb: The application_capacity_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :type: int
        """

        self._application_capacity_mb = application_capacity_mb

    @property
    def application_overage_allowed_mb(self):
        """Gets the application_overage_allowed_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501

        The application overage allowed in tenant storage(MB).  # noqa: E501

        :return: The application_overage_allowed_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._application_overage_allowed_mb

    @application_overage_allowed_mb.setter
    def application_overage_allowed_mb(self, application_overage_allowed_mb):
        """Sets the application_overage_allowed_mb of this TenantStorageSettingsV2ResponseModel.

        The application overage allowed in tenant storage(MB).  # noqa: E501

        :param application_overage_allowed_mb: The application_overage_allowed_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :type: int
        """

        self._application_overage_allowed_mb = application_overage_allowed_mb

    @property
    def application_max_file_size_mb(self):
        """Gets the application_max_file_size_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501

        The application maximum file size in tenant storage(MB).  # noqa: E501

        :return: The application_max_file_size_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._application_max_file_size_mb

    @application_max_file_size_mb.setter
    def application_max_file_size_mb(self, application_max_file_size_mb):
        """Sets the application_max_file_size_mb of this TenantStorageSettingsV2ResponseModel.

        The application maximum file size in tenant storage(MB).  # noqa: E501

        :param application_max_file_size_mb: The application_max_file_size_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :type: int
        """

        self._application_max_file_size_mb = application_max_file_size_mb

    @property
    def application_max_file_size_with_cdn_mb(self):
        """Gets the application_max_file_size_with_cdn_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501

        The application maximum file size with CDN in tenant storage(MB).  # noqa: E501

        :return: The application_max_file_size_with_cdn_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._application_max_file_size_with_cdn_mb

    @application_max_file_size_with_cdn_mb.setter
    def application_max_file_size_with_cdn_mb(self, application_max_file_size_with_cdn_mb):
        """Sets the application_max_file_size_with_cdn_mb of this TenantStorageSettingsV2ResponseModel.

        The application maximum file size with CDN in tenant storage(MB).  # noqa: E501

        :param application_max_file_size_with_cdn_mb: The application_max_file_size_with_cdn_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :type: int
        """

        self._application_max_file_size_with_cdn_mb = application_max_file_size_with_cdn_mb

    @property
    def content_capacity_mb(self):
        """Gets the content_capacity_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501

        The content capacity in tenant storage(MB).  # noqa: E501

        :return: The content_capacity_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._content_capacity_mb

    @content_capacity_mb.setter
    def content_capacity_mb(self, content_capacity_mb):
        """Sets the content_capacity_mb of this TenantStorageSettingsV2ResponseModel.

        The content capacity in tenant storage(MB).  # noqa: E501

        :param content_capacity_mb: The content_capacity_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :type: int
        """

        self._content_capacity_mb = content_capacity_mb

    @property
    def content_overage_allowed_mb(self):
        """Gets the content_overage_allowed_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501

        The content overage allowed in tenant storage(MB).  # noqa: E501

        :return: The content_overage_allowed_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._content_overage_allowed_mb

    @content_overage_allowed_mb.setter
    def content_overage_allowed_mb(self, content_overage_allowed_mb):
        """Sets the content_overage_allowed_mb of this TenantStorageSettingsV2ResponseModel.

        The content overage allowed in tenant storage(MB).  # noqa: E501

        :param content_overage_allowed_mb: The content_overage_allowed_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :type: int
        """

        self._content_overage_allowed_mb = content_overage_allowed_mb

    @property
    def content_max_file_size_mb(self):
        """Gets the content_max_file_size_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501

        The content maximum file size in tenant storage(MB).  # noqa: E501

        :return: The content_max_file_size_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._content_max_file_size_mb

    @content_max_file_size_mb.setter
    def content_max_file_size_mb(self, content_max_file_size_mb):
        """Sets the content_max_file_size_mb of this TenantStorageSettingsV2ResponseModel.

        The content maximum file size in tenant storage(MB).  # noqa: E501

        :param content_max_file_size_mb: The content_max_file_size_mb of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :type: int
        """

        self._content_max_file_size_mb = content_max_file_size_mb

    @property
    def file_encryption_enabled(self):
        """Gets the file_encryption_enabled of this TenantStorageSettingsV2ResponseModel.  # noqa: E501

        The file encryption enabled boolean in tenant storage.  # noqa: E501

        :return: The file_encryption_enabled of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._file_encryption_enabled

    @file_encryption_enabled.setter
    def file_encryption_enabled(self, file_encryption_enabled):
        """Sets the file_encryption_enabled of this TenantStorageSettingsV2ResponseModel.

        The file encryption enabled boolean in tenant storage.  # noqa: E501

        :param file_encryption_enabled: The file_encryption_enabled of this TenantStorageSettingsV2ResponseModel.  # noqa: E501
        :type: bool
        """

        self._file_encryption_enabled = file_encryption_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TenantStorageSettingsV2ResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TenantStorageSettingsV2ResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TenantStorageSettingsV2ResponseModel):
            return True

        return self.to_dict() != other.to_dict()
