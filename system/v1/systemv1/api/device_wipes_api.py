# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class DeviceWipesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_wipes_create_device_wipe_log_report_async(self, organization_group_uuid, device_wipe_request, **kwargs):  # noqa: E501
        """New - Creates the report for device wipe log.  # noqa: E501

        Creates the report for device wipe log in CSV or XLSX format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_create_device_wipe_log_report_async(organization_group_uuid, device_wipe_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :param DeviceWipeRequestV1 device_wipe_request: The request parameter to filter out the data for export.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_wipes_create_device_wipe_log_report_async_with_http_info(organization_group_uuid, device_wipe_request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_wipes_create_device_wipe_log_report_async_with_http_info(organization_group_uuid, device_wipe_request, **kwargs)  # noqa: E501
            return data

    def device_wipes_create_device_wipe_log_report_async_with_http_info(self, organization_group_uuid, device_wipe_request, **kwargs):  # noqa: E501
        """New - Creates the report for device wipe log.  # noqa: E501

        Creates the report for device wipe log in CSV or XLSX format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_create_device_wipe_log_report_async_with_http_info(organization_group_uuid, device_wipe_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :param DeviceWipeRequestV1 device_wipe_request: The request parameter to filter out the data for export.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'device_wipe_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_wipes_create_device_wipe_log_report_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `device_wipes_create_device_wipe_log_report_async`")  # noqa: E501
        # verify the required parameter 'device_wipe_request' is set
        if self.api_client.client_side_validation and ('device_wipe_request' not in params or
                                                       params['device_wipe_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_wipe_request` when calling `device_wipes_create_device_wipe_log_report_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_wipe_request' in params:
            body_params = params['device_wipe_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/device-wipes/reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_wipes_get_device_wipe_events_async(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the list of device wipe events for the specified organization group.  # noqa: E501

        Gets the list of device wipe events for devices enrolled in the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_get_device_wipe_events_async(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :param str search_text: The search text string which the device wipe results will be filtered by.
        :param datetime start_date: The start of the date range which the results will be filtered by.
        :param datetime end_date: The end of the date range which the results will be filtered by.
        :param object wipe_type: The wipe action type which the results will be filtered by. Supported values are DEVICE_WIPE, ENTERPRISE_WIPE.
        :param object wipe_source: The source of the wipe action by which the results will be filtered. Supported values are UNKNOWN, OTHER, DEVICE_DENYLIST_ACTION, COMPLIANCE, USER_DISABLED, ADMIN_ACTION, ADMIN_BULK_ACTION, SELF_SERVICE_PORTAL, DEVICE_SYNC, SMART_GROUP_EDIT, BULK_API_ACTION, DEVICE_UNENROLLMENT_REQUESTED, ADMIN_ACTION_DELETE_DEVICE, ADMIN_BULK_ACTION_DELETE_DEVICE, BULK_ADMIN_API_ACTION_DELETE_DEVICE, SINGLE_ADMIN_API_ACTION_DELETE_DEVICE.
        :param object wipe_status: The status of the wipe action by which the results will be filtered. Supported values are APPROVED, HELD, QUEUED, ABORTED.
        :param object ownership: The comma seperated device ownership types by which the results will be filtered. Supported values are UNKNOWN, CORPORATE_DEDICATED, EMPLOYEE_OWNED, CORPORATE_SHARED.
        :param int page: The page number being requested.
        :param int page_size: The maximum records per page. Default 50, Maximum page size is 500.
        :param object sort_column: The name of the column the results should be ordered by. Supported values are DATE, DEVICE_FRIENDLY_NAME, USER, ORGANIZATION_GROUP. Default is DATE
        :param object sort_direction: The sort order by direction. Supported values are ASC, DESC. Default ASC.
        :return: DeviceWipeResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_wipes_get_device_wipe_events_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_wipes_get_device_wipe_events_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def device_wipes_get_device_wipe_events_async_with_http_info(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the list of device wipe events for the specified organization group.  # noqa: E501

        Gets the list of device wipe events for devices enrolled in the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_get_device_wipe_events_async_with_http_info(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :param str search_text: The search text string which the device wipe results will be filtered by.
        :param datetime start_date: The start of the date range which the results will be filtered by.
        :param datetime end_date: The end of the date range which the results will be filtered by.
        :param object wipe_type: The wipe action type which the results will be filtered by. Supported values are DEVICE_WIPE, ENTERPRISE_WIPE.
        :param object wipe_source: The source of the wipe action by which the results will be filtered. Supported values are UNKNOWN, OTHER, DEVICE_DENYLIST_ACTION, COMPLIANCE, USER_DISABLED, ADMIN_ACTION, ADMIN_BULK_ACTION, SELF_SERVICE_PORTAL, DEVICE_SYNC, SMART_GROUP_EDIT, BULK_API_ACTION, DEVICE_UNENROLLMENT_REQUESTED, ADMIN_ACTION_DELETE_DEVICE, ADMIN_BULK_ACTION_DELETE_DEVICE, BULK_ADMIN_API_ACTION_DELETE_DEVICE, SINGLE_ADMIN_API_ACTION_DELETE_DEVICE.
        :param object wipe_status: The status of the wipe action by which the results will be filtered. Supported values are APPROVED, HELD, QUEUED, ABORTED.
        :param object ownership: The comma seperated device ownership types by which the results will be filtered. Supported values are UNKNOWN, CORPORATE_DEDICATED, EMPLOYEE_OWNED, CORPORATE_SHARED.
        :param int page: The page number being requested.
        :param int page_size: The maximum records per page. Default 50, Maximum page size is 500.
        :param object sort_column: The name of the column the results should be ordered by. Supported values are DATE, DEVICE_FRIENDLY_NAME, USER, ORGANIZATION_GROUP. Default is DATE
        :param object sort_direction: The sort order by direction. Supported values are ASC, DESC. Default ASC.
        :return: DeviceWipeResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'search_text', 'start_date', 'end_date', 'wipe_type', 'wipe_source', 'wipe_status', 'ownership', 'page', 'page_size', 'sort_column', 'sort_direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_wipes_get_device_wipe_events_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `device_wipes_get_device_wipe_events_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'search_text' in params:
            query_params.append(('search_text', params['search_text']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'wipe_type' in params:
            query_params.append(('wipe_type', params['wipe_type']))  # noqa: E501
        if 'wipe_source' in params:
            query_params.append(('wipe_source', params['wipe_source']))  # noqa: E501
        if 'wipe_status' in params:
            query_params.append(('wipe_status', params['wipe_status']))  # noqa: E501
        if 'ownership' in params:
            query_params.append(('ownership', params['ownership']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_column' in params:
            query_params.append(('sort_column', params['sort_column']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sort_direction', params['sort_direction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/device-wipes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceWipeResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_wipes_get_wipe_lock_state_async(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the state of the wipe lock.  # noqa: E501

        Returns the current state of the device wipe threshold lock.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_get_wipe_lock_state_async(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :return: WipeLockStateModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_wipes_get_wipe_lock_state_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_wipes_get_wipe_lock_state_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def device_wipes_get_wipe_lock_state_async_with_http_info(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the state of the wipe lock.  # noqa: E501

        Returns the current state of the device wipe threshold lock.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_get_wipe_lock_state_async_with_http_info(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :return: WipeLockStateModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_wipes_get_wipe_lock_state_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `device_wipes_get_wipe_lock_state_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/device-wipe-lock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WipeLockStateModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_wipes_reset_wipe_lock_async(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Resets the wipe lock to allow scheduled wipe actions to proceed.  # noqa: E501

        Unlocks the wipe actions that were placed in held status because of the wipe threshold setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_reset_wipe_lock_async(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_wipes_reset_wipe_lock_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_wipes_reset_wipe_lock_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def device_wipes_reset_wipe_lock_async_with_http_info(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Resets the wipe lock to allow scheduled wipe actions to proceed.  # noqa: E501

        Unlocks the wipe actions that were placed in held status because of the wipe threshold setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_reset_wipe_lock_async_with_http_info(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_wipes_reset_wipe_lock_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `device_wipes_reset_wipe_lock_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/device-wipe-lock', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_wipes_update_wipe_actions_async(self, organization_group_uuid, device_wipe_uuids, action, **kwargs):  # noqa: E501
        """New - Performs the specified action on the selected wipe actions.  # noqa: E501

        Approves or rejects the specified wipe actions for further processing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_update_wipe_actions_async(organization_group_uuid, device_wipe_uuids, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :param list[str] device_wipe_uuids: The list of uuids for the wipe action records.(Required). (required)
        :param object action: Specifies what action should be taken. Suppored actions are APPROVE, REJECT.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_wipes_update_wipe_actions_async_with_http_info(organization_group_uuid, device_wipe_uuids, action, **kwargs)  # noqa: E501
        else:
            (data) = self.device_wipes_update_wipe_actions_async_with_http_info(organization_group_uuid, device_wipe_uuids, action, **kwargs)  # noqa: E501
            return data

    def device_wipes_update_wipe_actions_async_with_http_info(self, organization_group_uuid, device_wipe_uuids, action, **kwargs):  # noqa: E501
        """New - Performs the specified action on the selected wipe actions.  # noqa: E501

        Approves or rejects the specified wipe actions for further processing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_wipes_update_wipe_actions_async_with_http_info(organization_group_uuid, device_wipe_uuids, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: The unique identifier of the organization group.(Required). (required)
        :param list[str] device_wipe_uuids: The list of uuids for the wipe action records.(Required). (required)
        :param object action: Specifies what action should be taken. Suppored actions are APPROVE, REJECT.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'device_wipe_uuids', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_wipes_update_wipe_actions_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `device_wipes_update_wipe_actions_async`")  # noqa: E501
        # verify the required parameter 'device_wipe_uuids' is set
        if self.api_client.client_side_validation and ('device_wipe_uuids' not in params or
                                                       params['device_wipe_uuids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_wipe_uuids` when calling `device_wipes_update_wipe_actions_async`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in params or
                                                       params['action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action` when calling `device_wipes_update_wipe_actions_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_wipe_uuids' in params:
            body_params = params['device_wipe_uuids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/device-wipes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
