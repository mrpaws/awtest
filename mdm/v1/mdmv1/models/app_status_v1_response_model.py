# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class AppStatusV1ResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appstatus': 'int',
        'devicestatus': 'list[DeviceStatusMessage]',
        'authentication': 'DeviceAppStatusAuthDetailsModel_',
        'isappassigned': 'bool'
    }

    attribute_map = {
        'appstatus': 'appstatus',
        'devicestatus': 'devicestatus',
        'authentication': 'authentication',
        'isappassigned': 'isappassigned'
    }

    def __init__(self, appstatus=None, devicestatus=None, authentication=None, isappassigned=None, _configuration=None):  # noqa: E501
        """AppStatusV1ResponseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._appstatus = None
        self._devicestatus = None
        self._authentication = None
        self._isappassigned = None
        self.discriminator = None

        if appstatus is not None:
            self.appstatus = appstatus
        if devicestatus is not None:
            self.devicestatus = devicestatus
        if authentication is not None:
            self.authentication = authentication
        if isappassigned is not None:
            self.isappassigned = isappassigned

    @property
    def appstatus(self):
        """Gets the appstatus of this AppStatusV1ResponseModel.  # noqa: E501

        Gets or sets AppStatus.  # noqa: E501

        :return: The appstatus of this AppStatusV1ResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._appstatus

    @appstatus.setter
    def appstatus(self, appstatus):
        """Sets the appstatus of this AppStatusV1ResponseModel.

        Gets or sets AppStatus.  # noqa: E501

        :param appstatus: The appstatus of this AppStatusV1ResponseModel.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                appstatus not in allowed_values):
            raise ValueError(
                "Invalid value for `appstatus` ({0}), must be one of {1}"  # noqa: E501
                .format(appstatus, allowed_values)
            )

        self._appstatus = appstatus

    @property
    def devicestatus(self):
        """Gets the devicestatus of this AppStatusV1ResponseModel.  # noqa: E501

        Gets or sets dictionary containing setting name and value for Status Endpoint data.  # noqa: E501

        :return: The devicestatus of this AppStatusV1ResponseModel.  # noqa: E501
        :rtype: list[DeviceStatusMessage]
        """
        return self._devicestatus

    @devicestatus.setter
    def devicestatus(self, devicestatus):
        """Sets the devicestatus of this AppStatusV1ResponseModel.

        Gets or sets dictionary containing setting name and value for Status Endpoint data.  # noqa: E501

        :param devicestatus: The devicestatus of this AppStatusV1ResponseModel.  # noqa: E501
        :type: list[DeviceStatusMessage]
        """

        self._devicestatus = devicestatus

    @property
    def authentication(self):
        """Gets the authentication of this AppStatusV1ResponseModel.  # noqa: E501

        Gets or sets authentication details.  # noqa: E501

        :return: The authentication of this AppStatusV1ResponseModel.  # noqa: E501
        :rtype: DeviceAppStatusAuthDetailsModel_
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this AppStatusV1ResponseModel.

        Gets or sets authentication details.  # noqa: E501

        :param authentication: The authentication of this AppStatusV1ResponseModel.  # noqa: E501
        :type: DeviceAppStatusAuthDetailsModel_
        """

        self._authentication = authentication

    @property
    def isappassigned(self):
        """Gets the isappassigned of this AppStatusV1ResponseModel.  # noqa: E501

        Gets or sets a value indicating whether whether app has any assignments.  # noqa: E501

        :return: The isappassigned of this AppStatusV1ResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._isappassigned

    @isappassigned.setter
    def isappassigned(self, isappassigned):
        """Sets the isappassigned of this AppStatusV1ResponseModel.

        Gets or sets a value indicating whether whether app has any assignments.  # noqa: E501

        :param isappassigned: The isappassigned of this AppStatusV1ResponseModel.  # noqa: E501
        :type: bool
        """

        self._isappassigned = isappassigned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppStatusV1ResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppStatusV1ResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppStatusV1ResponseModel):
            return True

        return self.to_dict() != other.to_dict()
