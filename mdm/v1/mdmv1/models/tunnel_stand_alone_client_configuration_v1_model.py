# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class TunnelStandAloneClientConfigurationV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meta': 'MetaDetailsV1Model',
        'gateway': 'TunnelServerConfigV1Model',
        'authentication': 'TunnelClientAuthenticationV1Model',
        'device_traffic_rule_set': 'DeviceTrafficRuleSetV3Model',
        'configuration': 'object'
    }

    attribute_map = {
        'meta': 'meta',
        'gateway': 'gateway',
        'authentication': 'authentication',
        'device_traffic_rule_set': 'device_traffic_rule_set',
        'configuration': 'configuration'
    }

    def __init__(self, meta=None, gateway=None, authentication=None, device_traffic_rule_set=None, configuration=None, _configuration=None):  # noqa: E501
        """TunnelStandAloneClientConfigurationV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._meta = None
        self._gateway = None
        self._authentication = None
        self._device_traffic_rule_set = None
        self._configuration = None
        self.discriminator = None

        if meta is not None:
            self.meta = meta
        if gateway is not None:
            self.gateway = gateway
        if authentication is not None:
            self.authentication = authentication
        if device_traffic_rule_set is not None:
            self.device_traffic_rule_set = device_traffic_rule_set
        if configuration is not None:
            self.configuration = configuration

    @property
    def meta(self):
        """Gets the meta of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501

        Meta details about all the configurations.  # noqa: E501

        :return: The meta of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :rtype: MetaDetailsV1Model
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this TunnelStandAloneClientConfigurationV1Model.

        Meta details about all the configurations.  # noqa: E501

        :param meta: The meta of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :type: MetaDetailsV1Model
        """

        self._meta = meta

    @property
    def gateway(self):
        """Gets the gateway of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501

        The tunnel server configuration.  # noqa: E501

        :return: The gateway of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :rtype: TunnelServerConfigV1Model
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this TunnelStandAloneClientConfigurationV1Model.

        The tunnel server configuration.  # noqa: E501

        :param gateway: The gateway of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :type: TunnelServerConfigV1Model
        """

        self._gateway = gateway

    @property
    def authentication(self):
        """Gets the authentication of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501

        The tunnel client authentication details.  # noqa: E501

        :return: The authentication of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :rtype: TunnelClientAuthenticationV1Model
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this TunnelStandAloneClientConfigurationV1Model.

        The tunnel client authentication details.  # noqa: E501

        :param authentication: The authentication of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :type: TunnelClientAuthenticationV1Model
        """

        self._authentication = authentication

    @property
    def device_traffic_rule_set(self):
        """Gets the device_traffic_rule_set of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501

        The device traffic rule set payload.  # noqa: E501

        :return: The device_traffic_rule_set of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :rtype: DeviceTrafficRuleSetV3Model
        """
        return self._device_traffic_rule_set

    @device_traffic_rule_set.setter
    def device_traffic_rule_set(self, device_traffic_rule_set):
        """Sets the device_traffic_rule_set of this TunnelStandAloneClientConfigurationV1Model.

        The device traffic rule set payload.  # noqa: E501

        :param device_traffic_rule_set: The device_traffic_rule_set of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :type: DeviceTrafficRuleSetV3Model
        """

        self._device_traffic_rule_set = device_traffic_rule_set

    @property
    def configuration(self):
        """Gets the configuration of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501

        Represent the configuration settings. Can contain any of MacOsProfileV1Model or WindowsProfileV1Model  # noqa: E501

        :return: The configuration of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this TunnelStandAloneClientConfigurationV1Model.

        Represent the configuration settings. Can contain any of MacOsProfileV1Model or WindowsProfileV1Model  # noqa: E501

        :param configuration: The configuration of this TunnelStandAloneClientConfigurationV1Model.  # noqa: E501
        :type: object
        """

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TunnelStandAloneClientConfigurationV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TunnelStandAloneClientConfigurationV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TunnelStandAloneClientConfigurationV1Model):
            return True

        return self.to_dict() != other.to_dict()
