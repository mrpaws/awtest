# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class AdvancedLdapSyncJobProgressResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_status': 'int',
        'job_uuid': 'str',
        'completed_enrollment_users': 'int',
        'pending_enrollment_users': 'int',
        'total_enrollment_users': 'int'
    }

    attribute_map = {
        'job_status': 'job_status',
        'job_uuid': 'job_uuid',
        'completed_enrollment_users': 'completed_enrollment_users',
        'pending_enrollment_users': 'pending_enrollment_users',
        'total_enrollment_users': 'total_enrollment_users'
    }

    def __init__(self, job_status=None, job_uuid=None, completed_enrollment_users=None, pending_enrollment_users=None, total_enrollment_users=None, _configuration=None):  # noqa: E501
        """AdvancedLdapSyncJobProgressResponseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._job_status = None
        self._job_uuid = None
        self._completed_enrollment_users = None
        self._pending_enrollment_users = None
        self._total_enrollment_users = None
        self.discriminator = None

        if job_status is not None:
            self.job_status = job_status
        if job_uuid is not None:
            self.job_uuid = job_uuid
        if completed_enrollment_users is not None:
            self.completed_enrollment_users = completed_enrollment_users
        if pending_enrollment_users is not None:
            self.pending_enrollment_users = pending_enrollment_users
        if total_enrollment_users is not None:
            self.total_enrollment_users = total_enrollment_users

    @property
    def job_status(self):
        """Gets the job_status of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501

        The status of the advanced ldap sync job process.  # noqa: E501

        :return: The job_status of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this AdvancedLdapSyncJobProgressResponseModel.

        The status of the advanced ldap sync job process.  # noqa: E501

        :param job_status: The job_status of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # noqa: E501
        if (self._configuration.client_side_validation and
                job_status not in allowed_values):
            raise ValueError(
                "Invalid value for `job_status` ({0}), must be one of {1}"  # noqa: E501
                .format(job_status, allowed_values)
            )

        self._job_status = job_status

    @property
    def job_uuid(self):
        """Gets the job_uuid of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501

        The unique identifier for the  advanced ldap sync job status.  # noqa: E501

        :return: The job_uuid of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._job_uuid

    @job_uuid.setter
    def job_uuid(self, job_uuid):
        """Sets the job_uuid of this AdvancedLdapSyncJobProgressResponseModel.

        The unique identifier for the  advanced ldap sync job status.  # noqa: E501

        :param job_uuid: The job_uuid of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :type: str
        """

        self._job_uuid = job_uuid

    @property
    def completed_enrollment_users(self):
        """Gets the completed_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501

        It indicates users completed enrollment.  # noqa: E501

        :return: The completed_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._completed_enrollment_users

    @completed_enrollment_users.setter
    def completed_enrollment_users(self, completed_enrollment_users):
        """Sets the completed_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.

        It indicates users completed enrollment.  # noqa: E501

        :param completed_enrollment_users: The completed_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :type: int
        """

        self._completed_enrollment_users = completed_enrollment_users

    @property
    def pending_enrollment_users(self):
        """Gets the pending_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501

        It indicates users left with enrollment.  # noqa: E501

        :return: The pending_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._pending_enrollment_users

    @pending_enrollment_users.setter
    def pending_enrollment_users(self, pending_enrollment_users):
        """Sets the pending_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.

        It indicates users left with enrollment.  # noqa: E501

        :param pending_enrollment_users: The pending_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :type: int
        """

        self._pending_enrollment_users = pending_enrollment_users

    @property
    def total_enrollment_users(self):
        """Gets the total_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501

        It indicates total number of users for enrollment.  # noqa: E501

        :return: The total_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._total_enrollment_users

    @total_enrollment_users.setter
    def total_enrollment_users(self, total_enrollment_users):
        """Sets the total_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.

        It indicates total number of users for enrollment.  # noqa: E501

        :param total_enrollment_users: The total_enrollment_users of this AdvancedLdapSyncJobProgressResponseModel.  # noqa: E501
        :type: int
        """

        self._total_enrollment_users = total_enrollment_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvancedLdapSyncJobProgressResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedLdapSyncJobProgressResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdvancedLdapSyncJobProgressResponseModel):
            return True

        return self.to_dict() != other.to_dict()
