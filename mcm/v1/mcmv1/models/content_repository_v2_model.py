# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mcmv1.configuration import Configuration


class ContentRepositoryV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'repository_type': 'str',
        'link': 'str',
        'organization_group_uuid': 'str',
        'enable_certificate_based_authentication': 'bool',
        'access_via': 'str',
        'content_gateway_configuration_uuid': 'str',
        'allow_children': 'bool',
        'permissions': 'list[str]',
        'allow_delete': 'bool',
        'authentication_type': 'str',
        'user_name': 'str',
        'password': 'str',
        'view_online_only': 'bool',
        'allow_email': 'bool',
        'allow_third_party_export': 'bool',
        'allow_to_other_repo_export': 'bool',
        'enable_watermark': 'bool',
        'allow_printing': 'bool',
        'allow_edit': 'bool',
        'device_ownership': 'str',
        'organization_groups': 'list[str]',
        'user_groups': 'list[str]',
        'download_method': 'str',
        'download_while_roaming': 'bool',
        'force_download': 'bool',
        'download_priority': 'str',
        'content_required': 'bool',
        'content_download_date': 'datetime',
        'content_effective_date': 'datetime',
        'content_expiry_date': 'datetime',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'repository_type': 'repository_type',
        'link': 'link',
        'organization_group_uuid': 'organization_group_uuid',
        'enable_certificate_based_authentication': 'enable_certificate_based_authentication',
        'access_via': 'access_via',
        'content_gateway_configuration_uuid': 'content_gateway_configuration_uuid',
        'allow_children': 'allow_children',
        'permissions': 'permissions',
        'allow_delete': 'allow_delete',
        'authentication_type': 'authentication_type',
        'user_name': 'user_name',
        'password': 'password',
        'view_online_only': 'view_online_only',
        'allow_email': 'allow_email',
        'allow_third_party_export': 'allow_third_party_export',
        'allow_to_other_repo_export': 'allow_to_other_repo_export',
        'enable_watermark': 'enable_watermark',
        'allow_printing': 'allow_printing',
        'allow_edit': 'allow_edit',
        'device_ownership': 'device_ownership',
        'organization_groups': 'organization_groups',
        'user_groups': 'user_groups',
        'download_method': 'download_method',
        'download_while_roaming': 'download_while_roaming',
        'force_download': 'force_download',
        'download_priority': 'download_priority',
        'content_required': 'content_required',
        'content_download_date': 'content_download_date',
        'content_effective_date': 'content_effective_date',
        'content_expiry_date': 'content_expiry_date',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, name=None, repository_type=None, link=None, organization_group_uuid=None, enable_certificate_based_authentication=None, access_via=None, content_gateway_configuration_uuid=None, allow_children=None, permissions=None, allow_delete=None, authentication_type=None, user_name=None, password=None, view_online_only=None, allow_email=None, allow_third_party_export=None, allow_to_other_repo_export=None, enable_watermark=None, allow_printing=None, allow_edit=None, device_ownership=None, organization_groups=None, user_groups=None, download_method=None, download_while_roaming=None, force_download=None, download_priority=None, content_required=None, content_download_date=None, content_effective_date=None, content_expiry_date=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """ContentRepositoryV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._repository_type = None
        self._link = None
        self._organization_group_uuid = None
        self._enable_certificate_based_authentication = None
        self._access_via = None
        self._content_gateway_configuration_uuid = None
        self._allow_children = None
        self._permissions = None
        self._allow_delete = None
        self._authentication_type = None
        self._user_name = None
        self._password = None
        self._view_online_only = None
        self._allow_email = None
        self._allow_third_party_export = None
        self._allow_to_other_repo_export = None
        self._enable_watermark = None
        self._allow_printing = None
        self._allow_edit = None
        self._device_ownership = None
        self._organization_groups = None
        self._user_groups = None
        self._download_method = None
        self._download_while_roaming = None
        self._force_download = None
        self._download_priority = None
        self._content_required = None
        self._content_download_date = None
        self._content_effective_date = None
        self._content_expiry_date = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if repository_type is not None:
            self.repository_type = repository_type
        if link is not None:
            self.link = link
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if enable_certificate_based_authentication is not None:
            self.enable_certificate_based_authentication = enable_certificate_based_authentication
        if access_via is not None:
            self.access_via = access_via
        if content_gateway_configuration_uuid is not None:
            self.content_gateway_configuration_uuid = content_gateway_configuration_uuid
        if allow_children is not None:
            self.allow_children = allow_children
        if permissions is not None:
            self.permissions = permissions
        if allow_delete is not None:
            self.allow_delete = allow_delete
        if authentication_type is not None:
            self.authentication_type = authentication_type
        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if view_online_only is not None:
            self.view_online_only = view_online_only
        if allow_email is not None:
            self.allow_email = allow_email
        if allow_third_party_export is not None:
            self.allow_third_party_export = allow_third_party_export
        if allow_to_other_repo_export is not None:
            self.allow_to_other_repo_export = allow_to_other_repo_export
        if enable_watermark is not None:
            self.enable_watermark = enable_watermark
        if allow_printing is not None:
            self.allow_printing = allow_printing
        if allow_edit is not None:
            self.allow_edit = allow_edit
        if device_ownership is not None:
            self.device_ownership = device_ownership
        if organization_groups is not None:
            self.organization_groups = organization_groups
        if user_groups is not None:
            self.user_groups = user_groups
        if download_method is not None:
            self.download_method = download_method
        if download_while_roaming is not None:
            self.download_while_roaming = download_while_roaming
        if force_download is not None:
            self.force_download = force_download
        if download_priority is not None:
            self.download_priority = download_priority
        if content_required is not None:
            self.content_required = content_required
        if content_download_date is not None:
            self.content_download_date = content_download_date
        if content_effective_date is not None:
            self.content_effective_date = content_effective_date
        if content_expiry_date is not None:
            self.content_expiry_date = content_expiry_date
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def name(self):
        """Gets the name of this ContentRepositoryV2Model.  # noqa: E501

        Repository name.  # noqa: E501

        :return: The name of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentRepositoryV2Model.

        Repository name.  # noqa: E501

        :param name: The name of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repository_type(self):
        """Gets the repository_type of this ContentRepositoryV2Model.  # noqa: E501

        Repository type.  # noqa: E501

        :return: The repository_type of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this ContentRepositoryV2Model.

        Repository type.  # noqa: E501

        :param repository_type: The repository_type of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["FILE", "WEBDAV", "SHAREPOINT_WEBDAV", "BOX", "AMAZON_S3", "SHAREPOINT", "SHAREPOINTO365", "GOOGLEDRIVE", "SKYDRIVE", "SHAREPOINT_PERSONAL", "SHAREPOINTO365_PERSONAL", "CMIS", "REMOTE_FILE_STORAGE", "SHAREPOINT_WIN_AUTH", "SHAREPOINT_ADFS", "SHAREPOINTO365_ADFS", "SHAREPOINTO365_ADFS_PERSONAL", "DROPBOX", "SHAREPOINTO365_ADFS_PERSONAL_REST", "SHAREPOINTO365_ADFS_REST", "ONEDRIVE_FOR_BUSINESS_OAUTH", "SHAREPOINTO365_OAUTH"]  # noqa: E501
        if (self._configuration.client_side_validation and
                repository_type not in allowed_values):
            raise ValueError(
                "Invalid value for `repository_type` ({0}), must be one of {1}"  # noqa: E501
                .format(repository_type, allowed_values)
            )

        self._repository_type = repository_type

    @property
    def link(self):
        """Gets the link of this ContentRepositoryV2Model.  # noqa: E501

        Repository link.  # noqa: E501

        :return: The link of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ContentRepositoryV2Model.

        Repository link.  # noqa: E501

        :param link: The link of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this ContentRepositoryV2Model.  # noqa: E501

        Repository Organization Group Uuid.  # noqa: E501

        :return: The organization_group_uuid of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this ContentRepositoryV2Model.

        Repository Organization Group Uuid.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def enable_certificate_based_authentication(self):
        """Gets the enable_certificate_based_authentication of this ContentRepositoryV2Model.  # noqa: E501

        Flag to enable certificate based authentication.  # noqa: E501

        :return: The enable_certificate_based_authentication of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._enable_certificate_based_authentication

    @enable_certificate_based_authentication.setter
    def enable_certificate_based_authentication(self, enable_certificate_based_authentication):
        """Sets the enable_certificate_based_authentication of this ContentRepositoryV2Model.

        Flag to enable certificate based authentication.  # noqa: E501

        :param enable_certificate_based_authentication: The enable_certificate_based_authentication of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._enable_certificate_based_authentication = enable_certificate_based_authentication

    @property
    def access_via(self):
        """Gets the access_via of this ContentRepositoryV2Model.  # noqa: E501

        To allow routing of requests via content gateway.  # noqa: E501

        :return: The access_via of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._access_via

    @access_via.setter
    def access_via(self, access_via):
        """Sets the access_via of this ContentRepositoryV2Model.

        To allow routing of requests via content gateway.  # noqa: E501

        :param access_via: The access_via of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["WITHOUT_CONTENT_GATEWAY", "WITH_CONTENT_GATEWAY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                access_via not in allowed_values):
            raise ValueError(
                "Invalid value for `access_via` ({0}), must be one of {1}"  # noqa: E501
                .format(access_via, allowed_values)
            )

        self._access_via = access_via

    @property
    def content_gateway_configuration_uuid(self):
        """Gets the content_gateway_configuration_uuid of this ContentRepositoryV2Model.  # noqa: E501

        Content gateway configuration uuid.  # noqa: E501

        :return: The content_gateway_configuration_uuid of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_configuration_uuid

    @content_gateway_configuration_uuid.setter
    def content_gateway_configuration_uuid(self, content_gateway_configuration_uuid):
        """Sets the content_gateway_configuration_uuid of this ContentRepositoryV2Model.

        Content gateway configuration uuid.  # noqa: E501

        :param content_gateway_configuration_uuid: The content_gateway_configuration_uuid of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_configuration_uuid = content_gateway_configuration_uuid

    @property
    def allow_children(self):
        """Gets the allow_children of this ContentRepositoryV2Model.  # noqa: E501

        Allow inheritance in repository.  # noqa: E501

        :return: The allow_children of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_children

    @allow_children.setter
    def allow_children(self, allow_children):
        """Sets the allow_children of this ContentRepositoryV2Model.

        Allow inheritance in repository.  # noqa: E501

        :param allow_children: The allow_children of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_children = allow_children

    @property
    def permissions(self):
        """Gets the permissions of this ContentRepositoryV2Model.  # noqa: E501

        Repository permissions.  # noqa: E501

        :return: The permissions of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ContentRepositoryV2Model.

        Repository permissions.  # noqa: E501

        :param permissions: The permissions of this ContentRepositoryV2Model.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NONE", "READ", "WRITE", "DELETE", "SHARE_READ", "SHARE_EDIT", "VIEWER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(permissions).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions

    @property
    def allow_delete(self):
        """Gets the allow_delete of this ContentRepositoryV2Model.  # noqa: E501

        Allow delete.  # noqa: E501

        :return: The allow_delete of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_delete

    @allow_delete.setter
    def allow_delete(self, allow_delete):
        """Sets the allow_delete of this ContentRepositoryV2Model.

        Allow delete.  # noqa: E501

        :param allow_delete: The allow_delete of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_delete = allow_delete

    @property
    def authentication_type(self):
        """Gets the authentication_type of this ContentRepositoryV2Model.  # noqa: E501

        Repository authentication type.  # noqa: E501

        :return: The authentication_type of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this ContentRepositoryV2Model.

        Repository authentication type.  # noqa: E501

        :param authentication_type: The authentication_type of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "USER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                authentication_type not in allowed_values):
            raise ValueError(
                "Invalid value for `authentication_type` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication_type, allowed_values)
            )

        self._authentication_type = authentication_type

    @property
    def user_name(self):
        """Gets the user_name of this ContentRepositoryV2Model.  # noqa: E501

        Authentication username if authentication set to user.  # noqa: E501

        :return: The user_name of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ContentRepositoryV2Model.

        Authentication username if authentication set to user.  # noqa: E501

        :param user_name: The user_name of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this ContentRepositoryV2Model.  # noqa: E501

        Authentication password if authentication set to user.  # noqa: E501

        :return: The password of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ContentRepositoryV2Model.

        Authentication password if authentication set to user.  # noqa: E501

        :param password: The password of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def view_online_only(self):
        """Gets the view_online_only of this ContentRepositoryV2Model.  # noqa: E501

        Flag to allow view online or offline.  # noqa: E501

        :return: The view_online_only of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._view_online_only

    @view_online_only.setter
    def view_online_only(self, view_online_only):
        """Sets the view_online_only of this ContentRepositoryV2Model.

        Flag to allow view online or offline.  # noqa: E501

        :param view_online_only: The view_online_only of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._view_online_only = view_online_only

    @property
    def allow_email(self):
        """Gets the allow_email of this ContentRepositoryV2Model.  # noqa: E501

        Flag to allow email the repository.  # noqa: E501

        :return: The allow_email of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_email

    @allow_email.setter
    def allow_email(self, allow_email):
        """Sets the allow_email of this ContentRepositoryV2Model.

        Flag to allow email the repository.  # noqa: E501

        :param allow_email: The allow_email of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_email = allow_email

    @property
    def allow_third_party_export(self):
        """Gets the allow_third_party_export of this ContentRepositoryV2Model.  # noqa: E501

        Flag to allow repository export to third party apps.  # noqa: E501

        :return: The allow_third_party_export of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_third_party_export

    @allow_third_party_export.setter
    def allow_third_party_export(self, allow_third_party_export):
        """Sets the allow_third_party_export of this ContentRepositoryV2Model.

        Flag to allow repository export to third party apps.  # noqa: E501

        :param allow_third_party_export: The allow_third_party_export of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_third_party_export = allow_third_party_export

    @property
    def allow_to_other_repo_export(self):
        """Gets the allow_to_other_repo_export of this ContentRepositoryV2Model.  # noqa: E501

        Flag to allow repsitory export to other repository.  # noqa: E501

        :return: The allow_to_other_repo_export of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_to_other_repo_export

    @allow_to_other_repo_export.setter
    def allow_to_other_repo_export(self, allow_to_other_repo_export):
        """Sets the allow_to_other_repo_export of this ContentRepositoryV2Model.

        Flag to allow repsitory export to other repository.  # noqa: E501

        :param allow_to_other_repo_export: The allow_to_other_repo_export of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_to_other_repo_export = allow_to_other_repo_export

    @property
    def enable_watermark(self):
        """Gets the enable_watermark of this ContentRepositoryV2Model.  # noqa: E501

        Flag to allow watermark.  # noqa: E501

        :return: The enable_watermark of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._enable_watermark

    @enable_watermark.setter
    def enable_watermark(self, enable_watermark):
        """Sets the enable_watermark of this ContentRepositoryV2Model.

        Flag to allow watermark.  # noqa: E501

        :param enable_watermark: The enable_watermark of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._enable_watermark = enable_watermark

    @property
    def allow_printing(self):
        """Gets the allow_printing of this ContentRepositoryV2Model.  # noqa: E501

        Flag to allow printing.  # noqa: E501

        :return: The allow_printing of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_printing

    @allow_printing.setter
    def allow_printing(self, allow_printing):
        """Sets the allow_printing of this ContentRepositoryV2Model.

        Flag to allow printing.  # noqa: E501

        :param allow_printing: The allow_printing of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_printing = allow_printing

    @property
    def allow_edit(self):
        """Gets the allow_edit of this ContentRepositoryV2Model.  # noqa: E501

        Flag to allow edit.  # noqa: E501

        :return: The allow_edit of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_edit

    @allow_edit.setter
    def allow_edit(self, allow_edit):
        """Sets the allow_edit of this ContentRepositoryV2Model.

        Flag to allow edit.  # noqa: E501

        :param allow_edit: The allow_edit of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_edit = allow_edit

    @property
    def device_ownership(self):
        """Gets the device_ownership of this ContentRepositoryV2Model.  # noqa: E501

        Defines the device ownership.  # noqa: E501

        :return: The device_ownership of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._device_ownership

    @device_ownership.setter
    def device_ownership(self, device_ownership):
        """Sets the device_ownership of this ContentRepositoryV2Model.

        Defines the device ownership.  # noqa: E501

        :param device_ownership: The device_ownership of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["ANY", "CORPORATE_DEDICATED", "CORPORATE_SHARED", "EMPLOYEE_OWNED", "UNDEFINED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_ownership not in allowed_values):
            raise ValueError(
                "Invalid value for `device_ownership` ({0}), must be one of {1}"  # noqa: E501
                .format(device_ownership, allowed_values)
            )

        self._device_ownership = device_ownership

    @property
    def organization_groups(self):
        """Gets the organization_groups of this ContentRepositoryV2Model.  # noqa: E501

        List of Organization Groups assigned to repository.  # noqa: E501

        :return: The organization_groups of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._organization_groups

    @organization_groups.setter
    def organization_groups(self, organization_groups):
        """Sets the organization_groups of this ContentRepositoryV2Model.

        List of Organization Groups assigned to repository.  # noqa: E501

        :param organization_groups: The organization_groups of this ContentRepositoryV2Model.  # noqa: E501
        :type: list[str]
        """

        self._organization_groups = organization_groups

    @property
    def user_groups(self):
        """Gets the user_groups of this ContentRepositoryV2Model.  # noqa: E501

        List of user groups assigned to repository.  # noqa: E501

        :return: The user_groups of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this ContentRepositoryV2Model.

        List of user groups assigned to repository.  # noqa: E501

        :param user_groups: The user_groups of this ContentRepositoryV2Model.  # noqa: E501
        :type: list[str]
        """

        self._user_groups = user_groups

    @property
    def download_method(self):
        """Gets the download_method of this ContentRepositoryV2Model.  # noqa: E501

        Defines the content download method.  # noqa: E501

        :return: The download_method of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._download_method

    @download_method.setter
    def download_method(self, download_method):
        """Sets the download_method of this ContentRepositoryV2Model.

        Defines the content download method.  # noqa: E501

        :param download_method: The download_method of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "ANY", "WIFI", "3G", "4G", "EDGE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                download_method not in allowed_values):
            raise ValueError(
                "Invalid value for `download_method` ({0}), must be one of {1}"  # noqa: E501
                .format(download_method, allowed_values)
            )

        self._download_method = download_method

    @property
    def download_while_roaming(self):
        """Gets the download_while_roaming of this ContentRepositoryV2Model.  # noqa: E501

        Flag to allow download while roaming.  # noqa: E501

        :return: The download_while_roaming of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._download_while_roaming

    @download_while_roaming.setter
    def download_while_roaming(self, download_while_roaming):
        """Sets the download_while_roaming of this ContentRepositoryV2Model.

        Flag to allow download while roaming.  # noqa: E501

        :param download_while_roaming: The download_while_roaming of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._download_while_roaming = download_while_roaming

    @property
    def force_download(self):
        """Gets the force_download of this ContentRepositoryV2Model.  # noqa: E501

        Flag to enable force download.  # noqa: E501

        :return: The force_download of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._force_download

    @force_download.setter
    def force_download(self, force_download):
        """Sets the force_download of this ContentRepositoryV2Model.

        Flag to enable force download.  # noqa: E501

        :param force_download: The force_download of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._force_download = force_download

    @property
    def download_priority(self):
        """Gets the download_priority of this ContentRepositoryV2Model.  # noqa: E501

        Defines the content download priority.  # noqa: E501

        :return: The download_priority of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._download_priority

    @download_priority.setter
    def download_priority(self, download_priority):
        """Sets the download_priority of this ContentRepositoryV2Model.

        Defines the content download priority.  # noqa: E501

        :param download_priority: The download_priority of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIGH", "NORMAL", "LOW"]  # noqa: E501
        if (self._configuration.client_side_validation and
                download_priority not in allowed_values):
            raise ValueError(
                "Invalid value for `download_priority` ({0}), must be one of {1}"  # noqa: E501
                .format(download_priority, allowed_values)
            )

        self._download_priority = download_priority

    @property
    def content_required(self):
        """Gets the content_required of this ContentRepositoryV2Model.  # noqa: E501

        Flag to mark content is required.  # noqa: E501

        :return: The content_required of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._content_required

    @content_required.setter
    def content_required(self, content_required):
        """Sets the content_required of this ContentRepositoryV2Model.

        Flag to mark content is required.  # noqa: E501

        :param content_required: The content_required of this ContentRepositoryV2Model.  # noqa: E501
        :type: bool
        """

        self._content_required = content_required

    @property
    def content_download_date(self):
        """Gets the content_download_date of this ContentRepositoryV2Model.  # noqa: E501

        Defines the content download date.  # noqa: E501

        :return: The content_download_date of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._content_download_date

    @content_download_date.setter
    def content_download_date(self, content_download_date):
        """Sets the content_download_date of this ContentRepositoryV2Model.

        Defines the content download date.  # noqa: E501

        :param content_download_date: The content_download_date of this ContentRepositoryV2Model.  # noqa: E501
        :type: datetime
        """

        self._content_download_date = content_download_date

    @property
    def content_effective_date(self):
        """Gets the content_effective_date of this ContentRepositoryV2Model.  # noqa: E501

        Defines the content effective date.  # noqa: E501

        :return: The content_effective_date of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._content_effective_date

    @content_effective_date.setter
    def content_effective_date(self, content_effective_date):
        """Sets the content_effective_date of this ContentRepositoryV2Model.

        Defines the content effective date.  # noqa: E501

        :param content_effective_date: The content_effective_date of this ContentRepositoryV2Model.  # noqa: E501
        :type: datetime
        """

        self._content_effective_date = content_effective_date

    @property
    def content_expiry_date(self):
        """Gets the content_expiry_date of this ContentRepositoryV2Model.  # noqa: E501

        Defines the content expiry date.  # noqa: E501

        :return: The content_expiry_date of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._content_expiry_date

    @content_expiry_date.setter
    def content_expiry_date(self, content_expiry_date):
        """Sets the content_expiry_date of this ContentRepositoryV2Model.

        Defines the content expiry date.  # noqa: E501

        :param content_expiry_date: The content_expiry_date of this ContentRepositoryV2Model.  # noqa: E501
        :type: datetime
        """

        self._content_expiry_date = content_expiry_date

    @property
    def id(self):
        """Gets the id of this ContentRepositoryV2Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContentRepositoryV2Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this ContentRepositoryV2Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ContentRepositoryV2Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this ContentRepositoryV2Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ContentRepositoryV2Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this ContentRepositoryV2Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentRepositoryV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentRepositoryV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentRepositoryV2Model):
            return True

        return self.to_dict() != other.to_dict()
