# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class BulkResponseV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_count': 'int',
        'accepted_count': 'int',
        'failed_count': 'int',
        'faults': 'list[BulkResponseFaultV1]',
        'accepted_resources': 'list[ResourceValidationResponseV1Model]'
    }

    attribute_map = {
        'total_count': 'total_count',
        'accepted_count': 'accepted_count',
        'failed_count': 'failed_count',
        'faults': 'faults',
        'accepted_resources': 'accepted_resources'
    }

    def __init__(self, total_count=None, accepted_count=None, failed_count=None, faults=None, accepted_resources=None, _configuration=None):  # noqa: E501
        """BulkResponseV1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_count = None
        self._accepted_count = None
        self._failed_count = None
        self._faults = None
        self._accepted_resources = None
        self.discriminator = None

        if total_count is not None:
            self.total_count = total_count
        if accepted_count is not None:
            self.accepted_count = accepted_count
        if failed_count is not None:
            self.failed_count = failed_count
        if faults is not None:
            self.faults = faults
        if accepted_resources is not None:
            self.accepted_resources = accepted_resources

    @property
    def total_count(self):
        """Gets the total_count of this BulkResponseV1.  # noqa: E501

        The total count of requests.  # noqa: E501

        :return: The total_count of this BulkResponseV1.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this BulkResponseV1.

        The total count of requests.  # noqa: E501

        :param total_count: The total_count of this BulkResponseV1.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def accepted_count(self):
        """Gets the accepted_count of this BulkResponseV1.  # noqa: E501

        The count of requests succeeded.  # noqa: E501

        :return: The accepted_count of this BulkResponseV1.  # noqa: E501
        :rtype: int
        """
        return self._accepted_count

    @accepted_count.setter
    def accepted_count(self, accepted_count):
        """Sets the accepted_count of this BulkResponseV1.

        The count of requests succeeded.  # noqa: E501

        :param accepted_count: The accepted_count of this BulkResponseV1.  # noqa: E501
        :type: int
        """

        self._accepted_count = accepted_count

    @property
    def failed_count(self):
        """Gets the failed_count of this BulkResponseV1.  # noqa: E501

        The count of requests failed.  # noqa: E501

        :return: The failed_count of this BulkResponseV1.  # noqa: E501
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this BulkResponseV1.

        The count of requests failed.  # noqa: E501

        :param failed_count: The failed_count of this BulkResponseV1.  # noqa: E501
        :type: int
        """

        self._failed_count = failed_count

    @property
    def faults(self):
        """Gets the faults of this BulkResponseV1.  # noqa: E501

        The details of the requests failed.  # noqa: E501

        :return: The faults of this BulkResponseV1.  # noqa: E501
        :rtype: list[BulkResponseFaultV1]
        """
        return self._faults

    @faults.setter
    def faults(self, faults):
        """Sets the faults of this BulkResponseV1.

        The details of the requests failed.  # noqa: E501

        :param faults: The faults of this BulkResponseV1.  # noqa: E501
        :type: list[BulkResponseFaultV1]
        """

        self._faults = faults

    @property
    def accepted_resources(self):
        """Gets the accepted_resources of this BulkResponseV1.  # noqa: E501

        The details of the accepted resources details.  # noqa: E501

        :return: The accepted_resources of this BulkResponseV1.  # noqa: E501
        :rtype: list[ResourceValidationResponseV1Model]
        """
        return self._accepted_resources

    @accepted_resources.setter
    def accepted_resources(self, accepted_resources):
        """Sets the accepted_resources of this BulkResponseV1.

        The details of the accepted resources details.  # noqa: E501

        :param accepted_resources: The accepted_resources of this BulkResponseV1.  # noqa: E501
        :type: list[ResourceValidationResponseV1Model]
        """

        self._accepted_resources = accepted_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkResponseV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkResponseV1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BulkResponseV1):
            return True

        return self.to_dict() != other.to_dict()
