# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleAppLockPayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'autonomous_single_app_mode_permitted_app_ids': 'list[str]',
        'application_bundle_id': 'str',
        'disable_touch_screen': 'bool',
        'disable_device_rotation': 'bool',
        'disable_volume_buttons': 'bool',
        'disable_ringer_switch': 'bool',
        'disable_sleep_wake_button': 'bool',
        'disable_auto_lock': 'bool',
        'enable_voice_over': 'bool',
        'allow_user_to_adjust_voice_over': 'bool',
        'enable_zoom': 'bool',
        'allow_user_to_adjust_zoom': 'bool',
        'enable_color_inversion': 'bool',
        'allow_user_to_adjust_invert_colors': 'bool',
        'enable_assistive_touch': 'bool',
        'allow_user_to_adjust_assistive_touch': 'bool',
        'enable_speak_selection': 'bool',
        'enable_monaural_audio': 'bool',
        'enable_voice_control': 'bool',
        'allow_user_to_adjust_voice_control': 'bool'
    }

    attribute_map = {
        'autonomous_single_app_mode_permitted_app_ids': 'AutonomousSingleAppModePermittedAppIDs',
        'application_bundle_id': 'ApplicationBundleID',
        'disable_touch_screen': 'DisableTouchScreen',
        'disable_device_rotation': 'DisableDeviceRotation',
        'disable_volume_buttons': 'DisableVolumeButtons',
        'disable_ringer_switch': 'DisableRingerSwitch',
        'disable_sleep_wake_button': 'DisableSleepWakeButton',
        'disable_auto_lock': 'DisableAutoLock',
        'enable_voice_over': 'EnableVoiceOver',
        'allow_user_to_adjust_voice_over': 'AllowUserToAdjustVoiceOver',
        'enable_zoom': 'EnableZoom',
        'allow_user_to_adjust_zoom': 'AllowUserToAdjustZoom',
        'enable_color_inversion': 'EnableColorInversion',
        'allow_user_to_adjust_invert_colors': 'AllowUserToAdjustInvertColors',
        'enable_assistive_touch': 'EnableAssistiveTouch',
        'allow_user_to_adjust_assistive_touch': 'AllowUserToAdjustAssistiveTouch',
        'enable_speak_selection': 'EnableSpeakSelection',
        'enable_monaural_audio': 'EnableMonauralAudio',
        'enable_voice_control': 'EnableVoiceControl',
        'allow_user_to_adjust_voice_control': 'AllowUserToAdjustVoiceControl'
    }

    def __init__(self, autonomous_single_app_mode_permitted_app_ids=None, application_bundle_id=None, disable_touch_screen=None, disable_device_rotation=None, disable_volume_buttons=None, disable_ringer_switch=None, disable_sleep_wake_button=None, disable_auto_lock=None, enable_voice_over=None, allow_user_to_adjust_voice_over=None, enable_zoom=None, allow_user_to_adjust_zoom=None, enable_color_inversion=None, allow_user_to_adjust_invert_colors=None, enable_assistive_touch=None, allow_user_to_adjust_assistive_touch=None, enable_speak_selection=None, enable_monaural_audio=None, enable_voice_control=None, allow_user_to_adjust_voice_control=None, _configuration=None):  # noqa: E501
        """AppleAppLockPayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._autonomous_single_app_mode_permitted_app_ids = None
        self._application_bundle_id = None
        self._disable_touch_screen = None
        self._disable_device_rotation = None
        self._disable_volume_buttons = None
        self._disable_ringer_switch = None
        self._disable_sleep_wake_button = None
        self._disable_auto_lock = None
        self._enable_voice_over = None
        self._allow_user_to_adjust_voice_over = None
        self._enable_zoom = None
        self._allow_user_to_adjust_zoom = None
        self._enable_color_inversion = None
        self._allow_user_to_adjust_invert_colors = None
        self._enable_assistive_touch = None
        self._allow_user_to_adjust_assistive_touch = None
        self._enable_speak_selection = None
        self._enable_monaural_audio = None
        self._enable_voice_control = None
        self._allow_user_to_adjust_voice_control = None
        self.discriminator = None

        if autonomous_single_app_mode_permitted_app_ids is not None:
            self.autonomous_single_app_mode_permitted_app_ids = autonomous_single_app_mode_permitted_app_ids
        if application_bundle_id is not None:
            self.application_bundle_id = application_bundle_id
        if disable_touch_screen is not None:
            self.disable_touch_screen = disable_touch_screen
        if disable_device_rotation is not None:
            self.disable_device_rotation = disable_device_rotation
        if disable_volume_buttons is not None:
            self.disable_volume_buttons = disable_volume_buttons
        if disable_ringer_switch is not None:
            self.disable_ringer_switch = disable_ringer_switch
        if disable_sleep_wake_button is not None:
            self.disable_sleep_wake_button = disable_sleep_wake_button
        if disable_auto_lock is not None:
            self.disable_auto_lock = disable_auto_lock
        if enable_voice_over is not None:
            self.enable_voice_over = enable_voice_over
        if allow_user_to_adjust_voice_over is not None:
            self.allow_user_to_adjust_voice_over = allow_user_to_adjust_voice_over
        if enable_zoom is not None:
            self.enable_zoom = enable_zoom
        if allow_user_to_adjust_zoom is not None:
            self.allow_user_to_adjust_zoom = allow_user_to_adjust_zoom
        if enable_color_inversion is not None:
            self.enable_color_inversion = enable_color_inversion
        if allow_user_to_adjust_invert_colors is not None:
            self.allow_user_to_adjust_invert_colors = allow_user_to_adjust_invert_colors
        if enable_assistive_touch is not None:
            self.enable_assistive_touch = enable_assistive_touch
        if allow_user_to_adjust_assistive_touch is not None:
            self.allow_user_to_adjust_assistive_touch = allow_user_to_adjust_assistive_touch
        if enable_speak_selection is not None:
            self.enable_speak_selection = enable_speak_selection
        if enable_monaural_audio is not None:
            self.enable_monaural_audio = enable_monaural_audio
        if enable_voice_control is not None:
            self.enable_voice_control = enable_voice_control
        if allow_user_to_adjust_voice_control is not None:
            self.allow_user_to_adjust_voice_control = allow_user_to_adjust_voice_control

    @property
    def autonomous_single_app_mode_permitted_app_ids(self):
        """Gets the autonomous_single_app_mode_permitted_app_ids of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets the permitted apps for autonomous single app mode.  # noqa: E501

        :return: The autonomous_single_app_mode_permitted_app_ids of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: list[str]
        """
        return self._autonomous_single_app_mode_permitted_app_ids

    @autonomous_single_app_mode_permitted_app_ids.setter
    def autonomous_single_app_mode_permitted_app_ids(self, autonomous_single_app_mode_permitted_app_ids):
        """Sets the autonomous_single_app_mode_permitted_app_ids of this AppleAppLockPayloadV2Entity_.

        Gets or sets the permitted apps for autonomous single app mode.  # noqa: E501

        :param autonomous_single_app_mode_permitted_app_ids: The autonomous_single_app_mode_permitted_app_ids of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: list[str]
        """

        self._autonomous_single_app_mode_permitted_app_ids = autonomous_single_app_mode_permitted_app_ids

    @property
    def application_bundle_id(self):
        """Gets the application_bundle_id of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets the app's bundle identifier.  # noqa: E501

        :return: The application_bundle_id of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._application_bundle_id

    @application_bundle_id.setter
    def application_bundle_id(self, application_bundle_id):
        """Sets the application_bundle_id of this AppleAppLockPayloadV2Entity_.

        Gets or sets the app's bundle identifier.  # noqa: E501

        :param application_bundle_id: The application_bundle_id of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._application_bundle_id = application_bundle_id

    @property
    def disable_touch_screen(self):
        """Gets the disable_touch_screen of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, disables the touch screen. In tvOS, it disables the touch surface on the Apple TV Remote.  # noqa: E501

        :return: The disable_touch_screen of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._disable_touch_screen

    @disable_touch_screen.setter
    def disable_touch_screen(self, disable_touch_screen):
        """Sets the disable_touch_screen of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, disables the touch screen. In tvOS, it disables the touch surface on the Apple TV Remote.  # noqa: E501

        :param disable_touch_screen: The disable_touch_screen of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._disable_touch_screen = disable_touch_screen

    @property
    def disable_device_rotation(self):
        """Gets the disable_device_rotation of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, disables device rotation sensing.  # noqa: E501

        :return: The disable_device_rotation of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._disable_device_rotation

    @disable_device_rotation.setter
    def disable_device_rotation(self, disable_device_rotation):
        """Sets the disable_device_rotation of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, disables device rotation sensing.  # noqa: E501

        :param disable_device_rotation: The disable_device_rotation of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._disable_device_rotation = disable_device_rotation

    @property
    def disable_volume_buttons(self):
        """Gets the disable_volume_buttons of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, disables the volume buttons.  # noqa: E501

        :return: The disable_volume_buttons of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._disable_volume_buttons

    @disable_volume_buttons.setter
    def disable_volume_buttons(self, disable_volume_buttons):
        """Sets the disable_volume_buttons of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, disables the volume buttons.  # noqa: E501

        :param disable_volume_buttons: The disable_volume_buttons of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._disable_volume_buttons = disable_volume_buttons

    @property
    def disable_ringer_switch(self):
        """Gets the disable_ringer_switch of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, disables the ringer switch. When disabled, the ringer behavior depends on what position the switch was in when it was first disabled.  # noqa: E501

        :return: The disable_ringer_switch of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._disable_ringer_switch

    @disable_ringer_switch.setter
    def disable_ringer_switch(self, disable_ringer_switch):
        """Sets the disable_ringer_switch of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, disables the ringer switch. When disabled, the ringer behavior depends on what position the switch was in when it was first disabled.  # noqa: E501

        :param disable_ringer_switch: The disable_ringer_switch of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._disable_ringer_switch = disable_ringer_switch

    @property
    def disable_sleep_wake_button(self):
        """Gets the disable_sleep_wake_button of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, disables the sleep/wake button.  # noqa: E501

        :return: The disable_sleep_wake_button of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._disable_sleep_wake_button

    @disable_sleep_wake_button.setter
    def disable_sleep_wake_button(self, disable_sleep_wake_button):
        """Sets the disable_sleep_wake_button of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, disables the sleep/wake button.  # noqa: E501

        :param disable_sleep_wake_button: The disable_sleep_wake_button of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._disable_sleep_wake_button = disable_sleep_wake_button

    @property
    def disable_auto_lock(self):
        """Gets the disable_auto_lock of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, the device doesn't automatically go to sleep after an idle period.  # noqa: E501

        :return: The disable_auto_lock of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._disable_auto_lock

    @disable_auto_lock.setter
    def disable_auto_lock(self, disable_auto_lock):
        """Sets the disable_auto_lock of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, the device doesn't automatically go to sleep after an idle period.  # noqa: E501

        :param disable_auto_lock: The disable_auto_lock of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._disable_auto_lock = disable_auto_lock

    @property
    def enable_voice_over(self):
        """Gets the enable_voice_over of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, enables VoiceOver.  # noqa: E501

        :return: The enable_voice_over of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_voice_over

    @enable_voice_over.setter
    def enable_voice_over(self, enable_voice_over):
        """Sets the enable_voice_over of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, enables VoiceOver.  # noqa: E501

        :param enable_voice_over: The enable_voice_over of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_voice_over = enable_voice_over

    @property
    def allow_user_to_adjust_voice_over(self):
        """Gets the allow_user_to_adjust_voice_over of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, allows the user to toggle VoiceOver.  # noqa: E501

        :return: The allow_user_to_adjust_voice_over of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_adjust_voice_over

    @allow_user_to_adjust_voice_over.setter
    def allow_user_to_adjust_voice_over(self, allow_user_to_adjust_voice_over):
        """Sets the allow_user_to_adjust_voice_over of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, allows the user to toggle VoiceOver.  # noqa: E501

        :param allow_user_to_adjust_voice_over: The allow_user_to_adjust_voice_over of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_adjust_voice_over = allow_user_to_adjust_voice_over

    @property
    def enable_zoom(self):
        """Gets the enable_zoom of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, enables Zoom.  # noqa: E501

        :return: The enable_zoom of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_zoom

    @enable_zoom.setter
    def enable_zoom(self, enable_zoom):
        """Sets the enable_zoom of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, enables Zoom.  # noqa: E501

        :param enable_zoom: The enable_zoom of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_zoom = enable_zoom

    @property
    def allow_user_to_adjust_zoom(self):
        """Gets the allow_user_to_adjust_zoom of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, allows the user to toggle Zoom.  # noqa: E501

        :return: The allow_user_to_adjust_zoom of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_adjust_zoom

    @allow_user_to_adjust_zoom.setter
    def allow_user_to_adjust_zoom(self, allow_user_to_adjust_zoom):
        """Sets the allow_user_to_adjust_zoom of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, allows the user to toggle Zoom.  # noqa: E501

        :param allow_user_to_adjust_zoom: The allow_user_to_adjust_zoom of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_adjust_zoom = allow_user_to_adjust_zoom

    @property
    def enable_color_inversion(self):
        """Gets the enable_color_inversion of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, enables Invert Colors.  # noqa: E501

        :return: The enable_color_inversion of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_color_inversion

    @enable_color_inversion.setter
    def enable_color_inversion(self, enable_color_inversion):
        """Sets the enable_color_inversion of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, enables Invert Colors.  # noqa: E501

        :param enable_color_inversion: The enable_color_inversion of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_color_inversion = enable_color_inversion

    @property
    def allow_user_to_adjust_invert_colors(self):
        """Gets the allow_user_to_adjust_invert_colors of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, allows the user to toggle Invert Colors.  # noqa: E501

        :return: The allow_user_to_adjust_invert_colors of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_adjust_invert_colors

    @allow_user_to_adjust_invert_colors.setter
    def allow_user_to_adjust_invert_colors(self, allow_user_to_adjust_invert_colors):
        """Sets the allow_user_to_adjust_invert_colors of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, allows the user to toggle Invert Colors.  # noqa: E501

        :param allow_user_to_adjust_invert_colors: The allow_user_to_adjust_invert_colors of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_adjust_invert_colors = allow_user_to_adjust_invert_colors

    @property
    def enable_assistive_touch(self):
        """Gets the enable_assistive_touch of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, enables AssistiveTouch.  # noqa: E501

        :return: The enable_assistive_touch of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_assistive_touch

    @enable_assistive_touch.setter
    def enable_assistive_touch(self, enable_assistive_touch):
        """Sets the enable_assistive_touch of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, enables AssistiveTouch.  # noqa: E501

        :param enable_assistive_touch: The enable_assistive_touch of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_assistive_touch = enable_assistive_touch

    @property
    def allow_user_to_adjust_assistive_touch(self):
        """Gets the allow_user_to_adjust_assistive_touch of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, allows the user to toggle AssistiveTouch.  # noqa: E501

        :return: The allow_user_to_adjust_assistive_touch of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_adjust_assistive_touch

    @allow_user_to_adjust_assistive_touch.setter
    def allow_user_to_adjust_assistive_touch(self, allow_user_to_adjust_assistive_touch):
        """Sets the allow_user_to_adjust_assistive_touch of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, allows the user to toggle AssistiveTouch.  # noqa: E501

        :param allow_user_to_adjust_assistive_touch: The allow_user_to_adjust_assistive_touch of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_adjust_assistive_touch = allow_user_to_adjust_assistive_touch

    @property
    def enable_speak_selection(self):
        """Gets the enable_speak_selection of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, enables Speak Selection.  # noqa: E501

        :return: The enable_speak_selection of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_speak_selection

    @enable_speak_selection.setter
    def enable_speak_selection(self, enable_speak_selection):
        """Sets the enable_speak_selection of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, enables Speak Selection.  # noqa: E501

        :param enable_speak_selection: The enable_speak_selection of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_speak_selection = enable_speak_selection

    @property
    def enable_monaural_audio(self):
        """Gets the enable_monaural_audio of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, enables Mono Audio.  # noqa: E501

        :return: The enable_monaural_audio of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_monaural_audio

    @enable_monaural_audio.setter
    def enable_monaural_audio(self, enable_monaural_audio):
        """Sets the enable_monaural_audio of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, enables Mono Audio.  # noqa: E501

        :param enable_monaural_audio: The enable_monaural_audio of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_monaural_audio = enable_monaural_audio

    @property
    def enable_voice_control(self):
        """Gets the enable_voice_control of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, enables Voice Control.  # noqa: E501

        :return: The enable_voice_control of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_voice_control

    @enable_voice_control.setter
    def enable_voice_control(self, enable_voice_control):
        """Sets the enable_voice_control of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, enables Voice Control.  # noqa: E501

        :param enable_voice_control: The enable_voice_control of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_voice_control = enable_voice_control

    @property
    def allow_user_to_adjust_voice_control(self):
        """Gets the allow_user_to_adjust_voice_control of this AppleAppLockPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, allows the user to toggle Voice Control.  # noqa: E501

        :return: The allow_user_to_adjust_voice_control of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_adjust_voice_control

    @allow_user_to_adjust_voice_control.setter
    def allow_user_to_adjust_voice_control(self, allow_user_to_adjust_voice_control):
        """Sets the allow_user_to_adjust_voice_control of this AppleAppLockPayloadV2Entity_.

        Gets or sets a value indicating whether if true, allows the user to toggle Voice Control.  # noqa: E501

        :param allow_user_to_adjust_voice_control: The allow_user_to_adjust_voice_control of this AppleAppLockPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_adjust_voice_control = allow_user_to_adjust_voice_control

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleAppLockPayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleAppLockPayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleAppLockPayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
