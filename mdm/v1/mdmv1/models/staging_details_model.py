# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class StagingDetailsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform_id': 'int',
        'general': 'StagingGeneralDetailsModel_',
        'manifest': 'StagingManifestDetailsModel_'
    }

    attribute_map = {
        'platform_id': 'PlatformId',
        'general': 'General',
        'manifest': 'Manifest'
    }

    def __init__(self, platform_id=None, general=None, manifest=None, _configuration=None):  # noqa: E501
        """StagingDetailsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._platform_id = None
        self._general = None
        self._manifest = None
        self.discriminator = None

        if platform_id is not None:
            self.platform_id = platform_id
        if general is not None:
            self.general = general
        if manifest is not None:
            self.manifest = manifest

    @property
    def platform_id(self):
        """Gets the platform_id of this StagingDetailsModel.  # noqa: E501

        Gets or sets the platform for which staging package is created: For eg. 5 - Android, 1 - WindowsMobile.  # noqa: E501

        :return: The platform_id of this StagingDetailsModel.  # noqa: E501
        :rtype: int
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this StagingDetailsModel.

        Gets or sets the platform for which staging package is created: For eg. 5 - Android, 1 - WindowsMobile.  # noqa: E501

        :param platform_id: The platform_id of this StagingDetailsModel.  # noqa: E501
        :type: int
        """

        self._platform_id = platform_id

    @property
    def general(self):
        """Gets the general of this StagingDetailsModel.  # noqa: E501

        Gets or sets general details of staging bundle include Name, OrganizationGroupID, User credentials and AgentPackageId.  # noqa: E501

        :return: The general of this StagingDetailsModel.  # noqa: E501
        :rtype: StagingGeneralDetailsModel_
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this StagingDetailsModel.

        Gets or sets general details of staging bundle include Name, OrganizationGroupID, User credentials and AgentPackageId.  # noqa: E501

        :param general: The general of this StagingDetailsModel.  # noqa: E501
        :type: StagingGeneralDetailsModel_
        """

        self._general = general

    @property
    def manifest(self):
        """Gets the manifest of this StagingDetailsModel.  # noqa: E501

        Gets or sets the manifest details include the actions to be performed. For eg. InstallProfile, UninstallApplication.  # noqa: E501

        :return: The manifest of this StagingDetailsModel.  # noqa: E501
        :rtype: StagingManifestDetailsModel_
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this StagingDetailsModel.

        Gets or sets the manifest details include the actions to be performed. For eg. InstallProfile, UninstallApplication.  # noqa: E501

        :param manifest: The manifest of this StagingDetailsModel.  # noqa: E501
        :type: StagingManifestDetailsModel_
        """

        self._manifest = manifest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StagingDetailsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StagingDetailsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StagingDetailsModel):
            return True

        return self.to_dict() != other.to_dict()
