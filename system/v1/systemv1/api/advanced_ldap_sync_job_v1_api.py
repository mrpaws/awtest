# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class AdvancedLdapSyncJobV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def advanced_ldap_sync_job_v1_advanced_ldap_sync_job_details_async(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets Advanced Ldap Sync job details for a particular Organization group. Allows admins to preview the all the job details for a specific OG.  # noqa: E501

        Preview details of all the advanced LDAP sync job including the job status, enrollment user attributes etc. for a particular OG.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_advanced_ldap_sync_job_details_async(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object organization_group_uuid: The unique id of the organization group.(Required) (required)
        :param int page_number: Page number.
        :param int page_size: Page size. Default/Maximum is 500.
        :param int status_filter: Filters records based on the Job Status. Valid Status 1-10.
        :param str search_text: Filters records based on the search text.
        :param object sort_column: Column based on which we can provide the sorting. Default JOB_ID.
        :param object sort_order: The order based which on we can sort. Default value is ASC.
        :return: AdvancedLdapSyncJobDetailsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.advanced_ldap_sync_job_v1_advanced_ldap_sync_job_details_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.advanced_ldap_sync_job_v1_advanced_ldap_sync_job_details_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def advanced_ldap_sync_job_v1_advanced_ldap_sync_job_details_async_with_http_info(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets Advanced Ldap Sync job details for a particular Organization group. Allows admins to preview the all the job details for a specific OG.  # noqa: E501

        Preview details of all the advanced LDAP sync job including the job status, enrollment user attributes etc. for a particular OG.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_advanced_ldap_sync_job_details_async_with_http_info(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object organization_group_uuid: The unique id of the organization group.(Required) (required)
        :param int page_number: Page number.
        :param int page_size: Page size. Default/Maximum is 500.
        :param int status_filter: Filters records based on the Job Status. Valid Status 1-10.
        :param str search_text: Filters records based on the search text.
        :param object sort_column: Column based on which we can provide the sorting. Default JOB_ID.
        :param object sort_order: The order based which on we can sort. Default value is ASC.
        :return: AdvancedLdapSyncJobDetailsResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'page_number', 'page_size', 'status_filter', 'search_text', 'sort_column', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method advanced_ldap_sync_job_v1_advanced_ldap_sync_job_details_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `advanced_ldap_sync_job_v1_advanced_ldap_sync_job_details_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organization_group_uuid' in params:
            query_params.append(('organization_group_uuid', params['organization_group_uuid']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'status_filter' in params:
            query_params.append(('status_filter', params['status_filter']))  # noqa: E501
        if 'search_text' in params:
            query_params.append(('search_text', params['search_text']))  # noqa: E501
        if 'sort_column' in params:
            query_params.append(('sort_column', params['sort_column']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/advanced-ldap-sync-jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdvancedLdapSyncJobDetailsResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async(self, uuid, advanced_ldap_sync_job_approval_request, action, **kwargs):  # noqa: E501
        """New - Approves or declines the created LDAP sync job.  # noqa: E501

        Functionality to approve or decline the created advanced LDAP sysnc job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async(uuid, advanced_ldap_sync_job_approval_request, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The unique id of the advanced ldap sync job created.(Required). (required)
        :param AdvancedLadpSyncJobApprovalRequestModel advanced_ldap_sync_job_approval_request: Advanced ladp sync job approval request model.(Required). (required)
        :param object action: The approval action.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async_with_http_info(uuid, advanced_ldap_sync_job_approval_request, action, **kwargs)  # noqa: E501
        else:
            (data) = self.advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async_with_http_info(uuid, advanced_ldap_sync_job_approval_request, action, **kwargs)  # noqa: E501
            return data

    def advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async_with_http_info(self, uuid, advanced_ldap_sync_job_approval_request, action, **kwargs):  # noqa: E501
        """New - Approves or declines the created LDAP sync job.  # noqa: E501

        Functionality to approve or decline the created advanced LDAP sysnc job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async_with_http_info(uuid, advanced_ldap_sync_job_approval_request, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The unique id of the advanced ldap sync job created.(Required). (required)
        :param AdvancedLadpSyncJobApprovalRequestModel advanced_ldap_sync_job_approval_request: Advanced ladp sync job approval request model.(Required). (required)
        :param object action: The approval action.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'advanced_ldap_sync_job_approval_request', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async`")  # noqa: E501
        # verify the required parameter 'advanced_ldap_sync_job_approval_request' is set
        if self.api_client.client_side_validation and ('advanced_ldap_sync_job_approval_request' not in params or
                                                       params['advanced_ldap_sync_job_approval_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `advanced_ldap_sync_job_approval_request` when calling `advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in params or
                                                       params['action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action` when calling `advanced_ldap_sync_job_v1_approve_or_decline_advanced_ldap_sync_job_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'advanced_ldap_sync_job_approval_request' in params:
            body_params = params['advanced_ldap_sync_job_approval_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/advanced-ldap-sync-jobs/{uuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def advanced_ldap_sync_job_v1_create_advanced_ldap_sync_job_async(self, advanced_ldap_sync_job_request, **kwargs):  # noqa: E501
        """New - Creates a new LDAP sync job.  # noqa: E501

        Creates the advanced ldap sync job. Queues a message in MSMQ for the Directory Sync Services to pick up and process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_create_advanced_ldap_sync_job_async(advanced_ldap_sync_job_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdvancedLadpSyncJobRequestModel advanced_ldap_sync_job_request: Request model to create new ldap sync job.(Required). (required)
        :return: AdvancedLdapSyncJobResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.advanced_ldap_sync_job_v1_create_advanced_ldap_sync_job_async_with_http_info(advanced_ldap_sync_job_request, **kwargs)  # noqa: E501
        else:
            (data) = self.advanced_ldap_sync_job_v1_create_advanced_ldap_sync_job_async_with_http_info(advanced_ldap_sync_job_request, **kwargs)  # noqa: E501
            return data

    def advanced_ldap_sync_job_v1_create_advanced_ldap_sync_job_async_with_http_info(self, advanced_ldap_sync_job_request, **kwargs):  # noqa: E501
        """New - Creates a new LDAP sync job.  # noqa: E501

        Creates the advanced ldap sync job. Queues a message in MSMQ for the Directory Sync Services to pick up and process.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_create_advanced_ldap_sync_job_async_with_http_info(advanced_ldap_sync_job_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdvancedLadpSyncJobRequestModel advanced_ldap_sync_job_request: Request model to create new ldap sync job.(Required). (required)
        :return: AdvancedLdapSyncJobResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advanced_ldap_sync_job_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method advanced_ldap_sync_job_v1_create_advanced_ldap_sync_job_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advanced_ldap_sync_job_request' is set
        if self.api_client.client_side_validation and ('advanced_ldap_sync_job_request' not in params or
                                                       params['advanced_ldap_sync_job_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `advanced_ldap_sync_job_request` when calling `advanced_ldap_sync_job_v1_create_advanced_ldap_sync_job_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'advanced_ldap_sync_job_request' in params:
            body_params = params['advanced_ldap_sync_job_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/advanced-ldap-sync-jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdvancedLdapSyncJobResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def advanced_ldap_sync_job_v1_get_job_status_async(self, uuid, **kwargs):  # noqa: E501
        """New - Gets LDAP sync job details.  # noqa: E501

        Get details of the advanced LDAP job including the job ID, job progress attributes etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_get_job_status_async(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The unique id of the advanced ldap sync job.(Required). (required)
        :return: AdvancedLdapSyncJobProgressResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.advanced_ldap_sync_job_v1_get_job_status_async_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.advanced_ldap_sync_job_v1_get_job_status_async_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def advanced_ldap_sync_job_v1_get_job_status_async_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets LDAP sync job details.  # noqa: E501

        Get details of the advanced LDAP job including the job ID, job progress attributes etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_get_job_status_async_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The unique id of the advanced ldap sync job.(Required). (required)
        :return: AdvancedLdapSyncJobProgressResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method advanced_ldap_sync_job_v1_get_job_status_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `advanced_ldap_sync_job_v1_get_job_status_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/advanced-ldap-sync-jobs/status/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdvancedLdapSyncJobProgressResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def advanced_ldap_sync_job_v1_preview_advanced_ldap_sync_job_async(self, uuid, **kwargs):  # noqa: E501
        """New - Gets LDAP sync job details. Allows admins to preview the changes to enrollment user attributes.  # noqa: E501

        Preview details of the advanced LDAP sync job including the job status, enrollment user attributes etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_preview_advanced_ldap_sync_job_async(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The unique id of the created advanced ldap sync job.(Required). (required)
        :param int page_number: Page number.
        :param int page_size: Page size. Default/Maximum is 500.
        :param str search_text: Filters records based on the search text.
        :param object sort_column: Column based on which we can provide the sorting. Default JOB_ID.
        :param object sort_order: The order based which on we can sort. Default value is ASC.
        :return: PreviewAdvancedLdapSyncJobResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.advanced_ldap_sync_job_v1_preview_advanced_ldap_sync_job_async_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.advanced_ldap_sync_job_v1_preview_advanced_ldap_sync_job_async_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def advanced_ldap_sync_job_v1_preview_advanced_ldap_sync_job_async_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets LDAP sync job details. Allows admins to preview the changes to enrollment user attributes.  # noqa: E501

        Preview details of the advanced LDAP sync job including the job status, enrollment user attributes etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_ldap_sync_job_v1_preview_advanced_ldap_sync_job_async_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The unique id of the created advanced ldap sync job.(Required). (required)
        :param int page_number: Page number.
        :param int page_size: Page size. Default/Maximum is 500.
        :param str search_text: Filters records based on the search text.
        :param object sort_column: Column based on which we can provide the sorting. Default JOB_ID.
        :param object sort_order: The order based which on we can sort. Default value is ASC.
        :return: PreviewAdvancedLdapSyncJobResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'page_number', 'page_size', 'search_text', 'sort_column', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method advanced_ldap_sync_job_v1_preview_advanced_ldap_sync_job_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `advanced_ldap_sync_job_v1_preview_advanced_ldap_sync_job_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'page_number' in params:
            query_params.append(('page_number', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'search_text' in params:
            query_params.append(('search_text', params['search_text']))  # noqa: E501
        if 'sort_column' in params:
            query_params.append(('sort_column', params['sort_column']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/advanced-ldap-sync-jobs/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreviewAdvancedLdapSyncJobResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
