# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class AdvancedLadpSyncJobApprovalRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approval_type': 'int',
        'enrollment_user_uuids': 'list[str]'
    }

    attribute_map = {
        'approval_type': 'approval_type',
        'enrollment_user_uuids': 'enrollment_user_uuids'
    }

    def __init__(self, approval_type=None, enrollment_user_uuids=None, _configuration=None):  # noqa: E501
        """AdvancedLadpSyncJobApprovalRequestModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._approval_type = None
        self._enrollment_user_uuids = None
        self.discriminator = None

        if approval_type is not None:
            self.approval_type = approval_type
        if enrollment_user_uuids is not None:
            self.enrollment_user_uuids = enrollment_user_uuids

    @property
    def approval_type(self):
        """Gets the approval_type of this AdvancedLadpSyncJobApprovalRequestModel.  # noqa: E501

        The type of approval being provided by the admin for the advanced ldap sync job.  # noqa: E501

        :return: The approval_type of this AdvancedLadpSyncJobApprovalRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._approval_type

    @approval_type.setter
    def approval_type(self, approval_type):
        """Sets the approval_type of this AdvancedLadpSyncJobApprovalRequestModel.

        The type of approval being provided by the admin for the advanced ldap sync job.  # noqa: E501

        :param approval_type: The approval_type of this AdvancedLadpSyncJobApprovalRequestModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                approval_type not in allowed_values):
            raise ValueError(
                "Invalid value for `approval_type` ({0}), must be one of {1}"  # noqa: E501
                .format(approval_type, allowed_values)
            )

        self._approval_type = approval_type

    @property
    def enrollment_user_uuids(self):
        """Gets the enrollment_user_uuids of this AdvancedLadpSyncJobApprovalRequestModel.  # noqa: E501

        A list of the enrollment user uuids which need to processed by the advanced ldap sync job.  # noqa: E501

        :return: The enrollment_user_uuids of this AdvancedLadpSyncJobApprovalRequestModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._enrollment_user_uuids

    @enrollment_user_uuids.setter
    def enrollment_user_uuids(self, enrollment_user_uuids):
        """Sets the enrollment_user_uuids of this AdvancedLadpSyncJobApprovalRequestModel.

        A list of the enrollment user uuids which need to processed by the advanced ldap sync job.  # noqa: E501

        :param enrollment_user_uuids: The enrollment_user_uuids of this AdvancedLadpSyncJobApprovalRequestModel.  # noqa: E501
        :type: list[str]
        """

        self._enrollment_user_uuids = enrollment_user_uuids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvancedLadpSyncJobApprovalRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedLadpSyncJobApprovalRequestModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdvancedLadpSyncJobApprovalRequestModel):
            return True

        return self.to_dict() != other.to_dict()
