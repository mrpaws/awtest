# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class RelayServerDeviceConnectionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'int',
        'hostname': 'str',
        'port': 'int',
        'user': 'str',
        'password': 'str',
        'path': 'str',
        'passive_mode': 'str',
        'verify_server': 'str'
    }

    attribute_map = {
        'protocol': 'Protocol',
        'hostname': 'Hostname',
        'port': 'Port',
        'user': 'User',
        'password': 'Password',
        'path': 'Path',
        'passive_mode': 'PassiveMode',
        'verify_server': 'VerifyServer'
    }

    def __init__(self, protocol=None, hostname=None, port=None, user=None, password=None, path=None, passive_mode=None, verify_server=None, _configuration=None):  # noqa: E501
        """RelayServerDeviceConnectionModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._protocol = None
        self._hostname = None
        self._port = None
        self._user = None
        self._password = None
        self._path = None
        self._passive_mode = None
        self._verify_server = None
        self.discriminator = None

        if protocol is not None:
            self.protocol = protocol
        if hostname is not None:
            self.hostname = hostname
        if port is not None:
            self.port = port
        if user is not None:
            self.user = user
        if password is not None:
            self.password = password
        if path is not None:
            self.path = path
        if passive_mode is not None:
            self.passive_mode = passive_mode
        if verify_server is not None:
            self.verify_server = verify_server

    @property
    def protocol(self):
        """Gets the protocol of this RelayServerDeviceConnectionModel.  # noqa: E501

        Gets or sets the protocol id for connection used by device to fetch the files. 1- FTP, 2-FTPS, 3-SFTP.  # noqa: E501

        :return: The protocol of this RelayServerDeviceConnectionModel.  # noqa: E501
        :rtype: int
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this RelayServerDeviceConnectionModel.

        Gets or sets the protocol id for connection used by device to fetch the files. 1- FTP, 2-FTPS, 3-SFTP.  # noqa: E501

        :param protocol: The protocol of this RelayServerDeviceConnectionModel.  # noqa: E501
        :type: int
        """

        self._protocol = protocol

    @property
    def hostname(self):
        """Gets the hostname of this RelayServerDeviceConnectionModel.  # noqa: E501

        Gets or sets the hostname - IP address of the server that device will connect to get the files.  # noqa: E501

        :return: The hostname of this RelayServerDeviceConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this RelayServerDeviceConnectionModel.

        Gets or sets the hostname - IP address of the server that device will connect to get the files.  # noqa: E501

        :param hostname: The hostname of this RelayServerDeviceConnectionModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                hostname is not None and len(hostname) > 50):
            raise ValueError("Invalid value for `hostname`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hostname is not None and len(hostname) < 0):
            raise ValueError("Invalid value for `hostname`, length must be greater than or equal to `0`")  # noqa: E501

        self._hostname = hostname

    @property
    def port(self):
        """Gets the port of this RelayServerDeviceConnectionModel.  # noqa: E501

        Gets or sets the port number used for the device connection to relay server.  # noqa: E501

        :return: The port of this RelayServerDeviceConnectionModel.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RelayServerDeviceConnectionModel.

        Gets or sets the port number used for the device connection to relay server.  # noqa: E501

        :param port: The port of this RelayServerDeviceConnectionModel.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def user(self):
        """Gets the user of this RelayServerDeviceConnectionModel.  # noqa: E501

        Gets or sets username used for authenticity for device connection.  # noqa: E501

        :return: The user of this RelayServerDeviceConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RelayServerDeviceConnectionModel.

        Gets or sets username used for authenticity for device connection.  # noqa: E501

        :param user: The user of this RelayServerDeviceConnectionModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                user is not None and len(user) > 50):
            raise ValueError("Invalid value for `user`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user is not None and len(user) < 0):
            raise ValueError("Invalid value for `user`, length must be greater than or equal to `0`")  # noqa: E501

        self._user = user

    @property
    def password(self):
        """Gets the password of this RelayServerDeviceConnectionModel.  # noqa: E501

        Gets or sets password used for authenticity for device connecting to relay server.  # noqa: E501

        :return: The password of this RelayServerDeviceConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RelayServerDeviceConnectionModel.

        Gets or sets password used for authenticity for device connecting to relay server.  # noqa: E501

        :param password: The password of this RelayServerDeviceConnectionModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                password is not None and len(password) > 150):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `150`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 0):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `0`")  # noqa: E501

        self._password = password

    @property
    def path(self):
        """Gets the path of this RelayServerDeviceConnectionModel.  # noqa: E501

        Gets or sets path of the relay server from where the device will fetch the files.  # noqa: E501

        :return: The path of this RelayServerDeviceConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RelayServerDeviceConnectionModel.

        Gets or sets path of the relay server from where the device will fetch the files.  # noqa: E501

        :param path: The path of this RelayServerDeviceConnectionModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                path is not None and len(path) > 255):
            raise ValueError("Invalid value for `path`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                path is not None and len(path) < 0):
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `0`")  # noqa: E501

        self._path = path

    @property
    def passive_mode(self):
        """Gets the passive_mode of this RelayServerDeviceConnectionModel.  # noqa: E501

        Gets or sets whether passive mode is available or not.  # noqa: E501

        :return: The passive_mode of this RelayServerDeviceConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._passive_mode

    @passive_mode.setter
    def passive_mode(self, passive_mode):
        """Sets the passive_mode of this RelayServerDeviceConnectionModel.

        Gets or sets whether passive mode is available or not.  # noqa: E501

        :param passive_mode: The passive_mode of this RelayServerDeviceConnectionModel.  # noqa: E501
        :type: str
        """

        self._passive_mode = passive_mode

    @property
    def verify_server(self):
        """Gets the verify_server of this RelayServerDeviceConnectionModel.  # noqa: E501

        Gets or sets whether verify server is available or not.  # noqa: E501

        :return: The verify_server of this RelayServerDeviceConnectionModel.  # noqa: E501
        :rtype: str
        """
        return self._verify_server

    @verify_server.setter
    def verify_server(self, verify_server):
        """Sets the verify_server of this RelayServerDeviceConnectionModel.

        Gets or sets whether verify server is available or not.  # noqa: E501

        :param verify_server: The verify_server of this RelayServerDeviceConnectionModel.  # noqa: E501
        :type: str
        """

        self._verify_server = verify_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelayServerDeviceConnectionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelayServerDeviceConnectionModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RelayServerDeviceConnectionModel):
            return True

        return self.to_dict() != other.to_dict()
