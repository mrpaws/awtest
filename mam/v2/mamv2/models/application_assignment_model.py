# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv2.configuration import Configuration


class ApplicationAssignmentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'smart_group_id': 'int',
        'smart_group_uuid': 'str',
        'smart_group_name': 'str',
        'push_mode': 'str',
        'effective_date': 'datetime',
        'remove_on_un_enroll': 'str',
        'application_backup': 'str',
        'auto_update_devices_with_previous_version': 'str',
        'per_app_vpn': 'str',
        'vpn_profile_id': 'int',
        'afw_vpn_profile_id': 'int',
        'vpn_profile_uuid': 'str',
        'rank': 'int',
        'app_config': 'str',
        'app_attribute': 'str',
        'prevent_removal': 'str',
        'allow_management': 'str',
        'app_configs': 'list[ApplicationConfigurationModel]',
        'app_attributes': 'list[ApplicationConfigurationModel]',
        'application_transform_ids': 'list[int]',
        'visible_in_app_catalog': 'bool',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'smart_group_id': 'SmartGroupId',
        'smart_group_uuid': 'SmartGroupUuid',
        'smart_group_name': 'SmartGroupName',
        'push_mode': 'PushMode',
        'effective_date': 'EffectiveDate',
        'remove_on_un_enroll': 'RemoveOnUnEnroll',
        'application_backup': 'ApplicationBackup',
        'auto_update_devices_with_previous_version': 'AutoUpdateDevicesWithPreviousVersion',
        'per_app_vpn': 'PerAppVpn',
        'vpn_profile_id': 'VpnProfileId',
        'afw_vpn_profile_id': 'AfwVpnProfileId',
        'vpn_profile_uuid': 'VpnProfileUuid',
        'rank': 'Rank',
        'app_config': 'AppConfig',
        'app_attribute': 'AppAttribute',
        'prevent_removal': 'PreventRemoval',
        'allow_management': 'AllowManagement',
        'app_configs': 'AppConfigs',
        'app_attributes': 'AppAttributes',
        'application_transform_ids': 'ApplicationTransformIds',
        'visible_in_app_catalog': 'VisibleInAppCatalog',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, smart_group_id=None, smart_group_uuid=None, smart_group_name=None, push_mode=None, effective_date=None, remove_on_un_enroll=None, application_backup=None, auto_update_devices_with_previous_version=None, per_app_vpn=None, vpn_profile_id=None, afw_vpn_profile_id=None, vpn_profile_uuid=None, rank=None, app_config=None, app_attribute=None, prevent_removal=None, allow_management=None, app_configs=None, app_attributes=None, application_transform_ids=None, visible_in_app_catalog=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """ApplicationAssignmentModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._smart_group_id = None
        self._smart_group_uuid = None
        self._smart_group_name = None
        self._push_mode = None
        self._effective_date = None
        self._remove_on_un_enroll = None
        self._application_backup = None
        self._auto_update_devices_with_previous_version = None
        self._per_app_vpn = None
        self._vpn_profile_id = None
        self._afw_vpn_profile_id = None
        self._vpn_profile_uuid = None
        self._rank = None
        self._app_config = None
        self._app_attribute = None
        self._prevent_removal = None
        self._allow_management = None
        self._app_configs = None
        self._app_attributes = None
        self._application_transform_ids = None
        self._visible_in_app_catalog = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if smart_group_id is not None:
            self.smart_group_id = smart_group_id
        if smart_group_uuid is not None:
            self.smart_group_uuid = smart_group_uuid
        if smart_group_name is not None:
            self.smart_group_name = smart_group_name
        if push_mode is not None:
            self.push_mode = push_mode
        if effective_date is not None:
            self.effective_date = effective_date
        if remove_on_un_enroll is not None:
            self.remove_on_un_enroll = remove_on_un_enroll
        if application_backup is not None:
            self.application_backup = application_backup
        if auto_update_devices_with_previous_version is not None:
            self.auto_update_devices_with_previous_version = auto_update_devices_with_previous_version
        if per_app_vpn is not None:
            self.per_app_vpn = per_app_vpn
        if vpn_profile_id is not None:
            self.vpn_profile_id = vpn_profile_id
        if afw_vpn_profile_id is not None:
            self.afw_vpn_profile_id = afw_vpn_profile_id
        if vpn_profile_uuid is not None:
            self.vpn_profile_uuid = vpn_profile_uuid
        if rank is not None:
            self.rank = rank
        if app_config is not None:
            self.app_config = app_config
        if app_attribute is not None:
            self.app_attribute = app_attribute
        if prevent_removal is not None:
            self.prevent_removal = prevent_removal
        if allow_management is not None:
            self.allow_management = allow_management
        if app_configs is not None:
            self.app_configs = app_configs
        if app_attributes is not None:
            self.app_attributes = app_attributes
        if application_transform_ids is not None:
            self.application_transform_ids = application_transform_ids
        if visible_in_app_catalog is not None:
            self.visible_in_app_catalog = visible_in_app_catalog
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def smart_group_id(self):
        """Gets the smart_group_id of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the smart group id.  # noqa: E501

        :return: The smart_group_id of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._smart_group_id

    @smart_group_id.setter
    def smart_group_id(self, smart_group_id):
        """Sets the smart_group_id of this ApplicationAssignmentModel.

        Gets or sets the smart group id.  # noqa: E501

        :param smart_group_id: The smart_group_id of this ApplicationAssignmentModel.  # noqa: E501
        :type: int
        """

        self._smart_group_id = smart_group_id

    @property
    def smart_group_uuid(self):
        """Gets the smart_group_uuid of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the Smart Group uuid.  # noqa: E501

        :return: The smart_group_uuid of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._smart_group_uuid

    @smart_group_uuid.setter
    def smart_group_uuid(self, smart_group_uuid):
        """Sets the smart_group_uuid of this ApplicationAssignmentModel.

        Gets or sets the Smart Group uuid.  # noqa: E501

        :param smart_group_uuid: The smart_group_uuid of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._smart_group_uuid = smart_group_uuid

    @property
    def smart_group_name(self):
        """Gets the smart_group_name of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the smart group name.  # noqa: E501

        :return: The smart_group_name of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._smart_group_name

    @smart_group_name.setter
    def smart_group_name(self, smart_group_name):
        """Sets the smart_group_name of this ApplicationAssignmentModel.

        Gets or sets the smart group name.  # noqa: E501

        :param smart_group_name: The smart_group_name of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._smart_group_name = smart_group_name

    @property
    def push_mode(self):
        """Gets the push_mode of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the push mode for the application.  # noqa: E501

        :return: The push_mode of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._push_mode

    @push_mode.setter
    def push_mode(self, push_mode):
        """Sets the push_mode of this ApplicationAssignmentModel.

        Gets or sets the push mode for the application.  # noqa: E501

        :param push_mode: The push_mode of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._push_mode = push_mode

    @property
    def effective_date(self):
        """Gets the effective_date of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the effective date time for the Application.  # noqa: E501

        :return: The effective_date of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this ApplicationAssignmentModel.

        Gets or sets the effective date time for the Application.  # noqa: E501

        :param effective_date: The effective_date of this ApplicationAssignmentModel.  # noqa: E501
        :type: datetime
        """

        self._effective_date = effective_date

    @property
    def remove_on_un_enroll(self):
        """Gets the remove_on_un_enroll of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets a value indicating whether the appslication should be removed on unenrollment.  # noqa: E501

        :return: The remove_on_un_enroll of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._remove_on_un_enroll

    @remove_on_un_enroll.setter
    def remove_on_un_enroll(self, remove_on_un_enroll):
        """Sets the remove_on_un_enroll of this ApplicationAssignmentModel.

        Gets or sets a value indicating whether the appslication should be removed on unenrollment.  # noqa: E501

        :param remove_on_un_enroll: The remove_on_un_enroll of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._remove_on_un_enroll = remove_on_un_enroll

    @property
    def application_backup(self):
        """Gets the application_backup of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets a value indicating whether application backup is enabled.  # noqa: E501

        :return: The application_backup of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._application_backup

    @application_backup.setter
    def application_backup(self, application_backup):
        """Sets the application_backup of this ApplicationAssignmentModel.

        Gets or sets a value indicating whether application backup is enabled.  # noqa: E501

        :param application_backup: The application_backup of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._application_backup = application_backup

    @property
    def auto_update_devices_with_previous_version(self):
        """Gets the auto_update_devices_with_previous_version of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets a value indicating whether the newest version of the app should be pushed to devices that have already downloaded the app.  # noqa: E501

        :return: The auto_update_devices_with_previous_version of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._auto_update_devices_with_previous_version

    @auto_update_devices_with_previous_version.setter
    def auto_update_devices_with_previous_version(self, auto_update_devices_with_previous_version):
        """Sets the auto_update_devices_with_previous_version of this ApplicationAssignmentModel.

        Gets or sets a value indicating whether the newest version of the app should be pushed to devices that have already downloaded the app.  # noqa: E501

        :param auto_update_devices_with_previous_version: The auto_update_devices_with_previous_version of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._auto_update_devices_with_previous_version = auto_update_devices_with_previous_version

    @property
    def per_app_vpn(self):
        """Gets the per_app_vpn of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets a value indicating whether the per app VPN flag for iOS devices is enabled.  # noqa: E501

        :return: The per_app_vpn of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._per_app_vpn

    @per_app_vpn.setter
    def per_app_vpn(self, per_app_vpn):
        """Sets the per_app_vpn of this ApplicationAssignmentModel.

        Gets or sets a value indicating whether the per app VPN flag for iOS devices is enabled.  # noqa: E501

        :param per_app_vpn: The per_app_vpn of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._per_app_vpn = per_app_vpn

    @property
    def vpn_profile_id(self):
        """Gets the vpn_profile_id of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the VPN profile id associated with the application.  # noqa: E501

        :return: The vpn_profile_id of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._vpn_profile_id

    @vpn_profile_id.setter
    def vpn_profile_id(self, vpn_profile_id):
        """Sets the vpn_profile_id of this ApplicationAssignmentModel.

        Gets or sets the VPN profile id associated with the application.  # noqa: E501

        :param vpn_profile_id: The vpn_profile_id of this ApplicationAssignmentModel.  # noqa: E501
        :type: int
        """

        self._vpn_profile_id = vpn_profile_id

    @property
    def afw_vpn_profile_id(self):
        """Gets the afw_vpn_profile_id of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the Android For Work VPN profile id associated with the application.  # noqa: E501

        :return: The afw_vpn_profile_id of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._afw_vpn_profile_id

    @afw_vpn_profile_id.setter
    def afw_vpn_profile_id(self, afw_vpn_profile_id):
        """Sets the afw_vpn_profile_id of this ApplicationAssignmentModel.

        Gets or sets the Android For Work VPN profile id associated with the application.  # noqa: E501

        :param afw_vpn_profile_id: The afw_vpn_profile_id of this ApplicationAssignmentModel.  # noqa: E501
        :type: int
        """

        self._afw_vpn_profile_id = afw_vpn_profile_id

    @property
    def vpn_profile_uuid(self):
        """Gets the vpn_profile_uuid of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the VPN Profile ID associated with the application.  # noqa: E501

        :return: The vpn_profile_uuid of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._vpn_profile_uuid

    @vpn_profile_uuid.setter
    def vpn_profile_uuid(self, vpn_profile_uuid):
        """Sets the vpn_profile_uuid of this ApplicationAssignmentModel.

        Gets or sets the VPN Profile ID associated with the application.  # noqa: E501

        :param vpn_profile_uuid: The vpn_profile_uuid of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._vpn_profile_uuid = vpn_profile_uuid

    @property
    def rank(self):
        """Gets the rank of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the application rank.  # noqa: E501

        :return: The rank of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this ApplicationAssignmentModel.

        Gets or sets the application rank.  # noqa: E501

        :param rank: The rank of this ApplicationAssignmentModel.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def app_config(self):
        """Gets the app_config of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets a value indicating whether custom application configuration keys and values should be sent to the device.  # noqa: E501

        :return: The app_config of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._app_config

    @app_config.setter
    def app_config(self, app_config):
        """Sets the app_config of this ApplicationAssignmentModel.

        Gets or sets a value indicating whether custom application configuration keys and values should be sent to the device.  # noqa: E501

        :param app_config: The app_config of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._app_config = app_config

    @property
    def app_attribute(self):
        """Gets the app_attribute of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets a value indicating whether custom application attribute keys and values should be sent to the device.  # noqa: E501

        :return: The app_attribute of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._app_attribute

    @app_attribute.setter
    def app_attribute(self, app_attribute):
        """Sets the app_attribute of this ApplicationAssignmentModel.

        Gets or sets a value indicating whether custom application attribute keys and values should be sent to the device.  # noqa: E501

        :param app_attribute: The app_attribute of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._app_attribute = app_attribute

    @property
    def prevent_removal(self):
        """Gets the prevent_removal of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets a value indicating whether prevent application removal attribute keys and values should be sent to the device.  # noqa: E501

        :return: The prevent_removal of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._prevent_removal

    @prevent_removal.setter
    def prevent_removal(self, prevent_removal):
        """Sets the prevent_removal of this ApplicationAssignmentModel.

        Gets or sets a value indicating whether prevent application removal attribute keys and values should be sent to the device.  # noqa: E501

        :param prevent_removal: The prevent_removal of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._prevent_removal = prevent_removal

    @property
    def allow_management(self):
        """Gets the allow_management of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets flag to enable assume management for user installed iOS Apps.  # noqa: E501

        :return: The allow_management of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._allow_management

    @allow_management.setter
    def allow_management(self, allow_management):
        """Sets the allow_management of this ApplicationAssignmentModel.

        Gets or sets flag to enable assume management for user installed iOS Apps.  # noqa: E501

        :param allow_management: The allow_management of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._allow_management = allow_management

    @property
    def app_configs(self):
        """Gets the app_configs of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the app configs.  # noqa: E501

        :return: The app_configs of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: list[ApplicationConfigurationModel]
        """
        return self._app_configs

    @app_configs.setter
    def app_configs(self, app_configs):
        """Sets the app_configs of this ApplicationAssignmentModel.

        Gets or sets the app configs.  # noqa: E501

        :param app_configs: The app_configs of this ApplicationAssignmentModel.  # noqa: E501
        :type: list[ApplicationConfigurationModel]
        """

        self._app_configs = app_configs

    @property
    def app_attributes(self):
        """Gets the app_attributes of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets the app attributes.  # noqa: E501

        :return: The app_attributes of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: list[ApplicationConfigurationModel]
        """
        return self._app_attributes

    @app_attributes.setter
    def app_attributes(self, app_attributes):
        """Sets the app_attributes of this ApplicationAssignmentModel.

        Gets or sets the app attributes.  # noqa: E501

        :param app_attributes: The app_attributes of this ApplicationAssignmentModel.  # noqa: E501
        :type: list[ApplicationConfigurationModel]
        """

        self._app_attributes = app_attributes

    @property
    def application_transform_ids(self):
        """Gets the application_transform_ids of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets The application transforms ids attached to the application.  # noqa: E501

        :return: The application_transform_ids of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._application_transform_ids

    @application_transform_ids.setter
    def application_transform_ids(self, application_transform_ids):
        """Sets the application_transform_ids of this ApplicationAssignmentModel.

        Gets or sets The application transforms ids attached to the application.  # noqa: E501

        :param application_transform_ids: The application_transform_ids of this ApplicationAssignmentModel.  # noqa: E501
        :type: list[int]
        """

        self._application_transform_ids = application_transform_ids

    @property
    def visible_in_app_catalog(self):
        """Gets the visible_in_app_catalog of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets a value indicating whether gets or sets the value whether to display in app catalog.  # noqa: E501

        :return: The visible_in_app_catalog of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: bool
        """
        return self._visible_in_app_catalog

    @visible_in_app_catalog.setter
    def visible_in_app_catalog(self, visible_in_app_catalog):
        """Sets the visible_in_app_catalog of this ApplicationAssignmentModel.

        Gets or sets a value indicating whether gets or sets the value whether to display in app catalog.  # noqa: E501

        :param visible_in_app_catalog: The visible_in_app_catalog of this ApplicationAssignmentModel.  # noqa: E501
        :type: bool
        """

        self._visible_in_app_catalog = visible_in_app_catalog

    @property
    def id(self):
        """Gets the id of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationAssignmentModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this ApplicationAssignmentModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ApplicationAssignmentModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this ApplicationAssignmentModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApplicationAssignmentModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this ApplicationAssignmentModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationAssignmentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationAssignmentModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationAssignmentModel):
            return True

        return self.to_dict() != other.to_dict()
