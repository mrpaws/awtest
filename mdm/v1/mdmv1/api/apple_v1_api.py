# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class AppleV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apple_v1_create_remote_view_destination_by_location_group_id(self, model, **kwargs):  # noqa: E501
        """New - Add a destination for Remote View  # noqa: E501

        iOS device can be remotely viewed by using software like AirServer or Reflector. It is required to save the details of the destination device like mac address, ip address, pk, pi. This endpoint is used to save the destination details for the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_create_remote_view_destination_by_location_group_id(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteViewDestinationV1Model model: RemoteViewDestination data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apple_v1_create_remote_view_destination_by_location_group_id_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.apple_v1_create_remote_view_destination_by_location_group_id_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def apple_v1_create_remote_view_destination_by_location_group_id_with_http_info(self, model, **kwargs):  # noqa: E501
        """New - Add a destination for Remote View  # noqa: E501

        iOS device can be remotely viewed by using software like AirServer or Reflector. It is required to save the details of the destination device like mac address, ip address, pk, pi. This endpoint is used to save the destination details for the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_create_remote_view_destination_by_location_group_id_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteViewDestinationV1Model model: RemoteViewDestination data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apple_v1_create_remote_view_destination_by_location_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `apple_v1_create_remote_view_destination_by_location_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apple/remoteviewdestination', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apple_v1_delete_remote_view_destination_by_id(self, id, **kwargs):  # noqa: E501
        """New - Delete a Remote View destination for the device  # noqa: E501

        This api is used to delete the destination details for the organization group, destination details like mac address, ip address, pk, pi  are required for remote viewing the iOS device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_delete_remote_view_destination_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of Remote View destination device to be deleted(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apple_v1_delete_remote_view_destination_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.apple_v1_delete_remote_view_destination_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def apple_v1_delete_remote_view_destination_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """New - Delete a Remote View destination for the device  # noqa: E501

        This api is used to delete the destination details for the organization group, destination details like mac address, ip address, pk, pi  are required for remote viewing the iOS device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_delete_remote_view_destination_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of Remote View destination device to be deleted(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apple_v1_delete_remote_view_destination_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `apple_v1_delete_remote_view_destination_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apple/remoteviewdestination/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apple_v1_get_remote_view_destination_by_id(self, id, **kwargs):  # noqa: E501
        """New - Gets Remote View destination details for the device  # noqa: E501

        This api is used to get the details of the specified destination. Destination details like mac address, ip address, pk, pi  are required for remote viewing the iOS device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_get_remote_view_destination_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of the Remote View destination device(Required) (required)
        :return: RemoteViewDestinationV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apple_v1_get_remote_view_destination_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.apple_v1_get_remote_view_destination_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def apple_v1_get_remote_view_destination_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """New - Gets Remote View destination details for the device  # noqa: E501

        This api is used to get the details of the specified destination. Destination details like mac address, ip address, pk, pi  are required for remote viewing the iOS device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_get_remote_view_destination_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of the Remote View destination device(Required) (required)
        :return: RemoteViewDestinationV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apple_v1_get_remote_view_destination_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `apple_v1_get_remote_view_destination_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apple/remoteviewdestination/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteViewDestinationV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apple_v1_get_remote_view_destination_by_location_group_id(self, group_id, group_id2, **kwargs):  # noqa: E501
        """New - Gets the list of Remote View destinations configured in the organization group  # noqa: E501

        This api is used to get list of destinations for the organization group. Destination details like mac address, ip address, pk, pi  are required for remote viewing the iOS device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_get_remote_view_destination_by_location_group_id(group_id, group_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Id of organization group(Required) (required)
        :param int group_id2: Id of organization group(Required) (required)
        :return: RemoteViewDestinationV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apple_v1_get_remote_view_destination_by_location_group_id_with_http_info(group_id, group_id2, **kwargs)  # noqa: E501
        else:
            (data) = self.apple_v1_get_remote_view_destination_by_location_group_id_with_http_info(group_id, group_id2, **kwargs)  # noqa: E501
            return data

    def apple_v1_get_remote_view_destination_by_location_group_id_with_http_info(self, group_id, group_id2, **kwargs):  # noqa: E501
        """New - Gets the list of Remote View destinations configured in the organization group  # noqa: E501

        This api is used to get list of destinations for the organization group. Destination details like mac address, ip address, pk, pi  are required for remote viewing the iOS device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_get_remote_view_destination_by_location_group_id_with_http_info(group_id, group_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: Id of organization group(Required) (required)
        :param int group_id2: Id of organization group(Required) (required)
        :return: RemoteViewDestinationV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'group_id2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apple_v1_get_remote_view_destination_by_location_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `apple_v1_get_remote_view_destination_by_location_group_id`")  # noqa: E501
        # verify the required parameter 'group_id2' is set
        if self.api_client.client_side_validation and ('group_id2' not in params or
                                                       params['group_id2'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id2` when calling `apple_v1_get_remote_view_destination_by_location_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))  # noqa: E501
        if 'group_id2' in params:
            query_params.append(('groupId', params['group_id2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apple/remoteviewdestination', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteViewDestinationV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apple_v1_update_remote_view_destination_by_id(self, model, **kwargs):  # noqa: E501
        """New - Update the destination details of a previously configured Remote View destination.  # noqa: E501

        iOS device can be remotely viewed by using software like AirServer or Reflector, it is required to save the details of the destination device like mac address, ip address, pk, pi. This endpoint is used to edit the details of a previously configured destination for the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_update_remote_view_destination_by_id(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteViewDestinationV1Model model: RemoteViewDestination data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apple_v1_update_remote_view_destination_by_id_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.apple_v1_update_remote_view_destination_by_id_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def apple_v1_update_remote_view_destination_by_id_with_http_info(self, model, **kwargs):  # noqa: E501
        """New - Update the destination details of a previously configured Remote View destination.  # noqa: E501

        iOS device can be remotely viewed by using software like AirServer or Reflector, it is required to save the details of the destination device like mac address, ip address, pk, pi. This endpoint is used to edit the details of a previously configured destination for the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apple_v1_update_remote_view_destination_by_id_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteViewDestinationV1Model model: RemoteViewDestination data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apple_v1_update_remote_view_destination_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `apple_v1_update_remote_view_destination_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apple/remoteviewdestination', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
