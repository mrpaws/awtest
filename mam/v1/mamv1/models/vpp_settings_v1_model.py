# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class VppSettingsV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        's_token_blob_id': 'int',
        'send_invite': 'bool',
        'organization_group_id': 'int',
        'reset_client_context': 'bool',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'description': 'description',
        's_token_blob_id': 'sTokenBlobId',
        'send_invite': 'sendInvite',
        'organization_group_id': 'organizationGroupId',
        'reset_client_context': 'resetClientContext',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, description=None, s_token_blob_id=None, send_invite=None, organization_group_id=None, reset_client_context=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """VppSettingsV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._s_token_blob_id = None
        self._send_invite = None
        self._organization_group_id = None
        self._reset_client_context = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        self.description = description
        self.s_token_blob_id = s_token_blob_id
        if send_invite is not None:
            self.send_invite = send_invite
        self.organization_group_id = organization_group_id
        if reset_client_context is not None:
            self.reset_client_context = reset_client_context
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def description(self):
        """Gets the description of this VppSettingsV1Model.  # noqa: E501

        Description of the vpp account.  # noqa: E501

        :return: The description of this VppSettingsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VppSettingsV1Model.

        Description of the vpp account.  # noqa: E501

        :param description: The description of this VppSettingsV1Model.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def s_token_blob_id(self):
        """Gets the s_token_blob_id of this VppSettingsV1Model.  # noqa: E501

        Blob id of the stoken file.  # noqa: E501

        :return: The s_token_blob_id of this VppSettingsV1Model.  # noqa: E501
        :rtype: int
        """
        return self._s_token_blob_id

    @s_token_blob_id.setter
    def s_token_blob_id(self, s_token_blob_id):
        """Sets the s_token_blob_id of this VppSettingsV1Model.

        Blob id of the stoken file.  # noqa: E501

        :param s_token_blob_id: The s_token_blob_id of this VppSettingsV1Model.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and s_token_blob_id is None:
            raise ValueError("Invalid value for `s_token_blob_id`, must not be `None`")  # noqa: E501

        self._s_token_blob_id = s_token_blob_id

    @property
    def send_invite(self):
        """Gets the send_invite of this VppSettingsV1Model.  # noqa: E501

        Send invitation to vpp users or not.  # noqa: E501

        :return: The send_invite of this VppSettingsV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._send_invite

    @send_invite.setter
    def send_invite(self, send_invite):
        """Sets the send_invite of this VppSettingsV1Model.

        Send invitation to vpp users or not.  # noqa: E501

        :param send_invite: The send_invite of this VppSettingsV1Model.  # noqa: E501
        :type: bool
        """

        self._send_invite = send_invite

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this VppSettingsV1Model.  # noqa: E501

        Organization group to save.  # noqa: E501

        :return: The organization_group_id of this VppSettingsV1Model.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this VppSettingsV1Model.

        Organization group to save.  # noqa: E501

        :param organization_group_id: The organization_group_id of this VppSettingsV1Model.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and organization_group_id is None:
            raise ValueError("Invalid value for `organization_group_id`, must not be `None`")  # noqa: E501

        self._organization_group_id = organization_group_id

    @property
    def reset_client_context(self):
        """Gets the reset_client_context of this VppSettingsV1Model.  # noqa: E501

        Whether reset client context if same stoken is used in other environment.  # noqa: E501

        :return: The reset_client_context of this VppSettingsV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._reset_client_context

    @reset_client_context.setter
    def reset_client_context(self, reset_client_context):
        """Sets the reset_client_context of this VppSettingsV1Model.

        Whether reset client context if same stoken is used in other environment.  # noqa: E501

        :param reset_client_context: The reset_client_context of this VppSettingsV1Model.  # noqa: E501
        :type: bool
        """

        self._reset_client_context = reset_client_context

    @property
    def id(self):
        """Gets the id of this VppSettingsV1Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this VppSettingsV1Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VppSettingsV1Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this VppSettingsV1Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this VppSettingsV1Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this VppSettingsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this VppSettingsV1Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this VppSettingsV1Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VppSettingsV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VppSettingsV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VppSettingsV1Model):
            return True

        return self.to_dict() != other.to_dict()
