# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class ChromeOsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def chrome_os_v1_add_cloud_profile_async(self, form_data, group_id, **kwargs):  # noqa: E501
        """New - Create a new Device Policy profile for the given organization Group  # noqa: E501

        Device Policy profile will have customized settings that can be applied on a Chrome device. These settings include auto-Launched Kiosk App,device Heartbeat monitor rate,application Settings for specifying list of apps that can be force-installed on a device,Email/SMS deviceStatus Alert Delivery settings etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_add_cloud_profile_async(form_data, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DdFormPayloadV1Model form_data: Kiosk Device policy to manage a chrome device(Required) (required)
        :param str group_id: Organization group Identifier where the devicePolicy profile needs to be created.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_add_cloud_profile_async_with_http_info(form_data, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_add_cloud_profile_async_with_http_info(form_data, group_id, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_add_cloud_profile_async_with_http_info(self, form_data, group_id, **kwargs):  # noqa: E501
        """New - Create a new Device Policy profile for the given organization Group  # noqa: E501

        Device Policy profile will have customized settings that can be applied on a Chrome device. These settings include auto-Launched Kiosk App,device Heartbeat monitor rate,application Settings for specifying list of apps that can be force-installed on a device,Email/SMS deviceStatus Alert Delivery settings etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_add_cloud_profile_async_with_http_info(form_data, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DdFormPayloadV1Model form_data: Kiosk Device policy to manage a chrome device(Required) (required)
        :param str group_id: Organization group Identifier where the devicePolicy profile needs to be created.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['form_data', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_add_cloud_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'form_data' is set
        if self.api_client.client_side_validation and ('form_data' not in params or
                                                       params['form_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `form_data` when calling `chrome_os_v1_add_cloud_profile_async`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `chrome_os_v1_add_cloud_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'form_data' in params:
            body_params = params['form_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/{groupId}/devicePolicy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_createor_update_user_profile_async(self, form_data, group_id, **kwargs):  # noqa: E501
        """New - Creates or Updates user policy for all the users in usergroups  # noqa: E501

        User Policy profile will have customized settings that can be pushed to users on a Chrome device. These settings include incognito mode restrictions,application blacklisting,network settings,vpn etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_createor_update_user_profile_async(form_data, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DdFormPayloadV1Model form_data: User Policy Settings to push to a user(Required) (required)
        :param str group_id: Organization group Identifier where the User Policy profile needs to be created.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_createor_update_user_profile_async_with_http_info(form_data, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_createor_update_user_profile_async_with_http_info(form_data, group_id, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_createor_update_user_profile_async_with_http_info(self, form_data, group_id, **kwargs):  # noqa: E501
        """New - Creates or Updates user policy for all the users in usergroups  # noqa: E501

        User Policy profile will have customized settings that can be pushed to users on a Chrome device. These settings include incognito mode restrictions,application blacklisting,network settings,vpn etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_createor_update_user_profile_async_with_http_info(form_data, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DdFormPayloadV1Model form_data: User Policy Settings to push to a user(Required) (required)
        :param str group_id: Organization group Identifier where the User Policy profile needs to be created.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['form_data', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_createor_update_user_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'form_data' is set
        if self.api_client.client_side_validation and ('form_data' not in params or
                                                       params['form_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `form_data` when calling `chrome_os_v1_createor_update_user_profile_async`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `chrome_os_v1_createor_update_user_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'form_data' in params:
            body_params = params['form_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/{groupId}/userPolicy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_delete_chrome_book_configuration(self, group_id, **kwargs):  # noqa: E501
        """New - Deletes the ChromeBook Configuration Settings for a Organization Group  # noqa: E501

        Deletes the ChromeBook Configuration settings of an Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_delete_chrome_book_configuration(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The customer code of the organization group whose configuration will be deleted.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_delete_chrome_book_configuration_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_delete_chrome_book_configuration_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_delete_chrome_book_configuration_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """New - Deletes the ChromeBook Configuration Settings for a Organization Group  # noqa: E501

        Deletes the ChromeBook Configuration settings of an Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_delete_chrome_book_configuration_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The customer code of the organization group whose configuration will be deleted.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_delete_chrome_book_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `chrome_os_v1_delete_chrome_book_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/configuration/{groupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_delete_chrome_os_profile_async(self, profile_id, **kwargs):  # noqa: E501
        """New - Deletes the Chrome OS Profile  # noqa: E501

        Deletes the Specified Chrome OS Profile by passing Device profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_delete_chrome_os_profile_async(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: Defines the profile that needs to be deleted(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_delete_chrome_os_profile_async_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_delete_chrome_os_profile_async_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_delete_chrome_os_profile_async_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """New - Deletes the Chrome OS Profile  # noqa: E501

        Deletes the Specified Chrome OS Profile by passing Device profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_delete_chrome_os_profile_async_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profile_id: Defines the profile that needs to be deleted(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_delete_chrome_os_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if self.api_client.client_side_validation and ('profile_id' not in params or
                                                       params['profile_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_id` when calling `chrome_os_v1_delete_chrome_os_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/cloudprofile/{profileId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_edit_cloud_profile(self, group_id, policy_id, device_policy_data, **kwargs):  # noqa: E501
        """New - Edit the existing Device Policy profile by creating a version of the settings  # noqa: E501

        Device Policy profile will have customized settings (key/value pairs with pre-defined airwatch specific keys) that can be applied on a Chrome device.These settings include auto-Launched Kiosk App,device Heartbeat monitor rate,applicationSettings for specifying list of apps that can be force-installed on a device,Email/SMS deviceStatus Alert Delivery settings etc. *On editing a cloud policy, new version of the settings will be created.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_edit_cloud_profile(group_id, policy_id, device_policy_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Organization group Identifier where the devicePolicy profile needs to be updated.(Required) (required)
        :param str policy_id: AW internal devicePolicy profile identifier(Required) (required)
        :param str device_policy_data: Kiosk Device policy to manage a chrome device(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_edit_cloud_profile_with_http_info(group_id, policy_id, device_policy_data, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_edit_cloud_profile_with_http_info(group_id, policy_id, device_policy_data, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_edit_cloud_profile_with_http_info(self, group_id, policy_id, device_policy_data, **kwargs):  # noqa: E501
        """New - Edit the existing Device Policy profile by creating a version of the settings  # noqa: E501

        Device Policy profile will have customized settings (key/value pairs with pre-defined airwatch specific keys) that can be applied on a Chrome device.These settings include auto-Launched Kiosk App,device Heartbeat monitor rate,applicationSettings for specifying list of apps that can be force-installed on a device,Email/SMS deviceStatus Alert Delivery settings etc. *On editing a cloud policy, new version of the settings will be created.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_edit_cloud_profile_with_http_info(group_id, policy_id, device_policy_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Organization group Identifier where the devicePolicy profile needs to be updated.(Required) (required)
        :param str policy_id: AW internal devicePolicy profile identifier(Required) (required)
        :param str device_policy_data: Kiosk Device policy to manage a chrome device(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'policy_id', 'device_policy_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_edit_cloud_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `chrome_os_v1_edit_cloud_profile`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in params or
                                                       params['policy_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `policy_id` when calling `chrome_os_v1_edit_cloud_profile`")  # noqa: E501
        # verify the required parameter 'device_policy_data' is set
        if self.api_client.client_side_validation and ('device_policy_data' not in params or
                                                       params['device_policy_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_policy_data` when calling `chrome_os_v1_edit_cloud_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'device_policy_data' in params:
            query_params.append(('devicePolicyData', params['device_policy_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/{groupId}/policy/{policyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_get_chrome_book_configuration(self, group_id, **kwargs):  # noqa: E501
        """New - loads the ChromeBook Configuration Settings for an Organization Group  # noqa: E501

        Loads the ChromeBook Configuration of a Domain for an Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_get_chrome_book_configuration(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The customer code of the organization group whose configuration will be returned.(Required) (required)
        :return: ChromeOSConfigurationV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_get_chrome_book_configuration_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_get_chrome_book_configuration_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_get_chrome_book_configuration_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """New - loads the ChromeBook Configuration Settings for an Organization Group  # noqa: E501

        Loads the ChromeBook Configuration of a Domain for an Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_get_chrome_book_configuration_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The customer code of the organization group whose configuration will be returned.(Required) (required)
        :return: ChromeOSConfigurationV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_get_chrome_book_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `chrome_os_v1_get_chrome_book_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/configuration/{groupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChromeOSConfigurationV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_get_cloud_profile_async(self, group_id, policy_id, **kwargs):  # noqa: E501
        """New - Retrieve the existing Policy profile  # noqa: E501

        Device/User Policy profile will have customized settings (key/value pairs with pre-defined airwatch specific keys) that can be applied on a Chrome device.These settings include auto-Launched Kiosk App,device Heartbeat monitor rate,application Settings for specifying list of apps that can be force-installed on a device,Email/SMS deviceStatus Alert Delivery settings etc. *On editing a cloud policy, new version of the settings will be created.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_get_cloud_profile_async(group_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The identifier for the organization group where the policy is being requested.(Required) (required)
        :param str policy_id: AW internal devicePolicy profile identifier(Required) (required)
        :return: ChromeOsPolicySettingsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_get_cloud_profile_async_with_http_info(group_id, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_get_cloud_profile_async_with_http_info(group_id, policy_id, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_get_cloud_profile_async_with_http_info(self, group_id, policy_id, **kwargs):  # noqa: E501
        """New - Retrieve the existing Policy profile  # noqa: E501

        Device/User Policy profile will have customized settings (key/value pairs with pre-defined airwatch specific keys) that can be applied on a Chrome device.These settings include auto-Launched Kiosk App,device Heartbeat monitor rate,application Settings for specifying list of apps that can be force-installed on a device,Email/SMS deviceStatus Alert Delivery settings etc. *On editing a cloud policy, new version of the settings will be created.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_get_cloud_profile_async_with_http_info(group_id, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The identifier for the organization group where the policy is being requested.(Required) (required)
        :param str policy_id: AW internal devicePolicy profile identifier(Required) (required)
        :return: ChromeOsPolicySettingsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_get_cloud_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `chrome_os_v1_get_cloud_profile_async`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if self.api_client.client_side_validation and ('policy_id' not in params or
                                                       params['policy_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `policy_id` when calling `chrome_os_v1_get_cloud_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/{groupId}/policy/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChromeOsPolicySettingsV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_get_cloud_profile_metadata_async(self, group_id, profile_id, profile_type, **kwargs):  # noqa: E501
        """New - Get Metadata for loading device Policy cloud profile UI  # noqa: E501

        Device or User Policy profile will have customized settings (key/value pairs with pre-defined airwatch specific keys) that can be applied on a Chrome device.These settings include network, VPN, URL Access control, Sign In, auto-Launched Kiosk App,device Heartbeat monitor rate,application Settings for specifying list of apps that can be force-installed on a device,Email/SMS deviceStatus Alert Delivery settings etc. *On editing a cloud profile, new version of the settings will be created.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_get_cloud_profile_metadata_async(group_id, profile_id, profile_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The identifier for the organization group where the metadata is being requested.(Required) (required)
        :param str profile_id: AW internal devicePolicy profile identifier(Required) (required)
        :param int profile_type: Type of profile 1 is Device Profile 2 is User Profile(Required) (required)
        :param bool read_only: Boolean flag to determine if the metadata returned should render the form in read only mode.
        :return: ChromeOsPolicySettingsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_get_cloud_profile_metadata_async_with_http_info(group_id, profile_id, profile_type, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_get_cloud_profile_metadata_async_with_http_info(group_id, profile_id, profile_type, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_get_cloud_profile_metadata_async_with_http_info(self, group_id, profile_id, profile_type, **kwargs):  # noqa: E501
        """New - Get Metadata for loading device Policy cloud profile UI  # noqa: E501

        Device or User Policy profile will have customized settings (key/value pairs with pre-defined airwatch specific keys) that can be applied on a Chrome device.These settings include network, VPN, URL Access control, Sign In, auto-Launched Kiosk App,device Heartbeat monitor rate,application Settings for specifying list of apps that can be force-installed on a device,Email/SMS deviceStatus Alert Delivery settings etc. *On editing a cloud profile, new version of the settings will be created.*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_get_cloud_profile_metadata_async_with_http_info(group_id, profile_id, profile_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The identifier for the organization group where the metadata is being requested.(Required) (required)
        :param str profile_id: AW internal devicePolicy profile identifier(Required) (required)
        :param int profile_type: Type of profile 1 is Device Profile 2 is User Profile(Required) (required)
        :param bool read_only: Boolean flag to determine if the metadata returned should render the form in read only mode.
        :return: ChromeOsPolicySettingsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'profile_id', 'profile_type', 'read_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_get_cloud_profile_metadata_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `chrome_os_v1_get_cloud_profile_metadata_async`")  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if self.api_client.client_side_validation and ('profile_id' not in params or
                                                       params['profile_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_id` when calling `chrome_os_v1_get_cloud_profile_metadata_async`")  # noqa: E501
        # verify the required parameter 'profile_type' is set
        if self.api_client.client_side_validation and ('profile_type' not in params or
                                                       params['profile_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_type` when calling `chrome_os_v1_get_cloud_profile_metadata_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']  # noqa: E501
        if 'profile_type' in params:
            path_params['profileType'] = params['profile_type']  # noqa: E501

        query_params = []
        if 'read_only' in params:
            query_params.append(('readOnly', params['read_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/{groupId}/cloudprofile/{profileId}/profileType/{profileType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChromeOsPolicySettingsV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_get_policy_async(self, device_id, **kwargs):  # noqa: E501
        """New - Get the status of the update by returning the policy on the device  # noqa: E501

        Get the list of policies applied to a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_get_policy_async(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Google-assigned device identifier whose policy is updated(Required) (required)
        :return: ChromeOsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_get_policy_async_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_get_policy_async_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_get_policy_async_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """New - Get the status of the update by returning the policy on the device  # noqa: E501

        Get the list of policies applied to a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_get_policy_async_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Google-assigned device identifier whose policy is updated(Required) (required)
        :return: ChromeOsV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_get_policy_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `chrome_os_v1_get_policy_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/devices/{deviceId}/policy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChromeOsV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_insert_chrome_book_configuration(self, chromebook_configuration_model, group_id, **kwargs):  # noqa: E501
        """New - Saves the ChromeBook Configuration Settings for an Organization Group  # noqa: E501

        Saves the ChromeBook Configuration of a Domain for an Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_insert_chrome_book_configuration(chromebook_configuration_model, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChromeOSConfigurationV1Model chromebook_configuration_model: Chromebook Configuration Settings(Required) (required)
        :param str group_id: The customer code of the organization group where configuration needs to be added.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_insert_chrome_book_configuration_with_http_info(chromebook_configuration_model, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_insert_chrome_book_configuration_with_http_info(chromebook_configuration_model, group_id, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_insert_chrome_book_configuration_with_http_info(self, chromebook_configuration_model, group_id, **kwargs):  # noqa: E501
        """New - Saves the ChromeBook Configuration Settings for an Organization Group  # noqa: E501

        Saves the ChromeBook Configuration of a Domain for an Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_insert_chrome_book_configuration_with_http_info(chromebook_configuration_model, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChromeOSConfigurationV1Model chromebook_configuration_model: Chromebook Configuration Settings(Required) (required)
        :param str group_id: The customer code of the organization group where configuration needs to be added.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chromebook_configuration_model', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_insert_chrome_book_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chromebook_configuration_model' is set
        if self.api_client.client_side_validation and ('chromebook_configuration_model' not in params or
                                                       params['chromebook_configuration_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chromebook_configuration_model` when calling `chrome_os_v1_insert_chrome_book_configuration`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `chrome_os_v1_insert_chrome_book_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'chromebook_configuration_model' in params:
            body_params = params['chromebook_configuration_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/configuration/{groupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_set_lost_mode_async(self, device_id, is_enabled, **kwargs):  # noqa: E501
        """New - Enable or disable the device lost mode.  # noqa: E501

        Enable or disable the device lost mode, device will be locked when it is in the lost mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_set_lost_mode_async(device_id, is_enabled, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Defines the device id.(Required) (required)
        :param bool is_enabled: Flag to indicate enable or disable lost mode.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_set_lost_mode_async_with_http_info(device_id, is_enabled, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_set_lost_mode_async_with_http_info(device_id, is_enabled, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_set_lost_mode_async_with_http_info(self, device_id, is_enabled, **kwargs):  # noqa: E501
        """New - Enable or disable the device lost mode.  # noqa: E501

        Enable or disable the device lost mode, device will be locked when it is in the lost mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_set_lost_mode_async_with_http_info(device_id, is_enabled, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_id: Defines the device id.(Required) (required)
        :param bool is_enabled: Flag to indicate enable or disable lost mode.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'is_enabled']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_set_lost_mode_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `chrome_os_v1_set_lost_mode_async`")  # noqa: E501
        # verify the required parameter 'is_enabled' is set
        if self.api_client.client_side_validation and ('is_enabled' not in params or
                                                       params['is_enabled'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `is_enabled` when calling `chrome_os_v1_set_lost_mode_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'is_enabled' in params:
            path_params['isEnabled'] = params['is_enabled']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/{deviceId}/lostmode/{isEnabled}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chrome_os_v1_sync_devices_async(self, group_id, **kwargs):  # noqa: E501
        """New - Executes device sync command for the given organization group.  # noqa: E501

        Saves all devices enrolled on or after the specified date from Google Cloud into AirWatch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_sync_devices_async(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The customer code of the organization group that the devices belong to.(Required) (required)
        :param datetime enrollment_date: Retrieve all devices enrolled on or after this date in YYYY-MM-DDTHH:MM:SSZ format(Example - \"2013-03-23T14:23:05\").
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chrome_os_v1_sync_devices_async_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.chrome_os_v1_sync_devices_async_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def chrome_os_v1_sync_devices_async_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """New - Executes device sync command for the given organization group.  # noqa: E501

        Saves all devices enrolled on or after the specified date from Google Cloud into AirWatch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chrome_os_v1_sync_devices_async_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The customer code of the organization group that the devices belong to.(Required) (required)
        :param datetime enrollment_date: Retrieve all devices enrolled on or after this date in YYYY-MM-DDTHH:MM:SSZ format(Example - \"2013-03-23T14:23:05\").
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'enrollment_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chrome_os_v1_sync_devices_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `chrome_os_v1_sync_devices_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'enrollment_date' in params:
            query_params.append(('enrollmentDate', params['enrollment_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/chromeos/{groupId}/devices/sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
