# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class PurchasedAppOrdersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_licenses': 'int',
        'on_hold': 'int',
        'allocated': 'int',
        'unallocated': 'int',
        'redeemed': 'int',
        'externally_redeemed': 'int',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'total_licenses': 'TotalLicenses',
        'on_hold': 'OnHold',
        'allocated': 'Allocated',
        'unallocated': 'Unallocated',
        'redeemed': 'Redeemed',
        'externally_redeemed': 'ExternallyRedeemed',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, total_licenses=None, on_hold=None, allocated=None, unallocated=None, redeemed=None, externally_redeemed=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """PurchasedAppOrdersModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_licenses = None
        self._on_hold = None
        self._allocated = None
        self._unallocated = None
        self._redeemed = None
        self._externally_redeemed = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if total_licenses is not None:
            self.total_licenses = total_licenses
        if on_hold is not None:
            self.on_hold = on_hold
        if allocated is not None:
            self.allocated = allocated
        if unallocated is not None:
            self.unallocated = unallocated
        if redeemed is not None:
            self.redeemed = redeemed
        if externally_redeemed is not None:
            self.externally_redeemed = externally_redeemed
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def total_licenses(self):
        """Gets the total_licenses of this PurchasedAppOrdersModel.  # noqa: E501

        Gets or sets total number of Licenses.  # noqa: E501

        :return: The total_licenses of this PurchasedAppOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._total_licenses

    @total_licenses.setter
    def total_licenses(self, total_licenses):
        """Sets the total_licenses of this PurchasedAppOrdersModel.

        Gets or sets total number of Licenses.  # noqa: E501

        :param total_licenses: The total_licenses of this PurchasedAppOrdersModel.  # noqa: E501
        :type: int
        """

        self._total_licenses = total_licenses

    @property
    def on_hold(self):
        """Gets the on_hold of this PurchasedAppOrdersModel.  # noqa: E501

        Gets or sets number of licenses which are on hold.  # noqa: E501

        :return: The on_hold of this PurchasedAppOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._on_hold

    @on_hold.setter
    def on_hold(self, on_hold):
        """Sets the on_hold of this PurchasedAppOrdersModel.

        Gets or sets number of licenses which are on hold.  # noqa: E501

        :param on_hold: The on_hold of this PurchasedAppOrdersModel.  # noqa: E501
        :type: int
        """

        self._on_hold = on_hold

    @property
    def allocated(self):
        """Gets the allocated of this PurchasedAppOrdersModel.  # noqa: E501

        Gets or sets number of Allocated Licenses.  # noqa: E501

        :return: The allocated of this PurchasedAppOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._allocated

    @allocated.setter
    def allocated(self, allocated):
        """Sets the allocated of this PurchasedAppOrdersModel.

        Gets or sets number of Allocated Licenses.  # noqa: E501

        :param allocated: The allocated of this PurchasedAppOrdersModel.  # noqa: E501
        :type: int
        """

        self._allocated = allocated

    @property
    def unallocated(self):
        """Gets the unallocated of this PurchasedAppOrdersModel.  # noqa: E501

        Gets or sets number of unallocated Licenses.  # noqa: E501

        :return: The unallocated of this PurchasedAppOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._unallocated

    @unallocated.setter
    def unallocated(self, unallocated):
        """Sets the unallocated of this PurchasedAppOrdersModel.

        Gets or sets number of unallocated Licenses.  # noqa: E501

        :param unallocated: The unallocated of this PurchasedAppOrdersModel.  # noqa: E501
        :type: int
        """

        self._unallocated = unallocated

    @property
    def redeemed(self):
        """Gets the redeemed of this PurchasedAppOrdersModel.  # noqa: E501

        Gets or sets number of Redeemed Licenses.  # noqa: E501

        :return: The redeemed of this PurchasedAppOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._redeemed

    @redeemed.setter
    def redeemed(self, redeemed):
        """Sets the redeemed of this PurchasedAppOrdersModel.

        Gets or sets number of Redeemed Licenses.  # noqa: E501

        :param redeemed: The redeemed of this PurchasedAppOrdersModel.  # noqa: E501
        :type: int
        """

        self._redeemed = redeemed

    @property
    def externally_redeemed(self):
        """Gets the externally_redeemed of this PurchasedAppOrdersModel.  # noqa: E501

        Gets or sets number of ExternallyRedeemed Licenses.  # noqa: E501

        :return: The externally_redeemed of this PurchasedAppOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._externally_redeemed

    @externally_redeemed.setter
    def externally_redeemed(self, externally_redeemed):
        """Sets the externally_redeemed of this PurchasedAppOrdersModel.

        Gets or sets number of ExternallyRedeemed Licenses.  # noqa: E501

        :param externally_redeemed: The externally_redeemed of this PurchasedAppOrdersModel.  # noqa: E501
        :type: int
        """

        self._externally_redeemed = externally_redeemed

    @property
    def id(self):
        """Gets the id of this PurchasedAppOrdersModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this PurchasedAppOrdersModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PurchasedAppOrdersModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this PurchasedAppOrdersModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this PurchasedAppOrdersModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this PurchasedAppOrdersModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PurchasedAppOrdersModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this PurchasedAppOrdersModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchasedAppOrdersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchasedAppOrdersModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PurchasedAppOrdersModel):
            return True

        return self.to_dict() != other.to_dict()
