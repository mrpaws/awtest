# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class EnrolledDeviceDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'serial_number': 'str',
        'asset_number': 'str',
        'friendly_name': 'str',
        'user_name': 'str',
        'enrolled_date': 'str',
        'registration_date': 'str',
        'last_seen': 'str',
        'platform': 'str',
        'organization_group': 'str',
        'custom_attributes': 'list[CustomAttribute]'
    }

    attribute_map = {
        'device_id': 'DeviceID',
        'serial_number': 'SerialNumber',
        'asset_number': 'AssetNumber',
        'friendly_name': 'FriendlyName',
        'user_name': 'UserName',
        'enrolled_date': 'EnrolledDate',
        'registration_date': 'RegistrationDate',
        'last_seen': 'LastSeen',
        'platform': 'Platform',
        'organization_group': 'OrganizationGroup',
        'custom_attributes': 'CustomAttributes'
    }

    def __init__(self, device_id=None, serial_number=None, asset_number=None, friendly_name=None, user_name=None, enrolled_date=None, registration_date=None, last_seen=None, platform=None, organization_group=None, custom_attributes=None, _configuration=None):  # noqa: E501
        """EnrolledDeviceDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_id = None
        self._serial_number = None
        self._asset_number = None
        self._friendly_name = None
        self._user_name = None
        self._enrolled_date = None
        self._registration_date = None
        self._last_seen = None
        self._platform = None
        self._organization_group = None
        self._custom_attributes = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if serial_number is not None:
            self.serial_number = serial_number
        if asset_number is not None:
            self.asset_number = asset_number
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if user_name is not None:
            self.user_name = user_name
        if enrolled_date is not None:
            self.enrolled_date = enrolled_date
        if registration_date is not None:
            self.registration_date = registration_date
        if last_seen is not None:
            self.last_seen = last_seen
        if platform is not None:
            self.platform = platform
        if organization_group is not None:
            self.organization_group = organization_group
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes

    @property
    def device_id(self):
        """Gets the device_id of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets device Identifier [Used Internally in AirWatch].  # noqa: E501

        :return: The device_id of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this EnrolledDeviceDetails.

        Gets or sets device Identifier [Used Internally in AirWatch].  # noqa: E501

        :param device_id: The device_id of this EnrolledDeviceDetails.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def serial_number(self):
        """Gets the serial_number of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets serial Number of device.  # noqa: E501

        :return: The serial_number of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this EnrolledDeviceDetails.

        Gets or sets serial Number of device.  # noqa: E501

        :param serial_number: The serial_number of this EnrolledDeviceDetails.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def asset_number(self):
        """Gets the asset_number of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets asset Number of device.  # noqa: E501

        :return: The asset_number of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this EnrolledDeviceDetails.

        Gets or sets asset Number of device.  # noqa: E501

        :param asset_number: The asset_number of this EnrolledDeviceDetails.  # noqa: E501
        :type: str
        """

        self._asset_number = asset_number

    @property
    def friendly_name(self):
        """Gets the friendly_name of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets device Friendly Name.  # noqa: E501

        :return: The friendly_name of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this EnrolledDeviceDetails.

        Gets or sets device Friendly Name.  # noqa: E501

        :param friendly_name: The friendly_name of this EnrolledDeviceDetails.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def user_name(self):
        """Gets the user_name of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets username of device user who is enrolled into device.  # noqa: E501

        :return: The user_name of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this EnrolledDeviceDetails.

        Gets or sets username of device user who is enrolled into device.  # noqa: E501

        :param user_name: The user_name of this EnrolledDeviceDetails.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def enrolled_date(self):
        """Gets the enrolled_date of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets enrollment date.  # noqa: E501

        :return: The enrolled_date of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._enrolled_date

    @enrolled_date.setter
    def enrolled_date(self, enrolled_date):
        """Sets the enrolled_date of this EnrolledDeviceDetails.

        Gets or sets enrollment date.  # noqa: E501

        :param enrolled_date: The enrolled_date of this EnrolledDeviceDetails.  # noqa: E501
        :type: str
        """

        self._enrolled_date = enrolled_date

    @property
    def registration_date(self):
        """Gets the registration_date of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets registration date.  # noqa: E501

        :return: The registration_date of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this EnrolledDeviceDetails.

        Gets or sets registration date.  # noqa: E501

        :param registration_date: The registration_date of this EnrolledDeviceDetails.  # noqa: E501
        :type: str
        """

        self._registration_date = registration_date

    @property
    def last_seen(self):
        """Gets the last_seen of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets last seen date and time information of device.  # noqa: E501

        :return: The last_seen of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this EnrolledDeviceDetails.

        Gets or sets last seen date and time information of device.  # noqa: E501

        :param last_seen: The last_seen of this EnrolledDeviceDetails.  # noqa: E501
        :type: str
        """

        self._last_seen = last_seen

    @property
    def platform(self):
        """Gets the platform of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets device Platform like Apple, Android etc.  # noqa: E501

        :return: The platform of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this EnrolledDeviceDetails.

        Gets or sets device Platform like Apple, Android etc.  # noqa: E501

        :param platform: The platform of this EnrolledDeviceDetails.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def organization_group(self):
        """Gets the organization_group of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets device Organization Name.  # noqa: E501

        :return: The organization_group of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: str
        """
        return self._organization_group

    @organization_group.setter
    def organization_group(self, organization_group):
        """Sets the organization_group of this EnrolledDeviceDetails.

        Gets or sets device Organization Name.  # noqa: E501

        :param organization_group: The organization_group of this EnrolledDeviceDetails.  # noqa: E501
        :type: str
        """

        self._organization_group = organization_group

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this EnrolledDeviceDetails.  # noqa: E501

        Gets or sets the custom attributes.  # noqa: E501

        :return: The custom_attributes of this EnrolledDeviceDetails.  # noqa: E501
        :rtype: list[CustomAttribute]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this EnrolledDeviceDetails.

        Gets or sets the custom attributes.  # noqa: E501

        :param custom_attributes: The custom_attributes of this EnrolledDeviceDetails.  # noqa: E501
        :type: list[CustomAttribute]
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrolledDeviceDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrolledDeviceDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrolledDeviceDetails):
            return True

        return self.to_dict() != other.to_dict()
