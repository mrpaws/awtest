# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class ExportStatusModelV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'status_reason': 'str',
        'report_uuid': 'str',
        'href': 'str'
    }

    attribute_map = {
        'status': 'status',
        'status_reason': 'status_reason',
        'report_uuid': 'report_uuid',
        'href': 'href'
    }

    def __init__(self, status=None, status_reason=None, report_uuid=None, href=None, _configuration=None):  # noqa: E501
        """ExportStatusModelV1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._status_reason = None
        self._report_uuid = None
        self._href = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if status_reason is not None:
            self.status_reason = status_reason
        if report_uuid is not None:
            self.report_uuid = report_uuid
        if href is not None:
            self.href = href

    @property
    def status(self):
        """Gets the status of this ExportStatusModelV1.  # noqa: E501

        report export status  # noqa: E501

        :return: The status of this ExportStatusModelV1.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExportStatusModelV1.

        report export status  # noqa: E501

        :param status: The status of this ExportStatusModelV1.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this ExportStatusModelV1.  # noqa: E501

        Details status reason, this field has data only in case of failure else returns blank for non failure status  # noqa: E501

        :return: The status_reason of this ExportStatusModelV1.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this ExportStatusModelV1.

        Details status reason, this field has data only in case of failure else returns blank for non failure status  # noqa: E501

        :param status_reason: The status_reason of this ExportStatusModelV1.  # noqa: E501
        :type: str
        """

        self._status_reason = status_reason

    @property
    def report_uuid(self):
        """Gets the report_uuid of this ExportStatusModelV1.  # noqa: E501

        report uuid, it will be blank in case of all other status except complete  # noqa: E501

        :return: The report_uuid of this ExportStatusModelV1.  # noqa: E501
        :rtype: str
        """
        return self._report_uuid

    @report_uuid.setter
    def report_uuid(self, report_uuid):
        """Sets the report_uuid of this ExportStatusModelV1.

        report uuid, it will be blank in case of all other status except complete  # noqa: E501

        :param report_uuid: The report_uuid of this ExportStatusModelV1.  # noqa: E501
        :type: str
        """

        self._report_uuid = report_uuid

    @property
    def href(self):
        """Gets the href of this ExportStatusModelV1.  # noqa: E501

        HyperLink to the exported report, it will be blank in case of all other status except complete  # noqa: E501

        :return: The href of this ExportStatusModelV1.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ExportStatusModelV1.

        HyperLink to the exported report, it will be blank in case of all other status except complete  # noqa: E501

        :param href: The href of this ExportStatusModelV1.  # noqa: E501
        :type: str
        """

        self._href = href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportStatusModelV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportStatusModelV1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExportStatusModelV1):
            return True

        return self.to_dict() != other.to_dict()
