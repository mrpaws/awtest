# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class CertificatePinningCertEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_id': 'int',
        'public_key': 'str',
        'is_enabled': 'bool',
        'issuer_name': 'str',
        'subject_name': 'str',
        'not_after': 'datetime',
        'not_before': 'datetime'
    }

    attribute_map = {
        'certificate_id': 'CertificateId',
        'public_key': 'PublicKey',
        'is_enabled': 'IsEnabled',
        'issuer_name': 'IssuerName',
        'subject_name': 'SubjectName',
        'not_after': 'NotAfter',
        'not_before': 'NotBefore'
    }

    def __init__(self, certificate_id=None, public_key=None, is_enabled=None, issuer_name=None, subject_name=None, not_after=None, not_before=None, _configuration=None):  # noqa: E501
        """CertificatePinningCertEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._certificate_id = None
        self._public_key = None
        self._is_enabled = None
        self._issuer_name = None
        self._subject_name = None
        self._not_after = None
        self._not_before = None
        self.discriminator = None

        if certificate_id is not None:
            self.certificate_id = certificate_id
        if public_key is not None:
            self.public_key = public_key
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if issuer_name is not None:
            self.issuer_name = issuer_name
        if subject_name is not None:
            self.subject_name = subject_name
        if not_after is not None:
            self.not_after = not_after
        if not_before is not None:
            self.not_before = not_before

    @property
    def certificate_id(self):
        """Gets the certificate_id of this CertificatePinningCertEntity.  # noqa: E501


        :return: The certificate_id of this CertificatePinningCertEntity.  # noqa: E501
        :rtype: int
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this CertificatePinningCertEntity.


        :param certificate_id: The certificate_id of this CertificatePinningCertEntity.  # noqa: E501
        :type: int
        """

        self._certificate_id = certificate_id

    @property
    def public_key(self):
        """Gets the public_key of this CertificatePinningCertEntity.  # noqa: E501


        :return: The public_key of this CertificatePinningCertEntity.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this CertificatePinningCertEntity.


        :param public_key: The public_key of this CertificatePinningCertEntity.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def is_enabled(self):
        """Gets the is_enabled of this CertificatePinningCertEntity.  # noqa: E501


        :return: The is_enabled of this CertificatePinningCertEntity.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this CertificatePinningCertEntity.


        :param is_enabled: The is_enabled of this CertificatePinningCertEntity.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def issuer_name(self):
        """Gets the issuer_name of this CertificatePinningCertEntity.  # noqa: E501


        :return: The issuer_name of this CertificatePinningCertEntity.  # noqa: E501
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this CertificatePinningCertEntity.


        :param issuer_name: The issuer_name of this CertificatePinningCertEntity.  # noqa: E501
        :type: str
        """

        self._issuer_name = issuer_name

    @property
    def subject_name(self):
        """Gets the subject_name of this CertificatePinningCertEntity.  # noqa: E501


        :return: The subject_name of this CertificatePinningCertEntity.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this CertificatePinningCertEntity.


        :param subject_name: The subject_name of this CertificatePinningCertEntity.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def not_after(self):
        """Gets the not_after of this CertificatePinningCertEntity.  # noqa: E501


        :return: The not_after of this CertificatePinningCertEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificatePinningCertEntity.


        :param not_after: The not_after of this CertificatePinningCertEntity.  # noqa: E501
        :type: datetime
        """

        self._not_after = not_after

    @property
    def not_before(self):
        """Gets the not_before of this CertificatePinningCertEntity.  # noqa: E501


        :return: The not_before of this CertificatePinningCertEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificatePinningCertEntity.


        :param not_before: The not_before of this CertificatePinningCertEntity.  # noqa: E501
        :type: datetime
        """

        self._not_before = not_before

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificatePinningCertEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificatePinningCertEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificatePinningCertEntity):
            return True

        return self.to_dict() != other.to_dict()
