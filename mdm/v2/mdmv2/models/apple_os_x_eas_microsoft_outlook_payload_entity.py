# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXEasMicrosoftOutlookPayloadEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'exchange_host': 'str',
        'exchange_port': 'str',
        'use_ssl': 'bool',
        'user_name': 'str',
        'email_address': 'str',
        'password': 'str',
        'domain': 'str',
        'directory_server': 'str',
        'directory_server_port': 'str',
        'search_base': 'str',
        'directory_server_requires_ssl': 'bool'
    }

    attribute_map = {
        'account_name': 'AccountName',
        'exchange_host': 'ExchangeHost',
        'exchange_port': 'ExchangePort',
        'use_ssl': 'UseSSL',
        'user_name': 'UserName',
        'email_address': 'EmailAddress',
        'password': 'Password',
        'domain': 'Domain',
        'directory_server': 'DirectoryServer',
        'directory_server_port': 'DirectoryServerPort',
        'search_base': 'SearchBase',
        'directory_server_requires_ssl': 'DirectoryServerRequiresSSL'
    }

    def __init__(self, account_name=None, exchange_host=None, exchange_port=None, use_ssl=None, user_name=None, email_address=None, password=None, domain=None, directory_server=None, directory_server_port=None, search_base=None, directory_server_requires_ssl=None, _configuration=None):  # noqa: E501
        """AppleOsXEasMicrosoftOutlookPayloadEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_name = None
        self._exchange_host = None
        self._exchange_port = None
        self._use_ssl = None
        self._user_name = None
        self._email_address = None
        self._password = None
        self._domain = None
        self._directory_server = None
        self._directory_server_port = None
        self._search_base = None
        self._directory_server_requires_ssl = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if exchange_host is not None:
            self.exchange_host = exchange_host
        if exchange_port is not None:
            self.exchange_port = exchange_port
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if user_name is not None:
            self.user_name = user_name
        if email_address is not None:
            self.email_address = email_address
        if password is not None:
            self.password = password
        if domain is not None:
            self.domain = domain
        if directory_server is not None:
            self.directory_server = directory_server
        if directory_server_port is not None:
            self.directory_server_port = directory_server_port
        if search_base is not None:
            self.search_base = search_base
        if directory_server_requires_ssl is not None:
            self.directory_server_requires_ssl = directory_server_requires_ssl

    @property
    def account_name(self):
        """Gets the account_name of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets name of the account.  # noqa: E501

        :return: The account_name of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets name of the account.  # noqa: E501

        :param account_name: The account_name of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def exchange_host(self):
        """Gets the exchange_host of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets specifies the Exchange server host name.  # noqa: E501

        :return: The exchange_host of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._exchange_host

    @exchange_host.setter
    def exchange_host(self, exchange_host):
        """Sets the exchange_host of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets specifies the Exchange server host name.  # noqa: E501

        :param exchange_host: The exchange_host of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._exchange_host = exchange_host

    @property
    def exchange_port(self):
        """Gets the exchange_port of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets the port number assigned for communication with the Exchange server.  # noqa: E501

        :return: The exchange_port of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._exchange_port

    @exchange_port.setter
    def exchange_port(self, exchange_port):
        """Sets the exchange_port of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets the port number assigned for communication with the Exchange server.  # noqa: E501

        :param exchange_port: The exchange_port of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._exchange_port = exchange_port

    @property
    def use_ssl(self):
        """Gets the use_ssl of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether specifies if all communication occurs through the secure socket layer.  # noqa: E501

        :return: The use_ssl of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets a value indicating whether specifies if all communication occurs through the secure socket layer.  # noqa: E501

        :param use_ssl: The use_ssl of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def user_name(self):
        """Gets the user_name of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets username for the account.  # noqa: E501

        :return: The user_name of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets username for the account.  # noqa: E501

        :param user_name: The user_name of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def email_address(self):
        """Gets the email_address of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets user's email address.  # noqa: E501

        :return: The email_address of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets user's email address.  # noqa: E501

        :param email_address: The email_address of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def password(self):
        """Gets the password of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets email account's password.  # noqa: E501

        :return: The password of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets email account's password.  # noqa: E501

        :param password: The password of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def domain(self):
        """Gets the domain of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets user's email domain.  # noqa: E501

        :return: The domain of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets user's email domain.  # noqa: E501

        :param domain: The domain of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def directory_server(self):
        """Gets the directory_server of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets the location of the Directory server.  # noqa: E501

        :return: The directory_server of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._directory_server

    @directory_server.setter
    def directory_server(self, directory_server):
        """Sets the directory_server of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets the location of the Directory server.  # noqa: E501

        :param directory_server: The directory_server of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._directory_server = directory_server

    @property
    def directory_server_port(self):
        """Gets the directory_server_port of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets the port number of the Directory server.  # noqa: E501

        :return: The directory_server_port of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._directory_server_port

    @directory_server_port.setter
    def directory_server_port(self, directory_server_port):
        """Sets the directory_server_port of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets the port number of the Directory server.  # noqa: E501

        :param directory_server_port: The directory_server_port of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._directory_server_port = directory_server_port

    @property
    def search_base(self):
        """Gets the search_base of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets the search base of the Directory server.  # noqa: E501

        :return: The search_base of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._search_base

    @search_base.setter
    def search_base(self, search_base):
        """Sets the search_base of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets the search base of the Directory server.  # noqa: E501

        :param search_base: The search_base of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: str
        """

        self._search_base = search_base

    @property
    def directory_server_requires_ssl(self):
        """Gets the directory_server_requires_ssl of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, the Directory server requires Secure Socket Layer (SSL).  # noqa: E501

        :return: The directory_server_requires_ssl of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._directory_server_requires_ssl

    @directory_server_requires_ssl.setter
    def directory_server_requires_ssl(self, directory_server_requires_ssl):
        """Sets the directory_server_requires_ssl of this AppleOsXEasMicrosoftOutlookPayloadEntity.

        Gets or sets a value indicating whether if set to true, the Directory server requires Secure Socket Layer (SSL).  # noqa: E501

        :param directory_server_requires_ssl: The directory_server_requires_ssl of this AppleOsXEasMicrosoftOutlookPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._directory_server_requires_ssl = directory_server_requires_ssl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXEasMicrosoftOutlookPayloadEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXEasMicrosoftOutlookPayloadEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXEasMicrosoftOutlookPayloadEntity):
            return True

        return self.to_dict() != other.to_dict()
