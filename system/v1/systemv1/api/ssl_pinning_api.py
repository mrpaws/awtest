# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class SSLPinningApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def s_sl_pinning_create_pinned_host_async(self, model, **kwargs):  # noqa: E501
        """Create a pinned host.  # noqa: E501

        Accepts and parses a fully qualified domain name for the contextual, or specified, Organization Group and creates a container to attach acceptable public keys to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_create_pinned_host_async(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PinnedHostModel model: Specifies the Pinned Host to be created (Required). (required)
        :return: PinnedHostResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_create_pinned_host_async_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_create_pinned_host_async_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_create_pinned_host_async_with_http_info(self, model, **kwargs):  # noqa: E501
        """Create a pinned host.  # noqa: E501

        Accepts and parses a fully qualified domain name for the contextual, or specified, Organization Group and creates a container to attach acceptable public keys to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_create_pinned_host_async_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PinnedHostModel model: Specifies the Pinned Host to be created (Required). (required)
        :return: PinnedHostResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_create_pinned_host_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `s_sl_pinning_create_pinned_host_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/pinnedhost', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PinnedHostResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_disable_pin_async(self, host_guid, organizationgroupid, **kwargs):  # noqa: E501
        """Disable a pinned relationship between host and cert.  # noqa: E501

        Disables the enforcement of pinning for one particular Pinned Host-Pinned Certificate pair.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_disable_pin_async(host_guid, organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_guid: The ID of the pertinent host (Required). (required)
        :param int organizationgroupid: The Organization Group to disable at (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_disable_pin_async_with_http_info(host_guid, organizationgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_disable_pin_async_with_http_info(host_guid, organizationgroupid, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_disable_pin_async_with_http_info(self, host_guid, organizationgroupid, **kwargs):  # noqa: E501
        """Disable a pinned relationship between host and cert.  # noqa: E501

        Disables the enforcement of pinning for one particular Pinned Host-Pinned Certificate pair.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_disable_pin_async_with_http_info(host_guid, organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_guid: The ID of the pertinent host (Required). (required)
        :param int organizationgroupid: The Organization Group to disable at (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_guid', 'organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_disable_pin_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_guid' is set
        if self.api_client.client_side_validation and ('host_guid' not in params or
                                                       params['host_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `host_guid` when calling `s_sl_pinning_disable_pin_async`")  # noqa: E501
        # verify the required parameter 'organizationgroupid' is set
        if self.api_client.client_side_validation and ('organizationgroupid' not in params or
                                                       params['organizationgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizationgroupid` when calling `s_sl_pinning_disable_pin_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_guid' in params:
            path_params['hostGuid'] = params['host_guid']  # noqa: E501
        if 'organizationgroupid' in params:
            path_params['organizationgroupid'] = params['organizationgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/disablepin/{hostGuid}/{organizationgroupid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_disable_pinning_async(self, organizationgroupid, **kwargs):  # noqa: E501
        """Disable SSL Pinning at an Organization Group.  # noqa: E501

        Disables the enforcement of SSL Pinning at the specified Organization Group if it is allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_disable_pinning_async(organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: The ID of the organization group to disable at (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_disable_pinning_async_with_http_info(organizationgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_disable_pinning_async_with_http_info(organizationgroupid, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_disable_pinning_async_with_http_info(self, organizationgroupid, **kwargs):  # noqa: E501
        """Disable SSL Pinning at an Organization Group.  # noqa: E501

        Disables the enforcement of SSL Pinning at the specified Organization Group if it is allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_disable_pinning_async_with_http_info(organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: The ID of the organization group to disable at (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_disable_pinning_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organizationgroupid' is set
        if self.api_client.client_side_validation and ('organizationgroupid' not in params or
                                                       params['organizationgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizationgroupid` when calling `s_sl_pinning_disable_pinning_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organizationgroupid' in params:
            path_params['organizationgroupid'] = params['organizationgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/disable/{organizationgroupid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_enable_pin_async(self, host_guid, organizationgroupid, **kwargs):  # noqa: E501
        """Enable a pinned relationship between host and cert.  # noqa: E501

        Enables the enforcement of pinning for one particular Pinned Host-Pinned Certificate pair.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_enable_pin_async(host_guid, organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_guid: The ID of the pertinent host (Required). (required)
        :param int organizationgroupid: The ID of the organization group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_enable_pin_async_with_http_info(host_guid, organizationgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_enable_pin_async_with_http_info(host_guid, organizationgroupid, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_enable_pin_async_with_http_info(self, host_guid, organizationgroupid, **kwargs):  # noqa: E501
        """Enable a pinned relationship between host and cert.  # noqa: E501

        Enables the enforcement of pinning for one particular Pinned Host-Pinned Certificate pair.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_enable_pin_async_with_http_info(host_guid, organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_guid: The ID of the pertinent host (Required). (required)
        :param int organizationgroupid: The ID of the organization group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_guid', 'organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_enable_pin_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_guid' is set
        if self.api_client.client_side_validation and ('host_guid' not in params or
                                                       params['host_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `host_guid` when calling `s_sl_pinning_enable_pin_async`")  # noqa: E501
        # verify the required parameter 'organizationgroupid' is set
        if self.api_client.client_side_validation and ('organizationgroupid' not in params or
                                                       params['organizationgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizationgroupid` when calling `s_sl_pinning_enable_pin_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_guid' in params:
            path_params['hostGuid'] = params['host_guid']  # noqa: E501
        if 'organizationgroupid' in params:
            path_params['organizationgroupid'] = params['organizationgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/enablepin/{hostGuid}/{organizationgroupid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_enable_pinning_async(self, organizationgroupid, **kwargs):  # noqa: E501
        """Enable SSL Pinning at an Organization Group.  # noqa: E501

        Enables the enforcement of SSL Pinning at the specified Organization Group if it is allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_enable_pinning_async(organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: The ID of the organization group to enable at (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_enable_pinning_async_with_http_info(organizationgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_enable_pinning_async_with_http_info(organizationgroupid, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_enable_pinning_async_with_http_info(self, organizationgroupid, **kwargs):  # noqa: E501
        """Enable SSL Pinning at an Organization Group.  # noqa: E501

        Enables the enforcement of SSL Pinning at the specified Organization Group if it is allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_enable_pinning_async_with_http_info(organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: The ID of the organization group to enable at (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_enable_pinning_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organizationgroupid' is set
        if self.api_client.client_side_validation and ('organizationgroupid' not in params or
                                                       params['organizationgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizationgroupid` when calling `s_sl_pinning_enable_pinning_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organizationgroupid' in params:
            path_params['organizationgroupid'] = params['organizationgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/enable/{organizationgroupid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_find_pinned_hosts_async(self, **kwargs):  # noqa: E501
        """Query for pinned hosts by host name.  # noqa: E501

        Finds and returns all pinned hosts and their associated public keys that match the fully qualified domain name of the search criteria that are visible at the contextual, or specified, Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_find_pinned_hosts_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_name: The hostname to query for (Required).
        :param int organizationgroupid: The organization group to check at.
        :return: list[CertificatePinningHostEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_find_pinned_hosts_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_find_pinned_hosts_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def s_sl_pinning_find_pinned_hosts_async_with_http_info(self, **kwargs):  # noqa: E501
        """Query for pinned hosts by host name.  # noqa: E501

        Finds and returns all pinned hosts and their associated public keys that match the fully qualified domain name of the search criteria that are visible at the contextual, or specified, Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_find_pinned_hosts_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_name: The hostname to query for (Required).
        :param int organizationgroupid: The organization group to check at.
        :return: list[CertificatePinningHostEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_name', 'organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_find_pinned_hosts_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'host_name' in params:
            query_params.append(('hostName', params['host_name']))  # noqa: E501
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/pinnedhosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CertificatePinningHostEntity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_pin_certificate_to_host_async(self, model, **kwargs):  # noqa: E501
        """Pin a given certificate to a pinned host.  # noqa: E501

        Processes a public key from a provided certificate and maps it to the pinned host with the specified UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_pin_certificate_to_host_async(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PinnedCertificateModel model: The model of the pinned certificate containing Host ID and the Base64 Certificate (Required). (required)
        :return: OperationStatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_pin_certificate_to_host_async_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_pin_certificate_to_host_async_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_pin_certificate_to_host_async_with_http_info(self, model, **kwargs):  # noqa: E501
        """Pin a given certificate to a pinned host.  # noqa: E501

        Processes a public key from a provided certificate and maps it to the pinned host with the specified UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_pin_certificate_to_host_async_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PinnedCertificateModel model: The model of the pinned certificate containing Host ID and the Base64 Certificate (Required). (required)
        :return: OperationStatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_pin_certificate_to_host_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `s_sl_pinning_pin_certificate_to_host_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/pincertificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OperationStatusModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_remove_pinned_host_async(self, host_guid, **kwargs):  # noqa: E501
        """Query for pinned hosts by UDID.  # noqa: E501

        Returns the pinned host and its associated public keys with the specified UUID and that are visible at the contextual, or specified, Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_remove_pinned_host_async(host_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_guid: The ID (returned during creation or a query) of the host to delete (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_remove_pinned_host_async_with_http_info(host_guid, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_remove_pinned_host_async_with_http_info(host_guid, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_remove_pinned_host_async_with_http_info(self, host_guid, **kwargs):  # noqa: E501
        """Query for pinned hosts by UDID.  # noqa: E501

        Returns the pinned host and its associated public keys with the specified UUID and that are visible at the contextual, or specified, Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_remove_pinned_host_async_with_http_info(host_guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_guid: The ID (returned during creation or a query) of the host to delete (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_remove_pinned_host_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_guid' is set
        if self.api_client.client_side_validation and ('host_guid' not in params or
                                                       params['host_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `host_guid` when calling `s_sl_pinning_remove_pinned_host_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_guid' in params:
            path_params['hostGuid'] = params['host_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/pinnedhost/{hostGuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_sync_with_auto_discovery_async(self, organizationgroupid, **kwargs):  # noqa: E501
        """Synchronize Pins with Auto Discovery at an Organization Group.  # noqa: E501

        Initiates the synchronization routine with Auto Discovery to send it the pinned public keys for the Device Services host at the specified Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_sync_with_auto_discovery_async(organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: The ID of the organization group (Required). (required)
        :return: OperationStatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_sync_with_auto_discovery_async_with_http_info(organizationgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_sync_with_auto_discovery_async_with_http_info(organizationgroupid, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_sync_with_auto_discovery_async_with_http_info(self, organizationgroupid, **kwargs):  # noqa: E501
        """Synchronize Pins with Auto Discovery at an Organization Group.  # noqa: E501

        Initiates the synchronization routine with Auto Discovery to send it the pinned public keys for the Device Services host at the specified Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_sync_with_auto_discovery_async_with_http_info(organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: The ID of the organization group (Required). (required)
        :return: OperationStatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_sync_with_auto_discovery_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organizationgroupid' is set
        if self.api_client.client_side_validation and ('organizationgroupid' not in params or
                                                       params['organizationgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizationgroupid` when calling `s_sl_pinning_sync_with_auto_discovery_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organizationgroupid' in params:
            path_params['organizationgroupid'] = params['organizationgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/syncwithautodiscovery/{organizationgroupid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OperationStatusModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_unpin_certificate_from_host_async(self, model, **kwargs):  # noqa: E501
        """Unpin a given certificate from a pinned host.  # noqa: E501

        Un-maps the certificate with the specified thumbprint from the pinned host with the specified UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_unpin_certificate_from_host_async(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PinnedCertificateQueryModel model: The model of the Pinned Certificate containing Host ID and Certificate Thumbprint (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_unpin_certificate_from_host_async_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_unpin_certificate_from_host_async_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_unpin_certificate_from_host_async_with_http_info(self, model, **kwargs):  # noqa: E501
        """Unpin a given certificate from a pinned host.  # noqa: E501

        Un-maps the certificate with the specified thumbprint from the pinned host with the specified UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_unpin_certificate_from_host_async_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PinnedCertificateQueryModel model: The model of the Pinned Certificate containing Host ID and Certificate Thumbprint (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_unpin_certificate_from_host_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `s_sl_pinning_unpin_certificate_from_host_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/unpincertificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def s_sl_pinning_update_pinned_host_async(self, host_guid, model, **kwargs):  # noqa: E501
        """Update a specific pinned host.  # noqa: E501

        Updates the pinned host with the given UUID with new details, including a parsed FQDN.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_update_pinned_host_async(host_guid, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_guid: The ID of the host to delete (Required). (required)
        :param PinnedHostModel model: The model that describes the host update (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.s_sl_pinning_update_pinned_host_async_with_http_info(host_guid, model, **kwargs)  # noqa: E501
        else:
            (data) = self.s_sl_pinning_update_pinned_host_async_with_http_info(host_guid, model, **kwargs)  # noqa: E501
            return data

    def s_sl_pinning_update_pinned_host_async_with_http_info(self, host_guid, model, **kwargs):  # noqa: E501
        """Update a specific pinned host.  # noqa: E501

        Updates the pinned host with the given UUID with new details, including a parsed FQDN.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.s_sl_pinning_update_pinned_host_async_with_http_info(host_guid, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_guid: The ID of the host to delete (Required). (required)
        :param PinnedHostModel model: The model that describes the host update (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_guid', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method s_sl_pinning_update_pinned_host_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_guid' is set
        if self.api_client.client_side_validation and ('host_guid' not in params or
                                                       params['host_guid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `host_guid` when calling `s_sl_pinning_update_pinned_host_async`")  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `s_sl_pinning_update_pinned_host_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_guid' in params:
            path_params['hostGuid'] = params['host_guid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sslpinning/pinnedhost/{hostGuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
