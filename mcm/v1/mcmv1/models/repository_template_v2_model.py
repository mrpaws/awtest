# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mcmv1.configuration import Configuration


class RepositoryTemplateV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'user_repository_name': 'str',
        'template_type': 'int',
        'template_links': 'list[TemplateLink]',
        'organization_group_uuid': 'str',
        'enable_certificate_based_authentication': 'bool',
        'access_via': 'str',
        'content_gateway_configuration_uuid': 'str',
        'allow_children': 'bool',
        'permissions': 'list[str]',
        'allow_delete': 'bool',
        'view_online_only': 'bool',
        'allow_email': 'bool',
        'allow_third_party_export': 'bool',
        'allow_to_other_repo_export': 'bool',
        'enable_watermark': 'bool',
        'allow_printing': 'bool',
        'allow_edit': 'bool',
        'device_ownership': 'str',
        'organization_groups': 'list[str]',
        'user_groups': 'list[str]',
        'download_method': 'str',
        'download_while_roaming': 'bool',
        'content_required': 'bool',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'user_repository_name': 'user_repository_name',
        'template_type': 'template_type',
        'template_links': 'template_links',
        'organization_group_uuid': 'organization_group_uuid',
        'enable_certificate_based_authentication': 'enable_certificate_based_authentication',
        'access_via': 'access_via',
        'content_gateway_configuration_uuid': 'content_gateway_configuration_uuid',
        'allow_children': 'allow_children',
        'permissions': 'permissions',
        'allow_delete': 'allow_delete',
        'view_online_only': 'view_online_only',
        'allow_email': 'allow_email',
        'allow_third_party_export': 'allow_third_party_export',
        'allow_to_other_repo_export': 'allow_to_other_repo_export',
        'enable_watermark': 'enable_watermark',
        'allow_printing': 'allow_printing',
        'allow_edit': 'allow_edit',
        'device_ownership': 'device_ownership',
        'organization_groups': 'organization_groups',
        'user_groups': 'user_groups',
        'download_method': 'download_method',
        'download_while_roaming': 'download_while_roaming',
        'content_required': 'content_required',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, name=None, user_repository_name=None, template_type=None, template_links=None, organization_group_uuid=None, enable_certificate_based_authentication=None, access_via=None, content_gateway_configuration_uuid=None, allow_children=None, permissions=None, allow_delete=None, view_online_only=None, allow_email=None, allow_third_party_export=None, allow_to_other_repo_export=None, enable_watermark=None, allow_printing=None, allow_edit=None, device_ownership=None, organization_groups=None, user_groups=None, download_method=None, download_while_roaming=None, content_required=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """RepositoryTemplateV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._user_repository_name = None
        self._template_type = None
        self._template_links = None
        self._organization_group_uuid = None
        self._enable_certificate_based_authentication = None
        self._access_via = None
        self._content_gateway_configuration_uuid = None
        self._allow_children = None
        self._permissions = None
        self._allow_delete = None
        self._view_online_only = None
        self._allow_email = None
        self._allow_third_party_export = None
        self._allow_to_other_repo_export = None
        self._enable_watermark = None
        self._allow_printing = None
        self._allow_edit = None
        self._device_ownership = None
        self._organization_groups = None
        self._user_groups = None
        self._download_method = None
        self._download_while_roaming = None
        self._content_required = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if user_repository_name is not None:
            self.user_repository_name = user_repository_name
        if template_type is not None:
            self.template_type = template_type
        if template_links is not None:
            self.template_links = template_links
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if enable_certificate_based_authentication is not None:
            self.enable_certificate_based_authentication = enable_certificate_based_authentication
        if access_via is not None:
            self.access_via = access_via
        if content_gateway_configuration_uuid is not None:
            self.content_gateway_configuration_uuid = content_gateway_configuration_uuid
        if allow_children is not None:
            self.allow_children = allow_children
        if permissions is not None:
            self.permissions = permissions
        if allow_delete is not None:
            self.allow_delete = allow_delete
        if view_online_only is not None:
            self.view_online_only = view_online_only
        if allow_email is not None:
            self.allow_email = allow_email
        if allow_third_party_export is not None:
            self.allow_third_party_export = allow_third_party_export
        if allow_to_other_repo_export is not None:
            self.allow_to_other_repo_export = allow_to_other_repo_export
        if enable_watermark is not None:
            self.enable_watermark = enable_watermark
        if allow_printing is not None:
            self.allow_printing = allow_printing
        if allow_edit is not None:
            self.allow_edit = allow_edit
        if device_ownership is not None:
            self.device_ownership = device_ownership
        if organization_groups is not None:
            self.organization_groups = organization_groups
        if user_groups is not None:
            self.user_groups = user_groups
        if download_method is not None:
            self.download_method = download_method
        if download_while_roaming is not None:
            self.download_while_roaming = download_while_roaming
        if content_required is not None:
            self.content_required = content_required
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def name(self):
        """Gets the name of this RepositoryTemplateV2Model.  # noqa: E501

        Repository template name.  # noqa: E501

        :return: The name of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryTemplateV2Model.

        Repository template name.  # noqa: E501

        :param name: The name of this RepositoryTemplateV2Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_repository_name(self):
        """Gets the user_repository_name of this RepositoryTemplateV2Model.  # noqa: E501

        User repository name for automatic templates.  # noqa: E501

        :return: The user_repository_name of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: str
        """
        return self._user_repository_name

    @user_repository_name.setter
    def user_repository_name(self, user_repository_name):
        """Sets the user_repository_name of this RepositoryTemplateV2Model.

        User repository name for automatic templates.  # noqa: E501

        :param user_repository_name: The user_repository_name of this RepositoryTemplateV2Model.  # noqa: E501
        :type: str
        """

        self._user_repository_name = user_repository_name

    @property
    def template_type(self):
        """Gets the template_type of this RepositoryTemplateV2Model.  # noqa: E501

        To allow routing of requests via content gateway.  # noqa: E501

        :return: The template_type of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: int
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this RepositoryTemplateV2Model.

        To allow routing of requests via content gateway.  # noqa: E501

        :param template_type: The template_type of this RepositoryTemplateV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                template_type not in allowed_values):
            raise ValueError(
                "Invalid value for `template_type` ({0}), must be one of {1}"  # noqa: E501
                .format(template_type, allowed_values)
            )

        self._template_type = template_type

    @property
    def template_links(self):
        """Gets the template_links of this RepositoryTemplateV2Model.  # noqa: E501

        Repository template endpoint.  # noqa: E501

        :return: The template_links of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: list[TemplateLink]
        """
        return self._template_links

    @template_links.setter
    def template_links(self, template_links):
        """Sets the template_links of this RepositoryTemplateV2Model.

        Repository template endpoint.  # noqa: E501

        :param template_links: The template_links of this RepositoryTemplateV2Model.  # noqa: E501
        :type: list[TemplateLink]
        """

        self._template_links = template_links

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this RepositoryTemplateV2Model.  # noqa: E501

        Repository template Organization Group uuid.  # noqa: E501

        :return: The organization_group_uuid of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this RepositoryTemplateV2Model.

        Repository template Organization Group uuid.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this RepositoryTemplateV2Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def enable_certificate_based_authentication(self):
        """Gets the enable_certificate_based_authentication of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to enable certificate based authentication.  # noqa: E501

        :return: The enable_certificate_based_authentication of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._enable_certificate_based_authentication

    @enable_certificate_based_authentication.setter
    def enable_certificate_based_authentication(self, enable_certificate_based_authentication):
        """Sets the enable_certificate_based_authentication of this RepositoryTemplateV2Model.

        Flag to enable certificate based authentication.  # noqa: E501

        :param enable_certificate_based_authentication: The enable_certificate_based_authentication of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._enable_certificate_based_authentication = enable_certificate_based_authentication

    @property
    def access_via(self):
        """Gets the access_via of this RepositoryTemplateV2Model.  # noqa: E501

        To allow routing of requests via content gateway.  # noqa: E501

        :return: The access_via of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: str
        """
        return self._access_via

    @access_via.setter
    def access_via(self, access_via):
        """Sets the access_via of this RepositoryTemplateV2Model.

        To allow routing of requests via content gateway.  # noqa: E501

        :param access_via: The access_via of this RepositoryTemplateV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["WITHOUT_CONTENT_GATEWAY", "WITH_CONTENT_GATEWAY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                access_via not in allowed_values):
            raise ValueError(
                "Invalid value for `access_via` ({0}), must be one of {1}"  # noqa: E501
                .format(access_via, allowed_values)
            )

        self._access_via = access_via

    @property
    def content_gateway_configuration_uuid(self):
        """Gets the content_gateway_configuration_uuid of this RepositoryTemplateV2Model.  # noqa: E501

        Content Gateway configuration uuid.  # noqa: E501

        :return: The content_gateway_configuration_uuid of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_configuration_uuid

    @content_gateway_configuration_uuid.setter
    def content_gateway_configuration_uuid(self, content_gateway_configuration_uuid):
        """Sets the content_gateway_configuration_uuid of this RepositoryTemplateV2Model.

        Content Gateway configuration uuid.  # noqa: E501

        :param content_gateway_configuration_uuid: The content_gateway_configuration_uuid of this RepositoryTemplateV2Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_configuration_uuid = content_gateway_configuration_uuid

    @property
    def allow_children(self):
        """Gets the allow_children of this RepositoryTemplateV2Model.  # noqa: E501

        Allow inheritance in repository template.  # noqa: E501

        :return: The allow_children of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_children

    @allow_children.setter
    def allow_children(self, allow_children):
        """Sets the allow_children of this RepositoryTemplateV2Model.

        Allow inheritance in repository template.  # noqa: E501

        :param allow_children: The allow_children of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_children = allow_children

    @property
    def permissions(self):
        """Gets the permissions of this RepositoryTemplateV2Model.  # noqa: E501

        Repository template permissions.  # noqa: E501

        :return: The permissions of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RepositoryTemplateV2Model.

        Repository template permissions.  # noqa: E501

        :param permissions: The permissions of this RepositoryTemplateV2Model.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NONE", "READ", "WRITE", "DELETE", "SHARE_READ", "SHARE_EDIT", "VIEWER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(permissions).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions

    @property
    def allow_delete(self):
        """Gets the allow_delete of this RepositoryTemplateV2Model.  # noqa: E501

        Allow delete.  # noqa: E501

        :return: The allow_delete of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_delete

    @allow_delete.setter
    def allow_delete(self, allow_delete):
        """Sets the allow_delete of this RepositoryTemplateV2Model.

        Allow delete.  # noqa: E501

        :param allow_delete: The allow_delete of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_delete = allow_delete

    @property
    def view_online_only(self):
        """Gets the view_online_only of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to allow view online or offline.  # noqa: E501

        :return: The view_online_only of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._view_online_only

    @view_online_only.setter
    def view_online_only(self, view_online_only):
        """Sets the view_online_only of this RepositoryTemplateV2Model.

        Flag to allow view online or offline.  # noqa: E501

        :param view_online_only: The view_online_only of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._view_online_only = view_online_only

    @property
    def allow_email(self):
        """Gets the allow_email of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to allow email the repository template.  # noqa: E501

        :return: The allow_email of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_email

    @allow_email.setter
    def allow_email(self, allow_email):
        """Sets the allow_email of this RepositoryTemplateV2Model.

        Flag to allow email the repository template.  # noqa: E501

        :param allow_email: The allow_email of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_email = allow_email

    @property
    def allow_third_party_export(self):
        """Gets the allow_third_party_export of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to allow repository template export to third party apps.  # noqa: E501

        :return: The allow_third_party_export of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_third_party_export

    @allow_third_party_export.setter
    def allow_third_party_export(self, allow_third_party_export):
        """Sets the allow_third_party_export of this RepositoryTemplateV2Model.

        Flag to allow repository template export to third party apps.  # noqa: E501

        :param allow_third_party_export: The allow_third_party_export of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_third_party_export = allow_third_party_export

    @property
    def allow_to_other_repo_export(self):
        """Gets the allow_to_other_repo_export of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to allow repsitory template export to other repository template.  # noqa: E501

        :return: The allow_to_other_repo_export of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_to_other_repo_export

    @allow_to_other_repo_export.setter
    def allow_to_other_repo_export(self, allow_to_other_repo_export):
        """Sets the allow_to_other_repo_export of this RepositoryTemplateV2Model.

        Flag to allow repsitory template export to other repository template.  # noqa: E501

        :param allow_to_other_repo_export: The allow_to_other_repo_export of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_to_other_repo_export = allow_to_other_repo_export

    @property
    def enable_watermark(self):
        """Gets the enable_watermark of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to allow watermark.  # noqa: E501

        :return: The enable_watermark of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._enable_watermark

    @enable_watermark.setter
    def enable_watermark(self, enable_watermark):
        """Sets the enable_watermark of this RepositoryTemplateV2Model.

        Flag to allow watermark.  # noqa: E501

        :param enable_watermark: The enable_watermark of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._enable_watermark = enable_watermark

    @property
    def allow_printing(self):
        """Gets the allow_printing of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to allow printing.  # noqa: E501

        :return: The allow_printing of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_printing

    @allow_printing.setter
    def allow_printing(self, allow_printing):
        """Sets the allow_printing of this RepositoryTemplateV2Model.

        Flag to allow printing.  # noqa: E501

        :param allow_printing: The allow_printing of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_printing = allow_printing

    @property
    def allow_edit(self):
        """Gets the allow_edit of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to allow edit.  # noqa: E501

        :return: The allow_edit of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_edit

    @allow_edit.setter
    def allow_edit(self, allow_edit):
        """Sets the allow_edit of this RepositoryTemplateV2Model.

        Flag to allow edit.  # noqa: E501

        :param allow_edit: The allow_edit of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_edit = allow_edit

    @property
    def device_ownership(self):
        """Gets the device_ownership of this RepositoryTemplateV2Model.  # noqa: E501

        Defines the device ownership.  # noqa: E501

        :return: The device_ownership of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: str
        """
        return self._device_ownership

    @device_ownership.setter
    def device_ownership(self, device_ownership):
        """Sets the device_ownership of this RepositoryTemplateV2Model.

        Defines the device ownership.  # noqa: E501

        :param device_ownership: The device_ownership of this RepositoryTemplateV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["ANY", "CORPORATE_DEDICATED", "CORPORATE_SHARED", "EMPLOYEE_OWNED", "UNDEFINED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_ownership not in allowed_values):
            raise ValueError(
                "Invalid value for `device_ownership` ({0}), must be one of {1}"  # noqa: E501
                .format(device_ownership, allowed_values)
            )

        self._device_ownership = device_ownership

    @property
    def organization_groups(self):
        """Gets the organization_groups of this RepositoryTemplateV2Model.  # noqa: E501

        List of Organization Groups assigned to repository template.  # noqa: E501

        :return: The organization_groups of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._organization_groups

    @organization_groups.setter
    def organization_groups(self, organization_groups):
        """Sets the organization_groups of this RepositoryTemplateV2Model.

        List of Organization Groups assigned to repository template.  # noqa: E501

        :param organization_groups: The organization_groups of this RepositoryTemplateV2Model.  # noqa: E501
        :type: list[str]
        """

        self._organization_groups = organization_groups

    @property
    def user_groups(self):
        """Gets the user_groups of this RepositoryTemplateV2Model.  # noqa: E501

        List of user groups assigned to repository template.  # noqa: E501

        :return: The user_groups of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this RepositoryTemplateV2Model.

        List of user groups assigned to repository template.  # noqa: E501

        :param user_groups: The user_groups of this RepositoryTemplateV2Model.  # noqa: E501
        :type: list[str]
        """

        self._user_groups = user_groups

    @property
    def download_method(self):
        """Gets the download_method of this RepositoryTemplateV2Model.  # noqa: E501

        Defines the content download method.  # noqa: E501

        :return: The download_method of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: str
        """
        return self._download_method

    @download_method.setter
    def download_method(self, download_method):
        """Sets the download_method of this RepositoryTemplateV2Model.

        Defines the content download method.  # noqa: E501

        :param download_method: The download_method of this RepositoryTemplateV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "ANY", "WIFI", "3G", "4G", "EDGE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                download_method not in allowed_values):
            raise ValueError(
                "Invalid value for `download_method` ({0}), must be one of {1}"  # noqa: E501
                .format(download_method, allowed_values)
            )

        self._download_method = download_method

    @property
    def download_while_roaming(self):
        """Gets the download_while_roaming of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to allow download while roaming.  # noqa: E501

        :return: The download_while_roaming of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._download_while_roaming

    @download_while_roaming.setter
    def download_while_roaming(self, download_while_roaming):
        """Sets the download_while_roaming of this RepositoryTemplateV2Model.

        Flag to allow download while roaming.  # noqa: E501

        :param download_while_roaming: The download_while_roaming of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._download_while_roaming = download_while_roaming

    @property
    def content_required(self):
        """Gets the content_required of this RepositoryTemplateV2Model.  # noqa: E501

        Flag to mark content is required.  # noqa: E501

        :return: The content_required of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._content_required

    @content_required.setter
    def content_required(self, content_required):
        """Sets the content_required of this RepositoryTemplateV2Model.

        Flag to mark content is required.  # noqa: E501

        :param content_required: The content_required of this RepositoryTemplateV2Model.  # noqa: E501
        :type: bool
        """

        self._content_required = content_required

    @property
    def id(self):
        """Gets the id of this RepositoryTemplateV2Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepositoryTemplateV2Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this RepositoryTemplateV2Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this RepositoryTemplateV2Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this RepositoryTemplateV2Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this RepositoryTemplateV2Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this RepositoryTemplateV2Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryTemplateV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryTemplateV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepositoryTemplateV2Model):
            return True

        return self.to_dict() != other.to_dict()
