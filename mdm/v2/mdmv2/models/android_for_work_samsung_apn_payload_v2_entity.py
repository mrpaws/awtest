# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkSamsungAPNPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'apn': 'str',
        'type': 'str',
        'mcc': 'int',
        'mnc': 'int',
        'mmsc': 'str',
        'mms_proxy': 'str',
        'mms_port': 'int',
        'server': 'str',
        'proxy': 'str',
        'proxy_port': 'int',
        'username': 'str',
        'password': 'str',
        'auth_type': 'int',
        'preferred_apn': 'bool'
    }

    attribute_map = {
        'name': 'Name',
        'apn': 'Apn',
        'type': 'Type',
        'mcc': 'Mcc',
        'mnc': 'Mnc',
        'mmsc': 'Mmsc',
        'mms_proxy': 'MmsProxy',
        'mms_port': 'MmsPort',
        'server': 'Server',
        'proxy': 'Proxy',
        'proxy_port': 'ProxyPort',
        'username': 'Username',
        'password': 'Password',
        'auth_type': 'AuthType',
        'preferred_apn': 'PreferredAPN'
    }

    def __init__(self, name=None, apn=None, type=None, mcc=None, mnc=None, mmsc=None, mms_proxy=None, mms_port=None, server=None, proxy=None, proxy_port=None, username=None, password=None, auth_type=None, preferred_apn=None, _configuration=None):  # noqa: E501
        """AndroidForWorkSamsungAPNPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._apn = None
        self._type = None
        self._mcc = None
        self._mnc = None
        self._mmsc = None
        self._mms_proxy = None
        self._mms_port = None
        self._server = None
        self._proxy = None
        self._proxy_port = None
        self._username = None
        self._password = None
        self._auth_type = None
        self._preferred_apn = None
        self.discriminator = None

        self.name = name
        self.apn = apn
        self.type = type
        self.mcc = mcc
        self.mnc = mnc
        if mmsc is not None:
            self.mmsc = mmsc
        if mms_proxy is not None:
            self.mms_proxy = mms_proxy
        if mms_port is not None:
            self.mms_port = mms_port
        if server is not None:
            self.server = server
        if proxy is not None:
            self.proxy = proxy
        if proxy_port is not None:
            self.proxy_port = proxy_port
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if auth_type is not None:
            self.auth_type = auth_type
        if preferred_apn is not None:
            self.preferred_apn = preferred_apn

    @property
    def name(self):
        """Gets the name of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets the profile name.  # noqa: E501

        :return: The name of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets the profile name.  # noqa: E501

        :param name: The name of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def apn(self):
        """Gets the apn of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets Access Point Name (APN).  # noqa: E501

        :return: The apn of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._apn

    @apn.setter
    def apn(self, apn):
        """Sets the apn of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets Access Point Name (APN).  # noqa: E501

        :param apn: The apn of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and apn is None:
            raise ValueError("Invalid value for `apn`, must not be `None`")  # noqa: E501

        self._apn = apn

    @property
    def type(self):
        """Gets the type of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets Access Point Type.  # noqa: E501

        :return: The type of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets Access Point Type.  # noqa: E501

        :param type: The type of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def mcc(self):
        """Gets the mcc of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets Mobile Country Code (MCC).  # noqa: E501

        :return: The mcc of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets Mobile Country Code (MCC).  # noqa: E501

        :param mcc: The mcc of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and mcc is None:
            raise ValueError("Invalid value for `mcc`, must not be `None`")  # noqa: E501

        self._mcc = mcc

    @property
    def mnc(self):
        """Gets the mnc of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets Mobile Network Code (MNC).  # noqa: E501

        :return: The mnc of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._mnc

    @mnc.setter
    def mnc(self, mnc):
        """Sets the mnc of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets Mobile Network Code (MNC).  # noqa: E501

        :param mnc: The mnc of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and mnc is None:
            raise ValueError("Invalid value for `mnc`, must not be `None`")  # noqa: E501

        self._mnc = mnc

    @property
    def mmsc(self):
        """Gets the mmsc of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets MMS Server (MMSC).  # noqa: E501

        :return: The mmsc of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._mmsc

    @mmsc.setter
    def mmsc(self, mmsc):
        """Sets the mmsc of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets MMS Server (MMSC).  # noqa: E501

        :param mmsc: The mmsc of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._mmsc = mmsc

    @property
    def mms_proxy(self):
        """Gets the mms_proxy of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets MMS Proxy Server.  # noqa: E501

        :return: The mms_proxy of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._mms_proxy

    @mms_proxy.setter
    def mms_proxy(self, mms_proxy):
        """Sets the mms_proxy of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets MMS Proxy Server.  # noqa: E501

        :param mms_proxy: The mms_proxy of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._mms_proxy = mms_proxy

    @property
    def mms_port(self):
        """Gets the mms_port of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or setsMMS Proxy Server Port.  # noqa: E501

        :return: The mms_port of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._mms_port

    @mms_port.setter
    def mms_port(self, mms_port):
        """Sets the mms_port of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or setsMMS Proxy Server Port.  # noqa: E501

        :param mms_port: The mms_port of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._mms_port = mms_port

    @property
    def server(self):
        """Gets the server of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets server.  # noqa: E501

        :return: The server of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets server.  # noqa: E501

        :param server: The server of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def proxy(self):
        """Gets the proxy of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets proxy server.  # noqa: E501

        :return: The proxy of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets proxy server.  # noqa: E501

        :param proxy: The proxy of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._proxy = proxy

    @property
    def proxy_port(self):
        """Gets the proxy_port of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets proxy server port.  # noqa: E501

        :return: The proxy_port of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port):
        """Sets the proxy_port of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets proxy server port.  # noqa: E501

        :param proxy_port: The proxy_port of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._proxy_port = proxy_port

    @property
    def username(self):
        """Gets the username of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets Access Point Username.  # noqa: E501

        :return: The username of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets Access Point Username.  # noqa: E501

        :param username: The username of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets Access Point Password.  # noqa: E501

        :return: The password of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets Access Point Password.  # noqa: E501

        :param password: The password of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def auth_type(self):
        """Gets the auth_type of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets Authentication Type.  # noqa: E501

        :return: The auth_type of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets Authentication Type.  # noqa: E501

        :param auth_type: The auth_type of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._auth_type = auth_type

    @property
    def preferred_apn(self):
        """Gets the preferred_apn of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets if to Set as Preferred APN.  # noqa: E501

        :return: The preferred_apn of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._preferred_apn

    @preferred_apn.setter
    def preferred_apn(self, preferred_apn):
        """Sets the preferred_apn of this AndroidForWorkSamsungAPNPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets if to Set as Preferred APN.  # noqa: E501

        :param preferred_apn: The preferred_apn of this AndroidForWorkSamsungAPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._preferred_apn = preferred_apn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkSamsungAPNPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkSamsungAPNPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkSamsungAPNPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
