# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class OSUpdateModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_key': 'str',
        'human_readable_name': 'str',
        'product_name': 'str',
        'version': 'str',
        'build': 'str',
        'is_preview': 'bool',
        'download_size': 'float',
        'install_size': 'float',
        'is_critical': 'bool',
        'is_configuration_data_update': 'bool',
        'is_firmware_update': 'bool',
        'restart_required': 'bool',
        'allows_install_later': 'bool',
        'app_identifiers_to_close': 'list[str]',
        'device_update_name': 'str',
        'release_date': 'datetime',
        'expiation_date': 'datetime',
        'download_percent_complete': 'float',
        'status': 'str',
        'sample_time': 'datetime',
        'status_time': 'datetime',
        'device_update_version': 'str',
        'device_update_uuid': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'product_key': 'productKey',
        'human_readable_name': 'humanReadableName',
        'product_name': 'productName',
        'version': 'version',
        'build': 'build',
        'is_preview': 'isPreview',
        'download_size': 'downloadSize',
        'install_size': 'installSize',
        'is_critical': 'isCritical',
        'is_configuration_data_update': 'isConfigurationDataUpdate',
        'is_firmware_update': 'isFirmwareUpdate',
        'restart_required': 'restartRequired',
        'allows_install_later': 'allowsInstallLater',
        'app_identifiers_to_close': 'appIdentifiersToClose',
        'device_update_name': 'deviceUpdateName',
        'release_date': 'releaseDate',
        'expiation_date': 'expiationDate',
        'download_percent_complete': 'downloadPercentComplete',
        'status': 'status',
        'sample_time': 'sampleTime',
        'status_time': 'statusTime',
        'device_update_version': 'deviceUpdateVersion',
        'device_update_uuid': 'deviceUpdateUuid',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, product_key=None, human_readable_name=None, product_name=None, version=None, build=None, is_preview=None, download_size=None, install_size=None, is_critical=None, is_configuration_data_update=None, is_firmware_update=None, restart_required=None, allows_install_later=None, app_identifiers_to_close=None, device_update_name=None, release_date=None, expiation_date=None, download_percent_complete=None, status=None, sample_time=None, status_time=None, device_update_version=None, device_update_uuid=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """OSUpdateModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._product_key = None
        self._human_readable_name = None
        self._product_name = None
        self._version = None
        self._build = None
        self._is_preview = None
        self._download_size = None
        self._install_size = None
        self._is_critical = None
        self._is_configuration_data_update = None
        self._is_firmware_update = None
        self._restart_required = None
        self._allows_install_later = None
        self._app_identifiers_to_close = None
        self._device_update_name = None
        self._release_date = None
        self._expiation_date = None
        self._download_percent_complete = None
        self._status = None
        self._sample_time = None
        self._status_time = None
        self._device_update_version = None
        self._device_update_uuid = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if product_key is not None:
            self.product_key = product_key
        if human_readable_name is not None:
            self.human_readable_name = human_readable_name
        if product_name is not None:
            self.product_name = product_name
        if version is not None:
            self.version = version
        if build is not None:
            self.build = build
        if is_preview is not None:
            self.is_preview = is_preview
        if download_size is not None:
            self.download_size = download_size
        if install_size is not None:
            self.install_size = install_size
        if is_critical is not None:
            self.is_critical = is_critical
        if is_configuration_data_update is not None:
            self.is_configuration_data_update = is_configuration_data_update
        if is_firmware_update is not None:
            self.is_firmware_update = is_firmware_update
        if restart_required is not None:
            self.restart_required = restart_required
        if allows_install_later is not None:
            self.allows_install_later = allows_install_later
        if app_identifiers_to_close is not None:
            self.app_identifiers_to_close = app_identifiers_to_close
        if device_update_name is not None:
            self.device_update_name = device_update_name
        if release_date is not None:
            self.release_date = release_date
        if expiation_date is not None:
            self.expiation_date = expiation_date
        if download_percent_complete is not None:
            self.download_percent_complete = download_percent_complete
        if status is not None:
            self.status = status
        if sample_time is not None:
            self.sample_time = sample_time
        if status_time is not None:
            self.status_time = status_time
        if device_update_version is not None:
            self.device_update_version = device_update_version
        if device_update_uuid is not None:
            self.device_update_uuid = device_update_uuid
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def product_key(self):
        """Gets the product_key of this OSUpdateModel.  # noqa: E501

        The unique product key of the update  # noqa: E501

        :return: The product_key of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._product_key

    @product_key.setter
    def product_key(self, product_key):
        """Sets the product_key of this OSUpdateModel.

        The unique product key of the update  # noqa: E501

        :param product_key: The product_key of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._product_key = product_key

    @property
    def human_readable_name(self):
        """Gets the human_readable_name of this OSUpdateModel.  # noqa: E501

        The common name of the update  # noqa: E501

        :return: The human_readable_name of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._human_readable_name

    @human_readable_name.setter
    def human_readable_name(self, human_readable_name):
        """Sets the human_readable_name of this OSUpdateModel.

        The common name of the update  # noqa: E501

        :param human_readable_name: The human_readable_name of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._human_readable_name = human_readable_name

    @property
    def product_name(self):
        """Gets the product_name of this OSUpdateModel.  # noqa: E501

        The product name of the update  # noqa: E501

        :return: The product_name of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this OSUpdateModel.

        The product name of the update  # noqa: E501

        :param product_name: The product_name of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def version(self):
        """Gets the version of this OSUpdateModel.  # noqa: E501

        The version of the update  # noqa: E501

        :return: The version of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OSUpdateModel.

        The version of the update  # noqa: E501

        :param version: The version of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def build(self):
        """Gets the build of this OSUpdateModel.  # noqa: E501

        The build number of the update  # noqa: E501

        :return: The build of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this OSUpdateModel.

        The build number of the update  # noqa: E501

        :param build: The build of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._build = build

    @property
    def is_preview(self):
        """Gets the is_preview of this OSUpdateModel.  # noqa: E501

        Preview or beta version of the update  # noqa: E501

        :return: The is_preview of this OSUpdateModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_preview

    @is_preview.setter
    def is_preview(self, is_preview):
        """Sets the is_preview of this OSUpdateModel.

        Preview or beta version of the update  # noqa: E501

        :param is_preview: The is_preview of this OSUpdateModel.  # noqa: E501
        :type: bool
        """

        self._is_preview = is_preview

    @property
    def download_size(self):
        """Gets the download_size of this OSUpdateModel.  # noqa: E501

        Storage size needed to download the software update. Floating point number of bytes.  # noqa: E501

        :return: The download_size of this OSUpdateModel.  # noqa: E501
        :rtype: float
        """
        return self._download_size

    @download_size.setter
    def download_size(self, download_size):
        """Sets the download_size of this OSUpdateModel.

        Storage size needed to download the software update. Floating point number of bytes.  # noqa: E501

        :param download_size: The download_size of this OSUpdateModel.  # noqa: E501
        :type: float
        """

        self._download_size = download_size

    @property
    def install_size(self):
        """Gets the install_size of this OSUpdateModel.  # noqa: E501

        Storage size needed to install the software update. Floating point number of bytes.  # noqa: E501

        :return: The install_size of this OSUpdateModel.  # noqa: E501
        :rtype: float
        """
        return self._install_size

    @install_size.setter
    def install_size(self, install_size):
        """Sets the install_size of this OSUpdateModel.

        Storage size needed to install the software update. Floating point number of bytes.  # noqa: E501

        :param install_size: The install_size of this OSUpdateModel.  # noqa: E501
        :type: float
        """

        self._install_size = install_size

    @property
    def is_critical(self):
        """Gets the is_critical of this OSUpdateModel.  # noqa: E501

        Set to true if this update is considered critical. Defaults to false.  # noqa: E501

        :return: The is_critical of this OSUpdateModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_critical

    @is_critical.setter
    def is_critical(self, is_critical):
        """Sets the is_critical of this OSUpdateModel.

        Set to true if this update is considered critical. Defaults to false.  # noqa: E501

        :param is_critical: The is_critical of this OSUpdateModel.  # noqa: E501
        :type: bool
        """

        self._is_critical = is_critical

    @property
    def is_configuration_data_update(self):
        """Gets the is_configuration_data_update of this OSUpdateModel.  # noqa: E501

        Set to true if this is an update to a configuration file. Defaults to false (macOS only).  # noqa: E501

        :return: The is_configuration_data_update of this OSUpdateModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_configuration_data_update

    @is_configuration_data_update.setter
    def is_configuration_data_update(self, is_configuration_data_update):
        """Sets the is_configuration_data_update of this OSUpdateModel.

        Set to true if this is an update to a configuration file. Defaults to false (macOS only).  # noqa: E501

        :param is_configuration_data_update: The is_configuration_data_update of this OSUpdateModel.  # noqa: E501
        :type: bool
        """

        self._is_configuration_data_update = is_configuration_data_update

    @property
    def is_firmware_update(self):
        """Gets the is_firmware_update of this OSUpdateModel.  # noqa: E501

        Set to true if this is an update to firmware. Defaults to false (macOS only).  # noqa: E501

        :return: The is_firmware_update of this OSUpdateModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_firmware_update

    @is_firmware_update.setter
    def is_firmware_update(self, is_firmware_update):
        """Sets the is_firmware_update of this OSUpdateModel.

        Set to true if this is an update to firmware. Defaults to false (macOS only).  # noqa: E501

        :param is_firmware_update: The is_firmware_update of this OSUpdateModel.  # noqa: E501
        :type: bool
        """

        self._is_firmware_update = is_firmware_update

    @property
    def restart_required(self):
        """Gets the restart_required of this OSUpdateModel.  # noqa: E501

        Set to true if the device restarts after this update is installed. Defaults to false.  # noqa: E501

        :return: The restart_required of this OSUpdateModel.  # noqa: E501
        :rtype: bool
        """
        return self._restart_required

    @restart_required.setter
    def restart_required(self, restart_required):
        """Sets the restart_required of this OSUpdateModel.

        Set to true if the device restarts after this update is installed. Defaults to false.  # noqa: E501

        :param restart_required: The restart_required of this OSUpdateModel.  # noqa: E501
        :type: bool
        """

        self._restart_required = restart_required

    @property
    def allows_install_later(self):
        """Gets the allows_install_later of this OSUpdateModel.  # noqa: E501

        Set to true if the update is eligible for InstallLater. Defaults to true.  # noqa: E501

        :return: The allows_install_later of this OSUpdateModel.  # noqa: E501
        :rtype: bool
        """
        return self._allows_install_later

    @allows_install_later.setter
    def allows_install_later(self, allows_install_later):
        """Sets the allows_install_later of this OSUpdateModel.

        Set to true if the update is eligible for InstallLater. Defaults to true.  # noqa: E501

        :param allows_install_later: The allows_install_later of this OSUpdateModel.  # noqa: E501
        :type: bool
        """

        self._allows_install_later = allows_install_later

    @property
    def app_identifiers_to_close(self):
        """Gets the app_identifiers_to_close of this OSUpdateModel.  # noqa: E501

        Each entry represents an app identifier that is closed to install this update (macOS only).  # noqa: E501

        :return: The app_identifiers_to_close of this OSUpdateModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_identifiers_to_close

    @app_identifiers_to_close.setter
    def app_identifiers_to_close(self, app_identifiers_to_close):
        """Sets the app_identifiers_to_close of this OSUpdateModel.

        Each entry represents an app identifier that is closed to install this update (macOS only).  # noqa: E501

        :param app_identifiers_to_close: The app_identifiers_to_close of this OSUpdateModel.  # noqa: E501
        :type: list[str]
        """

        self._app_identifiers_to_close = app_identifiers_to_close

    @property
    def device_update_name(self):
        """Gets the device_update_name of this OSUpdateModel.  # noqa: E501

        The name of the device update  # noqa: E501

        :return: The device_update_name of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._device_update_name

    @device_update_name.setter
    def device_update_name(self, device_update_name):
        """Sets the device_update_name of this OSUpdateModel.

        The name of the device update  # noqa: E501

        :param device_update_name: The device_update_name of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._device_update_name = device_update_name

    @property
    def release_date(self):
        """Gets the release_date of this OSUpdateModel.  # noqa: E501

        Indicates the release date of the corresponding device update  # noqa: E501

        :return: The release_date of this OSUpdateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this OSUpdateModel.

        Indicates the release date of the corresponding device update  # noqa: E501

        :param release_date: The release_date of this OSUpdateModel.  # noqa: E501
        :type: datetime
        """

        self._release_date = release_date

    @property
    def expiation_date(self):
        """Gets the expiation_date of this OSUpdateModel.  # noqa: E501

        Indicates the expiration date of the corresponding device update  # noqa: E501

        :return: The expiation_date of this OSUpdateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiation_date

    @expiation_date.setter
    def expiation_date(self, expiation_date):
        """Sets the expiation_date of this OSUpdateModel.

        Indicates the expiration date of the corresponding device update  # noqa: E501

        :param expiation_date: The expiation_date of this OSUpdateModel.  # noqa: E501
        :type: datetime
        """

        self._expiation_date = expiation_date

    @property
    def download_percent_complete(self):
        """Gets the download_percent_complete of this OSUpdateModel.  # noqa: E501

        Indicates the percentage of download that is complete. Floating point number (0.0 to 1.0)  # noqa: E501

        :return: The download_percent_complete of this OSUpdateModel.  # noqa: E501
        :rtype: float
        """
        return self._download_percent_complete

    @download_percent_complete.setter
    def download_percent_complete(self, download_percent_complete):
        """Sets the download_percent_complete of this OSUpdateModel.

        Indicates the percentage of download that is complete. Floating point number (0.0 to 1.0)  # noqa: E501

        :param download_percent_complete: The download_percent_complete of this OSUpdateModel.  # noqa: E501
        :type: float
        """

        self._download_percent_complete = download_percent_complete

    @property
    def status(self):
        """Gets the status of this OSUpdateModel.  # noqa: E501

        Indicates the status of the update  # noqa: E501

        :return: The status of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OSUpdateModel.

        Indicates the status of the update  # noqa: E501

        :param status: The status of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sample_time(self):
        """Gets the sample_time of this OSUpdateModel.  # noqa: E501

        Indicates the sample time of the update  # noqa: E501

        :return: The sample_time of this OSUpdateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_time

    @sample_time.setter
    def sample_time(self, sample_time):
        """Sets the sample_time of this OSUpdateModel.

        Indicates the sample time of the update  # noqa: E501

        :param sample_time: The sample_time of this OSUpdateModel.  # noqa: E501
        :type: datetime
        """

        self._sample_time = sample_time

    @property
    def status_time(self):
        """Gets the status_time of this OSUpdateModel.  # noqa: E501

        Indicates the status time of the device update  # noqa: E501

        :return: The status_time of this OSUpdateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._status_time

    @status_time.setter
    def status_time(self, status_time):
        """Sets the status_time of this OSUpdateModel.

        Indicates the status time of the device update  # noqa: E501

        :param status_time: The status_time of this OSUpdateModel.  # noqa: E501
        :type: datetime
        """

        self._status_time = status_time

    @property
    def device_update_version(self):
        """Gets the device_update_version of this OSUpdateModel.  # noqa: E501

        Indicates the version for iOS device updates  # noqa: E501

        :return: The device_update_version of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._device_update_version

    @device_update_version.setter
    def device_update_version(self, device_update_version):
        """Sets the device_update_version of this OSUpdateModel.

        Indicates the version for iOS device updates  # noqa: E501

        :param device_update_version: The device_update_version of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._device_update_version = device_update_version

    @property
    def device_update_uuid(self):
        """Gets the device_update_uuid of this OSUpdateModel.  # noqa: E501

        Indicates update UUID for corresponding iOS device update  # noqa: E501

        :return: The device_update_uuid of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._device_update_uuid

    @device_update_uuid.setter
    def device_update_uuid(self, device_update_uuid):
        """Sets the device_update_uuid of this OSUpdateModel.

        Indicates update UUID for corresponding iOS device update  # noqa: E501

        :param device_update_uuid: The device_update_uuid of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._device_update_uuid = device_update_uuid

    @property
    def id(self):
        """Gets the id of this OSUpdateModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this OSUpdateModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSUpdateModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this OSUpdateModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this OSUpdateModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this OSUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this OSUpdateModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this OSUpdateModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OSUpdateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSUpdateModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OSUpdateModel):
            return True

        return self.to_dict() != other.to_dict()
