# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceListItemResponseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lastseen': 'datetime',
        'device_name': 'str',
        'device_id': 'int',
        'device_uuid': 'str',
        'username': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'user_id': 'int',
        'user_uuid': 'str',
        'status': 'int',
        'device_up': 'bool'
    }

    attribute_map = {
        'lastseen': 'lastseen',
        'device_name': 'device_name',
        'device_id': 'device_id',
        'device_uuid': 'device_uuid',
        'username': 'username',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'user_id': 'user_id',
        'user_uuid': 'user_uuid',
        'status': 'status',
        'device_up': 'device_up'
    }

    def __init__(self, lastseen=None, device_name=None, device_id=None, device_uuid=None, username=None, firstname=None, lastname=None, user_id=None, user_uuid=None, status=None, device_up=None, _configuration=None):  # noqa: E501
        """DeviceListItemResponseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._lastseen = None
        self._device_name = None
        self._device_id = None
        self._device_uuid = None
        self._username = None
        self._firstname = None
        self._lastname = None
        self._user_id = None
        self._user_uuid = None
        self._status = None
        self._device_up = None
        self.discriminator = None

        if lastseen is not None:
            self.lastseen = lastseen
        if device_name is not None:
            self.device_name = device_name
        if device_id is not None:
            self.device_id = device_id
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if username is not None:
            self.username = username
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if user_id is not None:
            self.user_id = user_id
        if user_uuid is not None:
            self.user_uuid = user_uuid
        if status is not None:
            self.status = status
        if device_up is not None:
            self.device_up = device_up

    @property
    def lastseen(self):
        """Gets the lastseen of this DeviceListItemResponseV1Model.  # noqa: E501

        Last seen date tiem of the device in minutes.  # noqa: E501

        :return: The lastseen of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._lastseen

    @lastseen.setter
    def lastseen(self, lastseen):
        """Sets the lastseen of this DeviceListItemResponseV1Model.

        Last seen date tiem of the device in minutes.  # noqa: E501

        :param lastseen: The lastseen of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: datetime
        """

        self._lastseen = lastseen

    @property
    def device_name(self):
        """Gets the device_name of this DeviceListItemResponseV1Model.  # noqa: E501

        Device name.  # noqa: E501

        :return: The device_name of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceListItemResponseV1Model.

        Device name.  # noqa: E501

        :param device_name: The device_name of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def device_id(self):
        """Gets the device_id of this DeviceListItemResponseV1Model.  # noqa: E501

        Device id.  # noqa: E501

        :return: The device_id of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceListItemResponseV1Model.

        Device id.  # noqa: E501

        :param device_id: The device_id of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def device_uuid(self):
        """Gets the device_uuid of this DeviceListItemResponseV1Model.  # noqa: E501

        The unique identifier of the device.  # noqa: E501

        :return: The device_uuid of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this DeviceListItemResponseV1Model.

        The unique identifier of the device.  # noqa: E501

        :param device_uuid: The device_uuid of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def username(self):
        """Gets the username of this DeviceListItemResponseV1Model.  # noqa: E501

        Device user name.  # noqa: E501

        :return: The username of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DeviceListItemResponseV1Model.

        Device user name.  # noqa: E501

        :param username: The username of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def firstname(self):
        """Gets the firstname of this DeviceListItemResponseV1Model.  # noqa: E501

        First name of device user.  # noqa: E501

        :return: The firstname of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this DeviceListItemResponseV1Model.

        First name of device user.  # noqa: E501

        :param firstname: The firstname of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this DeviceListItemResponseV1Model.  # noqa: E501

        Last name of the device user.  # noqa: E501

        :return: The lastname of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this DeviceListItemResponseV1Model.

        Last name of the device user.  # noqa: E501

        :param lastname: The lastname of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def user_id(self):
        """Gets the user_id of this DeviceListItemResponseV1Model.  # noqa: E501

        Device user id.  # noqa: E501

        :return: The user_id of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DeviceListItemResponseV1Model.

        Device user id.  # noqa: E501

        :param user_id: The user_id of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_uuid(self):
        """Gets the user_uuid of this DeviceListItemResponseV1Model.  # noqa: E501

        The unique identifier of the enrollment user.  # noqa: E501

        :return: The user_uuid of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid):
        """Sets the user_uuid of this DeviceListItemResponseV1Model.

        The unique identifier of the enrollment user.  # noqa: E501

        :param user_uuid: The user_uuid of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: str
        """

        self._user_uuid = user_uuid

    @property
    def status(self):
        """Gets the status of this DeviceListItemResponseV1Model.  # noqa: E501

        Workflow status.  # noqa: E501

        :return: The status of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceListItemResponseV1Model.

        Workflow status.  # noqa: E501

        :param status: The status of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def device_up(self):
        """Gets the device_up of this DeviceListItemResponseV1Model.  # noqa: E501

        Device up or down.  # noqa: E501

        :return: The device_up of this DeviceListItemResponseV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._device_up

    @device_up.setter
    def device_up(self, device_up):
        """Sets the device_up of this DeviceListItemResponseV1Model.

        Device up or down.  # noqa: E501

        :param device_up: The device_up of this DeviceListItemResponseV1Model.  # noqa: E501
        :type: bool
        """

        self._device_up = device_up

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceListItemResponseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceListItemResponseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceListItemResponseV1Model):
            return True

        return self.to_dict() != other.to_dict()
