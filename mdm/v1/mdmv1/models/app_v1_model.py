# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class AppV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_details': 'AppDetailsV1Model',
        'assignment_info': 'AssignmentInfoV1Model',
        'device_sample_info': 'DeviceSampleInfoV1Model',
        'compliance_info': 'ComplianceInfoV1Model'
    }

    attribute_map = {
        'app_details': 'app_details',
        'assignment_info': 'assignment_info',
        'device_sample_info': 'device_sample_info',
        'compliance_info': 'compliance_info'
    }

    def __init__(self, app_details=None, assignment_info=None, device_sample_info=None, compliance_info=None, _configuration=None):  # noqa: E501
        """AppV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._app_details = None
        self._assignment_info = None
        self._device_sample_info = None
        self._compliance_info = None
        self.discriminator = None

        self.app_details = app_details
        self.assignment_info = assignment_info
        self.device_sample_info = device_sample_info
        self.compliance_info = compliance_info

    @property
    def app_details(self):
        """Gets the app_details of this AppV1Model.  # noqa: E501

        The basic details of the application  # noqa: E501

        :return: The app_details of this AppV1Model.  # noqa: E501
        :rtype: AppDetailsV1Model
        """
        return self._app_details

    @app_details.setter
    def app_details(self, app_details):
        """Sets the app_details of this AppV1Model.

        The basic details of the application  # noqa: E501

        :param app_details: The app_details of this AppV1Model.  # noqa: E501
        :type: AppDetailsV1Model
        """
        if self._configuration.client_side_validation and app_details is None:
            raise ValueError("Invalid value for `app_details`, must not be `None`")  # noqa: E501

        self._app_details = app_details

    @property
    def assignment_info(self):
        """Gets the assignment_info of this AppV1Model.  # noqa: E501

        The assignment details of the application  # noqa: E501

        :return: The assignment_info of this AppV1Model.  # noqa: E501
        :rtype: AssignmentInfoV1Model
        """
        return self._assignment_info

    @assignment_info.setter
    def assignment_info(self, assignment_info):
        """Sets the assignment_info of this AppV1Model.

        The assignment details of the application  # noqa: E501

        :param assignment_info: The assignment_info of this AppV1Model.  # noqa: E501
        :type: AssignmentInfoV1Model
        """
        if self._configuration.client_side_validation and assignment_info is None:
            raise ValueError("Invalid value for `assignment_info`, must not be `None`")  # noqa: E501

        self._assignment_info = assignment_info

    @property
    def device_sample_info(self):
        """Gets the device_sample_info of this AppV1Model.  # noqa: E501

        The details of device sample  # noqa: E501

        :return: The device_sample_info of this AppV1Model.  # noqa: E501
        :rtype: DeviceSampleInfoV1Model
        """
        return self._device_sample_info

    @device_sample_info.setter
    def device_sample_info(self, device_sample_info):
        """Sets the device_sample_info of this AppV1Model.

        The details of device sample  # noqa: E501

        :param device_sample_info: The device_sample_info of this AppV1Model.  # noqa: E501
        :type: DeviceSampleInfoV1Model
        """
        if self._configuration.client_side_validation and device_sample_info is None:
            raise ValueError("Invalid value for `device_sample_info`, must not be `None`")  # noqa: E501

        self._device_sample_info = device_sample_info

    @property
    def compliance_info(self):
        """Gets the compliance_info of this AppV1Model.  # noqa: E501

        The details of the compliance status  # noqa: E501

        :return: The compliance_info of this AppV1Model.  # noqa: E501
        :rtype: ComplianceInfoV1Model
        """
        return self._compliance_info

    @compliance_info.setter
    def compliance_info(self, compliance_info):
        """Sets the compliance_info of this AppV1Model.

        The details of the compliance status  # noqa: E501

        :param compliance_info: The compliance_info of this AppV1Model.  # noqa: E501
        :type: ComplianceInfoV1Model
        """
        if self._configuration.client_side_validation and compliance_info is None:
            raise ValueError("Invalid value for `compliance_info`, must not be `None`")  # noqa: E501

        self._compliance_info = compliance_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppV1Model):
            return True

        return self.to_dict() != other.to_dict()
