# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class OemUpdatesV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def oem_updates_v1_get_oem_updates_by_device_uuid_async(self, uuid, device_uuid, **kwargs):  # noqa: E501
        """New - Gets all OEM Update Summary details of a given organization group UUID.  # noqa: E501

        Returns all OEM Update Summary details of a given organization group id and its children.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_get_oem_updates_by_device_uuid_async(uuid, device_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str device_uuid: Device UUID to perform the operation on.(Required) (required)
        :return: OemUpdateSummarySearchResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oem_updates_v1_get_oem_updates_by_device_uuid_async_with_http_info(uuid, device_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.oem_updates_v1_get_oem_updates_by_device_uuid_async_with_http_info(uuid, device_uuid, **kwargs)  # noqa: E501
            return data

    def oem_updates_v1_get_oem_updates_by_device_uuid_async_with_http_info(self, uuid, device_uuid, **kwargs):  # noqa: E501
        """New - Gets all OEM Update Summary details of a given organization group UUID.  # noqa: E501

        Returns all OEM Update Summary details of a given organization group id and its children.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_get_oem_updates_by_device_uuid_async_with_http_info(uuid, device_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str device_uuid: Device UUID to perform the operation on.(Required) (required)
        :return: OemUpdateSummarySearchResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'device_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oem_updates_v1_get_oem_updates_by_device_uuid_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `oem_updates_v1_get_oem_updates_by_device_uuid_async`")  # noqa: E501
        # verify the required parameter 'device_uuid' is set
        if self.api_client.client_side_validation and ('device_uuid' not in params or
                                                       params['device_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_uuid` when calling `oem_updates_v1_get_oem_updates_by_device_uuid_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'device_uuid' in params:
            path_params['deviceUuid'] = params['device_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}/device/{deviceUuid}/oemupdates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OemUpdateSummarySearchResultV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oem_updates_v1_get_summary_details_async(self, uuid, **kwargs):  # noqa: E501
        """New - Gets all OEM Update Summary details of a given organization group UUID.  # noqa: E501

        Returns all OEM Update Summary details of a given organization group id and its children.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_get_summary_details_async(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 50
        :return: OemUpdateSummaryResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oem_updates_v1_get_summary_details_async_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.oem_updates_v1_get_summary_details_async_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def oem_updates_v1_get_summary_details_async_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets all OEM Update Summary details of a given organization group UUID.  # noqa: E501

        Returns all OEM Update Summary details of a given organization group id and its children.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_get_summary_details_async_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 50
        :return: OemUpdateSummaryResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oem_updates_v1_get_summary_details_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `oem_updates_v1_get_summary_details_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}/oemupdates/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OemUpdateSummaryResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oem_updates_v1_get_summary_devices_async(self, uuid, summary_uuid, **kwargs):  # noqa: E501
        """New - Gets the devices where OEM Update Summary is installed(status would be either failed or success).  # noqa: E501

        Returns the devices where the OEM Update is installed(status would be either failed or success).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_get_summary_devices_async(uuid, summary_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str summary_uuid: Unique value of the OEM Update Summary detail to perform the operation on.(Required) (required)
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 50
        :return: list[OemUpdateSummaryInstalledDeviceResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oem_updates_v1_get_summary_devices_async_with_http_info(uuid, summary_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.oem_updates_v1_get_summary_devices_async_with_http_info(uuid, summary_uuid, **kwargs)  # noqa: E501
            return data

    def oem_updates_v1_get_summary_devices_async_with_http_info(self, uuid, summary_uuid, **kwargs):  # noqa: E501
        """New - Gets the devices where OEM Update Summary is installed(status would be either failed or success).  # noqa: E501

        Returns the devices where the OEM Update is installed(status would be either failed or success).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_get_summary_devices_async_with_http_info(uuid, summary_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str summary_uuid: Unique value of the OEM Update Summary detail to perform the operation on.(Required) (required)
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 50
        :return: list[OemUpdateSummaryInstalledDeviceResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'summary_uuid', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oem_updates_v1_get_summary_devices_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `oem_updates_v1_get_summary_devices_async`")  # noqa: E501
        # verify the required parameter 'summary_uuid' is set
        if self.api_client.client_side_validation and ('summary_uuid' not in params or
                                                       params['summary_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `summary_uuid` when calling `oem_updates_v1_get_summary_devices_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'summary_uuid' in params:
            path_params['summaryUuid'] = params['summary_uuid']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}/oemupdates/summary/{summaryUuid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OemUpdateSummaryInstalledDeviceResponseV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oem_updates_v1_get_summary_status_async(self, uuid, summary_uuid, **kwargs):  # noqa: E501
        """New - Gets the count of OemUpdate Summary installed in devices for a given summaryID.  # noqa: E501

        It will return the summary with installed success and failed count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_get_summary_status_async(uuid, summary_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str summary_uuid: Unique value of the OEM Update Summary detail to perform the operation on.(Required) (required)
        :return: list[OemUpdateSummaryInstalledStatusResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oem_updates_v1_get_summary_status_async_with_http_info(uuid, summary_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.oem_updates_v1_get_summary_status_async_with_http_info(uuid, summary_uuid, **kwargs)  # noqa: E501
            return data

    def oem_updates_v1_get_summary_status_async_with_http_info(self, uuid, summary_uuid, **kwargs):  # noqa: E501
        """New - Gets the count of OemUpdate Summary installed in devices for a given summaryID.  # noqa: E501

        It will return the summary with installed success and failed count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_get_summary_status_async_with_http_info(uuid, summary_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str summary_uuid: Unique value of the OEM Update Summary detail to perform the operation on.(Required) (required)
        :return: list[OemUpdateSummaryInstalledStatusResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'summary_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oem_updates_v1_get_summary_status_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `oem_updates_v1_get_summary_status_async`")  # noqa: E501
        # verify the required parameter 'summary_uuid' is set
        if self.api_client.client_side_validation and ('summary_uuid' not in params or
                                                       params['summary_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `summary_uuid` when calling `oem_updates_v1_get_summary_status_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'summary_uuid' in params:
            path_params['summaryUuid'] = params['summary_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}/oemupdates/summary/{summaryUuid}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OemUpdateSummaryInstalledStatusResponseV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def oem_updates_v1_search_async(self, uuid, search_text, **kwargs):  # noqa: E501
        """New - Returns a collection of OemUpdateSummary details based on the search criteria.  # noqa: E501

        Returns a collection of OemUpdate summary details based on the search criteria specified. The search parameters can be Name, Criticality, UpdateType, Category and the pagesize.   searchcriteria =&gt; /{ce3f9d78-c411-4f02-af77-2a85bad7c262}/summary/search?searchText={intel}&amp;page={1}&amp;pageSize={20}&amp;orderBy={Asc}&amp;sortOrder={name}\")]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_search_async(uuid, search_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str search_text: OemUpdate is searched on Name, Message, Criticality, Category and UpdateType(Required) (required)
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 50
        :param str order_by: Order By.  Default Asc (Example:Asc,Dsc)
        :param str sort_order: Sort Order. Default OemupdateName(Example:OemupdateName, OemupdateCategory)
        :return: OemUpdateSummarySearchResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.oem_updates_v1_search_async_with_http_info(uuid, search_text, **kwargs)  # noqa: E501
        else:
            (data) = self.oem_updates_v1_search_async_with_http_info(uuid, search_text, **kwargs)  # noqa: E501
            return data

    def oem_updates_v1_search_async_with_http_info(self, uuid, search_text, **kwargs):  # noqa: E501
        """New - Returns a collection of OemUpdateSummary details based on the search criteria.  # noqa: E501

        Returns a collection of OemUpdate summary details based on the search criteria specified. The search parameters can be Name, Criticality, UpdateType, Category and the pagesize.   searchcriteria =&gt; /{ce3f9d78-c411-4f02-af77-2a85bad7c262}/summary/search?searchText={intel}&amp;page={1}&amp;pageSize={20}&amp;orderBy={Asc}&amp;sortOrder={name}\")]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.oem_updates_v1_search_async_with_http_info(uuid, search_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str search_text: OemUpdate is searched on Name, Message, Criticality, Category and UpdateType(Required) (required)
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 50
        :param str order_by: Order By.  Default Asc (Example:Asc,Dsc)
        :param str sort_order: Sort Order. Default OemupdateName(Example:OemupdateName, OemupdateCategory)
        :return: OemUpdateSummarySearchResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'search_text', 'page', 'page_size', 'order_by', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method oem_updates_v1_search_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `oem_updates_v1_search_async`")  # noqa: E501
        # verify the required parameter 'search_text' is set
        if self.api_client.client_side_validation and ('search_text' not in params or
                                                       params['search_text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_text` when calling `oem_updates_v1_search_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'search_text' in params:
            query_params.append(('searchText', params['search_text']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}/oemupdates/summary/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OemUpdateSummarySearchResultV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
