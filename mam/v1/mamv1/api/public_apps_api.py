# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv1.api_client import ApiClient


class PublicAppsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def public_apps_activate_public_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Activates the specified public application.  # noqa: E501

        Activates the public application identified by the passed in Application ID, and re-installs the app on devices based on existing assignments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_activate_public_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_activate_public_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_activate_public_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def public_apps_activate_public_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Activates the specified public application.  # noqa: E501

        Activates the public application identified by the passed in Application ID, and re-installs the app on devices based on existing assignments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_activate_public_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_activate_public_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `public_apps_activate_public_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationid}/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_deactivate_public_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Deactivates the specified public application.  # noqa: E501

        Deactivates the public application identified by the passed in Application ID, and removes the app from devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_deactivate_public_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Application Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_deactivate_public_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_deactivate_public_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def public_apps_deactivate_public_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Deactivates the specified public application.  # noqa: E501

        Deactivates the public application identified by the passed in Application ID, and removes the app from devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_deactivate_public_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Application Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_deactivate_public_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `public_apps_deactivate_public_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationid}/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_delete_public_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Deletes the specified public application.  # noqa: E501

        Deletes the public application identified by the Application Id passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_delete_public_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Unique identifier of the app to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_delete_public_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_delete_public_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def public_apps_delete_public_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Deletes the specified public application.  # noqa: E501

        Deletes the public application identified by the Application Id passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_delete_public_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Unique identifier of the app to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_delete_public_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `public_apps_delete_public_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_get_public_app_by_id_async(self, id, **kwargs):  # noqa: E501
        """Gets the details of a public app identified by id.  # noqa: E501

        Gets the details of the public application identified by the application Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_get_public_app_by_id_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Public App Id is the unique identifier for Public Applications in AirWatch. (Required). (required)
        :return: ApplicationEntity_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_get_public_app_by_id_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_get_public_app_by_id_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def public_apps_get_public_app_by_id_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the details of a public app identified by id.  # noqa: E501

        Gets the details of the public application identified by the application Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_get_public_app_by_id_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Public App Id is the unique identifier for Public Applications in AirWatch. (Required). (required)
        :return: ApplicationEntity_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_get_public_app_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `public_apps_get_public_app_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationEntity_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_get_public_app_installed_or_assigned_devices(self, applicationid, **kwargs):  # noqa: E501
        """Provides a list of devices that have the specified public application installed or assigned.  # noqa: E501

        Returns the list of devices associated(installed/assigned) with the public application identified by the application Id. If the status is unspecified, all the assigned devices are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_get_public_app_installed_or_assigned_devices(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :param str status: status - installed/assigned.
        :param str locationgroupid: The LocationGroup Identifier..
        :param str page: The Page number.
        :param str pagesize: The Page size.
        :return: DeviceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_get_public_app_installed_or_assigned_devices_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_get_public_app_installed_or_assigned_devices_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def public_apps_get_public_app_installed_or_assigned_devices_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Provides a list of devices that have the specified public application installed or assigned.  # noqa: E501

        Returns the list of devices associated(installed/assigned) with the public application identified by the application Id. If the status is unspecified, all the assigned devices are returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_get_public_app_installed_or_assigned_devices_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :param str status: status - installed/assigned.
        :param str locationgroupid: The LocationGroup Identifier..
        :param str page: The Page number.
        :param str pagesize: The Page size.
        :return: DeviceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'status', 'locationgroupid', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_get_public_app_installed_or_assigned_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `public_apps_get_public_app_installed_or_assigned_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'locationgroupid' in params:
            query_params.append(('locationgroupid', params['locationgroupid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_get_public_app_status_async(self, applicationid, **kwargs):  # noqa: E501
        """Indicates the status of the specified public application on a device.  # noqa: E501

        Gets the status(Assigned/Installed) of the public application on a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_get_public_app_status_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :param str deviceid: Device Identifier.
        :param str macaddress: Device MAC address.
        :param str serialnumber: Device Serial Number.
        :param str udid: Device UDID.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_get_public_app_status_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_get_public_app_status_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def public_apps_get_public_app_status_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Indicates the status of the specified public application on a device.  # noqa: E501

        Gets the status(Assigned/Installed) of the public application on a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_get_public_app_status_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :param str deviceid: Device Identifier.
        :param str macaddress: Device MAC address.
        :param str serialnumber: Device Serial Number.
        :param str udid: Device UDID.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'deviceid', 'macaddress', 'serialnumber', 'udid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_get_public_app_status_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `public_apps_get_public_app_status_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'macaddress' in params:
            query_params.append(('macaddress', params['macaddress']))  # noqa: E501
        if 'serialnumber' in params:
            query_params.append(('serialnumber', params['serialnumber']))  # noqa: E501
        if 'udid' in params:
            query_params.append(('udid', params['udid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationid}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_insert_public_app_async(self, **kwargs):  # noqa: E501
        """Inserts the public application selected by searching for the bundle ID (Android) or external ID (iOS) in the app market.  # noqa: E501

        External Id or ApplicationUrl is required in case of Ios apps and for other platforms, Bundle Id or ApplicationUrl is required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_insert_public_app_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationEntity_ application: The application entity to be inserted.
        :return: ApplicationEntity_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_insert_public_app_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_insert_public_app_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def public_apps_insert_public_app_async_with_http_info(self, **kwargs):  # noqa: E501
        """Inserts the public application selected by searching for the bundle ID (Android) or external ID (iOS) in the app market.  # noqa: E501

        External Id or ApplicationUrl is required in case of Ios apps and for other platforms, Bundle Id or ApplicationUrl is required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_insert_public_app_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationEntity_ application: The application entity to be inserted.
        :return: ApplicationEntity_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_insert_public_app_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationEntity_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_install_public_app_on_device_async(self, applicationid, **kwargs):  # noqa: E501
        """Installs the specified public application on a device.  # noqa: E501

        Installs the public application identified by the passed in Application Id on a particular device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_install_public_app_on_device_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applicationid: The Id of the Application to be installed. (required)
        :param DeviceInfo device_info: The details of the device to install the application on.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_install_public_app_on_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_install_public_app_on_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def public_apps_install_public_app_on_device_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Installs the specified public application on a device.  # noqa: E501

        Installs the public application identified by the passed in Application Id on a particular device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_install_public_app_on_device_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applicationid: The Id of the Application to be installed. (required)
        :param DeviceInfo device_info: The details of the device to install the application on.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'device_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_install_public_app_on_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `public_apps_install_public_app_on_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_info' in params:
            body_params = params['device_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationid}/install', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_remove_public_app_from_device_async(self, applicationid, **kwargs):  # noqa: E501
        """Uninstalls the specified public application from a device.  # noqa: E501

        Uninstalls the public application identified by the application Id from the passed in device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_remove_public_app_from_device_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :param DeviceInfo device_info: The details of the device from which to uninstall the application.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_remove_public_app_from_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_remove_public_app_from_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def public_apps_remove_public_app_from_device_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Uninstalls the specified public application from a device.  # noqa: E501

        Uninstalls the public application identified by the application Id from the passed in device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_remove_public_app_from_device_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :param DeviceInfo device_info: The details of the device from which to uninstall the application.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'device_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_remove_public_app_from_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `public_apps_remove_public_app_from_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_info' in params:
            body_params = params['device_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationid}/uninstall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_send_application_configuration_public_apps_async(self, **kwargs):  # noqa: E501
        """New - SendApplicationConfiguration to a given device assigned to a Public App.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_send_application_configuration_public_apps_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendApplicationConfigurationModel send_application_configuration_model: Application Configuration Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_send_application_configuration_public_apps_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_send_application_configuration_public_apps_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def public_apps_send_application_configuration_public_apps_async_with_http_info(self, **kwargs):  # noqa: E501
        """New - SendApplicationConfiguration to a given device assigned to a Public App.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_send_application_configuration_public_apps_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendApplicationConfigurationModel send_application_configuration_model: Application Configuration Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['send_application_configuration_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_send_application_configuration_public_apps_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'send_application_configuration_model' in params:
            body_params = params['send_application_configuration_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/SendApplicationConfiguration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_apps_update_public_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Updates the public application selected by searching for the bundle ID (Android) or external ID (iOS) in the app market.  # noqa: E501

        Updates the public application details such as name, categories etc for the public app identified by the unique identifier applicationid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_update_public_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application id to be updated. (required)
        :param ApplicationEntity_ application_entity: The application details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_apps_update_public_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_apps_update_public_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def public_apps_update_public_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Updates the public application selected by searching for the bundle ID (Android) or external ID (iOS) in the app market.  # noqa: E501

        Updates the public application details such as name, categories etc for the public app identified by the unique identifier applicationid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_apps_update_public_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application id to be updated. (required)
        :param ApplicationEntity_ application_entity: The application details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'application_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_apps_update_public_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `public_apps_update_public_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application_entity' in params:
            body_params = params['application_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
