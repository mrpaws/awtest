# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkVPNPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_type': 'str',
        'connection_name': 'str',
        'server': 'str',
        'per_app_vpn': 'bool',
        'enable_always_on_vpn': 'bool',
        'vpn_lock_down': 'bool',
        'user_name': 'str',
        'password': 'str',
        'realm': 'str',
        'role': 'str',
        'use_web_logon_for_authentication': 'bool',
        'fips_mode': 'bool',
        'authentication_type': 'int',
        'enable_vpnon_demand': 'bool',
        'vpn_enabled_wrapper': 'str',
        'gateway_uid': 'str',
        'vpn_uuid': 'str',
        'set_active': 'bool',
        'protocol_type': 'str',
        'vpn_username': 'str',
        'certificate_revocation': 'bool',
        'i_psec_authentication_mode': 'str',
        'ike_identity': 'str',
        'anyconnect_profile': 'str',
        'payload_certificate_name': 'str',
        'vendor_keys': 'bool',
        'vendor_config_key': 'list[str]',
        'vendor_config_value': 'list[str]',
        'vendor_config_type': 'list[str]'
    }

    attribute_map = {
        'connection_type': 'ConnectionType',
        'connection_name': 'ConnectionName',
        'server': 'Server',
        'per_app_vpn': 'PerAppVPN',
        'enable_always_on_vpn': 'EnableAlwaysOnVPN',
        'vpn_lock_down': 'VPNLockDown',
        'user_name': 'UserName',
        'password': 'Password',
        'realm': 'Realm',
        'role': 'Role',
        'use_web_logon_for_authentication': 'UseWebLogonForAuthentication',
        'fips_mode': 'FipsMode',
        'authentication_type': 'AuthenticationType',
        'enable_vpnon_demand': 'EnableVPNOnDemand',
        'vpn_enabled_wrapper': 'VPNEnabledWrapper',
        'gateway_uid': 'GatewayUID',
        'vpn_uuid': 'VpnUUID',
        'set_active': 'SetActive',
        'protocol_type': 'ProtocolType',
        'vpn_username': 'VpnUsername',
        'certificate_revocation': 'CertificateRevocation',
        'i_psec_authentication_mode': 'IPsecAuthenticationMode',
        'ike_identity': 'IKEIdentity',
        'anyconnect_profile': 'AnyconnectProfile',
        'payload_certificate_name': 'PayloadCertificateName',
        'vendor_keys': 'VendorKeys',
        'vendor_config_key': 'VendorConfigKey',
        'vendor_config_value': 'VendorConfigValue',
        'vendor_config_type': 'VendorConfigType'
    }

    def __init__(self, connection_type=None, connection_name=None, server=None, per_app_vpn=None, enable_always_on_vpn=None, vpn_lock_down=None, user_name=None, password=None, realm=None, role=None, use_web_logon_for_authentication=None, fips_mode=None, authentication_type=None, enable_vpnon_demand=None, vpn_enabled_wrapper=None, gateway_uid=None, vpn_uuid=None, set_active=None, protocol_type=None, vpn_username=None, certificate_revocation=None, i_psec_authentication_mode=None, ike_identity=None, anyconnect_profile=None, payload_certificate_name=None, vendor_keys=None, vendor_config_key=None, vendor_config_value=None, vendor_config_type=None, _configuration=None):  # noqa: E501
        """AndroidForWorkVPNPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_type = None
        self._connection_name = None
        self._server = None
        self._per_app_vpn = None
        self._enable_always_on_vpn = None
        self._vpn_lock_down = None
        self._user_name = None
        self._password = None
        self._realm = None
        self._role = None
        self._use_web_logon_for_authentication = None
        self._fips_mode = None
        self._authentication_type = None
        self._enable_vpnon_demand = None
        self._vpn_enabled_wrapper = None
        self._gateway_uid = None
        self._vpn_uuid = None
        self._set_active = None
        self._protocol_type = None
        self._vpn_username = None
        self._certificate_revocation = None
        self._i_psec_authentication_mode = None
        self._ike_identity = None
        self._anyconnect_profile = None
        self._payload_certificate_name = None
        self._vendor_keys = None
        self._vendor_config_key = None
        self._vendor_config_value = None
        self._vendor_config_type = None
        self.discriminator = None

        if connection_type is not None:
            self.connection_type = connection_type
        if connection_name is not None:
            self.connection_name = connection_name
        if server is not None:
            self.server = server
        if per_app_vpn is not None:
            self.per_app_vpn = per_app_vpn
        if enable_always_on_vpn is not None:
            self.enable_always_on_vpn = enable_always_on_vpn
        if vpn_lock_down is not None:
            self.vpn_lock_down = vpn_lock_down
        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if realm is not None:
            self.realm = realm
        if role is not None:
            self.role = role
        if use_web_logon_for_authentication is not None:
            self.use_web_logon_for_authentication = use_web_logon_for_authentication
        if fips_mode is not None:
            self.fips_mode = fips_mode
        if authentication_type is not None:
            self.authentication_type = authentication_type
        if enable_vpnon_demand is not None:
            self.enable_vpnon_demand = enable_vpnon_demand
        if vpn_enabled_wrapper is not None:
            self.vpn_enabled_wrapper = vpn_enabled_wrapper
        if gateway_uid is not None:
            self.gateway_uid = gateway_uid
        if vpn_uuid is not None:
            self.vpn_uuid = vpn_uuid
        if set_active is not None:
            self.set_active = set_active
        if protocol_type is not None:
            self.protocol_type = protocol_type
        if vpn_username is not None:
            self.vpn_username = vpn_username
        if certificate_revocation is not None:
            self.certificate_revocation = certificate_revocation
        if i_psec_authentication_mode is not None:
            self.i_psec_authentication_mode = i_psec_authentication_mode
        if ike_identity is not None:
            self.ike_identity = ike_identity
        if anyconnect_profile is not None:
            self.anyconnect_profile = anyconnect_profile
        if payload_certificate_name is not None:
            self.payload_certificate_name = payload_certificate_name
        if vendor_keys is not None:
            self.vendor_keys = vendor_keys
        if vendor_config_key is not None:
            self.vendor_config_key = vendor_config_key
        if vendor_config_value is not None:
            self.vendor_config_value = vendor_config_value
        if vendor_config_type is not None:
            self.vendor_config_type = vendor_config_type

    @property
    def connection_type(self):
        """Gets the connection_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets vPNType.  # noqa: E501

        :return: The connection_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets vPNType.  # noqa: E501

        :param connection_type: The connection_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def connection_name(self):
        """Gets the connection_name of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets connectionName.  # noqa: E501

        :return: The connection_name of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets connectionName.  # noqa: E501

        :param connection_name: The connection_name of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._connection_name = connection_name

    @property
    def server(self):
        """Gets the server of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets serverName.  # noqa: E501

        :return: The server of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets serverName.  # noqa: E501

        :param server: The server of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def per_app_vpn(self):
        """Gets the per_app_vpn of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets perAppVPN.  # noqa: E501

        :return: The per_app_vpn of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._per_app_vpn

    @per_app_vpn.setter
    def per_app_vpn(self, per_app_vpn):
        """Sets the per_app_vpn of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets perAppVPN.  # noqa: E501

        :param per_app_vpn: The per_app_vpn of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._per_app_vpn = per_app_vpn

    @property
    def enable_always_on_vpn(self):
        """Gets the enable_always_on_vpn of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets enableAlwaysOnVPN.  # noqa: E501

        :return: The enable_always_on_vpn of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_always_on_vpn

    @enable_always_on_vpn.setter
    def enable_always_on_vpn(self, enable_always_on_vpn):
        """Sets the enable_always_on_vpn of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets enableAlwaysOnVPN.  # noqa: E501

        :param enable_always_on_vpn: The enable_always_on_vpn of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_always_on_vpn = enable_always_on_vpn

    @property
    def vpn_lock_down(self):
        """Gets the vpn_lock_down of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets vPNLockDown.  # noqa: E501

        :return: The vpn_lock_down of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._vpn_lock_down

    @vpn_lock_down.setter
    def vpn_lock_down(self, vpn_lock_down):
        """Sets the vpn_lock_down of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets vPNLockDown.  # noqa: E501

        :param vpn_lock_down: The vpn_lock_down of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._vpn_lock_down = vpn_lock_down

    @property
    def user_name(self):
        """Gets the user_name of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets userName.  # noqa: E501

        :return: The user_name of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets userName.  # noqa: E501

        :param user_name: The user_name of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets password.  # noqa: E501

        :return: The password of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets password.  # noqa: E501

        :param password: The password of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def realm(self):
        """Gets the realm of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets realm.  # noqa: E501

        :return: The realm of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets realm.  # noqa: E501

        :param realm: The realm of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._realm = realm

    @property
    def role(self):
        """Gets the role of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets role.  # noqa: E501

        :return: The role of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets role.  # noqa: E501

        :param role: The role of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def use_web_logon_for_authentication(self):
        """Gets the use_web_logon_for_authentication of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets useWebLogonForAuthentication.  # noqa: E501

        :return: The use_web_logon_for_authentication of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_web_logon_for_authentication

    @use_web_logon_for_authentication.setter
    def use_web_logon_for_authentication(self, use_web_logon_for_authentication):
        """Sets the use_web_logon_for_authentication of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets useWebLogonForAuthentication.  # noqa: E501

        :param use_web_logon_for_authentication: The use_web_logon_for_authentication of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_web_logon_for_authentication = use_web_logon_for_authentication

    @property
    def fips_mode(self):
        """Gets the fips_mode of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets fipsMode.  # noqa: E501

        :return: The fips_mode of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._fips_mode

    @fips_mode.setter
    def fips_mode(self, fips_mode):
        """Sets the fips_mode of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets fipsMode.  # noqa: E501

        :param fips_mode: The fips_mode of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._fips_mode = fips_mode

    @property
    def authentication_type(self):
        """Gets the authentication_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets authenticationType.  # noqa: E501

        :return: The authentication_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets authenticationType.  # noqa: E501

        :param authentication_type: The authentication_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._authentication_type = authentication_type

    @property
    def enable_vpnon_demand(self):
        """Gets the enable_vpnon_demand of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets enableVPNOnDemand.  # noqa: E501

        :return: The enable_vpnon_demand of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_vpnon_demand

    @enable_vpnon_demand.setter
    def enable_vpnon_demand(self, enable_vpnon_demand):
        """Sets the enable_vpnon_demand of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets enableVPNOnDemand.  # noqa: E501

        :param enable_vpnon_demand: The enable_vpnon_demand of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_vpnon_demand = enable_vpnon_demand

    @property
    def vpn_enabled_wrapper(self):
        """Gets the vpn_enabled_wrapper of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets vPNEnabledWrapper.  # noqa: E501

        :return: The vpn_enabled_wrapper of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._vpn_enabled_wrapper

    @vpn_enabled_wrapper.setter
    def vpn_enabled_wrapper(self, vpn_enabled_wrapper):
        """Sets the vpn_enabled_wrapper of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets vPNEnabledWrapper.  # noqa: E501

        :param vpn_enabled_wrapper: The vpn_enabled_wrapper of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._vpn_enabled_wrapper = vpn_enabled_wrapper

    @property
    def gateway_uid(self):
        """Gets the gateway_uid of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets gatewayUID.  # noqa: E501

        :return: The gateway_uid of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._gateway_uid

    @gateway_uid.setter
    def gateway_uid(self, gateway_uid):
        """Sets the gateway_uid of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets gatewayUID.  # noqa: E501

        :param gateway_uid: The gateway_uid of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._gateway_uid = gateway_uid

    @property
    def vpn_uuid(self):
        """Gets the vpn_uuid of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets vpnUUID.  # noqa: E501

        :return: The vpn_uuid of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._vpn_uuid

    @vpn_uuid.setter
    def vpn_uuid(self, vpn_uuid):
        """Sets the vpn_uuid of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets vpnUUID.  # noqa: E501

        :param vpn_uuid: The vpn_uuid of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._vpn_uuid = vpn_uuid

    @property
    def set_active(self):
        """Gets the set_active of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets setActive.  # noqa: E501

        :return: The set_active of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._set_active

    @set_active.setter
    def set_active(self, set_active):
        """Sets the set_active of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets setActive.  # noqa: E501

        :param set_active: The set_active of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._set_active = set_active

    @property
    def protocol_type(self):
        """Gets the protocol_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets protocolType.  # noqa: E501

        :return: The protocol_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets protocolType.  # noqa: E501

        :param protocol_type: The protocol_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._protocol_type = protocol_type

    @property
    def vpn_username(self):
        """Gets the vpn_username of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets vpnUsername.  # noqa: E501

        :return: The vpn_username of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._vpn_username

    @vpn_username.setter
    def vpn_username(self, vpn_username):
        """Sets the vpn_username of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets vpnUsername.  # noqa: E501

        :param vpn_username: The vpn_username of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._vpn_username = vpn_username

    @property
    def certificate_revocation(self):
        """Gets the certificate_revocation of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets certificateRevocation.  # noqa: E501

        :return: The certificate_revocation of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._certificate_revocation

    @certificate_revocation.setter
    def certificate_revocation(self, certificate_revocation):
        """Sets the certificate_revocation of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets certificateRevocation.  # noqa: E501

        :param certificate_revocation: The certificate_revocation of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._certificate_revocation = certificate_revocation

    @property
    def i_psec_authentication_mode(self):
        """Gets the i_psec_authentication_mode of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets iPsecAuthenticationMode.  # noqa: E501

        :return: The i_psec_authentication_mode of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._i_psec_authentication_mode

    @i_psec_authentication_mode.setter
    def i_psec_authentication_mode(self, i_psec_authentication_mode):
        """Sets the i_psec_authentication_mode of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets iPsecAuthenticationMode.  # noqa: E501

        :param i_psec_authentication_mode: The i_psec_authentication_mode of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._i_psec_authentication_mode = i_psec_authentication_mode

    @property
    def ike_identity(self):
        """Gets the ike_identity of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets iKEIdentity.  # noqa: E501

        :return: The ike_identity of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._ike_identity

    @ike_identity.setter
    def ike_identity(self, ike_identity):
        """Sets the ike_identity of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets iKEIdentity.  # noqa: E501

        :param ike_identity: The ike_identity of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._ike_identity = ike_identity

    @property
    def anyconnect_profile(self):
        """Gets the anyconnect_profile of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets anyconnectProfile.  # noqa: E501

        :return: The anyconnect_profile of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._anyconnect_profile

    @anyconnect_profile.setter
    def anyconnect_profile(self, anyconnect_profile):
        """Sets the anyconnect_profile of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets anyconnectProfile.  # noqa: E501

        :param anyconnect_profile: The anyconnect_profile of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._anyconnect_profile = anyconnect_profile

    @property
    def payload_certificate_name(self):
        """Gets the payload_certificate_name of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets payload certificate name.  # noqa: E501

        :return: The payload_certificate_name of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._payload_certificate_name

    @payload_certificate_name.setter
    def payload_certificate_name(self, payload_certificate_name):
        """Sets the payload_certificate_name of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets payload certificate name.  # noqa: E501

        :param payload_certificate_name: The payload_certificate_name of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._payload_certificate_name = payload_certificate_name

    @property
    def vendor_keys(self):
        """Gets the vendor_keys of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets vendor Keys.  # noqa: E501

        :return: The vendor_keys of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._vendor_keys

    @vendor_keys.setter
    def vendor_keys(self, vendor_keys):
        """Sets the vendor_keys of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets vendor Keys.  # noqa: E501

        :param vendor_keys: The vendor_keys of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._vendor_keys = vendor_keys

    @property
    def vendor_config_key(self):
        """Gets the vendor_config_key of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets vendor config key.  # noqa: E501

        :return: The vendor_config_key of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendor_config_key

    @vendor_config_key.setter
    def vendor_config_key(self, vendor_config_key):
        """Sets the vendor_config_key of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets vendor config key.  # noqa: E501

        :param vendor_config_key: The vendor_config_key of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._vendor_config_key = vendor_config_key

    @property
    def vendor_config_value(self):
        """Gets the vendor_config_value of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets vendor config value.  # noqa: E501

        :return: The vendor_config_value of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendor_config_value

    @vendor_config_value.setter
    def vendor_config_value(self, vendor_config_value):
        """Sets the vendor_config_value of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets vendor config value.  # noqa: E501

        :param vendor_config_value: The vendor_config_value of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._vendor_config_value = vendor_config_value

    @property
    def vendor_config_type(self):
        """Gets the vendor_config_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501

        Gets or sets vendor config type.  # noqa: E501

        :return: The vendor_config_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendor_config_type

    @vendor_config_type.setter
    def vendor_config_type(self, vendor_config_type):
        """Sets the vendor_config_type of this AndroidForWorkVPNPayloadV2Entity.

        Gets or sets vendor config type.  # noqa: E501

        :param vendor_config_type: The vendor_config_type of this AndroidForWorkVPNPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._vendor_config_type = vendor_config_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkVPNPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkVPNPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkVPNPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
