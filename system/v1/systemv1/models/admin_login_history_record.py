# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class AdminLoginHistoryRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_time': 'datetime',
        'user_name': 'str',
        'user_uuid': 'str',
        'source_ip': 'str',
        'login_type': 'str',
        'application': 'str',
        'browser': 'str',
        'platform': 'str',
        'status': 'int'
    }

    attribute_map = {
        'date_time': 'date_time',
        'user_name': 'user_name',
        'user_uuid': 'user_uuid',
        'source_ip': 'source_ip',
        'login_type': 'login_type',
        'application': 'application',
        'browser': 'browser',
        'platform': 'platform',
        'status': 'status'
    }

    def __init__(self, date_time=None, user_name=None, user_uuid=None, source_ip=None, login_type=None, application=None, browser=None, platform=None, status=None, _configuration=None):  # noqa: E501
        """AdminLoginHistoryRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_time = None
        self._user_name = None
        self._user_uuid = None
        self._source_ip = None
        self._login_type = None
        self._application = None
        self._browser = None
        self._platform = None
        self._status = None
        self.discriminator = None

        if date_time is not None:
            self.date_time = date_time
        if user_name is not None:
            self.user_name = user_name
        if user_uuid is not None:
            self.user_uuid = user_uuid
        if source_ip is not None:
            self.source_ip = source_ip
        if login_type is not None:
            self.login_type = login_type
        if application is not None:
            self.application = application
        if browser is not None:
            self.browser = browser
        if platform is not None:
            self.platform = platform
        if status is not None:
            self.status = status

    @property
    def date_time(self):
        """Gets the date_time of this AdminLoginHistoryRecord.  # noqa: E501

        Date time from value.  # noqa: E501

        :return: The date_time of this AdminLoginHistoryRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this AdminLoginHistoryRecord.

        Date time from value.  # noqa: E501

        :param date_time: The date_time of this AdminLoginHistoryRecord.  # noqa: E501
        :type: datetime
        """

        self._date_time = date_time

    @property
    def user_name(self):
        """Gets the user_name of this AdminLoginHistoryRecord.  # noqa: E501

        User name.  # noqa: E501

        :return: The user_name of this AdminLoginHistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AdminLoginHistoryRecord.

        User name.  # noqa: E501

        :param user_name: The user_name of this AdminLoginHistoryRecord.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_uuid(self):
        """Gets the user_uuid of this AdminLoginHistoryRecord.  # noqa: E501

        User UUID.  # noqa: E501

        :return: The user_uuid of this AdminLoginHistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid):
        """Sets the user_uuid of this AdminLoginHistoryRecord.

        User UUID.  # noqa: E501

        :param user_uuid: The user_uuid of this AdminLoginHistoryRecord.  # noqa: E501
        :type: str
        """

        self._user_uuid = user_uuid

    @property
    def source_ip(self):
        """Gets the source_ip of this AdminLoginHistoryRecord.  # noqa: E501

        Source IP.  # noqa: E501

        :return: The source_ip of this AdminLoginHistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this AdminLoginHistoryRecord.

        Source IP.  # noqa: E501

        :param source_ip: The source_ip of this AdminLoginHistoryRecord.  # noqa: E501
        :type: str
        """

        self._source_ip = source_ip

    @property
    def login_type(self):
        """Gets the login_type of this AdminLoginHistoryRecord.  # noqa: E501

        Login type.  # noqa: E501

        :return: The login_type of this AdminLoginHistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._login_type

    @login_type.setter
    def login_type(self, login_type):
        """Sets the login_type of this AdminLoginHistoryRecord.

        Login type.  # noqa: E501

        :param login_type: The login_type of this AdminLoginHistoryRecord.  # noqa: E501
        :type: str
        """

        self._login_type = login_type

    @property
    def application(self):
        """Gets the application of this AdminLoginHistoryRecord.  # noqa: E501

        Application.  # noqa: E501

        :return: The application of this AdminLoginHistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this AdminLoginHistoryRecord.

        Application.  # noqa: E501

        :param application: The application of this AdminLoginHistoryRecord.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def browser(self):
        """Gets the browser of this AdminLoginHistoryRecord.  # noqa: E501

        Browser.  # noqa: E501

        :return: The browser of this AdminLoginHistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this AdminLoginHistoryRecord.

        Browser.  # noqa: E501

        :param browser: The browser of this AdminLoginHistoryRecord.  # noqa: E501
        :type: str
        """

        self._browser = browser

    @property
    def platform(self):
        """Gets the platform of this AdminLoginHistoryRecord.  # noqa: E501

        Platfrom.  # noqa: E501

        :return: The platform of this AdminLoginHistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AdminLoginHistoryRecord.

        Platfrom.  # noqa: E501

        :param platform: The platform of this AdminLoginHistoryRecord.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def status(self):
        """Gets the status of this AdminLoginHistoryRecord.  # noqa: E501

        Status.  # noqa: E501

        :return: The status of this AdminLoginHistoryRecord.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AdminLoginHistoryRecord.

        Status.  # noqa: E501

        :param status: The status of this AdminLoginHistoryRecord.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminLoginHistoryRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminLoginHistoryRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdminLoginHistoryRecord):
            return True

        return self.to_dict() != other.to_dict()
