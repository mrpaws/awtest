# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class AppPatchModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'patch_id': 'int',
        'patch_file_name': 'str',
        'patch_blob_id': 'int',
        'patch_type': 'str'
    }

    attribute_map = {
        'patch_id': 'PatchId',
        'patch_file_name': 'PatchFileName',
        'patch_blob_id': 'PatchBlobId',
        'patch_type': 'PatchType'
    }

    def __init__(self, patch_id=None, patch_file_name=None, patch_blob_id=None, patch_type=None, _configuration=None):  # noqa: E501
        """AppPatchModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._patch_id = None
        self._patch_file_name = None
        self._patch_blob_id = None
        self._patch_type = None
        self.discriminator = None

        if patch_id is not None:
            self.patch_id = patch_id
        if patch_file_name is not None:
            self.patch_file_name = patch_file_name
        if patch_blob_id is not None:
            self.patch_blob_id = patch_blob_id
        if patch_type is not None:
            self.patch_type = patch_type

    @property
    def patch_id(self):
        """Gets the patch_id of this AppPatchModel.  # noqa: E501

        Gets or sets the id of the uploaded patch.  # noqa: E501

        :return: The patch_id of this AppPatchModel.  # noqa: E501
        :rtype: int
        """
        return self._patch_id

    @patch_id.setter
    def patch_id(self, patch_id):
        """Sets the patch_id of this AppPatchModel.

        Gets or sets the id of the uploaded patch.  # noqa: E501

        :param patch_id: The patch_id of this AppPatchModel.  # noqa: E501
        :type: int
        """

        self._patch_id = patch_id

    @property
    def patch_file_name(self):
        """Gets the patch_file_name of this AppPatchModel.  # noqa: E501

        Gets or sets the uploaded patch file name.  # noqa: E501

        :return: The patch_file_name of this AppPatchModel.  # noqa: E501
        :rtype: str
        """
        return self._patch_file_name

    @patch_file_name.setter
    def patch_file_name(self, patch_file_name):
        """Sets the patch_file_name of this AppPatchModel.

        Gets or sets the uploaded patch file name.  # noqa: E501

        :param patch_file_name: The patch_file_name of this AppPatchModel.  # noqa: E501
        :type: str
        """

        self._patch_file_name = patch_file_name

    @property
    def patch_blob_id(self):
        """Gets the patch_blob_id of this AppPatchModel.  # noqa: E501

        Gets or sets the uploaded patch file blob id.  # noqa: E501

        :return: The patch_blob_id of this AppPatchModel.  # noqa: E501
        :rtype: int
        """
        return self._patch_blob_id

    @patch_blob_id.setter
    def patch_blob_id(self, patch_blob_id):
        """Sets the patch_blob_id of this AppPatchModel.

        Gets or sets the uploaded patch file blob id.  # noqa: E501

        :param patch_blob_id: The patch_blob_id of this AppPatchModel.  # noqa: E501
        :type: int
        """

        self._patch_blob_id = patch_blob_id

    @property
    def patch_type(self):
        """Gets the patch_type of this AppPatchModel.  # noqa: E501

        Gets or sets the type of the uploaded patch. Supported values : Additive, Cumulative.  # noqa: E501

        :return: The patch_type of this AppPatchModel.  # noqa: E501
        :rtype: str
        """
        return self._patch_type

    @patch_type.setter
    def patch_type(self, patch_type):
        """Sets the patch_type of this AppPatchModel.

        Gets or sets the type of the uploaded patch. Supported values : Additive, Cumulative.  # noqa: E501

        :param patch_type: The patch_type of this AppPatchModel.  # noqa: E501
        :type: str
        """

        self._patch_type = patch_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppPatchModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppPatchModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppPatchModel):
            return True

        return self.to_dict() != other.to_dict()
