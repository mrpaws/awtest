# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class ProductsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def products_v1_activate(self, id, **kwargs):  # noqa: E501
        """Activates the Product.  # noqa: E501

        Activates the product which matches the input Product Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_activate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of Product which needs to be activated (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_activate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_activate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_v1_activate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Activates the Product.  # noqa: E501

        Activates the product which matches the input Product Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_activate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of Product which needs to be activated (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_activate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_activate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_add_conditions_to_product_async(self, productid, conditions, **kwargs):  # noqa: E501
        """Adds Conditions to Product.  # noqa: E501

        Adds passed Download and Install Conditions to specified Product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_add_conditions_to_product_async(productid, conditions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int productid: Identifier of the Product to which conditions to be added (Required). (required)
        :param Conditions conditions: Conditions to be added to Product (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_add_conditions_to_product_async_with_http_info(productid, conditions, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_add_conditions_to_product_async_with_http_info(productid, conditions, **kwargs)  # noqa: E501
            return data

    def products_v1_add_conditions_to_product_async_with_http_info(self, productid, conditions, **kwargs):  # noqa: E501
        """Adds Conditions to Product.  # noqa: E501

        Adds passed Download and Install Conditions to specified Product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_add_conditions_to_product_async_with_http_info(productid, conditions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int productid: Identifier of the Product to which conditions to be added (Required). (required)
        :param Conditions conditions: Conditions to be added to Product (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['productid', 'conditions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_add_conditions_to_product_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'productid' is set
        if self.api_client.client_side_validation and ('productid' not in params or
                                                       params['productid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `productid` when calling `products_v1_add_conditions_to_product_async`")  # noqa: E501
        # verify the required parameter 'conditions' is set
        if self.api_client.client_side_validation and ('conditions' not in params or
                                                       params['conditions'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `conditions` when calling `products_v1_add_conditions_to_product_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'productid' in params:
            path_params['productid'] = params['productid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conditions' in params:
            body_params = params['conditions']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{productid}/addconditions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_add_smart_group(self, id, smartgroupid, **kwargs):  # noqa: E501
        """Adds SmartGroup to Product.  # noqa: E501

        Adds the smart group with specified {smartgroupid} to the product with specified {id}.  Note: POST /reprocessProduct API must be called explicitly to reprocess products to policy engine queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_add_smart_group(id, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identfier of the Product to which SmartGroup needs to be assigned (Required). (required)
        :param int smartgroupid: Identfier of the Smart Group which needs to be assigned to the Product (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_add_smart_group_with_http_info(id, smartgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_add_smart_group_with_http_info(id, smartgroupid, **kwargs)  # noqa: E501
            return data

    def products_v1_add_smart_group_with_http_info(self, id, smartgroupid, **kwargs):  # noqa: E501
        """Adds SmartGroup to Product.  # noqa: E501

        Adds the smart group with specified {smartgroupid} to the product with specified {id}.  Note: POST /reprocessProduct API must be called explicitly to reprocess products to policy engine queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_add_smart_group_with_http_info(id, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identfier of the Product to which SmartGroup needs to be assigned (Required). (required)
        :param int smartgroupid: Identfier of the Smart Group which needs to be assigned to the Product (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'smartgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_add_smart_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_add_smart_group`")  # noqa: E501
        # verify the required parameter 'smartgroupid' is set
        if self.api_client.client_side_validation and ('smartgroupid' not in params or
                                                       params['smartgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `smartgroupid` when calling `products_v1_add_smart_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'smartgroupid' in params:
            path_params['smartgroupid'] = params['smartgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/addsmartgroup/{smartgroupid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_copy_product(self, id, **kwargs):  # noqa: E501
        """Copies the existing product to create a new product.  # noqa: E501

        Copies the existing product to create a new product with the details passed in input, i.e. name and organizationgroupid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_copy_product(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identfier of the Product from which copy has to be made (Required). (required)
        :param ProductModel product: Product details for the new product to be created, i.e. name and managedbyorganizationgroupid.
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_copy_product_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_copy_product_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_v1_copy_product_with_http_info(self, id, **kwargs):  # noqa: E501
        """Copies the existing product to create a new product.  # noqa: E501

        Copies the existing product to create a new product with the details passed in input, i.e. name and organizationgroupid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_copy_product_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identfier of the Product from which copy has to be made (Required). (required)
        :param ProductModel product: Product details for the new product to be created, i.e. name and managedbyorganizationgroupid.
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_copy_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_copy_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product' in params:
            body_params = params['product']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_create_product(self, product, **kwargs):  # noqa: E501
        """Creates a new Product.  # noqa: E501

        Creates a new Product based on the input details like Name, Organization Group, Platform, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_create_product(product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductModel_ product: Product resource to create (Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_create_product_with_http_info(product, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_create_product_with_http_info(product, **kwargs)  # noqa: E501
            return data

    def products_v1_create_product_with_http_info(self, product, **kwargs):  # noqa: E501
        """Creates a new Product.  # noqa: E501

        Creates a new Product based on the input details like Name, Organization Group, Platform, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_create_product_with_http_info(product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductModel_ product: Product resource to create (Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_create_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `products_v1_create_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product' in params:
            body_params = params['product']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_deactivate(self, id, **kwargs):  # noqa: E501
        """Deactivates the Product.  # noqa: E501

        Deactivates the product based on input Product Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_deactivate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identfier of the product which needs to be deactivated (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_deactivate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_deactivate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_v1_deactivate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deactivates the Product.  # noqa: E501

        Deactivates the product based on input Product Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_deactivate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identfier of the product which needs to be deactivated (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_deactivate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_deactivate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_delete_product_async(self, id, **kwargs):  # noqa: E501
        """New - Deletes the product by the product Id  # noqa: E501

        Deletes the provisioning product by the product Id specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_delete_product_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product Id.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_delete_product_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_delete_product_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_v1_delete_product_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """New - Deletes the product by the product Id  # noqa: E501

        Deletes the provisioning product by the product Id specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_delete_product_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product Id.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_delete_product_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_delete_product_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_device_health_check_search(self, **kwargs):  # noqa: E501
        """Gets the details of the device health.  # noqa: E501

        Gets the details of the device health which satisfies the search parameters specified in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_device_health_check_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroupId to search for.
        :param str organizationgroupname: OrganizationGroup name to search for. Example: US.
        :param str platform: Platform name. Example: Android.
        :param str customattributes: Custom Attribute name. Example: Location.
        :param str orderby: Order results by. Example: DeviceId.
        :param str sortorder: Sorts the result based on this attribute, i.e. ASC for Ascending order 'DESC' for descending order. Example: ASC.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: HealthCheckResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_device_health_check_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_device_health_check_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_v1_device_health_check_search_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the details of the device health.  # noqa: E501

        Gets the details of the device health which satisfies the search parameters specified in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_device_health_check_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroupId to search for.
        :param str organizationgroupname: OrganizationGroup name to search for. Example: US.
        :param str platform: Platform name. Example: Android.
        :param str customattributes: Custom Attribute name. Example: Location.
        :param str orderby: Order results by. Example: DeviceId.
        :param str sortorder: Sorts the result based on this attribute, i.e. ASC for Ascending order 'DESC' for descending order. Example: ASC.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: HealthCheckResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'organizationgroupname', 'platform', 'customattributes', 'orderby', 'sortorder', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_device_health_check_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'organizationgroupname' in params:
            query_params.append(('organizationgroupname', params['organizationgroupname']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'customattributes' in params:
            query_params.append(('customattributes', params['customattributes']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/devicehealthcheck', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HealthCheckResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_get_product_by_product_id(self, id, **kwargs):  # noqa: E501
        """Gets the Product.  # noqa: E501

        Gets the Product based on input product identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_get_product_by_product_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product whose details to be fetched (Required). (required)
        :return: ProductModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_get_product_by_product_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_get_product_by_product_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_v1_get_product_by_product_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the Product.  # noqa: E501

        Gets the Product based on input product identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_get_product_by_product_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product whose details to be fetched (Required). (required)
        :return: ProductModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_get_product_by_product_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_get_product_by_product_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_get_products(self, appid, **kwargs):  # noqa: E501
        """Get the products based on Application ID.  # noqa: E501

        Get the products details based on Application Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_get_products(appid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appid: Product identifier (Required). (required)
        :return: list[Assignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_get_products_with_http_info(appid, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_get_products_with_http_info(appid, **kwargs)  # noqa: E501
            return data

    def products_v1_get_products_with_http_info(self, appid, **kwargs):  # noqa: E501
        """Get the products based on Application ID.  # noqa: E501

        Get the products details based on Application Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_get_products_with_http_info(appid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appid: Product identifier (Required). (required)
        :return: list[Assignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_get_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appid' is set
        if self.api_client.client_side_validation and ('appid' not in params or
                                                       params['appid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `appid` when calling `products_v1_get_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appid' in params:
            path_params['appid'] = params['appid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{appid}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Assignment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_job_status_change_timestamp(self, **kwargs):  # noqa: E501
        """Get the details of job status changes.  # noqa: E501

        Get the details of job status changes along with timestamps for those changes, for a device, a product, or a job  <br />  *modifieddatefrom, modifieddateto* fields accept the following  Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_job_status_change_timestamp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: ID of the Organization Group where Device/Product/Job under question is present..
        :param str deviceid: evice ID of the device for which the job status change timestamp is desired. Example: 1.
        :param str productid: Product ID of the product for which the job status change timestamp is desired. Example: 1.
        :param str jobid: Job ID of the job for which the job status change timestamp is desired. Example: 1.
        :param datetime modifieddatefrom: The start date of the duration for which the job status change timestamp is desired. If none is provided, all the results since enrollment will be shown.
        :param datetime modifieddateto: The end date of the duration for which the job status change timestamp is desired. If none is provided, all the results since enrollment will be shown.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: ProvisioningJobsStatusSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_job_status_change_timestamp_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_job_status_change_timestamp_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_v1_job_status_change_timestamp_with_http_info(self, **kwargs):  # noqa: E501
        """Get the details of job status changes.  # noqa: E501

        Get the details of job status changes along with timestamps for those changes, for a device, a product, or a job  <br />  *modifieddatefrom, modifieddateto* fields accept the following  Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_job_status_change_timestamp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: ID of the Organization Group where Device/Product/Job under question is present..
        :param str deviceid: evice ID of the device for which the job status change timestamp is desired. Example: 1.
        :param str productid: Product ID of the product for which the job status change timestamp is desired. Example: 1.
        :param str jobid: Job ID of the job for which the job status change timestamp is desired. Example: 1.
        :param datetime modifieddatefrom: The start date of the duration for which the job status change timestamp is desired. If none is provided, all the results since enrollment will be shown.
        :param datetime modifieddateto: The end date of the duration for which the job status change timestamp is desired. If none is provided, all the results since enrollment will be shown.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: ProvisioningJobsStatusSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'deviceid', 'productid', 'jobid', 'modifieddatefrom', 'modifieddateto', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_job_status_change_timestamp" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'productid' in params:
            query_params.append(('productid', params['productid']))  # noqa: E501
        if 'jobid' in params:
            query_params.append(('jobid', params['jobid']))  # noqa: E501
        if 'modifieddatefrom' in params:
            query_params.append(('modifieddatefrom', params['modifieddatefrom']))  # noqa: E501
        if 'modifieddateto' in params:
            query_params.append(('modifieddateto', params['modifieddateto']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/jobstatuschangetimestamp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProvisioningJobsStatusSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_maintain_product_async(self, maintain_product_input_model, **kwargs):  # noqa: E501
        """Creates or updates a product.  # noqa: E501

        Creates or updates a product based on input product details like Product Name, Organization Group, Platform, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_maintain_product_async(maintain_product_input_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainProductInputModel maintain_product_input_model: Object representing product (Required). (required)
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_maintain_product_async_with_http_info(maintain_product_input_model, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_maintain_product_async_with_http_info(maintain_product_input_model, **kwargs)  # noqa: E501
            return data

    def products_v1_maintain_product_async_with_http_info(self, maintain_product_input_model, **kwargs):  # noqa: E501
        """Creates or updates a product.  # noqa: E501

        Creates or updates a product based on input product details like Product Name, Organization Group, Platform, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_maintain_product_async_with_http_info(maintain_product_input_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainProductInputModel maintain_product_input_model: Object representing product (Required). (required)
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maintain_product_input_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_maintain_product_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'maintain_product_input_model' is set
        if self.api_client.client_side_validation and ('maintain_product_input_model' not in params or
                                                       params['maintain_product_input_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `maintain_product_input_model` when calling `products_v1_maintain_product_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maintain_product_input_model' in params:
            body_params = params['maintain_product_input_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application /json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/maintainProduct', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_product_compliance_issue_summary(self, **kwargs):  # noqa: E501
        """New - Returns summary of non-compliant devices for products in a OG by product compliance status  # noqa: E501

        v1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_product_compliance_issue_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id which is similar to selected organization group selected in console.
        :param str resourceids: list of resources, meaning device uuids, this isnt mandatory
        :param str parentresourceids: list of proxy parent resources, meaning device uuids, this isnt mandatory
        :param str devicetypes: list of device types to filter.
        :param int compliancestatus: product compliance status id
        :param str customattributes: custom attribute names
        :param str customattributevalues: custom attribute values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_product_compliance_issue_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_product_compliance_issue_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_v1_product_compliance_issue_summary_with_http_info(self, **kwargs):  # noqa: E501
        """New - Returns summary of non-compliant devices for products in a OG by product compliance status  # noqa: E501

        v1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_product_compliance_issue_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id which is similar to selected organization group selected in console.
        :param str resourceids: list of resources, meaning device uuids, this isnt mandatory
        :param str parentresourceids: list of proxy parent resources, meaning device uuids, this isnt mandatory
        :param str devicetypes: list of device types to filter.
        :param int compliancestatus: product compliance status id
        :param str customattributes: custom attribute names
        :param str customattributevalues: custom attribute values
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'resourceids', 'parentresourceids', 'devicetypes', 'compliancestatus', 'customattributes', 'customattributevalues']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_product_compliance_issue_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'resourceids' in params:
            query_params.append(('resourceids', params['resourceids']))  # noqa: E501
        if 'parentresourceids' in params:
            query_params.append(('parentresourceids', params['parentresourceids']))  # noqa: E501
        if 'devicetypes' in params:
            query_params.append(('devicetypes', params['devicetypes']))  # noqa: E501
        if 'compliancestatus' in params:
            query_params.append(('compliancestatus', params['compliancestatus']))  # noqa: E501
        if 'customattributes' in params:
            query_params.append(('customattributes', params['customattributes']))  # noqa: E501
        if 'customattributevalues' in params:
            query_params.append(('customattributevalues', params['customattributevalues']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/compliance/issues/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_product_compliance_issues(self, **kwargs):  # noqa: E501
        """New - Returns list of non-compliant devices for products in a OG  # noqa: E501

        v1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_product_compliance_issues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id which is similar to selected organization group selected in console.
        :param str resourceids: list of resources, meaning device uuids, this isnt mandatory
        :param str parentresourceids: list of proxy parent resources, meaning device uuids, this isnt mandatory
        :param str devicetypes: list of device types to filter.
        :param int compliancestatus: product compliance status id
        :param str customattributse: custom attribute names
        :param str customattributevalues: custom attribute values
        :param int page: Page number
        :param int pagesize: Maximum results which should be returned in each page.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_product_compliance_issues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_product_compliance_issues_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_v1_product_compliance_issues_with_http_info(self, **kwargs):  # noqa: E501
        """New - Returns list of non-compliant devices for products in a OG  # noqa: E501

        v1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_product_compliance_issues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id which is similar to selected organization group selected in console.
        :param str resourceids: list of resources, meaning device uuids, this isnt mandatory
        :param str parentresourceids: list of proxy parent resources, meaning device uuids, this isnt mandatory
        :param str devicetypes: list of device types to filter.
        :param int compliancestatus: product compliance status id
        :param str customattributse: custom attribute names
        :param str customattributevalues: custom attribute values
        :param int page: Page number
        :param int pagesize: Maximum results which should be returned in each page.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'resourceids', 'parentresourceids', 'devicetypes', 'compliancestatus', 'customattributse', 'customattributevalues', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_product_compliance_issues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'resourceids' in params:
            query_params.append(('resourceids', params['resourceids']))  # noqa: E501
        if 'parentresourceids' in params:
            query_params.append(('parentresourceids', params['parentresourceids']))  # noqa: E501
        if 'devicetypes' in params:
            query_params.append(('devicetypes', params['devicetypes']))  # noqa: E501
        if 'compliancestatus' in params:
            query_params.append(('compliancestatus', params['compliancestatus']))  # noqa: E501
        if 'customattributse' in params:
            query_params.append(('customattributse', params['customattributse']))  # noqa: E501
        if 'customattributevalues' in params:
            query_params.append(('customattributevalues', params['customattributevalues']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/compliance/issues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_product_extensive_search_async(self, **kwargs):  # noqa: E501
        """Returns the Products.  # noqa: E501

        Returns the details of Products which satisfies the search parameter  <br />  *modifiedfrom, modifiedtill* fields accept the following  Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_product_extensive_search_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int productid: The Product Identifier.
        :param int organizationgroupid: The Organization Group Identifier.
        :param datetime modifiedfrom: Modified from date time.
        :param datetime modifiedtill: Modified till date time.
        :param int managedbyorganizationgroupid: The managed by Organization Group Identifier.
        :param str name: Product name. Example: OS Upgrade 10.
        :param str platform: Platform name. Example: Android.
        :param str customattributes: Custom Attribute name. Example: Location.
        :param str orderby: Order results by. Example: ProductId.
        :param str sortorder: Sorts the result based on this attribute, i.e. ASC for Ascending order 'DESC' for descending order. Example: ASC.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: ProductExtensiveSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_product_extensive_search_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_product_extensive_search_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_v1_product_extensive_search_async_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the Products.  # noqa: E501

        Returns the details of Products which satisfies the search parameter  <br />  *modifiedfrom, modifiedtill* fields accept the following  Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_product_extensive_search_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int productid: The Product Identifier.
        :param int organizationgroupid: The Organization Group Identifier.
        :param datetime modifiedfrom: Modified from date time.
        :param datetime modifiedtill: Modified till date time.
        :param int managedbyorganizationgroupid: The managed by Organization Group Identifier.
        :param str name: Product name. Example: OS Upgrade 10.
        :param str platform: Platform name. Example: Android.
        :param str customattributes: Custom Attribute name. Example: Location.
        :param str orderby: Order results by. Example: ProductId.
        :param str sortorder: Sorts the result based on this attribute, i.e. ASC for Ascending order 'DESC' for descending order. Example: ASC.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: ProductExtensiveSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['productid', 'organizationgroupid', 'modifiedfrom', 'modifiedtill', 'managedbyorganizationgroupid', 'name', 'platform', 'customattributes', 'orderby', 'sortorder', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_product_extensive_search_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'productid' in params:
            query_params.append(('productid', params['productid']))  # noqa: E501
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'modifiedfrom' in params:
            query_params.append(('modifiedfrom', params['modifiedfrom']))  # noqa: E501
        if 'modifiedtill' in params:
            query_params.append(('modifiedtill', params['modifiedtill']))  # noqa: E501
        if 'managedbyorganizationgroupid' in params:
            query_params.append(('managedbyorganizationgroupid', params['managedbyorganizationgroupid']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'customattributes' in params:
            query_params.append(('customattributes', params['customattributes']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/extensivesearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductExtensiveSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_provisioning_jobs(self, **kwargs):  # noqa: E501
        """Returns jobs and associated products.  # noqa: E501

        Returns jobs and associated products based on input parameters like Device Identifier, Organization Group Identifier, etc  <br />  *modifieddatefrom, modifieddateto* fields accept the following  Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_provisioning_jobs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id which is similar to organization group selected in console.
        :param int deviceid: Device Id.
        :param datetime modifieddatefrom: Modified date from.
        :param datetime modifieddateto: Modified date to.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: ProvisioningJobsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_provisioning_jobs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_provisioning_jobs_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_v1_provisioning_jobs_with_http_info(self, **kwargs):  # noqa: E501
        """Returns jobs and associated products.  # noqa: E501

        Returns jobs and associated products based on input parameters like Device Identifier, Organization Group Identifier, etc  <br />  *modifieddatefrom, modifieddateto* fields accept the following  Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_provisioning_jobs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id which is similar to organization group selected in console.
        :param int deviceid: Device Id.
        :param datetime modifieddatefrom: Modified date from.
        :param datetime modifieddateto: Modified date to.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: ProvisioningJobsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'deviceid', 'modifieddatefrom', 'modifieddateto', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_provisioning_jobs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'modifieddatefrom' in params:
            query_params.append(('modifieddatefrom', params['modifieddatefrom']))  # noqa: E501
        if 'modifieddateto' in params:
            query_params.append(('modifieddateto', params['modifieddateto']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/provisioningjobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProvisioningJobsSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_push_device_and_policy_on_policy_engine(self, deviceid, devicepolicyid, **kwargs):  # noqa: E501
        """Pushes the device and policy onto the policy engine.  # noqa: E501

        Pushes the device and policy onto the policy engine based on the input Device Identifier and Device Policy Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_push_device_and_policy_on_policy_engine(deviceid, devicepolicyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int deviceid: DeviceId to insert. (Required). (required)
        :param int devicepolicyid: PolicyId to insert. (Required). (required)
        :param int fasttrack: Should the device be fast tracked (0 or 1).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_push_device_and_policy_on_policy_engine_with_http_info(deviceid, devicepolicyid, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_push_device_and_policy_on_policy_engine_with_http_info(deviceid, devicepolicyid, **kwargs)  # noqa: E501
            return data

    def products_v1_push_device_and_policy_on_policy_engine_with_http_info(self, deviceid, devicepolicyid, **kwargs):  # noqa: E501
        """Pushes the device and policy onto the policy engine.  # noqa: E501

        Pushes the device and policy onto the policy engine based on the input Device Identifier and Device Policy Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_push_device_and_policy_on_policy_engine_with_http_info(deviceid, devicepolicyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int deviceid: DeviceId to insert. (Required). (required)
        :param int devicepolicyid: PolicyId to insert. (Required). (required)
        :param int fasttrack: Should the device be fast tracked (0 or 1).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deviceid', 'devicepolicyid', 'fasttrack']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_push_device_and_policy_on_policy_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in params or
                                                       params['deviceid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `deviceid` when calling `products_v1_push_device_and_policy_on_policy_engine`")  # noqa: E501
        # verify the required parameter 'devicepolicyid' is set
        if self.api_client.client_side_validation and ('devicepolicyid' not in params or
                                                       params['devicepolicyid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `devicepolicyid` when calling `products_v1_push_device_and_policy_on_policy_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'devicepolicyid' in params:
            query_params.append(('devicepolicyid', params['devicepolicyid']))  # noqa: E501
        if 'fasttrack' in params:
            query_params.append(('fasttrack', params['fasttrack']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/pushdeviceandpolicyonqueue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_push_device_on_policy_engine(self, id, **kwargs):  # noqa: E501
        """Pushes the device onto the product policy engine.  # noqa: E501

        Pushes the device onto the product policy engine for processing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_push_device_on_policy_engine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device Identifier to push (Required). (required)
        :param int fasttrack: Should the device be fast tracked (0 or 1).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_push_device_on_policy_engine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_push_device_on_policy_engine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_v1_push_device_on_policy_engine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Pushes the device onto the product policy engine.  # noqa: E501

        Pushes the device onto the product policy engine for processing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_push_device_on_policy_engine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device Identifier to push (Required). (required)
        :param int fasttrack: Should the device be fast tracked (0 or 1).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fasttrack']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_push_device_on_policy_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_push_device_on_policy_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fasttrack' in params:
            query_params.append(('fasttrack', params['fasttrack']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/pushdeviceonqueue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_remove_smart_group(self, id, smartgroupid, **kwargs):  # noqa: E501
        """Removes SmartGroup from the specified Product.  # noqa: E501

        Removes SmartGroup from the specified Product based on Product Identifier and Smart Group Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_remove_smart_group(id, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product from which SmartGroup needs to be removed (Required). (required)
        :param int smartgroupid: Identifier of the Smart Group which needs to be removed from the Product (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_remove_smart_group_with_http_info(id, smartgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_remove_smart_group_with_http_info(id, smartgroupid, **kwargs)  # noqa: E501
            return data

    def products_v1_remove_smart_group_with_http_info(self, id, smartgroupid, **kwargs):  # noqa: E501
        """Removes SmartGroup from the specified Product.  # noqa: E501

        Removes SmartGroup from the specified Product based on Product Identifier and Smart Group Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_remove_smart_group_with_http_info(id, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product from which SmartGroup needs to be removed (Required). (required)
        :param int smartgroupid: Identifier of the Smart Group which needs to be removed from the Product (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'smartgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_remove_smart_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_remove_smart_group`")  # noqa: E501
        # verify the required parameter 'smartgroupid' is set
        if self.api_client.client_side_validation and ('smartgroupid' not in params or
                                                       params['smartgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `smartgroupid` when calling `products_v1_remove_smart_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'smartgroupid' in params:
            path_params['smartgroupid'] = params['smartgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/removesmartgroup/{smartgroupid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_reprocess_product_async(self, **kwargs):  # noqa: E501
        """Initiates a reprocessing of a product.  # noqa: E501

        Initiates a reprocessing of a product or product and device(s) by the policy engine. Supports a reprocess and a forced reprocess.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_reprocess_product_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReprocessProductInputEntity reprocess_product_input_entity: Object representing reprocessing details.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_reprocess_product_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_reprocess_product_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_v1_reprocess_product_async_with_http_info(self, **kwargs):  # noqa: E501
        """Initiates a reprocessing of a product.  # noqa: E501

        Initiates a reprocessing of a product or product and device(s) by the policy engine. Supports a reprocess and a forced reprocess.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_reprocess_product_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReprocessProductInputEntity reprocess_product_input_entity: Object representing reprocessing details.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reprocess_product_input_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_reprocess_product_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reprocess_product_input_entity' in params:
            body_params = params['reprocess_product_input_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/reprocessProduct', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_search(self, **kwargs):  # noqa: E501
        """Searches for the products with the search parameters passed.  # noqa: E501

        Searches for the products with the search parameters passed like Product Name, Organization Group Identifier, etc  <br />  *modifiedfrom, modifiedtill* fields accept the following  Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Product name. Example: OS Upgrade 10.
        :param int organizationgroupid: Organization group id which is similar to selected organization group selected in console.
        :param int managedbyorganizationgroupid: Managed by organization group id of the product.
        :param str platform: Platform name. Example: Android.
        :param int smartgroupid: Smart Group Identifier.
        :param str orderby: Orders the results by this attribute. Example: Name.
        :param str sortorder: Sorts the result based on this attribute, i.e. ASC for Ascending order 'DESC' for descending order. Example: ASC.
        :param datetime modifiedfrom: DateTime, Filters the result where product modified date is greater or equal to modifiedfrom value.
        :param datetime modifiedtill: DateTime, Filters the result where product modified date is less or equal to modifiedtill value.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: ProductSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_v1_search_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for the products with the search parameters passed.  # noqa: E501

        Searches for the products with the search parameters passed like Product Name, Organization Group Identifier, etc  <br />  *modifiedfrom, modifiedtill* fields accept the following  Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Product name. Example: OS Upgrade 10.
        :param int organizationgroupid: Organization group id which is similar to selected organization group selected in console.
        :param int managedbyorganizationgroupid: Managed by organization group id of the product.
        :param str platform: Platform name. Example: Android.
        :param int smartgroupid: Smart Group Identifier.
        :param str orderby: Orders the results by this attribute. Example: Name.
        :param str sortorder: Sorts the result based on this attribute, i.e. ASC for Ascending order 'DESC' for descending order. Example: ASC.
        :param datetime modifiedfrom: DateTime, Filters the result where product modified date is greater or equal to modifiedfrom value.
        :param datetime modifiedtill: DateTime, Filters the result where product modified date is less or equal to modifiedtill value.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximumm records per page. Default 500.
        :return: ProductSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'organizationgroupid', 'managedbyorganizationgroupid', 'platform', 'smartgroupid', 'orderby', 'sortorder', 'modifiedfrom', 'modifiedtill', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'managedbyorganizationgroupid' in params:
            query_params.append(('managedbyorganizationgroupid', params['managedbyorganizationgroupid']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'smartgroupid' in params:
            query_params.append(('smartgroupid', params['smartgroupid']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'modifiedfrom' in params:
            query_params.append(('modifiedfrom', params['modifiedfrom']))  # noqa: E501
        if 'modifiedtill' in params:
            query_params.append(('modifiedtill', params['modifiedtill']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_set_product_install_time(self, id, install_time, **kwargs):  # noqa: E501
        """Sets the product install time.  # noqa: E501

        Sets the product install time based on input Product Identifier and Install Time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_set_product_install_time(id, install_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product identifer for which the Install time has to be specified (Required). (required)
        :param InstallTime install_time: DateTime in UTC and 24 hour format. The required format is YYYYMMDD HH:MM (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_set_product_install_time_with_http_info(id, install_time, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_set_product_install_time_with_http_info(id, install_time, **kwargs)  # noqa: E501
            return data

    def products_v1_set_product_install_time_with_http_info(self, id, install_time, **kwargs):  # noqa: E501
        """Sets the product install time.  # noqa: E501

        Sets the product install time based on input Product Identifier and Install Time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_set_product_install_time_with_http_info(id, install_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product identifer for which the Install time has to be specified (Required). (required)
        :param InstallTime install_time: DateTime in UTC and 24 hour format. The required format is YYYYMMDD HH:MM (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'install_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_set_product_install_time" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_set_product_install_time`")  # noqa: E501
        # verify the required parameter 'install_time' is set
        if self.api_client.client_side_validation and ('install_time' not in params or
                                                       params['install_time'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `install_time` when calling `products_v1_set_product_install_time`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'install_time' in params:
            body_params = params['install_time']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/setinstalltime', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_v1_update_product(self, id, product, **kwargs):  # noqa: E501
        """Updates the product details.  # noqa: E501

        Updates the product details based on Product Identifier and Product properties like Name, Organization Group Identifier, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_update_product(id, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product identifier (Required). (required)
        :param ProductModel_ product: Details of product to be edited (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_v1_update_product_with_http_info(id, product, **kwargs)  # noqa: E501
        else:
            (data) = self.products_v1_update_product_with_http_info(id, product, **kwargs)  # noqa: E501
            return data

    def products_v1_update_product_with_http_info(self, id, product, **kwargs):  # noqa: E501
        """Updates the product details.  # noqa: E501

        Updates the product details based on Product Identifier and Product properties like Name, Organization Group Identifier, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_v1_update_product_with_http_info(id, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product identifier (Required). (required)
        :param ProductModel_ product: Details of product to be edited (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_v1_update_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `products_v1_update_product`")  # noqa: E501
        # verify the required parameter 'product' is set
        if self.api_client.client_side_validation and ('product' not in params or
                                                       params['product'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product` when calling `products_v1_update_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'product' in params:
            body_params = params['product']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
