# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class DeviceSampleRates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'platform_id': 'str',
        'platform': 'str',
        'heartbeat_interval': 'str',
        'data_sample_interval': 'str',
        'data_transmit_interval': 'str',
        'profile_refresh_interval': 'str',
        'gps_sample_interval': 'str',
        'agent_polling_interval': 'str',
        'beacon_interval': 'str',
        'device_information_sample': 'str',
        'application_list_sample': 'str',
        'certificate_list_sample': 'str',
        'profile_list_sample': 'str',
        'provisioning_profile_list_sample': 'str',
        'restriction_list_sample': 'str',
        'security_information_sample': 'str',
        'managed_app_list_sample': 'str',
        'check_in_interval': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'platform_id': 'PlatformID',
        'platform': 'Platform',
        'heartbeat_interval': 'HeartbeatInterval',
        'data_sample_interval': 'DataSampleInterval',
        'data_transmit_interval': 'DataTransmitInterval',
        'profile_refresh_interval': 'ProfileRefreshInterval',
        'gps_sample_interval': 'GPSSampleInterval',
        'agent_polling_interval': 'AgentPollingInterval',
        'beacon_interval': 'BeaconInterval',
        'device_information_sample': 'DeviceInformationSample',
        'application_list_sample': 'ApplicationListSample',
        'certificate_list_sample': 'CertificateListSample',
        'profile_list_sample': 'ProfileListSample',
        'provisioning_profile_list_sample': 'ProvisioningProfileListSample',
        'restriction_list_sample': 'RestrictionListSample',
        'security_information_sample': 'SecurityInformationSample',
        'managed_app_list_sample': 'ManagedAppListSample',
        'check_in_interval': 'CheckInInterval'
    }

    def __init__(self, id=None, platform_id=None, platform=None, heartbeat_interval=None, data_sample_interval=None, data_transmit_interval=None, profile_refresh_interval=None, gps_sample_interval=None, agent_polling_interval=None, beacon_interval=None, device_information_sample=None, application_list_sample=None, certificate_list_sample=None, profile_list_sample=None, provisioning_profile_list_sample=None, restriction_list_sample=None, security_information_sample=None, managed_app_list_sample=None, check_in_interval=None, _configuration=None):  # noqa: E501
        """DeviceSampleRates - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._platform_id = None
        self._platform = None
        self._heartbeat_interval = None
        self._data_sample_interval = None
        self._data_transmit_interval = None
        self._profile_refresh_interval = None
        self._gps_sample_interval = None
        self._agent_polling_interval = None
        self._beacon_interval = None
        self._device_information_sample = None
        self._application_list_sample = None
        self._certificate_list_sample = None
        self._profile_list_sample = None
        self._provisioning_profile_list_sample = None
        self._restriction_list_sample = None
        self._security_information_sample = None
        self._managed_app_list_sample = None
        self._check_in_interval = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if platform_id is not None:
            self.platform_id = platform_id
        if platform is not None:
            self.platform = platform
        if heartbeat_interval is not None:
            self.heartbeat_interval = heartbeat_interval
        if data_sample_interval is not None:
            self.data_sample_interval = data_sample_interval
        if data_transmit_interval is not None:
            self.data_transmit_interval = data_transmit_interval
        if profile_refresh_interval is not None:
            self.profile_refresh_interval = profile_refresh_interval
        if gps_sample_interval is not None:
            self.gps_sample_interval = gps_sample_interval
        if agent_polling_interval is not None:
            self.agent_polling_interval = agent_polling_interval
        if beacon_interval is not None:
            self.beacon_interval = beacon_interval
        if device_information_sample is not None:
            self.device_information_sample = device_information_sample
        if application_list_sample is not None:
            self.application_list_sample = application_list_sample
        if certificate_list_sample is not None:
            self.certificate_list_sample = certificate_list_sample
        if profile_list_sample is not None:
            self.profile_list_sample = profile_list_sample
        if provisioning_profile_list_sample is not None:
            self.provisioning_profile_list_sample = provisioning_profile_list_sample
        if restriction_list_sample is not None:
            self.restriction_list_sample = restriction_list_sample
        if security_information_sample is not None:
            self.security_information_sample = security_information_sample
        if managed_app_list_sample is not None:
            self.managed_app_list_sample = managed_app_list_sample
        if check_in_interval is not None:
            self.check_in_interval = check_in_interval

    @property
    def id(self):
        """Gets the id of this DeviceSampleRates.  # noqa: E501

        Gets or sets location Group ID.  # noqa: E501

        :return: The id of this DeviceSampleRates.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceSampleRates.

        Gets or sets location Group ID.  # noqa: E501

        :param id: The id of this DeviceSampleRates.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def platform_id(self):
        """Gets the platform_id of this DeviceSampleRates.  # noqa: E501

        Gets or sets platform ID.  # noqa: E501

        :return: The platform_id of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this DeviceSampleRates.

        Gets or sets platform ID.  # noqa: E501

        :param platform_id: The platform_id of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._platform_id = platform_id

    @property
    def platform(self):
        """Gets the platform of this DeviceSampleRates.  # noqa: E501

        Gets or sets platform name.  # noqa: E501

        :return: The platform of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeviceSampleRates.

        Gets or sets platform name.  # noqa: E501

        :param platform: The platform of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def heartbeat_interval(self):
        """Gets the heartbeat_interval of this DeviceSampleRates.  # noqa: E501

        Gets or sets heartbeat interval in minutes.  # noqa: E501

        :return: The heartbeat_interval of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._heartbeat_interval

    @heartbeat_interval.setter
    def heartbeat_interval(self, heartbeat_interval):
        """Sets the heartbeat_interval of this DeviceSampleRates.

        Gets or sets heartbeat interval in minutes.  # noqa: E501

        :param heartbeat_interval: The heartbeat_interval of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._heartbeat_interval = heartbeat_interval

    @property
    def data_sample_interval(self):
        """Gets the data_sample_interval of this DeviceSampleRates.  # noqa: E501

        Gets or sets dataSample interval in minutes.  # noqa: E501

        :return: The data_sample_interval of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._data_sample_interval

    @data_sample_interval.setter
    def data_sample_interval(self, data_sample_interval):
        """Sets the data_sample_interval of this DeviceSampleRates.

        Gets or sets dataSample interval in minutes.  # noqa: E501

        :param data_sample_interval: The data_sample_interval of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._data_sample_interval = data_sample_interval

    @property
    def data_transmit_interval(self):
        """Gets the data_transmit_interval of this DeviceSampleRates.  # noqa: E501

        Gets or sets dataTransmit interval in minutes.  # noqa: E501

        :return: The data_transmit_interval of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._data_transmit_interval

    @data_transmit_interval.setter
    def data_transmit_interval(self, data_transmit_interval):
        """Sets the data_transmit_interval of this DeviceSampleRates.

        Gets or sets dataTransmit interval in minutes.  # noqa: E501

        :param data_transmit_interval: The data_transmit_interval of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._data_transmit_interval = data_transmit_interval

    @property
    def profile_refresh_interval(self):
        """Gets the profile_refresh_interval of this DeviceSampleRates.  # noqa: E501

        Gets or sets profileRefresh interval in minutes.  # noqa: E501

        :return: The profile_refresh_interval of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._profile_refresh_interval

    @profile_refresh_interval.setter
    def profile_refresh_interval(self, profile_refresh_interval):
        """Sets the profile_refresh_interval of this DeviceSampleRates.

        Gets or sets profileRefresh interval in minutes.  # noqa: E501

        :param profile_refresh_interval: The profile_refresh_interval of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._profile_refresh_interval = profile_refresh_interval

    @property
    def gps_sample_interval(self):
        """Gets the gps_sample_interval of this DeviceSampleRates.  # noqa: E501

        Gets or sets gPS Sample interval in minutes.  # noqa: E501

        :return: The gps_sample_interval of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._gps_sample_interval

    @gps_sample_interval.setter
    def gps_sample_interval(self, gps_sample_interval):
        """Sets the gps_sample_interval of this DeviceSampleRates.

        Gets or sets gPS Sample interval in minutes.  # noqa: E501

        :param gps_sample_interval: The gps_sample_interval of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._gps_sample_interval = gps_sample_interval

    @property
    def agent_polling_interval(self):
        """Gets the agent_polling_interval of this DeviceSampleRates.  # noqa: E501

        Gets or sets agent Polling interval in minutes.  # noqa: E501

        :return: The agent_polling_interval of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._agent_polling_interval

    @agent_polling_interval.setter
    def agent_polling_interval(self, agent_polling_interval):
        """Sets the agent_polling_interval of this DeviceSampleRates.

        Gets or sets agent Polling interval in minutes.  # noqa: E501

        :param agent_polling_interval: The agent_polling_interval of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._agent_polling_interval = agent_polling_interval

    @property
    def beacon_interval(self):
        """Gets the beacon_interval of this DeviceSampleRates.  # noqa: E501

        Gets or sets beacon interval in minutes.  # noqa: E501

        :return: The beacon_interval of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._beacon_interval

    @beacon_interval.setter
    def beacon_interval(self, beacon_interval):
        """Sets the beacon_interval of this DeviceSampleRates.

        Gets or sets beacon interval in minutes.  # noqa: E501

        :param beacon_interval: The beacon_interval of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._beacon_interval = beacon_interval

    @property
    def device_information_sample(self):
        """Gets the device_information_sample of this DeviceSampleRates.  # noqa: E501

        Gets or sets device information sample interval in minutes.  # noqa: E501

        :return: The device_information_sample of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._device_information_sample

    @device_information_sample.setter
    def device_information_sample(self, device_information_sample):
        """Sets the device_information_sample of this DeviceSampleRates.

        Gets or sets device information sample interval in minutes.  # noqa: E501

        :param device_information_sample: The device_information_sample of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._device_information_sample = device_information_sample

    @property
    def application_list_sample(self):
        """Gets the application_list_sample of this DeviceSampleRates.  # noqa: E501

        Gets or sets application list sample interval in minutes.  # noqa: E501

        :return: The application_list_sample of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._application_list_sample

    @application_list_sample.setter
    def application_list_sample(self, application_list_sample):
        """Sets the application_list_sample of this DeviceSampleRates.

        Gets or sets application list sample interval in minutes.  # noqa: E501

        :param application_list_sample: The application_list_sample of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._application_list_sample = application_list_sample

    @property
    def certificate_list_sample(self):
        """Gets the certificate_list_sample of this DeviceSampleRates.  # noqa: E501

        Gets or sets certificate list sample interval in minutes.  # noqa: E501

        :return: The certificate_list_sample of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._certificate_list_sample

    @certificate_list_sample.setter
    def certificate_list_sample(self, certificate_list_sample):
        """Sets the certificate_list_sample of this DeviceSampleRates.

        Gets or sets certificate list sample interval in minutes.  # noqa: E501

        :param certificate_list_sample: The certificate_list_sample of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._certificate_list_sample = certificate_list_sample

    @property
    def profile_list_sample(self):
        """Gets the profile_list_sample of this DeviceSampleRates.  # noqa: E501

        Gets or sets profile list sample interval in minutes.  # noqa: E501

        :return: The profile_list_sample of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._profile_list_sample

    @profile_list_sample.setter
    def profile_list_sample(self, profile_list_sample):
        """Sets the profile_list_sample of this DeviceSampleRates.

        Gets or sets profile list sample interval in minutes.  # noqa: E501

        :param profile_list_sample: The profile_list_sample of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._profile_list_sample = profile_list_sample

    @property
    def provisioning_profile_list_sample(self):
        """Gets the provisioning_profile_list_sample of this DeviceSampleRates.  # noqa: E501

        Gets or sets provisioning profile list sample interval in minutes.  # noqa: E501

        :return: The provisioning_profile_list_sample of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._provisioning_profile_list_sample

    @provisioning_profile_list_sample.setter
    def provisioning_profile_list_sample(self, provisioning_profile_list_sample):
        """Sets the provisioning_profile_list_sample of this DeviceSampleRates.

        Gets or sets provisioning profile list sample interval in minutes.  # noqa: E501

        :param provisioning_profile_list_sample: The provisioning_profile_list_sample of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._provisioning_profile_list_sample = provisioning_profile_list_sample

    @property
    def restriction_list_sample(self):
        """Gets the restriction_list_sample of this DeviceSampleRates.  # noqa: E501

        Gets or sets restriction list sample interval in minutes.  # noqa: E501

        :return: The restriction_list_sample of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._restriction_list_sample

    @restriction_list_sample.setter
    def restriction_list_sample(self, restriction_list_sample):
        """Sets the restriction_list_sample of this DeviceSampleRates.

        Gets or sets restriction list sample interval in minutes.  # noqa: E501

        :param restriction_list_sample: The restriction_list_sample of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._restriction_list_sample = restriction_list_sample

    @property
    def security_information_sample(self):
        """Gets the security_information_sample of this DeviceSampleRates.  # noqa: E501

        Gets or sets security information sample interval in minutes.  # noqa: E501

        :return: The security_information_sample of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._security_information_sample

    @security_information_sample.setter
    def security_information_sample(self, security_information_sample):
        """Sets the security_information_sample of this DeviceSampleRates.

        Gets or sets security information sample interval in minutes.  # noqa: E501

        :param security_information_sample: The security_information_sample of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._security_information_sample = security_information_sample

    @property
    def managed_app_list_sample(self):
        """Gets the managed_app_list_sample of this DeviceSampleRates.  # noqa: E501

        Gets or sets managedApp list sample interval in minutes.  # noqa: E501

        :return: The managed_app_list_sample of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._managed_app_list_sample

    @managed_app_list_sample.setter
    def managed_app_list_sample(self, managed_app_list_sample):
        """Sets the managed_app_list_sample of this DeviceSampleRates.

        Gets or sets managedApp list sample interval in minutes.  # noqa: E501

        :param managed_app_list_sample: The managed_app_list_sample of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._managed_app_list_sample = managed_app_list_sample

    @property
    def check_in_interval(self):
        """Gets the check_in_interval of this DeviceSampleRates.  # noqa: E501

        Gets or sets check In Interval in minutes.  # noqa: E501

        :return: The check_in_interval of this DeviceSampleRates.  # noqa: E501
        :rtype: str
        """
        return self._check_in_interval

    @check_in_interval.setter
    def check_in_interval(self, check_in_interval):
        """Sets the check_in_interval of this DeviceSampleRates.

        Gets or sets check In Interval in minutes.  # noqa: E501

        :param check_in_interval: The check_in_interval of this DeviceSampleRates.  # noqa: E501
        :type: str
        """

        self._check_in_interval = check_in_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceSampleRates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSampleRates):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceSampleRates):
            return True

        return self.to_dict() != other.to_dict()
