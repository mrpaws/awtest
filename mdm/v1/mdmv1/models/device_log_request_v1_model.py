# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceLogRequestV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_log_source': 'int',
        'device_log_level': 'int',
        'device_log_duration': 'int',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'device_log_source': 'DeviceLogSource',
        'device_log_level': 'DeviceLogLevel',
        'device_log_duration': 'DeviceLogDuration',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, device_log_source=None, device_log_level=None, device_log_duration=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceLogRequestV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_log_source = None
        self._device_log_level = None
        self._device_log_duration = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if device_log_source is not None:
            self.device_log_source = device_log_source
        if device_log_level is not None:
            self.device_log_level = device_log_level
        if device_log_duration is not None:
            self.device_log_duration = device_log_duration
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def device_log_source(self):
        """Gets the device_log_source of this DeviceLogRequestV1Model.  # noqa: E501

        Represents the source of the device logs. Possible values = [Agent, System, Network]  # noqa: E501

        :return: The device_log_source of this DeviceLogRequestV1Model.  # noqa: E501
        :rtype: int
        """
        return self._device_log_source

    @device_log_source.setter
    def device_log_source(self, device_log_source):
        """Sets the device_log_source of this DeviceLogRequestV1Model.

        Represents the source of the device logs. Possible values = [Agent, System, Network]  # noqa: E501

        :param device_log_source: The device_log_source of this DeviceLogRequestV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_log_source not in allowed_values):
            raise ValueError(
                "Invalid value for `device_log_source` ({0}), must be one of {1}"  # noqa: E501
                .format(device_log_source, allowed_values)
            )

        self._device_log_source = device_log_source

    @property
    def device_log_level(self):
        """Gets the device_log_level of this DeviceLogRequestV1Model.  # noqa: E501

        Level of the logs requested from the device. Possible values = [Error, Warning, Information, Debug, Verbose]. Not applicable for \"Network\" log source.  # noqa: E501

        :return: The device_log_level of this DeviceLogRequestV1Model.  # noqa: E501
        :rtype: int
        """
        return self._device_log_level

    @device_log_level.setter
    def device_log_level(self, device_log_level):
        """Sets the device_log_level of this DeviceLogRequestV1Model.

        Level of the logs requested from the device. Possible values = [Error, Warning, Information, Debug, Verbose]. Not applicable for \"Network\" log source.  # noqa: E501

        :param device_log_level: The device_log_level of this DeviceLogRequestV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_log_level not in allowed_values):
            raise ValueError(
                "Invalid value for `device_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(device_log_level, allowed_values)
            )

        self._device_log_level = device_log_level

    @property
    def device_log_duration(self):
        """Gets the device_log_duration of this DeviceLogRequestV1Model.  # noqa: E501

        Duration of the logs in minutes. Only positive integer values allowed with upper limit of 720.  # noqa: E501

        :return: The device_log_duration of this DeviceLogRequestV1Model.  # noqa: E501
        :rtype: int
        """
        return self._device_log_duration

    @device_log_duration.setter
    def device_log_duration(self, device_log_duration):
        """Sets the device_log_duration of this DeviceLogRequestV1Model.

        Duration of the logs in minutes. Only positive integer values allowed with upper limit of 720.  # noqa: E501

        :param device_log_duration: The device_log_duration of this DeviceLogRequestV1Model.  # noqa: E501
        :type: int
        """

        self._device_log_duration = device_log_duration

    @property
    def id(self):
        """Gets the id of this DeviceLogRequestV1Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this DeviceLogRequestV1Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceLogRequestV1Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this DeviceLogRequestV1Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceLogRequestV1Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this DeviceLogRequestV1Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceLogRequestV1Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this DeviceLogRequestV1Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceLogRequestV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceLogRequestV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceLogRequestV1Model):
            return True

        return self.to_dict() != other.to_dict()
