# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class StagingGeneralDetailsModel_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'staging_id': 'int',
        'name': 'str',
        'description': 'str',
        'managed_by': 'str',
        'enrollment_user': 'str',
        'password': 'str',
        'agent_id': 'int'
    }

    attribute_map = {
        'staging_id': 'StagingId',
        'name': 'Name',
        'description': 'Description',
        'managed_by': 'ManagedBy',
        'enrollment_user': 'EnrollmentUser',
        'password': 'Password',
        'agent_id': 'AgentID'
    }

    def __init__(self, staging_id=None, name=None, description=None, managed_by=None, enrollment_user=None, password=None, agent_id=None, _configuration=None):  # noqa: E501
        """StagingGeneralDetailsModel_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._staging_id = None
        self._name = None
        self._description = None
        self._managed_by = None
        self._enrollment_user = None
        self._password = None
        self._agent_id = None
        self.discriminator = None

        if staging_id is not None:
            self.staging_id = staging_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if managed_by is not None:
            self.managed_by = managed_by
        if enrollment_user is not None:
            self.enrollment_user = enrollment_user
        if password is not None:
            self.password = password
        if agent_id is not None:
            self.agent_id = agent_id

    @property
    def staging_id(self):
        """Gets the staging_id of this StagingGeneralDetailsModel_.  # noqa: E501

        Gets or sets the identifier of the staging bundle.  # noqa: E501

        :return: The staging_id of this StagingGeneralDetailsModel_.  # noqa: E501
        :rtype: int
        """
        return self._staging_id

    @staging_id.setter
    def staging_id(self, staging_id):
        """Sets the staging_id of this StagingGeneralDetailsModel_.

        Gets or sets the identifier of the staging bundle.  # noqa: E501

        :param staging_id: The staging_id of this StagingGeneralDetailsModel_.  # noqa: E501
        :type: int
        """

        self._staging_id = staging_id

    @property
    def name(self):
        """Gets the name of this StagingGeneralDetailsModel_.  # noqa: E501

        Gets or sets the name of the staging bundle.  # noqa: E501

        :return: The name of this StagingGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StagingGeneralDetailsModel_.

        Gets or sets the name of the staging bundle.  # noqa: E501

        :param name: The name of this StagingGeneralDetailsModel_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'^[^?|*:]+$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^?|*:]+$/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this StagingGeneralDetailsModel_.  # noqa: E501

        Gets or sets the description for the staging bundle.  # noqa: E501

        :return: The description of this StagingGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StagingGeneralDetailsModel_.

        Gets or sets the description for the staging bundle.  # noqa: E501

        :param description: The description of this StagingGeneralDetailsModel_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 255):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def managed_by(self):
        """Gets the managed_by of this StagingGeneralDetailsModel_.  # noqa: E501

        Gets or sets the organization group identifier under which staging bundle is managed.  # noqa: E501

        :return: The managed_by of this StagingGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this StagingGeneralDetailsModel_.

        Gets or sets the organization group identifier under which staging bundle is managed.  # noqa: E501

        :param managed_by: The managed_by of this StagingGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._managed_by = managed_by

    @property
    def enrollment_user(self):
        """Gets the enrollment_user of this StagingGeneralDetailsModel_.  # noqa: E501

        Gets or sets name of enrollment user for authenticity.  # noqa: E501

        :return: The enrollment_user of this StagingGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_user

    @enrollment_user.setter
    def enrollment_user(self, enrollment_user):
        """Sets the enrollment_user of this StagingGeneralDetailsModel_.

        Gets or sets name of enrollment user for authenticity.  # noqa: E501

        :param enrollment_user: The enrollment_user of this StagingGeneralDetailsModel_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                enrollment_user is not None and len(enrollment_user) > 256):
            raise ValueError("Invalid value for `enrollment_user`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                enrollment_user is not None and len(enrollment_user) < 0):
            raise ValueError("Invalid value for `enrollment_user`, length must be greater than or equal to `0`")  # noqa: E501

        self._enrollment_user = enrollment_user

    @property
    def password(self):
        """Gets the password of this StagingGeneralDetailsModel_.  # noqa: E501

        Gets or sets the password of enrollment user.  # noqa: E501

        :return: The password of this StagingGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this StagingGeneralDetailsModel_.

        Gets or sets the password of enrollment user.  # noqa: E501

        :param password: The password of this StagingGeneralDetailsModel_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                password is not None and len(password) > 128):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 0):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `0`")  # noqa: E501

        self._password = password

    @property
    def agent_id(self):
        """Gets the agent_id of this StagingGeneralDetailsModel_.  # noqa: E501

        Gets or sets the agent package identifier which specifies which agent will be deployed on the device.  # noqa: E501

        :return: The agent_id of this StagingGeneralDetailsModel_.  # noqa: E501
        :rtype: int
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this StagingGeneralDetailsModel_.

        Gets or sets the agent package identifier which specifies which agent will be deployed on the device.  # noqa: E501

        :param agent_id: The agent_id of this StagingGeneralDetailsModel_.  # noqa: E501
        :type: int
        """

        self._agent_id = agent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StagingGeneralDetailsModel_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StagingGeneralDetailsModel_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StagingGeneralDetailsModel_):
            return True

        return self.to_dict() != other.to_dict()
