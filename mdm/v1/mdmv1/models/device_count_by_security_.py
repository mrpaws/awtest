# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceCountBySecurity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compromised': 'int',
        'no_passcode': 'int',
        'not_encrypted': 'int'
    }

    attribute_map = {
        'compromised': 'Compromised',
        'no_passcode': 'NoPasscode',
        'not_encrypted': 'NotEncrypted'
    }

    def __init__(self, compromised=None, no_passcode=None, not_encrypted=None, _configuration=None):  # noqa: E501
        """DeviceCountBySecurity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._compromised = None
        self._no_passcode = None
        self._not_encrypted = None
        self.discriminator = None

        if compromised is not None:
            self.compromised = compromised
        if no_passcode is not None:
            self.no_passcode = no_passcode
        if not_encrypted is not None:
            self.not_encrypted = not_encrypted

    @property
    def compromised(self):
        """Gets the compromised of this DeviceCountBySecurity_.  # noqa: E501

        Gets or sets no. of Compromised Devices.  # noqa: E501

        :return: The compromised of this DeviceCountBySecurity_.  # noqa: E501
        :rtype: int
        """
        return self._compromised

    @compromised.setter
    def compromised(self, compromised):
        """Sets the compromised of this DeviceCountBySecurity_.

        Gets or sets no. of Compromised Devices.  # noqa: E501

        :param compromised: The compromised of this DeviceCountBySecurity_.  # noqa: E501
        :type: int
        """

        self._compromised = compromised

    @property
    def no_passcode(self):
        """Gets the no_passcode of this DeviceCountBySecurity_.  # noqa: E501

        Gets or sets no. of Devices which has no passcode.  # noqa: E501

        :return: The no_passcode of this DeviceCountBySecurity_.  # noqa: E501
        :rtype: int
        """
        return self._no_passcode

    @no_passcode.setter
    def no_passcode(self, no_passcode):
        """Sets the no_passcode of this DeviceCountBySecurity_.

        Gets or sets no. of Devices which has no passcode.  # noqa: E501

        :param no_passcode: The no_passcode of this DeviceCountBySecurity_.  # noqa: E501
        :type: int
        """

        self._no_passcode = no_passcode

    @property
    def not_encrypted(self):
        """Gets the not_encrypted of this DeviceCountBySecurity_.  # noqa: E501

        Gets or sets no. of Devices which are not encrypted.  # noqa: E501

        :return: The not_encrypted of this DeviceCountBySecurity_.  # noqa: E501
        :rtype: int
        """
        return self._not_encrypted

    @not_encrypted.setter
    def not_encrypted(self, not_encrypted):
        """Sets the not_encrypted of this DeviceCountBySecurity_.

        Gets or sets no. of Devices which are not encrypted.  # noqa: E501

        :param not_encrypted: The not_encrypted of this DeviceCountBySecurity_.  # noqa: E501
        :type: int
        """

        self._not_encrypted = not_encrypted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCountBySecurity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCountBySecurity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCountBySecurity_):
            return True

        return self.to_dict() != other.to_dict()
