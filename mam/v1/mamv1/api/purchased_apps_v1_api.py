# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv1.api_client import ApiClient


class PurchasedAppsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def purchased_apps_v1_bulk_send_vpp_invites_async(self, applicationid, **kwargs):  # noqa: E501
        """Sends vpp invitation to the users.  # noqa: E501

        For user based purchased app, user needs to accept the invitation and log into app store to install app. This api will send invitations to the users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_bulk_send_vpp_invites_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Application Identifier. (required)
        :param BulkInput bulk_input: Bulk input containing device IDs.
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_bulk_send_vpp_invites_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_bulk_send_vpp_invites_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_bulk_send_vpp_invites_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Sends vpp invitation to the users.  # noqa: E501

        For user based purchased app, user needs to accept the invitation and log into app store to install app. This api will send invitations to the users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_bulk_send_vpp_invites_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Application Identifier. (required)
        :param BulkInput bulk_input: Bulk input containing device IDs.
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_bulk_send_vpp_invites_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_bulk_send_vpp_invites_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}/vppinvite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_create_purchased_app_assignment_async(self, applicationid, **kwargs):  # noqa: E501
        """Create new assignments of a VPP licensed application.  # noqa: E501

        Create new assignments of a purchased application with licenses to smart groups, application only with redemption codes  cannot be assigned through this api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_create_purchased_app_assignment_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Identifier. (required)
        :param PurchasedApplicationModel_ application: Application assignment details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_create_purchased_app_assignment_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_create_purchased_app_assignment_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_create_purchased_app_assignment_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Create new assignments of a VPP licensed application.  # noqa: E501

        Create new assignments of a purchased application with licenses to smart groups, application only with redemption codes  cannot be assigned through this api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_create_purchased_app_assignment_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Identifier. (required)
        :param PurchasedApplicationModel_ application: Application assignment details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_create_purchased_app_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_create_purchased_app_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}/assignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_delete_vpp_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Deletes the specified purchased app.  # noqa: E501

        Deletes the specified purchased app and revoke the licenses claimed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_delete_vpp_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_delete_vpp_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_delete_vpp_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_delete_vpp_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Deletes the specified purchased app.  # noqa: E501

        Deletes the specified purchased app and revoke the licenses claimed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_delete_vpp_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_delete_vpp_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_delete_vpp_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_enable_device_assignment_bulk_applications_async(self, organization_group_uuid, action, **kwargs):  # noqa: E501
        """Convert Purchased applications from user based licensing to device based licensing in bulk.  # noqa: E501

        Converts VPP applications from user based licensing to device based in an organization group (including child OGs) based on action type and an optional application list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_enable_device_assignment_bulk_applications_async(organization_group_uuid, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Organization Group UUID in which to enable device based VPP for applications.(Required) (required)
        :param object action: Action to either include or exclude the app UUIDs specified in the request body. Example - Include action with a list of UUIDs passed in the request will enable DBL for those apps. Exclude action with a list of app UUIDs will enable DBl for all apps in the OG except the ones specified in the list. Exclude action without any app list in the request will enable DBL for all apps in the OG.(Required) (required)
        :param EnableDeviceAssignmentBulkApplicationsModel enable_device_assignment_bulk_applications_model: Application UUIDs to enable device based licensing OR Application UUIDs to exclude from search criteria.
        :param object platform: Platform for apps.
        :param str searchtext: Search criteria for application names.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_enable_device_assignment_bulk_applications_async_with_http_info(organization_group_uuid, action, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_enable_device_assignment_bulk_applications_async_with_http_info(organization_group_uuid, action, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_enable_device_assignment_bulk_applications_async_with_http_info(self, organization_group_uuid, action, **kwargs):  # noqa: E501
        """Convert Purchased applications from user based licensing to device based licensing in bulk.  # noqa: E501

        Converts VPP applications from user based licensing to device based in an organization group (including child OGs) based on action type and an optional application list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_enable_device_assignment_bulk_applications_async_with_http_info(organization_group_uuid, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Organization Group UUID in which to enable device based VPP for applications.(Required) (required)
        :param object action: Action to either include or exclude the app UUIDs specified in the request body. Example - Include action with a list of UUIDs passed in the request will enable DBL for those apps. Exclude action with a list of app UUIDs will enable DBl for all apps in the OG except the ones specified in the list. Exclude action without any app list in the request will enable DBL for all apps in the OG.(Required) (required)
        :param EnableDeviceAssignmentBulkApplicationsModel enable_device_assignment_bulk_applications_model: Application UUIDs to enable device based licensing OR Application UUIDs to exclude from search criteria.
        :param object platform: Platform for apps.
        :param str searchtext: Search criteria for application names.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'action', 'enable_device_assignment_bulk_applications_model', 'platform', 'searchtext']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_enable_device_assignment_bulk_applications_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `purchased_apps_v1_enable_device_assignment_bulk_applications_async`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in params or
                                                       params['action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action` when calling `purchased_apps_v1_enable_device_assignment_bulk_applications_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'searchtext' in params:
            query_params.append(('searchtext', params['searchtext']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enable_device_assignment_bulk_applications_model' in params:
            body_params = params['enable_device_assignment_bulk_applications_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/device-assignment/organizationgroups/{organizationGroupUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_enable_device_assignment_for_vpp_app(self, app_id, **kwargs):  # noqa: E501
        """Enables device-based assignment for the passed app.  # noqa: E501

        Device-based VPP assignment allows you to distribute apps directly to a device without requiring an Apple ID. This will enable device-based assignment for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_enable_device_assignment_for_vpp_app(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_id: Application id for which device based assignment needs to be enabled (Required). (required)
        :return: StatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_enable_device_assignment_for_vpp_app_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_enable_device_assignment_for_vpp_app_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_enable_device_assignment_for_vpp_app_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """Enables device-based assignment for the passed app.  # noqa: E501

        Device-based VPP assignment allows you to distribute apps directly to a device without requiring an Apple ID. This will enable device-based assignment for the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_enable_device_assignment_for_vpp_app_with_http_info(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_id: Application id for which device based assignment needs to be enabled (Required). (required)
        :return: StatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_enable_device_assignment_for_vpp_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if self.api_client.client_side_validation and ('app_id' not in params or
                                                       params['app_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_id` when calling `purchased_apps_v1_enable_device_assignment_for_vpp_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/EnableDeviceAssignmentForVppApp/{appId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_get_purchased_app_installed_or_assigned_devices(self, applicationid, status, **kwargs):  # noqa: E501
        """Provides a list of devices that have the specified purchased application installed or assigned.  # noqa: E501

        Gets list of devices matching on the input query parameters values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_get_purchased_app_installed_or_assigned_devices(applicationid, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application ID. (required)
        :param str status: status - installed/assigned (Required). (required)
        :param str locationgroupid: The LocationGroup Identifier, for example - 777.
        :param str page: Specific page number to get. 0 based index.
        :param str pagesize: Maximumm records per page. Default 500.
        :return: DeviceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_get_purchased_app_installed_or_assigned_devices_with_http_info(applicationid, status, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_get_purchased_app_installed_or_assigned_devices_with_http_info(applicationid, status, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_get_purchased_app_installed_or_assigned_devices_with_http_info(self, applicationid, status, **kwargs):  # noqa: E501
        """Provides a list of devices that have the specified purchased application installed or assigned.  # noqa: E501

        Gets list of devices matching on the input query parameters values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_get_purchased_app_installed_or_assigned_devices_with_http_info(applicationid, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application ID. (required)
        :param str status: status - installed/assigned (Required). (required)
        :param str locationgroupid: The LocationGroup Identifier, for example - 777.
        :param str page: Specific page number to get. 0 based index.
        :param str pagesize: Maximumm records per page. Default 500.
        :return: DeviceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'status', 'locationgroupid', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_get_purchased_app_installed_or_assigned_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_get_purchased_app_installed_or_assigned_devices`")  # noqa: E501
        # verify the required parameter 'status' is set
        if self.api_client.client_side_validation and ('status' not in params or
                                                       params['status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `status` when calling `purchased_apps_v1_get_purchased_app_installed_or_assigned_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'locationgroupid' in params:
            query_params.append(('locationgroupid', params['locationgroupid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_get_purchased_app_status_async(self, applicationid, **kwargs):  # noqa: E501
        """Indicates the status of the specified purchased application on a device.  # noqa: E501

        Gets the status if the app is installed/Removed/Pending Install.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_get_purchased_app_status_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :param str deviceid: Device Identifier, for example - 0dfe4a6f25647b8297c15b6a995fa985.
        :param str macaddress: Device MAC address, for example - 0x848506B900BA.
        :param str serialnumber: Device SerialNumber, for example - LGH871c18f631a.
        :param str udid: Device UDID, for example - 6bf0f04c73681fbecfc3eb4f13cbf05b.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_get_purchased_app_status_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_get_purchased_app_status_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_get_purchased_app_status_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Indicates the status of the specified purchased application on a device.  # noqa: E501

        Gets the status if the app is installed/Removed/Pending Install.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_get_purchased_app_status_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id. (required)
        :param str deviceid: Device Identifier, for example - 0dfe4a6f25647b8297c15b6a995fa985.
        :param str macaddress: Device MAC address, for example - 0x848506B900BA.
        :param str serialnumber: Device SerialNumber, for example - LGH871c18f631a.
        :param str udid: Device UDID, for example - 6bf0f04c73681fbecfc3eb4f13cbf05b.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'deviceid', 'macaddress', 'serialnumber', 'udid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_get_purchased_app_status_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_get_purchased_app_status_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'macaddress' in params:
            query_params.append(('macaddress', params['macaddress']))  # noqa: E501
        if 'serialnumber' in params:
            query_params.append(('serialnumber', params['serialnumber']))  # noqa: E501
        if 'udid' in params:
            query_params.append(('udid', params['udid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_get_user_vpp_invite_status(self, applicationid, deviceid, **kwargs):  # noqa: E501
        """Gets user's vpp invitation status.  # noqa: E501

        For user based purchased app, user needs to accept the invitation and log into app store to install app. This api will get the user's invitation status for the vpp account containing the application id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_get_user_vpp_invite_status(applicationid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Vpp Application Identifier. (required)
        :param int deviceid: Device Identifier. (required)
        :return: UserVppInviteStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_get_user_vpp_invite_status_with_http_info(applicationid, deviceid, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_get_user_vpp_invite_status_with_http_info(applicationid, deviceid, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_get_user_vpp_invite_status_with_http_info(self, applicationid, deviceid, **kwargs):  # noqa: E501
        """Gets user's vpp invitation status.  # noqa: E501

        For user based purchased app, user needs to accept the invitation and log into app store to install app. This api will get the user's invitation status for the vpp account containing the application id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_get_user_vpp_invite_status_with_http_info(applicationid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Vpp Application Identifier. (required)
        :param int deviceid: Device Identifier. (required)
        :return: UserVppInviteStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'deviceid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_get_user_vpp_invite_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_get_user_vpp_invite_status`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in params or
                                                       params['deviceid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `deviceid` when calling `purchased_apps_v1_get_user_vpp_invite_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501
        if 'deviceid' in params:
            path_params['deviceid'] = params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}/vppinvitestatus/{deviceid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserVppInviteStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_get_vpp_sync_assets_status(self, location_group_id, **kwargs):  # noqa: E501
        """Get the status and details for the VPP Sync Assets job at the given organization group.  # noqa: E501

        Vpp sync assets job will take time to sync applications on the apple server to the airwatch console. This will get the current status of the job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_get_vpp_sync_assets_status(location_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int location_group_id: Location group id also known as the organization group identifier (Required). (required)
        :return: GetVppSyncAssetStatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_get_vpp_sync_assets_status_with_http_info(location_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_get_vpp_sync_assets_status_with_http_info(location_group_id, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_get_vpp_sync_assets_status_with_http_info(self, location_group_id, **kwargs):  # noqa: E501
        """Get the status and details for the VPP Sync Assets job at the given organization group.  # noqa: E501

        Vpp sync assets job will take time to sync applications on the apple server to the airwatch console. This will get the current status of the job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_get_vpp_sync_assets_status_with_http_info(location_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int location_group_id: Location group id also known as the organization group identifier (Required). (required)
        :return: GetVppSyncAssetStatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_get_vpp_sync_assets_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location_group_id' is set
        if self.api_client.client_side_validation and ('location_group_id' not in params or
                                                       params['location_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `location_group_id` when calling `purchased_apps_v1_get_vpp_sync_assets_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location_group_id' in params:
            path_params['locationGroupId'] = params['location_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/GetVppSyncAssetsStatus/{locationGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVppSyncAssetStatusModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_install_vpp_app_for_device_async(self, applicationid, **kwargs):  # noqa: E501
        """Install the purchased application on the device.  # noqa: E501

        Install the specified purchased application on the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_install_vpp_app_for_device_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applicationid: Id of the Application to be installed, for example - 123. (required)
        :param DeviceInfo device_info: Details of the device on which the Application to be installed.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_install_vpp_app_for_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_install_vpp_app_for_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_install_vpp_app_for_device_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Install the purchased application on the device.  # noqa: E501

        Install the specified purchased application on the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_install_vpp_app_for_device_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applicationid: Id of the Application to be installed, for example - 123. (required)
        :param DeviceInfo device_info: Details of the device on which the Application to be installed.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'device_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_install_vpp_app_for_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_install_vpp_app_for_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_info' in params:
            body_params = params['device_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}/install', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_load_vpp_licensed_app_allocation(self, applicationid, **kwargs):  # noqa: E501
        """Returns VPP licensed Application allocation details by AppId.  # noqa: E501

        Returns VPP licensed Application allocation details including info about orders and licenses, assignment, and deployment  parameters. Not valid for apps implementing flexible assignment. Should use new version of api.  cannot be updated through this api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_load_vpp_licensed_app_allocation(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :return: PurchasedApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_load_vpp_licensed_app_allocation_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_load_vpp_licensed_app_allocation_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_load_vpp_licensed_app_allocation_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Returns VPP licensed Application allocation details by AppId.  # noqa: E501

        Returns VPP licensed Application allocation details including info about orders and licenses, assignment, and deployment  parameters. Not valid for apps implementing flexible assignment. Should use new version of api.  cannot be updated through this api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_load_vpp_licensed_app_allocation_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :return: PurchasedApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_load_vpp_licensed_app_allocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_load_vpp_licensed_app_allocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PurchasedApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_remove_purchased_app_from_device_async(self, applicationid, **kwargs):  # noqa: E501
        """Remove the purchased application from the device.  # noqa: E501

        Remove the specified purchased application from the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_remove_purchased_app_from_device_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application ID, for example - 123. (required)
        :param DeviceInfo device_info: The details of the device to uninstall the application from.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_remove_purchased_app_from_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_remove_purchased_app_from_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_remove_purchased_app_from_device_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Remove the purchased application from the device.  # noqa: E501

        Remove the specified purchased application from the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_remove_purchased_app_from_device_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application ID, for example - 123. (required)
        :param DeviceInfo device_info: The details of the device to uninstall the application from.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'device_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_remove_purchased_app_from_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_remove_purchased_app_from_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_info' in params:
            body_params = params['device_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}/uninstall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_reset_client_context_for_account_async(self, location_group_id, **kwargs):  # noqa: E501
        """Resets the client context for the account at passed LG.  # noqa: E501

        Client context contains info about the product that manages vpp account. This will reset the client context to let others able to claim the vpp account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_reset_client_context_for_account_async(location_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int location_group_id: Location group id also known as the organization group identifier (Required). (required)
        :return: StatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_reset_client_context_for_account_async_with_http_info(location_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_reset_client_context_for_account_async_with_http_info(location_group_id, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_reset_client_context_for_account_async_with_http_info(self, location_group_id, **kwargs):  # noqa: E501
        """Resets the client context for the account at passed LG.  # noqa: E501

        Client context contains info about the product that manages vpp account. This will reset the client context to let others able to claim the vpp account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_reset_client_context_for_account_async_with_http_info(location_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int location_group_id: Location group id also known as the organization group identifier (Required). (required)
        :return: StatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_reset_client_context_for_account_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location_group_id' is set
        if self.api_client.client_side_validation and ('location_group_id' not in params or
                                                       params['location_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `location_group_id` when calling `purchased_apps_v1_reset_client_context_for_account_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location_group_id' in params:
            path_params['locationGroupId'] = params['location_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/ResetClientContextForAccount/{locationGroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_save_vpp_settings(self, vpp_settings_v1_model, **kwargs):  # noqa: E501
        """New - Save vpp settings to create vpp account  # noqa: E501

        Save vpp settings to create vpp account at a given organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_save_vpp_settings(vpp_settings_v1_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VppSettingsV1Model vpp_settings_v1_model: Vpp settings including info about description of the vpp account, stoken blob id, whether to send invitation to user and target organization group.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_save_vpp_settings_with_http_info(vpp_settings_v1_model, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_save_vpp_settings_with_http_info(vpp_settings_v1_model, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_save_vpp_settings_with_http_info(self, vpp_settings_v1_model, **kwargs):  # noqa: E501
        """New - Save vpp settings to create vpp account  # noqa: E501

        Save vpp settings to create vpp account at a given organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_save_vpp_settings_with_http_info(vpp_settings_v1_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VppSettingsV1Model vpp_settings_v1_model: Vpp settings including info about description of the vpp account, stoken blob id, whether to send invitation to user and target organization group.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vpp_settings_v1_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_save_vpp_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vpp_settings_v1_model' is set
        if self.api_client.client_side_validation and ('vpp_settings_v1_model' not in params or
                                                       params['vpp_settings_v1_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vpp_settings_v1_model` when calling `purchased_apps_v1_save_vpp_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vpp_settings_v1_model' in params:
            body_params = params['vpp_settings_v1_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/account', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_update_auto_update_flag_for_application_async(self, app_id, **kwargs):  # noqa: E501
        """Sets the value of the auto update flag for a device based VPP application.  # noqa: E501

        Updates the auto update flag for a device based VPP application. If enabled, the update will be automatically  installed on devices having the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_update_auto_update_flag_for_application_async(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_id: The application id (Required). (required)
        :param PurchasedAppAutoUpdateModel purchased_app_auto_update_model: The purchased application auto update model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_update_auto_update_flag_for_application_async_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_update_auto_update_flag_for_application_async_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_update_auto_update_flag_for_application_async_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """Sets the value of the auto update flag for a device based VPP application.  # noqa: E501

        Updates the auto update flag for a device based VPP application. If enabled, the update will be automatically  installed on devices having the application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_update_auto_update_flag_for_application_async_with_http_info(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_id: The application id (Required). (required)
        :param PurchasedAppAutoUpdateModel purchased_app_auto_update_model: The purchased application auto update model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id', 'purchased_app_auto_update_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_update_auto_update_flag_for_application_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if self.api_client.client_side_validation and ('app_id' not in params or
                                                       params['app_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_id` when calling `purchased_apps_v1_update_auto_update_flag_for_application_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'purchased_app_auto_update_model' in params:
            body_params = params['purchased_app_auto_update_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{appId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_update_vpp_application(self, app_id, **kwargs):  # noqa: E501
        """Updates the application on devices.  # noqa: E501

        Updates the application on devices having device based licenses for the application if an update is available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_update_vpp_application(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_id: The application id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_update_vpp_application_with_http_info(app_id, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_update_vpp_application_with_http_info(app_id, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_update_vpp_application_with_http_info(self, app_id, **kwargs):  # noqa: E501
        """Updates the application on devices.  # noqa: E501

        Updates the application on devices having device based licenses for the application if an update is available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_update_vpp_application_with_http_info(app_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_id: The application id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_update_vpp_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_id' is set
        if self.api_client.client_side_validation and ('app_id' not in params or
                                                       params['app_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `app_id` when calling `purchased_apps_v1_update_vpp_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'app_id' in params:
            path_params['appId'] = params['app_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{appId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_update_vpp_licensed_app_assignment_async(self, applicationid, **kwargs):  # noqa: E501
        """Update assignments of a VPP licensed application.  # noqa: E501

        Update assignments of a purchased application with licenses, application only with redemption codes or redemption based assignment  cannot be updated through this api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_update_vpp_licensed_app_assignment_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Vpp Licensed Application Id. (required)
        :param PurchasedApplicationModel_ application: Application assignment details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_update_vpp_licensed_app_assignment_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_update_vpp_licensed_app_assignment_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_update_vpp_licensed_app_assignment_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Update assignments of a VPP licensed application.  # noqa: E501

        Update assignments of a purchased application with licenses, application only with redemption codes or redemption based assignment  cannot be updated through this api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_update_vpp_licensed_app_assignment_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Vpp Licensed Application Id. (required)
        :param PurchasedApplicationModel_ application: Application assignment details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_update_vpp_licensed_app_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `purchased_apps_v1_update_vpp_licensed_app_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_vpp_app_search(self, **kwargs):  # noqa: E501
        """Search and retrieve details for purchased applications.  # noqa: E501

        Application details, its assignments, deployment parameters are displayed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_vpp_app_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applicationname: Application Name, for example - AngryBirds. 
        :param str isassigned: Flag to indicate whether the app is assigned or not, for example - true.
        :param str bundleid: BundleId/PackageId, for example - xyz.Angrybirds.com.
        :param str locationgroupid: LocationGroup Identifier, for example - 777.
        :param str model: Device Model, for example - iPhone.
        :param str status: Application Status, for example - Active.
        :param str platform: The Application Platform, for example - Apple.
        :param str page: Specific page number to get. 0 based index.
        :param str pagesize: Maximumm records per page. Default 500.
        :param str orderby: Orderby column name, for example - applicationname.
        :return: PurchasedApplicationSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_vpp_app_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_vpp_app_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_vpp_app_search_with_http_info(self, **kwargs):  # noqa: E501
        """Search and retrieve details for purchased applications.  # noqa: E501

        Application details, its assignments, deployment parameters are displayed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_vpp_app_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applicationname: Application Name, for example - AngryBirds. 
        :param str isassigned: Flag to indicate whether the app is assigned or not, for example - true.
        :param str bundleid: BundleId/PackageId, for example - xyz.Angrybirds.com.
        :param str locationgroupid: LocationGroup Identifier, for example - 777.
        :param str model: Device Model, for example - iPhone.
        :param str status: Application Status, for example - Active.
        :param str platform: The Application Platform, for example - Apple.
        :param str page: Specific page number to get. 0 based index.
        :param str pagesize: Maximumm records per page. Default 500.
        :param str orderby: Orderby column name, for example - applicationname.
        :return: PurchasedApplicationSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationname', 'isassigned', 'bundleid', 'locationgroupid', 'model', 'status', 'platform', 'page', 'pagesize', 'orderby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_vpp_app_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'applicationname' in params:
            query_params.append(('applicationname', params['applicationname']))  # noqa: E501
        if 'isassigned' in params:
            query_params.append(('isassigned', params['isassigned']))  # noqa: E501
        if 'bundleid' in params:
            query_params.append(('bundleid', params['bundleid']))  # noqa: E501
        if 'locationgroupid' in params:
            query_params.append(('locationgroupid', params['locationgroupid']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PurchasedApplicationSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchased_apps_v1_vpp_sync_assets_async(self, location_group_id, **kwargs):  # noqa: E501
        """Queues up sync assets job for apple vpp applications at the given organization group.  # noqa: E501

        Queues up sync assets job at the given organization group to get info about the number of total licenses, licenses assigned to each application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_vpp_sync_assets_async(location_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int location_group_id: Location group id also known as the organization group identifier (Required). (required)
        :return: StatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchased_apps_v1_vpp_sync_assets_async_with_http_info(location_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.purchased_apps_v1_vpp_sync_assets_async_with_http_info(location_group_id, **kwargs)  # noqa: E501
            return data

    def purchased_apps_v1_vpp_sync_assets_async_with_http_info(self, location_group_id, **kwargs):  # noqa: E501
        """Queues up sync assets job for apple vpp applications at the given organization group.  # noqa: E501

        Queues up sync assets job at the given organization group to get info about the number of total licenses, licenses assigned to each application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchased_apps_v1_vpp_sync_assets_async_with_http_info(location_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int location_group_id: Location group id also known as the organization group identifier (Required). (required)
        :return: StatusModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['location_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchased_apps_v1_vpp_sync_assets_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'location_group_id' is set
        if self.api_client.client_side_validation and ('location_group_id' not in params or
                                                       params['location_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `location_group_id` when calling `purchased_apps_v1_vpp_sync_assets_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'location_group_id' in params:
            path_params['locationGroupId'] = params['location_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/VppSyncAssets/{locationGroupId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
