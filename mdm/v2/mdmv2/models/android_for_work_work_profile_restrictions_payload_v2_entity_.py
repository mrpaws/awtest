# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'work_allow_screen_capture': 'bool',
        'work_allow_account_changes': 'bool',
        'work_allow_keyguard_fingerprint': 'bool',
        'work_allow_keyguard_trust_agent': 'bool',
        'work_allow_keyguard_unredacted': 'bool',
        'work_allow_non_google_accounts': 'bool',
        'work_allow_camera': 'bool',
        'work_allow_google_play': 'bool',
        'work_allowed_accounts': 'int',
        'work_allowed_email_address': 'str',
        'work_allow_chrome': 'bool',
        'work_allow_non_market_app_install': 'bool',
        'work_allow_install_from_unknown_sources': 'int',
        'work_allow_installing_apps': 'bool',
        'work_allow_uninstalling_apps': 'bool',
        'work_allow_disable_app_verify': 'bool',
        'work_whitelist_permitted_accessibility_services': 'bool',
        'work_accessibility_services_permitted_app_ids': 'str',
        'work_whitelist_apps_can_utilize_widgets': 'bool',
        'work_allowed_package_names_to_utilize_widgets': 'str',
        'work_allow_usb_debugging': 'bool',
        'work_allow_outgoing_bluetooth_connections': 'bool',
        'work_allow_nfc': 'bool',
        'work_allow_work_personal_paste': 'bool',
        'work_allow_work_to_access_personal': 'bool',
        'work_allow_personal_to_access_work': 'bool',
        'work_allow_personal_share_with_work': 'bool',
        'work_allow_personal_share_with_work_app': 'bool',
        'work_allow_work_share_with_personal': 'bool',
        'work_allow_work_contacts_in_phone': 'bool',
        'work_allow_work_widgets_to_personal': 'bool',
        'work_allow_bluetooth_contact_sharing': 'bool',
        'work_allow_contacts': 'bool',
        'work_skip_first_use_hints': 'bool'
    }

    attribute_map = {
        'work_allow_screen_capture': 'WorkAllowScreenCapture',
        'work_allow_account_changes': 'WorkAllowAccountChanges',
        'work_allow_keyguard_fingerprint': 'WorkAllowKeyguardFingerprint',
        'work_allow_keyguard_trust_agent': 'WorkAllowKeyguardTrustAgent',
        'work_allow_keyguard_unredacted': 'WorkAllowKeyguardUnredacted',
        'work_allow_non_google_accounts': 'WorkAllowNonGoogleAccounts',
        'work_allow_camera': 'WorkAllowCamera',
        'work_allow_google_play': 'WorkAllowGooglePlay',
        'work_allowed_accounts': 'WorkAllowedAccounts',
        'work_allowed_email_address': 'WorkAllowedEmailAddress',
        'work_allow_chrome': 'WorkAllowChrome',
        'work_allow_non_market_app_install': 'WorkAllowNonMarketAppInstall',
        'work_allow_install_from_unknown_sources': 'WorkAllowInstallFromUnknownSources',
        'work_allow_installing_apps': 'WorkAllowInstallingApps',
        'work_allow_uninstalling_apps': 'WorkAllowUninstallingApps',
        'work_allow_disable_app_verify': 'WorkAllowDisableAppVerify',
        'work_whitelist_permitted_accessibility_services': 'WorkWhitelistPermittedAccessibilityServices',
        'work_accessibility_services_permitted_app_ids': 'WorkAccessibilityServicesPermittedAppIds',
        'work_whitelist_apps_can_utilize_widgets': 'WorkWhitelistAppsCanUtilizeWidgets',
        'work_allowed_package_names_to_utilize_widgets': 'workAllowedPackageNamesToUtilizeWidgets',
        'work_allow_usb_debugging': 'WorkAllowUSBDebugging',
        'work_allow_outgoing_bluetooth_connections': 'WorkAllowOutgoingBluetoothConnections',
        'work_allow_nfc': 'WorkAllowNFC',
        'work_allow_work_personal_paste': 'WorkAllowWorkPersonalPaste',
        'work_allow_work_to_access_personal': 'WorkAllowWorkToAccessPersonal',
        'work_allow_personal_to_access_work': 'WorkAllowPersonalToAccessWork',
        'work_allow_personal_share_with_work': 'WorkAllowPersonalShareWithWork',
        'work_allow_personal_share_with_work_app': 'WorkAllowPersonalShareWithWorkApp',
        'work_allow_work_share_with_personal': 'WorkAllowWorkShareWithPersonal',
        'work_allow_work_contacts_in_phone': 'WorkAllowWorkContactsInPhone',
        'work_allow_work_widgets_to_personal': 'WorkAllowWorkWidgetsToPersonal',
        'work_allow_bluetooth_contact_sharing': 'WorkAllowBluetoothContactSharing',
        'work_allow_contacts': 'WorkAllowContacts',
        'work_skip_first_use_hints': 'WorkSkipFirstUseHints'
    }

    def __init__(self, work_allow_screen_capture=None, work_allow_account_changes=None, work_allow_keyguard_fingerprint=None, work_allow_keyguard_trust_agent=None, work_allow_keyguard_unredacted=None, work_allow_non_google_accounts=None, work_allow_camera=None, work_allow_google_play=None, work_allowed_accounts=None, work_allowed_email_address=None, work_allow_chrome=None, work_allow_non_market_app_install=None, work_allow_install_from_unknown_sources=None, work_allow_installing_apps=None, work_allow_uninstalling_apps=None, work_allow_disable_app_verify=None, work_whitelist_permitted_accessibility_services=None, work_accessibility_services_permitted_app_ids=None, work_whitelist_apps_can_utilize_widgets=None, work_allowed_package_names_to_utilize_widgets=None, work_allow_usb_debugging=None, work_allow_outgoing_bluetooth_connections=None, work_allow_nfc=None, work_allow_work_personal_paste=None, work_allow_work_to_access_personal=None, work_allow_personal_to_access_work=None, work_allow_personal_share_with_work=None, work_allow_personal_share_with_work_app=None, work_allow_work_share_with_personal=None, work_allow_work_contacts_in_phone=None, work_allow_work_widgets_to_personal=None, work_allow_bluetooth_contact_sharing=None, work_allow_contacts=None, work_skip_first_use_hints=None, _configuration=None):  # noqa: E501
        """AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._work_allow_screen_capture = None
        self._work_allow_account_changes = None
        self._work_allow_keyguard_fingerprint = None
        self._work_allow_keyguard_trust_agent = None
        self._work_allow_keyguard_unredacted = None
        self._work_allow_non_google_accounts = None
        self._work_allow_camera = None
        self._work_allow_google_play = None
        self._work_allowed_accounts = None
        self._work_allowed_email_address = None
        self._work_allow_chrome = None
        self._work_allow_non_market_app_install = None
        self._work_allow_install_from_unknown_sources = None
        self._work_allow_installing_apps = None
        self._work_allow_uninstalling_apps = None
        self._work_allow_disable_app_verify = None
        self._work_whitelist_permitted_accessibility_services = None
        self._work_accessibility_services_permitted_app_ids = None
        self._work_whitelist_apps_can_utilize_widgets = None
        self._work_allowed_package_names_to_utilize_widgets = None
        self._work_allow_usb_debugging = None
        self._work_allow_outgoing_bluetooth_connections = None
        self._work_allow_nfc = None
        self._work_allow_work_personal_paste = None
        self._work_allow_work_to_access_personal = None
        self._work_allow_personal_to_access_work = None
        self._work_allow_personal_share_with_work = None
        self._work_allow_personal_share_with_work_app = None
        self._work_allow_work_share_with_personal = None
        self._work_allow_work_contacts_in_phone = None
        self._work_allow_work_widgets_to_personal = None
        self._work_allow_bluetooth_contact_sharing = None
        self._work_allow_contacts = None
        self._work_skip_first_use_hints = None
        self.discriminator = None

        if work_allow_screen_capture is not None:
            self.work_allow_screen_capture = work_allow_screen_capture
        if work_allow_account_changes is not None:
            self.work_allow_account_changes = work_allow_account_changes
        if work_allow_keyguard_fingerprint is not None:
            self.work_allow_keyguard_fingerprint = work_allow_keyguard_fingerprint
        if work_allow_keyguard_trust_agent is not None:
            self.work_allow_keyguard_trust_agent = work_allow_keyguard_trust_agent
        if work_allow_keyguard_unredacted is not None:
            self.work_allow_keyguard_unredacted = work_allow_keyguard_unredacted
        if work_allow_non_google_accounts is not None:
            self.work_allow_non_google_accounts = work_allow_non_google_accounts
        if work_allow_camera is not None:
            self.work_allow_camera = work_allow_camera
        if work_allow_google_play is not None:
            self.work_allow_google_play = work_allow_google_play
        if work_allowed_accounts is not None:
            self.work_allowed_accounts = work_allowed_accounts
        if work_allowed_email_address is not None:
            self.work_allowed_email_address = work_allowed_email_address
        if work_allow_chrome is not None:
            self.work_allow_chrome = work_allow_chrome
        if work_allow_non_market_app_install is not None:
            self.work_allow_non_market_app_install = work_allow_non_market_app_install
        if work_allow_install_from_unknown_sources is not None:
            self.work_allow_install_from_unknown_sources = work_allow_install_from_unknown_sources
        if work_allow_installing_apps is not None:
            self.work_allow_installing_apps = work_allow_installing_apps
        if work_allow_uninstalling_apps is not None:
            self.work_allow_uninstalling_apps = work_allow_uninstalling_apps
        if work_allow_disable_app_verify is not None:
            self.work_allow_disable_app_verify = work_allow_disable_app_verify
        if work_whitelist_permitted_accessibility_services is not None:
            self.work_whitelist_permitted_accessibility_services = work_whitelist_permitted_accessibility_services
        if work_accessibility_services_permitted_app_ids is not None:
            self.work_accessibility_services_permitted_app_ids = work_accessibility_services_permitted_app_ids
        if work_whitelist_apps_can_utilize_widgets is not None:
            self.work_whitelist_apps_can_utilize_widgets = work_whitelist_apps_can_utilize_widgets
        if work_allowed_package_names_to_utilize_widgets is not None:
            self.work_allowed_package_names_to_utilize_widgets = work_allowed_package_names_to_utilize_widgets
        if work_allow_usb_debugging is not None:
            self.work_allow_usb_debugging = work_allow_usb_debugging
        if work_allow_outgoing_bluetooth_connections is not None:
            self.work_allow_outgoing_bluetooth_connections = work_allow_outgoing_bluetooth_connections
        if work_allow_nfc is not None:
            self.work_allow_nfc = work_allow_nfc
        if work_allow_work_personal_paste is not None:
            self.work_allow_work_personal_paste = work_allow_work_personal_paste
        if work_allow_work_to_access_personal is not None:
            self.work_allow_work_to_access_personal = work_allow_work_to_access_personal
        if work_allow_personal_to_access_work is not None:
            self.work_allow_personal_to_access_work = work_allow_personal_to_access_work
        if work_allow_personal_share_with_work is not None:
            self.work_allow_personal_share_with_work = work_allow_personal_share_with_work
        if work_allow_personal_share_with_work_app is not None:
            self.work_allow_personal_share_with_work_app = work_allow_personal_share_with_work_app
        if work_allow_work_share_with_personal is not None:
            self.work_allow_work_share_with_personal = work_allow_work_share_with_personal
        if work_allow_work_contacts_in_phone is not None:
            self.work_allow_work_contacts_in_phone = work_allow_work_contacts_in_phone
        if work_allow_work_widgets_to_personal is not None:
            self.work_allow_work_widgets_to_personal = work_allow_work_widgets_to_personal
        if work_allow_bluetooth_contact_sharing is not None:
            self.work_allow_bluetooth_contact_sharing = work_allow_bluetooth_contact_sharing
        if work_allow_contacts is not None:
            self.work_allow_contacts = work_allow_contacts
        if work_skip_first_use_hints is not None:
            self.work_skip_first_use_hints = work_skip_first_use_hints

    @property
    def work_allow_screen_capture(self):
        """Gets the work_allow_screen_capture of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow screen capture setting.  # noqa: E501

        :return: The work_allow_screen_capture of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_screen_capture

    @work_allow_screen_capture.setter
    def work_allow_screen_capture(self, work_allow_screen_capture):
        """Sets the work_allow_screen_capture of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow screen capture setting.  # noqa: E501

        :param work_allow_screen_capture: The work_allow_screen_capture of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_screen_capture = work_allow_screen_capture

    @property
    def work_allow_account_changes(self):
        """Gets the work_allow_account_changes of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow account changes setting.  # noqa: E501

        :return: The work_allow_account_changes of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_account_changes

    @work_allow_account_changes.setter
    def work_allow_account_changes(self, work_allow_account_changes):
        """Sets the work_allow_account_changes of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow account changes setting.  # noqa: E501

        :param work_allow_account_changes: The work_allow_account_changes of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_account_changes = work_allow_account_changes

    @property
    def work_allow_keyguard_fingerprint(self):
        """Gets the work_allow_keyguard_fingerprint of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow keyguard fingerprint setting.  # noqa: E501

        :return: The work_allow_keyguard_fingerprint of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_keyguard_fingerprint

    @work_allow_keyguard_fingerprint.setter
    def work_allow_keyguard_fingerprint(self, work_allow_keyguard_fingerprint):
        """Sets the work_allow_keyguard_fingerprint of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow keyguard fingerprint setting.  # noqa: E501

        :param work_allow_keyguard_fingerprint: The work_allow_keyguard_fingerprint of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_keyguard_fingerprint = work_allow_keyguard_fingerprint

    @property
    def work_allow_keyguard_trust_agent(self):
        """Gets the work_allow_keyguard_trust_agent of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow keyguard trust agent setting.  # noqa: E501

        :return: The work_allow_keyguard_trust_agent of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_keyguard_trust_agent

    @work_allow_keyguard_trust_agent.setter
    def work_allow_keyguard_trust_agent(self, work_allow_keyguard_trust_agent):
        """Sets the work_allow_keyguard_trust_agent of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow keyguard trust agent setting.  # noqa: E501

        :param work_allow_keyguard_trust_agent: The work_allow_keyguard_trust_agent of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_keyguard_trust_agent = work_allow_keyguard_trust_agent

    @property
    def work_allow_keyguard_unredacted(self):
        """Gets the work_allow_keyguard_unredacted of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow keyguard underacted setting.  # noqa: E501

        :return: The work_allow_keyguard_unredacted of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_keyguard_unredacted

    @work_allow_keyguard_unredacted.setter
    def work_allow_keyguard_unredacted(self, work_allow_keyguard_unredacted):
        """Sets the work_allow_keyguard_unredacted of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow keyguard underacted setting.  # noqa: E501

        :param work_allow_keyguard_unredacted: The work_allow_keyguard_unredacted of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_keyguard_unredacted = work_allow_keyguard_unredacted

    @property
    def work_allow_non_google_accounts(self):
        """Gets the work_allow_non_google_accounts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow adding/deleting accounts setting.  # noqa: E501

        :return: The work_allow_non_google_accounts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_non_google_accounts

    @work_allow_non_google_accounts.setter
    def work_allow_non_google_accounts(self, work_allow_non_google_accounts):
        """Sets the work_allow_non_google_accounts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow adding/deleting accounts setting.  # noqa: E501

        :param work_allow_non_google_accounts: The work_allow_non_google_accounts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_non_google_accounts = work_allow_non_google_accounts

    @property
    def work_allow_camera(self):
        """Gets the work_allow_camera of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow camera setting.  # noqa: E501

        :return: The work_allow_camera of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_camera

    @work_allow_camera.setter
    def work_allow_camera(self, work_allow_camera):
        """Sets the work_allow_camera of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow camera setting.  # noqa: E501

        :param work_allow_camera: The work_allow_camera of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_camera = work_allow_camera

    @property
    def work_allow_google_play(self):
        """Gets the work_allow_google_play of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow google play setting.  # noqa: E501

        :return: The work_allow_google_play of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_google_play

    @work_allow_google_play.setter
    def work_allow_google_play(self, work_allow_google_play):
        """Sets the work_allow_google_play of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow google play setting.  # noqa: E501

        :param work_allow_google_play: The work_allow_google_play of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_google_play = work_allow_google_play

    @property
    def work_allowed_accounts(self):
        """Gets the work_allowed_accounts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating which type of account is allowed.  # noqa: E501

        :return: The work_allowed_accounts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._work_allowed_accounts

    @work_allowed_accounts.setter
    def work_allowed_accounts(self, work_allowed_accounts):
        """Sets the work_allowed_accounts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating which type of account is allowed.  # noqa: E501

        :param work_allowed_accounts: The work_allowed_accounts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                work_allowed_accounts not in allowed_values):
            raise ValueError(
                "Invalid value for `work_allowed_accounts` ({0}), must be one of {1}"  # noqa: E501
                .format(work_allowed_accounts, allowed_values)
            )

        self._work_allowed_accounts = work_allowed_accounts

    @property
    def work_allowed_email_address(self):
        """Gets the work_allowed_email_address of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the email addresses for the account type is allowed.  # noqa: E501

        :return: The work_allowed_email_address of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._work_allowed_email_address

    @work_allowed_email_address.setter
    def work_allowed_email_address(self, work_allowed_email_address):
        """Sets the work_allowed_email_address of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets the email addresses for the account type is allowed.  # noqa: E501

        :param work_allowed_email_address: The work_allowed_email_address of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._work_allowed_email_address = work_allowed_email_address

    @property
    def work_allow_chrome(self):
        """Gets the work_allow_chrome of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow chrome setting.  # noqa: E501

        :return: The work_allow_chrome of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_chrome

    @work_allow_chrome.setter
    def work_allow_chrome(self, work_allow_chrome):
        """Sets the work_allow_chrome of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow chrome setting.  # noqa: E501

        :param work_allow_chrome: The work_allow_chrome of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_chrome = work_allow_chrome

    @property
    def work_allow_non_market_app_install(self):
        """Gets the work_allow_non_market_app_install of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow non market app installation setting.  # noqa: E501

        :return: The work_allow_non_market_app_install of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_non_market_app_install

    @work_allow_non_market_app_install.setter
    def work_allow_non_market_app_install(self, work_allow_non_market_app_install):
        """Sets the work_allow_non_market_app_install of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow non market app installation setting.  # noqa: E501

        :param work_allow_non_market_app_install: The work_allow_non_market_app_install of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_non_market_app_install = work_allow_non_market_app_install

    @property
    def work_allow_install_from_unknown_sources(self):
        """Gets the work_allow_install_from_unknown_sources of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets allow app installation from unknown sources.  # noqa: E501

        :return: The work_allow_install_from_unknown_sources of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._work_allow_install_from_unknown_sources

    @work_allow_install_from_unknown_sources.setter
    def work_allow_install_from_unknown_sources(self, work_allow_install_from_unknown_sources):
        """Sets the work_allow_install_from_unknown_sources of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets allow app installation from unknown sources.  # noqa: E501

        :param work_allow_install_from_unknown_sources: The work_allow_install_from_unknown_sources of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._work_allow_install_from_unknown_sources = work_allow_install_from_unknown_sources

    @property
    def work_allow_installing_apps(self):
        """Gets the work_allow_installing_apps of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow installing apps setting.  # noqa: E501

        :return: The work_allow_installing_apps of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_installing_apps

    @work_allow_installing_apps.setter
    def work_allow_installing_apps(self, work_allow_installing_apps):
        """Sets the work_allow_installing_apps of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow installing apps setting.  # noqa: E501

        :param work_allow_installing_apps: The work_allow_installing_apps of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_installing_apps = work_allow_installing_apps

    @property
    def work_allow_uninstalling_apps(self):
        """Gets the work_allow_uninstalling_apps of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow uninstalling apps setting.  # noqa: E501

        :return: The work_allow_uninstalling_apps of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_uninstalling_apps

    @work_allow_uninstalling_apps.setter
    def work_allow_uninstalling_apps(self, work_allow_uninstalling_apps):
        """Sets the work_allow_uninstalling_apps of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow uninstalling apps setting.  # noqa: E501

        :param work_allow_uninstalling_apps: The work_allow_uninstalling_apps of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_uninstalling_apps = work_allow_uninstalling_apps

    @property
    def work_allow_disable_app_verify(self):
        """Gets the work_allow_disable_app_verify of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow disable app verify setting.  # noqa: E501

        :return: The work_allow_disable_app_verify of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_disable_app_verify

    @work_allow_disable_app_verify.setter
    def work_allow_disable_app_verify(self, work_allow_disable_app_verify):
        """Sets the work_allow_disable_app_verify of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow disable app verify setting.  # noqa: E501

        :param work_allow_disable_app_verify: The work_allow_disable_app_verify of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_disable_app_verify = work_allow_disable_app_verify

    @property
    def work_whitelist_permitted_accessibility_services(self):
        """Gets the work_whitelist_permitted_accessibility_services of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Whitelist Permitted Accessibility Services setting.  # noqa: E501

        :return: The work_whitelist_permitted_accessibility_services of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_whitelist_permitted_accessibility_services

    @work_whitelist_permitted_accessibility_services.setter
    def work_whitelist_permitted_accessibility_services(self, work_whitelist_permitted_accessibility_services):
        """Sets the work_whitelist_permitted_accessibility_services of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Whitelist Permitted Accessibility Services setting.  # noqa: E501

        :param work_whitelist_permitted_accessibility_services: The work_whitelist_permitted_accessibility_services of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_whitelist_permitted_accessibility_services = work_whitelist_permitted_accessibility_services

    @property
    def work_accessibility_services_permitted_app_ids(self):
        """Gets the work_accessibility_services_permitted_app_ids of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets allow Accessibility Services permitted APps id setting.  # noqa: E501

        :return: The work_accessibility_services_permitted_app_ids of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._work_accessibility_services_permitted_app_ids

    @work_accessibility_services_permitted_app_ids.setter
    def work_accessibility_services_permitted_app_ids(self, work_accessibility_services_permitted_app_ids):
        """Sets the work_accessibility_services_permitted_app_ids of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets allow Accessibility Services permitted APps id setting.  # noqa: E501

        :param work_accessibility_services_permitted_app_ids: The work_accessibility_services_permitted_app_ids of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._work_accessibility_services_permitted_app_ids = work_accessibility_services_permitted_app_ids

    @property
    def work_whitelist_apps_can_utilize_widgets(self):
        """Gets the work_whitelist_apps_can_utilize_widgets of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Whitelist apps to utilize widgets.  # noqa: E501

        :return: The work_whitelist_apps_can_utilize_widgets of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_whitelist_apps_can_utilize_widgets

    @work_whitelist_apps_can_utilize_widgets.setter
    def work_whitelist_apps_can_utilize_widgets(self, work_whitelist_apps_can_utilize_widgets):
        """Sets the work_whitelist_apps_can_utilize_widgets of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Whitelist apps to utilize widgets.  # noqa: E501

        :param work_whitelist_apps_can_utilize_widgets: The work_whitelist_apps_can_utilize_widgets of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_whitelist_apps_can_utilize_widgets = work_whitelist_apps_can_utilize_widgets

    @property
    def work_allowed_package_names_to_utilize_widgets(self):
        """Gets the work_allowed_package_names_to_utilize_widgets of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets Work Allowed Package Names To Utilize Widgets.  # noqa: E501

        :return: The work_allowed_package_names_to_utilize_widgets of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._work_allowed_package_names_to_utilize_widgets

    @work_allowed_package_names_to_utilize_widgets.setter
    def work_allowed_package_names_to_utilize_widgets(self, work_allowed_package_names_to_utilize_widgets):
        """Sets the work_allowed_package_names_to_utilize_widgets of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets Work Allowed Package Names To Utilize Widgets.  # noqa: E501

        :param work_allowed_package_names_to_utilize_widgets: The work_allowed_package_names_to_utilize_widgets of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._work_allowed_package_names_to_utilize_widgets = work_allowed_package_names_to_utilize_widgets

    @property
    def work_allow_usb_debugging(self):
        """Gets the work_allow_usb_debugging of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow USB debugging setting.  # noqa: E501

        :return: The work_allow_usb_debugging of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_usb_debugging

    @work_allow_usb_debugging.setter
    def work_allow_usb_debugging(self, work_allow_usb_debugging):
        """Sets the work_allow_usb_debugging of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow USB debugging setting.  # noqa: E501

        :param work_allow_usb_debugging: The work_allow_usb_debugging of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_usb_debugging = work_allow_usb_debugging

    @property
    def work_allow_outgoing_bluetooth_connections(self):
        """Gets the work_allow_outgoing_bluetooth_connections of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Outgoing Bluetooth Connections setting.  # noqa: E501

        :return: The work_allow_outgoing_bluetooth_connections of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_outgoing_bluetooth_connections

    @work_allow_outgoing_bluetooth_connections.setter
    def work_allow_outgoing_bluetooth_connections(self, work_allow_outgoing_bluetooth_connections):
        """Sets the work_allow_outgoing_bluetooth_connections of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Outgoing Bluetooth Connections setting.  # noqa: E501

        :param work_allow_outgoing_bluetooth_connections: The work_allow_outgoing_bluetooth_connections of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_outgoing_bluetooth_connections = work_allow_outgoing_bluetooth_connections

    @property
    def work_allow_nfc(self):
        """Gets the work_allow_nfc of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow NFC setting.  # noqa: E501

        :return: The work_allow_nfc of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_nfc

    @work_allow_nfc.setter
    def work_allow_nfc(self, work_allow_nfc):
        """Sets the work_allow_nfc of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow NFC setting.  # noqa: E501

        :param work_allow_nfc: The work_allow_nfc of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_nfc = work_allow_nfc

    @property
    def work_allow_work_personal_paste(self):
        """Gets the work_allow_work_personal_paste of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Work Personal Paste setting.  # noqa: E501

        :return: The work_allow_work_personal_paste of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_work_personal_paste

    @work_allow_work_personal_paste.setter
    def work_allow_work_personal_paste(self, work_allow_work_personal_paste):
        """Sets the work_allow_work_personal_paste of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Work Personal Paste setting.  # noqa: E501

        :param work_allow_work_personal_paste: The work_allow_work_personal_paste of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_work_personal_paste = work_allow_work_personal_paste

    @property
    def work_allow_work_to_access_personal(self):
        """Gets the work_allow_work_to_access_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Work To Access Personal setting.  # noqa: E501

        :return: The work_allow_work_to_access_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_work_to_access_personal

    @work_allow_work_to_access_personal.setter
    def work_allow_work_to_access_personal(self, work_allow_work_to_access_personal):
        """Sets the work_allow_work_to_access_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Work To Access Personal setting.  # noqa: E501

        :param work_allow_work_to_access_personal: The work_allow_work_to_access_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_work_to_access_personal = work_allow_work_to_access_personal

    @property
    def work_allow_personal_to_access_work(self):
        """Gets the work_allow_personal_to_access_work of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Personal To Access Work setting.  # noqa: E501

        :return: The work_allow_personal_to_access_work of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_personal_to_access_work

    @work_allow_personal_to_access_work.setter
    def work_allow_personal_to_access_work(self, work_allow_personal_to_access_work):
        """Sets the work_allow_personal_to_access_work of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Personal To Access Work setting.  # noqa: E501

        :param work_allow_personal_to_access_work: The work_allow_personal_to_access_work of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_personal_to_access_work = work_allow_personal_to_access_work

    @property
    def work_allow_personal_share_with_work(self):
        """Gets the work_allow_personal_share_with_work of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Personal share with Work setting.  # noqa: E501

        :return: The work_allow_personal_share_with_work of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_personal_share_with_work

    @work_allow_personal_share_with_work.setter
    def work_allow_personal_share_with_work(self, work_allow_personal_share_with_work):
        """Sets the work_allow_personal_share_with_work of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Personal share with Work setting.  # noqa: E501

        :param work_allow_personal_share_with_work: The work_allow_personal_share_with_work of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_personal_share_with_work = work_allow_personal_share_with_work

    @property
    def work_allow_personal_share_with_work_app(self):
        """Gets the work_allow_personal_share_with_work_app of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether to allow Personal share with Work setting.  # noqa: E501

        :return: The work_allow_personal_share_with_work_app of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_personal_share_with_work_app

    @work_allow_personal_share_with_work_app.setter
    def work_allow_personal_share_with_work_app(self, work_allow_personal_share_with_work_app):
        """Sets the work_allow_personal_share_with_work_app of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether to allow Personal share with Work setting.  # noqa: E501

        :param work_allow_personal_share_with_work_app: The work_allow_personal_share_with_work_app of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_personal_share_with_work_app = work_allow_personal_share_with_work_app

    @property
    def work_allow_work_share_with_personal(self):
        """Gets the work_allow_work_share_with_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Work share with Personal setting.  # noqa: E501

        :return: The work_allow_work_share_with_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_work_share_with_personal

    @work_allow_work_share_with_personal.setter
    def work_allow_work_share_with_personal(self, work_allow_work_share_with_personal):
        """Sets the work_allow_work_share_with_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Work share with Personal setting.  # noqa: E501

        :param work_allow_work_share_with_personal: The work_allow_work_share_with_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_work_share_with_personal = work_allow_work_share_with_personal

    @property
    def work_allow_work_contacts_in_phone(self):
        """Gets the work_allow_work_contacts_in_phone of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Work contacts In phone setting.  # noqa: E501

        :return: The work_allow_work_contacts_in_phone of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_work_contacts_in_phone

    @work_allow_work_contacts_in_phone.setter
    def work_allow_work_contacts_in_phone(self, work_allow_work_contacts_in_phone):
        """Sets the work_allow_work_contacts_in_phone of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Work contacts In phone setting.  # noqa: E501

        :param work_allow_work_contacts_in_phone: The work_allow_work_contacts_in_phone of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_work_contacts_in_phone = work_allow_work_contacts_in_phone

    @property
    def work_allow_work_widgets_to_personal(self):
        """Gets the work_allow_work_widgets_to_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Work widgets to personal setting.  # noqa: E501

        :return: The work_allow_work_widgets_to_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_work_widgets_to_personal

    @work_allow_work_widgets_to_personal.setter
    def work_allow_work_widgets_to_personal(self, work_allow_work_widgets_to_personal):
        """Sets the work_allow_work_widgets_to_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Work widgets to personal setting.  # noqa: E501

        :param work_allow_work_widgets_to_personal: The work_allow_work_widgets_to_personal of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_work_widgets_to_personal = work_allow_work_widgets_to_personal

    @property
    def work_allow_bluetooth_contact_sharing(self):
        """Gets the work_allow_bluetooth_contact_sharing of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether work Allow Bluetooth Contact Sharing setting.  # noqa: E501

        :return: The work_allow_bluetooth_contact_sharing of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_bluetooth_contact_sharing

    @work_allow_bluetooth_contact_sharing.setter
    def work_allow_bluetooth_contact_sharing(self, work_allow_bluetooth_contact_sharing):
        """Sets the work_allow_bluetooth_contact_sharing of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether work Allow Bluetooth Contact Sharing setting.  # noqa: E501

        :param work_allow_bluetooth_contact_sharing: The work_allow_bluetooth_contact_sharing of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_bluetooth_contact_sharing = work_allow_bluetooth_contact_sharing

    @property
    def work_allow_contacts(self):
        """Gets the work_allow_contacts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether work Allow Contacts setting.  # noqa: E501

        :return: The work_allow_contacts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_allow_contacts

    @work_allow_contacts.setter
    def work_allow_contacts(self, work_allow_contacts):
        """Sets the work_allow_contacts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether work Allow Contacts setting.  # noqa: E501

        :param work_allow_contacts: The work_allow_contacts of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_allow_contacts = work_allow_contacts

    @property
    def work_skip_first_use_hints(self):
        """Gets the work_skip_first_use_hints of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether pO mode skip user tutorial on first start-up for apps.  # noqa: E501

        :return: The work_skip_first_use_hints of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._work_skip_first_use_hints

    @work_skip_first_use_hints.setter
    def work_skip_first_use_hints(self, work_skip_first_use_hints):
        """Sets the work_skip_first_use_hints of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether pO mode skip user tutorial on first start-up for apps.  # noqa: E501

        :param work_skip_first_use_hints: The work_skip_first_use_hints of this AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._work_skip_first_use_hints = work_skip_first_use_hints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
