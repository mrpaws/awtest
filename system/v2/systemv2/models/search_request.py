# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv2.configuration import Configuration


class SearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schemas': 'list[str]',
        'attributes': 'list[str]',
        'excluded_attributes': 'list[str]',
        'filter': 'str',
        'sort_by': 'str',
        'sort_order': 'int',
        'start_index': 'int',
        'count': 'int'
    }

    attribute_map = {
        'schemas': 'schemas',
        'attributes': 'attributes',
        'excluded_attributes': 'excludedAttributes',
        'filter': 'filter',
        'sort_by': 'sortBy',
        'sort_order': 'sortOrder',
        'start_index': 'startIndex',
        'count': 'count'
    }

    def __init__(self, schemas=None, attributes=None, excluded_attributes=None, filter=None, sort_by=None, sort_order=None, start_index=None, count=None, _configuration=None):  # noqa: E501
        """SearchRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._schemas = None
        self._attributes = None
        self._excluded_attributes = None
        self._filter = None
        self._sort_by = None
        self._sort_order = None
        self._start_index = None
        self._count = None
        self.discriminator = None

        if schemas is not None:
            self.schemas = schemas
        if attributes is not None:
            self.attributes = attributes
        if excluded_attributes is not None:
            self.excluded_attributes = excluded_attributes
        if filter is not None:
            self.filter = filter
        if sort_by is not None:
            self.sort_by = sort_by
        if sort_order is not None:
            self.sort_order = sort_order
        if start_index is not None:
            self.start_index = start_index
        if count is not None:
            self.count = count

    @property
    def schemas(self):
        """Gets the schemas of this SearchRequest.  # noqa: E501

        Schemas used to compose a search request.  # noqa: E501

        :return: The schemas of this SearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this SearchRequest.

        Schemas used to compose a search request.  # noqa: E501

        :param schemas: The schemas of this SearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._schemas = schemas

    @property
    def attributes(self):
        """Gets the attributes of this SearchRequest.  # noqa: E501

        A multi-valued list of strings indicating the names of resource attributes to return in the response.  # noqa: E501

        :return: The attributes of this SearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SearchRequest.

        A multi-valued list of strings indicating the names of resource attributes to return in the response.  # noqa: E501

        :param attributes: The attributes of this SearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._attributes = attributes

    @property
    def excluded_attributes(self):
        """Gets the excluded_attributes of this SearchRequest.  # noqa: E501

        A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  # noqa: E501

        :return: The excluded_attributes of this SearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_attributes

    @excluded_attributes.setter
    def excluded_attributes(self, excluded_attributes):
        """Sets the excluded_attributes of this SearchRequest.

        A multi-valued list of strings indicating the names of resource attributes to be removed from the default set of attributes to return.  # noqa: E501

        :param excluded_attributes: The excluded_attributes of this SearchRequest.  # noqa: E501
        :type: list[str]
        """

        self._excluded_attributes = excluded_attributes

    @property
    def filter(self):
        """Gets the filter of this SearchRequest.  # noqa: E501

        The filter string used to request a subset of resources.  # noqa: E501

        :return: The filter of this SearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SearchRequest.

        The filter string used to request a subset of resources.  # noqa: E501

        :param filter: The filter of this SearchRequest.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def sort_by(self):
        """Gets the sort_by of this SearchRequest.  # noqa: E501

        A string indicating the attribute to be used to order the returned responses.  # noqa: E501

        :return: The sort_by of this SearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this SearchRequest.

        A string indicating the attribute to be used to order the returned responses.  # noqa: E501

        :param sort_by: The sort_by of this SearchRequest.  # noqa: E501
        :type: str
        """

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this SearchRequest.  # noqa: E501

        A string indicating the order in which the 'sortBy' parameter is applied.  # noqa: E501

        :return: The sort_order of this SearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SearchRequest.

        A string indicating the order in which the 'sortBy' parameter is applied.  # noqa: E501

        :param sort_order: The sort_order of this SearchRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                sort_order not in allowed_values):
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def start_index(self):
        """Gets the start_index of this SearchRequest.  # noqa: E501

        A 1-based integer indicating the index of the first query result.  # noqa: E501

        :return: The start_index of this SearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this SearchRequest.

        A 1-based integer indicating the index of the first query result.  # noqa: E501

        :param start_index: The start_index of this SearchRequest.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    @property
    def count(self):
        """Gets the count of this SearchRequest.  # noqa: E501

        An integer indicating the maximum number of query results per page.  # noqa: E501

        :return: The count of this SearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SearchRequest.

        An integer indicating the maximum number of query results per page.  # noqa: E501

        :param count: The count of this SearchRequest.  # noqa: E501
        :type: int
        """

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchRequest):
            return True

        return self.to_dict() != other.to_dict()
