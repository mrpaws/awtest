# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidContainerSingleSignOnPayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sso_vendor': 'str',
        'company_name': 'str',
        'icon_id': 'int',
        'customer_id': 'str',
        'sso_applications': 'str'
    }

    attribute_map = {
        'sso_vendor': 'SSOVendor',
        'company_name': 'CompanyName',
        'icon_id': 'IconId',
        'customer_id': 'CustomerID',
        'sso_applications': 'SSOApplications'
    }

    def __init__(self, sso_vendor=None, company_name=None, icon_id=None, customer_id=None, sso_applications=None, _configuration=None):  # noqa: E501
        """AndroidContainerSingleSignOnPayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sso_vendor = None
        self._company_name = None
        self._icon_id = None
        self._customer_id = None
        self._sso_applications = None
        self.discriminator = None

        if sso_vendor is not None:
            self.sso_vendor = sso_vendor
        if company_name is not None:
            self.company_name = company_name
        if icon_id is not None:
            self.icon_id = icon_id
        if customer_id is not None:
            self.customer_id = customer_id
        if sso_applications is not None:
            self.sso_applications = sso_applications

    @property
    def sso_vendor(self):
        """Gets the sso_vendor of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501

        Gets or sets SSOVendor.  # noqa: E501

        :return: The sso_vendor of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._sso_vendor

    @sso_vendor.setter
    def sso_vendor(self, sso_vendor):
        """Sets the sso_vendor of this AndroidContainerSingleSignOnPayloadV2Entity_.

        Gets or sets SSOVendor.  # noqa: E501

        :param sso_vendor: The sso_vendor of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._sso_vendor = sso_vendor

    @property
    def company_name(self):
        """Gets the company_name of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501

        Gets or sets CompanyName.  # noqa: E501

        :return: The company_name of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AndroidContainerSingleSignOnPayloadV2Entity_.

        Gets or sets CompanyName.  # noqa: E501

        :param company_name: The company_name of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def icon_id(self):
        """Gets the icon_id of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501

        Gets or sets IconId.  # noqa: E501

        :return: The icon_id of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this AndroidContainerSingleSignOnPayloadV2Entity_.

        Gets or sets IconId.  # noqa: E501

        :param icon_id: The icon_id of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._icon_id = icon_id

    @property
    def customer_id(self):
        """Gets the customer_id of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501

        Gets or sets CustomerID.  # noqa: E501

        :return: The customer_id of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AndroidContainerSingleSignOnPayloadV2Entity_.

        Gets or sets CustomerID.  # noqa: E501

        :param customer_id: The customer_id of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def sso_applications(self):
        """Gets the sso_applications of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501

        Gets or sets SSOApplications.  # noqa: E501

        :return: The sso_applications of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._sso_applications

    @sso_applications.setter
    def sso_applications(self, sso_applications):
        """Sets the sso_applications of this AndroidContainerSingleSignOnPayloadV2Entity_.

        Gets or sets SSOApplications.  # noqa: E501

        :param sso_applications: The sso_applications of this AndroidContainerSingleSignOnPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._sso_applications = sso_applications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidContainerSingleSignOnPayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidContainerSingleSignOnPayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidContainerSingleSignOnPayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
