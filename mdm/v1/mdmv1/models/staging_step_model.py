# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class StagingStepModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_id': 'int',
        'application_id': 'int',
        'file_actions_id': 'int',
        'execution_task_id': 'int',
        'event_action_id': 'int',
        'persist_through_enterprise_reset': 'str'
    }

    attribute_map = {
        'profile_id': 'ProfileID',
        'application_id': 'ApplicationID',
        'file_actions_id': 'FileActionsID',
        'execution_task_id': 'ExecutionTaskID',
        'event_action_id': 'EventActionID',
        'persist_through_enterprise_reset': 'PersistThroughEnterpriseReset'
    }

    def __init__(self, profile_id=None, application_id=None, file_actions_id=None, execution_task_id=None, event_action_id=None, persist_through_enterprise_reset=None, _configuration=None):  # noqa: E501
        """StagingStepModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._profile_id = None
        self._application_id = None
        self._file_actions_id = None
        self._execution_task_id = None
        self._event_action_id = None
        self._persist_through_enterprise_reset = None
        self.discriminator = None

        if profile_id is not None:
            self.profile_id = profile_id
        if application_id is not None:
            self.application_id = application_id
        if file_actions_id is not None:
            self.file_actions_id = file_actions_id
        if execution_task_id is not None:
            self.execution_task_id = execution_task_id
        if event_action_id is not None:
            self.event_action_id = event_action_id
        if persist_through_enterprise_reset is not None:
            self.persist_through_enterprise_reset = persist_through_enterprise_reset

    @property
    def profile_id(self):
        """Gets the profile_id of this StagingStepModel.  # noqa: E501

        Gets or sets the profile id for staging.  # noqa: E501

        :return: The profile_id of this StagingStepModel.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this StagingStepModel.

        Gets or sets the profile id for staging.  # noqa: E501

        :param profile_id: The profile_id of this StagingStepModel.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    @property
    def application_id(self):
        """Gets the application_id of this StagingStepModel.  # noqa: E501

        Gets or sets the application id for staging.  # noqa: E501

        :return: The application_id of this StagingStepModel.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this StagingStepModel.

        Gets or sets the application id for staging.  # noqa: E501

        :param application_id: The application_id of this StagingStepModel.  # noqa: E501
        :type: int
        """

        self._application_id = application_id

    @property
    def file_actions_id(self):
        """Gets the file_actions_id of this StagingStepModel.  # noqa: E501

        Gets or sets the files/actions id for staging.  # noqa: E501

        :return: The file_actions_id of this StagingStepModel.  # noqa: E501
        :rtype: int
        """
        return self._file_actions_id

    @file_actions_id.setter
    def file_actions_id(self, file_actions_id):
        """Sets the file_actions_id of this StagingStepModel.

        Gets or sets the files/actions id for staging.  # noqa: E501

        :param file_actions_id: The file_actions_id of this StagingStepModel.  # noqa: E501
        :type: int
        """

        self._file_actions_id = file_actions_id

    @property
    def execution_task_id(self):
        """Gets the execution_task_id of this StagingStepModel.  # noqa: E501

        Gets or sets the execution task type id.  # noqa: E501

        :return: The execution_task_id of this StagingStepModel.  # noqa: E501
        :rtype: int
        """
        return self._execution_task_id

    @execution_task_id.setter
    def execution_task_id(self, execution_task_id):
        """Sets the execution_task_id of this StagingStepModel.

        Gets or sets the execution task type id.  # noqa: E501

        :param execution_task_id: The execution_task_id of this StagingStepModel.  # noqa: E501
        :type: int
        """

        self._execution_task_id = execution_task_id

    @property
    def event_action_id(self):
        """Gets the event_action_id of this StagingStepModel.  # noqa: E501

        Gets or sets the event action id for the staging.  # noqa: E501

        :return: The event_action_id of this StagingStepModel.  # noqa: E501
        :rtype: int
        """
        return self._event_action_id

    @event_action_id.setter
    def event_action_id(self, event_action_id):
        """Sets the event_action_id of this StagingStepModel.

        Gets or sets the event action id for the staging.  # noqa: E501

        :param event_action_id: The event_action_id of this StagingStepModel.  # noqa: E501
        :type: int
        """

        self._event_action_id = event_action_id

    @property
    def persist_through_enterprise_reset(self):
        """Gets the persist_through_enterprise_reset of this StagingStepModel.  # noqa: E501

        Gets or sets whether Persist through enterprise reset is allowed or not.  # noqa: E501

        :return: The persist_through_enterprise_reset of this StagingStepModel.  # noqa: E501
        :rtype: str
        """
        return self._persist_through_enterprise_reset

    @persist_through_enterprise_reset.setter
    def persist_through_enterprise_reset(self, persist_through_enterprise_reset):
        """Sets the persist_through_enterprise_reset of this StagingStepModel.

        Gets or sets whether Persist through enterprise reset is allowed or not.  # noqa: E501

        :param persist_through_enterprise_reset: The persist_through_enterprise_reset of this StagingStepModel.  # noqa: E501
        :type: str
        """

        self._persist_through_enterprise_reset = persist_through_enterprise_reset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StagingStepModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StagingStepModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StagingStepModel):
            return True

        return self.to_dict() != other.to_dict()
