# coding: utf-8

"""
    MDM API V4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv4.configuration import Configuration


class GeneralPayloadV4Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_id': 'int',
        'afw_oem_settings_enabled': 'bool',
        'afw_oem_type': 'int',
        'name': 'str',
        'description': 'str',
        'profile_scope': 'str',
        'version': 'int',
        'create_new_version': 'bool',
        'assignment_type': 'str',
        'profile_context': 'str',
        'enable_provisioning': 'bool',
        'is_active': 'bool',
        'is_managed': 'bool',
        'password': 'str',
        'allow_removal': 'str',
        'assigned_smart_groups': 'list[SmartGroupEntity]',
        'excluded_smart_groups': 'list[SmartGroupEntity]',
        'managed_location_group_id': 'int',
        'assigned_geofence_area': 'list[int]',
        'assigned_schedule': 'list[int]',
        'expiration_date': 'str',
        'profile_uuid': 'str',
        'is_provisioned_for_oobe': 'bool',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'profile_id': 'ProfileId',
        'afw_oem_settings_enabled': 'AfwOemSettingsEnabled',
        'afw_oem_type': 'AfwOemType',
        'name': 'Name',
        'description': 'Description',
        'profile_scope': 'ProfileScope',
        'version': 'Version',
        'create_new_version': 'CreateNewVersion',
        'assignment_type': 'AssignmentType',
        'profile_context': 'ProfileContext',
        'enable_provisioning': 'EnableProvisioning',
        'is_active': 'IsActive',
        'is_managed': 'IsManaged',
        'password': 'Password',
        'allow_removal': 'AllowRemoval',
        'assigned_smart_groups': 'AssignedSmartGroups',
        'excluded_smart_groups': 'ExcludedSmartGroups',
        'managed_location_group_id': 'ManagedLocationGroupID',
        'assigned_geofence_area': 'AssignedGeofenceArea',
        'assigned_schedule': 'AssignedSchedule',
        'expiration_date': 'ExpirationDate',
        'profile_uuid': 'ProfileUuid',
        'is_provisioned_for_oobe': 'IsProvisionedForOobe',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, profile_id=None, afw_oem_settings_enabled=None, afw_oem_type=None, name=None, description=None, profile_scope=None, version=None, create_new_version=None, assignment_type=None, profile_context=None, enable_provisioning=None, is_active=None, is_managed=None, password=None, allow_removal=None, assigned_smart_groups=None, excluded_smart_groups=None, managed_location_group_id=None, assigned_geofence_area=None, assigned_schedule=None, expiration_date=None, profile_uuid=None, is_provisioned_for_oobe=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """GeneralPayloadV4Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._profile_id = None
        self._afw_oem_settings_enabled = None
        self._afw_oem_type = None
        self._name = None
        self._description = None
        self._profile_scope = None
        self._version = None
        self._create_new_version = None
        self._assignment_type = None
        self._profile_context = None
        self._enable_provisioning = None
        self._is_active = None
        self._is_managed = None
        self._password = None
        self._allow_removal = None
        self._assigned_smart_groups = None
        self._excluded_smart_groups = None
        self._managed_location_group_id = None
        self._assigned_geofence_area = None
        self._assigned_schedule = None
        self._expiration_date = None
        self._profile_uuid = None
        self._is_provisioned_for_oobe = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if profile_id is not None:
            self.profile_id = profile_id
        if afw_oem_settings_enabled is not None:
            self.afw_oem_settings_enabled = afw_oem_settings_enabled
        if afw_oem_type is not None:
            self.afw_oem_type = afw_oem_type
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if profile_scope is not None:
            self.profile_scope = profile_scope
        if version is not None:
            self.version = version
        if create_new_version is not None:
            self.create_new_version = create_new_version
        if assignment_type is not None:
            self.assignment_type = assignment_type
        if profile_context is not None:
            self.profile_context = profile_context
        if enable_provisioning is not None:
            self.enable_provisioning = enable_provisioning
        if is_active is not None:
            self.is_active = is_active
        if is_managed is not None:
            self.is_managed = is_managed
        if password is not None:
            self.password = password
        if allow_removal is not None:
            self.allow_removal = allow_removal
        if assigned_smart_groups is not None:
            self.assigned_smart_groups = assigned_smart_groups
        if excluded_smart_groups is not None:
            self.excluded_smart_groups = excluded_smart_groups
        if managed_location_group_id is not None:
            self.managed_location_group_id = managed_location_group_id
        if assigned_geofence_area is not None:
            self.assigned_geofence_area = assigned_geofence_area
        if assigned_schedule is not None:
            self.assigned_schedule = assigned_schedule
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if profile_uuid is not None:
            self.profile_uuid = profile_uuid
        if is_provisioned_for_oobe is not None:
            self.is_provisioned_for_oobe = is_provisioned_for_oobe
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def profile_id(self):
        """Gets the profile_id of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets profileId.  # noqa: E501

        :return: The profile_id of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this GeneralPayloadV4Entity.

        Gets or sets profileId.  # noqa: E501

        :param profile_id: The profile_id of this GeneralPayloadV4Entity.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    @property
    def afw_oem_settings_enabled(self):
        """Gets the afw_oem_settings_enabled of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets tracks if AFW OEM settings are enabled.  # noqa: E501

        :return: The afw_oem_settings_enabled of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: bool
        """
        return self._afw_oem_settings_enabled

    @afw_oem_settings_enabled.setter
    def afw_oem_settings_enabled(self, afw_oem_settings_enabled):
        """Sets the afw_oem_settings_enabled of this GeneralPayloadV4Entity.

        Gets or sets tracks if AFW OEM settings are enabled.  # noqa: E501

        :param afw_oem_settings_enabled: The afw_oem_settings_enabled of this GeneralPayloadV4Entity.  # noqa: E501
        :type: bool
        """

        self._afw_oem_settings_enabled = afw_oem_settings_enabled

    @property
    def afw_oem_type(self):
        """Gets the afw_oem_type of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets tracks what OEM settings have been included.  # noqa: E501

        :return: The afw_oem_type of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_oem_type

    @afw_oem_type.setter
    def afw_oem_type(self, afw_oem_type):
        """Sets the afw_oem_type of this GeneralPayloadV4Entity.

        Gets or sets tracks what OEM settings have been included.  # noqa: E501

        :param afw_oem_type: The afw_oem_type of this GeneralPayloadV4Entity.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                afw_oem_type not in allowed_values):
            raise ValueError(
                "Invalid value for `afw_oem_type` ({0}), must be one of {1}"  # noqa: E501
                .format(afw_oem_type, allowed_values)
            )

        self._afw_oem_type = afw_oem_type

    @property
    def name(self):
        """Gets the name of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets name.  # noqa: E501

        :return: The name of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeneralPayloadV4Entity.

        Gets or sets name.  # noqa: E501

        :param name: The name of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets description.  # noqa: E501

        :return: The description of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GeneralPayloadV4Entity.

        Gets or sets description.  # noqa: E501

        :param description: The description of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def profile_scope(self):
        """Gets the profile_scope of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets device Profile Scope.  # noqa: E501

        :return: The profile_scope of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._profile_scope

    @profile_scope.setter
    def profile_scope(self, profile_scope):
        """Sets the profile_scope of this GeneralPayloadV4Entity.

        Gets or sets device Profile Scope.  # noqa: E501

        :param profile_scope: The profile_scope of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._profile_scope = profile_scope

    @property
    def version(self):
        """Gets the version of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets version.  # noqa: E501

        :return: The version of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GeneralPayloadV4Entity.

        Gets or sets version.  # noqa: E501

        :param version: The version of this GeneralPayloadV4Entity.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def create_new_version(self):
        """Gets the create_new_version of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets a value indicating whether add New Version.  # noqa: E501

        :return: The create_new_version of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: bool
        """
        return self._create_new_version

    @create_new_version.setter
    def create_new_version(self, create_new_version):
        """Sets the create_new_version of this GeneralPayloadV4Entity.

        Gets or sets a value indicating whether add New Version.  # noqa: E501

        :param create_new_version: The create_new_version of this GeneralPayloadV4Entity.  # noqa: E501
        :type: bool
        """

        self._create_new_version = create_new_version

    @property
    def assignment_type(self):
        """Gets the assignment_type of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets assignment Type.  # noqa: E501

        :return: The assignment_type of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this GeneralPayloadV4Entity.

        Gets or sets assignment Type.  # noqa: E501

        :param assignment_type: The assignment_type of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._assignment_type = assignment_type

    @property
    def profile_context(self):
        """Gets the profile_context of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets the profile context.  # noqa: E501

        :return: The profile_context of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._profile_context

    @profile_context.setter
    def profile_context(self, profile_context):
        """Sets the profile_context of this GeneralPayloadV4Entity.

        Gets or sets the profile context.  # noqa: E501

        :param profile_context: The profile_context of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._profile_context = profile_context

    @property
    def enable_provisioning(self):
        """Gets the enable_provisioning of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets a value indicating whether flag to indicate Profile will be used for Product Provisioning. Valid values: true, false.  # noqa: E501

        :return: The enable_provisioning of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_provisioning

    @enable_provisioning.setter
    def enable_provisioning(self, enable_provisioning):
        """Sets the enable_provisioning of this GeneralPayloadV4Entity.

        Gets or sets a value indicating whether flag to indicate Profile will be used for Product Provisioning. Valid values: true, false.  # noqa: E501

        :param enable_provisioning: The enable_provisioning of this GeneralPayloadV4Entity.  # noqa: E501
        :type: bool
        """

        self._enable_provisioning = enable_provisioning

    @property
    def is_active(self):
        """Gets the is_active of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets a value indicating whether flag to indicate Profile Status.  # noqa: E501

        :return: The is_active of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this GeneralPayloadV4Entity.

        Gets or sets a value indicating whether flag to indicate Profile Status.  # noqa: E501

        :param is_active: The is_active of this GeneralPayloadV4Entity.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_managed(self):
        """Gets the is_managed of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets a value indicating whether is Managed.  # noqa: E501

        :return: The is_managed of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: bool
        """
        return self._is_managed

    @is_managed.setter
    def is_managed(self, is_managed):
        """Sets the is_managed of this GeneralPayloadV4Entity.

        Gets or sets a value indicating whether is Managed.  # noqa: E501

        :param is_managed: The is_managed of this GeneralPayloadV4Entity.  # noqa: E501
        :type: bool
        """

        self._is_managed = is_managed

    @property
    def password(self):
        """Gets the password of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets unlock Password.  # noqa: E501

        :return: The password of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this GeneralPayloadV4Entity.

        Gets or sets unlock Password.  # noqa: E501

        :param password: The password of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def allow_removal(self):
        """Gets the allow_removal of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets the allow removal.  # noqa: E501

        :return: The allow_removal of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._allow_removal

    @allow_removal.setter
    def allow_removal(self, allow_removal):
        """Sets the allow_removal of this GeneralPayloadV4Entity.

        Gets or sets the allow removal.  # noqa: E501

        :param allow_removal: The allow_removal of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._allow_removal = allow_removal

    @property
    def assigned_smart_groups(self):
        """Gets the assigned_smart_groups of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets the smart groups.  # noqa: E501

        :return: The assigned_smart_groups of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: list[SmartGroupEntity]
        """
        return self._assigned_smart_groups

    @assigned_smart_groups.setter
    def assigned_smart_groups(self, assigned_smart_groups):
        """Sets the assigned_smart_groups of this GeneralPayloadV4Entity.

        Gets or sets the smart groups.  # noqa: E501

        :param assigned_smart_groups: The assigned_smart_groups of this GeneralPayloadV4Entity.  # noqa: E501
        :type: list[SmartGroupEntity]
        """

        self._assigned_smart_groups = assigned_smart_groups

    @property
    def excluded_smart_groups(self):
        """Gets the excluded_smart_groups of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets the excluded groups.  # noqa: E501

        :return: The excluded_smart_groups of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: list[SmartGroupEntity]
        """
        return self._excluded_smart_groups

    @excluded_smart_groups.setter
    def excluded_smart_groups(self, excluded_smart_groups):
        """Sets the excluded_smart_groups of this GeneralPayloadV4Entity.

        Gets or sets the excluded groups.  # noqa: E501

        :param excluded_smart_groups: The excluded_smart_groups of this GeneralPayloadV4Entity.  # noqa: E501
        :type: list[SmartGroupEntity]
        """

        self._excluded_smart_groups = excluded_smart_groups

    @property
    def managed_location_group_id(self):
        """Gets the managed_location_group_id of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets the ID of the RootLocationGroup.  # noqa: E501

        :return: The managed_location_group_id of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: int
        """
        return self._managed_location_group_id

    @managed_location_group_id.setter
    def managed_location_group_id(self, managed_location_group_id):
        """Sets the managed_location_group_id of this GeneralPayloadV4Entity.

        Gets or sets the ID of the RootLocationGroup.  # noqa: E501

        :param managed_location_group_id: The managed_location_group_id of this GeneralPayloadV4Entity.  # noqa: E501
        :type: int
        """

        self._managed_location_group_id = managed_location_group_id

    @property
    def assigned_geofence_area(self):
        """Gets the assigned_geofence_area of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets the area ids.  # noqa: E501

        :return: The assigned_geofence_area of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: list[int]
        """
        return self._assigned_geofence_area

    @assigned_geofence_area.setter
    def assigned_geofence_area(self, assigned_geofence_area):
        """Sets the assigned_geofence_area of this GeneralPayloadV4Entity.

        Gets or sets the area ids.  # noqa: E501

        :param assigned_geofence_area: The assigned_geofence_area of this GeneralPayloadV4Entity.  # noqa: E501
        :type: list[int]
        """

        self._assigned_geofence_area = assigned_geofence_area

    @property
    def assigned_schedule(self):
        """Gets the assigned_schedule of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets the scheduled ids.  # noqa: E501

        :return: The assigned_schedule of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: list[int]
        """
        return self._assigned_schedule

    @assigned_schedule.setter
    def assigned_schedule(self, assigned_schedule):
        """Sets the assigned_schedule of this GeneralPayloadV4Entity.

        Gets or sets the scheduled ids.  # noqa: E501

        :param assigned_schedule: The assigned_schedule of this GeneralPayloadV4Entity.  # noqa: E501
        :type: list[int]
        """

        self._assigned_schedule = assigned_schedule

    @property
    def expiration_date(self):
        """Gets the expiration_date of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets expiration Date of the Profile [Applicable for Apple Profiles].  # noqa: E501

        :return: The expiration_date of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this GeneralPayloadV4Entity.

        Gets or sets expiration Date of the Profile [Applicable for Apple Profiles].  # noqa: E501

        :param expiration_date: The expiration_date of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def profile_uuid(self):
        """Gets the profile_uuid of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets the Profile Unique Identifier.  # noqa: E501

        :return: The profile_uuid of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._profile_uuid

    @profile_uuid.setter
    def profile_uuid(self, profile_uuid):
        """Sets the profile_uuid of this GeneralPayloadV4Entity.

        Gets or sets the Profile Unique Identifier.  # noqa: E501

        :param profile_uuid: The profile_uuid of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._profile_uuid = profile_uuid

    @property
    def is_provisioned_for_oobe(self):
        """Gets the is_provisioned_for_oobe of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets a value indicating whether is profile to be included for oobe provisioning.  # noqa: E501

        :return: The is_provisioned_for_oobe of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: bool
        """
        return self._is_provisioned_for_oobe

    @is_provisioned_for_oobe.setter
    def is_provisioned_for_oobe(self, is_provisioned_for_oobe):
        """Sets the is_provisioned_for_oobe of this GeneralPayloadV4Entity.

        Gets or sets a value indicating whether is profile to be included for oobe provisioning.  # noqa: E501

        :param is_provisioned_for_oobe: The is_provisioned_for_oobe of this GeneralPayloadV4Entity.  # noqa: E501
        :type: bool
        """

        self._is_provisioned_for_oobe = is_provisioned_for_oobe

    @property
    def id(self):
        """Gets the id of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GeneralPayloadV4Entity.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this GeneralPayloadV4Entity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this GeneralPayloadV4Entity.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this GeneralPayloadV4Entity.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this GeneralPayloadV4Entity.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this GeneralPayloadV4Entity.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneralPayloadV4Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralPayloadV4Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeneralPayloadV4Entity):
            return True

        return self.to_dict() != other.to_dict()
