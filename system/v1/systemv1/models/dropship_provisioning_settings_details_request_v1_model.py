# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class DropshipProvisioningSettingsDetailsRequestV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'organization_group_uuid': 'str',
        'sub_organization_groups': 'list[SubOrganizationGroupV1Model]',
        'enable_dropship_provisioning': 'bool'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'organization_group_uuid': 'organization_group_uuid',
        'sub_organization_groups': 'sub_organization_groups',
        'enable_dropship_provisioning': 'enable_dropship_provisioning'
    }

    def __init__(self, username=None, password=None, organization_group_uuid=None, sub_organization_groups=None, enable_dropship_provisioning=None, _configuration=None):  # noqa: E501
        """DropshipProvisioningSettingsDetailsRequestV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username = None
        self._password = None
        self._organization_group_uuid = None
        self._sub_organization_groups = None
        self._enable_dropship_provisioning = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if sub_organization_groups is not None:
            self.sub_organization_groups = sub_organization_groups
        if enable_dropship_provisioning is not None:
            self.enable_dropship_provisioning = enable_dropship_provisioning

    @property
    def username(self):
        """Gets the username of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501

        Dropship provisioning staging user name  # noqa: E501

        :return: The username of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DropshipProvisioningSettingsDetailsRequestV1Model.

        Dropship provisioning staging user name  # noqa: E501

        :param username: The username of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501

        Dropship provisioning staging user account password  # noqa: E501

        :return: The password of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DropshipProvisioningSettingsDetailsRequestV1Model.

        Dropship provisioning staging user account password  # noqa: E501

        :param password: The password of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501

        The unique identifier (UUID) of the Organization Group  # noqa: E501

        :return: The organization_group_uuid of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this DropshipProvisioningSettingsDetailsRequestV1Model.

        The unique identifier (UUID) of the Organization Group  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def sub_organization_groups(self):
        """Gets the sub_organization_groups of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501

        Sub Organization groups  # noqa: E501

        :return: The sub_organization_groups of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :rtype: list[SubOrganizationGroupV1Model]
        """
        return self._sub_organization_groups

    @sub_organization_groups.setter
    def sub_organization_groups(self, sub_organization_groups):
        """Sets the sub_organization_groups of this DropshipProvisioningSettingsDetailsRequestV1Model.

        Sub Organization groups  # noqa: E501

        :param sub_organization_groups: The sub_organization_groups of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :type: list[SubOrganizationGroupV1Model]
        """

        self._sub_organization_groups = sub_organization_groups

    @property
    def enable_dropship_provisioning(self):
        """Gets the enable_dropship_provisioning of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501

        Enable Workspace ONE Drop Ship Provisioning  # noqa: E501

        :return: The enable_dropship_provisioning of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dropship_provisioning

    @enable_dropship_provisioning.setter
    def enable_dropship_provisioning(self, enable_dropship_provisioning):
        """Sets the enable_dropship_provisioning of this DropshipProvisioningSettingsDetailsRequestV1Model.

        Enable Workspace ONE Drop Ship Provisioning  # noqa: E501

        :param enable_dropship_provisioning: The enable_dropship_provisioning of this DropshipProvisioningSettingsDetailsRequestV1Model.  # noqa: E501
        :type: bool
        """

        self._enable_dropship_provisioning = enable_dropship_provisioning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DropshipProvisioningSettingsDetailsRequestV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DropshipProvisioningSettingsDetailsRequestV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DropshipProvisioningSettingsDetailsRequestV1Model):
            return True

        return self.to_dict() != other.to_dict()
