# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class EnrollmentCustomAttributesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def enrollment_custom_attributes_create_custom_attributes_for_reg_devices(self, serialnumber, custom_attributes, **kwargs):  # noqa: E501
        """Creates multiple new device custom attributes for a registered device.  # noqa: E501

        Creates new device custom attributes for regisered devices. Device Serial number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_create_custom_attributes_for_reg_devices(serialnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serial number  (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes  (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_custom_attributes_create_custom_attributes_for_reg_devices_with_http_info(serialnumber, custom_attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_custom_attributes_create_custom_attributes_for_reg_devices_with_http_info(serialnumber, custom_attributes, **kwargs)  # noqa: E501
            return data

    def enrollment_custom_attributes_create_custom_attributes_for_reg_devices_with_http_info(self, serialnumber, custom_attributes, **kwargs):  # noqa: E501
        """Creates multiple new device custom attributes for a registered device.  # noqa: E501

        Creates new device custom attributes for regisered devices. Device Serial number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_create_custom_attributes_for_reg_devices_with_http_info(serialnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serial number  (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes  (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serialnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_custom_attributes_create_custom_attributes_for_reg_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serialnumber' is set
        if self.api_client.client_side_validation and ('serialnumber' not in params or
                                                       params['serialnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serialnumber` when calling `enrollment_custom_attributes_create_custom_attributes_for_reg_devices`")  # noqa: E501
        # verify the required parameter 'custom_attributes' is set
        if self.api_client.client_side_validation and ('custom_attributes' not in params or
                                                       params['custom_attributes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_attributes` when calling `enrollment_custom_attributes_create_custom_attributes_for_reg_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serialnumber' in params:
            path_params['serialnumber'] = params['serialnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/serialnumber/{serialnumber}/createcustomattributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_custom_attributes_create_custom_attributes_for_reg_devices_by_asset_nr(self, assetnumber, custom_attributes, **kwargs):  # noqa: E501
        """Creates multiple new device custom attributes for a registered device.  # noqa: E501

        Creates new device custom attributes for regisered devices. Device Asset number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_create_custom_attributes_for_reg_devices_by_asset_nr(assetnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device Asset number (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_custom_attributes_create_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(assetnumber, custom_attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_custom_attributes_create_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(assetnumber, custom_attributes, **kwargs)  # noqa: E501
            return data

    def enrollment_custom_attributes_create_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(self, assetnumber, custom_attributes, **kwargs):  # noqa: E501
        """Creates multiple new device custom attributes for a registered device.  # noqa: E501

        Creates new device custom attributes for regisered devices. Device Asset number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_create_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(assetnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device Asset number (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assetnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_custom_attributes_create_custom_attributes_for_reg_devices_by_asset_nr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assetnumber' is set
        if self.api_client.client_side_validation and ('assetnumber' not in params or
                                                       params['assetnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assetnumber` when calling `enrollment_custom_attributes_create_custom_attributes_for_reg_devices_by_asset_nr`")  # noqa: E501
        # verify the required parameter 'custom_attributes' is set
        if self.api_client.client_side_validation and ('custom_attributes' not in params or
                                                       params['custom_attributes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_attributes` when calling `enrollment_custom_attributes_create_custom_attributes_for_reg_devices_by_asset_nr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assetnumber' in params:
            path_params['assetnumber'] = params['assetnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/assetnumber/{assetnumber}/createcustomattributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_custom_attributes_delete_custom_attributes_for_reg_devices(self, serialnumber, custom_attributes, **kwargs):  # noqa: E501
        """Deletes multiple device custom attribute values for a registered device.  # noqa: E501

        Deletes device custom attributes for a regisered device. Device Serial number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_delete_custom_attributes_for_reg_devices(serialnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serial number (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_with_http_info(serialnumber, custom_attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_with_http_info(serialnumber, custom_attributes, **kwargs)  # noqa: E501
            return data

    def enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_with_http_info(self, serialnumber, custom_attributes, **kwargs):  # noqa: E501
        """Deletes multiple device custom attribute values for a registered device.  # noqa: E501

        Deletes device custom attributes for a regisered device. Device Serial number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_with_http_info(serialnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serial number (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serialnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_custom_attributes_delete_custom_attributes_for_reg_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serialnumber' is set
        if self.api_client.client_side_validation and ('serialnumber' not in params or
                                                       params['serialnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serialnumber` when calling `enrollment_custom_attributes_delete_custom_attributes_for_reg_devices`")  # noqa: E501
        # verify the required parameter 'custom_attributes' is set
        if self.api_client.client_side_validation and ('custom_attributes' not in params or
                                                       params['custom_attributes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_attributes` when calling `enrollment_custom_attributes_delete_custom_attributes_for_reg_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serialnumber' in params:
            path_params['serialnumber'] = params['serialnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/serialnumber/{serialnumber}/deletecustomattributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_by_asset_nr(self, assetnumber, custom_attributes, **kwargs):  # noqa: E501
        """Deletes multiple device custom attribute values for a registered device.  # noqa: E501

        Deletes device custom attributes for a regisered device. Device asset number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_by_asset_nr(assetnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device asset number (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(assetnumber, custom_attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(assetnumber, custom_attributes, **kwargs)  # noqa: E501
            return data

    def enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(self, assetnumber, custom_attributes, **kwargs):  # noqa: E501
        """Deletes multiple device custom attribute values for a registered device.  # noqa: E501

        Deletes device custom attributes for a regisered device. Device asset number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(assetnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device asset number (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assetnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_by_asset_nr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assetnumber' is set
        if self.api_client.client_side_validation and ('assetnumber' not in params or
                                                       params['assetnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assetnumber` when calling `enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_by_asset_nr`")  # noqa: E501
        # verify the required parameter 'custom_attributes' is set
        if self.api_client.client_side_validation and ('custom_attributes' not in params or
                                                       params['custom_attributes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_attributes` when calling `enrollment_custom_attributes_delete_custom_attributes_for_reg_devices_by_asset_nr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assetnumber' in params:
            path_params['assetnumber'] = params['assetnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/assetnumber/{assetnumber}/deletecustomattributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_custom_attributes_update_custom_attributes_for_reg_devices(self, serialnumber, custom_attributes, **kwargs):  # noqa: E501
        """Updates multiple device custom attribute values for a registered device.  # noqa: E501

        Updates device custom attributes for a regisered device. Device Serial number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_update_custom_attributes_for_reg_devices(serialnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serial number  (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes  (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_custom_attributes_update_custom_attributes_for_reg_devices_with_http_info(serialnumber, custom_attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_custom_attributes_update_custom_attributes_for_reg_devices_with_http_info(serialnumber, custom_attributes, **kwargs)  # noqa: E501
            return data

    def enrollment_custom_attributes_update_custom_attributes_for_reg_devices_with_http_info(self, serialnumber, custom_attributes, **kwargs):  # noqa: E501
        """Updates multiple device custom attribute values for a registered device.  # noqa: E501

        Updates device custom attributes for a regisered device. Device Serial number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_update_custom_attributes_for_reg_devices_with_http_info(serialnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serial number  (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes  (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serialnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_custom_attributes_update_custom_attributes_for_reg_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serialnumber' is set
        if self.api_client.client_side_validation and ('serialnumber' not in params or
                                                       params['serialnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serialnumber` when calling `enrollment_custom_attributes_update_custom_attributes_for_reg_devices`")  # noqa: E501
        # verify the required parameter 'custom_attributes' is set
        if self.api_client.client_side_validation and ('custom_attributes' not in params or
                                                       params['custom_attributes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_attributes` when calling `enrollment_custom_attributes_update_custom_attributes_for_reg_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serialnumber' in params:
            path_params['serialnumber'] = params['serialnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/serialnumber/{serialnumber}/updatecustomattributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_custom_attributes_update_custom_attributes_for_reg_devices_by_asset_nr(self, assetnumber, custom_attributes, **kwargs):  # noqa: E501
        """Updates multiple device custom attribute values for a registered device.  # noqa: E501

        Updates device custom attributes for a regisered device. Device asset number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_update_custom_attributes_for_reg_devices_by_asset_nr(assetnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device asset number (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_custom_attributes_update_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(assetnumber, custom_attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_custom_attributes_update_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(assetnumber, custom_attributes, **kwargs)  # noqa: E501
            return data

    def enrollment_custom_attributes_update_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(self, assetnumber, custom_attributes, **kwargs):  # noqa: E501
        """Updates multiple device custom attribute values for a registered device.  # noqa: E501

        Updates device custom attributes for a regisered device. Device asset number is used as the key to find the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_custom_attributes_update_custom_attributes_for_reg_devices_by_asset_nr_with_http_info(assetnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device asset number (Required). (required)
        :param CustomAttributeListModel custom_attributes: An Entity for the custom attributes (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assetnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_custom_attributes_update_custom_attributes_for_reg_devices_by_asset_nr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assetnumber' is set
        if self.api_client.client_side_validation and ('assetnumber' not in params or
                                                       params['assetnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assetnumber` when calling `enrollment_custom_attributes_update_custom_attributes_for_reg_devices_by_asset_nr`")  # noqa: E501
        # verify the required parameter 'custom_attributes' is set
        if self.api_client.client_side_validation and ('custom_attributes' not in params or
                                                       params['custom_attributes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_attributes` when calling `enrollment_custom_attributes_update_custom_attributes_for_reg_devices_by_asset_nr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assetnumber' in params:
            path_params['assetnumber'] = params['assetnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/assetnumber/{assetnumber}/updatecustomattributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
