# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXRestrictionMediaPayloadEntity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_access': 'AppleOsXNetworkAccessAirDropPayloadEntity_',
        'internal_hard_disk_media_access': 'AppleOsXMediaAccessEntity_',
        'external_hard_disk_media_access': 'AppleOsXMediaAccessEntity_',
        'hard_disk_images': 'AppleOsXMediaAccessEntity_',
        'hard_disk_dvd_ram': 'AppleOsXMediaAccessEntity_',
        'disk_media_cds': 'AppleOsXMediaAccessEntity_',
        'disk_media_dvds': 'AppleOsXMediaAccessEntity_',
        'recordable_disc': 'AppleOsXRestrictionBurnsupportPayloadEntity_',
        'auto_eject_media': 'bool'
    }

    attribute_map = {
        'network_access': 'NetworkAccess',
        'internal_hard_disk_media_access': 'InternalHardDiskMediaAccess',
        'external_hard_disk_media_access': 'ExternalHardDiskMediaAccess',
        'hard_disk_images': 'HardDiskImages',
        'hard_disk_dvd_ram': 'HardDiskDvdRam',
        'disk_media_cds': 'DiskMediaCDs',
        'disk_media_dvds': 'DiskMediaDVDs',
        'recordable_disc': 'RecordableDisc',
        'auto_eject_media': 'AutoEjectMedia'
    }

    def __init__(self, network_access=None, internal_hard_disk_media_access=None, external_hard_disk_media_access=None, hard_disk_images=None, hard_disk_dvd_ram=None, disk_media_cds=None, disk_media_dvds=None, recordable_disc=None, auto_eject_media=None, _configuration=None):  # noqa: E501
        """AppleOsXRestrictionMediaPayloadEntity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._network_access = None
        self._internal_hard_disk_media_access = None
        self._external_hard_disk_media_access = None
        self._hard_disk_images = None
        self._hard_disk_dvd_ram = None
        self._disk_media_cds = None
        self._disk_media_dvds = None
        self._recordable_disc = None
        self._auto_eject_media = None
        self.discriminator = None

        if network_access is not None:
            self.network_access = network_access
        if internal_hard_disk_media_access is not None:
            self.internal_hard_disk_media_access = internal_hard_disk_media_access
        if external_hard_disk_media_access is not None:
            self.external_hard_disk_media_access = external_hard_disk_media_access
        if hard_disk_images is not None:
            self.hard_disk_images = hard_disk_images
        if hard_disk_dvd_ram is not None:
            self.hard_disk_dvd_ram = hard_disk_dvd_ram
        if disk_media_cds is not None:
            self.disk_media_cds = disk_media_cds
        if disk_media_dvds is not None:
            self.disk_media_dvds = disk_media_dvds
        if recordable_disc is not None:
            self.recordable_disc = recordable_disc
        if auto_eject_media is not None:
            self.auto_eject_media = auto_eject_media

    @property
    def network_access(self):
        """Gets the network_access of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501

        Gets or sets network Access AirDrop payload.  # noqa: E501

        :return: The network_access of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXNetworkAccessAirDropPayloadEntity_
        """
        return self._network_access

    @network_access.setter
    def network_access(self, network_access):
        """Sets the network_access of this AppleOsXRestrictionMediaPayloadEntity_.

        Gets or sets network Access AirDrop payload.  # noqa: E501

        :param network_access: The network_access of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :type: AppleOsXNetworkAccessAirDropPayloadEntity_
        """

        self._network_access = network_access

    @property
    def internal_hard_disk_media_access(self):
        """Gets the internal_hard_disk_media_access of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501

        Gets or sets media Access for internal hard disks.  # noqa: E501

        :return: The internal_hard_disk_media_access of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXMediaAccessEntity_
        """
        return self._internal_hard_disk_media_access

    @internal_hard_disk_media_access.setter
    def internal_hard_disk_media_access(self, internal_hard_disk_media_access):
        """Sets the internal_hard_disk_media_access of this AppleOsXRestrictionMediaPayloadEntity_.

        Gets or sets media Access for internal hard disks.  # noqa: E501

        :param internal_hard_disk_media_access: The internal_hard_disk_media_access of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :type: AppleOsXMediaAccessEntity_
        """

        self._internal_hard_disk_media_access = internal_hard_disk_media_access

    @property
    def external_hard_disk_media_access(self):
        """Gets the external_hard_disk_media_access of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501

        Gets or sets media Access for external hard disks.  # noqa: E501

        :return: The external_hard_disk_media_access of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXMediaAccessEntity_
        """
        return self._external_hard_disk_media_access

    @external_hard_disk_media_access.setter
    def external_hard_disk_media_access(self, external_hard_disk_media_access):
        """Sets the external_hard_disk_media_access of this AppleOsXRestrictionMediaPayloadEntity_.

        Gets or sets media Access for external hard disks.  # noqa: E501

        :param external_hard_disk_media_access: The external_hard_disk_media_access of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :type: AppleOsXMediaAccessEntity_
        """

        self._external_hard_disk_media_access = external_hard_disk_media_access

    @property
    def hard_disk_images(self):
        """Gets the hard_disk_images of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501

        Gets or sets media Access for hard disk images.  # noqa: E501

        :return: The hard_disk_images of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXMediaAccessEntity_
        """
        return self._hard_disk_images

    @hard_disk_images.setter
    def hard_disk_images(self, hard_disk_images):
        """Sets the hard_disk_images of this AppleOsXRestrictionMediaPayloadEntity_.

        Gets or sets media Access for hard disk images.  # noqa: E501

        :param hard_disk_images: The hard_disk_images of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :type: AppleOsXMediaAccessEntity_
        """

        self._hard_disk_images = hard_disk_images

    @property
    def hard_disk_dvd_ram(self):
        """Gets the hard_disk_dvd_ram of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501

        Gets or sets media Access for DVD-RAMs.  # noqa: E501

        :return: The hard_disk_dvd_ram of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXMediaAccessEntity_
        """
        return self._hard_disk_dvd_ram

    @hard_disk_dvd_ram.setter
    def hard_disk_dvd_ram(self, hard_disk_dvd_ram):
        """Sets the hard_disk_dvd_ram of this AppleOsXRestrictionMediaPayloadEntity_.

        Gets or sets media Access for DVD-RAMs.  # noqa: E501

        :param hard_disk_dvd_ram: The hard_disk_dvd_ram of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :type: AppleOsXMediaAccessEntity_
        """

        self._hard_disk_dvd_ram = hard_disk_dvd_ram

    @property
    def disk_media_cds(self):
        """Gets the disk_media_cds of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501

        Gets or sets media Access for CDs.  # noqa: E501

        :return: The disk_media_cds of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXMediaAccessEntity_
        """
        return self._disk_media_cds

    @disk_media_cds.setter
    def disk_media_cds(self, disk_media_cds):
        """Sets the disk_media_cds of this AppleOsXRestrictionMediaPayloadEntity_.

        Gets or sets media Access for CDs.  # noqa: E501

        :param disk_media_cds: The disk_media_cds of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :type: AppleOsXMediaAccessEntity_
        """

        self._disk_media_cds = disk_media_cds

    @property
    def disk_media_dvds(self):
        """Gets the disk_media_dvds of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501

        Gets or sets media Access for DVDs.  # noqa: E501

        :return: The disk_media_dvds of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXMediaAccessEntity_
        """
        return self._disk_media_dvds

    @disk_media_dvds.setter
    def disk_media_dvds(self, disk_media_dvds):
        """Sets the disk_media_dvds of this AppleOsXRestrictionMediaPayloadEntity_.

        Gets or sets media Access for DVDs.  # noqa: E501

        :param disk_media_dvds: The disk_media_dvds of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :type: AppleOsXMediaAccessEntity_
        """

        self._disk_media_dvds = disk_media_dvds

    @property
    def recordable_disc(self):
        """Gets the recordable_disc of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501

        Gets or sets restriction Burn support payload.  # noqa: E501

        :return: The recordable_disc of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :rtype: AppleOsXRestrictionBurnsupportPayloadEntity_
        """
        return self._recordable_disc

    @recordable_disc.setter
    def recordable_disc(self, recordable_disc):
        """Sets the recordable_disc of this AppleOsXRestrictionMediaPayloadEntity_.

        Gets or sets restriction Burn support payload.  # noqa: E501

        :param recordable_disc: The recordable_disc of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :type: AppleOsXRestrictionBurnsupportPayloadEntity_
        """

        self._recordable_disc = recordable_disc

    @property
    def auto_eject_media(self):
        """Gets the auto_eject_media of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, the media will be ejected if possible when the user logs out.  # noqa: E501

        :return: The auto_eject_media of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._auto_eject_media

    @auto_eject_media.setter
    def auto_eject_media(self, auto_eject_media):
        """Sets the auto_eject_media of this AppleOsXRestrictionMediaPayloadEntity_.

        Gets or sets a value indicating whether if set to true, the media will be ejected if possible when the user logs out.  # noqa: E501

        :param auto_eject_media: The auto_eject_media of this AppleOsXRestrictionMediaPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._auto_eject_media = auto_eject_media

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXRestrictionMediaPayloadEntity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXRestrictionMediaPayloadEntity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXRestrictionMediaPayloadEntity_):
            return True

        return self.to_dict() != other.to_dict()
