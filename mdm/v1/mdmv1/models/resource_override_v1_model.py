# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ResourceOverrideV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'override_type': 'str',
        'resource_uuid': 'str',
        'source': 'str',
        'source_info': 'SourceInfoV1',
        'policy': 'ResourcePolicyV1',
        'metadata': 'dict(str, str)',
        'action': 'str',
        'version': 'str',
        'target': 'str'
    }

    attribute_map = {
        'resource_type': 'resource_type',
        'override_type': 'override_type',
        'resource_uuid': 'resource_uuid',
        'source': 'source',
        'source_info': 'source_info',
        'policy': 'policy',
        'metadata': 'metadata',
        'action': 'action',
        'version': 'version',
        'target': 'target'
    }

    def __init__(self, resource_type=None, override_type=None, resource_uuid=None, source=None, source_info=None, policy=None, metadata=None, action=None, version=None, target=None, _configuration=None):  # noqa: E501
        """ResourceOverrideV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._resource_type = None
        self._override_type = None
        self._resource_uuid = None
        self._source = None
        self._source_info = None
        self._policy = None
        self._metadata = None
        self._action = None
        self._version = None
        self._target = None
        self.discriminator = None

        if resource_type is not None:
            self.resource_type = resource_type
        if override_type is not None:
            self.override_type = override_type
        if resource_uuid is not None:
            self.resource_uuid = resource_uuid
        if source is not None:
            self.source = source
        if source_info is not None:
            self.source_info = source_info
        if policy is not None:
            self.policy = policy
        if metadata is not None:
            self.metadata = metadata
        if action is not None:
            self.action = action
        if version is not None:
            self.version = version
        if target is not None:
            self.target = target

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceOverrideV1Model.  # noqa: E501


        :return: The resource_type of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceOverrideV1Model.


        :param resource_type: The resource_type of this ResourceOverrideV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "APPS", "WORKFLOWS", "PROFILES", "TIME_WINDOW", "SCRIPTS", "SENSORS", "PROVISIONING_PRODUCT", "UPDATE_POLICY", "OSUPDATE", "BOOKS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                resource_type not in allowed_values):
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def override_type(self):
        """Gets the override_type of this ResourceOverrideV1Model.  # noqa: E501


        :return: The override_type of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: str
        """
        return self._override_type

    @override_type.setter
    def override_type(self, override_type):
        """Sets the override_type of this ResourceOverrideV1Model.


        :param override_type: The override_type of this ResourceOverrideV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["ONE_TIME", "PERMANENT", "ONETIME_PERSISTABLE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                override_type not in allowed_values):
            raise ValueError(
                "Invalid value for `override_type` ({0}), must be one of {1}"  # noqa: E501
                .format(override_type, allowed_values)
            )

        self._override_type = override_type

    @property
    def resource_uuid(self):
        """Gets the resource_uuid of this ResourceOverrideV1Model.  # noqa: E501


        :return: The resource_uuid of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: str
        """
        return self._resource_uuid

    @resource_uuid.setter
    def resource_uuid(self, resource_uuid):
        """Sets the resource_uuid of this ResourceOverrideV1Model.


        :param resource_uuid: The resource_uuid of this ResourceOverrideV1Model.  # noqa: E501
        :type: str
        """

        self._resource_uuid = resource_uuid

    @property
    def source(self):
        """Gets the source of this ResourceOverrideV1Model.  # noqa: E501


        :return: The source of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ResourceOverrideV1Model.


        :param source: The source of this ResourceOverrideV1Model.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_info(self):
        """Gets the source_info of this ResourceOverrideV1Model.  # noqa: E501


        :return: The source_info of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: SourceInfoV1
        """
        return self._source_info

    @source_info.setter
    def source_info(self, source_info):
        """Sets the source_info of this ResourceOverrideV1Model.


        :param source_info: The source_info of this ResourceOverrideV1Model.  # noqa: E501
        :type: SourceInfoV1
        """

        self._source_info = source_info

    @property
    def policy(self):
        """Gets the policy of this ResourceOverrideV1Model.  # noqa: E501


        :return: The policy of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: ResourcePolicyV1
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ResourceOverrideV1Model.


        :param policy: The policy of this ResourceOverrideV1Model.  # noqa: E501
        :type: ResourcePolicyV1
        """

        self._policy = policy

    @property
    def metadata(self):
        """Gets the metadata of this ResourceOverrideV1Model.  # noqa: E501


        :return: The metadata of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ResourceOverrideV1Model.


        :param metadata: The metadata of this ResourceOverrideV1Model.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def action(self):
        """Gets the action of this ResourceOverrideV1Model.  # noqa: E501


        :return: The action of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ResourceOverrideV1Model.


        :param action: The action of this ResourceOverrideV1Model.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def version(self):
        """Gets the version of this ResourceOverrideV1Model.  # noqa: E501


        :return: The version of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ResourceOverrideV1Model.


        :param version: The version of this ResourceOverrideV1Model.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def target(self):
        """Gets the target of this ResourceOverrideV1Model.  # noqa: E501


        :return: The target of this ResourceOverrideV1Model.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ResourceOverrideV1Model.


        :param target: The target of this ResourceOverrideV1Model.  # noqa: E501
        :type: str
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceOverrideV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceOverrideV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceOverrideV1Model):
            return True

        return self.to_dict() != other.to_dict()
