# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXEmailPayloadEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_description': 'str',
        'account_type': 'str',
        'path_prefix': 'str',
        'user_display_name': 'str',
        'email_address': 'str',
        'incoming_mail_server_host_name': 'str',
        'incoming_mail_server_port_number': 'str',
        'incoming_mail_server_username': 'str',
        'incoming_mail_server_authentication': 'str',
        'incoming_password': 'str',
        'incoming_mail_server_use_ssl': 'bool',
        'outgoing_mail_server_host_name': 'str',
        'outgoing_mail_server_port_number': 'str',
        'outgoing_mail_server_username': 'str',
        'outgoing_mail_server_authentication': 'str',
        'outgoing_password_same_as_incoming': 'bool',
        'outgoing_password': 'str',
        'outgoing_mail_server_use_ssl': 'bool'
    }

    attribute_map = {
        'account_description': 'AccountDescription',
        'account_type': 'AccountType',
        'path_prefix': 'PathPrefix',
        'user_display_name': 'UserDisplayName',
        'email_address': 'EmailAddress',
        'incoming_mail_server_host_name': 'IncomingMailServerHostName',
        'incoming_mail_server_port_number': 'IncomingMailServerPortNumber',
        'incoming_mail_server_username': 'IncomingMailServerUsername',
        'incoming_mail_server_authentication': 'IncomingMailServerAuthentication',
        'incoming_password': 'IncomingPassword',
        'incoming_mail_server_use_ssl': 'IncomingMailServerUseSSL',
        'outgoing_mail_server_host_name': 'OutgoingMailServerHostName',
        'outgoing_mail_server_port_number': 'OutgoingMailServerPortNumber',
        'outgoing_mail_server_username': 'OutgoingMailServerUsername',
        'outgoing_mail_server_authentication': 'OutgoingMailServerAuthentication',
        'outgoing_password_same_as_incoming': 'OutgoingPasswordSameAsIncoming',
        'outgoing_password': 'OutgoingPassword',
        'outgoing_mail_server_use_ssl': 'OutgoingMailServerUseSSL'
    }

    def __init__(self, account_description=None, account_type=None, path_prefix=None, user_display_name=None, email_address=None, incoming_mail_server_host_name=None, incoming_mail_server_port_number=None, incoming_mail_server_username=None, incoming_mail_server_authentication=None, incoming_password=None, incoming_mail_server_use_ssl=None, outgoing_mail_server_host_name=None, outgoing_mail_server_port_number=None, outgoing_mail_server_username=None, outgoing_mail_server_authentication=None, outgoing_password_same_as_incoming=None, outgoing_password=None, outgoing_mail_server_use_ssl=None, _configuration=None):  # noqa: E501
        """AppleOsXEmailPayloadEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_description = None
        self._account_type = None
        self._path_prefix = None
        self._user_display_name = None
        self._email_address = None
        self._incoming_mail_server_host_name = None
        self._incoming_mail_server_port_number = None
        self._incoming_mail_server_username = None
        self._incoming_mail_server_authentication = None
        self._incoming_password = None
        self._incoming_mail_server_use_ssl = None
        self._outgoing_mail_server_host_name = None
        self._outgoing_mail_server_port_number = None
        self._outgoing_mail_server_username = None
        self._outgoing_mail_server_authentication = None
        self._outgoing_password_same_as_incoming = None
        self._outgoing_password = None
        self._outgoing_mail_server_use_ssl = None
        self.discriminator = None

        if account_description is not None:
            self.account_description = account_description
        if account_type is not None:
            self.account_type = account_type
        if path_prefix is not None:
            self.path_prefix = path_prefix
        if user_display_name is not None:
            self.user_display_name = user_display_name
        if email_address is not None:
            self.email_address = email_address
        if incoming_mail_server_host_name is not None:
            self.incoming_mail_server_host_name = incoming_mail_server_host_name
        if incoming_mail_server_port_number is not None:
            self.incoming_mail_server_port_number = incoming_mail_server_port_number
        if incoming_mail_server_username is not None:
            self.incoming_mail_server_username = incoming_mail_server_username
        if incoming_mail_server_authentication is not None:
            self.incoming_mail_server_authentication = incoming_mail_server_authentication
        if incoming_password is not None:
            self.incoming_password = incoming_password
        if incoming_mail_server_use_ssl is not None:
            self.incoming_mail_server_use_ssl = incoming_mail_server_use_ssl
        if outgoing_mail_server_host_name is not None:
            self.outgoing_mail_server_host_name = outgoing_mail_server_host_name
        if outgoing_mail_server_port_number is not None:
            self.outgoing_mail_server_port_number = outgoing_mail_server_port_number
        if outgoing_mail_server_username is not None:
            self.outgoing_mail_server_username = outgoing_mail_server_username
        if outgoing_mail_server_authentication is not None:
            self.outgoing_mail_server_authentication = outgoing_mail_server_authentication
        if outgoing_password_same_as_incoming is not None:
            self.outgoing_password_same_as_incoming = outgoing_password_same_as_incoming
        if outgoing_password is not None:
            self.outgoing_password = outgoing_password
        if outgoing_mail_server_use_ssl is not None:
            self.outgoing_mail_server_use_ssl = outgoing_mail_server_use_ssl

    @property
    def account_description(self):
        """Gets the account_description of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets a user-visible description of the email account, shown in the Mail and Settings applications.  # noqa: E501

        :return: The account_description of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._account_description

    @account_description.setter
    def account_description(self, account_description):
        """Sets the account_description of this AppleOsXEmailPayloadEntity.

        Gets or sets a user-visible description of the email account, shown in the Mail and Settings applications.  # noqa: E501

        :param account_description: The account_description of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                account_description is not None and len(account_description) > 255):
            raise ValueError("Invalid value for `account_description`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_description is not None and len(account_description) < 0):
            raise ValueError("Invalid value for `account_description`, length must be greater than or equal to `0`")  # noqa: E501

        self._account_description = account_description

    @property
    def account_type(self):
        """Gets the account_type of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets defines the protocol to be used for that account.  # noqa: E501

        :return: The account_type of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this AppleOsXEmailPayloadEntity.

        Gets or sets defines the protocol to be used for that account.  # noqa: E501

        :param account_type: The account_type of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                account_type is not None and len(account_type) > 255):
            raise ValueError("Invalid value for `account_type`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_type is not None and len(account_type) < 0):
            raise ValueError("Invalid value for `account_type`, length must be greater than or equal to `0`")  # noqa: E501

        self._account_type = account_type

    @property
    def path_prefix(self):
        """Gets the path_prefix of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets path prefix for IMAP mail server.  # noqa: E501

        :return: The path_prefix of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._path_prefix

    @path_prefix.setter
    def path_prefix(self, path_prefix):
        """Sets the path_prefix of this AppleOsXEmailPayloadEntity.

        Gets or sets path prefix for IMAP mail server.  # noqa: E501

        :param path_prefix: The path_prefix of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                path_prefix is not None and len(path_prefix) > 255):
            raise ValueError("Invalid value for `path_prefix`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                path_prefix is not None and len(path_prefix) < 0):
            raise ValueError("Invalid value for `path_prefix`, length must be greater than or equal to `0`")  # noqa: E501

        self._path_prefix = path_prefix

    @property
    def user_display_name(self):
        """Gets the user_display_name of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets the full user name for the account.  # noqa: E501

        :return: The user_display_name of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_display_name

    @user_display_name.setter
    def user_display_name(self, user_display_name):
        """Sets the user_display_name of this AppleOsXEmailPayloadEntity.

        Gets or sets the full user name for the account.  # noqa: E501

        :param user_display_name: The user_display_name of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_display_name is not None and len(user_display_name) > 255):
            raise ValueError("Invalid value for `user_display_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user_display_name is not None and len(user_display_name) < 0):
            raise ValueError("Invalid value for `user_display_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._user_display_name = user_display_name

    @property
    def email_address(self):
        """Gets the email_address of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets designates the full email address for the account.  # noqa: E501

        :return: The email_address of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AppleOsXEmailPayloadEntity.

        Gets or sets designates the full email address for the account.  # noqa: E501

        :param email_address: The email_address of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email_address is not None and len(email_address) > 255):
            raise ValueError("Invalid value for `email_address`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                email_address is not None and len(email_address) < 0):
            raise ValueError("Invalid value for `email_address`, length must be greater than or equal to `0`")  # noqa: E501

        self._email_address = email_address

    @property
    def incoming_mail_server_host_name(self):
        """Gets the incoming_mail_server_host_name of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets designates the incoming mail server host name (or IP address).  # noqa: E501

        :return: The incoming_mail_server_host_name of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_host_name

    @incoming_mail_server_host_name.setter
    def incoming_mail_server_host_name(self, incoming_mail_server_host_name):
        """Sets the incoming_mail_server_host_name of this AppleOsXEmailPayloadEntity.

        Gets or sets designates the incoming mail server host name (or IP address).  # noqa: E501

        :param incoming_mail_server_host_name: The incoming_mail_server_host_name of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                incoming_mail_server_host_name is not None and len(incoming_mail_server_host_name) > 255):
            raise ValueError("Invalid value for `incoming_mail_server_host_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                incoming_mail_server_host_name is not None and len(incoming_mail_server_host_name) < 0):
            raise ValueError("Invalid value for `incoming_mail_server_host_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._incoming_mail_server_host_name = incoming_mail_server_host_name

    @property
    def incoming_mail_server_port_number(self):
        """Gets the incoming_mail_server_port_number of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets designates the incoming mail server port number.  # noqa: E501

        :return: The incoming_mail_server_port_number of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_port_number

    @incoming_mail_server_port_number.setter
    def incoming_mail_server_port_number(self, incoming_mail_server_port_number):
        """Sets the incoming_mail_server_port_number of this AppleOsXEmailPayloadEntity.

        Gets or sets designates the incoming mail server port number.  # noqa: E501

        :param incoming_mail_server_port_number: The incoming_mail_server_port_number of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_port_number = incoming_mail_server_port_number

    @property
    def incoming_mail_server_username(self):
        """Gets the incoming_mail_server_username of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets designates the user name for the email account, usually the same as the email address up to the @ character.  # noqa: E501

        :return: The incoming_mail_server_username of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_username

    @incoming_mail_server_username.setter
    def incoming_mail_server_username(self, incoming_mail_server_username):
        """Sets the incoming_mail_server_username of this AppleOsXEmailPayloadEntity.

        Gets or sets designates the user name for the email account, usually the same as the email address up to the @ character.  # noqa: E501

        :param incoming_mail_server_username: The incoming_mail_server_username of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                incoming_mail_server_username is not None and len(incoming_mail_server_username) > 255):
            raise ValueError("Invalid value for `incoming_mail_server_username`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                incoming_mail_server_username is not None and len(incoming_mail_server_username) < 0):
            raise ValueError("Invalid value for `incoming_mail_server_username`, length must be greater than or equal to `0`")  # noqa: E501

        self._incoming_mail_server_username = incoming_mail_server_username

    @property
    def incoming_mail_server_authentication(self):
        """Gets the incoming_mail_server_authentication of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets designates the authentication scheme for incoming mail.  # noqa: E501

        :return: The incoming_mail_server_authentication of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_authentication

    @incoming_mail_server_authentication.setter
    def incoming_mail_server_authentication(self, incoming_mail_server_authentication):
        """Sets the incoming_mail_server_authentication of this AppleOsXEmailPayloadEntity.

        Gets or sets designates the authentication scheme for incoming mail.  # noqa: E501

        :param incoming_mail_server_authentication: The incoming_mail_server_authentication of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_authentication = incoming_mail_server_authentication

    @property
    def incoming_password(self):
        """Gets the incoming_password of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets password for the Incoming Mail Server.  # noqa: E501

        :return: The incoming_password of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_password

    @incoming_password.setter
    def incoming_password(self, incoming_password):
        """Sets the incoming_password of this AppleOsXEmailPayloadEntity.

        Gets or sets password for the Incoming Mail Server.  # noqa: E501

        :param incoming_password: The incoming_password of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                incoming_password is not None and len(incoming_password) > 255):
            raise ValueError("Invalid value for `incoming_password`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                incoming_password is not None and len(incoming_password) < 0):
            raise ValueError("Invalid value for `incoming_password`, length must be greater than or equal to `0`")  # noqa: E501

        self._incoming_password = incoming_password

    @property
    def incoming_mail_server_use_ssl(self):
        """Gets the incoming_mail_server_use_ssl of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether designates whether the incoming mail server uses SSL for authentication.  # noqa: E501

        :return: The incoming_mail_server_use_ssl of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._incoming_mail_server_use_ssl

    @incoming_mail_server_use_ssl.setter
    def incoming_mail_server_use_ssl(self, incoming_mail_server_use_ssl):
        """Sets the incoming_mail_server_use_ssl of this AppleOsXEmailPayloadEntity.

        Gets or sets a value indicating whether designates whether the incoming mail server uses SSL for authentication.  # noqa: E501

        :param incoming_mail_server_use_ssl: The incoming_mail_server_use_ssl of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._incoming_mail_server_use_ssl = incoming_mail_server_use_ssl

    @property
    def outgoing_mail_server_host_name(self):
        """Gets the outgoing_mail_server_host_name of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets designates the outgoing mail server host name (or IP address).  # noqa: E501

        :return: The outgoing_mail_server_host_name of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_host_name

    @outgoing_mail_server_host_name.setter
    def outgoing_mail_server_host_name(self, outgoing_mail_server_host_name):
        """Sets the outgoing_mail_server_host_name of this AppleOsXEmailPayloadEntity.

        Gets or sets designates the outgoing mail server host name (or IP address).  # noqa: E501

        :param outgoing_mail_server_host_name: The outgoing_mail_server_host_name of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_host_name = outgoing_mail_server_host_name

    @property
    def outgoing_mail_server_port_number(self):
        """Gets the outgoing_mail_server_port_number of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets designates the outgoing mail server port number.  # noqa: E501

        :return: The outgoing_mail_server_port_number of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_port_number

    @outgoing_mail_server_port_number.setter
    def outgoing_mail_server_port_number(self, outgoing_mail_server_port_number):
        """Sets the outgoing_mail_server_port_number of this AppleOsXEmailPayloadEntity.

        Gets or sets designates the outgoing mail server port number.  # noqa: E501

        :param outgoing_mail_server_port_number: The outgoing_mail_server_port_number of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_port_number = outgoing_mail_server_port_number

    @property
    def outgoing_mail_server_username(self):
        """Gets the outgoing_mail_server_username of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets designates the user name for the email account, usually the same as the email address up to the @ character.  # noqa: E501

        :return: The outgoing_mail_server_username of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_username

    @outgoing_mail_server_username.setter
    def outgoing_mail_server_username(self, outgoing_mail_server_username):
        """Sets the outgoing_mail_server_username of this AppleOsXEmailPayloadEntity.

        Gets or sets designates the user name for the email account, usually the same as the email address up to the @ character.  # noqa: E501

        :param outgoing_mail_server_username: The outgoing_mail_server_username of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_username = outgoing_mail_server_username

    @property
    def outgoing_mail_server_authentication(self):
        """Gets the outgoing_mail_server_authentication of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets designates the authentication scheme for outgoing mail.  # noqa: E501

        :return: The outgoing_mail_server_authentication of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_authentication

    @outgoing_mail_server_authentication.setter
    def outgoing_mail_server_authentication(self, outgoing_mail_server_authentication):
        """Sets the outgoing_mail_server_authentication of this AppleOsXEmailPayloadEntity.

        Gets or sets designates the authentication scheme for outgoing mail.  # noqa: E501

        :param outgoing_mail_server_authentication: The outgoing_mail_server_authentication of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_authentication = outgoing_mail_server_authentication

    @property
    def outgoing_password_same_as_incoming(self):
        """Gets the outgoing_password_same_as_incoming of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if set, the user will be prompted for the password only once and it will be used for both outgoing and incoming mail.  # noqa: E501

        :return: The outgoing_password_same_as_incoming of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._outgoing_password_same_as_incoming

    @outgoing_password_same_as_incoming.setter
    def outgoing_password_same_as_incoming(self, outgoing_password_same_as_incoming):
        """Sets the outgoing_password_same_as_incoming of this AppleOsXEmailPayloadEntity.

        Gets or sets a value indicating whether if set, the user will be prompted for the password only once and it will be used for both outgoing and incoming mail.  # noqa: E501

        :param outgoing_password_same_as_incoming: The outgoing_password_same_as_incoming of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._outgoing_password_same_as_incoming = outgoing_password_same_as_incoming

    @property
    def outgoing_password(self):
        """Gets the outgoing_password of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets password for the Outgoing Mail Server.  # noqa: E501

        :return: The outgoing_password of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_password

    @outgoing_password.setter
    def outgoing_password(self, outgoing_password):
        """Sets the outgoing_password of this AppleOsXEmailPayloadEntity.

        Gets or sets password for the Outgoing Mail Server.  # noqa: E501

        :param outgoing_password: The outgoing_password of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: str
        """

        self._outgoing_password = outgoing_password

    @property
    def outgoing_mail_server_use_ssl(self):
        """Gets the outgoing_mail_server_use_ssl of this AppleOsXEmailPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether designates whether the outgoing mail server uses SSL for authentication.  # noqa: E501

        :return: The outgoing_mail_server_use_ssl of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._outgoing_mail_server_use_ssl

    @outgoing_mail_server_use_ssl.setter
    def outgoing_mail_server_use_ssl(self, outgoing_mail_server_use_ssl):
        """Sets the outgoing_mail_server_use_ssl of this AppleOsXEmailPayloadEntity.

        Gets or sets a value indicating whether designates whether the outgoing mail server uses SSL for authentication.  # noqa: E501

        :param outgoing_mail_server_use_ssl: The outgoing_mail_server_use_ssl of this AppleOsXEmailPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._outgoing_mail_server_use_ssl = outgoing_mail_server_use_ssl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXEmailPayloadEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXEmailPayloadEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXEmailPayloadEntity):
            return True

        return self.to_dict() != other.to_dict()
