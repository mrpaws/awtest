# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class UserModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'object_identifier': 'str',
        'user_name': 'str',
        'full_name': 'str',
        'display_name': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'email_address': 'str',
        'email_user_name': 'str',
        'mobile_phone': 'str',
        'phone_number': 'str',
        'distinguished_name': 'str',
        'user_principal_name': 'str',
        'department': 'str',
        'status': 'str',
        'lockout_time': 'str',
        'last_modified': 'str',
        'employee_id': 'str',
        'cost_center': 'str',
        'manager_distinguished_name': 'str',
        'domain': 'str',
        'custom_attribute1': 'str',
        'custom_attribute2': 'str',
        'custom_attribute3': 'str',
        'custom_attribute4': 'str',
        'custom_attribute5': 'str',
        'member_of': 'list[MemberOf]'
    }

    attribute_map = {
        'user_id': 'UserId',
        'object_identifier': 'ObjectIdentifier',
        'user_name': 'UserName',
        'full_name': 'FullName',
        'display_name': 'DisplayName',
        'first_name': 'FirstName',
        'middle_name': 'MiddleName',
        'last_name': 'LastName',
        'email_address': 'EmailAddress',
        'email_user_name': 'EmailUserName',
        'mobile_phone': 'MobilePhone',
        'phone_number': 'PhoneNumber',
        'distinguished_name': 'DistinguishedName',
        'user_principal_name': 'UserPrincipalName',
        'department': 'Department',
        'status': 'Status',
        'lockout_time': 'LockoutTime',
        'last_modified': 'LastModified',
        'employee_id': 'EmployeeId',
        'cost_center': 'CostCenter',
        'manager_distinguished_name': 'ManagerDistinguishedName',
        'domain': 'Domain',
        'custom_attribute1': 'CustomAttribute1',
        'custom_attribute2': 'CustomAttribute2',
        'custom_attribute3': 'CustomAttribute3',
        'custom_attribute4': 'CustomAttribute4',
        'custom_attribute5': 'CustomAttribute5',
        'member_of': 'MemberOf'
    }

    def __init__(self, user_id=None, object_identifier=None, user_name=None, full_name=None, display_name=None, first_name=None, middle_name=None, last_name=None, email_address=None, email_user_name=None, mobile_phone=None, phone_number=None, distinguished_name=None, user_principal_name=None, department=None, status=None, lockout_time=None, last_modified=None, employee_id=None, cost_center=None, manager_distinguished_name=None, domain=None, custom_attribute1=None, custom_attribute2=None, custom_attribute3=None, custom_attribute4=None, custom_attribute5=None, member_of=None, _configuration=None):  # noqa: E501
        """UserModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_id = None
        self._object_identifier = None
        self._user_name = None
        self._full_name = None
        self._display_name = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._email_address = None
        self._email_user_name = None
        self._mobile_phone = None
        self._phone_number = None
        self._distinguished_name = None
        self._user_principal_name = None
        self._department = None
        self._status = None
        self._lockout_time = None
        self._last_modified = None
        self._employee_id = None
        self._cost_center = None
        self._manager_distinguished_name = None
        self._domain = None
        self._custom_attribute1 = None
        self._custom_attribute2 = None
        self._custom_attribute3 = None
        self._custom_attribute4 = None
        self._custom_attribute5 = None
        self._member_of = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if object_identifier is not None:
            self.object_identifier = object_identifier
        if user_name is not None:
            self.user_name = user_name
        if full_name is not None:
            self.full_name = full_name
        if display_name is not None:
            self.display_name = display_name
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        if email_address is not None:
            self.email_address = email_address
        if email_user_name is not None:
            self.email_user_name = email_user_name
        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if phone_number is not None:
            self.phone_number = phone_number
        if distinguished_name is not None:
            self.distinguished_name = distinguished_name
        if user_principal_name is not None:
            self.user_principal_name = user_principal_name
        if department is not None:
            self.department = department
        if status is not None:
            self.status = status
        if lockout_time is not None:
            self.lockout_time = lockout_time
        if last_modified is not None:
            self.last_modified = last_modified
        if employee_id is not None:
            self.employee_id = employee_id
        if cost_center is not None:
            self.cost_center = cost_center
        if manager_distinguished_name is not None:
            self.manager_distinguished_name = manager_distinguished_name
        if domain is not None:
            self.domain = domain
        if custom_attribute1 is not None:
            self.custom_attribute1 = custom_attribute1
        if custom_attribute2 is not None:
            self.custom_attribute2 = custom_attribute2
        if custom_attribute3 is not None:
            self.custom_attribute3 = custom_attribute3
        if custom_attribute4 is not None:
            self.custom_attribute4 = custom_attribute4
        if custom_attribute5 is not None:
            self.custom_attribute5 = custom_attribute5
        if member_of is not None:
            self.member_of = member_of

    @property
    def user_id(self):
        """Gets the user_id of this UserModel.  # noqa: E501

        Gets or sets the enrollment user id.  # noqa: E501

        :return: The user_id of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserModel.

        Gets or sets the enrollment user id.  # noqa: E501

        :param user_id: The user_id of this UserModel.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def object_identifier(self):
        """Gets the object_identifier of this UserModel.  # noqa: E501

        Gets or sets the enrollment user object identifier.  # noqa: E501

        :return: The object_identifier of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._object_identifier

    @object_identifier.setter
    def object_identifier(self, object_identifier):
        """Sets the object_identifier of this UserModel.

        Gets or sets the enrollment user object identifier.  # noqa: E501

        :param object_identifier: The object_identifier of this UserModel.  # noqa: E501
        :type: str
        """

        self._object_identifier = object_identifier

    @property
    def user_name(self):
        """Gets the user_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user username.  # noqa: E501

        :return: The user_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserModel.

        Gets or sets the enrollment user username.  # noqa: E501

        :param user_name: The user_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def full_name(self):
        """Gets the full_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user full name.  # noqa: E501

        :return: The full_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserModel.

        Gets or sets the enrollment user full name.  # noqa: E501

        :param full_name: The full_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def display_name(self):
        """Gets the display_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user display name.  # noqa: E501

        :return: The display_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserModel.

        Gets or sets the enrollment user display name.  # noqa: E501

        :param display_name: The display_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def first_name(self):
        """Gets the first_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user first name.  # noqa: E501

        :return: The first_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserModel.

        Gets or sets the enrollment user first name.  # noqa: E501

        :param first_name: The first_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user middle name.  # noqa: E501

        :return: The middle_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserModel.

        Gets or sets the enrollment user middle name.  # noqa: E501

        :param middle_name: The middle_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user last name.  # noqa: E501

        :return: The last_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserModel.

        Gets or sets the enrollment user last name.  # noqa: E501

        :param last_name: The last_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email_address(self):
        """Gets the email_address of this UserModel.  # noqa: E501

        Gets or sets the enrollment user email address.  # noqa: E501

        :return: The email_address of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UserModel.

        Gets or sets the enrollment user email address.  # noqa: E501

        :param email_address: The email_address of this UserModel.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def email_user_name(self):
        """Gets the email_user_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user email username.  # noqa: E501

        :return: The email_user_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._email_user_name

    @email_user_name.setter
    def email_user_name(self, email_user_name):
        """Sets the email_user_name of this UserModel.

        Gets or sets the enrollment user email username.  # noqa: E501

        :param email_user_name: The email_user_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._email_user_name = email_user_name

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this UserModel.  # noqa: E501

        Gets or sets the enrollment user mobile phone.  # noqa: E501

        :return: The mobile_phone of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this UserModel.

        Gets or sets the enrollment user mobile phone.  # noqa: E501

        :param mobile_phone: The mobile_phone of this UserModel.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def phone_number(self):
        """Gets the phone_number of this UserModel.  # noqa: E501

        Gets or sets the enrollment user phone number.  # noqa: E501

        :return: The phone_number of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserModel.

        Gets or sets the enrollment user phone number.  # noqa: E501

        :param phone_number: The phone_number of this UserModel.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def distinguished_name(self):
        """Gets the distinguished_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user distinguished name.  # noqa: E501

        :return: The distinguished_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._distinguished_name

    @distinguished_name.setter
    def distinguished_name(self, distinguished_name):
        """Sets the distinguished_name of this UserModel.

        Gets or sets the enrollment user distinguished name.  # noqa: E501

        :param distinguished_name: The distinguished_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._distinguished_name = distinguished_name

    @property
    def user_principal_name(self):
        """Gets the user_principal_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user prinicipal name.  # noqa: E501

        :return: The user_principal_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._user_principal_name

    @user_principal_name.setter
    def user_principal_name(self, user_principal_name):
        """Sets the user_principal_name of this UserModel.

        Gets or sets the enrollment user prinicipal name.  # noqa: E501

        :param user_principal_name: The user_principal_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._user_principal_name = user_principal_name

    @property
    def department(self):
        """Gets the department of this UserModel.  # noqa: E501

        Gets or sets the enrollment user department.  # noqa: E501

        :return: The department of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this UserModel.

        Gets or sets the enrollment user department.  # noqa: E501

        :param department: The department of this UserModel.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def status(self):
        """Gets the status of this UserModel.  # noqa: E501

        Gets or sets the enrollment user status.  # noqa: E501

        :return: The status of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserModel.

        Gets or sets the enrollment user status.  # noqa: E501

        :param status: The status of this UserModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def lockout_time(self):
        """Gets the lockout_time of this UserModel.  # noqa: E501

        Gets or sets the enrollment user lockout time.  # noqa: E501

        :return: The lockout_time of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._lockout_time

    @lockout_time.setter
    def lockout_time(self, lockout_time):
        """Sets the lockout_time of this UserModel.

        Gets or sets the enrollment user lockout time.  # noqa: E501

        :param lockout_time: The lockout_time of this UserModel.  # noqa: E501
        :type: str
        """

        self._lockout_time = lockout_time

    @property
    def last_modified(self):
        """Gets the last_modified of this UserModel.  # noqa: E501

        Gets or sets the enrollment user last modified.  # noqa: E501

        :return: The last_modified of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this UserModel.

        Gets or sets the enrollment user last modified.  # noqa: E501

        :param last_modified: The last_modified of this UserModel.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def employee_id(self):
        """Gets the employee_id of this UserModel.  # noqa: E501

        Gets or sets the enrollment user employee identifier.  # noqa: E501

        :return: The employee_id of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this UserModel.

        Gets or sets the enrollment user employee identifier.  # noqa: E501

        :param employee_id: The employee_id of this UserModel.  # noqa: E501
        :type: str
        """

        self._employee_id = employee_id

    @property
    def cost_center(self):
        """Gets the cost_center of this UserModel.  # noqa: E501

        Gets or sets the enrollment user cost center.  # noqa: E501

        :return: The cost_center of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this UserModel.

        Gets or sets the enrollment user cost center.  # noqa: E501

        :param cost_center: The cost_center of this UserModel.  # noqa: E501
        :type: str
        """

        self._cost_center = cost_center

    @property
    def manager_distinguished_name(self):
        """Gets the manager_distinguished_name of this UserModel.  # noqa: E501

        Gets or sets the enrollment user manager distinguished name.  # noqa: E501

        :return: The manager_distinguished_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._manager_distinguished_name

    @manager_distinguished_name.setter
    def manager_distinguished_name(self, manager_distinguished_name):
        """Sets the manager_distinguished_name of this UserModel.

        Gets or sets the enrollment user manager distinguished name.  # noqa: E501

        :param manager_distinguished_name: The manager_distinguished_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._manager_distinguished_name = manager_distinguished_name

    @property
    def domain(self):
        """Gets the domain of this UserModel.  # noqa: E501

        Gets or sets the enrollment user domain.  # noqa: E501

        :return: The domain of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this UserModel.

        Gets or sets the enrollment user domain.  # noqa: E501

        :param domain: The domain of this UserModel.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def custom_attribute1(self):
        """Gets the custom_attribute1 of this UserModel.  # noqa: E501

        Gets or sets the enrollment user custom attribute 1.  # noqa: E501

        :return: The custom_attribute1 of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute1

    @custom_attribute1.setter
    def custom_attribute1(self, custom_attribute1):
        """Sets the custom_attribute1 of this UserModel.

        Gets or sets the enrollment user custom attribute 1.  # noqa: E501

        :param custom_attribute1: The custom_attribute1 of this UserModel.  # noqa: E501
        :type: str
        """

        self._custom_attribute1 = custom_attribute1

    @property
    def custom_attribute2(self):
        """Gets the custom_attribute2 of this UserModel.  # noqa: E501

        Gets or sets the enrollment user custom attribute 2.  # noqa: E501

        :return: The custom_attribute2 of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute2

    @custom_attribute2.setter
    def custom_attribute2(self, custom_attribute2):
        """Sets the custom_attribute2 of this UserModel.

        Gets or sets the enrollment user custom attribute 2.  # noqa: E501

        :param custom_attribute2: The custom_attribute2 of this UserModel.  # noqa: E501
        :type: str
        """

        self._custom_attribute2 = custom_attribute2

    @property
    def custom_attribute3(self):
        """Gets the custom_attribute3 of this UserModel.  # noqa: E501

        Gets or sets the enrollment user custom attribute 3.  # noqa: E501

        :return: The custom_attribute3 of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute3

    @custom_attribute3.setter
    def custom_attribute3(self, custom_attribute3):
        """Sets the custom_attribute3 of this UserModel.

        Gets or sets the enrollment user custom attribute 3.  # noqa: E501

        :param custom_attribute3: The custom_attribute3 of this UserModel.  # noqa: E501
        :type: str
        """

        self._custom_attribute3 = custom_attribute3

    @property
    def custom_attribute4(self):
        """Gets the custom_attribute4 of this UserModel.  # noqa: E501

        Gets or sets the enrollment user custom attribute 4.  # noqa: E501

        :return: The custom_attribute4 of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute4

    @custom_attribute4.setter
    def custom_attribute4(self, custom_attribute4):
        """Sets the custom_attribute4 of this UserModel.

        Gets or sets the enrollment user custom attribute 4.  # noqa: E501

        :param custom_attribute4: The custom_attribute4 of this UserModel.  # noqa: E501
        :type: str
        """

        self._custom_attribute4 = custom_attribute4

    @property
    def custom_attribute5(self):
        """Gets the custom_attribute5 of this UserModel.  # noqa: E501

        Gets or sets the enrollment user custom attribute 5.  # noqa: E501

        :return: The custom_attribute5 of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute5

    @custom_attribute5.setter
    def custom_attribute5(self, custom_attribute5):
        """Sets the custom_attribute5 of this UserModel.

        Gets or sets the enrollment user custom attribute 5.  # noqa: E501

        :param custom_attribute5: The custom_attribute5 of this UserModel.  # noqa: E501
        :type: str
        """

        self._custom_attribute5 = custom_attribute5

    @property
    def member_of(self):
        """Gets the member_of of this UserModel.  # noqa: E501

        Gets or sets the enrollment user member of.  # noqa: E501

        :return: The member_of of this UserModel.  # noqa: E501
        :rtype: list[MemberOf]
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of):
        """Sets the member_of of this UserModel.

        Gets or sets the enrollment user member of.  # noqa: E501

        :param member_of: The member_of of this UserModel.  # noqa: E501
        :type: list[MemberOf]
        """

        self._member_of = member_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserModel):
            return True

        return self.to_dict() != other.to_dict()
