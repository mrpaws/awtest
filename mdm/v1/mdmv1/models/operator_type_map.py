# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class OperatorTypeMap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'uem_logical_type': 'str',
        'operators': 'list[str]',
        'array_operators': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'uem_logical_type': 'uem_logical_type',
        'operators': 'operators',
        'array_operators': 'array_operators'
    }

    def __init__(self, type=None, uem_logical_type=None, operators=None, array_operators=None, _configuration=None):  # noqa: E501
        """OperatorTypeMap - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._uem_logical_type = None
        self._operators = None
        self._array_operators = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if uem_logical_type is not None:
            self.uem_logical_type = uem_logical_type
        if operators is not None:
            self.operators = operators
        if array_operators is not None:
            self.array_operators = array_operators

    @property
    def type(self):
        """Gets the type of this OperatorTypeMap.  # noqa: E501

        The type defined in Schema Registry.  # noqa: E501

        :return: The type of this OperatorTypeMap.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OperatorTypeMap.

        The type defined in Schema Registry.  # noqa: E501

        :param type: The type of this OperatorTypeMap.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uem_logical_type(self):
        """Gets the uem_logical_type of this OperatorTypeMap.  # noqa: E501

        The UemLogicalType for this type defined in Schema Registry.  # noqa: E501

        :return: The uem_logical_type of this OperatorTypeMap.  # noqa: E501
        :rtype: str
        """
        return self._uem_logical_type

    @uem_logical_type.setter
    def uem_logical_type(self, uem_logical_type):
        """Sets the uem_logical_type of this OperatorTypeMap.

        The UemLogicalType for this type defined in Schema Registry.  # noqa: E501

        :param uem_logical_type: The uem_logical_type of this OperatorTypeMap.  # noqa: E501
        :type: str
        """

        self._uem_logical_type = uem_logical_type

    @property
    def operators(self):
        """Gets the operators of this OperatorTypeMap.  # noqa: E501

        The Rules Engine operators supported for this type.  # noqa: E501

        :return: The operators of this OperatorTypeMap.  # noqa: E501
        :rtype: list[str]
        """
        return self._operators

    @operators.setter
    def operators(self, operators):
        """Sets the operators of this OperatorTypeMap.

        The Rules Engine operators supported for this type.  # noqa: E501

        :param operators: The operators of this OperatorTypeMap.  # noqa: E501
        :type: list[str]
        """

        self._operators = operators

    @property
    def array_operators(self):
        """Gets the array_operators of this OperatorTypeMap.  # noqa: E501

        The Rules Engine operators supported for arrays of this type.  # noqa: E501

        :return: The array_operators of this OperatorTypeMap.  # noqa: E501
        :rtype: list[str]
        """
        return self._array_operators

    @array_operators.setter
    def array_operators(self, array_operators):
        """Sets the array_operators of this OperatorTypeMap.

        The Rules Engine operators supported for arrays of this type.  # noqa: E501

        :param array_operators: The array_operators of this OperatorTypeMap.  # noqa: E501
        :type: list[str]
        """

        self._array_operators = array_operators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperatorTypeMap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatorTypeMap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperatorTypeMap):
            return True

        return self.to_dict() != other.to_dict()
