# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv1.api_client import ApiClient


class MacOsAppsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def mac_os_apps_v1_create_mac_os_application(self, mac_os_application_model, id, **kwargs):  # noqa: E501
        """New - Creates a new macOS application with provided metadata for distribution on macOS Devices  # noqa: E501

        Creates a new macOS application with provided metadata for distribution on macOS Devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mac_os_apps_v1_create_mac_os_application(mac_os_application_model, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MacOsCreateApplicationRequestV1Model mac_os_application_model: macOS application metadata and icons(Required). (required)
        :param int id: Unique identifier of the organization group to perform the operation.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mac_os_apps_v1_create_mac_os_application_with_http_info(mac_os_application_model, id, **kwargs)  # noqa: E501
        else:
            (data) = self.mac_os_apps_v1_create_mac_os_application_with_http_info(mac_os_application_model, id, **kwargs)  # noqa: E501
            return data

    def mac_os_apps_v1_create_mac_os_application_with_http_info(self, mac_os_application_model, id, **kwargs):  # noqa: E501
        """New - Creates a new macOS application with provided metadata for distribution on macOS Devices  # noqa: E501

        Creates a new macOS application with provided metadata for distribution on macOS Devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mac_os_apps_v1_create_mac_os_application_with_http_info(mac_os_application_model, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MacOsCreateApplicationRequestV1Model mac_os_application_model: macOS application metadata and icons(Required). (required)
        :param int id: Unique identifier of the organization group to perform the operation.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac_os_application_model', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mac_os_apps_v1_create_mac_os_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mac_os_application_model' is set
        if self.api_client.client_side_validation and ('mac_os_application_model' not in params or
                                                       params['mac_os_application_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mac_os_application_model` when calling `mac_os_apps_v1_create_mac_os_application`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `mac_os_apps_v1_create_mac_os_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mac_os_application_model' in params:
            body_params = params['mac_os_application_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}/macos/apps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mac_os_apps_v1_download_mac_os_application_metadata(self, organization_group_uuid, application_uuid, **kwargs):  # noqa: E501
        """New - Download xml macOS application metadata  # noqa: E501

        Download xml macOS application metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mac_os_apps_v1_download_mac_os_application_metadata(organization_group_uuid, application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Uuid of the organization group to perform the operation.(Required). (required)
        :param str application_uuid: Application Uuid to perform the operation on.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mac_os_apps_v1_download_mac_os_application_metadata_with_http_info(organization_group_uuid, application_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.mac_os_apps_v1_download_mac_os_application_metadata_with_http_info(organization_group_uuid, application_uuid, **kwargs)  # noqa: E501
            return data

    def mac_os_apps_v1_download_mac_os_application_metadata_with_http_info(self, organization_group_uuid, application_uuid, **kwargs):  # noqa: E501
        """New - Download xml macOS application metadata  # noqa: E501

        Download xml macOS application metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mac_os_apps_v1_download_mac_os_application_metadata_with_http_info(organization_group_uuid, application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Uuid of the organization group to perform the operation.(Required). (required)
        :param str application_uuid: Application Uuid to perform the operation on.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'application_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mac_os_apps_v1_download_mac_os_application_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `mac_os_apps_v1_download_mac_os_application_metadata`")  # noqa: E501
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in params or
                                                       params['application_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_uuid` when calling `mac_os_apps_v1_download_mac_os_application_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501
        if 'application_uuid' in params:
            path_params['applicationUuid'] = params['application_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/macos/apps/{applicationUuid}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mac_os_apps_v1_update_mac_os_application(self, mac_os_application_model, id, application_id, **kwargs):  # noqa: E501
        """New - Updates a macOS application with provided metadata for distribution on macOS Devices  # noqa: E501

        Updates a macOS application with provided metadata for distribution on macOS Devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mac_os_apps_v1_update_mac_os_application(mac_os_application_model, id, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MacOsEditApplicationRequestV1Model mac_os_application_model: macOS application metadata and icons(Required). (required)
        :param int id: Unique identifier of the organization group to perform the operation.(Required). (required)
        :param str application_id: Application ID to perform the operation on.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mac_os_apps_v1_update_mac_os_application_with_http_info(mac_os_application_model, id, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mac_os_apps_v1_update_mac_os_application_with_http_info(mac_os_application_model, id, application_id, **kwargs)  # noqa: E501
            return data

    def mac_os_apps_v1_update_mac_os_application_with_http_info(self, mac_os_application_model, id, application_id, **kwargs):  # noqa: E501
        """New - Updates a macOS application with provided metadata for distribution on macOS Devices  # noqa: E501

        Updates a macOS application with provided metadata for distribution on macOS Devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mac_os_apps_v1_update_mac_os_application_with_http_info(mac_os_application_model, id, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MacOsEditApplicationRequestV1Model mac_os_application_model: macOS application metadata and icons(Required). (required)
        :param int id: Unique identifier of the organization group to perform the operation.(Required). (required)
        :param str application_id: Application ID to perform the operation on.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mac_os_application_model', 'id', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mac_os_apps_v1_update_mac_os_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mac_os_application_model' is set
        if self.api_client.client_side_validation and ('mac_os_application_model' not in params or
                                                       params['mac_os_application_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mac_os_application_model` when calling `mac_os_apps_v1_update_mac_os_application`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `mac_os_apps_v1_update_mac_os_application`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `mac_os_apps_v1_update_mac_os_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mac_os_application_model' in params:
            body_params = params['mac_os_application_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}/macos/apps/{applicationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
