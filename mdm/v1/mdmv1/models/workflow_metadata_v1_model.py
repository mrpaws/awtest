# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class WorkflowMetadataV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_uuid': 'str',
        'organization_group_uuid': 'str',
        'current_version': 'str',
        'name': 'str',
        'type': 'str',
        'device_type': 'int',
        'deployment_mode': 'int',
        'catalog_display': 'CatalogDisplayInfo',
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'workflow_entities': 'list[str]',
        'workflow_assignment_state': 'int',
        'implicit_workflow': 'bool'
    }

    attribute_map = {
        'workflow_uuid': 'workflow_uuid',
        'organization_group_uuid': 'organization_group_uuid',
        'current_version': 'current_version',
        'name': 'name',
        'type': 'type',
        'device_type': 'device_type',
        'deployment_mode': 'deployment_mode',
        'catalog_display': 'catalog_display',
        'created_on': 'created_on',
        'modified_on': 'modified_on',
        'workflow_entities': 'workflow_entities',
        'workflow_assignment_state': 'workflow_assignment_state',
        'implicit_workflow': 'implicit_workflow'
    }

    def __init__(self, workflow_uuid=None, organization_group_uuid=None, current_version=None, name=None, type=None, device_type=None, deployment_mode=None, catalog_display=None, created_on=None, modified_on=None, workflow_entities=None, workflow_assignment_state=None, implicit_workflow=None, _configuration=None):  # noqa: E501
        """WorkflowMetadataV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._workflow_uuid = None
        self._organization_group_uuid = None
        self._current_version = None
        self._name = None
        self._type = None
        self._device_type = None
        self._deployment_mode = None
        self._catalog_display = None
        self._created_on = None
        self._modified_on = None
        self._workflow_entities = None
        self._workflow_assignment_state = None
        self._implicit_workflow = None
        self.discriminator = None

        if workflow_uuid is not None:
            self.workflow_uuid = workflow_uuid
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if current_version is not None:
            self.current_version = current_version
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if device_type is not None:
            self.device_type = device_type
        if deployment_mode is not None:
            self.deployment_mode = deployment_mode
        if catalog_display is not None:
            self.catalog_display = catalog_display
        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        if workflow_entities is not None:
            self.workflow_entities = workflow_entities
        if workflow_assignment_state is not None:
            self.workflow_assignment_state = workflow_assignment_state
        if implicit_workflow is not None:
            self.implicit_workflow = implicit_workflow

    @property
    def workflow_uuid(self):
        """Gets the workflow_uuid of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The workflow_uuid of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: str
        """
        return self._workflow_uuid

    @workflow_uuid.setter
    def workflow_uuid(self, workflow_uuid):
        """Sets the workflow_uuid of this WorkflowMetadataV1Model.


        :param workflow_uuid: The workflow_uuid of this WorkflowMetadataV1Model.  # noqa: E501
        :type: str
        """

        self._workflow_uuid = workflow_uuid

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The organization_group_uuid of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this WorkflowMetadataV1Model.


        :param organization_group_uuid: The organization_group_uuid of this WorkflowMetadataV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def current_version(self):
        """Gets the current_version of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The current_version of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this WorkflowMetadataV1Model.


        :param current_version: The current_version of this WorkflowMetadataV1Model.  # noqa: E501
        :type: str
        """

        self._current_version = current_version

    @property
    def name(self):
        """Gets the name of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The name of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowMetadataV1Model.


        :param name: The name of this WorkflowMetadataV1Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The type of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkflowMetadataV1Model.


        :param type: The type of this WorkflowMetadataV1Model.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def device_type(self):
        """Gets the device_type of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The device_type of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this WorkflowMetadataV1Model.


        :param device_type: The device_type of this WorkflowMetadataV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 100, 101, 102, 103, 104, 105, 200, 201]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_type not in allowed_values):
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The deployment_mode of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: int
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this WorkflowMetadataV1Model.


        :param deployment_mode: The deployment_mode of this WorkflowMetadataV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                deployment_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    @property
    def catalog_display(self):
        """Gets the catalog_display of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The catalog_display of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: CatalogDisplayInfo
        """
        return self._catalog_display

    @catalog_display.setter
    def catalog_display(self, catalog_display):
        """Sets the catalog_display of this WorkflowMetadataV1Model.


        :param catalog_display: The catalog_display of this WorkflowMetadataV1Model.  # noqa: E501
        :type: CatalogDisplayInfo
        """

        self._catalog_display = catalog_display

    @property
    def created_on(self):
        """Gets the created_on of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The created_on of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this WorkflowMetadataV1Model.


        :param created_on: The created_on of this WorkflowMetadataV1Model.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The modified_on of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this WorkflowMetadataV1Model.


        :param modified_on: The modified_on of this WorkflowMetadataV1Model.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def workflow_entities(self):
        """Gets the workflow_entities of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The workflow_entities of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflow_entities

    @workflow_entities.setter
    def workflow_entities(self, workflow_entities):
        """Sets the workflow_entities of this WorkflowMetadataV1Model.


        :param workflow_entities: The workflow_entities of this WorkflowMetadataV1Model.  # noqa: E501
        :type: list[str]
        """

        self._workflow_entities = workflow_entities

    @property
    def workflow_assignment_state(self):
        """Gets the workflow_assignment_state of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The workflow_assignment_state of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: int
        """
        return self._workflow_assignment_state

    @workflow_assignment_state.setter
    def workflow_assignment_state(self, workflow_assignment_state):
        """Sets the workflow_assignment_state of this WorkflowMetadataV1Model.


        :param workflow_assignment_state: The workflow_assignment_state of this WorkflowMetadataV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6]  # noqa: E501
        if (self._configuration.client_side_validation and
                workflow_assignment_state not in allowed_values):
            raise ValueError(
                "Invalid value for `workflow_assignment_state` ({0}), must be one of {1}"  # noqa: E501
                .format(workflow_assignment_state, allowed_values)
            )

        self._workflow_assignment_state = workflow_assignment_state

    @property
    def implicit_workflow(self):
        """Gets the implicit_workflow of this WorkflowMetadataV1Model.  # noqa: E501


        :return: The implicit_workflow of this WorkflowMetadataV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._implicit_workflow

    @implicit_workflow.setter
    def implicit_workflow(self, implicit_workflow):
        """Sets the implicit_workflow of this WorkflowMetadataV1Model.


        :param implicit_workflow: The implicit_workflow of this WorkflowMetadataV1Model.  # noqa: E501
        :type: bool
        """

        self._implicit_workflow = implicit_workflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowMetadataV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowMetadataV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowMetadataV1Model):
            return True

        return self.to_dict() != other.to_dict()
