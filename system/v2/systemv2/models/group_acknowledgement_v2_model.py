# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv2.configuration import Configuration


class GroupAcknowledgementV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_results': 'int',
        'items_per_page': 'int',
        'add_count_in_current_page': 'int',
        'remove_count_in_current_page': 'int',
        'add_list': 'list[MembershipDetailModel]',
        'remove_list': 'list[MembershipDetailModel]',
        'merge_status': 'str',
        'last_sync_on_time': 'datetime',
        'access_token': 'str',
        'links': 'dict(str, JsonHalLinkModel)'
    }

    attribute_map = {
        'total_results': 'total_results',
        'items_per_page': 'items_per_page',
        'add_count_in_current_page': 'add_count_in_current_page',
        'remove_count_in_current_page': 'remove_count_in_current_page',
        'add_list': 'add_list',
        'remove_list': 'remove_list',
        'merge_status': 'merge_status',
        'last_sync_on_time': 'last_sync_on_time',
        'access_token': 'access_token',
        'links': '_links'
    }

    def __init__(self, total_results=None, items_per_page=None, add_count_in_current_page=None, remove_count_in_current_page=None, add_list=None, remove_list=None, merge_status=None, last_sync_on_time=None, access_token=None, links=None, _configuration=None):  # noqa: E501
        """GroupAcknowledgementV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_results = None
        self._items_per_page = None
        self._add_count_in_current_page = None
        self._remove_count_in_current_page = None
        self._add_list = None
        self._remove_list = None
        self._merge_status = None
        self._last_sync_on_time = None
        self._access_token = None
        self._links = None
        self.discriminator = None

        if total_results is not None:
            self.total_results = total_results
        if items_per_page is not None:
            self.items_per_page = items_per_page
        if add_count_in_current_page is not None:
            self.add_count_in_current_page = add_count_in_current_page
        if remove_count_in_current_page is not None:
            self.remove_count_in_current_page = remove_count_in_current_page
        if add_list is not None:
            self.add_list = add_list
        if remove_list is not None:
            self.remove_list = remove_list
        if merge_status is not None:
            self.merge_status = merge_status
        if last_sync_on_time is not None:
            self.last_sync_on_time = last_sync_on_time
        if access_token is not None:
            self.access_token = access_token
        if links is not None:
            self.links = links

    @property
    def total_results(self):
        """Gets the total_results of this GroupAcknowledgementV2Model.  # noqa: E501

        The total number of results returned by the list or query operation.  # noqa: E501

        :return: The total_results of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this GroupAcknowledgementV2Model.

        The total number of results returned by the list or query operation.  # noqa: E501

        :param total_results: The total_results of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: int
        """

        self._total_results = total_results

    @property
    def items_per_page(self):
        """Gets the items_per_page of this GroupAcknowledgementV2Model.  # noqa: E501

        The number of groups returned.  # noqa: E501

        :return: The items_per_page of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: int
        """
        return self._items_per_page

    @items_per_page.setter
    def items_per_page(self, items_per_page):
        """Sets the items_per_page of this GroupAcknowledgementV2Model.

        The number of groups returned.  # noqa: E501

        :param items_per_page: The items_per_page of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: int
        """

        self._items_per_page = items_per_page

    @property
    def add_count_in_current_page(self):
        """Gets the add_count_in_current_page of this GroupAcknowledgementV2Model.  # noqa: E501

        Total members pending to be added to group.  # noqa: E501

        :return: The add_count_in_current_page of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: int
        """
        return self._add_count_in_current_page

    @add_count_in_current_page.setter
    def add_count_in_current_page(self, add_count_in_current_page):
        """Sets the add_count_in_current_page of this GroupAcknowledgementV2Model.

        Total members pending to be added to group.  # noqa: E501

        :param add_count_in_current_page: The add_count_in_current_page of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: int
        """

        self._add_count_in_current_page = add_count_in_current_page

    @property
    def remove_count_in_current_page(self):
        """Gets the remove_count_in_current_page of this GroupAcknowledgementV2Model.  # noqa: E501

        Total members pending to be removed from the group.  # noqa: E501

        :return: The remove_count_in_current_page of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: int
        """
        return self._remove_count_in_current_page

    @remove_count_in_current_page.setter
    def remove_count_in_current_page(self, remove_count_in_current_page):
        """Sets the remove_count_in_current_page of this GroupAcknowledgementV2Model.

        Total members pending to be removed from the group.  # noqa: E501

        :param remove_count_in_current_page: The remove_count_in_current_page of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: int
        """

        self._remove_count_in_current_page = remove_count_in_current_page

    @property
    def add_list(self):
        """Gets the add_list of this GroupAcknowledgementV2Model.  # noqa: E501

        User details for which changes are pending.  # noqa: E501

        :return: The add_list of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: list[MembershipDetailModel]
        """
        return self._add_list

    @add_list.setter
    def add_list(self, add_list):
        """Sets the add_list of this GroupAcknowledgementV2Model.

        User details for which changes are pending.  # noqa: E501

        :param add_list: The add_list of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: list[MembershipDetailModel]
        """

        self._add_list = add_list

    @property
    def remove_list(self):
        """Gets the remove_list of this GroupAcknowledgementV2Model.  # noqa: E501

        User details for which changes are pending.  # noqa: E501

        :return: The remove_list of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: list[MembershipDetailModel]
        """
        return self._remove_list

    @remove_list.setter
    def remove_list(self, remove_list):
        """Sets the remove_list of this GroupAcknowledgementV2Model.

        User details for which changes are pending.  # noqa: E501

        :param remove_list: The remove_list of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: list[MembershipDetailModel]
        """

        self._remove_list = remove_list

    @property
    def merge_status(self):
        """Gets the merge_status of this GroupAcknowledgementV2Model.  # noqa: E501

        Status as retrieved for group.  # noqa: E501

        :return: The merge_status of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: str
        """
        return self._merge_status

    @merge_status.setter
    def merge_status(self, merge_status):
        """Sets the merge_status of this GroupAcknowledgementV2Model.

        Status as retrieved for group.  # noqa: E501

        :param merge_status: The merge_status of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: str
        """

        self._merge_status = merge_status

    @property
    def last_sync_on_time(self):
        """Gets the last_sync_on_time of this GroupAcknowledgementV2Model.  # noqa: E501

        Last sync On Time  # noqa: E501

        :return: The last_sync_on_time of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync_on_time

    @last_sync_on_time.setter
    def last_sync_on_time(self, last_sync_on_time):
        """Sets the last_sync_on_time of this GroupAcknowledgementV2Model.

        Last sync On Time  # noqa: E501

        :param last_sync_on_time: The last_sync_on_time of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: datetime
        """

        self._last_sync_on_time = last_sync_on_time

    @property
    def access_token(self):
        """Gets the access_token of this GroupAcknowledgementV2Model.  # noqa: E501

        Access token for the merge action.  # noqa: E501

        :return: The access_token of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this GroupAcknowledgementV2Model.

        Access token for the merge action.  # noqa: E501

        :param access_token: The access_token of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def links(self):
        """Gets the links of this GroupAcknowledgementV2Model.  # noqa: E501

        Gets a list of JSON HAL links.  # noqa: E501

        :return: The links of this GroupAcknowledgementV2Model.  # noqa: E501
        :rtype: dict(str, JsonHalLinkModel)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GroupAcknowledgementV2Model.

        Gets a list of JSON HAL links.  # noqa: E501

        :param links: The links of this GroupAcknowledgementV2Model.  # noqa: E501
        :type: dict(str, JsonHalLinkModel)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupAcknowledgementV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupAcknowledgementV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupAcknowledgementV2Model):
            return True

        return self.to_dict() != other.to_dict()
