# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class RemoteViewDestinationV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_id': 'int',
        'destination_name': 'str',
        'destination_mac_address': 'str',
        'destination_ip_address': 'str',
        'audio_port': 'int',
        'video_port': 'int',
        'model': 'str',
        'features': 'str',
        'srcvers': 'str',
        'pk': 'str',
        'pi': 'str',
        'flags': 'str',
        'vv': 'str',
        'location_group_id': 'int'
    }

    attribute_map = {
        'destination_id': 'destinationId',
        'destination_name': 'destinationName',
        'destination_mac_address': 'destinationMacAddress',
        'destination_ip_address': 'destinationIPAddress',
        'audio_port': 'audioPort',
        'video_port': 'videoPort',
        'model': 'model',
        'features': 'features',
        'srcvers': 'srcvers',
        'pk': 'pk',
        'pi': 'pi',
        'flags': 'flags',
        'vv': 'vv',
        'location_group_id': 'locationGroupID'
    }

    def __init__(self, destination_id=None, destination_name=None, destination_mac_address=None, destination_ip_address=None, audio_port=None, video_port=None, model=None, features=None, srcvers=None, pk=None, pi=None, flags=None, vv=None, location_group_id=None, _configuration=None):  # noqa: E501
        """RemoteViewDestinationV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._destination_id = None
        self._destination_name = None
        self._destination_mac_address = None
        self._destination_ip_address = None
        self._audio_port = None
        self._video_port = None
        self._model = None
        self._features = None
        self._srcvers = None
        self._pk = None
        self._pi = None
        self._flags = None
        self._vv = None
        self._location_group_id = None
        self.discriminator = None

        if destination_id is not None:
            self.destination_id = destination_id
        if destination_name is not None:
            self.destination_name = destination_name
        if destination_mac_address is not None:
            self.destination_mac_address = destination_mac_address
        if destination_ip_address is not None:
            self.destination_ip_address = destination_ip_address
        if audio_port is not None:
            self.audio_port = audio_port
        if video_port is not None:
            self.video_port = video_port
        if model is not None:
            self.model = model
        if features is not None:
            self.features = features
        if srcvers is not None:
            self.srcvers = srcvers
        if pk is not None:
            self.pk = pk
        if pi is not None:
            self.pi = pi
        if flags is not None:
            self.flags = flags
        if vv is not None:
            self.vv = vv
        if location_group_id is not None:
            self.location_group_id = location_group_id

    @property
    def destination_id(self):
        """Gets the destination_id of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination id of device when stored.  # noqa: E501

        :return: The destination_id of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: int
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this RemoteViewDestinationV1Model.

        Specifies the destination id of device when stored.  # noqa: E501

        :param destination_id: The destination_id of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: int
        """

        self._destination_id = destination_id

    @property
    def destination_name(self):
        """Gets the destination_name of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination name of device.  # noqa: E501

        :return: The destination_name of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this RemoteViewDestinationV1Model.

        Specifies the destination name of device.  # noqa: E501

        :param destination_name: The destination_name of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """

        self._destination_name = destination_name

    @property
    def destination_mac_address(self):
        """Gets the destination_mac_address of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination mac address of device.  # noqa: E501

        :return: The destination_mac_address of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._destination_mac_address

    @destination_mac_address.setter
    def destination_mac_address(self, destination_mac_address):
        """Sets the destination_mac_address of this RemoteViewDestinationV1Model.

        Specifies the destination mac address of device.  # noqa: E501

        :param destination_mac_address: The destination_mac_address of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                destination_mac_address is not None and not re.search(r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$', destination_mac_address)):  # noqa: E501
            raise ValueError(r"Invalid value for `destination_mac_address`, must be a follow pattern or equal to `/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/`")  # noqa: E501

        self._destination_mac_address = destination_mac_address

    @property
    def destination_ip_address(self):
        """Gets the destination_ip_address of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination ip address of device.  # noqa: E501

        :return: The destination_ip_address of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._destination_ip_address

    @destination_ip_address.setter
    def destination_ip_address(self, destination_ip_address):
        """Sets the destination_ip_address of this RemoteViewDestinationV1Model.

        Specifies the destination ip address of device.  # noqa: E501

        :param destination_ip_address: The destination_ip_address of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                destination_ip_address is not None and not re.search(r'^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$', destination_ip_address)):  # noqa: E501
            raise ValueError(r"Invalid value for `destination_ip_address`, must be a follow pattern or equal to `/^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/`")  # noqa: E501

        self._destination_ip_address = destination_ip_address

    @property
    def audio_port(self):
        """Gets the audio_port of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination audio port of device.  # noqa: E501

        :return: The audio_port of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: int
        """
        return self._audio_port

    @audio_port.setter
    def audio_port(self, audio_port):
        """Sets the audio_port of this RemoteViewDestinationV1Model.

        Specifies the destination audio port of device.  # noqa: E501

        :param audio_port: The audio_port of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: int
        """

        self._audio_port = audio_port

    @property
    def video_port(self):
        """Gets the video_port of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination video port of device.  # noqa: E501

        :return: The video_port of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: int
        """
        return self._video_port

    @video_port.setter
    def video_port(self, video_port):
        """Sets the video_port of this RemoteViewDestinationV1Model.

        Specifies the destination video port of device.  # noqa: E501

        :param video_port: The video_port of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: int
        """

        self._video_port = video_port

    @property
    def model(self):
        """Gets the model of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination model of device.  # noqa: E501

        :return: The model of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RemoteViewDestinationV1Model.

        Specifies the destination model of device.  # noqa: E501

        :param model: The model of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def features(self):
        """Gets the features of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination feature of device.  # noqa: E501

        :return: The features of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this RemoteViewDestinationV1Model.

        Specifies the destination feature of device.  # noqa: E501

        :param features: The features of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """

        self._features = features

    @property
    def srcvers(self):
        """Gets the srcvers of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination srcvers of device.  # noqa: E501

        :return: The srcvers of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._srcvers

    @srcvers.setter
    def srcvers(self, srcvers):
        """Sets the srcvers of this RemoteViewDestinationV1Model.

        Specifies the destination srcvers of device.  # noqa: E501

        :param srcvers: The srcvers of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """

        self._srcvers = srcvers

    @property
    def pk(self):
        """Gets the pk of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination pk of device.  # noqa: E501

        :return: The pk of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this RemoteViewDestinationV1Model.

        Specifies the destination pk of device.  # noqa: E501

        :param pk: The pk of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """

        self._pk = pk

    @property
    def pi(self):
        """Gets the pi of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination pi of device.  # noqa: E501

        :return: The pi of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._pi

    @pi.setter
    def pi(self, pi):
        """Sets the pi of this RemoteViewDestinationV1Model.

        Specifies the destination pi of device.  # noqa: E501

        :param pi: The pi of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """

        self._pi = pi

    @property
    def flags(self):
        """Gets the flags of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination flags of device.  # noqa: E501

        :return: The flags of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this RemoteViewDestinationV1Model.

        Specifies the destination flags of device.  # noqa: E501

        :param flags: The flags of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """

        self._flags = flags

    @property
    def vv(self):
        """Gets the vv of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the destination version of device.  # noqa: E501

        :return: The vv of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._vv

    @vv.setter
    def vv(self, vv):
        """Sets the vv of this RemoteViewDestinationV1Model.

        Specifies the destination version of device.  # noqa: E501

        :param vv: The vv of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: str
        """

        self._vv = vv

    @property
    def location_group_id(self):
        """Gets the location_group_id of this RemoteViewDestinationV1Model.  # noqa: E501

        Specifies the location group Id.  # noqa: E501

        :return: The location_group_id of this RemoteViewDestinationV1Model.  # noqa: E501
        :rtype: int
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this RemoteViewDestinationV1Model.

        Specifies the location group Id.  # noqa: E501

        :param location_group_id: The location_group_id of this RemoteViewDestinationV1Model.  # noqa: E501
        :type: int
        """

        self._location_group_id = location_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteViewDestinationV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteViewDestinationV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RemoteViewDestinationV1Model):
            return True

        return self.to_dict() != other.to_dict()
