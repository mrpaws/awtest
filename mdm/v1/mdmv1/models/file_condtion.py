# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class FileCondtion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_id': 'int',
        'name': 'str',
        'description': 'str',
        'organization_group_id': 'int',
        'modified_on': 'str',
        'flag_file_details': 'SpecifyFlagFileDetails_',
        'scenario_details': 'SpecifyScenarioDetails_'
    }

    attribute_map = {
        'condition_id': 'ConditionId',
        'name': 'Name',
        'description': 'Description',
        'organization_group_id': 'OrganizationGroupId',
        'modified_on': 'ModifiedOn',
        'flag_file_details': 'FlagFileDetails',
        'scenario_details': 'ScenarioDetails'
    }

    def __init__(self, condition_id=None, name=None, description=None, organization_group_id=None, modified_on=None, flag_file_details=None, scenario_details=None, _configuration=None):  # noqa: E501
        """FileCondtion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._condition_id = None
        self._name = None
        self._description = None
        self._organization_group_id = None
        self._modified_on = None
        self._flag_file_details = None
        self._scenario_details = None
        self.discriminator = None

        if condition_id is not None:
            self.condition_id = condition_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if modified_on is not None:
            self.modified_on = modified_on
        if flag_file_details is not None:
            self.flag_file_details = flag_file_details
        if scenario_details is not None:
            self.scenario_details = scenario_details

    @property
    def condition_id(self):
        """Gets the condition_id of this FileCondtion.  # noqa: E501

        Gets or sets identifier of Condition.  # noqa: E501

        :return: The condition_id of this FileCondtion.  # noqa: E501
        :rtype: int
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """Sets the condition_id of this FileCondtion.

        Gets or sets identifier of Condition.  # noqa: E501

        :param condition_id: The condition_id of this FileCondtion.  # noqa: E501
        :type: int
        """

        self._condition_id = condition_id

    @property
    def name(self):
        """Gets the name of this FileCondtion.  # noqa: E501

        Gets or sets name of Condition.  # noqa: E501

        :return: The name of this FileCondtion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileCondtion.

        Gets or sets name of Condition.  # noqa: E501

        :param name: The name of this FileCondtion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this FileCondtion.  # noqa: E501

        Gets or sets description of File Condition.  # noqa: E501

        :return: The description of this FileCondtion.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FileCondtion.

        Gets or sets description of File Condition.  # noqa: E501

        :param description: The description of this FileCondtion.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this FileCondtion.  # noqa: E501

        Gets or sets managed Organization Group ID.  # noqa: E501

        :return: The organization_group_id of this FileCondtion.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this FileCondtion.

        Gets or sets managed Organization Group ID.  # noqa: E501

        :param organization_group_id: The organization_group_id of this FileCondtion.  # noqa: E501
        :type: int
        """

        self._organization_group_id = organization_group_id

    @property
    def modified_on(self):
        """Gets the modified_on of this FileCondtion.  # noqa: E501

        Gets or sets last modified date time details of File Condition.  # noqa: E501

        :return: The modified_on of this FileCondtion.  # noqa: E501
        :rtype: str
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this FileCondtion.

        Gets or sets last modified date time details of File Condition.  # noqa: E501

        :param modified_on: The modified_on of this FileCondtion.  # noqa: E501
        :type: str
        """

        self._modified_on = modified_on

    @property
    def flag_file_details(self):
        """Gets the flag_file_details of this FileCondtion.  # noqa: E501

        Gets or sets details of Flag File in File Condition.  # noqa: E501

        :return: The flag_file_details of this FileCondtion.  # noqa: E501
        :rtype: SpecifyFlagFileDetails_
        """
        return self._flag_file_details

    @flag_file_details.setter
    def flag_file_details(self, flag_file_details):
        """Sets the flag_file_details of this FileCondtion.

        Gets or sets details of Flag File in File Condition.  # noqa: E501

        :param flag_file_details: The flag_file_details of this FileCondtion.  # noqa: E501
        :type: SpecifyFlagFileDetails_
        """

        self._flag_file_details = flag_file_details

    @property
    def scenario_details(self):
        """Gets the scenario_details of this FileCondtion.  # noqa: E501

        Gets or sets scenario Details in File Condition.  # noqa: E501

        :return: The scenario_details of this FileCondtion.  # noqa: E501
        :rtype: SpecifyScenarioDetails_
        """
        return self._scenario_details

    @scenario_details.setter
    def scenario_details(self, scenario_details):
        """Sets the scenario_details of this FileCondtion.

        Gets or sets scenario Details in File Condition.  # noqa: E501

        :param scenario_details: The scenario_details of this FileCondtion.  # noqa: E501
        :type: SpecifyScenarioDetails_
        """

        self._scenario_details = scenario_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileCondtion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileCondtion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileCondtion):
            return True

        return self.to_dict() != other.to_dict()
