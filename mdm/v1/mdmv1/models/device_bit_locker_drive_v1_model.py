# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceBitLockerDriveV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'overall_bitlocker_status': 'int',
        'cipher_mismatch': 'bool',
        'drive_information': 'list[DriveInformationModel]'
    }

    attribute_map = {
        'overall_bitlocker_status': 'overall_bitlocker_status',
        'cipher_mismatch': 'cipher_mismatch',
        'drive_information': 'drive_information'
    }

    def __init__(self, overall_bitlocker_status=None, cipher_mismatch=None, drive_information=None, _configuration=None):  # noqa: E501
        """DeviceBitLockerDriveV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._overall_bitlocker_status = None
        self._cipher_mismatch = None
        self._drive_information = None
        self.discriminator = None

        if overall_bitlocker_status is not None:
            self.overall_bitlocker_status = overall_bitlocker_status
        if cipher_mismatch is not None:
            self.cipher_mismatch = cipher_mismatch
        if drive_information is not None:
            self.drive_information = drive_information

    @property
    def overall_bitlocker_status(self):
        """Gets the overall_bitlocker_status of this DeviceBitLockerDriveV1Model.  # noqa: E501

        Gets or sets the overall bitlocker status.  # noqa: E501

        :return: The overall_bitlocker_status of this DeviceBitLockerDriveV1Model.  # noqa: E501
        :rtype: int
        """
        return self._overall_bitlocker_status

    @overall_bitlocker_status.setter
    def overall_bitlocker_status(self, overall_bitlocker_status):
        """Sets the overall_bitlocker_status of this DeviceBitLockerDriveV1Model.

        Gets or sets the overall bitlocker status.  # noqa: E501

        :param overall_bitlocker_status: The overall_bitlocker_status of this DeviceBitLockerDriveV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if (self._configuration.client_side_validation and
                overall_bitlocker_status not in allowed_values):
            raise ValueError(
                "Invalid value for `overall_bitlocker_status` ({0}), must be one of {1}"  # noqa: E501
                .format(overall_bitlocker_status, allowed_values)
            )

        self._overall_bitlocker_status = overall_bitlocker_status

    @property
    def cipher_mismatch(self):
        """Gets the cipher_mismatch of this DeviceBitLockerDriveV1Model.  # noqa: E501

        Gets or sets a value indicating whether there is a cipher mismatch.  # noqa: E501

        :return: The cipher_mismatch of this DeviceBitLockerDriveV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._cipher_mismatch

    @cipher_mismatch.setter
    def cipher_mismatch(self, cipher_mismatch):
        """Sets the cipher_mismatch of this DeviceBitLockerDriveV1Model.

        Gets or sets a value indicating whether there is a cipher mismatch.  # noqa: E501

        :param cipher_mismatch: The cipher_mismatch of this DeviceBitLockerDriveV1Model.  # noqa: E501
        :type: bool
        """

        self._cipher_mismatch = cipher_mismatch

    @property
    def drive_information(self):
        """Gets the drive_information of this DeviceBitLockerDriveV1Model.  # noqa: E501

        Gets or sets the drive information collection.  # noqa: E501

        :return: The drive_information of this DeviceBitLockerDriveV1Model.  # noqa: E501
        :rtype: list[DriveInformationModel]
        """
        return self._drive_information

    @drive_information.setter
    def drive_information(self, drive_information):
        """Sets the drive_information of this DeviceBitLockerDriveV1Model.

        Gets or sets the drive information collection.  # noqa: E501

        :param drive_information: The drive_information of this DeviceBitLockerDriveV1Model.  # noqa: E501
        :type: list[DriveInformationModel]
        """

        self._drive_information = drive_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceBitLockerDriveV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceBitLockerDriveV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceBitLockerDriveV1Model):
            return True

        return self.to_dict() != other.to_dict()
