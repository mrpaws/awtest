# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class TagsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tags_create_tag_for_og(self, id, **kwargs):  # noqa: E501
        """Retrieves a particular tag for the specified organization group.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_create_tag_for_og(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The OrganizationGroup Id. (required)
        :param Tag tag: The tag Id.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tags_create_tag_for_og_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tags_create_tag_for_og_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tags_create_tag_for_og_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a particular tag for the specified organization group.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_create_tag_for_og_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The OrganizationGroup Id. (required)
        :param Tag tag: The tag Id.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tags_create_tag_for_og" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tags_create_tag_for_og`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag' in params:
            body_params = params['tag']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}/addTag', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tags_delete_tag(self, ogid, tagid, **kwargs):  # noqa: E501
        """Deletes a tag for the specified organization group.  <br />Tag is a custom identifier that can be associated to a device(Example: Refursbished, Repaired).  # noqa: E501

        Delete a tag specified in the input that is present in the given organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_delete_tag(ogid, tagid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ogid: The OrganizationGroup Id. (required)
        :param int tagid: The tag Id to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tags_delete_tag_with_http_info(ogid, tagid, **kwargs)  # noqa: E501
        else:
            (data) = self.tags_delete_tag_with_http_info(ogid, tagid, **kwargs)  # noqa: E501
            return data

    def tags_delete_tag_with_http_info(self, ogid, tagid, **kwargs):  # noqa: E501
        """Deletes a tag for the specified organization group.  <br />Tag is a custom identifier that can be associated to a device(Example: Refursbished, Repaired).  # noqa: E501

        Delete a tag specified in the input that is present in the given organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_delete_tag_with_http_info(ogid, tagid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ogid: The OrganizationGroup Id. (required)
        :param int tagid: The tag Id to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ogid', 'tagid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tags_delete_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ogid' is set
        if self.api_client.client_side_validation and ('ogid' not in params or
                                                       params['ogid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ogid` when calling `tags_delete_tag`")  # noqa: E501
        # verify the required parameter 'tagid' is set
        if self.api_client.client_side_validation and ('tagid' not in params or
                                                       params['tagid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tagid` when calling `tags_delete_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ogid' in params:
            path_params['ogid'] = params['ogid']  # noqa: E501
        if 'tagid' in params:
            path_params['tagid'] = params['tagid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{ogid}/tags/{tagid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tags_get_tag(self, ogid, tagid, **kwargs):  # noqa: E501
        """Retrieves the tag details for a given tag in an organization group.  # noqa: E501

        Retrieves all the details about a tag in an organization group<br />Tag is a custom identifier that can be associated to a device(Example: Refursbished, Repaired).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_get_tag(ogid, tagid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ogid: The OrganizationGroup Id. (required)
        :param int tagid: The tag Id. (required)
        :return: TagSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tags_get_tag_with_http_info(ogid, tagid, **kwargs)  # noqa: E501
        else:
            (data) = self.tags_get_tag_with_http_info(ogid, tagid, **kwargs)  # noqa: E501
            return data

    def tags_get_tag_with_http_info(self, ogid, tagid, **kwargs):  # noqa: E501
        """Retrieves the tag details for a given tag in an organization group.  # noqa: E501

        Retrieves all the details about a tag in an organization group<br />Tag is a custom identifier that can be associated to a device(Example: Refursbished, Repaired).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_get_tag_with_http_info(ogid, tagid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ogid: The OrganizationGroup Id. (required)
        :param int tagid: The tag Id. (required)
        :return: TagSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ogid', 'tagid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tags_get_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ogid' is set
        if self.api_client.client_side_validation and ('ogid' not in params or
                                                       params['ogid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ogid` when calling `tags_get_tag`")  # noqa: E501
        # verify the required parameter 'tagid' is set
        if self.api_client.client_side_validation and ('tagid' not in params or
                                                       params['tagid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tagid` when calling `tags_get_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ogid' in params:
            path_params['ogid'] = params['ogid']  # noqa: E501
        if 'tagid' in params:
            path_params['tagid'] = params['tagid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{ogid}/tags/{tagid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TagSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tags_get_tags_by_og(self, id, **kwargs):  # noqa: E501
        """Retrieves the tags for the specified organization group.  # noqa: E501

        Gets the list of tags for the given organization group              <br />Tag is a custom identifier that can be associated to a device(Example: Refursbished, Repaired).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_get_tags_by_og(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The OrganizationGroup Id. (required)
        :return: TagSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tags_get_tags_by_og_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.tags_get_tags_by_og_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def tags_get_tags_by_og_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the tags for the specified organization group.  # noqa: E501

        Gets the list of tags for the given organization group              <br />Tag is a custom identifier that can be associated to a device(Example: Refursbished, Repaired).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_get_tags_by_og_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The OrganizationGroup Id. (required)
        :return: TagSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tags_get_tags_by_og" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `tags_get_tags_by_og`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TagSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tags_update_tag_for_og(self, ogid, tagid, **kwargs):  # noqa: E501
        """Updates a tag for the specified organization group.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_update_tag_for_og(ogid, tagid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ogid: The OrganizationGroup Id. (required)
        :param int tagid: The tag Id to be updated. (required)
        :param Tag tag: The Resource containing tag details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tags_update_tag_for_og_with_http_info(ogid, tagid, **kwargs)  # noqa: E501
        else:
            (data) = self.tags_update_tag_for_og_with_http_info(ogid, tagid, **kwargs)  # noqa: E501
            return data

    def tags_update_tag_for_og_with_http_info(self, ogid, tagid, **kwargs):  # noqa: E501
        """Updates a tag for the specified organization group.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tags_update_tag_for_og_with_http_info(ogid, tagid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ogid: The OrganizationGroup Id. (required)
        :param int tagid: The tag Id to be updated. (required)
        :param Tag tag: The Resource containing tag details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ogid', 'tagid', 'tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tags_update_tag_for_og" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ogid' is set
        if self.api_client.client_side_validation and ('ogid' not in params or
                                                       params['ogid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ogid` when calling `tags_update_tag_for_og`")  # noqa: E501
        # verify the required parameter 'tagid' is set
        if self.api_client.client_side_validation and ('tagid' not in params or
                                                       params['tagid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tagid` when calling `tags_update_tag_for_og`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ogid' in params:
            path_params['ogid'] = params['ogid']  # noqa: E501
        if 'tagid' in params:
            path_params['tagid'] = params['tagid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tag' in params:
            body_params = params['tag']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{ogid}/tags/{tagid}/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
