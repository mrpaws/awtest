# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class ApplicationEventSampleSearchResultEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'sample_time': 'datetime',
        'application_id': 'str',
        'version': 'str',
        'user_name': 'str',
        'friendly_name': 'str',
        'event_name': 'str',
        'event_data': 'str'
    }

    attribute_map = {
        'device_id': 'DeviceID',
        'sample_time': 'SampleTime',
        'application_id': 'ApplicationID',
        'version': 'Version',
        'user_name': 'UserName',
        'friendly_name': 'FriendlyName',
        'event_name': 'EventName',
        'event_data': 'EventData'
    }

    def __init__(self, device_id=None, sample_time=None, application_id=None, version=None, user_name=None, friendly_name=None, event_name=None, event_data=None, _configuration=None):  # noqa: E501
        """ApplicationEventSampleSearchResultEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_id = None
        self._sample_time = None
        self._application_id = None
        self._version = None
        self._user_name = None
        self._friendly_name = None
        self._event_name = None
        self._event_data = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if sample_time is not None:
            self.sample_time = sample_time
        if application_id is not None:
            self.application_id = application_id
        if version is not None:
            self.version = version
        if user_name is not None:
            self.user_name = user_name
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if event_name is not None:
            self.event_name = event_name
        if event_data is not None:
            self.event_data = event_data

    @property
    def device_id(self):
        """Gets the device_id of this ApplicationEventSampleSearchResultEntity.  # noqa: E501

        Gets or sets the device identifier.  # noqa: E501

        :return: The device_id of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ApplicationEventSampleSearchResultEntity.

        Gets or sets the device identifier.  # noqa: E501

        :param device_id: The device_id of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def sample_time(self):
        """Gets the sample_time of this ApplicationEventSampleSearchResultEntity.  # noqa: E501

        Gets or sets the sample time.  # noqa: E501

        :return: The sample_time of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_time

    @sample_time.setter
    def sample_time(self, sample_time):
        """Sets the sample_time of this ApplicationEventSampleSearchResultEntity.

        Gets or sets the sample time.  # noqa: E501

        :param sample_time: The sample_time of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :type: datetime
        """

        self._sample_time = sample_time

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationEventSampleSearchResultEntity.  # noqa: E501

        Gets or sets the package id.  # noqa: E501

        :return: The application_id of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationEventSampleSearchResultEntity.

        Gets or sets the package id.  # noqa: E501

        :param application_id: The application_id of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def version(self):
        """Gets the version of this ApplicationEventSampleSearchResultEntity.  # noqa: E501

        Gets or sets the application version.  # noqa: E501

        :return: The version of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApplicationEventSampleSearchResultEntity.

        Gets or sets the application version.  # noqa: E501

        :param version: The version of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def user_name(self):
        """Gets the user_name of this ApplicationEventSampleSearchResultEntity.  # noqa: E501

        Gets or sets the user name.  # noqa: E501

        :return: The user_name of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ApplicationEventSampleSearchResultEntity.

        Gets or sets the user name.  # noqa: E501

        :param user_name: The user_name of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ApplicationEventSampleSearchResultEntity.  # noqa: E501

        Gets or sets the friendly name.  # noqa: E501

        :return: The friendly_name of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ApplicationEventSampleSearchResultEntity.

        Gets or sets the friendly name.  # noqa: E501

        :param friendly_name: The friendly_name of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def event_name(self):
        """Gets the event_name of this ApplicationEventSampleSearchResultEntity.  # noqa: E501

        Gets or sets the event name.  # noqa: E501

        :return: The event_name of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this ApplicationEventSampleSearchResultEntity.

        Gets or sets the event name.  # noqa: E501

        :param event_name: The event_name of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def event_data(self):
        """Gets the event_data of this ApplicationEventSampleSearchResultEntity.  # noqa: E501

        Gets or sets the application event value.  # noqa: E501

        :return: The event_data of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :rtype: str
        """
        return self._event_data

    @event_data.setter
    def event_data(self, event_data):
        """Sets the event_data of this ApplicationEventSampleSearchResultEntity.

        Gets or sets the application event value.  # noqa: E501

        :param event_data: The event_data of this ApplicationEventSampleSearchResultEntity.  # noqa: E501
        :type: str
        """

        self._event_data = event_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationEventSampleSearchResultEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationEventSampleSearchResultEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationEventSampleSearchResultEntity):
            return True

        return self.to_dict() != other.to_dict()
