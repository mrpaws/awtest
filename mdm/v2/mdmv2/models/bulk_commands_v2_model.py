# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class BulkCommandsV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_uuids': 'list[str]',
        'unlock_pin': 'int',
        'message': 'str',
        'sensor_name': 'str',
        'rebuild_kernel_cache': 'bool',
        'kext_paths': 'list[str]'
    }

    attribute_map = {
        'device_uuids': 'device_uuids',
        'unlock_pin': 'unlock_pin',
        'message': 'message',
        'sensor_name': 'sensor_name',
        'rebuild_kernel_cache': 'rebuild_kernel_cache',
        'kext_paths': 'kext_paths'
    }

    def __init__(self, device_uuids=None, unlock_pin=None, message=None, sensor_name=None, rebuild_kernel_cache=None, kext_paths=None, _configuration=None):  # noqa: E501
        """BulkCommandsV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_uuids = None
        self._unlock_pin = None
        self._message = None
        self._sensor_name = None
        self._rebuild_kernel_cache = None
        self._kext_paths = None
        self.discriminator = None

        if device_uuids is not None:
            self.device_uuids = device_uuids
        if unlock_pin is not None:
            self.unlock_pin = unlock_pin
        if message is not None:
            self.message = message
        if sensor_name is not None:
            self.sensor_name = sensor_name
        if rebuild_kernel_cache is not None:
            self.rebuild_kernel_cache = rebuild_kernel_cache
        if kext_paths is not None:
            self.kext_paths = kext_paths

    @property
    def device_uuids(self):
        """Gets the device_uuids of this BulkCommandsV2Model.  # noqa: E501

        List of Device Uuids.  # noqa: E501

        :return: The device_uuids of this BulkCommandsV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._device_uuids

    @device_uuids.setter
    def device_uuids(self, device_uuids):
        """Sets the device_uuids of this BulkCommandsV2Model.

        List of Device Uuids.  # noqa: E501

        :param device_uuids: The device_uuids of this BulkCommandsV2Model.  # noqa: E501
        :type: list[str]
        """

        self._device_uuids = device_uuids

    @property
    def unlock_pin(self):
        """Gets the unlock_pin of this BulkCommandsV2Model.  # noqa: E501

        Applicable only for macOS devices. Unlock PIN code is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.  # noqa: E501

        :return: The unlock_pin of this BulkCommandsV2Model.  # noqa: E501
        :rtype: int
        """
        return self._unlock_pin

    @unlock_pin.setter
    def unlock_pin(self, unlock_pin):
        """Sets the unlock_pin of this BulkCommandsV2Model.

        Applicable only for macOS devices. Unlock PIN code is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.  # noqa: E501

        :param unlock_pin: The unlock_pin of this BulkCommandsV2Model.  # noqa: E501
        :type: int
        """

        self._unlock_pin = unlock_pin

    @property
    def message(self):
        """Gets the message of this BulkCommandsV2Model.  # noqa: E501

        Applicable only for macOS devices. Message is optional for Lock Command. Max allowed length is 256 chars.  # noqa: E501

        :return: The message of this BulkCommandsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BulkCommandsV2Model.

        Applicable only for macOS devices. Message is optional for Lock Command. Max allowed length is 256 chars.  # noqa: E501

        :param message: The message of this BulkCommandsV2Model.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                message is not None and len(message) > 256):
            raise ValueError("Invalid value for `message`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message is not None and len(message) < 0):
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `0`")  # noqa: E501

        self._message = message

    @property
    def sensor_name(self):
        """Gets the sensor_name of this BulkCommandsV2Model.  # noqa: E501

        Applicable only for macOS and Linux platform and it is required for the SyncSensors command.  # noqa: E501

        :return: The sensor_name of this BulkCommandsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._sensor_name

    @sensor_name.setter
    def sensor_name(self, sensor_name):
        """Sets the sensor_name of this BulkCommandsV2Model.

        Applicable only for macOS and Linux platform and it is required for the SyncSensors command.  # noqa: E501

        :param sensor_name: The sensor_name of this BulkCommandsV2Model.  # noqa: E501
        :type: str
        """

        self._sensor_name = sensor_name

    @property
    def rebuild_kernel_cache(self):
        """Gets the rebuild_kernel_cache of this BulkCommandsV2Model.  # noqa: E501

        If true, the kernel cache is rebuilt during a device restart. If BootstrapTokenAllowedForAuthentication is true in the SecurityInfoResponse. SecurityInfo response, the device requests the Bootstrap Token from the MDM prior to executing this command. This value is available in macOS 11 and later.  # noqa: E501

        :return: The rebuild_kernel_cache of this BulkCommandsV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._rebuild_kernel_cache

    @rebuild_kernel_cache.setter
    def rebuild_kernel_cache(self, rebuild_kernel_cache):
        """Sets the rebuild_kernel_cache of this BulkCommandsV2Model.

        If true, the kernel cache is rebuilt during a device restart. If BootstrapTokenAllowedForAuthentication is true in the SecurityInfoResponse. SecurityInfo response, the device requests the Bootstrap Token from the MDM prior to executing this command. This value is available in macOS 11 and later.  # noqa: E501

        :param rebuild_kernel_cache: The rebuild_kernel_cache of this BulkCommandsV2Model.  # noqa: E501
        :type: bool
        """

        self._rebuild_kernel_cache = rebuild_kernel_cache

    @property
    def kext_paths(self):
        """Gets the kext_paths of this BulkCommandsV2Model.  # noqa: E501

        If RebuildKernelCache is true, this value specifies the paths to kexts to add to the auxiliary kernel cache since the last kernel cache rebuild. If not present, the system only adds previously-discovered kexts to the kernel cache. This value is available in macOS 11 and later.  # noqa: E501

        :return: The kext_paths of this BulkCommandsV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._kext_paths

    @kext_paths.setter
    def kext_paths(self, kext_paths):
        """Sets the kext_paths of this BulkCommandsV2Model.

        If RebuildKernelCache is true, this value specifies the paths to kexts to add to the auxiliary kernel cache since the last kernel cache rebuild. If not present, the system only adds previously-discovered kexts to the kernel cache. This value is available in macOS 11 and later.  # noqa: E501

        :param kext_paths: The kext_paths of this BulkCommandsV2Model.  # noqa: E501
        :type: list[str]
        """

        self._kext_paths = kext_paths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkCommandsV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkCommandsV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BulkCommandsV2Model):
            return True

        return self.to_dict() != other.to_dict()
