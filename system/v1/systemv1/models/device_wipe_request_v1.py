# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class DeviceWipeRequestV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_text': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'wipe_type': 'str',
        'wipe_status': 'str',
        'wipe_source': 'str',
        'ownership': 'list[str]',
        'sort_column': 'str',
        'sort_direction': 'str',
        'export_format': 'str'
    }

    attribute_map = {
        'search_text': 'search_text',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'wipe_type': 'wipe_type',
        'wipe_status': 'wipe_status',
        'wipe_source': 'wipe_source',
        'ownership': 'ownership',
        'sort_column': 'sort_column',
        'sort_direction': 'sort_direction',
        'export_format': 'export_format'
    }

    def __init__(self, search_text=None, start_date=None, end_date=None, wipe_type=None, wipe_status=None, wipe_source=None, ownership=None, sort_column=None, sort_direction=None, export_format=None, _configuration=None):  # noqa: E501
        """DeviceWipeRequestV1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._search_text = None
        self._start_date = None
        self._end_date = None
        self._wipe_type = None
        self._wipe_status = None
        self._wipe_source = None
        self._ownership = None
        self._sort_column = None
        self._sort_direction = None
        self._export_format = None
        self.discriminator = None

        if search_text is not None:
            self.search_text = search_text
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if wipe_type is not None:
            self.wipe_type = wipe_type
        if wipe_status is not None:
            self.wipe_status = wipe_status
        if wipe_source is not None:
            self.wipe_source = wipe_source
        if ownership is not None:
            self.ownership = ownership
        if sort_column is not None:
            self.sort_column = sort_column
        if sort_direction is not None:
            self.sort_direction = sort_direction
        if export_format is not None:
            self.export_format = export_format

    @property
    def search_text(self):
        """Gets the search_text of this DeviceWipeRequestV1.  # noqa: E501

        The search text string which the device wipe results will be filtered by.  # noqa: E501

        :return: The search_text of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this DeviceWipeRequestV1.

        The search text string which the device wipe results will be filtered by.  # noqa: E501

        :param search_text: The search_text of this DeviceWipeRequestV1.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def start_date(self):
        """Gets the start_date of this DeviceWipeRequestV1.  # noqa: E501

        The start of the date range which the results will be filtered by.  # noqa: E501

        :return: The start_date of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DeviceWipeRequestV1.

        The start of the date range which the results will be filtered by.  # noqa: E501

        :param start_date: The start_date of this DeviceWipeRequestV1.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this DeviceWipeRequestV1.  # noqa: E501

        The end of the date range which the results will be filtered by.  # noqa: E501

        :return: The end_date of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DeviceWipeRequestV1.

        The end of the date range which the results will be filtered by.  # noqa: E501

        :param end_date: The end_date of this DeviceWipeRequestV1.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def wipe_type(self):
        """Gets the wipe_type of this DeviceWipeRequestV1.  # noqa: E501

        The wipe action type which the results will be filtered by. Supported values are DEVICE_WIPE, ENTERPRISE_WIPE.  # noqa: E501

        :return: The wipe_type of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._wipe_type

    @wipe_type.setter
    def wipe_type(self, wipe_type):
        """Sets the wipe_type of this DeviceWipeRequestV1.

        The wipe action type which the results will be filtered by. Supported values are DEVICE_WIPE, ENTERPRISE_WIPE.  # noqa: E501

        :param wipe_type: The wipe_type of this DeviceWipeRequestV1.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "DEVICE_WIPE", "ENTERPRISE_WIPE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                wipe_type not in allowed_values):
            raise ValueError(
                "Invalid value for `wipe_type` ({0}), must be one of {1}"  # noqa: E501
                .format(wipe_type, allowed_values)
            )

        self._wipe_type = wipe_type

    @property
    def wipe_status(self):
        """Gets the wipe_status of this DeviceWipeRequestV1.  # noqa: E501

        The status of the wipe action by which the results will be filtered. Supported values are APPROVED, HELD, QUEUED, ABORTED.  # noqa: E501

        :return: The wipe_status of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._wipe_status

    @wipe_status.setter
    def wipe_status(self, wipe_status):
        """Sets the wipe_status of this DeviceWipeRequestV1.

        The status of the wipe action by which the results will be filtered. Supported values are APPROVED, HELD, QUEUED, ABORTED.  # noqa: E501

        :param wipe_status: The wipe_status of this DeviceWipeRequestV1.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "APPROVED", "HELD", "QUEUED", "ABORTED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                wipe_status not in allowed_values):
            raise ValueError(
                "Invalid value for `wipe_status` ({0}), must be one of {1}"  # noqa: E501
                .format(wipe_status, allowed_values)
            )

        self._wipe_status = wipe_status

    @property
    def wipe_source(self):
        """Gets the wipe_source of this DeviceWipeRequestV1.  # noqa: E501

        The source of the wipe source by which the results will be filtered.  # noqa: E501

        :return: The wipe_source of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._wipe_source

    @wipe_source.setter
    def wipe_source(self, wipe_source):
        """Sets the wipe_source of this DeviceWipeRequestV1.

        The source of the wipe source by which the results will be filtered.  # noqa: E501

        :param wipe_source: The wipe_source of this DeviceWipeRequestV1.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "OTHER", "DEVICE_DENYLIST_ACTION", "COMPLIANCE", "USER_DISABLED", "ADMIN_ACTION", "ADMIN_BULK_ACTION", "SELF_SERVICE_PORTAL", "DEVICE_SYNC", "SMART_GROUP_EDIT", "BULK_API_ACTION", "DEVICE_UNENROLLMENT_REQUESTED", "ADMIN_ACTION_DELETE_DEVICE", "ADMIN_BULK_ACTION_DELETE_DEVICE", "BULK_ADMIN_API_ACTION_DELETE_DEVICE", "SINGLE_ADMIN_API_ACTION_DELETE_DEVICE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                wipe_source not in allowed_values):
            raise ValueError(
                "Invalid value for `wipe_source` ({0}), must be one of {1}"  # noqa: E501
                .format(wipe_source, allowed_values)
            )

        self._wipe_source = wipe_source

    @property
    def ownership(self):
        """Gets the ownership of this DeviceWipeRequestV1.  # noqa: E501

        The device ownership types by which the results will be filtered. Supported values are UNKNOWN, CORPORATE_DEDICATED, EMPLOYEE_OWNED, CORPORATE_SHARED.  # noqa: E501

        :return: The ownership of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: list[str]
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this DeviceWipeRequestV1.

        The device ownership types by which the results will be filtered. Supported values are UNKNOWN, CORPORATE_DEDICATED, EMPLOYEE_OWNED, CORPORATE_SHARED.  # noqa: E501

        :param ownership: The ownership of this DeviceWipeRequestV1.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ANY", "UNKNOWN", "CORPORATE_DEDICATED", "EMPLOYEE_OWNED", "CORPORATE_SHARED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(ownership).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `ownership` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ownership) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ownership = ownership

    @property
    def sort_column(self):
        """Gets the sort_column of this DeviceWipeRequestV1.  # noqa: E501

        The name of the column the results should be ordered by, default is DATE.  # noqa: E501

        :return: The sort_column of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._sort_column

    @sort_column.setter
    def sort_column(self, sort_column):
        """Sets the sort_column of this DeviceWipeRequestV1.

        The name of the column the results should be ordered by, default is DATE.  # noqa: E501

        :param sort_column: The sort_column of this DeviceWipeRequestV1.  # noqa: E501
        :type: str
        """
        allowed_values = ["DATE", "DEVICE_FRIENDLY_NAME", "USER", "ORGANIZATION_GROUP"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sort_column not in allowed_values):
            raise ValueError(
                "Invalid value for `sort_column` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_column, allowed_values)
            )

        self._sort_column = sort_column

    @property
    def sort_direction(self):
        """Gets the sort_direction of this DeviceWipeRequestV1.  # noqa: E501

        The sort order by direction. Default is ASC.  # noqa: E501

        :return: The sort_direction of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._sort_direction

    @sort_direction.setter
    def sort_direction(self, sort_direction):
        """Sets the sort_direction of this DeviceWipeRequestV1.

        The sort order by direction. Default is ASC.  # noqa: E501

        :param sort_direction: The sort_direction of this DeviceWipeRequestV1.  # noqa: E501
        :type: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sort_direction not in allowed_values):
            raise ValueError(
                "Invalid value for `sort_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_direction, allowed_values)
            )

        self._sort_direction = sort_direction

    @property
    def export_format(self):
        """Gets the export_format of this DeviceWipeRequestV1.  # noqa: E501

        Report's export format. Default is XLSX.  # noqa: E501

        :return: The export_format of this DeviceWipeRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._export_format

    @export_format.setter
    def export_format(self, export_format):
        """Sets the export_format of this DeviceWipeRequestV1.

        Report's export format. Default is XLSX.  # noqa: E501

        :param export_format: The export_format of this DeviceWipeRequestV1.  # noqa: E501
        :type: str
        """
        allowed_values = ["XLSX", "CSV"]  # noqa: E501
        if (self._configuration.client_side_validation and
                export_format not in allowed_values):
            raise ValueError(
                "Invalid value for `export_format` ({0}), must be one of {1}"  # noqa: E501
                .format(export_format, allowed_values)
            )

        self._export_format = export_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceWipeRequestV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceWipeRequestV1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceWipeRequestV1):
            return True

        return self.to_dict() != other.to_dict()
