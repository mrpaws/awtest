# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv1.api_client import ApiClient


class BlobsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def blobs_v1_delete_blob_async(self, blob_id, **kwargs):  # noqa: E501
        """New - Deletes a blob by ID  # noqa: E501

        Deletes a blob by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blobs_v1_delete_blob_async(blob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int blob_id: Blob ID to be deleted(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.blobs_v1_delete_blob_async_with_http_info(blob_id, **kwargs)  # noqa: E501
        else:
            (data) = self.blobs_v1_delete_blob_async_with_http_info(blob_id, **kwargs)  # noqa: E501
            return data

    def blobs_v1_delete_blob_async_with_http_info(self, blob_id, **kwargs):  # noqa: E501
        """New - Deletes a blob by ID  # noqa: E501

        Deletes a blob by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blobs_v1_delete_blob_async_with_http_info(blob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int blob_id: Blob ID to be deleted(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blob_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method blobs_v1_delete_blob_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blob_id' is set
        if self.api_client.client_side_validation and ('blob_id' not in params or
                                                       params['blob_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `blob_id` when calling `blobs_v1_delete_blob_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'blob_id' in params:
            path_params['blobId'] = params['blob_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/blobs/blob/{blobId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def blobs_v1_download_blob(self, blob_id, **kwargs):  # noqa: E501
        """New - Gets a blob by the ID  # noqa: E501

        Returns the contents of a blob as a byte array  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blobs_v1_download_blob(blob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int blob_id: Identifier of the blob to be retrieved(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.blobs_v1_download_blob_with_http_info(blob_id, **kwargs)  # noqa: E501
        else:
            (data) = self.blobs_v1_download_blob_with_http_info(blob_id, **kwargs)  # noqa: E501
            return data

    def blobs_v1_download_blob_with_http_info(self, blob_id, **kwargs):  # noqa: E501
        """New - Gets a blob by the ID  # noqa: E501

        Returns the contents of a blob as a byte array  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blobs_v1_download_blob_with_http_info(blob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int blob_id: Identifier of the blob to be retrieved(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blob_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method blobs_v1_download_blob" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blob_id' is set
        if self.api_client.client_side_validation and ('blob_id' not in params or
                                                       params['blob_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `blob_id` when calling `blobs_v1_download_blob`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'blob_id' in params:
            path_params['blobId'] = params['blob_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/blobs/downloadblob/{blobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def blobs_v1_upload_blob_async(self, file_name, organization_group_id, **kwargs):  # noqa: E501
        """New - Create a new blob with attached file  # noqa: E501

         - Create a new blob with attached file  - Supported file types are 'ipa',    'apk', 'xap', 'appx', 'msi', 'app', 'zip', 'xml', 'pem', 'exe', 'pkg',    'dmg', 'plist', 'mpkg', 'js', 'jse', 'ps1', 'ps1xml', 'psc1', 'psd1',    'psm1', 'pssc', 'cdxml', 'vbs', 'vbe', 'wsf', 'wsc', 'msp', 'mst',    'p12', 'pfx', 'p7b', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'p7m', 'ppkg', 'cat', 'apf'  - No size restrictions  - Organization Group will be set to Global irrespective of value passed if the file type is of 'apf'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blobs_v1_upload_blob_async(file_name, organization_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file being uploaded(Required) (required)
        :param int organization_group_id: Organization Group ID integer identifying the customer or container(Required) (required)
        :param object module_type: Module type of the blob. For application blobs, module type is required and should be set as Application.
        :param str file_link: Path of the file to upload. Required if blob file is not submitted
        :param object access_via: Access type. If EIS, content gateway ID is required and validated for the Organization Group Id
        :param int content_gateway_id: Content gateway ID of the repository to save to. Required if accessVia is EIS.
        :param bool downloadfilefromlink: Set to true if application needs to be downloaded from the link.
        :param str username: required when accessVia is EIS and downloadfilefromlink is true
        :param str password: required when accessVia is EIS and downloadfilefromlink is true
        :return: EntityV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.blobs_v1_upload_blob_async_with_http_info(file_name, organization_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.blobs_v1_upload_blob_async_with_http_info(file_name, organization_group_id, **kwargs)  # noqa: E501
            return data

    def blobs_v1_upload_blob_async_with_http_info(self, file_name, organization_group_id, **kwargs):  # noqa: E501
        """New - Create a new blob with attached file  # noqa: E501

         - Create a new blob with attached file  - Supported file types are 'ipa',    'apk', 'xap', 'appx', 'msi', 'app', 'zip', 'xml', 'pem', 'exe', 'pkg',    'dmg', 'plist', 'mpkg', 'js', 'jse', 'ps1', 'ps1xml', 'psc1', 'psd1',    'psm1', 'pssc', 'cdxml', 'vbs', 'vbe', 'wsf', 'wsc', 'msp', 'mst',    'p12', 'pfx', 'p7b', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'p7m', 'ppkg', 'cat', 'apf'  - No size restrictions  - Organization Group will be set to Global irrespective of value passed if the file type is of 'apf'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blobs_v1_upload_blob_async_with_http_info(file_name, organization_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file being uploaded(Required) (required)
        :param int organization_group_id: Organization Group ID integer identifying the customer or container(Required) (required)
        :param object module_type: Module type of the blob. For application blobs, module type is required and should be set as Application.
        :param str file_link: Path of the file to upload. Required if blob file is not submitted
        :param object access_via: Access type. If EIS, content gateway ID is required and validated for the Organization Group Id
        :param int content_gateway_id: Content gateway ID of the repository to save to. Required if accessVia is EIS.
        :param bool downloadfilefromlink: Set to true if application needs to be downloaded from the link.
        :param str username: required when accessVia is EIS and downloadfilefromlink is true
        :param str password: required when accessVia is EIS and downloadfilefromlink is true
        :return: EntityV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'organization_group_id', 'module_type', 'file_link', 'access_via', 'content_gateway_id', 'downloadfilefromlink', 'username', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method blobs_v1_upload_blob_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if self.api_client.client_side_validation and ('file_name' not in params or
                                                       params['file_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_name` when calling `blobs_v1_upload_blob_async`")  # noqa: E501
        # verify the required parameter 'organization_group_id' is set
        if self.api_client.client_side_validation and ('organization_group_id' not in params or
                                                       params['organization_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_id` when calling `blobs_v1_upload_blob_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'organization_group_id' in params:
            query_params.append(('organizationGroupId', params['organization_group_id']))  # noqa: E501
        if 'module_type' in params:
            query_params.append(('moduleType', params['module_type']))  # noqa: E501
        if 'file_link' in params:
            query_params.append(('fileLink', params['file_link']))  # noqa: E501
        if 'access_via' in params:
            query_params.append(('accessVia', params['access_via']))  # noqa: E501
        if 'content_gateway_id' in params:
            query_params.append(('contentGatewayId', params['content_gateway_id']))  # noqa: E501
        if 'downloadfilefromlink' in params:
            query_params.append(('downloadfilefromlink', params['downloadfilefromlink']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/blobs/uploadblob', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
