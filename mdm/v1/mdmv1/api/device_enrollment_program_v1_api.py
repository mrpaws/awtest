# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class DeviceEnrollmentProgramV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_enrollment_program_v1_add_dep_profile_async(self, dep_profile_model, **kwargs):  # noqa: E501
        """New - Adds a new Device Enrollment Program profile.  # noqa: E501

        Saves the given Device Enrollment Program profile and also registers the created profile with the Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_add_dep_profile_async(dep_profile_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MdmEnrollmentProgramApiModel_ dep_profile_model: The Device Enrollment program profile model containing the required profile properties. (Required). (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_add_dep_profile_async_with_http_info(dep_profile_model, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_add_dep_profile_async_with_http_info(dep_profile_model, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_add_dep_profile_async_with_http_info(self, dep_profile_model, **kwargs):  # noqa: E501
        """New - Adds a new Device Enrollment Program profile.  # noqa: E501

        Saves the given Device Enrollment Program profile and also registers the created profile with the Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_add_dep_profile_async_with_http_info(dep_profile_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MdmEnrollmentProgramApiModel_ dep_profile_model: The Device Enrollment program profile model containing the required profile properties. (Required). (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dep_profile_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_add_dep_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dep_profile_model' is set
        if self.api_client.client_side_validation and ('dep_profile_model' not in params or
                                                       params['dep_profile_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dep_profile_model` when calling `device_enrollment_program_v1_add_dep_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dep_profile_model' in params:
            body_params = params['dep_profile_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_delete_dep_authentication_entity_async(self, organization_group_id, **kwargs):  # noqa: E501
        """New - Deletes DEP and associated DEP profiles for the given organization group.  # noqa: E501

        Deletes the device enrollment program account present at the given organization group. This will delete all associated profiles from AirWatch and it will also delete all the registered profiles from the Device Enrollment Program Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_delete_dep_authentication_entity_async(organization_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: This is the organization group identifier also known as GroupID. Typically used during enrollment.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_delete_dep_authentication_entity_async_with_http_info(organization_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_delete_dep_authentication_entity_async_with_http_info(organization_group_id, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_delete_dep_authentication_entity_async_with_http_info(self, organization_group_id, **kwargs):  # noqa: E501
        """New - Deletes DEP and associated DEP profiles for the given organization group.  # noqa: E501

        Deletes the device enrollment program account present at the given organization group. This will delete all associated profiles from AirWatch and it will also delete all the registered profiles from the Device Enrollment Program Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_delete_dep_authentication_entity_async_with_http_info(organization_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: This is the organization group identifier also known as GroupID. Typically used during enrollment.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_delete_dep_authentication_entity_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_id' is set
        if self.api_client.client_side_validation and ('organization_group_id' not in params or
                                                       params['organization_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_id` when calling `device_enrollment_program_v1_delete_dep_authentication_entity_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_id' in params:
            path_params['organizationGroupId'] = params['organization_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/accounts/{organizationGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_delete_mdm_enrollment_program_data_async(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Delete Device Enrollment Program profile based on the profile unique identifier.  # noqa: E501

        Deletes the given Device Enrollment Program Profile based on the profile unique identifier. This profile will also be deleted from the Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_delete_mdm_enrollment_program_data_async(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: The unique identifier for the device enrollment program profile. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_delete_mdm_enrollment_program_data_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_delete_mdm_enrollment_program_data_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_delete_mdm_enrollment_program_data_async_with_http_info(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Delete Device Enrollment Program profile based on the profile unique identifier.  # noqa: E501

        Deletes the given Device Enrollment Program Profile based on the profile unique identifier. This profile will also be deleted from the Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_delete_mdm_enrollment_program_data_async_with_http_info(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: The unique identifier for the device enrollment program profile. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_delete_mdm_enrollment_program_data_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `device_enrollment_program_v1_delete_mdm_enrollment_program_data_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/profiles/{profileUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_dep_profile_action(self, profile_uuid, serial_number, action, **kwargs):  # noqa: E501
        """New - Assign or unassign a Device Enrollment Program profile from device.  # noqa: E501

        Assigns or unassigns the Device Enrollment Program profile to the device identified by the provided serial number based on the action flag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_dep_profile_action(profile_uuid, serial_number, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: The unique identifier of the Device Enrollment Program profile.(Required) (required)
        :param str serial_number: The serial number of the device.(Required) (required)
        :param str action: Action flag is used to determine if the assign or unassign profile action must be performed for the device. Valid values are Assign and Unassign.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_dep_profile_action_with_http_info(profile_uuid, serial_number, action, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_dep_profile_action_with_http_info(profile_uuid, serial_number, action, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_dep_profile_action_with_http_info(self, profile_uuid, serial_number, action, **kwargs):  # noqa: E501
        """New - Assign or unassign a Device Enrollment Program profile from device.  # noqa: E501

        Assigns or unassigns the Device Enrollment Program profile to the device identified by the provided serial number based on the action flag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_dep_profile_action_with_http_info(profile_uuid, serial_number, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: The unique identifier of the Device Enrollment Program profile.(Required) (required)
        :param str serial_number: The serial number of the device.(Required) (required)
        :param str action: Action flag is used to determine if the assign or unassign profile action must be performed for the device. Valid values are Assign and Unassign.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_uuid', 'serial_number', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_dep_profile_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `device_enrollment_program_v1_dep_profile_action`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if self.api_client.client_side_validation and ('serial_number' not in params or
                                                       params['serial_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serial_number` when calling `device_enrollment_program_v1_dep_profile_action`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in params or
                                                       params['action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action` when calling `device_enrollment_program_v1_dep_profile_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501
        if 'serial_number' in params:
            path_params['serialNumber'] = params['serial_number']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/profiles/{profileUuid}/devices/{serialNumber}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_edit_dep_profile(self, dep_profile_model, profile_uuid, **kwargs):  # noqa: E501
        """New - Edit an existing Device Enrollment Program profile.  # noqa: E501

        Edits the Device Enrollment Program profile if the profile ID is correct. The edited profile is also registered with the Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_edit_dep_profile(dep_profile_model, profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MdmEnrollmentProgramApiModel_ dep_profile_model: The Device Enrollment program profile model containing the required profile properties. (Required). (required)
        :param str profile_uuid: The unique identifier for the device enrollment program profile. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_edit_dep_profile_with_http_info(dep_profile_model, profile_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_edit_dep_profile_with_http_info(dep_profile_model, profile_uuid, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_edit_dep_profile_with_http_info(self, dep_profile_model, profile_uuid, **kwargs):  # noqa: E501
        """New - Edit an existing Device Enrollment Program profile.  # noqa: E501

        Edits the Device Enrollment Program profile if the profile ID is correct. The edited profile is also registered with the Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_edit_dep_profile_with_http_info(dep_profile_model, profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MdmEnrollmentProgramApiModel_ dep_profile_model: The Device Enrollment program profile model containing the required profile properties. (Required). (required)
        :param str profile_uuid: The unique identifier for the device enrollment program profile. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dep_profile_model', 'profile_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_edit_dep_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dep_profile_model' is set
        if self.api_client.client_side_validation and ('dep_profile_model' not in params or
                                                       params['dep_profile_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dep_profile_model` when calling `device_enrollment_program_v1_edit_dep_profile`")  # noqa: E501
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `device_enrollment_program_v1_edit_dep_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dep_profile_model' in params:
            body_params = params['dep_profile_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/profiles/{profileUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_get_dep_certificate_async(self, cert_id, **kwargs):  # noqa: E501
        """New - Get Device Enrollment Program certificate to upload in the Device Enrollment Program portal.  # noqa: E501

        Gets the generated .pem certificate for the provided certificate ID. This certificate needs to be uploaded in the Device Enrollment Program Apple portal to continue setting up Device Enrollment Program in the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_get_dep_certificate_async(cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cert_id: The certificate id of the certificate being requested. (Required). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_get_dep_certificate_async_with_http_info(cert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_get_dep_certificate_async_with_http_info(cert_id, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_get_dep_certificate_async_with_http_info(self, cert_id, **kwargs):  # noqa: E501
        """New - Get Device Enrollment Program certificate to upload in the Device Enrollment Program portal.  # noqa: E501

        Gets the generated .pem certificate for the provided certificate ID. This certificate needs to be uploaded in the Device Enrollment Program Apple portal to continue setting up Device Enrollment Program in the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_get_dep_certificate_async_with_http_info(cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cert_id: The certificate id of the certificate being requested. (Required). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cert_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_get_dep_certificate_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cert_id' is set
        if self.api_client.client_side_validation and ('cert_id' not in params or
                                                       params['cert_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cert_id` when calling `device_enrollment_program_v1_get_dep_certificate_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cert_id' in params:
            path_params['certId'] = params['cert_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/x-pem-file;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/certificates/{certId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_get_dep_devices(self, group_uuid, **kwargs):  # noqa: E501
        """New - Gets all Apple Device Enrollment Program devices at organization group.  # noqa: E501

        Returns all the Apple Device Enrollment Program devices that have been synced into AirWatch for the given organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_get_dep_devices(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: Organization group UUID to perform the operation on.(Required) (required)
        :return: list[DeviceEnrollmentProgramDevicesResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_get_dep_devices_with_http_info(group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_get_dep_devices_with_http_info(group_uuid, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_get_dep_devices_with_http_info(self, group_uuid, **kwargs):  # noqa: E501
        """New - Gets all Apple Device Enrollment Program devices at organization group.  # noqa: E501

        Returns all the Apple Device Enrollment Program devices that have been synced into AirWatch for the given organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_get_dep_devices_with_http_info(group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: Organization group UUID to perform the operation on.(Required) (required)
        :return: list[DeviceEnrollmentProgramDevicesResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_get_dep_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if self.api_client.client_side_validation and ('group_uuid' not in params or
                                                       params['group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_uuid` when calling `device_enrollment_program_v1_get_dep_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['groupUuid'] = params['group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/groups/{groupUuid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceEnrollmentProgramDevicesResponseV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_get_dep_devices_for_profile(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Gets all Apple Device Enrollment Program devices assigned to the profile.  # noqa: E501

        Returns all the Apple Device Enrollment Program devices that have been synced into AirWatch and assigned to the given profile unique key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_get_dep_devices_for_profile(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: Device Enrollment Program profile unique key to get the device list for.(Required) (required)
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 500
        :return: list[DeviceEnrollmentProgramDevicesResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_get_dep_devices_for_profile_with_http_info(profile_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_get_dep_devices_for_profile_with_http_info(profile_uuid, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_get_dep_devices_for_profile_with_http_info(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Gets all Apple Device Enrollment Program devices assigned to the profile.  # noqa: E501

        Returns all the Apple Device Enrollment Program devices that have been synced into AirWatch and assigned to the given profile unique key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_get_dep_devices_for_profile_with_http_info(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: Device Enrollment Program profile unique key to get the device list for.(Required) (required)
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 500
        :return: list[DeviceEnrollmentProgramDevicesResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_uuid', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_get_dep_devices_for_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `device_enrollment_program_v1_get_dep_devices_for_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('Page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/profiles/{profileUuid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceEnrollmentProgramDevicesResponseV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_reconcile_dep_devices(self, group_uuid, action, **kwargs):  # noqa: E501
        """New - Fetches or syncs Apple Device Enrollment Program devices belonging to the organization group.  # noqa: E501

        Fetches or syncs devices from the Apple server associated with the token uploaded in the given organization group based on the action flag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_reconcile_dep_devices(group_uuid, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str action: Action flag is used to determine if the fetch or sync action must be performed for the devices. Valid values are Sync and Fetch. Sync will only get the changed devices from the Apple server while fetch will get all devices associated with the token from the Apple server.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_reconcile_dep_devices_with_http_info(group_uuid, action, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_reconcile_dep_devices_with_http_info(group_uuid, action, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_reconcile_dep_devices_with_http_info(self, group_uuid, action, **kwargs):  # noqa: E501
        """New - Fetches or syncs Apple Device Enrollment Program devices belonging to the organization group.  # noqa: E501

        Fetches or syncs devices from the Apple server associated with the token uploaded in the given organization group based on the action flag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_reconcile_dep_devices_with_http_info(group_uuid, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_uuid: Organization group UUID to perform the operation on.(Required) (required)
        :param str action: Action flag is used to determine if the fetch or sync action must be performed for the devices. Valid values are Sync and Fetch. Sync will only get the changed devices from the Apple server while fetch will get all devices associated with the token from the Apple server.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_uuid', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_reconcile_dep_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_uuid' is set
        if self.api_client.client_side_validation and ('group_uuid' not in params or
                                                       params['group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_uuid` when calling `device_enrollment_program_v1_reconcile_dep_devices`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in params or
                                                       params['action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action` when calling `device_enrollment_program_v1_reconcile_dep_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_uuid' in params:
            path_params['groupUuid'] = params['group_uuid']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/groups/{groupUuid}/devices', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_save_dep_authentication_entity_async(self, organization_group_id, dep_account_creation_model, **kwargs):  # noqa: E501
        """New - Create a new DEP account for the organization group.  # noqa: E501

        Creates a new Device Enrollment Program account for the given organization group ID based on the provided token and certificate. This account will be used to make all subsequent requests to the Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_save_dep_authentication_entity_async(organization_group_id, dep_account_creation_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: This is the organization group identifier also known as GroupID. Typically used during enrollment.(Required). (required)
        :param DepAccountCreationApiModel dep_account_creation_model: The dep Account Creation Model containing the token ID and the certificate ID that will be used to generate the device enrollment program account for the organization group. (Required). (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_save_dep_authentication_entity_async_with_http_info(organization_group_id, dep_account_creation_model, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_save_dep_authentication_entity_async_with_http_info(organization_group_id, dep_account_creation_model, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_save_dep_authentication_entity_async_with_http_info(self, organization_group_id, dep_account_creation_model, **kwargs):  # noqa: E501
        """New - Create a new DEP account for the organization group.  # noqa: E501

        Creates a new Device Enrollment Program account for the given organization group ID based on the provided token and certificate. This account will be used to make all subsequent requests to the Apple server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_save_dep_authentication_entity_async_with_http_info(organization_group_id, dep_account_creation_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: This is the organization group identifier also known as GroupID. Typically used during enrollment.(Required). (required)
        :param DepAccountCreationApiModel dep_account_creation_model: The dep Account Creation Model containing the token ID and the certificate ID that will be used to generate the device enrollment program account for the organization group. (Required). (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_id', 'dep_account_creation_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_save_dep_authentication_entity_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_id' is set
        if self.api_client.client_side_validation and ('organization_group_id' not in params or
                                                       params['organization_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_id` when calling `device_enrollment_program_v1_save_dep_authentication_entity_async`")  # noqa: E501
        # verify the required parameter 'dep_account_creation_model' is set
        if self.api_client.client_side_validation and ('dep_account_creation_model' not in params or
                                                       params['dep_account_creation_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dep_account_creation_model` when calling `device_enrollment_program_v1_save_dep_authentication_entity_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_id' in params:
            path_params['organizationGroupId'] = params['organization_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dep_account_creation_model' in params:
            body_params = params['dep_account_creation_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/accounts/{organizationGroupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_save_dep_certificate_async(self, organization_group_id, **kwargs):  # noqa: E501
        """New - Generate a new Device Enrollment Program certificate.  # noqa: E501

        Generates a new .pem certificate for the provided organization group ID. This certificate needs to be uploaded in the Device Enrollment Program Apple portal to continue setting up Device Enrollment Program in the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_save_dep_certificate_async(organization_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: This is the organization group identifier also known as GroupID. Typically used during enrollment.(Required). (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_save_dep_certificate_async_with_http_info(organization_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_save_dep_certificate_async_with_http_info(organization_group_id, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_save_dep_certificate_async_with_http_info(self, organization_group_id, **kwargs):  # noqa: E501
        """New - Generate a new Device Enrollment Program certificate.  # noqa: E501

        Generates a new .pem certificate for the provided organization group ID. This certificate needs to be uploaded in the Device Enrollment Program Apple portal to continue setting up Device Enrollment Program in the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_save_dep_certificate_async_with_http_info(organization_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: This is the organization group identifier also known as GroupID. Typically used during enrollment.(Required). (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_save_dep_certificate_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_id' is set
        if self.api_client.client_side_validation and ('organization_group_id' not in params or
                                                       params['organization_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_id` when calling `device_enrollment_program_v1_save_dep_certificate_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_id' in params:
            path_params['organizationGroupId'] = params['organization_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/certificates/{organizationGroupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_search(self, **kwargs):  # noqa: E501
        """Returns a collection of Device enrollment program profiles based on the search criteria.  # noqa: E501

        Returns a collection of device enrollment program profiles based on the search criteria specified. The search parameters can be organization group ID, page, and the pagesize.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object organization_group_uuid: Organization Group UUID. (Example:FFD1521E-70D7-4673-A0EF-62938079C0E8, FFD1521E-70D7-4673-A0EF-62938079C0E8)
        :param str search_text: Profile name.
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 50
        :param str order_by: Order By. Default Asc (Example:Asc,Dsc)
        :param str sort_order: Sort Order. Default DeviceProfileName (Example:DeviceProfileName,RootLocationGroupName)
        :return: MdmEnrollmentProgramSearchResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_search_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a collection of Device enrollment program profiles based on the search criteria.  # noqa: E501

        Returns a collection of device enrollment program profiles based on the search criteria specified. The search parameters can be organization group ID, page, and the pagesize.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object organization_group_uuid: Organization Group UUID. (Example:FFD1521E-70D7-4673-A0EF-62938079C0E8, FFD1521E-70D7-4673-A0EF-62938079C0E8)
        :param str search_text: Profile name.
        :param int page: Specific page number to get. 0 based index
        :param int page_size: Maximum records per page. Default 50
        :param str order_by: Order By. Default Asc (Example:Asc,Dsc)
        :param str sort_order: Sort Order. Default DeviceProfileName (Example:DeviceProfileName,RootLocationGroupName)
        :return: MdmEnrollmentProgramSearchResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'search_text', 'page', 'page_size', 'order_by', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organization_group_uuid' in params:
            query_params.append(('OrganizationGroupUuid', params['organization_group_uuid']))  # noqa: E501
        if 'search_text' in params:
            query_params.append(('SearchText', params['search_text']))  # noqa: E501
        if 'page' in params:
            query_params.append(('Page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('SortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/profiles/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MdmEnrollmentProgramSearchResultV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_enrollment_program_v1_view_shared_mdm_profile_data_async(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Get Device Enrollment Program profile based on the profile unique identifier.  # noqa: E501

        Gets the details of the saved Device Enrollment Program profile created based on the provided profile unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_view_shared_mdm_profile_data_async(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: The unique identifier for the device enrollment program profile. (Required). (required)
        :return: MdmEnrollmentProgramApiModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_enrollment_program_v1_view_shared_mdm_profile_data_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_enrollment_program_v1_view_shared_mdm_profile_data_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
            return data

    def device_enrollment_program_v1_view_shared_mdm_profile_data_async_with_http_info(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Get Device Enrollment Program profile based on the profile unique identifier.  # noqa: E501

        Gets the details of the saved Device Enrollment Program profile created based on the provided profile unique identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_enrollment_program_v1_view_shared_mdm_profile_data_async_with_http_info(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: The unique identifier for the device enrollment program profile. (Required). (required)
        :return: MdmEnrollmentProgramApiModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_enrollment_program_v1_view_shared_mdm_profile_data_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `device_enrollment_program_v1_view_shared_mdm_profile_data_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dep/profiles/{profileUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MdmEnrollmentProgramApiModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
