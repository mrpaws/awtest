# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class CompliancePolicyV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def compliance_policy_v1_get_compliance_policies(self, **kwargs):  # noqa: E501
        """New - Returns a collection of Compliance Policies based on the search criteria.  # noqa: E501

        Returns a collection of Compliance Policies based on the search criteria specified. The search parameters can be organization group id, page, and the pagesize. this end point supports json only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compliance_policy_v1_get_compliance_policies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizationgroupuuid: Organization Group UUID.
        :param int page: Page number
        :param int pagesize: Maximum number of results to be returned in each page
        :param str searchtext: Search text can be a part of the policy name or policy description
        :param str status: Status can be used to filter the search results based on the compliance policy status. Expected values of status can be All(Both Active and Inactive policies), Active(Active complaince policies) or Inactive(Inactive compliance policies)
        :return: CompliancePolicySearchResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.compliance_policy_v1_get_compliance_policies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.compliance_policy_v1_get_compliance_policies_with_http_info(**kwargs)  # noqa: E501
            return data

    def compliance_policy_v1_get_compliance_policies_with_http_info(self, **kwargs):  # noqa: E501
        """New - Returns a collection of Compliance Policies based on the search criteria.  # noqa: E501

        Returns a collection of Compliance Policies based on the search criteria specified. The search parameters can be organization group id, page, and the pagesize. this end point supports json only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compliance_policy_v1_get_compliance_policies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizationgroupuuid: Organization Group UUID.
        :param int page: Page number
        :param int pagesize: Maximum number of results to be returned in each page
        :param str searchtext: Search text can be a part of the policy name or policy description
        :param str status: Status can be used to filter the search results based on the compliance policy status. Expected values of status can be All(Both Active and Inactive policies), Active(Active complaince policies) or Inactive(Inactive compliance policies)
        :return: CompliancePolicySearchResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupuuid', 'page', 'pagesize', 'searchtext', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compliance_policy_v1_get_compliance_policies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'searchtext' in params:
            query_params.append(('searchtext', params['searchtext']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/compliancepolicies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompliancePolicySearchResultV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compliance_policy_v1_search(self, **kwargs):  # noqa: E501
        """Searches for the CompliancePolicies with the search parameters passed.  # noqa: E501

        Searches for a compliance policy in airwatch based on the search parameters passed.  The search parameters can be organization group id, page, and the pagesize.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compliance_policy_v1_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id which is similar to selected organization group selected in console.
        :param int page: page number.
        :param int pagesize: Maximum results which should be returned in each page.
        :return: CompliancePolicySearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.compliance_policy_v1_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.compliance_policy_v1_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def compliance_policy_v1_search_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for the CompliancePolicies with the search parameters passed.  # noqa: E501

        Searches for a compliance policy in airwatch based on the search parameters passed.  The search parameters can be organization group id, page, and the pagesize.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compliance_policy_v1_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id which is similar to selected organization group selected in console.
        :param int page: page number.
        :param int pagesize: Maximum results which should be returned in each page.
        :return: CompliancePolicySearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compliance_policy_v1_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/compliancepolicy/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CompliancePolicySearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
