# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class ApplicationListEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_name': 'str',
        'application_id': 'str',
        'folder_category': 'str',
        'application_visibility': 'bool',
        'application_location': 'str',
        'application_hide_from_user': 'bool',
        'launch_on_start': 'bool',
        'app_type': 'str'
    }

    attribute_map = {
        'application_name': 'ApplicationName',
        'application_id': 'ApplicationId',
        'folder_category': 'FolderCategory',
        'application_visibility': 'ApplicationVisibility',
        'application_location': 'ApplicationLocation',
        'application_hide_from_user': 'ApplicationHideFromUser',
        'launch_on_start': 'LaunchOnStart',
        'app_type': 'AppType'
    }

    def __init__(self, application_name=None, application_id=None, folder_category=None, application_visibility=None, application_location=None, application_hide_from_user=None, launch_on_start=None, app_type=None, _configuration=None):  # noqa: E501
        """ApplicationListEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application_name = None
        self._application_id = None
        self._folder_category = None
        self._application_visibility = None
        self._application_location = None
        self._application_hide_from_user = None
        self._launch_on_start = None
        self._app_type = None
        self.discriminator = None

        if application_name is not None:
            self.application_name = application_name
        if application_id is not None:
            self.application_id = application_id
        if folder_category is not None:
            self.folder_category = folder_category
        if application_visibility is not None:
            self.application_visibility = application_visibility
        if application_location is not None:
            self.application_location = application_location
        if application_hide_from_user is not None:
            self.application_hide_from_user = application_hide_from_user
        if launch_on_start is not None:
            self.launch_on_start = launch_on_start
        if app_type is not None:
            self.app_type = app_type

    @property
    def application_name(self):
        """Gets the application_name of this ApplicationListEntity.  # noqa: E501

        Gets or sets applicationName.  # noqa: E501

        :return: The application_name of this ApplicationListEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApplicationListEntity.

        Gets or sets applicationName.  # noqa: E501

        :param application_name: The application_name of this ApplicationListEntity.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationListEntity.  # noqa: E501

        Gets or sets applicationId.  # noqa: E501

        :return: The application_id of this ApplicationListEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationListEntity.

        Gets or sets applicationId.  # noqa: E501

        :param application_id: The application_id of this ApplicationListEntity.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def folder_category(self):
        """Gets the folder_category of this ApplicationListEntity.  # noqa: E501

        Gets or sets folderCategory.  # noqa: E501

        :return: The folder_category of this ApplicationListEntity.  # noqa: E501
        :rtype: str
        """
        return self._folder_category

    @folder_category.setter
    def folder_category(self, folder_category):
        """Sets the folder_category of this ApplicationListEntity.

        Gets or sets folderCategory.  # noqa: E501

        :param folder_category: The folder_category of this ApplicationListEntity.  # noqa: E501
        :type: str
        """

        self._folder_category = folder_category

    @property
    def application_visibility(self):
        """Gets the application_visibility of this ApplicationListEntity.  # noqa: E501

        Gets or sets a value indicating whether applicationVisibility.  # noqa: E501

        :return: The application_visibility of this ApplicationListEntity.  # noqa: E501
        :rtype: bool
        """
        return self._application_visibility

    @application_visibility.setter
    def application_visibility(self, application_visibility):
        """Sets the application_visibility of this ApplicationListEntity.

        Gets or sets a value indicating whether applicationVisibility.  # noqa: E501

        :param application_visibility: The application_visibility of this ApplicationListEntity.  # noqa: E501
        :type: bool
        """

        self._application_visibility = application_visibility

    @property
    def application_location(self):
        """Gets the application_location of this ApplicationListEntity.  # noqa: E501

        Gets or sets applicationLocation.  # noqa: E501

        :return: The application_location of this ApplicationListEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_location

    @application_location.setter
    def application_location(self, application_location):
        """Sets the application_location of this ApplicationListEntity.

        Gets or sets applicationLocation.  # noqa: E501

        :param application_location: The application_location of this ApplicationListEntity.  # noqa: E501
        :type: str
        """

        self._application_location = application_location

    @property
    def application_hide_from_user(self):
        """Gets the application_hide_from_user of this ApplicationListEntity.  # noqa: E501

        Gets or sets a value indicating whether applicationHideFromUser.  # noqa: E501

        :return: The application_hide_from_user of this ApplicationListEntity.  # noqa: E501
        :rtype: bool
        """
        return self._application_hide_from_user

    @application_hide_from_user.setter
    def application_hide_from_user(self, application_hide_from_user):
        """Sets the application_hide_from_user of this ApplicationListEntity.

        Gets or sets a value indicating whether applicationHideFromUser.  # noqa: E501

        :param application_hide_from_user: The application_hide_from_user of this ApplicationListEntity.  # noqa: E501
        :type: bool
        """

        self._application_hide_from_user = application_hide_from_user

    @property
    def launch_on_start(self):
        """Gets the launch_on_start of this ApplicationListEntity.  # noqa: E501

        Gets or sets a value indicating whether launchOnStart.  # noqa: E501

        :return: The launch_on_start of this ApplicationListEntity.  # noqa: E501
        :rtype: bool
        """
        return self._launch_on_start

    @launch_on_start.setter
    def launch_on_start(self, launch_on_start):
        """Sets the launch_on_start of this ApplicationListEntity.

        Gets or sets a value indicating whether launchOnStart.  # noqa: E501

        :param launch_on_start: The launch_on_start of this ApplicationListEntity.  # noqa: E501
        :type: bool
        """

        self._launch_on_start = launch_on_start

    @property
    def app_type(self):
        """Gets the app_type of this ApplicationListEntity.  # noqa: E501

        Gets or sets appType.  # noqa: E501

        :return: The app_type of this ApplicationListEntity.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this ApplicationListEntity.

        Gets or sets appType.  # noqa: E501

        :param app_type: The app_type of this ApplicationListEntity.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationListEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationListEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationListEntity):
            return True

        return self.to_dict() != other.to_dict()
