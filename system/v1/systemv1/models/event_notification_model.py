# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class EventNotificationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_name': 'str',
        'target_url': 'str',
        'username': 'str',
        'password': 'str',
        'format': 'int',
        'is_active': 'bool',
        'device_events': 'DeviceEventsModel',
        'organization_group_id': 'int',
        'organization_group_uuid': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'target_name': 'TargetName',
        'target_url': 'TargetUrl',
        'username': 'Username',
        'password': 'Password',
        'format': 'Format',
        'is_active': 'IsActive',
        'device_events': 'DeviceEvents',
        'organization_group_id': 'organizationGroupId',
        'organization_group_uuid': 'organizationGroupUuid',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, target_name=None, target_url=None, username=None, password=None, format=None, is_active=None, device_events=None, organization_group_id=None, organization_group_uuid=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """EventNotificationModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._target_name = None
        self._target_url = None
        self._username = None
        self._password = None
        self._format = None
        self._is_active = None
        self._device_events = None
        self._organization_group_id = None
        self._organization_group_uuid = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if target_name is not None:
            self.target_name = target_name
        if target_url is not None:
            self.target_url = target_url
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if format is not None:
            self.format = format
        if is_active is not None:
            self.is_active = is_active
        if device_events is not None:
            self.device_events = device_events
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def target_name(self):
        """Gets the target_name of this EventNotificationModel.  # noqa: E501

        Gets or sets the Friendly name of the Target URL.  # noqa: E501

        :return: The target_name of this EventNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this EventNotificationModel.

        Gets or sets the Friendly name of the Target URL.  # noqa: E501

        :param target_name: The target_name of this EventNotificationModel.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def target_url(self):
        """Gets the target_url of this EventNotificationModel.  # noqa: E501

        Gets or sets the URL to send the event notifications to.  # noqa: E501

        :return: The target_url of this EventNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this EventNotificationModel.

        Gets or sets the URL to send the event notifications to.  # noqa: E501

        :param target_url: The target_url of this EventNotificationModel.  # noqa: E501
        :type: str
        """

        self._target_url = target_url

    @property
    def username(self):
        """Gets the username of this EventNotificationModel.  # noqa: E501

        Gets or sets the username required to access the Target URL.  # noqa: E501

        :return: The username of this EventNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EventNotificationModel.

        Gets or sets the username required to access the Target URL.  # noqa: E501

        :param username: The username of this EventNotificationModel.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this EventNotificationModel.  # noqa: E501

        Gets or sets the Password required to access the Target URL.  # noqa: E501

        :return: The password of this EventNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EventNotificationModel.

        Gets or sets the Password required to access the Target URL.  # noqa: E501

        :param password: The password of this EventNotificationModel.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def format(self):
        """Gets the format of this EventNotificationModel.  # noqa: E501

        Gets or sets the format of the POST message: XML(0) or Json(1).  # noqa: E501

        :return: The format of this EventNotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this EventNotificationModel.

        Gets or sets the format of the POST message: XML(0) or Json(1).  # noqa: E501

        :param format: The format of this EventNotificationModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                format not in allowed_values):
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def is_active(self):
        """Gets the is_active of this EventNotificationModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether event notification's have been set to active or inactive.  # noqa: E501

        :return: The is_active of this EventNotificationModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this EventNotificationModel.

        Gets or sets a value indicating whether indicates whether event notification's have been set to active or inactive.  # noqa: E501

        :param is_active: The is_active of this EventNotificationModel.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def device_events(self):
        """Gets the device_events of this EventNotificationModel.  # noqa: E501

        Gets or sets device events that could occur for a device.  # noqa: E501

        :return: The device_events of this EventNotificationModel.  # noqa: E501
        :rtype: DeviceEventsModel
        """
        return self._device_events

    @device_events.setter
    def device_events(self, device_events):
        """Sets the device_events of this EventNotificationModel.

        Gets or sets device events that could occur for a device.  # noqa: E501

        :param device_events: The device_events of this EventNotificationModel.  # noqa: E501
        :type: DeviceEventsModel
        """

        self._device_events = device_events

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this EventNotificationModel.  # noqa: E501

        Gets or sets organization group ID.  # noqa: E501

        :return: The organization_group_id of this EventNotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this EventNotificationModel.

        Gets or sets organization group ID.  # noqa: E501

        :param organization_group_id: The organization_group_id of this EventNotificationModel.  # noqa: E501
        :type: int
        """

        self._organization_group_id = organization_group_id

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this EventNotificationModel.  # noqa: E501

        Gets or sets organization group UUID.  # noqa: E501

        :return: The organization_group_uuid of this EventNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this EventNotificationModel.

        Gets or sets organization group UUID.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this EventNotificationModel.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def id(self):
        """Gets the id of this EventNotificationModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this EventNotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventNotificationModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this EventNotificationModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this EventNotificationModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this EventNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this EventNotificationModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this EventNotificationModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventNotificationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventNotificationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventNotificationModel):
            return True

        return self.to_dict() != other.to_dict()
