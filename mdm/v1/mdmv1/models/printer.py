# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class Printer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'friendly_name': 'str',
        'device_type_id': 'int',
        'device_type': 'str',
        'last_seen': 'datetime',
        'enrollment_status_id': 'int',
        'enrollment_status': 'str',
        'device_identifier': 'str',
        'display_model': 'str',
        'enrollment_date': 'datetime',
        'unenrollment_date': 'datetime',
        'location_group_id': 'int',
        'printer_sample': 'object'
    }

    attribute_map = {
        'device_id': 'DeviceID',
        'friendly_name': 'FriendlyName',
        'device_type_id': 'DeviceTypeID',
        'device_type': 'DeviceType',
        'last_seen': 'LastSeen',
        'enrollment_status_id': 'EnrollmentStatusID',
        'enrollment_status': 'EnrollmentStatus',
        'device_identifier': 'DeviceIdentifier',
        'display_model': 'DisplayModel',
        'enrollment_date': 'EnrollmentDate',
        'unenrollment_date': 'UnenrollmentDate',
        'location_group_id': 'LocationGroupID',
        'printer_sample': 'PrinterSample'
    }

    def __init__(self, device_id=None, friendly_name=None, device_type_id=None, device_type=None, last_seen=None, enrollment_status_id=None, enrollment_status=None, device_identifier=None, display_model=None, enrollment_date=None, unenrollment_date=None, location_group_id=None, printer_sample=None, _configuration=None):  # noqa: E501
        """Printer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_id = None
        self._friendly_name = None
        self._device_type_id = None
        self._device_type = None
        self._last_seen = None
        self._enrollment_status_id = None
        self._enrollment_status = None
        self._device_identifier = None
        self._display_model = None
        self._enrollment_date = None
        self._unenrollment_date = None
        self._location_group_id = None
        self._printer_sample = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if device_type_id is not None:
            self.device_type_id = device_type_id
        if device_type is not None:
            self.device_type = device_type
        if last_seen is not None:
            self.last_seen = last_seen
        if enrollment_status_id is not None:
            self.enrollment_status_id = enrollment_status_id
        if enrollment_status is not None:
            self.enrollment_status = enrollment_status
        if device_identifier is not None:
            self.device_identifier = device_identifier
        if display_model is not None:
            self.display_model = display_model
        if enrollment_date is not None:
            self.enrollment_date = enrollment_date
        if unenrollment_date is not None:
            self.unenrollment_date = unenrollment_date
        if location_group_id is not None:
            self.location_group_id = location_group_id
        if printer_sample is not None:
            self.printer_sample = printer_sample

    @property
    def device_id(self):
        """Gets the device_id of this Printer.  # noqa: E501

        Gets or sets device ID of the Printer.  # noqa: E501

        :return: The device_id of this Printer.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Printer.

        Gets or sets device ID of the Printer.  # noqa: E501

        :param device_id: The device_id of this Printer.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def friendly_name(self):
        """Gets the friendly_name of this Printer.  # noqa: E501

        Gets or sets friendly Name of the Printer.  # noqa: E501

        :return: The friendly_name of this Printer.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this Printer.

        Gets or sets friendly Name of the Printer.  # noqa: E501

        :param friendly_name: The friendly_name of this Printer.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def device_type_id(self):
        """Gets the device_type_id of this Printer.  # noqa: E501

        Gets or sets device Type ID of the Printer.  # noqa: E501

        :return: The device_type_id of this Printer.  # noqa: E501
        :rtype: int
        """
        return self._device_type_id

    @device_type_id.setter
    def device_type_id(self, device_type_id):
        """Sets the device_type_id of this Printer.

        Gets or sets device Type ID of the Printer.  # noqa: E501

        :param device_type_id: The device_type_id of this Printer.  # noqa: E501
        :type: int
        """

        self._device_type_id = device_type_id

    @property
    def device_type(self):
        """Gets the device_type of this Printer.  # noqa: E501

        Gets or sets device Type of the Printer.  # noqa: E501

        :return: The device_type of this Printer.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Printer.

        Gets or sets device Type of the Printer.  # noqa: E501

        :param device_type: The device_type of this Printer.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def last_seen(self):
        """Gets the last_seen of this Printer.  # noqa: E501

        Gets or sets last Seen date and time of the Printer.  # noqa: E501

        :return: The last_seen of this Printer.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this Printer.

        Gets or sets last Seen date and time of the Printer.  # noqa: E501

        :param last_seen: The last_seen of this Printer.  # noqa: E501
        :type: datetime
        """

        self._last_seen = last_seen

    @property
    def enrollment_status_id(self):
        """Gets the enrollment_status_id of this Printer.  # noqa: E501

        Gets or sets enrollment Status ID of the Printer.  # noqa: E501

        :return: The enrollment_status_id of this Printer.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_status_id

    @enrollment_status_id.setter
    def enrollment_status_id(self, enrollment_status_id):
        """Sets the enrollment_status_id of this Printer.

        Gets or sets enrollment Status ID of the Printer.  # noqa: E501

        :param enrollment_status_id: The enrollment_status_id of this Printer.  # noqa: E501
        :type: int
        """

        self._enrollment_status_id = enrollment_status_id

    @property
    def enrollment_status(self):
        """Gets the enrollment_status of this Printer.  # noqa: E501

        Gets or sets enrollment Status of the Printer.  # noqa: E501

        :return: The enrollment_status of this Printer.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_status

    @enrollment_status.setter
    def enrollment_status(self, enrollment_status):
        """Sets the enrollment_status of this Printer.

        Gets or sets enrollment Status of the Printer.  # noqa: E501

        :param enrollment_status: The enrollment_status of this Printer.  # noqa: E501
        :type: str
        """

        self._enrollment_status = enrollment_status

    @property
    def device_identifier(self):
        """Gets the device_identifier of this Printer.  # noqa: E501

        Gets or sets device Identifier of the Printer.  # noqa: E501

        :return: The device_identifier of this Printer.  # noqa: E501
        :rtype: str
        """
        return self._device_identifier

    @device_identifier.setter
    def device_identifier(self, device_identifier):
        """Sets the device_identifier of this Printer.

        Gets or sets device Identifier of the Printer.  # noqa: E501

        :param device_identifier: The device_identifier of this Printer.  # noqa: E501
        :type: str
        """

        self._device_identifier = device_identifier

    @property
    def display_model(self):
        """Gets the display_model of this Printer.  # noqa: E501

        Gets or sets display Model of the Printer.  # noqa: E501

        :return: The display_model of this Printer.  # noqa: E501
        :rtype: str
        """
        return self._display_model

    @display_model.setter
    def display_model(self, display_model):
        """Sets the display_model of this Printer.

        Gets or sets display Model of the Printer.  # noqa: E501

        :param display_model: The display_model of this Printer.  # noqa: E501
        :type: str
        """

        self._display_model = display_model

    @property
    def enrollment_date(self):
        """Gets the enrollment_date of this Printer.  # noqa: E501

        Gets or sets enrollment Date of the Printer.  # noqa: E501

        :return: The enrollment_date of this Printer.  # noqa: E501
        :rtype: datetime
        """
        return self._enrollment_date

    @enrollment_date.setter
    def enrollment_date(self, enrollment_date):
        """Sets the enrollment_date of this Printer.

        Gets or sets enrollment Date of the Printer.  # noqa: E501

        :param enrollment_date: The enrollment_date of this Printer.  # noqa: E501
        :type: datetime
        """

        self._enrollment_date = enrollment_date

    @property
    def unenrollment_date(self):
        """Gets the unenrollment_date of this Printer.  # noqa: E501

        Gets or sets unenrollment Date of the Printer.  # noqa: E501

        :return: The unenrollment_date of this Printer.  # noqa: E501
        :rtype: datetime
        """
        return self._unenrollment_date

    @unenrollment_date.setter
    def unenrollment_date(self, unenrollment_date):
        """Sets the unenrollment_date of this Printer.

        Gets or sets unenrollment Date of the Printer.  # noqa: E501

        :param unenrollment_date: The unenrollment_date of this Printer.  # noqa: E501
        :type: datetime
        """

        self._unenrollment_date = unenrollment_date

    @property
    def location_group_id(self):
        """Gets the location_group_id of this Printer.  # noqa: E501

        Gets or sets location Group ID of the Printer.  # noqa: E501

        :return: The location_group_id of this Printer.  # noqa: E501
        :rtype: int
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this Printer.

        Gets or sets location Group ID of the Printer.  # noqa: E501

        :param location_group_id: The location_group_id of this Printer.  # noqa: E501
        :type: int
        """

        self._location_group_id = location_group_id

    @property
    def printer_sample(self):
        """Gets the printer_sample of this Printer.  # noqa: E501

        Gets or sets printer Sample.  # noqa: E501

        :return: The printer_sample of this Printer.  # noqa: E501
        :rtype: object
        """
        return self._printer_sample

    @printer_sample.setter
    def printer_sample(self, printer_sample):
        """Sets the printer_sample of this Printer.

        Gets or sets printer Sample.  # noqa: E501

        :param printer_sample: The printer_sample of this Printer.  # noqa: E501
        :type: object
        """

        self._printer_sample = printer_sample

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Printer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Printer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Printer):
            return True

        return self.to_dict() != other.to_dict()
