# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidRestrictionsPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_camera': 'bool',
        'allow_microphone': 'bool',
        'allow_factory_reset': 'bool',
        'allow_all_tethering': 'bool',
        'allow_wi_fi_tethering': 'bool',
        'allow_bluetooth_tethering': 'bool',
        'allow_usb_tethering': 'bool',
        'allow_usb_debugging': 'bool',
        'allow_usb_mass_storage': 'bool',
        'allow_google_backup': 'bool',
        'allow_sd_card_access': 'bool',
        'allow_access_to_device_settings': 'bool',
        'allow_screen_capture': 'bool',
        'allow_mock_locations': 'bool',
        'allow_clipboard': 'bool',
        'allow_usb_media_player': 'bool',
        'allow_background_data': 'bool',
        'allow_nfc': 'bool',
        'allow_home_key': 'bool',
        'allow_email_account_addition': 'bool',
        'add_accounts_to_addition_white_list': 'bool',
        'whitelist_addition_accounts': 'str',
        'add_accounts_to_addition_black_list': 'bool',
        'blacklist_addition_accounts': 'str',
        'allow_email_account_removal': 'bool',
        'add_accounts_to_removal_white_list': 'bool',
        'whitelist_removal_accounts': 'str',
        'add_accounts_to_removal_black_list': 'bool',
        'blacklist_removal_accounts': 'str',
        'allow_usb': 'bool',
        'allow_airplane_mode': 'bool',
        'allow_android_market': 'bool',
        'allow_you_tube': 'bool',
        'allow_native_android_browser': 'bool',
        'allow_non_market_app_installation': 'bool',
        'allow_voice_dialer': 'bool',
        'allow_bluetooth': 'bool',
        'allow_bluetooth_data_transfer': 'bool',
        'allow_bluetooth_pairing': 'bool',
        'allow_bluetooth_discoverable_mode': 'bool',
        'allow_bluetooth_limited_discoverable_mode': 'bool',
        'allow_outgoing_calls_via_bluetooth': 'bool',
        'allow_desktop_connectivity_via_bluetooth': 'bool',
        'data_connection': 'int',
        'allow_wi_fi_profiles': 'bool',
        'allow_wifi_changes': 'bool',
        'allow_prompt_for_credentials': 'bool',
        'minimum_wi_fi_security_level': 'int',
        'allow_automatic_sync_on_roaming': 'bool',
        'allow_push_messages_on_roaming': 'bool',
        'allow_data_usage_on_roaming': 'bool',
        'allow_gps_location_services': 'bool',
        'allow_wireless_network_location_services': 'bool',
        'allow_passive_location_services': 'bool',
        'allow_pop_ups': 'bool',
        'allow_cookies': 'bool',
        'enable_autofill': 'bool',
        'enable_java_script': 'bool',
        'force_fraud_warning': 'bool',
        'blocked_networks': 'list[str]',
        'allow_non_emergency_calls': 'bool',
        'allow_sending_sms': 'bool',
        'allow_pop_imap_email': 'bool',
        'allow_incoming_mms': 'bool',
        'allow_outgoing_mms': 'bool',
        'max_data_usage_models': 'list[AndroidMaxDataUsageEntity]',
        'set_device_font': 'bool',
        'font_name': 'str',
        'set_device_font_size': 'bool',
        'font_size': 'int',
        'allow_google_crash_report': 'bool',
        'allow_ota_upgrade': 'bool',
        'allow_power_off': 'bool',
        'allow_sd_card_write': 'bool',
        'allow_status_bar': 'bool',
        'allow_wallpaper_change': 'bool',
        'allow_native_vpn': 'bool',
        'allow_roaming_voice_calls': 'bool',
        'allow_audio_recording_if_microphone_is_allowed': 'bool',
        'allow_video_recording_if_camera_is_allowed': 'bool',
        'allow_ending_activity_when_left_idle': 'bool',
        'allow_user_to_set_background_process_limit': 'bool',
        'allow_user_to_set_mobile_data_limit': 'bool',
        'allow_sms_with_storage': 'bool',
        'allow_mms_with_storage': 'bool',
        'allow_wap_push': 'bool',
        'allow_wifi_direct': 'bool',
        'allow_s_beam': 'bool',
        'allow_s_voice': 'bool',
        'allow_android_beam': 'bool',
        'allow_copy_paste_between_different_applications': 'bool',
        'allow_user_to_stop_system_signed_applications': 'bool',
        'allow_usb_host_storage': 'bool',
        'enable_sim_pin_lock': 'bool',
        'allow_unsecure_wifi': 'bool',
        'allow_auto_connection_wifi': 'bool',
        'allow_account_settings': 'bool',
        'allow_application_settings': 'bool',
        'allow_developer_options': 'bool',
        'allow_notifications': 'bool',
        'allow_only_secure_vpn_connections': 'bool',
        'allow_system_bar': 'bool',
        'allow_task_manager': 'bool',
        'allow_menu_key': 'bool',
        'allow_back_key': 'bool',
        'allow_search_key': 'bool',
        'allow_volume_key': 'bool',
        'allow_keyguard_features': 'bool',
        'allow_keyguard_trust_agent': 'bool',
        'allow_keyguard_camera': 'bool',
        'allow_keyguard_fingerprint': 'bool',
        'allow_keyguard_notifications': 'bool',
        'allow_keyguard_unredacted': 'bool',
        'allow_user_creation': 'bool',
        'allow_multiple_users': 'bool',
        'allow_user_removal': 'bool',
        'enable_samsung_efota': 'bool'
    }

    attribute_map = {
        'allow_camera': 'AllowCamera',
        'allow_microphone': 'AllowMicrophone',
        'allow_factory_reset': 'AllowFactoryReset',
        'allow_all_tethering': 'AllowAllTethering',
        'allow_wi_fi_tethering': 'AllowWiFiTethering',
        'allow_bluetooth_tethering': 'AllowBluetoothTethering',
        'allow_usb_tethering': 'AllowUSBTethering',
        'allow_usb_debugging': 'AllowUSBDebugging',
        'allow_usb_mass_storage': 'AllowUSBMassStorage',
        'allow_google_backup': 'AllowGoogleBackup',
        'allow_sd_card_access': 'AllowSDCardAccess',
        'allow_access_to_device_settings': 'AllowAccessToDeviceSettings',
        'allow_screen_capture': 'AllowScreenCapture',
        'allow_mock_locations': 'AllowMockLocations',
        'allow_clipboard': 'AllowClipboard',
        'allow_usb_media_player': 'AllowUSBMediaPlayer',
        'allow_background_data': 'AllowBackgroundData',
        'allow_nfc': 'AllowNFC',
        'allow_home_key': 'AllowHomeKey',
        'allow_email_account_addition': 'AllowEmailAccountAddition',
        'add_accounts_to_addition_white_list': 'AddAccountsToAdditionWhiteList',
        'whitelist_addition_accounts': 'WhitelistAdditionAccounts',
        'add_accounts_to_addition_black_list': 'AddAccountsToAdditionBlackList',
        'blacklist_addition_accounts': 'BlacklistAdditionAccounts',
        'allow_email_account_removal': 'AllowEmailAccountRemoval',
        'add_accounts_to_removal_white_list': 'AddAccountsToRemovalWhiteList',
        'whitelist_removal_accounts': 'WhitelistRemovalAccounts',
        'add_accounts_to_removal_black_list': 'AddAccountsToRemovalBlackList',
        'blacklist_removal_accounts': 'BlacklistRemovalAccounts',
        'allow_usb': 'AllowUsb',
        'allow_airplane_mode': 'AllowAirplaneMode',
        'allow_android_market': 'AllowAndroidMarket',
        'allow_you_tube': 'AllowYouTube',
        'allow_native_android_browser': 'AllowNativeAndroidBrowser',
        'allow_non_market_app_installation': 'AllowNonMarketAppInstallation',
        'allow_voice_dialer': 'AllowVoiceDialer',
        'allow_bluetooth': 'AllowBluetooth',
        'allow_bluetooth_data_transfer': 'AllowBluetoothDataTransfer',
        'allow_bluetooth_pairing': 'AllowBluetoothPairing',
        'allow_bluetooth_discoverable_mode': 'AllowBluetoothDiscoverableMode',
        'allow_bluetooth_limited_discoverable_mode': 'AllowBluetoothLimitedDiscoverableMode',
        'allow_outgoing_calls_via_bluetooth': 'AllowOutgoingCallsViaBluetooth',
        'allow_desktop_connectivity_via_bluetooth': 'AllowDesktopConnectivityViaBluetooth',
        'data_connection': 'DataConnection',
        'allow_wi_fi_profiles': 'AllowWiFiProfiles',
        'allow_wifi_changes': 'AllowWifiChanges',
        'allow_prompt_for_credentials': 'AllowPromptForCredentials',
        'minimum_wi_fi_security_level': 'MinimumWiFiSecurityLevel',
        'allow_automatic_sync_on_roaming': 'AllowAutomaticSyncOnRoaming',
        'allow_push_messages_on_roaming': 'AllowPushMessagesOnRoaming',
        'allow_data_usage_on_roaming': 'AllowDataUsageOnRoaming',
        'allow_gps_location_services': 'AllowGpsLocationServices',
        'allow_wireless_network_location_services': 'AllowWirelessNetworkLocationServices',
        'allow_passive_location_services': 'AllowPassiveLocationServices',
        'allow_pop_ups': 'AllowPopUps',
        'allow_cookies': 'AllowCookies',
        'enable_autofill': 'EnableAutofill',
        'enable_java_script': 'EnableJavaScript',
        'force_fraud_warning': 'ForceFraudWarning',
        'blocked_networks': 'BlockedNetworks',
        'allow_non_emergency_calls': 'AllowNonEmergencyCalls',
        'allow_sending_sms': 'AllowSendingSms',
        'allow_pop_imap_email': 'AllowPopImapEmail',
        'allow_incoming_mms': 'AllowIncomingMms',
        'allow_outgoing_mms': 'AllowOutgoingMms',
        'max_data_usage_models': 'MaxDataUsageModels',
        'set_device_font': 'SetDeviceFont',
        'font_name': 'FontName',
        'set_device_font_size': 'SetDeviceFontSize',
        'font_size': 'FontSize',
        'allow_google_crash_report': 'AllowGoogleCrashReport',
        'allow_ota_upgrade': 'AllowOtaUpgrade',
        'allow_power_off': 'AllowPowerOff',
        'allow_sd_card_write': 'AllowSdCardWrite',
        'allow_status_bar': 'AllowStatusBar',
        'allow_wallpaper_change': 'AllowWallpaperChange',
        'allow_native_vpn': 'AllowNativeVpn',
        'allow_roaming_voice_calls': 'AllowRoamingVoiceCalls',
        'allow_audio_recording_if_microphone_is_allowed': 'AllowAudioRecordingIfMicrophoneIsAllowed',
        'allow_video_recording_if_camera_is_allowed': 'AllowVideoRecordingIfCameraIsAllowed',
        'allow_ending_activity_when_left_idle': 'AllowEndingActivityWhenLeftIdle',
        'allow_user_to_set_background_process_limit': 'AllowUserToSetBackgroundProcessLimit',
        'allow_user_to_set_mobile_data_limit': 'AllowUserToSetMobileDataLimit',
        'allow_sms_with_storage': 'AllowSmsWithStorage',
        'allow_mms_with_storage': 'AllowMmsWithStorage',
        'allow_wap_push': 'AllowWapPush',
        'allow_wifi_direct': 'AllowWifiDirect',
        'allow_s_beam': 'AllowSBeam',
        'allow_s_voice': 'AllowSVoice',
        'allow_android_beam': 'AllowAndroidBeam',
        'allow_copy_paste_between_different_applications': 'AllowCopyPasteBetweenDifferentApplications',
        'allow_user_to_stop_system_signed_applications': 'AllowUserToStopSystemSignedApplications',
        'allow_usb_host_storage': 'AllowUsbHostStorage',
        'enable_sim_pin_lock': 'EnableSimPinLock',
        'allow_unsecure_wifi': 'AllowUnsecureWifi',
        'allow_auto_connection_wifi': 'AllowAutoConnectionWifi',
        'allow_account_settings': 'AllowAccountSettings',
        'allow_application_settings': 'AllowApplicationSettings',
        'allow_developer_options': 'AllowDeveloperOptions',
        'allow_notifications': 'AllowNotifications',
        'allow_only_secure_vpn_connections': 'AllowOnlySecureVPNConnections',
        'allow_system_bar': 'AllowSystemBar',
        'allow_task_manager': 'AllowTaskManager',
        'allow_menu_key': 'AllowMenuKey',
        'allow_back_key': 'AllowBackKey',
        'allow_search_key': 'AllowSearchKey',
        'allow_volume_key': 'AllowVolumeKey',
        'allow_keyguard_features': 'AllowKeyguardFeatures',
        'allow_keyguard_trust_agent': 'AllowKeyguardTrustAgent',
        'allow_keyguard_camera': 'AllowKeyguardCamera',
        'allow_keyguard_fingerprint': 'AllowKeyguardFingerprint',
        'allow_keyguard_notifications': 'AllowKeyguardNotifications',
        'allow_keyguard_unredacted': 'AllowKeyguardUnredacted',
        'allow_user_creation': 'AllowUserCreation',
        'allow_multiple_users': 'AllowMultipleUsers',
        'allow_user_removal': 'AllowUserRemoval',
        'enable_samsung_efota': 'EnableSamsungEfota'
    }

    def __init__(self, allow_camera=None, allow_microphone=None, allow_factory_reset=None, allow_all_tethering=None, allow_wi_fi_tethering=None, allow_bluetooth_tethering=None, allow_usb_tethering=None, allow_usb_debugging=None, allow_usb_mass_storage=None, allow_google_backup=None, allow_sd_card_access=None, allow_access_to_device_settings=None, allow_screen_capture=None, allow_mock_locations=None, allow_clipboard=None, allow_usb_media_player=None, allow_background_data=None, allow_nfc=None, allow_home_key=None, allow_email_account_addition=None, add_accounts_to_addition_white_list=None, whitelist_addition_accounts=None, add_accounts_to_addition_black_list=None, blacklist_addition_accounts=None, allow_email_account_removal=None, add_accounts_to_removal_white_list=None, whitelist_removal_accounts=None, add_accounts_to_removal_black_list=None, blacklist_removal_accounts=None, allow_usb=None, allow_airplane_mode=None, allow_android_market=None, allow_you_tube=None, allow_native_android_browser=None, allow_non_market_app_installation=None, allow_voice_dialer=None, allow_bluetooth=None, allow_bluetooth_data_transfer=None, allow_bluetooth_pairing=None, allow_bluetooth_discoverable_mode=None, allow_bluetooth_limited_discoverable_mode=None, allow_outgoing_calls_via_bluetooth=None, allow_desktop_connectivity_via_bluetooth=None, data_connection=None, allow_wi_fi_profiles=None, allow_wifi_changes=None, allow_prompt_for_credentials=None, minimum_wi_fi_security_level=None, allow_automatic_sync_on_roaming=None, allow_push_messages_on_roaming=None, allow_data_usage_on_roaming=None, allow_gps_location_services=None, allow_wireless_network_location_services=None, allow_passive_location_services=None, allow_pop_ups=None, allow_cookies=None, enable_autofill=None, enable_java_script=None, force_fraud_warning=None, blocked_networks=None, allow_non_emergency_calls=None, allow_sending_sms=None, allow_pop_imap_email=None, allow_incoming_mms=None, allow_outgoing_mms=None, max_data_usage_models=None, set_device_font=None, font_name=None, set_device_font_size=None, font_size=None, allow_google_crash_report=None, allow_ota_upgrade=None, allow_power_off=None, allow_sd_card_write=None, allow_status_bar=None, allow_wallpaper_change=None, allow_native_vpn=None, allow_roaming_voice_calls=None, allow_audio_recording_if_microphone_is_allowed=None, allow_video_recording_if_camera_is_allowed=None, allow_ending_activity_when_left_idle=None, allow_user_to_set_background_process_limit=None, allow_user_to_set_mobile_data_limit=None, allow_sms_with_storage=None, allow_mms_with_storage=None, allow_wap_push=None, allow_wifi_direct=None, allow_s_beam=None, allow_s_voice=None, allow_android_beam=None, allow_copy_paste_between_different_applications=None, allow_user_to_stop_system_signed_applications=None, allow_usb_host_storage=None, enable_sim_pin_lock=None, allow_unsecure_wifi=None, allow_auto_connection_wifi=None, allow_account_settings=None, allow_application_settings=None, allow_developer_options=None, allow_notifications=None, allow_only_secure_vpn_connections=None, allow_system_bar=None, allow_task_manager=None, allow_menu_key=None, allow_back_key=None, allow_search_key=None, allow_volume_key=None, allow_keyguard_features=None, allow_keyguard_trust_agent=None, allow_keyguard_camera=None, allow_keyguard_fingerprint=None, allow_keyguard_notifications=None, allow_keyguard_unredacted=None, allow_user_creation=None, allow_multiple_users=None, allow_user_removal=None, enable_samsung_efota=None, _configuration=None):  # noqa: E501
        """AndroidRestrictionsPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_camera = None
        self._allow_microphone = None
        self._allow_factory_reset = None
        self._allow_all_tethering = None
        self._allow_wi_fi_tethering = None
        self._allow_bluetooth_tethering = None
        self._allow_usb_tethering = None
        self._allow_usb_debugging = None
        self._allow_usb_mass_storage = None
        self._allow_google_backup = None
        self._allow_sd_card_access = None
        self._allow_access_to_device_settings = None
        self._allow_screen_capture = None
        self._allow_mock_locations = None
        self._allow_clipboard = None
        self._allow_usb_media_player = None
        self._allow_background_data = None
        self._allow_nfc = None
        self._allow_home_key = None
        self._allow_email_account_addition = None
        self._add_accounts_to_addition_white_list = None
        self._whitelist_addition_accounts = None
        self._add_accounts_to_addition_black_list = None
        self._blacklist_addition_accounts = None
        self._allow_email_account_removal = None
        self._add_accounts_to_removal_white_list = None
        self._whitelist_removal_accounts = None
        self._add_accounts_to_removal_black_list = None
        self._blacklist_removal_accounts = None
        self._allow_usb = None
        self._allow_airplane_mode = None
        self._allow_android_market = None
        self._allow_you_tube = None
        self._allow_native_android_browser = None
        self._allow_non_market_app_installation = None
        self._allow_voice_dialer = None
        self._allow_bluetooth = None
        self._allow_bluetooth_data_transfer = None
        self._allow_bluetooth_pairing = None
        self._allow_bluetooth_discoverable_mode = None
        self._allow_bluetooth_limited_discoverable_mode = None
        self._allow_outgoing_calls_via_bluetooth = None
        self._allow_desktop_connectivity_via_bluetooth = None
        self._data_connection = None
        self._allow_wi_fi_profiles = None
        self._allow_wifi_changes = None
        self._allow_prompt_for_credentials = None
        self._minimum_wi_fi_security_level = None
        self._allow_automatic_sync_on_roaming = None
        self._allow_push_messages_on_roaming = None
        self._allow_data_usage_on_roaming = None
        self._allow_gps_location_services = None
        self._allow_wireless_network_location_services = None
        self._allow_passive_location_services = None
        self._allow_pop_ups = None
        self._allow_cookies = None
        self._enable_autofill = None
        self._enable_java_script = None
        self._force_fraud_warning = None
        self._blocked_networks = None
        self._allow_non_emergency_calls = None
        self._allow_sending_sms = None
        self._allow_pop_imap_email = None
        self._allow_incoming_mms = None
        self._allow_outgoing_mms = None
        self._max_data_usage_models = None
        self._set_device_font = None
        self._font_name = None
        self._set_device_font_size = None
        self._font_size = None
        self._allow_google_crash_report = None
        self._allow_ota_upgrade = None
        self._allow_power_off = None
        self._allow_sd_card_write = None
        self._allow_status_bar = None
        self._allow_wallpaper_change = None
        self._allow_native_vpn = None
        self._allow_roaming_voice_calls = None
        self._allow_audio_recording_if_microphone_is_allowed = None
        self._allow_video_recording_if_camera_is_allowed = None
        self._allow_ending_activity_when_left_idle = None
        self._allow_user_to_set_background_process_limit = None
        self._allow_user_to_set_mobile_data_limit = None
        self._allow_sms_with_storage = None
        self._allow_mms_with_storage = None
        self._allow_wap_push = None
        self._allow_wifi_direct = None
        self._allow_s_beam = None
        self._allow_s_voice = None
        self._allow_android_beam = None
        self._allow_copy_paste_between_different_applications = None
        self._allow_user_to_stop_system_signed_applications = None
        self._allow_usb_host_storage = None
        self._enable_sim_pin_lock = None
        self._allow_unsecure_wifi = None
        self._allow_auto_connection_wifi = None
        self._allow_account_settings = None
        self._allow_application_settings = None
        self._allow_developer_options = None
        self._allow_notifications = None
        self._allow_only_secure_vpn_connections = None
        self._allow_system_bar = None
        self._allow_task_manager = None
        self._allow_menu_key = None
        self._allow_back_key = None
        self._allow_search_key = None
        self._allow_volume_key = None
        self._allow_keyguard_features = None
        self._allow_keyguard_trust_agent = None
        self._allow_keyguard_camera = None
        self._allow_keyguard_fingerprint = None
        self._allow_keyguard_notifications = None
        self._allow_keyguard_unredacted = None
        self._allow_user_creation = None
        self._allow_multiple_users = None
        self._allow_user_removal = None
        self._enable_samsung_efota = None
        self.discriminator = None

        if allow_camera is not None:
            self.allow_camera = allow_camera
        if allow_microphone is not None:
            self.allow_microphone = allow_microphone
        if allow_factory_reset is not None:
            self.allow_factory_reset = allow_factory_reset
        if allow_all_tethering is not None:
            self.allow_all_tethering = allow_all_tethering
        if allow_wi_fi_tethering is not None:
            self.allow_wi_fi_tethering = allow_wi_fi_tethering
        if allow_bluetooth_tethering is not None:
            self.allow_bluetooth_tethering = allow_bluetooth_tethering
        if allow_usb_tethering is not None:
            self.allow_usb_tethering = allow_usb_tethering
        if allow_usb_debugging is not None:
            self.allow_usb_debugging = allow_usb_debugging
        if allow_usb_mass_storage is not None:
            self.allow_usb_mass_storage = allow_usb_mass_storage
        if allow_google_backup is not None:
            self.allow_google_backup = allow_google_backup
        if allow_sd_card_access is not None:
            self.allow_sd_card_access = allow_sd_card_access
        if allow_access_to_device_settings is not None:
            self.allow_access_to_device_settings = allow_access_to_device_settings
        if allow_screen_capture is not None:
            self.allow_screen_capture = allow_screen_capture
        if allow_mock_locations is not None:
            self.allow_mock_locations = allow_mock_locations
        if allow_clipboard is not None:
            self.allow_clipboard = allow_clipboard
        if allow_usb_media_player is not None:
            self.allow_usb_media_player = allow_usb_media_player
        if allow_background_data is not None:
            self.allow_background_data = allow_background_data
        if allow_nfc is not None:
            self.allow_nfc = allow_nfc
        if allow_home_key is not None:
            self.allow_home_key = allow_home_key
        if allow_email_account_addition is not None:
            self.allow_email_account_addition = allow_email_account_addition
        if add_accounts_to_addition_white_list is not None:
            self.add_accounts_to_addition_white_list = add_accounts_to_addition_white_list
        if whitelist_addition_accounts is not None:
            self.whitelist_addition_accounts = whitelist_addition_accounts
        if add_accounts_to_addition_black_list is not None:
            self.add_accounts_to_addition_black_list = add_accounts_to_addition_black_list
        if blacklist_addition_accounts is not None:
            self.blacklist_addition_accounts = blacklist_addition_accounts
        if allow_email_account_removal is not None:
            self.allow_email_account_removal = allow_email_account_removal
        if add_accounts_to_removal_white_list is not None:
            self.add_accounts_to_removal_white_list = add_accounts_to_removal_white_list
        if whitelist_removal_accounts is not None:
            self.whitelist_removal_accounts = whitelist_removal_accounts
        if add_accounts_to_removal_black_list is not None:
            self.add_accounts_to_removal_black_list = add_accounts_to_removal_black_list
        if blacklist_removal_accounts is not None:
            self.blacklist_removal_accounts = blacklist_removal_accounts
        if allow_usb is not None:
            self.allow_usb = allow_usb
        if allow_airplane_mode is not None:
            self.allow_airplane_mode = allow_airplane_mode
        if allow_android_market is not None:
            self.allow_android_market = allow_android_market
        if allow_you_tube is not None:
            self.allow_you_tube = allow_you_tube
        if allow_native_android_browser is not None:
            self.allow_native_android_browser = allow_native_android_browser
        if allow_non_market_app_installation is not None:
            self.allow_non_market_app_installation = allow_non_market_app_installation
        if allow_voice_dialer is not None:
            self.allow_voice_dialer = allow_voice_dialer
        if allow_bluetooth is not None:
            self.allow_bluetooth = allow_bluetooth
        if allow_bluetooth_data_transfer is not None:
            self.allow_bluetooth_data_transfer = allow_bluetooth_data_transfer
        if allow_bluetooth_pairing is not None:
            self.allow_bluetooth_pairing = allow_bluetooth_pairing
        if allow_bluetooth_discoverable_mode is not None:
            self.allow_bluetooth_discoverable_mode = allow_bluetooth_discoverable_mode
        if allow_bluetooth_limited_discoverable_mode is not None:
            self.allow_bluetooth_limited_discoverable_mode = allow_bluetooth_limited_discoverable_mode
        if allow_outgoing_calls_via_bluetooth is not None:
            self.allow_outgoing_calls_via_bluetooth = allow_outgoing_calls_via_bluetooth
        if allow_desktop_connectivity_via_bluetooth is not None:
            self.allow_desktop_connectivity_via_bluetooth = allow_desktop_connectivity_via_bluetooth
        if data_connection is not None:
            self.data_connection = data_connection
        if allow_wi_fi_profiles is not None:
            self.allow_wi_fi_profiles = allow_wi_fi_profiles
        if allow_wifi_changes is not None:
            self.allow_wifi_changes = allow_wifi_changes
        if allow_prompt_for_credentials is not None:
            self.allow_prompt_for_credentials = allow_prompt_for_credentials
        if minimum_wi_fi_security_level is not None:
            self.minimum_wi_fi_security_level = minimum_wi_fi_security_level
        if allow_automatic_sync_on_roaming is not None:
            self.allow_automatic_sync_on_roaming = allow_automatic_sync_on_roaming
        if allow_push_messages_on_roaming is not None:
            self.allow_push_messages_on_roaming = allow_push_messages_on_roaming
        if allow_data_usage_on_roaming is not None:
            self.allow_data_usage_on_roaming = allow_data_usage_on_roaming
        if allow_gps_location_services is not None:
            self.allow_gps_location_services = allow_gps_location_services
        if allow_wireless_network_location_services is not None:
            self.allow_wireless_network_location_services = allow_wireless_network_location_services
        if allow_passive_location_services is not None:
            self.allow_passive_location_services = allow_passive_location_services
        if allow_pop_ups is not None:
            self.allow_pop_ups = allow_pop_ups
        if allow_cookies is not None:
            self.allow_cookies = allow_cookies
        if enable_autofill is not None:
            self.enable_autofill = enable_autofill
        if enable_java_script is not None:
            self.enable_java_script = enable_java_script
        if force_fraud_warning is not None:
            self.force_fraud_warning = force_fraud_warning
        if blocked_networks is not None:
            self.blocked_networks = blocked_networks
        if allow_non_emergency_calls is not None:
            self.allow_non_emergency_calls = allow_non_emergency_calls
        if allow_sending_sms is not None:
            self.allow_sending_sms = allow_sending_sms
        if allow_pop_imap_email is not None:
            self.allow_pop_imap_email = allow_pop_imap_email
        if allow_incoming_mms is not None:
            self.allow_incoming_mms = allow_incoming_mms
        if allow_outgoing_mms is not None:
            self.allow_outgoing_mms = allow_outgoing_mms
        if max_data_usage_models is not None:
            self.max_data_usage_models = max_data_usage_models
        if set_device_font is not None:
            self.set_device_font = set_device_font
        if font_name is not None:
            self.font_name = font_name
        if set_device_font_size is not None:
            self.set_device_font_size = set_device_font_size
        if font_size is not None:
            self.font_size = font_size
        if allow_google_crash_report is not None:
            self.allow_google_crash_report = allow_google_crash_report
        if allow_ota_upgrade is not None:
            self.allow_ota_upgrade = allow_ota_upgrade
        if allow_power_off is not None:
            self.allow_power_off = allow_power_off
        if allow_sd_card_write is not None:
            self.allow_sd_card_write = allow_sd_card_write
        if allow_status_bar is not None:
            self.allow_status_bar = allow_status_bar
        if allow_wallpaper_change is not None:
            self.allow_wallpaper_change = allow_wallpaper_change
        if allow_native_vpn is not None:
            self.allow_native_vpn = allow_native_vpn
        if allow_roaming_voice_calls is not None:
            self.allow_roaming_voice_calls = allow_roaming_voice_calls
        if allow_audio_recording_if_microphone_is_allowed is not None:
            self.allow_audio_recording_if_microphone_is_allowed = allow_audio_recording_if_microphone_is_allowed
        if allow_video_recording_if_camera_is_allowed is not None:
            self.allow_video_recording_if_camera_is_allowed = allow_video_recording_if_camera_is_allowed
        if allow_ending_activity_when_left_idle is not None:
            self.allow_ending_activity_when_left_idle = allow_ending_activity_when_left_idle
        if allow_user_to_set_background_process_limit is not None:
            self.allow_user_to_set_background_process_limit = allow_user_to_set_background_process_limit
        if allow_user_to_set_mobile_data_limit is not None:
            self.allow_user_to_set_mobile_data_limit = allow_user_to_set_mobile_data_limit
        if allow_sms_with_storage is not None:
            self.allow_sms_with_storage = allow_sms_with_storage
        if allow_mms_with_storage is not None:
            self.allow_mms_with_storage = allow_mms_with_storage
        if allow_wap_push is not None:
            self.allow_wap_push = allow_wap_push
        if allow_wifi_direct is not None:
            self.allow_wifi_direct = allow_wifi_direct
        if allow_s_beam is not None:
            self.allow_s_beam = allow_s_beam
        if allow_s_voice is not None:
            self.allow_s_voice = allow_s_voice
        if allow_android_beam is not None:
            self.allow_android_beam = allow_android_beam
        if allow_copy_paste_between_different_applications is not None:
            self.allow_copy_paste_between_different_applications = allow_copy_paste_between_different_applications
        if allow_user_to_stop_system_signed_applications is not None:
            self.allow_user_to_stop_system_signed_applications = allow_user_to_stop_system_signed_applications
        if allow_usb_host_storage is not None:
            self.allow_usb_host_storage = allow_usb_host_storage
        if enable_sim_pin_lock is not None:
            self.enable_sim_pin_lock = enable_sim_pin_lock
        if allow_unsecure_wifi is not None:
            self.allow_unsecure_wifi = allow_unsecure_wifi
        if allow_auto_connection_wifi is not None:
            self.allow_auto_connection_wifi = allow_auto_connection_wifi
        if allow_account_settings is not None:
            self.allow_account_settings = allow_account_settings
        if allow_application_settings is not None:
            self.allow_application_settings = allow_application_settings
        if allow_developer_options is not None:
            self.allow_developer_options = allow_developer_options
        if allow_notifications is not None:
            self.allow_notifications = allow_notifications
        if allow_only_secure_vpn_connections is not None:
            self.allow_only_secure_vpn_connections = allow_only_secure_vpn_connections
        if allow_system_bar is not None:
            self.allow_system_bar = allow_system_bar
        if allow_task_manager is not None:
            self.allow_task_manager = allow_task_manager
        if allow_menu_key is not None:
            self.allow_menu_key = allow_menu_key
        if allow_back_key is not None:
            self.allow_back_key = allow_back_key
        if allow_search_key is not None:
            self.allow_search_key = allow_search_key
        if allow_volume_key is not None:
            self.allow_volume_key = allow_volume_key
        if allow_keyguard_features is not None:
            self.allow_keyguard_features = allow_keyguard_features
        if allow_keyguard_trust_agent is not None:
            self.allow_keyguard_trust_agent = allow_keyguard_trust_agent
        if allow_keyguard_camera is not None:
            self.allow_keyguard_camera = allow_keyguard_camera
        if allow_keyguard_fingerprint is not None:
            self.allow_keyguard_fingerprint = allow_keyguard_fingerprint
        if allow_keyguard_notifications is not None:
            self.allow_keyguard_notifications = allow_keyguard_notifications
        if allow_keyguard_unredacted is not None:
            self.allow_keyguard_unredacted = allow_keyguard_unredacted
        if allow_user_creation is not None:
            self.allow_user_creation = allow_user_creation
        if allow_multiple_users is not None:
            self.allow_multiple_users = allow_multiple_users
        if allow_user_removal is not None:
            self.allow_user_removal = allow_user_removal
        if enable_samsung_efota is not None:
            self.enable_samsung_efota = enable_samsung_efota

    @property
    def allow_camera(self):
        """Gets the allow_camera of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow camera].  # noqa: E501

        :return: The allow_camera of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_camera

    @allow_camera.setter
    def allow_camera(self, allow_camera):
        """Sets the allow_camera of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow camera].  # noqa: E501

        :param allow_camera: The allow_camera of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_camera = allow_camera

    @property
    def allow_microphone(self):
        """Gets the allow_microphone of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow microphone].  # noqa: E501

        :return: The allow_microphone of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_microphone

    @allow_microphone.setter
    def allow_microphone(self, allow_microphone):
        """Sets the allow_microphone of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow microphone].  # noqa: E501

        :param allow_microphone: The allow_microphone of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_microphone = allow_microphone

    @property
    def allow_factory_reset(self):
        """Gets the allow_factory_reset of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow factory reset].  # noqa: E501

        :return: The allow_factory_reset of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_factory_reset

    @allow_factory_reset.setter
    def allow_factory_reset(self, allow_factory_reset):
        """Sets the allow_factory_reset of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow factory reset].  # noqa: E501

        :param allow_factory_reset: The allow_factory_reset of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_factory_reset = allow_factory_reset

    @property
    def allow_all_tethering(self):
        """Gets the allow_all_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow all tethering].  # noqa: E501

        :return: The allow_all_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_all_tethering

    @allow_all_tethering.setter
    def allow_all_tethering(self, allow_all_tethering):
        """Sets the allow_all_tethering of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow all tethering].  # noqa: E501

        :param allow_all_tethering: The allow_all_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_all_tethering = allow_all_tethering

    @property
    def allow_wi_fi_tethering(self):
        """Gets the allow_wi_fi_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow wi fi tethering].  # noqa: E501

        :return: The allow_wi_fi_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wi_fi_tethering

    @allow_wi_fi_tethering.setter
    def allow_wi_fi_tethering(self, allow_wi_fi_tethering):
        """Sets the allow_wi_fi_tethering of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow wi fi tethering].  # noqa: E501

        :param allow_wi_fi_tethering: The allow_wi_fi_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_wi_fi_tethering = allow_wi_fi_tethering

    @property
    def allow_bluetooth_tethering(self):
        """Gets the allow_bluetooth_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow bluetooth tethering].  # noqa: E501

        :return: The allow_bluetooth_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth_tethering

    @allow_bluetooth_tethering.setter
    def allow_bluetooth_tethering(self, allow_bluetooth_tethering):
        """Sets the allow_bluetooth_tethering of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow bluetooth tethering].  # noqa: E501

        :param allow_bluetooth_tethering: The allow_bluetooth_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth_tethering = allow_bluetooth_tethering

    @property
    def allow_usb_tethering(self):
        """Gets the allow_usb_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow usb tethering].  # noqa: E501

        :return: The allow_usb_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_tethering

    @allow_usb_tethering.setter
    def allow_usb_tethering(self, allow_usb_tethering):
        """Sets the allow_usb_tethering of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow usb tethering].  # noqa: E501

        :param allow_usb_tethering: The allow_usb_tethering of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_usb_tethering = allow_usb_tethering

    @property
    def allow_usb_debugging(self):
        """Gets the allow_usb_debugging of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow usb debugging].  # noqa: E501

        :return: The allow_usb_debugging of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_debugging

    @allow_usb_debugging.setter
    def allow_usb_debugging(self, allow_usb_debugging):
        """Sets the allow_usb_debugging of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow usb debugging].  # noqa: E501

        :param allow_usb_debugging: The allow_usb_debugging of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_usb_debugging = allow_usb_debugging

    @property
    def allow_usb_mass_storage(self):
        """Gets the allow_usb_mass_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow usb mass storage].  # noqa: E501

        :return: The allow_usb_mass_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_mass_storage

    @allow_usb_mass_storage.setter
    def allow_usb_mass_storage(self, allow_usb_mass_storage):
        """Sets the allow_usb_mass_storage of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow usb mass storage].  # noqa: E501

        :param allow_usb_mass_storage: The allow_usb_mass_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_usb_mass_storage = allow_usb_mass_storage

    @property
    def allow_google_backup(self):
        """Gets the allow_google_backup of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow google backup].  # noqa: E501

        :return: The allow_google_backup of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_google_backup

    @allow_google_backup.setter
    def allow_google_backup(self, allow_google_backup):
        """Sets the allow_google_backup of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow google backup].  # noqa: E501

        :param allow_google_backup: The allow_google_backup of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_google_backup = allow_google_backup

    @property
    def allow_sd_card_access(self):
        """Gets the allow_sd_card_access of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow sd card access].  # noqa: E501

        :return: The allow_sd_card_access of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sd_card_access

    @allow_sd_card_access.setter
    def allow_sd_card_access(self, allow_sd_card_access):
        """Sets the allow_sd_card_access of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow sd card access].  # noqa: E501

        :param allow_sd_card_access: The allow_sd_card_access of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_sd_card_access = allow_sd_card_access

    @property
    def allow_access_to_device_settings(self):
        """Gets the allow_access_to_device_settings of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow settings changes].  # noqa: E501

        :return: The allow_access_to_device_settings of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_access_to_device_settings

    @allow_access_to_device_settings.setter
    def allow_access_to_device_settings(self, allow_access_to_device_settings):
        """Sets the allow_access_to_device_settings of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow settings changes].  # noqa: E501

        :param allow_access_to_device_settings: The allow_access_to_device_settings of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_access_to_device_settings = allow_access_to_device_settings

    @property
    def allow_screen_capture(self):
        """Gets the allow_screen_capture of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow screen capture].  # noqa: E501

        :return: The allow_screen_capture of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_screen_capture

    @allow_screen_capture.setter
    def allow_screen_capture(self, allow_screen_capture):
        """Sets the allow_screen_capture of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow screen capture].  # noqa: E501

        :param allow_screen_capture: The allow_screen_capture of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_screen_capture = allow_screen_capture

    @property
    def allow_mock_locations(self):
        """Gets the allow_mock_locations of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow mock locations].  # noqa: E501

        :return: The allow_mock_locations of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_mock_locations

    @allow_mock_locations.setter
    def allow_mock_locations(self, allow_mock_locations):
        """Sets the allow_mock_locations of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow mock locations].  # noqa: E501

        :param allow_mock_locations: The allow_mock_locations of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_mock_locations = allow_mock_locations

    @property
    def allow_clipboard(self):
        """Gets the allow_clipboard of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow clipboard].  # noqa: E501

        :return: The allow_clipboard of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_clipboard

    @allow_clipboard.setter
    def allow_clipboard(self, allow_clipboard):
        """Sets the allow_clipboard of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow clipboard].  # noqa: E501

        :param allow_clipboard: The allow_clipboard of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_clipboard = allow_clipboard

    @property
    def allow_usb_media_player(self):
        """Gets the allow_usb_media_player of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow usb media player].  # noqa: E501

        :return: The allow_usb_media_player of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_media_player

    @allow_usb_media_player.setter
    def allow_usb_media_player(self, allow_usb_media_player):
        """Sets the allow_usb_media_player of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow usb media player].  # noqa: E501

        :param allow_usb_media_player: The allow_usb_media_player of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_usb_media_player = allow_usb_media_player

    @property
    def allow_background_data(self):
        """Gets the allow_background_data of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow background data].  # noqa: E501

        :return: The allow_background_data of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_background_data

    @allow_background_data.setter
    def allow_background_data(self, allow_background_data):
        """Sets the allow_background_data of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow background data].  # noqa: E501

        :param allow_background_data: The allow_background_data of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_background_data = allow_background_data

    @property
    def allow_nfc(self):
        """Gets the allow_nfc of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow NFC].  # noqa: E501

        :return: The allow_nfc of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_nfc

    @allow_nfc.setter
    def allow_nfc(self, allow_nfc):
        """Sets the allow_nfc of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow NFC].  # noqa: E501

        :param allow_nfc: The allow_nfc of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_nfc = allow_nfc

    @property
    def allow_home_key(self):
        """Gets the allow_home_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow home key].  # noqa: E501

        :return: The allow_home_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_home_key

    @allow_home_key.setter
    def allow_home_key(self, allow_home_key):
        """Sets the allow_home_key of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow home key].  # noqa: E501

        :param allow_home_key: The allow_home_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_home_key = allow_home_key

    @property
    def allow_email_account_addition(self):
        """Gets the allow_email_account_addition of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow account addition].  # noqa: E501

        :return: The allow_email_account_addition of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_email_account_addition

    @allow_email_account_addition.setter
    def allow_email_account_addition(self, allow_email_account_addition):
        """Sets the allow_email_account_addition of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow account addition].  # noqa: E501

        :param allow_email_account_addition: The allow_email_account_addition of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_email_account_addition = allow_email_account_addition

    @property
    def add_accounts_to_addition_white_list(self):
        """Gets the add_accounts_to_addition_white_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the add accounts to addition white list value.  # noqa: E501

        :return: The add_accounts_to_addition_white_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._add_accounts_to_addition_white_list

    @add_accounts_to_addition_white_list.setter
    def add_accounts_to_addition_white_list(self, add_accounts_to_addition_white_list):
        """Sets the add_accounts_to_addition_white_list of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the add accounts to addition white list value.  # noqa: E501

        :param add_accounts_to_addition_white_list: The add_accounts_to_addition_white_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._add_accounts_to_addition_white_list = add_accounts_to_addition_white_list

    @property
    def whitelist_addition_accounts(self):
        """Gets the whitelist_addition_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the whitelist addition accounts value.  # noqa: E501

        :return: The whitelist_addition_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._whitelist_addition_accounts

    @whitelist_addition_accounts.setter
    def whitelist_addition_accounts(self, whitelist_addition_accounts):
        """Sets the whitelist_addition_accounts of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the whitelist addition accounts value.  # noqa: E501

        :param whitelist_addition_accounts: The whitelist_addition_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._whitelist_addition_accounts = whitelist_addition_accounts

    @property
    def add_accounts_to_addition_black_list(self):
        """Gets the add_accounts_to_addition_black_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the add accounts to addition black list value.  # noqa: E501

        :return: The add_accounts_to_addition_black_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._add_accounts_to_addition_black_list

    @add_accounts_to_addition_black_list.setter
    def add_accounts_to_addition_black_list(self, add_accounts_to_addition_black_list):
        """Sets the add_accounts_to_addition_black_list of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the add accounts to addition black list value.  # noqa: E501

        :param add_accounts_to_addition_black_list: The add_accounts_to_addition_black_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._add_accounts_to_addition_black_list = add_accounts_to_addition_black_list

    @property
    def blacklist_addition_accounts(self):
        """Gets the blacklist_addition_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the blacklist addition accounts value.  # noqa: E501

        :return: The blacklist_addition_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._blacklist_addition_accounts

    @blacklist_addition_accounts.setter
    def blacklist_addition_accounts(self, blacklist_addition_accounts):
        """Sets the blacklist_addition_accounts of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the blacklist addition accounts value.  # noqa: E501

        :param blacklist_addition_accounts: The blacklist_addition_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._blacklist_addition_accounts = blacklist_addition_accounts

    @property
    def allow_email_account_removal(self):
        """Gets the allow_email_account_removal of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow account removal].  # noqa: E501

        :return: The allow_email_account_removal of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_email_account_removal

    @allow_email_account_removal.setter
    def allow_email_account_removal(self, allow_email_account_removal):
        """Sets the allow_email_account_removal of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow account removal].  # noqa: E501

        :param allow_email_account_removal: The allow_email_account_removal of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_email_account_removal = allow_email_account_removal

    @property
    def add_accounts_to_removal_white_list(self):
        """Gets the add_accounts_to_removal_white_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the add accounts to removal white list value.  # noqa: E501

        :return: The add_accounts_to_removal_white_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._add_accounts_to_removal_white_list

    @add_accounts_to_removal_white_list.setter
    def add_accounts_to_removal_white_list(self, add_accounts_to_removal_white_list):
        """Sets the add_accounts_to_removal_white_list of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the add accounts to removal white list value.  # noqa: E501

        :param add_accounts_to_removal_white_list: The add_accounts_to_removal_white_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._add_accounts_to_removal_white_list = add_accounts_to_removal_white_list

    @property
    def whitelist_removal_accounts(self):
        """Gets the whitelist_removal_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the whitelist removal accounts value.  # noqa: E501

        :return: The whitelist_removal_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._whitelist_removal_accounts

    @whitelist_removal_accounts.setter
    def whitelist_removal_accounts(self, whitelist_removal_accounts):
        """Sets the whitelist_removal_accounts of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the whitelist removal accounts value.  # noqa: E501

        :param whitelist_removal_accounts: The whitelist_removal_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._whitelist_removal_accounts = whitelist_removal_accounts

    @property
    def add_accounts_to_removal_black_list(self):
        """Gets the add_accounts_to_removal_black_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the add accounts to removal black list value.  # noqa: E501

        :return: The add_accounts_to_removal_black_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._add_accounts_to_removal_black_list

    @add_accounts_to_removal_black_list.setter
    def add_accounts_to_removal_black_list(self, add_accounts_to_removal_black_list):
        """Sets the add_accounts_to_removal_black_list of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the add accounts to removal black list value.  # noqa: E501

        :param add_accounts_to_removal_black_list: The add_accounts_to_removal_black_list of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._add_accounts_to_removal_black_list = add_accounts_to_removal_black_list

    @property
    def blacklist_removal_accounts(self):
        """Gets the blacklist_removal_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the blacklist removal accounts value.  # noqa: E501

        :return: The blacklist_removal_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._blacklist_removal_accounts

    @blacklist_removal_accounts.setter
    def blacklist_removal_accounts(self, blacklist_removal_accounts):
        """Sets the blacklist_removal_accounts of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the blacklist removal accounts value.  # noqa: E501

        :param blacklist_removal_accounts: The blacklist_removal_accounts of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._blacklist_removal_accounts = blacklist_removal_accounts

    @property
    def allow_usb(self):
        """Gets the allow_usb of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow usb].  # noqa: E501

        :return: The allow_usb of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb

    @allow_usb.setter
    def allow_usb(self, allow_usb):
        """Sets the allow_usb of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow usb].  # noqa: E501

        :param allow_usb: The allow_usb of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_usb = allow_usb

    @property
    def allow_airplane_mode(self):
        """Gets the allow_airplane_mode of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow airplane mode].  # noqa: E501

        :return: The allow_airplane_mode of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_airplane_mode

    @allow_airplane_mode.setter
    def allow_airplane_mode(self, allow_airplane_mode):
        """Sets the allow_airplane_mode of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow airplane mode].  # noqa: E501

        :param allow_airplane_mode: The allow_airplane_mode of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_airplane_mode = allow_airplane_mode

    @property
    def allow_android_market(self):
        """Gets the allow_android_market of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow android market].  # noqa: E501

        :return: The allow_android_market of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_android_market

    @allow_android_market.setter
    def allow_android_market(self, allow_android_market):
        """Sets the allow_android_market of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow android market].  # noqa: E501

        :param allow_android_market: The allow_android_market of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_android_market = allow_android_market

    @property
    def allow_you_tube(self):
        """Gets the allow_you_tube of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow you tube].  # noqa: E501

        :return: The allow_you_tube of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_you_tube

    @allow_you_tube.setter
    def allow_you_tube(self, allow_you_tube):
        """Sets the allow_you_tube of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow you tube].  # noqa: E501

        :param allow_you_tube: The allow_you_tube of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_you_tube = allow_you_tube

    @property
    def allow_native_android_browser(self):
        """Gets the allow_native_android_browser of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow android browser].  # noqa: E501

        :return: The allow_native_android_browser of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_native_android_browser

    @allow_native_android_browser.setter
    def allow_native_android_browser(self, allow_native_android_browser):
        """Sets the allow_native_android_browser of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow android browser].  # noqa: E501

        :param allow_native_android_browser: The allow_native_android_browser of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_native_android_browser = allow_native_android_browser

    @property
    def allow_non_market_app_installation(self):
        """Gets the allow_non_market_app_installation of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow non market application install].  # noqa: E501

        :return: The allow_non_market_app_installation of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_non_market_app_installation

    @allow_non_market_app_installation.setter
    def allow_non_market_app_installation(self, allow_non_market_app_installation):
        """Sets the allow_non_market_app_installation of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow non market application install].  # noqa: E501

        :param allow_non_market_app_installation: The allow_non_market_app_installation of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_non_market_app_installation = allow_non_market_app_installation

    @property
    def allow_voice_dialer(self):
        """Gets the allow_voice_dialer of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow voice dialer].  # noqa: E501

        :return: The allow_voice_dialer of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_voice_dialer

    @allow_voice_dialer.setter
    def allow_voice_dialer(self, allow_voice_dialer):
        """Sets the allow_voice_dialer of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow voice dialer].  # noqa: E501

        :param allow_voice_dialer: The allow_voice_dialer of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_voice_dialer = allow_voice_dialer

    @property
    def allow_bluetooth(self):
        """Gets the allow_bluetooth of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow bluetooth].  # noqa: E501

        :return: The allow_bluetooth of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth

    @allow_bluetooth.setter
    def allow_bluetooth(self, allow_bluetooth):
        """Sets the allow_bluetooth of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow bluetooth].  # noqa: E501

        :param allow_bluetooth: The allow_bluetooth of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth = allow_bluetooth

    @property
    def allow_bluetooth_data_transfer(self):
        """Gets the allow_bluetooth_data_transfer of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow bt data transfer].  # noqa: E501

        :return: The allow_bluetooth_data_transfer of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth_data_transfer

    @allow_bluetooth_data_transfer.setter
    def allow_bluetooth_data_transfer(self, allow_bluetooth_data_transfer):
        """Sets the allow_bluetooth_data_transfer of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow bt data transfer].  # noqa: E501

        :param allow_bluetooth_data_transfer: The allow_bluetooth_data_transfer of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth_data_transfer = allow_bluetooth_data_transfer

    @property
    def allow_bluetooth_pairing(self):
        """Gets the allow_bluetooth_pairing of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow bt pairing].  # noqa: E501

        :return: The allow_bluetooth_pairing of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth_pairing

    @allow_bluetooth_pairing.setter
    def allow_bluetooth_pairing(self, allow_bluetooth_pairing):
        """Sets the allow_bluetooth_pairing of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow bt pairing].  # noqa: E501

        :param allow_bluetooth_pairing: The allow_bluetooth_pairing of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth_pairing = allow_bluetooth_pairing

    @property
    def allow_bluetooth_discoverable_mode(self):
        """Gets the allow_bluetooth_discoverable_mode of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow bt discoverable mode].  # noqa: E501

        :return: The allow_bluetooth_discoverable_mode of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth_discoverable_mode

    @allow_bluetooth_discoverable_mode.setter
    def allow_bluetooth_discoverable_mode(self, allow_bluetooth_discoverable_mode):
        """Sets the allow_bluetooth_discoverable_mode of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow bt discoverable mode].  # noqa: E501

        :param allow_bluetooth_discoverable_mode: The allow_bluetooth_discoverable_mode of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth_discoverable_mode = allow_bluetooth_discoverable_mode

    @property
    def allow_bluetooth_limited_discoverable_mode(self):
        """Gets the allow_bluetooth_limited_discoverable_mode of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow bt limited discoverable].  # noqa: E501

        :return: The allow_bluetooth_limited_discoverable_mode of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth_limited_discoverable_mode

    @allow_bluetooth_limited_discoverable_mode.setter
    def allow_bluetooth_limited_discoverable_mode(self, allow_bluetooth_limited_discoverable_mode):
        """Sets the allow_bluetooth_limited_discoverable_mode of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow bt limited discoverable].  # noqa: E501

        :param allow_bluetooth_limited_discoverable_mode: The allow_bluetooth_limited_discoverable_mode of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth_limited_discoverable_mode = allow_bluetooth_limited_discoverable_mode

    @property
    def allow_outgoing_calls_via_bluetooth(self):
        """Gets the allow_outgoing_calls_via_bluetooth of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow bt outgoing calls].  # noqa: E501

        :return: The allow_outgoing_calls_via_bluetooth of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_outgoing_calls_via_bluetooth

    @allow_outgoing_calls_via_bluetooth.setter
    def allow_outgoing_calls_via_bluetooth(self, allow_outgoing_calls_via_bluetooth):
        """Sets the allow_outgoing_calls_via_bluetooth of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow bt outgoing calls].  # noqa: E501

        :param allow_outgoing_calls_via_bluetooth: The allow_outgoing_calls_via_bluetooth of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_outgoing_calls_via_bluetooth = allow_outgoing_calls_via_bluetooth

    @property
    def allow_desktop_connectivity_via_bluetooth(self):
        """Gets the allow_desktop_connectivity_via_bluetooth of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow bt desktop connectivity].  # noqa: E501

        :return: The allow_desktop_connectivity_via_bluetooth of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_desktop_connectivity_via_bluetooth

    @allow_desktop_connectivity_via_bluetooth.setter
    def allow_desktop_connectivity_via_bluetooth(self, allow_desktop_connectivity_via_bluetooth):
        """Sets the allow_desktop_connectivity_via_bluetooth of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow bt desktop connectivity].  # noqa: E501

        :param allow_desktop_connectivity_via_bluetooth: The allow_desktop_connectivity_via_bluetooth of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_desktop_connectivity_via_bluetooth = allow_desktop_connectivity_via_bluetooth

    @property
    def data_connection(self):
        """Gets the data_connection of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the network.  # noqa: E501

        :return: The data_connection of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._data_connection

    @data_connection.setter
    def data_connection(self, data_connection):
        """Sets the data_connection of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the network.  # noqa: E501

        :param data_connection: The data_connection of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._data_connection = data_connection

    @property
    def allow_wi_fi_profiles(self):
        """Gets the allow_wi_fi_profiles of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow wifi profiles].  # noqa: E501

        :return: The allow_wi_fi_profiles of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wi_fi_profiles

    @allow_wi_fi_profiles.setter
    def allow_wi_fi_profiles(self, allow_wi_fi_profiles):
        """Sets the allow_wi_fi_profiles of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow wifi profiles].  # noqa: E501

        :param allow_wi_fi_profiles: The allow_wi_fi_profiles of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_wi_fi_profiles = allow_wi_fi_profiles

    @property
    def allow_wifi_changes(self):
        """Gets the allow_wifi_changes of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow wifi changes].  # noqa: E501

        :return: The allow_wifi_changes of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wifi_changes

    @allow_wifi_changes.setter
    def allow_wifi_changes(self, allow_wifi_changes):
        """Sets the allow_wifi_changes of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow wifi changes].  # noqa: E501

        :param allow_wifi_changes: The allow_wifi_changes of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_wifi_changes = allow_wifi_changes

    @property
    def allow_prompt_for_credentials(self):
        """Gets the allow_prompt_for_credentials of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow prompt credentials].  # noqa: E501

        :return: The allow_prompt_for_credentials of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_prompt_for_credentials

    @allow_prompt_for_credentials.setter
    def allow_prompt_for_credentials(self, allow_prompt_for_credentials):
        """Sets the allow_prompt_for_credentials of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow prompt credentials].  # noqa: E501

        :param allow_prompt_for_credentials: The allow_prompt_for_credentials of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_prompt_for_credentials = allow_prompt_for_credentials

    @property
    def minimum_wi_fi_security_level(self):
        """Gets the minimum_wi_fi_security_level of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the minimum wifi security.  # noqa: E501

        :return: The minimum_wi_fi_security_level of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._minimum_wi_fi_security_level

    @minimum_wi_fi_security_level.setter
    def minimum_wi_fi_security_level(self, minimum_wi_fi_security_level):
        """Sets the minimum_wi_fi_security_level of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the minimum wifi security.  # noqa: E501

        :param minimum_wi_fi_security_level: The minimum_wi_fi_security_level of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._minimum_wi_fi_security_level = minimum_wi_fi_security_level

    @property
    def allow_automatic_sync_on_roaming(self):
        """Gets the allow_automatic_sync_on_roaming of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow roaming synchronize].  # noqa: E501

        :return: The allow_automatic_sync_on_roaming of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_automatic_sync_on_roaming

    @allow_automatic_sync_on_roaming.setter
    def allow_automatic_sync_on_roaming(self, allow_automatic_sync_on_roaming):
        """Sets the allow_automatic_sync_on_roaming of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow roaming synchronize].  # noqa: E501

        :param allow_automatic_sync_on_roaming: The allow_automatic_sync_on_roaming of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_automatic_sync_on_roaming = allow_automatic_sync_on_roaming

    @property
    def allow_push_messages_on_roaming(self):
        """Gets the allow_push_messages_on_roaming of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow roaming push].  # noqa: E501

        :return: The allow_push_messages_on_roaming of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_push_messages_on_roaming

    @allow_push_messages_on_roaming.setter
    def allow_push_messages_on_roaming(self, allow_push_messages_on_roaming):
        """Sets the allow_push_messages_on_roaming of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow roaming push].  # noqa: E501

        :param allow_push_messages_on_roaming: The allow_push_messages_on_roaming of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_push_messages_on_roaming = allow_push_messages_on_roaming

    @property
    def allow_data_usage_on_roaming(self):
        """Gets the allow_data_usage_on_roaming of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow roaming data].  # noqa: E501

        :return: The allow_data_usage_on_roaming of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_data_usage_on_roaming

    @allow_data_usage_on_roaming.setter
    def allow_data_usage_on_roaming(self, allow_data_usage_on_roaming):
        """Sets the allow_data_usage_on_roaming of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow roaming data].  # noqa: E501

        :param allow_data_usage_on_roaming: The allow_data_usage_on_roaming of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_data_usage_on_roaming = allow_data_usage_on_roaming

    @property
    def allow_gps_location_services(self):
        """Gets the allow_gps_location_services of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow GPS location service].  # noqa: E501

        :return: The allow_gps_location_services of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_gps_location_services

    @allow_gps_location_services.setter
    def allow_gps_location_services(self, allow_gps_location_services):
        """Sets the allow_gps_location_services of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow GPS location service].  # noqa: E501

        :param allow_gps_location_services: The allow_gps_location_services of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_gps_location_services = allow_gps_location_services

    @property
    def allow_wireless_network_location_services(self):
        """Gets the allow_wireless_network_location_services of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow network based location service].  # noqa: E501

        :return: The allow_wireless_network_location_services of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wireless_network_location_services

    @allow_wireless_network_location_services.setter
    def allow_wireless_network_location_services(self, allow_wireless_network_location_services):
        """Sets the allow_wireless_network_location_services of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow network based location service].  # noqa: E501

        :param allow_wireless_network_location_services: The allow_wireless_network_location_services of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_wireless_network_location_services = allow_wireless_network_location_services

    @property
    def allow_passive_location_services(self):
        """Gets the allow_passive_location_services of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow passive location service].  # noqa: E501

        :return: The allow_passive_location_services of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_passive_location_services

    @allow_passive_location_services.setter
    def allow_passive_location_services(self, allow_passive_location_services):
        """Sets the allow_passive_location_services of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow passive location service].  # noqa: E501

        :param allow_passive_location_services: The allow_passive_location_services of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_passive_location_services = allow_passive_location_services

    @property
    def allow_pop_ups(self):
        """Gets the allow_pop_ups of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow popups].  # noqa: E501

        :return: The allow_pop_ups of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_pop_ups

    @allow_pop_ups.setter
    def allow_pop_ups(self, allow_pop_ups):
        """Sets the allow_pop_ups of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow popups].  # noqa: E501

        :param allow_pop_ups: The allow_pop_ups of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_pop_ups = allow_pop_ups

    @property
    def allow_cookies(self):
        """Gets the allow_cookies of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow cookies].  # noqa: E501

        :return: The allow_cookies of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_cookies

    @allow_cookies.setter
    def allow_cookies(self, allow_cookies):
        """Sets the allow_cookies of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow cookies].  # noqa: E501

        :param allow_cookies: The allow_cookies of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_cookies = allow_cookies

    @property
    def enable_autofill(self):
        """Gets the enable_autofill of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow automatic fill].  # noqa: E501

        :return: The enable_autofill of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_autofill

    @enable_autofill.setter
    def enable_autofill(self, enable_autofill):
        """Sets the enable_autofill of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow automatic fill].  # noqa: E501

        :param enable_autofill: The enable_autofill of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_autofill = enable_autofill

    @property
    def enable_java_script(self):
        """Gets the enable_java_script of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow java script].  # noqa: E501

        :return: The enable_java_script of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_java_script

    @enable_java_script.setter
    def enable_java_script(self, enable_java_script):
        """Sets the enable_java_script of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow java script].  # noqa: E501

        :param enable_java_script: The enable_java_script of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_java_script = enable_java_script

    @property
    def force_fraud_warning(self):
        """Gets the force_fraud_warning of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [force fraud warning].  # noqa: E501

        :return: The force_fraud_warning of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._force_fraud_warning

    @force_fraud_warning.setter
    def force_fraud_warning(self, force_fraud_warning):
        """Sets the force_fraud_warning of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [force fraud warning].  # noqa: E501

        :param force_fraud_warning: The force_fraud_warning of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._force_fraud_warning = force_fraud_warning

    @property
    def blocked_networks(self):
        """Gets the blocked_networks of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the blocked networks.  # noqa: E501

        :return: The blocked_networks of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._blocked_networks

    @blocked_networks.setter
    def blocked_networks(self, blocked_networks):
        """Sets the blocked_networks of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the blocked networks.  # noqa: E501

        :param blocked_networks: The blocked_networks of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._blocked_networks = blocked_networks

    @property
    def allow_non_emergency_calls(self):
        """Gets the allow_non_emergency_calls of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow non emergency calls].  # noqa: E501

        :return: The allow_non_emergency_calls of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_non_emergency_calls

    @allow_non_emergency_calls.setter
    def allow_non_emergency_calls(self, allow_non_emergency_calls):
        """Sets the allow_non_emergency_calls of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow non emergency calls].  # noqa: E501

        :param allow_non_emergency_calls: The allow_non_emergency_calls of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_non_emergency_calls = allow_non_emergency_calls

    @property
    def allow_sending_sms(self):
        """Gets the allow_sending_sms of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow sending SMS].  # noqa: E501

        :return: The allow_sending_sms of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sending_sms

    @allow_sending_sms.setter
    def allow_sending_sms(self, allow_sending_sms):
        """Sets the allow_sending_sms of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow sending SMS].  # noqa: E501

        :param allow_sending_sms: The allow_sending_sms of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_sending_sms = allow_sending_sms

    @property
    def allow_pop_imap_email(self):
        """Gets the allow_pop_imap_email of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow popimap email].  # noqa: E501

        :return: The allow_pop_imap_email of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_pop_imap_email

    @allow_pop_imap_email.setter
    def allow_pop_imap_email(self, allow_pop_imap_email):
        """Sets the allow_pop_imap_email of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow popimap email].  # noqa: E501

        :param allow_pop_imap_email: The allow_pop_imap_email of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_pop_imap_email = allow_pop_imap_email

    @property
    def allow_incoming_mms(self):
        """Gets the allow_incoming_mms of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow incoming MMS].  # noqa: E501

        :return: The allow_incoming_mms of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_incoming_mms

    @allow_incoming_mms.setter
    def allow_incoming_mms(self, allow_incoming_mms):
        """Sets the allow_incoming_mms of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow incoming MMS].  # noqa: E501

        :param allow_incoming_mms: The allow_incoming_mms of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_incoming_mms = allow_incoming_mms

    @property
    def allow_outgoing_mms(self):
        """Gets the allow_outgoing_mms of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow outgoing MMS].  # noqa: E501

        :return: The allow_outgoing_mms of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_outgoing_mms

    @allow_outgoing_mms.setter
    def allow_outgoing_mms(self, allow_outgoing_mms):
        """Sets the allow_outgoing_mms of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow outgoing MMS].  # noqa: E501

        :param allow_outgoing_mms: The allow_outgoing_mms of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_outgoing_mms = allow_outgoing_mms

    @property
    def max_data_usage_models(self):
        """Gets the max_data_usage_models of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the maximum data usage models.  # noqa: E501

        :return: The max_data_usage_models of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: list[AndroidMaxDataUsageEntity]
        """
        return self._max_data_usage_models

    @max_data_usage_models.setter
    def max_data_usage_models(self, max_data_usage_models):
        """Sets the max_data_usage_models of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the maximum data usage models.  # noqa: E501

        :param max_data_usage_models: The max_data_usage_models of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: list[AndroidMaxDataUsageEntity]
        """

        self._max_data_usage_models = max_data_usage_models

    @property
    def set_device_font(self):
        """Gets the set_device_font of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [set device font].  # noqa: E501

        :return: The set_device_font of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._set_device_font

    @set_device_font.setter
    def set_device_font(self, set_device_font):
        """Sets the set_device_font of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [set device font].  # noqa: E501

        :param set_device_font: The set_device_font of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._set_device_font = set_device_font

    @property
    def font_name(self):
        """Gets the font_name of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the font apk identifier.  # noqa: E501

        :return: The font_name of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._font_name

    @font_name.setter
    def font_name(self, font_name):
        """Sets the font_name of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the font apk identifier.  # noqa: E501

        :param font_name: The font_name of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._font_name = font_name

    @property
    def set_device_font_size(self):
        """Gets the set_device_font_size of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [set device font size].  # noqa: E501

        :return: The set_device_font_size of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._set_device_font_size

    @set_device_font_size.setter
    def set_device_font_size(self, set_device_font_size):
        """Sets the set_device_font_size of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [set device font size].  # noqa: E501

        :param set_device_font_size: The set_device_font_size of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._set_device_font_size = set_device_font_size

    @property
    def font_size(self):
        """Gets the font_size of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets the size of the font.  # noqa: E501

        :return: The font_size of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets the size of the font.  # noqa: E501

        :param font_size: The font_size of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._font_size = font_size

    @property
    def allow_google_crash_report(self):
        """Gets the allow_google_crash_report of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow google crash report].  # noqa: E501

        :return: The allow_google_crash_report of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_google_crash_report

    @allow_google_crash_report.setter
    def allow_google_crash_report(self, allow_google_crash_report):
        """Sets the allow_google_crash_report of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow google crash report].  # noqa: E501

        :param allow_google_crash_report: The allow_google_crash_report of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_google_crash_report = allow_google_crash_report

    @property
    def allow_ota_upgrade(self):
        """Gets the allow_ota_upgrade of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow ota upgrade].  # noqa: E501

        :return: The allow_ota_upgrade of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_ota_upgrade

    @allow_ota_upgrade.setter
    def allow_ota_upgrade(self, allow_ota_upgrade):
        """Sets the allow_ota_upgrade of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow ota upgrade].  # noqa: E501

        :param allow_ota_upgrade: The allow_ota_upgrade of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_ota_upgrade = allow_ota_upgrade

    @property
    def allow_power_off(self):
        """Gets the allow_power_off of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow power off].  # noqa: E501

        :return: The allow_power_off of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_power_off

    @allow_power_off.setter
    def allow_power_off(self, allow_power_off):
        """Sets the allow_power_off of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow power off].  # noqa: E501

        :param allow_power_off: The allow_power_off of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_power_off = allow_power_off

    @property
    def allow_sd_card_write(self):
        """Gets the allow_sd_card_write of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow sd card write].  # noqa: E501

        :return: The allow_sd_card_write of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sd_card_write

    @allow_sd_card_write.setter
    def allow_sd_card_write(self, allow_sd_card_write):
        """Sets the allow_sd_card_write of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow sd card write].  # noqa: E501

        :param allow_sd_card_write: The allow_sd_card_write of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_sd_card_write = allow_sd_card_write

    @property
    def allow_status_bar(self):
        """Gets the allow_status_bar of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow status bar expansion].  # noqa: E501

        :return: The allow_status_bar of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_status_bar

    @allow_status_bar.setter
    def allow_status_bar(self, allow_status_bar):
        """Sets the allow_status_bar of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow status bar expansion].  # noqa: E501

        :param allow_status_bar: The allow_status_bar of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_status_bar = allow_status_bar

    @property
    def allow_wallpaper_change(self):
        """Gets the allow_wallpaper_change of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow wallpaper change].  # noqa: E501

        :return: The allow_wallpaper_change of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wallpaper_change

    @allow_wallpaper_change.setter
    def allow_wallpaper_change(self, allow_wallpaper_change):
        """Sets the allow_wallpaper_change of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow wallpaper change].  # noqa: E501

        :param allow_wallpaper_change: The allow_wallpaper_change of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_wallpaper_change = allow_wallpaper_change

    @property
    def allow_native_vpn(self):
        """Gets the allow_native_vpn of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow VPN].  # noqa: E501

        :return: The allow_native_vpn of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_native_vpn

    @allow_native_vpn.setter
    def allow_native_vpn(self, allow_native_vpn):
        """Sets the allow_native_vpn of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow VPN].  # noqa: E501

        :param allow_native_vpn: The allow_native_vpn of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_native_vpn = allow_native_vpn

    @property
    def allow_roaming_voice_calls(self):
        """Gets the allow_roaming_voice_calls of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow roaming voice calls].  # noqa: E501

        :return: The allow_roaming_voice_calls of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_roaming_voice_calls

    @allow_roaming_voice_calls.setter
    def allow_roaming_voice_calls(self, allow_roaming_voice_calls):
        """Sets the allow_roaming_voice_calls of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow roaming voice calls].  # noqa: E501

        :param allow_roaming_voice_calls: The allow_roaming_voice_calls of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_roaming_voice_calls = allow_roaming_voice_calls

    @property
    def allow_audio_recording_if_microphone_is_allowed(self):
        """Gets the allow_audio_recording_if_microphone_is_allowed of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow audio recording].  # noqa: E501

        :return: The allow_audio_recording_if_microphone_is_allowed of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_audio_recording_if_microphone_is_allowed

    @allow_audio_recording_if_microphone_is_allowed.setter
    def allow_audio_recording_if_microphone_is_allowed(self, allow_audio_recording_if_microphone_is_allowed):
        """Sets the allow_audio_recording_if_microphone_is_allowed of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow audio recording].  # noqa: E501

        :param allow_audio_recording_if_microphone_is_allowed: The allow_audio_recording_if_microphone_is_allowed of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_audio_recording_if_microphone_is_allowed = allow_audio_recording_if_microphone_is_allowed

    @property
    def allow_video_recording_if_camera_is_allowed(self):
        """Gets the allow_video_recording_if_camera_is_allowed of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow video recording].  # noqa: E501

        :return: The allow_video_recording_if_camera_is_allowed of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_video_recording_if_camera_is_allowed

    @allow_video_recording_if_camera_is_allowed.setter
    def allow_video_recording_if_camera_is_allowed(self, allow_video_recording_if_camera_is_allowed):
        """Sets the allow_video_recording_if_camera_is_allowed of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow video recording].  # noqa: E501

        :param allow_video_recording_if_camera_is_allowed: The allow_video_recording_if_camera_is_allowed of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_video_recording_if_camera_is_allowed = allow_video_recording_if_camera_is_allowed

    @property
    def allow_ending_activity_when_left_idle(self):
        """Gets the allow_ending_activity_when_left_idle of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow killing activities on leave].  # noqa: E501

        :return: The allow_ending_activity_when_left_idle of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_ending_activity_when_left_idle

    @allow_ending_activity_when_left_idle.setter
    def allow_ending_activity_when_left_idle(self, allow_ending_activity_when_left_idle):
        """Sets the allow_ending_activity_when_left_idle of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow killing activities on leave].  # noqa: E501

        :param allow_ending_activity_when_left_idle: The allow_ending_activity_when_left_idle of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_ending_activity_when_left_idle = allow_ending_activity_when_left_idle

    @property
    def allow_user_to_set_background_process_limit(self):
        """Gets the allow_user_to_set_background_process_limit of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow background process limit].  # noqa: E501

        :return: The allow_user_to_set_background_process_limit of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_set_background_process_limit

    @allow_user_to_set_background_process_limit.setter
    def allow_user_to_set_background_process_limit(self, allow_user_to_set_background_process_limit):
        """Sets the allow_user_to_set_background_process_limit of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow background process limit].  # noqa: E501

        :param allow_user_to_set_background_process_limit: The allow_user_to_set_background_process_limit of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_set_background_process_limit = allow_user_to_set_background_process_limit

    @property
    def allow_user_to_set_mobile_data_limit(self):
        """Gets the allow_user_to_set_mobile_data_limit of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow user mobile data limit].  # noqa: E501

        :return: The allow_user_to_set_mobile_data_limit of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_set_mobile_data_limit

    @allow_user_to_set_mobile_data_limit.setter
    def allow_user_to_set_mobile_data_limit(self, allow_user_to_set_mobile_data_limit):
        """Sets the allow_user_to_set_mobile_data_limit of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow user mobile data limit].  # noqa: E501

        :param allow_user_to_set_mobile_data_limit: The allow_user_to_set_mobile_data_limit of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_set_mobile_data_limit = allow_user_to_set_mobile_data_limit

    @property
    def allow_sms_with_storage(self):
        """Gets the allow_sms_with_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow SMS storage].  # noqa: E501

        :return: The allow_sms_with_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sms_with_storage

    @allow_sms_with_storage.setter
    def allow_sms_with_storage(self, allow_sms_with_storage):
        """Sets the allow_sms_with_storage of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow SMS storage].  # noqa: E501

        :param allow_sms_with_storage: The allow_sms_with_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_sms_with_storage = allow_sms_with_storage

    @property
    def allow_mms_with_storage(self):
        """Gets the allow_mms_with_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow MMS storage].  # noqa: E501

        :return: The allow_mms_with_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_mms_with_storage

    @allow_mms_with_storage.setter
    def allow_mms_with_storage(self, allow_mms_with_storage):
        """Sets the allow_mms_with_storage of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow MMS storage].  # noqa: E501

        :param allow_mms_with_storage: The allow_mms_with_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_mms_with_storage = allow_mms_with_storage

    @property
    def allow_wap_push(self):
        """Gets the allow_wap_push of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow wap push].  # noqa: E501

        :return: The allow_wap_push of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wap_push

    @allow_wap_push.setter
    def allow_wap_push(self, allow_wap_push):
        """Sets the allow_wap_push of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow wap push].  # noqa: E501

        :param allow_wap_push: The allow_wap_push of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_wap_push = allow_wap_push

    @property
    def allow_wifi_direct(self):
        """Gets the allow_wifi_direct of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow wifi direct].  # noqa: E501

        :return: The allow_wifi_direct of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wifi_direct

    @allow_wifi_direct.setter
    def allow_wifi_direct(self, allow_wifi_direct):
        """Sets the allow_wifi_direct of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow wifi direct].  # noqa: E501

        :param allow_wifi_direct: The allow_wifi_direct of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_wifi_direct = allow_wifi_direct

    @property
    def allow_s_beam(self):
        """Gets the allow_s_beam of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow s beam].  # noqa: E501

        :return: The allow_s_beam of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_s_beam

    @allow_s_beam.setter
    def allow_s_beam(self, allow_s_beam):
        """Sets the allow_s_beam of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow s beam].  # noqa: E501

        :param allow_s_beam: The allow_s_beam of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_s_beam = allow_s_beam

    @property
    def allow_s_voice(self):
        """Gets the allow_s_voice of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow s voice].  # noqa: E501

        :return: The allow_s_voice of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_s_voice

    @allow_s_voice.setter
    def allow_s_voice(self, allow_s_voice):
        """Sets the allow_s_voice of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow s voice].  # noqa: E501

        :param allow_s_voice: The allow_s_voice of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_s_voice = allow_s_voice

    @property
    def allow_android_beam(self):
        """Gets the allow_android_beam of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow android beam].  # noqa: E501

        :return: The allow_android_beam of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_android_beam

    @allow_android_beam.setter
    def allow_android_beam(self, allow_android_beam):
        """Sets the allow_android_beam of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow android beam].  # noqa: E501

        :param allow_android_beam: The allow_android_beam of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_android_beam = allow_android_beam

    @property
    def allow_copy_paste_between_different_applications(self):
        """Gets the allow_copy_paste_between_different_applications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow clipboard share].  # noqa: E501

        :return: The allow_copy_paste_between_different_applications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_copy_paste_between_different_applications

    @allow_copy_paste_between_different_applications.setter
    def allow_copy_paste_between_different_applications(self, allow_copy_paste_between_different_applications):
        """Sets the allow_copy_paste_between_different_applications of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow clipboard share].  # noqa: E501

        :param allow_copy_paste_between_different_applications: The allow_copy_paste_between_different_applications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_copy_paste_between_different_applications = allow_copy_paste_between_different_applications

    @property
    def allow_user_to_stop_system_signed_applications(self):
        """Gets the allow_user_to_stop_system_signed_applications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow stop system application].  # noqa: E501

        :return: The allow_user_to_stop_system_signed_applications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_stop_system_signed_applications

    @allow_user_to_stop_system_signed_applications.setter
    def allow_user_to_stop_system_signed_applications(self, allow_user_to_stop_system_signed_applications):
        """Sets the allow_user_to_stop_system_signed_applications of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow stop system application].  # noqa: E501

        :param allow_user_to_stop_system_signed_applications: The allow_user_to_stop_system_signed_applications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_stop_system_signed_applications = allow_user_to_stop_system_signed_applications

    @property
    def allow_usb_host_storage(self):
        """Gets the allow_usb_host_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow usb host storage].  # noqa: E501

        :return: The allow_usb_host_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_host_storage

    @allow_usb_host_storage.setter
    def allow_usb_host_storage(self, allow_usb_host_storage):
        """Sets the allow_usb_host_storage of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow usb host storage].  # noqa: E501

        :param allow_usb_host_storage: The allow_usb_host_storage of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_usb_host_storage = allow_usb_host_storage

    @property
    def enable_sim_pin_lock(self):
        """Gets the enable_sim_pin_lock of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enablesimpin lock].  # noqa: E501

        :return: The enable_sim_pin_lock of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_sim_pin_lock

    @enable_sim_pin_lock.setter
    def enable_sim_pin_lock(self, enable_sim_pin_lock):
        """Sets the enable_sim_pin_lock of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [enablesimpin lock].  # noqa: E501

        :param enable_sim_pin_lock: The enable_sim_pin_lock of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_sim_pin_lock = enable_sim_pin_lock

    @property
    def allow_unsecure_wifi(self):
        """Gets the allow_unsecure_wifi of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow unsecure wifi].  # noqa: E501

        :return: The allow_unsecure_wifi of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unsecure_wifi

    @allow_unsecure_wifi.setter
    def allow_unsecure_wifi(self, allow_unsecure_wifi):
        """Sets the allow_unsecure_wifi of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow unsecure wifi].  # noqa: E501

        :param allow_unsecure_wifi: The allow_unsecure_wifi of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_unsecure_wifi = allow_unsecure_wifi

    @property
    def allow_auto_connection_wifi(self):
        """Gets the allow_auto_connection_wifi of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow automatic connection wifi].  # noqa: E501

        :return: The allow_auto_connection_wifi of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_auto_connection_wifi

    @allow_auto_connection_wifi.setter
    def allow_auto_connection_wifi(self, allow_auto_connection_wifi):
        """Sets the allow_auto_connection_wifi of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow automatic connection wifi].  # noqa: E501

        :param allow_auto_connection_wifi: The allow_auto_connection_wifi of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_auto_connection_wifi = allow_auto_connection_wifi

    @property
    def allow_account_settings(self):
        """Gets the allow_account_settings of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow account settings].  # noqa: E501

        :return: The allow_account_settings of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_account_settings

    @allow_account_settings.setter
    def allow_account_settings(self, allow_account_settings):
        """Sets the allow_account_settings of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow account settings].  # noqa: E501

        :param allow_account_settings: The allow_account_settings of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_account_settings = allow_account_settings

    @property
    def allow_application_settings(self):
        """Gets the allow_application_settings of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow application settings].  # noqa: E501

        :return: The allow_application_settings of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_application_settings

    @allow_application_settings.setter
    def allow_application_settings(self, allow_application_settings):
        """Sets the allow_application_settings of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow application settings].  # noqa: E501

        :param allow_application_settings: The allow_application_settings of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_application_settings = allow_application_settings

    @property
    def allow_developer_options(self):
        """Gets the allow_developer_options of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow developer options].  # noqa: E501

        :return: The allow_developer_options of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_developer_options

    @allow_developer_options.setter
    def allow_developer_options(self, allow_developer_options):
        """Sets the allow_developer_options of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow developer options].  # noqa: E501

        :param allow_developer_options: The allow_developer_options of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_developer_options = allow_developer_options

    @property
    def allow_notifications(self):
        """Gets the allow_notifications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow notifications].  # noqa: E501

        :return: The allow_notifications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_notifications

    @allow_notifications.setter
    def allow_notifications(self, allow_notifications):
        """Sets the allow_notifications of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow notifications].  # noqa: E501

        :param allow_notifications: The allow_notifications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_notifications = allow_notifications

    @property
    def allow_only_secure_vpn_connections(self):
        """Gets the allow_only_secure_vpn_connections of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow unsecure VPN connection].  # noqa: E501

        :return: The allow_only_secure_vpn_connections of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_only_secure_vpn_connections

    @allow_only_secure_vpn_connections.setter
    def allow_only_secure_vpn_connections(self, allow_only_secure_vpn_connections):
        """Sets the allow_only_secure_vpn_connections of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow unsecure VPN connection].  # noqa: E501

        :param allow_only_secure_vpn_connections: The allow_only_secure_vpn_connections of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_only_secure_vpn_connections = allow_only_secure_vpn_connections

    @property
    def allow_system_bar(self):
        """Gets the allow_system_bar of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow system bar].  # noqa: E501

        :return: The allow_system_bar of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_system_bar

    @allow_system_bar.setter
    def allow_system_bar(self, allow_system_bar):
        """Sets the allow_system_bar of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow system bar].  # noqa: E501

        :param allow_system_bar: The allow_system_bar of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_system_bar = allow_system_bar

    @property
    def allow_task_manager(self):
        """Gets the allow_task_manager of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow task manager].  # noqa: E501

        :return: The allow_task_manager of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_task_manager

    @allow_task_manager.setter
    def allow_task_manager(self, allow_task_manager):
        """Sets the allow_task_manager of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow task manager].  # noqa: E501

        :param allow_task_manager: The allow_task_manager of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_task_manager = allow_task_manager

    @property
    def allow_menu_key(self):
        """Gets the allow_menu_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow menu key].  # noqa: E501

        :return: The allow_menu_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_menu_key

    @allow_menu_key.setter
    def allow_menu_key(self, allow_menu_key):
        """Sets the allow_menu_key of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow menu key].  # noqa: E501

        :param allow_menu_key: The allow_menu_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_menu_key = allow_menu_key

    @property
    def allow_back_key(self):
        """Gets the allow_back_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow back key].  # noqa: E501

        :return: The allow_back_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_back_key

    @allow_back_key.setter
    def allow_back_key(self, allow_back_key):
        """Sets the allow_back_key of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow back key].  # noqa: E501

        :param allow_back_key: The allow_back_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_back_key = allow_back_key

    @property
    def allow_search_key(self):
        """Gets the allow_search_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow search key].  # noqa: E501

        :return: The allow_search_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_search_key

    @allow_search_key.setter
    def allow_search_key(self, allow_search_key):
        """Sets the allow_search_key of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow search key].  # noqa: E501

        :param allow_search_key: The allow_search_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_search_key = allow_search_key

    @property
    def allow_volume_key(self):
        """Gets the allow_volume_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow volume key].  # noqa: E501

        :return: The allow_volume_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_volume_key

    @allow_volume_key.setter
    def allow_volume_key(self, allow_volume_key):
        """Sets the allow_volume_key of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow volume key].  # noqa: E501

        :param allow_volume_key: The allow_volume_key of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_volume_key = allow_volume_key

    @property
    def allow_keyguard_features(self):
        """Gets the allow_keyguard_features of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard features].  # noqa: E501

        :return: The allow_keyguard_features of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_features

    @allow_keyguard_features.setter
    def allow_keyguard_features(self, allow_keyguard_features):
        """Sets the allow_keyguard_features of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow keyguard features].  # noqa: E501

        :param allow_keyguard_features: The allow_keyguard_features of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_features = allow_keyguard_features

    @property
    def allow_keyguard_trust_agent(self):
        """Gets the allow_keyguard_trust_agent of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard trust agent].  # noqa: E501

        :return: The allow_keyguard_trust_agent of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_trust_agent

    @allow_keyguard_trust_agent.setter
    def allow_keyguard_trust_agent(self, allow_keyguard_trust_agent):
        """Sets the allow_keyguard_trust_agent of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow keyguard trust agent].  # noqa: E501

        :param allow_keyguard_trust_agent: The allow_keyguard_trust_agent of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_trust_agent = allow_keyguard_trust_agent

    @property
    def allow_keyguard_camera(self):
        """Gets the allow_keyguard_camera of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard camera].  # noqa: E501

        :return: The allow_keyguard_camera of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_camera

    @allow_keyguard_camera.setter
    def allow_keyguard_camera(self, allow_keyguard_camera):
        """Sets the allow_keyguard_camera of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow keyguard camera].  # noqa: E501

        :param allow_keyguard_camera: The allow_keyguard_camera of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_camera = allow_keyguard_camera

    @property
    def allow_keyguard_fingerprint(self):
        """Gets the allow_keyguard_fingerprint of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard fingerprint].  # noqa: E501

        :return: The allow_keyguard_fingerprint of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_fingerprint

    @allow_keyguard_fingerprint.setter
    def allow_keyguard_fingerprint(self, allow_keyguard_fingerprint):
        """Sets the allow_keyguard_fingerprint of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow keyguard fingerprint].  # noqa: E501

        :param allow_keyguard_fingerprint: The allow_keyguard_fingerprint of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_fingerprint = allow_keyguard_fingerprint

    @property
    def allow_keyguard_notifications(self):
        """Gets the allow_keyguard_notifications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard notifications].  # noqa: E501

        :return: The allow_keyguard_notifications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_notifications

    @allow_keyguard_notifications.setter
    def allow_keyguard_notifications(self, allow_keyguard_notifications):
        """Sets the allow_keyguard_notifications of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow keyguard notifications].  # noqa: E501

        :param allow_keyguard_notifications: The allow_keyguard_notifications of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_notifications = allow_keyguard_notifications

    @property
    def allow_keyguard_unredacted(self):
        """Gets the allow_keyguard_unredacted of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard unredacted].  # noqa: E501

        :return: The allow_keyguard_unredacted of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_unredacted

    @allow_keyguard_unredacted.setter
    def allow_keyguard_unredacted(self, allow_keyguard_unredacted):
        """Sets the allow_keyguard_unredacted of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow keyguard unredacted].  # noqa: E501

        :param allow_keyguard_unredacted: The allow_keyguard_unredacted of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_unredacted = allow_keyguard_unredacted

    @property
    def allow_user_creation(self):
        """Gets the allow_user_creation of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow user creation].  # noqa: E501

        :return: The allow_user_creation of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_creation

    @allow_user_creation.setter
    def allow_user_creation(self, allow_user_creation):
        """Sets the allow_user_creation of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow user creation].  # noqa: E501

        :param allow_user_creation: The allow_user_creation of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_user_creation = allow_user_creation

    @property
    def allow_multiple_users(self):
        """Gets the allow_multiple_users of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow multiple users].  # noqa: E501

        :return: The allow_multiple_users of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_users

    @allow_multiple_users.setter
    def allow_multiple_users(self, allow_multiple_users):
        """Sets the allow_multiple_users of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow multiple users].  # noqa: E501

        :param allow_multiple_users: The allow_multiple_users of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_users = allow_multiple_users

    @property
    def allow_user_removal(self):
        """Gets the allow_user_removal of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow user removal].  # noqa: E501

        :return: The allow_user_removal of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_removal

    @allow_user_removal.setter
    def allow_user_removal(self, allow_user_removal):
        """Sets the allow_user_removal of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [allow user removal].  # noqa: E501

        :param allow_user_removal: The allow_user_removal of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_user_removal = allow_user_removal

    @property
    def enable_samsung_efota(self):
        """Gets the enable_samsung_efota of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enable samsung efota].  # noqa: E501

        :return: The enable_samsung_efota of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_samsung_efota

    @enable_samsung_efota.setter
    def enable_samsung_efota(self, enable_samsung_efota):
        """Sets the enable_samsung_efota of this AndroidRestrictionsPayloadV2Entity.

        Gets or sets a value indicating whether [enable samsung efota].  # noqa: E501

        :param enable_samsung_efota: The enable_samsung_efota of this AndroidRestrictionsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_samsung_efota = enable_samsung_efota

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidRestrictionsPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidRestrictionsPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidRestrictionsPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
