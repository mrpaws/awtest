# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mcmv1.configuration import Configuration


class ContentGatewayV3Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_gateway_configuration_uuid': 'str',
        'organization_group_uuid': 'str',
        'content_gateway_configuration_name': 'str',
        'content_gateway_active': 'bool',
        'content_gateway_configuration_type': 'int',
        'content_gateway_display_url': 'str',
        'content_gateway_url': 'str',
        'content_gateway_port': 'int',
        'content_gateway_content_scheme': 'str',
        'relay_address_display_url': 'str',
        'content_gateway_relay_address': 'str',
        'content_gateway_relay_port': 'int',
        'ignore_ssl_errors': 'bool',
        'server_ssl_offloaded': 'bool',
        'server_ssl_port': 'int',
        'content_gateway_relay_scheme': 'str',
        'content_gateway_public_ssl_certificate_uuid': 'str',
        'self_signed_cert_uuid': 'str',
        'content_gateway_public_ssl_certificate_thumbprint': 'str',
        'self_signed_cert_thumbprint': 'str',
        'organization_group_name': 'str',
        'content_gateway_ssl_cert': 'str',
        'self_signed_cert': 'str',
        'content_gateway_certificate_hash': 'str',
        'content_gateway_identifier': 'str',
        'issuer_identifier': 'str',
        'aes_passphrase': 'str',
        'modulus': 'str',
        'exponent': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'content_gateway_configuration_uuid': 'content_gateway_configuration_uuid',
        'organization_group_uuid': 'organization_group_uuid',
        'content_gateway_configuration_name': 'content_gateway_configuration_name',
        'content_gateway_active': 'content_gateway_active',
        'content_gateway_configuration_type': 'content_gateway_configuration_type',
        'content_gateway_display_url': 'content_gateway_display_url',
        'content_gateway_url': 'content_gateway_url',
        'content_gateway_port': 'content_gateway_port',
        'content_gateway_content_scheme': 'content_gateway_content_scheme',
        'relay_address_display_url': 'relay_address_display_url',
        'content_gateway_relay_address': 'content_gateway_relay_address',
        'content_gateway_relay_port': 'content_gateway_relay_port',
        'ignore_ssl_errors': 'ignore_ssl_errors',
        'server_ssl_offloaded': 'server_ssl_offloaded',
        'server_ssl_port': 'server_ssl_port',
        'content_gateway_relay_scheme': 'content_gateway_relay_scheme',
        'content_gateway_public_ssl_certificate_uuid': 'content_gateway_public_ssl_certificate_uuid',
        'self_signed_cert_uuid': 'self_signed_cert_uuid',
        'content_gateway_public_ssl_certificate_thumbprint': 'content_gateway_public_ssl_certificate_thumbprint',
        'self_signed_cert_thumbprint': 'self_signed_cert_thumbprint',
        'organization_group_name': 'organization_group_name',
        'content_gateway_ssl_cert': 'content_gateway_ssl_cert',
        'self_signed_cert': 'self_signed_cert',
        'content_gateway_certificate_hash': 'content_gateway_certificate_hash',
        'content_gateway_identifier': 'content_gateway_identifier',
        'issuer_identifier': 'issuer_identifier',
        'aes_passphrase': 'aes_passphrase',
        'modulus': 'modulus',
        'exponent': 'exponent',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, content_gateway_configuration_uuid=None, organization_group_uuid=None, content_gateway_configuration_name=None, content_gateway_active=None, content_gateway_configuration_type=None, content_gateway_display_url=None, content_gateway_url=None, content_gateway_port=None, content_gateway_content_scheme=None, relay_address_display_url=None, content_gateway_relay_address=None, content_gateway_relay_port=None, ignore_ssl_errors=None, server_ssl_offloaded=None, server_ssl_port=None, content_gateway_relay_scheme=None, content_gateway_public_ssl_certificate_uuid=None, self_signed_cert_uuid=None, content_gateway_public_ssl_certificate_thumbprint=None, self_signed_cert_thumbprint=None, organization_group_name=None, content_gateway_ssl_cert=None, self_signed_cert=None, content_gateway_certificate_hash=None, content_gateway_identifier=None, issuer_identifier=None, aes_passphrase=None, modulus=None, exponent=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """ContentGatewayV3Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._content_gateway_configuration_uuid = None
        self._organization_group_uuid = None
        self._content_gateway_configuration_name = None
        self._content_gateway_active = None
        self._content_gateway_configuration_type = None
        self._content_gateway_display_url = None
        self._content_gateway_url = None
        self._content_gateway_port = None
        self._content_gateway_content_scheme = None
        self._relay_address_display_url = None
        self._content_gateway_relay_address = None
        self._content_gateway_relay_port = None
        self._ignore_ssl_errors = None
        self._server_ssl_offloaded = None
        self._server_ssl_port = None
        self._content_gateway_relay_scheme = None
        self._content_gateway_public_ssl_certificate_uuid = None
        self._self_signed_cert_uuid = None
        self._content_gateway_public_ssl_certificate_thumbprint = None
        self._self_signed_cert_thumbprint = None
        self._organization_group_name = None
        self._content_gateway_ssl_cert = None
        self._self_signed_cert = None
        self._content_gateway_certificate_hash = None
        self._content_gateway_identifier = None
        self._issuer_identifier = None
        self._aes_passphrase = None
        self._modulus = None
        self._exponent = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if content_gateway_configuration_uuid is not None:
            self.content_gateway_configuration_uuid = content_gateway_configuration_uuid
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if content_gateway_configuration_name is not None:
            self.content_gateway_configuration_name = content_gateway_configuration_name
        if content_gateway_active is not None:
            self.content_gateway_active = content_gateway_active
        if content_gateway_configuration_type is not None:
            self.content_gateway_configuration_type = content_gateway_configuration_type
        if content_gateway_display_url is not None:
            self.content_gateway_display_url = content_gateway_display_url
        if content_gateway_url is not None:
            self.content_gateway_url = content_gateway_url
        if content_gateway_port is not None:
            self.content_gateway_port = content_gateway_port
        if content_gateway_content_scheme is not None:
            self.content_gateway_content_scheme = content_gateway_content_scheme
        if relay_address_display_url is not None:
            self.relay_address_display_url = relay_address_display_url
        if content_gateway_relay_address is not None:
            self.content_gateway_relay_address = content_gateway_relay_address
        if content_gateway_relay_port is not None:
            self.content_gateway_relay_port = content_gateway_relay_port
        if ignore_ssl_errors is not None:
            self.ignore_ssl_errors = ignore_ssl_errors
        if server_ssl_offloaded is not None:
            self.server_ssl_offloaded = server_ssl_offloaded
        if server_ssl_port is not None:
            self.server_ssl_port = server_ssl_port
        if content_gateway_relay_scheme is not None:
            self.content_gateway_relay_scheme = content_gateway_relay_scheme
        if content_gateway_public_ssl_certificate_uuid is not None:
            self.content_gateway_public_ssl_certificate_uuid = content_gateway_public_ssl_certificate_uuid
        if self_signed_cert_uuid is not None:
            self.self_signed_cert_uuid = self_signed_cert_uuid
        if content_gateway_public_ssl_certificate_thumbprint is not None:
            self.content_gateway_public_ssl_certificate_thumbprint = content_gateway_public_ssl_certificate_thumbprint
        if self_signed_cert_thumbprint is not None:
            self.self_signed_cert_thumbprint = self_signed_cert_thumbprint
        if organization_group_name is not None:
            self.organization_group_name = organization_group_name
        if content_gateway_ssl_cert is not None:
            self.content_gateway_ssl_cert = content_gateway_ssl_cert
        if self_signed_cert is not None:
            self.self_signed_cert = self_signed_cert
        if content_gateway_certificate_hash is not None:
            self.content_gateway_certificate_hash = content_gateway_certificate_hash
        if content_gateway_identifier is not None:
            self.content_gateway_identifier = content_gateway_identifier
        if issuer_identifier is not None:
            self.issuer_identifier = issuer_identifier
        if aes_passphrase is not None:
            self.aes_passphrase = aes_passphrase
        if modulus is not None:
            self.modulus = modulus
        if exponent is not None:
            self.exponent = exponent
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def content_gateway_configuration_uuid(self):
        """Gets the content_gateway_configuration_uuid of this ContentGatewayV3Model.  # noqa: E501

        ContentGatewayUuId  # noqa: E501

        :return: The content_gateway_configuration_uuid of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_configuration_uuid

    @content_gateway_configuration_uuid.setter
    def content_gateway_configuration_uuid(self, content_gateway_configuration_uuid):
        """Sets the content_gateway_configuration_uuid of this ContentGatewayV3Model.

        ContentGatewayUuId  # noqa: E501

        :param content_gateway_configuration_uuid: The content_gateway_configuration_uuid of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_configuration_uuid = content_gateway_configuration_uuid

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this ContentGatewayV3Model.  # noqa: E501

        OrganizationGroupUuId  # noqa: E501

        :return: The organization_group_uuid of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this ContentGatewayV3Model.

        OrganizationGroupUuId  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def content_gateway_configuration_name(self):
        """Gets the content_gateway_configuration_name of this ContentGatewayV3Model.  # noqa: E501

        Name of the content gateway  # noqa: E501

        :return: The content_gateway_configuration_name of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_configuration_name

    @content_gateway_configuration_name.setter
    def content_gateway_configuration_name(self, content_gateway_configuration_name):
        """Sets the content_gateway_configuration_name of this ContentGatewayV3Model.

        Name of the content gateway  # noqa: E501

        :param content_gateway_configuration_name: The content_gateway_configuration_name of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_configuration_name = content_gateway_configuration_name

    @property
    def content_gateway_active(self):
        """Gets the content_gateway_active of this ContentGatewayV3Model.  # noqa: E501

        Indicates whether content gateway node is active  # noqa: E501

        :return: The content_gateway_active of this ContentGatewayV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._content_gateway_active

    @content_gateway_active.setter
    def content_gateway_active(self, content_gateway_active):
        """Sets the content_gateway_active of this ContentGatewayV3Model.

        Indicates whether content gateway node is active  # noqa: E501

        :param content_gateway_active: The content_gateway_active of this ContentGatewayV3Model.  # noqa: E501
        :type: bool
        """

        self._content_gateway_active = content_gateway_active

    @property
    def content_gateway_configuration_type(self):
        """Gets the content_gateway_configuration_type of this ContentGatewayV3Model.  # noqa: E501

        Type Of Content Gateway  # noqa: E501

        :return: The content_gateway_configuration_type of this ContentGatewayV3Model.  # noqa: E501
        :rtype: int
        """
        return self._content_gateway_configuration_type

    @content_gateway_configuration_type.setter
    def content_gateway_configuration_type(self, content_gateway_configuration_type):
        """Sets the content_gateway_configuration_type of this ContentGatewayV3Model.

        Type Of Content Gateway  # noqa: E501

        :param content_gateway_configuration_type: The content_gateway_configuration_type of this ContentGatewayV3Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                content_gateway_configuration_type not in allowed_values):
            raise ValueError(
                "Invalid value for `content_gateway_configuration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(content_gateway_configuration_type, allowed_values)
            )

        self._content_gateway_configuration_type = content_gateway_configuration_type

    @property
    def content_gateway_display_url(self):
        """Gets the content_gateway_display_url of this ContentGatewayV3Model.  # noqa: E501

        Content gateway display URL  # noqa: E501

        :return: The content_gateway_display_url of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_display_url

    @content_gateway_display_url.setter
    def content_gateway_display_url(self, content_gateway_display_url):
        """Sets the content_gateway_display_url of this ContentGatewayV3Model.

        Content gateway display URL  # noqa: E501

        :param content_gateway_display_url: The content_gateway_display_url of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_display_url = content_gateway_display_url

    @property
    def content_gateway_url(self):
        """Gets the content_gateway_url of this ContentGatewayV3Model.  # noqa: E501

        Content gateway URL  # noqa: E501

        :return: The content_gateway_url of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_url

    @content_gateway_url.setter
    def content_gateway_url(self, content_gateway_url):
        """Sets the content_gateway_url of this ContentGatewayV3Model.

        Content gateway URL  # noqa: E501

        :param content_gateway_url: The content_gateway_url of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_url = content_gateway_url

    @property
    def content_gateway_port(self):
        """Gets the content_gateway_port of this ContentGatewayV3Model.  # noqa: E501

        Content gateway port  # noqa: E501

        :return: The content_gateway_port of this ContentGatewayV3Model.  # noqa: E501
        :rtype: int
        """
        return self._content_gateway_port

    @content_gateway_port.setter
    def content_gateway_port(self, content_gateway_port):
        """Sets the content_gateway_port of this ContentGatewayV3Model.

        Content gateway port  # noqa: E501

        :param content_gateway_port: The content_gateway_port of this ContentGatewayV3Model.  # noqa: E501
        :type: int
        """

        self._content_gateway_port = content_gateway_port

    @property
    def content_gateway_content_scheme(self):
        """Gets the content_gateway_content_scheme of this ContentGatewayV3Model.  # noqa: E501

        Content gateway scheme  # noqa: E501

        :return: The content_gateway_content_scheme of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_content_scheme

    @content_gateway_content_scheme.setter
    def content_gateway_content_scheme(self, content_gateway_content_scheme):
        """Sets the content_gateway_content_scheme of this ContentGatewayV3Model.

        Content gateway scheme  # noqa: E501

        :param content_gateway_content_scheme: The content_gateway_content_scheme of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["HTTP", "HTTPS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                content_gateway_content_scheme not in allowed_values):
            raise ValueError(
                "Invalid value for `content_gateway_content_scheme` ({0}), must be one of {1}"  # noqa: E501
                .format(content_gateway_content_scheme, allowed_values)
            )

        self._content_gateway_content_scheme = content_gateway_content_scheme

    @property
    def relay_address_display_url(self):
        """Gets the relay_address_display_url of this ContentGatewayV3Model.  # noqa: E501

        Relay address display URL  # noqa: E501

        :return: The relay_address_display_url of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._relay_address_display_url

    @relay_address_display_url.setter
    def relay_address_display_url(self, relay_address_display_url):
        """Sets the relay_address_display_url of this ContentGatewayV3Model.

        Relay address display URL  # noqa: E501

        :param relay_address_display_url: The relay_address_display_url of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._relay_address_display_url = relay_address_display_url

    @property
    def content_gateway_relay_address(self):
        """Gets the content_gateway_relay_address of this ContentGatewayV3Model.  # noqa: E501

        Content gateway relay address  # noqa: E501

        :return: The content_gateway_relay_address of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_relay_address

    @content_gateway_relay_address.setter
    def content_gateway_relay_address(self, content_gateway_relay_address):
        """Sets the content_gateway_relay_address of this ContentGatewayV3Model.

        Content gateway relay address  # noqa: E501

        :param content_gateway_relay_address: The content_gateway_relay_address of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_relay_address = content_gateway_relay_address

    @property
    def content_gateway_relay_port(self):
        """Gets the content_gateway_relay_port of this ContentGatewayV3Model.  # noqa: E501

        Content gateway relay port  # noqa: E501

        :return: The content_gateway_relay_port of this ContentGatewayV3Model.  # noqa: E501
        :rtype: int
        """
        return self._content_gateway_relay_port

    @content_gateway_relay_port.setter
    def content_gateway_relay_port(self, content_gateway_relay_port):
        """Sets the content_gateway_relay_port of this ContentGatewayV3Model.

        Content gateway relay port  # noqa: E501

        :param content_gateway_relay_port: The content_gateway_relay_port of this ContentGatewayV3Model.  # noqa: E501
        :type: int
        """

        self._content_gateway_relay_port = content_gateway_relay_port

    @property
    def ignore_ssl_errors(self):
        """Gets the ignore_ssl_errors of this ContentGatewayV3Model.  # noqa: E501

        Checks whether SSL errors are ignored  # noqa: E501

        :return: The ignore_ssl_errors of this ContentGatewayV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_ssl_errors

    @ignore_ssl_errors.setter
    def ignore_ssl_errors(self, ignore_ssl_errors):
        """Sets the ignore_ssl_errors of this ContentGatewayV3Model.

        Checks whether SSL errors are ignored  # noqa: E501

        :param ignore_ssl_errors: The ignore_ssl_errors of this ContentGatewayV3Model.  # noqa: E501
        :type: bool
        """

        self._ignore_ssl_errors = ignore_ssl_errors

    @property
    def server_ssl_offloaded(self):
        """Gets the server_ssl_offloaded of this ContentGatewayV3Model.  # noqa: E501

        Checks for Server SSL offloading  # noqa: E501

        :return: The server_ssl_offloaded of this ContentGatewayV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._server_ssl_offloaded

    @server_ssl_offloaded.setter
    def server_ssl_offloaded(self, server_ssl_offloaded):
        """Sets the server_ssl_offloaded of this ContentGatewayV3Model.

        Checks for Server SSL offloading  # noqa: E501

        :param server_ssl_offloaded: The server_ssl_offloaded of this ContentGatewayV3Model.  # noqa: E501
        :type: bool
        """

        self._server_ssl_offloaded = server_ssl_offloaded

    @property
    def server_ssl_port(self):
        """Gets the server_ssl_port of this ContentGatewayV3Model.  # noqa: E501

        SSL port for which requests are to be forwarded  # noqa: E501

        :return: The server_ssl_port of this ContentGatewayV3Model.  # noqa: E501
        :rtype: int
        """
        return self._server_ssl_port

    @server_ssl_port.setter
    def server_ssl_port(self, server_ssl_port):
        """Sets the server_ssl_port of this ContentGatewayV3Model.

        SSL port for which requests are to be forwarded  # noqa: E501

        :param server_ssl_port: The server_ssl_port of this ContentGatewayV3Model.  # noqa: E501
        :type: int
        """

        self._server_ssl_port = server_ssl_port

    @property
    def content_gateway_relay_scheme(self):
        """Gets the content_gateway_relay_scheme of this ContentGatewayV3Model.  # noqa: E501

        Content gateway relay scheme  # noqa: E501

        :return: The content_gateway_relay_scheme of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_relay_scheme

    @content_gateway_relay_scheme.setter
    def content_gateway_relay_scheme(self, content_gateway_relay_scheme):
        """Sets the content_gateway_relay_scheme of this ContentGatewayV3Model.

        Content gateway relay scheme  # noqa: E501

        :param content_gateway_relay_scheme: The content_gateway_relay_scheme of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["HTTP", "HTTPS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                content_gateway_relay_scheme not in allowed_values):
            raise ValueError(
                "Invalid value for `content_gateway_relay_scheme` ({0}), must be one of {1}"  # noqa: E501
                .format(content_gateway_relay_scheme, allowed_values)
            )

        self._content_gateway_relay_scheme = content_gateway_relay_scheme

    @property
    def content_gateway_public_ssl_certificate_uuid(self):
        """Gets the content_gateway_public_ssl_certificate_uuid of this ContentGatewayV3Model.  # noqa: E501

        Content gateway certificate uuid  # noqa: E501

        :return: The content_gateway_public_ssl_certificate_uuid of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_public_ssl_certificate_uuid

    @content_gateway_public_ssl_certificate_uuid.setter
    def content_gateway_public_ssl_certificate_uuid(self, content_gateway_public_ssl_certificate_uuid):
        """Sets the content_gateway_public_ssl_certificate_uuid of this ContentGatewayV3Model.

        Content gateway certificate uuid  # noqa: E501

        :param content_gateway_public_ssl_certificate_uuid: The content_gateway_public_ssl_certificate_uuid of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_public_ssl_certificate_uuid = content_gateway_public_ssl_certificate_uuid

    @property
    def self_signed_cert_uuid(self):
        """Gets the self_signed_cert_uuid of this ContentGatewayV3Model.  # noqa: E501

        Self signed Certificate uuid  # noqa: E501

        :return: The self_signed_cert_uuid of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._self_signed_cert_uuid

    @self_signed_cert_uuid.setter
    def self_signed_cert_uuid(self, self_signed_cert_uuid):
        """Sets the self_signed_cert_uuid of this ContentGatewayV3Model.

        Self signed Certificate uuid  # noqa: E501

        :param self_signed_cert_uuid: The self_signed_cert_uuid of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._self_signed_cert_uuid = self_signed_cert_uuid

    @property
    def content_gateway_public_ssl_certificate_thumbprint(self):
        """Gets the content_gateway_public_ssl_certificate_thumbprint of this ContentGatewayV3Model.  # noqa: E501

        Content gateway public SSL certificate thumbprint  # noqa: E501

        :return: The content_gateway_public_ssl_certificate_thumbprint of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_public_ssl_certificate_thumbprint

    @content_gateway_public_ssl_certificate_thumbprint.setter
    def content_gateway_public_ssl_certificate_thumbprint(self, content_gateway_public_ssl_certificate_thumbprint):
        """Sets the content_gateway_public_ssl_certificate_thumbprint of this ContentGatewayV3Model.

        Content gateway public SSL certificate thumbprint  # noqa: E501

        :param content_gateway_public_ssl_certificate_thumbprint: The content_gateway_public_ssl_certificate_thumbprint of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_public_ssl_certificate_thumbprint = content_gateway_public_ssl_certificate_thumbprint

    @property
    def self_signed_cert_thumbprint(self):
        """Gets the self_signed_cert_thumbprint of this ContentGatewayV3Model.  # noqa: E501

        Self signed certificate thumbprint  # noqa: E501

        :return: The self_signed_cert_thumbprint of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._self_signed_cert_thumbprint

    @self_signed_cert_thumbprint.setter
    def self_signed_cert_thumbprint(self, self_signed_cert_thumbprint):
        """Sets the self_signed_cert_thumbprint of this ContentGatewayV3Model.

        Self signed certificate thumbprint  # noqa: E501

        :param self_signed_cert_thumbprint: The self_signed_cert_thumbprint of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._self_signed_cert_thumbprint = self_signed_cert_thumbprint

    @property
    def organization_group_name(self):
        """Gets the organization_group_name of this ContentGatewayV3Model.  # noqa: E501

        Organization Group name  # noqa: E501

        :return: The organization_group_name of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_name

    @organization_group_name.setter
    def organization_group_name(self, organization_group_name):
        """Sets the organization_group_name of this ContentGatewayV3Model.

        Organization Group name  # noqa: E501

        :param organization_group_name: The organization_group_name of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._organization_group_name = organization_group_name

    @property
    def content_gateway_ssl_cert(self):
        """Gets the content_gateway_ssl_cert of this ContentGatewayV3Model.  # noqa: E501

        Content Gateway SSL certificate  # noqa: E501

        :return: The content_gateway_ssl_cert of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_ssl_cert

    @content_gateway_ssl_cert.setter
    def content_gateway_ssl_cert(self, content_gateway_ssl_cert):
        """Sets the content_gateway_ssl_cert of this ContentGatewayV3Model.

        Content Gateway SSL certificate  # noqa: E501

        :param content_gateway_ssl_cert: The content_gateway_ssl_cert of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_ssl_cert = content_gateway_ssl_cert

    @property
    def self_signed_cert(self):
        """Gets the self_signed_cert of this ContentGatewayV3Model.  # noqa: E501

        Self signed certificate  # noqa: E501

        :return: The self_signed_cert of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._self_signed_cert

    @self_signed_cert.setter
    def self_signed_cert(self, self_signed_cert):
        """Sets the self_signed_cert of this ContentGatewayV3Model.

        Self signed certificate  # noqa: E501

        :param self_signed_cert: The self_signed_cert of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._self_signed_cert = self_signed_cert

    @property
    def content_gateway_certificate_hash(self):
        """Gets the content_gateway_certificate_hash of this ContentGatewayV3Model.  # noqa: E501

        Content gateway certificate hash  # noqa: E501

        :return: The content_gateway_certificate_hash of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_certificate_hash

    @content_gateway_certificate_hash.setter
    def content_gateway_certificate_hash(self, content_gateway_certificate_hash):
        """Sets the content_gateway_certificate_hash of this ContentGatewayV3Model.

        Content gateway certificate hash  # noqa: E501

        :param content_gateway_certificate_hash: The content_gateway_certificate_hash of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_certificate_hash = content_gateway_certificate_hash

    @property
    def content_gateway_identifier(self):
        """Gets the content_gateway_identifier of this ContentGatewayV3Model.  # noqa: E501

        Identifies the content gateway uniquely  # noqa: E501

        :return: The content_gateway_identifier of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._content_gateway_identifier

    @content_gateway_identifier.setter
    def content_gateway_identifier(self, content_gateway_identifier):
        """Sets the content_gateway_identifier of this ContentGatewayV3Model.

        Identifies the content gateway uniquely  # noqa: E501

        :param content_gateway_identifier: The content_gateway_identifier of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._content_gateway_identifier = content_gateway_identifier

    @property
    def issuer_identifier(self):
        """Gets the issuer_identifier of this ContentGatewayV3Model.  # noqa: E501

        Issuer identifier  # noqa: E501

        :return: The issuer_identifier of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._issuer_identifier

    @issuer_identifier.setter
    def issuer_identifier(self, issuer_identifier):
        """Sets the issuer_identifier of this ContentGatewayV3Model.

        Issuer identifier  # noqa: E501

        :param issuer_identifier: The issuer_identifier of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._issuer_identifier = issuer_identifier

    @property
    def aes_passphrase(self):
        """Gets the aes_passphrase of this ContentGatewayV3Model.  # noqa: E501

        AES passphrase  # noqa: E501

        :return: The aes_passphrase of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._aes_passphrase

    @aes_passphrase.setter
    def aes_passphrase(self, aes_passphrase):
        """Sets the aes_passphrase of this ContentGatewayV3Model.

        AES passphrase  # noqa: E501

        :param aes_passphrase: The aes_passphrase of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._aes_passphrase = aes_passphrase

    @property
    def modulus(self):
        """Gets the modulus of this ContentGatewayV3Model.  # noqa: E501

        RSA key modulus value  # noqa: E501

        :return: The modulus of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._modulus

    @modulus.setter
    def modulus(self, modulus):
        """Sets the modulus of this ContentGatewayV3Model.

        RSA key modulus value  # noqa: E501

        :param modulus: The modulus of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._modulus = modulus

    @property
    def exponent(self):
        """Gets the exponent of this ContentGatewayV3Model.  # noqa: E501

        RSA key exponent  # noqa: E501

        :return: The exponent of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._exponent

    @exponent.setter
    def exponent(self, exponent):
        """Sets the exponent of this ContentGatewayV3Model.

        RSA key exponent  # noqa: E501

        :param exponent: The exponent of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._exponent = exponent

    @property
    def id(self):
        """Gets the id of this ContentGatewayV3Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this ContentGatewayV3Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContentGatewayV3Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this ContentGatewayV3Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ContentGatewayV3Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this ContentGatewayV3Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ContentGatewayV3Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this ContentGatewayV3Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentGatewayV3Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentGatewayV3Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentGatewayV3Model):
            return True

        return self.to_dict() != other.to_dict()
