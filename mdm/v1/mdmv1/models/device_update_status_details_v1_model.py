# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceUpdateStatusDetailsV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_seen': 'datetime',
        'device_name': 'str',
        'last_name': 'str',
        'first_name': 'str',
        'status': 'str',
        'reason': 'str',
        'next_retry': 'datetime',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'last_seen': 'last_seen',
        'device_name': 'device_name',
        'last_name': 'last_name',
        'first_name': 'first_name',
        'status': 'status',
        'reason': 'reason',
        'next_retry': 'next_retry',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, last_seen=None, device_name=None, last_name=None, first_name=None, status=None, reason=None, next_retry=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceUpdateStatusDetailsV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._last_seen = None
        self._device_name = None
        self._last_name = None
        self._first_name = None
        self._status = None
        self._reason = None
        self._next_retry = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if last_seen is not None:
            self.last_seen = last_seen
        if device_name is not None:
            self.device_name = device_name
        if last_name is not None:
            self.last_name = last_name
        if first_name is not None:
            self.first_name = first_name
        if status is not None:
            self.status = status
        if reason is not None:
            self.reason = reason
        if next_retry is not None:
            self.next_retry = next_retry
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def last_seen(self):
        """Gets the last_seen of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501

        Gets or sets the time when the device was last seen.  # noqa: E501

        :return: The last_seen of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this DeviceUpdateStatusDetailsV1Model.

        Gets or sets the time when the device was last seen.  # noqa: E501

        :param last_seen: The last_seen of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :type: datetime
        """

        self._last_seen = last_seen

    @property
    def device_name(self):
        """Gets the device_name of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501

        Gets or sets the friendly name of the device.  # noqa: E501

        :return: The device_name of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceUpdateStatusDetailsV1Model.

        Gets or sets the friendly name of the device.  # noqa: E501

        :param device_name: The device_name of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def last_name(self):
        """Gets the last_name of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501

        Gets or sets last name of user of the device.  # noqa: E501

        :return: The last_name of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DeviceUpdateStatusDetailsV1Model.

        Gets or sets last name of user of the device.  # noqa: E501

        :param last_name: The last_name of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """Gets the first_name of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501

        Gets or sets first name of user of the device.  # noqa: E501

        :return: The first_name of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DeviceUpdateStatusDetailsV1Model.

        Gets or sets first name of user of the device.  # noqa: E501

        :param first_name: The first_name of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def status(self):
        """Gets the status of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501

        Gets or sets the status of the update.  # noqa: E501

        :return: The status of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceUpdateStatusDetailsV1Model.

        Gets or sets the status of the update.  # noqa: E501

        :param status: The status of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "IDLE", "DOWNLOADING", "DOWNLOAD_FAILED", "INSTALLING", "INSTALL_FAILED", "DOWNLOAD_COMPLETE", "INSTALL_COMPLETE", "NOT_STARTED", "NOT_ELIGIBLE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501

        Gets or sets the reason for the update status.  # noqa: E501

        :return: The reason of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DeviceUpdateStatusDetailsV1Model.

        Gets or sets the reason for the update status.  # noqa: E501

        :param reason: The reason of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def next_retry(self):
        """Gets the next_retry of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501

        Gets or sets the next retry time if the previous attempt failed.  # noqa: E501

        :return: The next_retry of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._next_retry

    @next_retry.setter
    def next_retry(self, next_retry):
        """Sets the next_retry of this DeviceUpdateStatusDetailsV1Model.

        Gets or sets the next retry time if the previous attempt failed.  # noqa: E501

        :param next_retry: The next_retry of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :type: datetime
        """

        self._next_retry = next_retry

    @property
    def id(self):
        """Gets the id of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceUpdateStatusDetailsV1Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceUpdateStatusDetailsV1Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this DeviceUpdateStatusDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceUpdateStatusDetailsV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceUpdateStatusDetailsV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceUpdateStatusDetailsV1Model):
            return True

        return self.to_dict() != other.to_dict()
