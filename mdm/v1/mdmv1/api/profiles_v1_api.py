# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class ProfilesV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def profiles_v1_activate_profile_async(self, profileid, **kwargs):  # noqa: E501
        """Activates a Device Profile by Profile Id.  # noqa: E501

        Activates a Device Profile identified by Profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_activate_profile_async(profileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: Profile Id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_activate_profile_async_with_http_info(profileid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_activate_profile_async_with_http_info(profileid, **kwargs)  # noqa: E501
            return data

    def profiles_v1_activate_profile_async_with_http_info(self, profileid, **kwargs):  # noqa: E501
        """Activates a Device Profile by Profile Id.  # noqa: E501

        Activates a Device Profile identified by Profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_activate_profile_async_with_http_info(profileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: Profile Id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profileid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_activate_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profileid' is set
        if self.api_client.client_side_validation and ('profileid' not in params or
                                                       params['profileid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profileid` when calling `profiles_v1_activate_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profileid' in params:
            path_params['profileid'] = params['profileid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileid}/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_create_iot_device_device_profile(self, device_profile, **kwargs):  # noqa: E501
        """New - Creates a new profile for IOT Device  # noqa: E501

        Create a new profile for IOT device with configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_create_iot_device_device_profile(device_profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IOTDeviceDeviceProfileEntity device_profile: IOTDevice Device profile to be created(required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_create_iot_device_device_profile_with_http_info(device_profile, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_create_iot_device_device_profile_with_http_info(device_profile, **kwargs)  # noqa: E501
            return data

    def profiles_v1_create_iot_device_device_profile_with_http_info(self, device_profile, **kwargs):  # noqa: E501
        """New - Creates a new profile for IOT Device  # noqa: E501

        Create a new profile for IOT device with configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_create_iot_device_device_profile_with_http_info(device_profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IOTDeviceDeviceProfileEntity device_profile: IOTDevice Device profile to be created(required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_create_iot_device_device_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_profile' is set
        if self.api_client.client_side_validation and ('device_profile' not in params or
                                                       params['device_profile'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_profile` when calling `profiles_v1_create_iot_device_device_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/iotdevice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_create_iot_gateway_device_profile(self, device_profile, **kwargs):  # noqa: E501
        """New - Creates a new profile for IOTGateway Device  # noqa: E501

        Create a new profile for IOTGateway device with configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_create_iot_gateway_device_profile(device_profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IOTGatewayDeviceProfileEntity device_profile: IOTGateway Device profile to be created(required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_create_iot_gateway_device_profile_with_http_info(device_profile, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_create_iot_gateway_device_profile_with_http_info(device_profile, **kwargs)  # noqa: E501
            return data

    def profiles_v1_create_iot_gateway_device_profile_with_http_info(self, device_profile, **kwargs):  # noqa: E501
        """New - Creates a new profile for IOTGateway Device  # noqa: E501

        Create a new profile for IOTGateway device with configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_create_iot_gateway_device_profile_with_http_info(device_profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IOTGatewayDeviceProfileEntity device_profile: IOTGateway Device profile to be created(required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_create_iot_gateway_device_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_profile' is set
        if self.api_client.client_side_validation and ('device_profile' not in params or
                                                       params['device_profile'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_profile` when calling `profiles_v1_create_iot_gateway_device_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/iotgateway', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_create_windows_mobile_device_profile(self, model, **kwargs):  # noqa: E501
        """New - Creates a Windows Mobile profile  # noqa: E501

        It creates an existing Windows Mobile profile payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_create_windows_mobile_device_profile(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WindowsMobileDeviceProfileEntity model: Profile payload data(Required) (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_create_windows_mobile_device_profile_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_create_windows_mobile_device_profile_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def profiles_v1_create_windows_mobile_device_profile_with_http_info(self, model, **kwargs):  # noqa: E501
        """New - Creates a Windows Mobile profile  # noqa: E501

        It creates an existing Windows Mobile profile payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_create_windows_mobile_device_profile_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WindowsMobileDeviceProfileEntity model: Profile payload data(Required) (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_create_windows_mobile_device_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `profiles_v1_create_windows_mobile_device_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/windowsmobile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_deactivate_profile_async(self, profileid, **kwargs):  # noqa: E501
        """De-Activates a Device Profile by Profile Id.  # noqa: E501

        De-Activates a Device Profile identified by Profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_deactivate_profile_async(profileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: Profile Id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_deactivate_profile_async_with_http_info(profileid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_deactivate_profile_async_with_http_info(profileid, **kwargs)  # noqa: E501
            return data

    def profiles_v1_deactivate_profile_async_with_http_info(self, profileid, **kwargs):  # noqa: E501
        """De-Activates a Device Profile by Profile Id.  # noqa: E501

        De-Activates a Device Profile identified by Profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_deactivate_profile_async_with_http_info(profileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: Profile Id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profileid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_deactivate_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profileid' is set
        if self.api_client.client_side_validation and ('profileid' not in params or
                                                       params['profileid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profileid` when calling `profiles_v1_deactivate_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profileid' in params:
            path_params['profileid'] = params['profileid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileid}/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_delete_certificate_profile_mapping(self, mapping_id, **kwargs):  # noqa: E501
        """Deletes the mapping between a certificate and profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_delete_certificate_profile_mapping(mapping_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mapping_id: certificate profile map id (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_delete_certificate_profile_mapping_with_http_info(mapping_id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_delete_certificate_profile_mapping_with_http_info(mapping_id, **kwargs)  # noqa: E501
            return data

    def profiles_v1_delete_certificate_profile_mapping_with_http_info(self, mapping_id, **kwargs):  # noqa: E501
        """Deletes the mapping between a certificate and profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_delete_certificate_profile_mapping_with_http_info(mapping_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int mapping_id: certificate profile map id (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mapping_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_delete_certificate_profile_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mapping_id' is set
        if self.api_client.client_side_validation and ('mapping_id' not in params or
                                                       params['mapping_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mapping_id` when calling `profiles_v1_delete_certificate_profile_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mapping_id' in params:
            path_params['mappingID'] = params['mapping_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/certificatemap/{mappingID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_delete_device_profile_async(self, profileid, **kwargs):  # noqa: E501
        """Deletes the Device Profile by Profile Id.  # noqa: E501

        Deletes the Device Profile identified by the Profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_delete_device_profile_async(profileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: Profile Id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_delete_device_profile_async_with_http_info(profileid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_delete_device_profile_async_with_http_info(profileid, **kwargs)  # noqa: E501
            return data

    def profiles_v1_delete_device_profile_async_with_http_info(self, profileid, **kwargs):  # noqa: E501
        """Deletes the Device Profile by Profile Id.  # noqa: E501

        Deletes the Device Profile identified by the Profile Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_delete_device_profile_async_with_http_info(profileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: Profile Id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profileid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_delete_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profileid' is set
        if self.api_client.client_side_validation and ('profileid' not in params or
                                                       params['profileid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profileid` when calling `profiles_v1_delete_device_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profileid' in params:
            path_params['profileid'] = params['profileid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_generate_barcode(self, **kwargs):  # noqa: E501
        """Generates a staging barcode sheet in the selected format.  # noqa: E501

        Used to generate barcode for the specific staging profile in selected format.<br> The generated barcode will be scanned for enrolling the device.</br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_generate_barcode(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerateBarcodeEntity generate_barcode_entity: Details of the staging profile for which barcode has to be created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_generate_barcode_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_generate_barcode_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v1_generate_barcode_with_http_info(self, **kwargs):  # noqa: E501
        """Generates a staging barcode sheet in the selected format.  # noqa: E501

        Used to generate barcode for the specific staging profile in selected format.<br> The generated barcode will be scanned for enrolling the device.</br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_generate_barcode_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerateBarcodeEntity generate_barcode_entity: Details of the staging profile for which barcode has to be created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generate_barcode_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_generate_barcode" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generate_barcode_entity' in params:
            body_params = params['generate_barcode_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/Barcode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_get_certificate_profile_mappings(self, device_profile_id, **kwargs):  # noqa: E501
        """List the certificate mappings for a device profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_get_certificate_profile_mappings(device_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_profile_id: The device profile ID (required)
        :return: list[CertificateProfileMapModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_get_certificate_profile_mappings_with_http_info(device_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_get_certificate_profile_mappings_with_http_info(device_profile_id, **kwargs)  # noqa: E501
            return data

    def profiles_v1_get_certificate_profile_mappings_with_http_info(self, device_profile_id, **kwargs):  # noqa: E501
        """List the certificate mappings for a device profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_get_certificate_profile_mappings_with_http_info(device_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_profile_id: The device profile ID (required)
        :return: list[CertificateProfileMapModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_get_certificate_profile_mappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_profile_id' is set
        if self.api_client.client_side_validation and ('device_profile_id' not in params or
                                                       params['device_profile_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_profile_id` when calling `profiles_v1_get_certificate_profile_mappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_profile_id' in params:
            query_params.append(('deviceProfileID', params['device_profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/certificatemap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CertificateProfileMapModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_get_devices_for_profile_status(self, profileuuid, **kwargs):  # noqa: E501
        """New - Returns a list of devices based on the installation status for the specified profile identified by profile uuid.  # noqa: E501

        Gets a paged list of devices along with a link to the respective GET Devices version 2 endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_get_devices_for_profile_status(profileuuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profileuuid: Unique Identifier of the Profile(Required) (required)
        :param object profilestatus: Profile installation status:              * INSTALLED - Profile installed. This is the default value for profilestatus.              * NOT_INSTALLED - Profile assigned and not installed.
        :param object organizationgroupuuid: Unique Identifier of the Organization Group from which devices are to be returned based on the profile installation status
        :param int page: Page number to return, 0 based index. Default value is 0.
        :param int pagesize: Maximum number of records per page. Default value is 500.
        :return: ProfileAssignedDevicesPagedResultsV1Model_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_get_devices_for_profile_status_with_http_info(profileuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_get_devices_for_profile_status_with_http_info(profileuuid, **kwargs)  # noqa: E501
            return data

    def profiles_v1_get_devices_for_profile_status_with_http_info(self, profileuuid, **kwargs):  # noqa: E501
        """New - Returns a list of devices based on the installation status for the specified profile identified by profile uuid.  # noqa: E501

        Gets a paged list of devices along with a link to the respective GET Devices version 2 endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_get_devices_for_profile_status_with_http_info(profileuuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profileuuid: Unique Identifier of the Profile(Required) (required)
        :param object profilestatus: Profile installation status:              * INSTALLED - Profile installed. This is the default value for profilestatus.              * NOT_INSTALLED - Profile assigned and not installed.
        :param object organizationgroupuuid: Unique Identifier of the Organization Group from which devices are to be returned based on the profile installation status
        :param int page: Page number to return, 0 based index. Default value is 0.
        :param int pagesize: Maximum number of records per page. Default value is 500.
        :return: ProfileAssignedDevicesPagedResultsV1Model_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profileuuid', 'profilestatus', 'organizationgroupuuid', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_get_devices_for_profile_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profileuuid' is set
        if self.api_client.client_side_validation and ('profileuuid' not in params or
                                                       params['profileuuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profileuuid` when calling `profiles_v1_get_devices_for_profile_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profileuuid' in params:
            path_params['profileuuid'] = params['profileuuid']  # noqa: E501

        query_params = []
        if 'profilestatus' in params:
            query_params.append(('profilestatus', params['profilestatus']))  # noqa: E501
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileuuid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileAssignedDevicesPagedResultsV1Model_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_get_profile_status_counts_async(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Returns device count by profile status for the given profile uuid.  # noqa: E501

        Will return the following information for profile status count for the provided profile uuid.  1. Total assigned profile count 2. Total installed profile count 3. Total not installed profile count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_get_profile_status_counts_async(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: The uuid of the profile.              Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required). (required)
        :return: ProfileSummaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_get_profile_status_counts_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_get_profile_status_counts_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
            return data

    def profiles_v1_get_profile_status_counts_async_with_http_info(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Returns device count by profile status for the given profile uuid.  # noqa: E501

        Will return the following information for profile status count for the provided profile uuid.  1. Total assigned profile count 2. Total installed profile count 3. Total not installed profile count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_get_profile_status_counts_async_with_http_info(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: The uuid of the profile.              Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required). (required)
        :return: ProfileSummaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_get_profile_status_counts_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `profiles_v1_get_profile_status_counts_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileUuid}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileSummaryModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_get_sso_profile_status(self, **kwargs):  # noqa: E501
        """New - Gets sso profiles configuration status for android, ios and windows.  # noqa: E501

        Checks whether sso profiles are existing in system for different platforms. Note that the profiles need to have a predefined name for api to fetch the proper status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_get_sso_profile_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SsoProfileStatusV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_get_sso_profile_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_get_sso_profile_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v1_get_sso_profile_status_with_http_info(self, **kwargs):  # noqa: E501
        """New - Gets sso profiles configuration status for android, ios and windows.  # noqa: E501

        Checks whether sso profiles are existing in system for different platforms. Note that the profiles need to have a predefined name for api to fetch the proper status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_get_sso_profile_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SsoProfileStatusV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_get_sso_profile_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/sso/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SsoProfileStatusV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_honeywell_barcode(self, honeywell_barcode_model, **kwargs):  # noqa: E501
        """New - Generates a barcode to be used with Honeywell EZ Config  # noqa: E501

        It generates a barcode to be used with the EZ Config client on Honeywell Android devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_honeywell_barcode(honeywell_barcode_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HoneywellBarcodeV1Model honeywell_barcode_model: Honeywell barcode model(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_honeywell_barcode_with_http_info(honeywell_barcode_model, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_honeywell_barcode_with_http_info(honeywell_barcode_model, **kwargs)  # noqa: E501
            return data

    def profiles_v1_honeywell_barcode_with_http_info(self, honeywell_barcode_model, **kwargs):  # noqa: E501
        """New - Generates a barcode to be used with Honeywell EZ Config  # noqa: E501

        It generates a barcode to be used with the EZ Config client on Honeywell Android devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_honeywell_barcode_with_http_info(honeywell_barcode_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HoneywellBarcodeV1Model honeywell_barcode_model: Honeywell barcode model(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['honeywell_barcode_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_honeywell_barcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'honeywell_barcode_model' is set
        if self.api_client.client_side_validation and ('honeywell_barcode_model' not in params or
                                                       params['honeywell_barcode_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `honeywell_barcode_model` when calling `profiles_v1_honeywell_barcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'honeywell_barcode_model' in params:
            body_params = params['honeywell_barcode_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/honeywell/barcode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_install_profile_async(self, profileid, device_info, **kwargs):  # noqa: E501
        """New - Installs the profile on device.  # noqa: E501

        Installs the profile on the device identified by the query information provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_install_profile_async(profileid, device_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: The id of the profile to be installed.(Required). (required)
        :param DeviceInfo device_info: Device information for profile installation.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_install_profile_async_with_http_info(profileid, device_info, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_install_profile_async_with_http_info(profileid, device_info, **kwargs)  # noqa: E501
            return data

    def profiles_v1_install_profile_async_with_http_info(self, profileid, device_info, **kwargs):  # noqa: E501
        """New - Installs the profile on device.  # noqa: E501

        Installs the profile on the device identified by the query information provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_install_profile_async_with_http_info(profileid, device_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: The id of the profile to be installed.(Required). (required)
        :param DeviceInfo device_info: Device information for profile installation.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profileid', 'device_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_install_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profileid' is set
        if self.api_client.client_side_validation and ('profileid' not in params or
                                                       params['profileid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profileid` when calling `profiles_v1_install_profile_async`")  # noqa: E501
        # verify the required parameter 'device_info' is set
        if self.api_client.client_side_validation and ('device_info' not in params or
                                                       params['device_info'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_info` when calling `profiles_v1_install_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profileid' in params:
            path_params['profileid'] = params['profileid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_info' in params:
            body_params = params['device_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileid}/install', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_maintain_custom_attribute_profile_async(self, **kwargs):  # noqa: E501
        """Creates a Custom Attribute Device Profile For QNX, Windows Mobile, IOTGateway and IOT Device.  # noqa: E501

        Creates a profile with custom attribute payload.<br>The payload details include custom attribute Name, Value and its application group</br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_maintain_custom_attribute_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomAttributeProfileEntity custom_attribute_device_profile: Details of custom attribute profile.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_maintain_custom_attribute_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_maintain_custom_attribute_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v1_maintain_custom_attribute_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a Custom Attribute Device Profile For QNX, Windows Mobile, IOTGateway and IOT Device.  # noqa: E501

        Creates a profile with custom attribute payload.<br>The payload details include custom attribute Name, Value and its application group</br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_maintain_custom_attribute_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomAttributeProfileEntity custom_attribute_device_profile: Details of custom attribute profile.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_attribute_device_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_maintain_custom_attribute_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attribute_device_profile' in params:
            body_params = params['custom_attribute_device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/MaintainCustomAttributeProfile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_remove_profile_async(self, profileid, **kwargs):  # noqa: E501
        """Removes the profile from the device.  # noqa: E501

        Removes the profile from the device identified by the query information provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_remove_profile_async(profileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: Profile Id Example=12. (required)
        :param DeviceInfo device_info: Device details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_remove_profile_async_with_http_info(profileid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_remove_profile_async_with_http_info(profileid, **kwargs)  # noqa: E501
            return data

    def profiles_v1_remove_profile_async_with_http_info(self, profileid, **kwargs):  # noqa: E501
        """Removes the profile from the device.  # noqa: E501

        Removes the profile from the device identified by the query information provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_remove_profile_async_with_http_info(profileid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int profileid: Profile Id Example=12. (required)
        :param DeviceInfo device_info: Device details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profileid', 'device_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_remove_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profileid' is set
        if self.api_client.client_side_validation and ('profileid' not in params or
                                                       params['profileid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profileid` when calling `profiles_v1_remove_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profileid' in params:
            path_params['profileid'] = params['profileid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_info' in params:
            body_params = params['device_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileid}/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_save_certificate_profile_mapping(self, **kwargs):  # noqa: E501
        """New - Creates a mapping between a profile and certificate or certificate template  # noqa: E501

        v1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_save_certificate_profile_mapping(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CertificateProfileMapModel map_model: Certificate profile map model
        :return: CertificateProfileMapModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_save_certificate_profile_mapping_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_save_certificate_profile_mapping_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v1_save_certificate_profile_mapping_with_http_info(self, **kwargs):  # noqa: E501
        """New - Creates a mapping between a profile and certificate or certificate template  # noqa: E501

        v1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_save_certificate_profile_mapping_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CertificateProfileMapModel map_model: Certificate profile map model
        :return: CertificateProfileMapModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_save_certificate_profile_mapping" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'map_model' in params:
            body_params = params['map_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/certificatemap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateProfileMapModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_search(self, **kwargs):  # noqa: E501
        """Searches for all profiles applicable using the query information provided.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Assignment Type.
        :param str profilename: Profile Name.
        :param int organizationgroupid: Organization Group ID.
        :param str platform: Platform name.
        :param str status: Smart Group Identifier.
        :param str ownership: Ownership Type.
        :param datetime modifiedfrom: DateTime, Filters the result where Profile modified date is greater than or equal to modifiedfrom value.
        :param datetime modifiedtill: DateTime, Filters the result where Profile modified date is less than or equal to modifiedtill value.
        :param str orderby: Orderby parameter name.
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :param int page: Page number.
        :param int pagesize: Maximum results which should be returned in each page.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v1_search_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for all profiles applicable using the query information provided.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Assignment Type.
        :param str profilename: Profile Name.
        :param int organizationgroupid: Organization Group ID.
        :param str platform: Platform name.
        :param str status: Smart Group Identifier.
        :param str ownership: Ownership Type.
        :param datetime modifiedfrom: DateTime, Filters the result where Profile modified date is greater than or equal to modifiedfrom value.
        :param datetime modifiedtill: DateTime, Filters the result where Profile modified date is less than or equal to modifiedtill value.
        :param str orderby: Orderby parameter name.
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :param int page: Page number.
        :param int pagesize: Maximum results which should be returned in each page.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'profilename', 'organizationgroupid', 'platform', 'status', 'ownership', 'modifiedfrom', 'modifiedtill', 'orderby', 'sortorder', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'profilename' in params:
            query_params.append(('profilename', params['profilename']))  # noqa: E501
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'ownership' in params:
            query_params.append(('ownership', params['ownership']))  # noqa: E501
        if 'modifiedfrom' in params:
            query_params.append(('modifiedfrom', params['modifiedfrom']))  # noqa: E501
        if 'modifiedtill' in params:
            query_params.append(('modifiedtill', params['modifiedtill']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_stage_now_barcode(self, stage_now_barcode_model, **kwargs):  # noqa: E501
        """New - Generates a barcode to be used with Stage Now  # noqa: E501

        It generates a barcode to be used with the Stage Now client on Zebra Android devices.  Stage Now replaces the RD staging client in newer Zebra Android devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_stage_now_barcode(stage_now_barcode_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StageNowBarcodeV1Model stage_now_barcode_model: Stage now barcode model(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_stage_now_barcode_with_http_info(stage_now_barcode_model, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_stage_now_barcode_with_http_info(stage_now_barcode_model, **kwargs)  # noqa: E501
            return data

    def profiles_v1_stage_now_barcode_with_http_info(self, stage_now_barcode_model, **kwargs):  # noqa: E501
        """New - Generates a barcode to be used with Stage Now  # noqa: E501

        It generates a barcode to be used with the Stage Now client on Zebra Android devices.  Stage Now replaces the RD staging client in newer Zebra Android devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_stage_now_barcode_with_http_info(stage_now_barcode_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StageNowBarcodeV1Model stage_now_barcode_model: Stage now barcode model(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stage_now_barcode_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_stage_now_barcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stage_now_barcode_model' is set
        if self.api_client.client_side_validation and ('stage_now_barcode_model' not in params or
                                                       params['stage_now_barcode_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stage_now_barcode_model` when calling `profiles_v1_stage_now_barcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stage_now_barcode_model' in params:
            body_params = params['stage_now_barcode_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/stagenow/barcode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_update_iot_device_profile(self, device_profile, profile_id, **kwargs):  # noqa: E501
        """New - Updates an existing profile for IOT device  # noqa: E501

        Update an existing profile for IOT device with new configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_update_iot_device_profile(device_profile, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IOTDeviceDeviceProfileEntity device_profile: IOT device profile to be updated(Required) (required)
        :param int profile_id: Profile id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_update_iot_device_profile_with_http_info(device_profile, profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_update_iot_device_profile_with_http_info(device_profile, profile_id, **kwargs)  # noqa: E501
            return data

    def profiles_v1_update_iot_device_profile_with_http_info(self, device_profile, profile_id, **kwargs):  # noqa: E501
        """New - Updates an existing profile for IOT device  # noqa: E501

        Update an existing profile for IOT device with new configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_update_iot_device_profile_with_http_info(device_profile, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IOTDeviceDeviceProfileEntity device_profile: IOT device profile to be updated(Required) (required)
        :param int profile_id: Profile id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile', 'profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_update_iot_device_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_profile' is set
        if self.api_client.client_side_validation and ('device_profile' not in params or
                                                       params['device_profile'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_profile` when calling `profiles_v1_update_iot_device_profile`")  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if self.api_client.client_side_validation and ('profile_id' not in params or
                                                       params['profile_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_id` when calling `profiles_v1_update_iot_device_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/iotdevice/{profileId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_update_iot_gateway_device_profile(self, device_profile, profile_id, **kwargs):  # noqa: E501
        """New - Updates an existing profile for IOTGateway device  # noqa: E501

        Update an existing profile for IOTgateway device with new configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_update_iot_gateway_device_profile(device_profile, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IOTGatewayDeviceProfileEntity device_profile: IOTGateway device profile to be updated(Required) (required)
        :param int profile_id: Profile id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_update_iot_gateway_device_profile_with_http_info(device_profile, profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_update_iot_gateway_device_profile_with_http_info(device_profile, profile_id, **kwargs)  # noqa: E501
            return data

    def profiles_v1_update_iot_gateway_device_profile_with_http_info(self, device_profile, profile_id, **kwargs):  # noqa: E501
        """New - Updates an existing profile for IOTGateway device  # noqa: E501

        Update an existing profile for IOTgateway device with new configuration of payloads  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_update_iot_gateway_device_profile_with_http_info(device_profile, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IOTGatewayDeviceProfileEntity device_profile: IOTGateway device profile to be updated(Required) (required)
        :param int profile_id: Profile id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_profile', 'profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_update_iot_gateway_device_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_profile' is set
        if self.api_client.client_side_validation and ('device_profile' not in params or
                                                       params['device_profile'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_profile` when calling `profiles_v1_update_iot_gateway_device_profile`")  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if self.api_client.client_side_validation and ('profile_id' not in params or
                                                       params['profile_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_id` when calling `profiles_v1_update_iot_gateway_device_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_id' in params:
            path_params['profileId'] = params['profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_profile' in params:
            body_params = params['device_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/iotgateway/{profileId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_update_windows_mobile_device_profile(self, model, **kwargs):  # noqa: E501
        """New - Updates a Windows Mobile profile  # noqa: E501

        It updates an existing Windows Mobile profile payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_update_windows_mobile_device_profile(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WindowsMobileDeviceProfileEntity model: Profile payload data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_update_windows_mobile_device_profile_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_update_windows_mobile_device_profile_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def profiles_v1_update_windows_mobile_device_profile_with_http_info(self, model, **kwargs):  # noqa: E501
        """New - Updates a Windows Mobile profile  # noqa: E501

        It updates an existing Windows Mobile profile payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_update_windows_mobile_device_profile_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WindowsMobileDeviceProfileEntity model: Profile payload data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_update_windows_mobile_device_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `profiles_v1_update_windows_mobile_device_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/platforms/windowsmobile', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_upload_certificate(self, **kwargs):  # noqa: E501
        """Uploads certificate into Airwatch.  # noqa: E501

        Uploads certificate into AirWatch [Both .pfx and .cer formats].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_upload_certificate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Certificate certificate: Certificate resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_upload_certificate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_upload_certificate_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v1_upload_certificate_with_http_info(self, **kwargs):  # noqa: E501
        """Uploads certificate into Airwatch.  # noqa: E501

        Uploads certificate into AirWatch [Both .pfx and .cer formats].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_upload_certificate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Certificate certificate: Certificate resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['certificate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_upload_certificate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'certificate' in params:
            body_params = params['certificate']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/uploadcertificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v1_upload_profile_certificate(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Saves an uploaded certificate file and associates it with a profile and Organization Group  # noqa: E501

        Creates a new certificate associated with Organization Group and returns certificateID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_upload_profile_certificate(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: profile unique identifier (required)
        :return: CertificateModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v1_upload_profile_certificate_with_http_info(profile_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v1_upload_profile_certificate_with_http_info(profile_uuid, **kwargs)  # noqa: E501
            return data

    def profiles_v1_upload_profile_certificate_with_http_info(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Saves an uploaded certificate file and associates it with a profile and Organization Group  # noqa: E501

        Creates a new certificate associated with Organization Group and returns certificateID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v1_upload_profile_certificate_with_http_info(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: profile unique identifier (required)
        :return: CertificateModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v1_upload_profile_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `profiles_v1_upload_profile_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/certificate/upload/{profileUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
