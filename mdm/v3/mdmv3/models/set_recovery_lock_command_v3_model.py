# coding: utf-8

"""
    MDM API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv3.configuration import Configuration


class SetRecoveryLockCommandV3Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_password': 'str',
        'clear_password': 'bool',
        'password_policy': 'DeviceRecoveryLockPasswordPolicyV3Model'
    }

    attribute_map = {
        'current_password': 'current_password',
        'clear_password': 'clear_password',
        'password_policy': 'password_policy'
    }

    def __init__(self, current_password=None, clear_password=None, password_policy=None, _configuration=None):  # noqa: E501
        """SetRecoveryLockCommandV3Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._current_password = None
        self._clear_password = None
        self._password_policy = None
        self.discriminator = None

        if current_password is not None:
            self.current_password = current_password
        if clear_password is not None:
            self.clear_password = clear_password
        if password_policy is not None:
            self.password_policy = password_policy

    @property
    def current_password(self):
        """Gets the current_password of this SetRecoveryLockCommandV3Model.  # noqa: E501

        The current recovery lock password set on the device. If provided, will be used for issuing the command to set a new password or clear the existing password. If not provided, the last Applied Password via Workspace ONE UEM will be used.  # noqa: E501

        :return: The current_password of this SetRecoveryLockCommandV3Model.  # noqa: E501
        :rtype: str
        """
        return self._current_password

    @current_password.setter
    def current_password(self, current_password):
        """Sets the current_password of this SetRecoveryLockCommandV3Model.

        The current recovery lock password set on the device. If provided, will be used for issuing the command to set a new password or clear the existing password. If not provided, the last Applied Password via Workspace ONE UEM will be used.  # noqa: E501

        :param current_password: The current_password of this SetRecoveryLockCommandV3Model.  # noqa: E501
        :type: str
        """

        self._current_password = current_password

    @property
    def clear_password(self):
        """Gets the clear_password of this SetRecoveryLockCommandV3Model.  # noqa: E501

        If true, ignores the password policy in the request and clears the password set on the device.  # noqa: E501

        :return: The clear_password of this SetRecoveryLockCommandV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._clear_password

    @clear_password.setter
    def clear_password(self, clear_password):
        """Sets the clear_password of this SetRecoveryLockCommandV3Model.

        If true, ignores the password policy in the request and clears the password set on the device.  # noqa: E501

        :param clear_password: The clear_password of this SetRecoveryLockCommandV3Model.  # noqa: E501
        :type: bool
        """

        self._clear_password = clear_password

    @property
    def password_policy(self):
        """Gets the password_policy of this SetRecoveryLockCommandV3Model.  # noqa: E501

        Specifies the complexity of the Recovery Lock password generated and sent to the device as part of the SetRecoveryLock command. If all of include_numbers, include_letters and include_special_characters are false, then the password can contain all the characters.  # noqa: E501

        :return: The password_policy of this SetRecoveryLockCommandV3Model.  # noqa: E501
        :rtype: DeviceRecoveryLockPasswordPolicyV3Model
        """
        return self._password_policy

    @password_policy.setter
    def password_policy(self, password_policy):
        """Sets the password_policy of this SetRecoveryLockCommandV3Model.

        Specifies the complexity of the Recovery Lock password generated and sent to the device as part of the SetRecoveryLock command. If all of include_numbers, include_letters and include_special_characters are false, then the password can contain all the characters.  # noqa: E501

        :param password_policy: The password_policy of this SetRecoveryLockCommandV3Model.  # noqa: E501
        :type: DeviceRecoveryLockPasswordPolicyV3Model
        """

        self._password_policy = password_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetRecoveryLockCommandV3Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetRecoveryLockCommandV3Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetRecoveryLockCommandV3Model):
            return True

        return self.to_dict() != other.to_dict()
