# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class EnrollmentTokenGetByCriteriaDetailModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'serial_number': 'str',
        'imei': 'str',
        'enrollment_status': 'int',
        'compliance_status': 'int',
        'platform': 'int'
    }

    attribute_map = {
        'uuid': 'uuid',
        'serial_number': 'serial_number',
        'imei': 'imei',
        'enrollment_status': 'enrollment_status',
        'compliance_status': 'compliance_status',
        'platform': 'platform'
    }

    def __init__(self, uuid=None, serial_number=None, imei=None, enrollment_status=None, compliance_status=None, platform=None, _configuration=None):  # noqa: E501
        """EnrollmentTokenGetByCriteriaDetailModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uuid = None
        self._serial_number = None
        self._imei = None
        self._enrollment_status = None
        self._compliance_status = None
        self._platform = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if serial_number is not None:
            self.serial_number = serial_number
        if imei is not None:
            self.imei = imei
        if enrollment_status is not None:
            self.enrollment_status = enrollment_status
        if compliance_status is not None:
            self.compliance_status = compliance_status
        if platform is not None:
            self.platform = platform

    @property
    def uuid(self):
        """Gets the uuid of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501

        Enrollment token UUID  # noqa: E501

        :return: The uuid of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this EnrollmentTokenGetByCriteriaDetailModel.

        Enrollment token UUID  # noqa: E501

        :param uuid: The uuid of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def serial_number(self):
        """Gets the serial_number of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501

        Serial number of the device.  # noqa: E501

        :return: The serial_number of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this EnrollmentTokenGetByCriteriaDetailModel.

        Serial number of the device.  # noqa: E501

        :param serial_number: The serial_number of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def imei(self):
        """Gets the imei of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501

        Device IMEI hardware identifier.  # noqa: E501

        :return: The imei of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this EnrollmentTokenGetByCriteriaDetailModel.

        Device IMEI hardware identifier.  # noqa: E501

        :param imei: The imei of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :type: str
        """

        self._imei = imei

    @property
    def enrollment_status(self):
        """Gets the enrollment_status of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501

        Enrollment status of the device.  # noqa: E501

        :return: The enrollment_status of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_status

    @enrollment_status.setter
    def enrollment_status(self, enrollment_status):
        """Sets the enrollment_status of this EnrollmentTokenGetByCriteriaDetailModel.

        Enrollment status of the device.  # noqa: E501

        :param enrollment_status: The enrollment_status of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  # noqa: E501
        if (self._configuration.client_side_validation and
                enrollment_status not in allowed_values):
            raise ValueError(
                "Invalid value for `enrollment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(enrollment_status, allowed_values)
            )

        self._enrollment_status = enrollment_status

    @property
    def compliance_status(self):
        """Gets the compliance_status of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501

        Compliance status for the enrollment token.  # noqa: E501

        :return: The compliance_status of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        """Sets the compliance_status of this EnrollmentTokenGetByCriteriaDetailModel.

        Compliance status for the enrollment token.  # noqa: E501

        :param compliance_status: The compliance_status of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  # noqa: E501
        if (self._configuration.client_side_validation and
                compliance_status not in allowed_values):
            raise ValueError(
                "Invalid value for `compliance_status` ({0}), must be one of {1}"  # noqa: E501
                .format(compliance_status, allowed_values)
            )

        self._compliance_status = compliance_status

    @property
    def platform(self):
        """Gets the platform of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501

        Platform type of the device.  # noqa: E501

        :return: The platform of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this EnrollmentTokenGetByCriteriaDetailModel.

        Platform type of the device.  # noqa: E501

        :param platform: The platform of this EnrollmentTokenGetByCriteriaDetailModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 100, 101, 102, 103, 104, 105, 200, 201, 1000]  # noqa: E501
        if (self._configuration.client_side_validation and
                platform not in allowed_values):
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrollmentTokenGetByCriteriaDetailModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentTokenGetByCriteriaDetailModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentTokenGetByCriteriaDetailModel):
            return True

        return self.to_dict() != other.to_dict()
