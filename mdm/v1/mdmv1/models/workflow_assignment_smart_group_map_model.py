# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class WorkflowAssignmentSmartGroupMapModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'smart_group_uuids': 'list[str]',
        'assignment_uuid': 'str',
        'workflow_assignment_state': 'int',
        'deployment_mode': 'int',
        'show_in_catalog': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'smart_group_uuids': 'SmartGroupUuids',
        'assignment_uuid': 'AssignmentUuid',
        'workflow_assignment_state': 'WorkflowAssignmentState',
        'deployment_mode': 'deployment_mode',
        'show_in_catalog': 'show_in_catalog'
    }

    def __init__(self, name=None, smart_group_uuids=None, assignment_uuid=None, workflow_assignment_state=None, deployment_mode=None, show_in_catalog=None, _configuration=None):  # noqa: E501
        """WorkflowAssignmentSmartGroupMapModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._smart_group_uuids = None
        self._assignment_uuid = None
        self._workflow_assignment_state = None
        self._deployment_mode = None
        self._show_in_catalog = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if smart_group_uuids is not None:
            self.smart_group_uuids = smart_group_uuids
        if assignment_uuid is not None:
            self.assignment_uuid = assignment_uuid
        if workflow_assignment_state is not None:
            self.workflow_assignment_state = workflow_assignment_state
        if deployment_mode is not None:
            self.deployment_mode = deployment_mode
        if show_in_catalog is not None:
            self.show_in_catalog = show_in_catalog

    @property
    def name(self):
        """Gets the name of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501


        :return: The name of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowAssignmentSmartGroupMapModel.


        :param name: The name of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def smart_group_uuids(self):
        """Gets the smart_group_uuids of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501


        :return: The smart_group_uuids of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._smart_group_uuids

    @smart_group_uuids.setter
    def smart_group_uuids(self, smart_group_uuids):
        """Sets the smart_group_uuids of this WorkflowAssignmentSmartGroupMapModel.


        :param smart_group_uuids: The smart_group_uuids of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :type: list[str]
        """

        self._smart_group_uuids = smart_group_uuids

    @property
    def assignment_uuid(self):
        """Gets the assignment_uuid of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501


        :return: The assignment_uuid of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :rtype: str
        """
        return self._assignment_uuid

    @assignment_uuid.setter
    def assignment_uuid(self, assignment_uuid):
        """Sets the assignment_uuid of this WorkflowAssignmentSmartGroupMapModel.


        :param assignment_uuid: The assignment_uuid of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :type: str
        """

        self._assignment_uuid = assignment_uuid

    @property
    def workflow_assignment_state(self):
        """Gets the workflow_assignment_state of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501


        :return: The workflow_assignment_state of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :rtype: int
        """
        return self._workflow_assignment_state

    @workflow_assignment_state.setter
    def workflow_assignment_state(self, workflow_assignment_state):
        """Sets the workflow_assignment_state of this WorkflowAssignmentSmartGroupMapModel.


        :param workflow_assignment_state: The workflow_assignment_state of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6]  # noqa: E501
        if (self._configuration.client_side_validation and
                workflow_assignment_state not in allowed_values):
            raise ValueError(
                "Invalid value for `workflow_assignment_state` ({0}), must be one of {1}"  # noqa: E501
                .format(workflow_assignment_state, allowed_values)
            )

        self._workflow_assignment_state = workflow_assignment_state

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501


        :return: The deployment_mode of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :rtype: int
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this WorkflowAssignmentSmartGroupMapModel.


        :param deployment_mode: The deployment_mode of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                deployment_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    @property
    def show_in_catalog(self):
        """Gets the show_in_catalog of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501


        :return: The show_in_catalog of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_catalog

    @show_in_catalog.setter
    def show_in_catalog(self, show_in_catalog):
        """Sets the show_in_catalog of this WorkflowAssignmentSmartGroupMapModel.


        :param show_in_catalog: The show_in_catalog of this WorkflowAssignmentSmartGroupMapModel.  # noqa: E501
        :type: bool
        """

        self._show_in_catalog = show_in_catalog

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowAssignmentSmartGroupMapModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowAssignmentSmartGroupMapModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowAssignmentSmartGroupMapModel):
            return True

        return self.to_dict() != other.to_dict()
