# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv2.configuration import Configuration


class ApplicationDeploymentProfileMapV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration_type': 'str',
        'profile_category': 'str',
        'device_profile_uuid': 'str'
    }

    attribute_map = {
        'configuration_type': 'configuration_type',
        'profile_category': 'profile_category',
        'device_profile_uuid': 'device_profile_uuid'
    }

    def __init__(self, configuration_type=None, profile_category=None, device_profile_uuid=None, _configuration=None):  # noqa: E501
        """ApplicationDeploymentProfileMapV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._configuration_type = None
        self._profile_category = None
        self._device_profile_uuid = None
        self.discriminator = None

        if configuration_type is not None:
            self.configuration_type = configuration_type
        if profile_category is not None:
            self.profile_category = profile_category
        if device_profile_uuid is not None:
            self.device_profile_uuid = device_profile_uuid

    @property
    def configuration_type(self):
        """Gets the configuration_type of this ApplicationDeploymentProfileMapV1Model.  # noqa: E501

        Gets or sets configuration type.  # noqa: E501

        :return: The configuration_type of this ApplicationDeploymentProfileMapV1Model.  # noqa: E501
        :rtype: str
        """
        return self._configuration_type

    @configuration_type.setter
    def configuration_type(self, configuration_type):
        """Sets the configuration_type of this ApplicationDeploymentProfileMapV1Model.

        Gets or sets configuration type.  # noqa: E501

        :param configuration_type: The configuration_type of this ApplicationDeploymentProfileMapV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "Device", "MDM", "Application", "Custom", "AgentSettings", "SDKPolicies", "SecureBrowser", "MDMCommand", "ContentManagement", "MDMCompliance", "AppProfile", "GeoFencingArea", "SharedDevice", "AppWrappingProfile", "Printer", "Container", "PrinterFiles", "CustomEmail", "AppCatalog", "AppRestriction", "SDKPoliciesV2", "AppWrappingProfileV2", "AppLockProfile", "EnsureDeviceUnLockedProfile", "HorizonWebApp", "Windows8WebClip", "WindowsRtSCEPProfile", "WindowsPhoneSCEPProfile", "PrivacyWebClip", "AppConfigSettingsEndpoint", "AppleEducationProfile", "ShowSpecificApps", "ProfileResource", "ProfilePolicy", "PrivacyPreferences", "HidPassportServiceSettings", "MODULAR_SDK_PROFILES", "WindowsCustomSettingsToPollOnLogin"]  # noqa: E501
        if (self._configuration.client_side_validation and
                configuration_type not in allowed_values):
            raise ValueError(
                "Invalid value for `configuration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(configuration_type, allowed_values)
            )

        self._configuration_type = configuration_type

    @property
    def profile_category(self):
        """Gets the profile_category of this ApplicationDeploymentProfileMapV1Model.  # noqa: E501

        Gets or sets category.  # noqa: E501

        :return: The profile_category of this ApplicationDeploymentProfileMapV1Model.  # noqa: E501
        :rtype: str
        """
        return self._profile_category

    @profile_category.setter
    def profile_category(self, profile_category):
        """Sets the profile_category of this ApplicationDeploymentProfileMapV1Model.

        Gets or sets category.  # noqa: E501

        :param profile_category: The profile_category of this ApplicationDeploymentProfileMapV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "TIME_AWARENESS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                profile_category not in allowed_values):
            raise ValueError(
                "Invalid value for `profile_category` ({0}), must be one of {1}"  # noqa: E501
                .format(profile_category, allowed_values)
            )

        self._profile_category = profile_category

    @property
    def device_profile_uuid(self):
        """Gets the device_profile_uuid of this ApplicationDeploymentProfileMapV1Model.  # noqa: E501

        Gets or sets Device Profile Uuid.  # noqa: E501

        :return: The device_profile_uuid of this ApplicationDeploymentProfileMapV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_profile_uuid

    @device_profile_uuid.setter
    def device_profile_uuid(self, device_profile_uuid):
        """Sets the device_profile_uuid of this ApplicationDeploymentProfileMapV1Model.

        Gets or sets Device Profile Uuid.  # noqa: E501

        :param device_profile_uuid: The device_profile_uuid of this ApplicationDeploymentProfileMapV1Model.  # noqa: E501
        :type: str
        """

        self._device_profile_uuid = device_profile_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationDeploymentProfileMapV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationDeploymentProfileMapV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationDeploymentProfileMapV1Model):
            return True

        return self.to_dict() != other.to_dict()
