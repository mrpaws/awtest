# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceCountByPlatforms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'windows_mobile': 'int',
        'apple': 'int',
        'android': 'int',
        'athena': 'int',
        'motorola': 'int',
        'windows_phone': 'int',
        'windows_pc': 'int',
        'apple_os_x': 'int',
        'windows_phone8': 'int',
        'windows_rt': 'int',
        'apple_tv': 'int',
        'qnx': 'int',
        'chrome_book': 'int',
        'iot_device': 'int',
        'iot_gateway': 'int',
        'max_type_value': 'int'
    }

    attribute_map = {
        'windows_mobile': 'WindowsMobile',
        'apple': 'Apple',
        'android': 'Android',
        'athena': 'Athena',
        'motorola': 'Motorola',
        'windows_phone': 'WindowsPhone',
        'windows_pc': 'WindowsPC',
        'apple_os_x': 'AppleOsX',
        'windows_phone8': 'WindowsPhone8',
        'windows_rt': 'WindowsRT',
        'apple_tv': 'AppleTv',
        'qnx': 'QNX',
        'chrome_book': 'ChromeBook',
        'iot_device': 'IOTDevice',
        'iot_gateway': 'IOTGateway',
        'max_type_value': 'MaxTypeValue'
    }

    def __init__(self, windows_mobile=None, apple=None, android=None, athena=None, motorola=None, windows_phone=None, windows_pc=None, apple_os_x=None, windows_phone8=None, windows_rt=None, apple_tv=None, qnx=None, chrome_book=None, iot_device=None, iot_gateway=None, max_type_value=None, _configuration=None):  # noqa: E501
        """DeviceCountByPlatforms - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._windows_mobile = None
        self._apple = None
        self._android = None
        self._athena = None
        self._motorola = None
        self._windows_phone = None
        self._windows_pc = None
        self._apple_os_x = None
        self._windows_phone8 = None
        self._windows_rt = None
        self._apple_tv = None
        self._qnx = None
        self._chrome_book = None
        self._iot_device = None
        self._iot_gateway = None
        self._max_type_value = None
        self.discriminator = None

        if windows_mobile is not None:
            self.windows_mobile = windows_mobile
        if apple is not None:
            self.apple = apple
        if android is not None:
            self.android = android
        if athena is not None:
            self.athena = athena
        if motorola is not None:
            self.motorola = motorola
        if windows_phone is not None:
            self.windows_phone = windows_phone
        if windows_pc is not None:
            self.windows_pc = windows_pc
        if apple_os_x is not None:
            self.apple_os_x = apple_os_x
        if windows_phone8 is not None:
            self.windows_phone8 = windows_phone8
        if windows_rt is not None:
            self.windows_rt = windows_rt
        if apple_tv is not None:
            self.apple_tv = apple_tv
        if qnx is not None:
            self.qnx = qnx
        if chrome_book is not None:
            self.chrome_book = chrome_book
        if iot_device is not None:
            self.iot_device = iot_device
        if iot_gateway is not None:
            self.iot_gateway = iot_gateway
        if max_type_value is not None:
            self.max_type_value = max_type_value

    @property
    def windows_mobile(self):
        """Gets the windows_mobile of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of WindowsMobile Devices.  # noqa: E501

        :return: The windows_mobile of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._windows_mobile

    @windows_mobile.setter
    def windows_mobile(self, windows_mobile):
        """Sets the windows_mobile of this DeviceCountByPlatforms.

        Gets or sets no. of WindowsMobile Devices.  # noqa: E501

        :param windows_mobile: The windows_mobile of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._windows_mobile = windows_mobile

    @property
    def apple(self):
        """Gets the apple of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of Apple Devices.  # noqa: E501

        :return: The apple of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._apple

    @apple.setter
    def apple(self, apple):
        """Sets the apple of this DeviceCountByPlatforms.

        Gets or sets no. of Apple Devices.  # noqa: E501

        :param apple: The apple of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._apple = apple

    @property
    def android(self):
        """Gets the android of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of Android Devices.  # noqa: E501

        :return: The android of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._android

    @android.setter
    def android(self, android):
        """Sets the android of this DeviceCountByPlatforms.

        Gets or sets no. of Android Devices.  # noqa: E501

        :param android: The android of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._android = android

    @property
    def athena(self):
        """Gets the athena of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of Athena Devices.  # noqa: E501

        :return: The athena of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._athena

    @athena.setter
    def athena(self, athena):
        """Sets the athena of this DeviceCountByPlatforms.

        Gets or sets no. of Athena Devices.  # noqa: E501

        :param athena: The athena of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._athena = athena

    @property
    def motorola(self):
        """Gets the motorola of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of Motorola Devices.  # noqa: E501

        :return: The motorola of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._motorola

    @motorola.setter
    def motorola(self, motorola):
        """Sets the motorola of this DeviceCountByPlatforms.

        Gets or sets no. of Motorola Devices.  # noqa: E501

        :param motorola: The motorola of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._motorola = motorola

    @property
    def windows_phone(self):
        """Gets the windows_phone of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of WindowsPhone Devices.  # noqa: E501

        :return: The windows_phone of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._windows_phone

    @windows_phone.setter
    def windows_phone(self, windows_phone):
        """Sets the windows_phone of this DeviceCountByPlatforms.

        Gets or sets no. of WindowsPhone Devices.  # noqa: E501

        :param windows_phone: The windows_phone of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._windows_phone = windows_phone

    @property
    def windows_pc(self):
        """Gets the windows_pc of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of WindowsPC Devices.  # noqa: E501

        :return: The windows_pc of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._windows_pc

    @windows_pc.setter
    def windows_pc(self, windows_pc):
        """Sets the windows_pc of this DeviceCountByPlatforms.

        Gets or sets no. of WindowsPC Devices.  # noqa: E501

        :param windows_pc: The windows_pc of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._windows_pc = windows_pc

    @property
    def apple_os_x(self):
        """Gets the apple_os_x of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of AppleOsX Devices.  # noqa: E501

        :return: The apple_os_x of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._apple_os_x

    @apple_os_x.setter
    def apple_os_x(self, apple_os_x):
        """Sets the apple_os_x of this DeviceCountByPlatforms.

        Gets or sets no. of AppleOsX Devices.  # noqa: E501

        :param apple_os_x: The apple_os_x of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._apple_os_x = apple_os_x

    @property
    def windows_phone8(self):
        """Gets the windows_phone8 of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of WindowsPhone8 Devices.  # noqa: E501

        :return: The windows_phone8 of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._windows_phone8

    @windows_phone8.setter
    def windows_phone8(self, windows_phone8):
        """Sets the windows_phone8 of this DeviceCountByPlatforms.

        Gets or sets no. of WindowsPhone8 Devices.  # noqa: E501

        :param windows_phone8: The windows_phone8 of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._windows_phone8 = windows_phone8

    @property
    def windows_rt(self):
        """Gets the windows_rt of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of WindowsRT Devices.  # noqa: E501

        :return: The windows_rt of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._windows_rt

    @windows_rt.setter
    def windows_rt(self, windows_rt):
        """Sets the windows_rt of this DeviceCountByPlatforms.

        Gets or sets no. of WindowsRT Devices.  # noqa: E501

        :param windows_rt: The windows_rt of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._windows_rt = windows_rt

    @property
    def apple_tv(self):
        """Gets the apple_tv of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of AppleTv Devices.  # noqa: E501

        :return: The apple_tv of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._apple_tv

    @apple_tv.setter
    def apple_tv(self, apple_tv):
        """Sets the apple_tv of this DeviceCountByPlatforms.

        Gets or sets no. of AppleTv Devices.  # noqa: E501

        :param apple_tv: The apple_tv of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._apple_tv = apple_tv

    @property
    def qnx(self):
        """Gets the qnx of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of QNX Devices.  # noqa: E501

        :return: The qnx of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._qnx

    @qnx.setter
    def qnx(self, qnx):
        """Sets the qnx of this DeviceCountByPlatforms.

        Gets or sets no. of QNX Devices.  # noqa: E501

        :param qnx: The qnx of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._qnx = qnx

    @property
    def chrome_book(self):
        """Gets the chrome_book of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of ChromeBook Devices.  # noqa: E501

        :return: The chrome_book of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._chrome_book

    @chrome_book.setter
    def chrome_book(self, chrome_book):
        """Sets the chrome_book of this DeviceCountByPlatforms.

        Gets or sets no. of ChromeBook Devices.  # noqa: E501

        :param chrome_book: The chrome_book of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._chrome_book = chrome_book

    @property
    def iot_device(self):
        """Gets the iot_device of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of IOTDevice Devices.  # noqa: E501

        :return: The iot_device of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._iot_device

    @iot_device.setter
    def iot_device(self, iot_device):
        """Sets the iot_device of this DeviceCountByPlatforms.

        Gets or sets no. of IOTDevice Devices.  # noqa: E501

        :param iot_device: The iot_device of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._iot_device = iot_device

    @property
    def iot_gateway(self):
        """Gets the iot_gateway of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of IOTGateway Devices.  # noqa: E501

        :return: The iot_gateway of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._iot_gateway

    @iot_gateway.setter
    def iot_gateway(self, iot_gateway):
        """Sets the iot_gateway of this DeviceCountByPlatforms.

        Gets or sets no. of IOTGateway Devices.  # noqa: E501

        :param iot_gateway: The iot_gateway of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._iot_gateway = iot_gateway

    @property
    def max_type_value(self):
        """Gets the max_type_value of this DeviceCountByPlatforms.  # noqa: E501

        Gets or sets no. of MaxTypeValue Devices.  # noqa: E501

        :return: The max_type_value of this DeviceCountByPlatforms.  # noqa: E501
        :rtype: int
        """
        return self._max_type_value

    @max_type_value.setter
    def max_type_value(self, max_type_value):
        """Sets the max_type_value of this DeviceCountByPlatforms.

        Gets or sets no. of MaxTypeValue Devices.  # noqa: E501

        :param max_type_value: The max_type_value of this DeviceCountByPlatforms.  # noqa: E501
        :type: int
        """

        self._max_type_value = max_type_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCountByPlatforms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCountByPlatforms):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCountByPlatforms):
            return True

        return self.to_dict() != other.to_dict()
