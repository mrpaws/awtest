# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class SecurityInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'compromised_status': 'str',
        'encryption_status': 'str',
        'passcode_status': 'str',
        'passcode_compliance_status': 'str',
        'passcode_lock_grace_period': 'int',
        'passcode_lock_grace_period_enforced': 'int'
    }

    attribute_map = {
        'device_id': 'DeviceId',
        'compromised_status': 'CompromisedStatus',
        'encryption_status': 'EncryptionStatus',
        'passcode_status': 'PasscodeStatus',
        'passcode_compliance_status': 'PasscodeComplianceStatus',
        'passcode_lock_grace_period': 'PasscodeLockGracePeriod',
        'passcode_lock_grace_period_enforced': 'PasscodeLockGracePeriodEnforced'
    }

    def __init__(self, device_id=None, compromised_status=None, encryption_status=None, passcode_status=None, passcode_compliance_status=None, passcode_lock_grace_period=None, passcode_lock_grace_period_enforced=None, _configuration=None):  # noqa: E501
        """SecurityInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_id = None
        self._compromised_status = None
        self._encryption_status = None
        self._passcode_status = None
        self._passcode_compliance_status = None
        self._passcode_lock_grace_period = None
        self._passcode_lock_grace_period_enforced = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if compromised_status is not None:
            self.compromised_status = compromised_status
        if encryption_status is not None:
            self.encryption_status = encryption_status
        if passcode_status is not None:
            self.passcode_status = passcode_status
        if passcode_compliance_status is not None:
            self.passcode_compliance_status = passcode_compliance_status
        if passcode_lock_grace_period is not None:
            self.passcode_lock_grace_period = passcode_lock_grace_period
        if passcode_lock_grace_period_enforced is not None:
            self.passcode_lock_grace_period_enforced = passcode_lock_grace_period_enforced

    @property
    def device_id(self):
        """Gets the device_id of this SecurityInfo.  # noqa: E501

        Gets or sets device Identifier.  # noqa: E501

        :return: The device_id of this SecurityInfo.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this SecurityInfo.

        Gets or sets device Identifier.  # noqa: E501

        :param device_id: The device_id of this SecurityInfo.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def compromised_status(self):
        """Gets the compromised_status of this SecurityInfo.  # noqa: E501

        Gets or sets device CompromisedStatus.  # noqa: E501

        :return: The compromised_status of this SecurityInfo.  # noqa: E501
        :rtype: str
        """
        return self._compromised_status

    @compromised_status.setter
    def compromised_status(self, compromised_status):
        """Sets the compromised_status of this SecurityInfo.

        Gets or sets device CompromisedStatus.  # noqa: E501

        :param compromised_status: The compromised_status of this SecurityInfo.  # noqa: E501
        :type: str
        """

        self._compromised_status = compromised_status

    @property
    def encryption_status(self):
        """Gets the encryption_status of this SecurityInfo.  # noqa: E501

        Gets or sets device EncryptionStatus.  # noqa: E501

        :return: The encryption_status of this SecurityInfo.  # noqa: E501
        :rtype: str
        """
        return self._encryption_status

    @encryption_status.setter
    def encryption_status(self, encryption_status):
        """Sets the encryption_status of this SecurityInfo.

        Gets or sets device EncryptionStatus.  # noqa: E501

        :param encryption_status: The encryption_status of this SecurityInfo.  # noqa: E501
        :type: str
        """

        self._encryption_status = encryption_status

    @property
    def passcode_status(self):
        """Gets the passcode_status of this SecurityInfo.  # noqa: E501

        Gets or sets device PasscodeStatus.  # noqa: E501

        :return: The passcode_status of this SecurityInfo.  # noqa: E501
        :rtype: str
        """
        return self._passcode_status

    @passcode_status.setter
    def passcode_status(self, passcode_status):
        """Sets the passcode_status of this SecurityInfo.

        Gets or sets device PasscodeStatus.  # noqa: E501

        :param passcode_status: The passcode_status of this SecurityInfo.  # noqa: E501
        :type: str
        """

        self._passcode_status = passcode_status

    @property
    def passcode_compliance_status(self):
        """Gets the passcode_compliance_status of this SecurityInfo.  # noqa: E501

        Gets or sets device PasscodeComplianceStatus.  # noqa: E501

        :return: The passcode_compliance_status of this SecurityInfo.  # noqa: E501
        :rtype: str
        """
        return self._passcode_compliance_status

    @passcode_compliance_status.setter
    def passcode_compliance_status(self, passcode_compliance_status):
        """Sets the passcode_compliance_status of this SecurityInfo.

        Gets or sets device PasscodeComplianceStatus.  # noqa: E501

        :param passcode_compliance_status: The passcode_compliance_status of this SecurityInfo.  # noqa: E501
        :type: str
        """

        self._passcode_compliance_status = passcode_compliance_status

    @property
    def passcode_lock_grace_period(self):
        """Gets the passcode_lock_grace_period of this SecurityInfo.  # noqa: E501

        Gets or sets passcode lock grace period.  # noqa: E501

        :return: The passcode_lock_grace_period of this SecurityInfo.  # noqa: E501
        :rtype: int
        """
        return self._passcode_lock_grace_period

    @passcode_lock_grace_period.setter
    def passcode_lock_grace_period(self, passcode_lock_grace_period):
        """Sets the passcode_lock_grace_period of this SecurityInfo.

        Gets or sets passcode lock grace period.  # noqa: E501

        :param passcode_lock_grace_period: The passcode_lock_grace_period of this SecurityInfo.  # noqa: E501
        :type: int
        """

        self._passcode_lock_grace_period = passcode_lock_grace_period

    @property
    def passcode_lock_grace_period_enforced(self):
        """Gets the passcode_lock_grace_period_enforced of this SecurityInfo.  # noqa: E501

        Gets or sets enforced passcode lock grace period.  # noqa: E501

        :return: The passcode_lock_grace_period_enforced of this SecurityInfo.  # noqa: E501
        :rtype: int
        """
        return self._passcode_lock_grace_period_enforced

    @passcode_lock_grace_period_enforced.setter
    def passcode_lock_grace_period_enforced(self, passcode_lock_grace_period_enforced):
        """Sets the passcode_lock_grace_period_enforced of this SecurityInfo.

        Gets or sets enforced passcode lock grace period.  # noqa: E501

        :param passcode_lock_grace_period_enforced: The passcode_lock_grace_period_enforced of this SecurityInfo.  # noqa: E501
        :type: int
        """

        self._passcode_lock_grace_period_enforced = passcode_lock_grace_period_enforced

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecurityInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SecurityInfo):
            return True

        return self.to_dict() != other.to_dict()
