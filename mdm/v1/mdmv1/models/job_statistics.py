# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class JobStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_product_job_id': 'int',
        'last_download_date': 'str',
        'download_duration': 'str',
        'last_install_date': 'str',
        'last_job_status': 'str'
    }

    attribute_map = {
        'device_product_job_id': 'DeviceProductJobId',
        'last_download_date': 'LastDownloadDate',
        'download_duration': 'DownloadDuration',
        'last_install_date': 'LastInstallDate',
        'last_job_status': 'LastJobStatus'
    }

    def __init__(self, device_product_job_id=None, last_download_date=None, download_duration=None, last_install_date=None, last_job_status=None, _configuration=None):  # noqa: E501
        """JobStatistics - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_product_job_id = None
        self._last_download_date = None
        self._download_duration = None
        self._last_install_date = None
        self._last_job_status = None
        self.discriminator = None

        if device_product_job_id is not None:
            self.device_product_job_id = device_product_job_id
        if last_download_date is not None:
            self.last_download_date = last_download_date
        if download_duration is not None:
            self.download_duration = download_duration
        if last_install_date is not None:
            self.last_install_date = last_install_date
        if last_job_status is not None:
            self.last_job_status = last_job_status

    @property
    def device_product_job_id(self):
        """Gets the device_product_job_id of this JobStatistics.  # noqa: E501

        Gets or sets device Product Job Identifier.  # noqa: E501

        :return: The device_product_job_id of this JobStatistics.  # noqa: E501
        :rtype: int
        """
        return self._device_product_job_id

    @device_product_job_id.setter
    def device_product_job_id(self, device_product_job_id):
        """Sets the device_product_job_id of this JobStatistics.

        Gets or sets device Product Job Identifier.  # noqa: E501

        :param device_product_job_id: The device_product_job_id of this JobStatistics.  # noqa: E501
        :type: int
        """

        self._device_product_job_id = device_product_job_id

    @property
    def last_download_date(self):
        """Gets the last_download_date of this JobStatistics.  # noqa: E501

        Gets or sets last Download Date.  # noqa: E501

        :return: The last_download_date of this JobStatistics.  # noqa: E501
        :rtype: str
        """
        return self._last_download_date

    @last_download_date.setter
    def last_download_date(self, last_download_date):
        """Sets the last_download_date of this JobStatistics.

        Gets or sets last Download Date.  # noqa: E501

        :param last_download_date: The last_download_date of this JobStatistics.  # noqa: E501
        :type: str
        """

        self._last_download_date = last_download_date

    @property
    def download_duration(self):
        """Gets the download_duration of this JobStatistics.  # noqa: E501

        Gets or sets download Duration.  # noqa: E501

        :return: The download_duration of this JobStatistics.  # noqa: E501
        :rtype: str
        """
        return self._download_duration

    @download_duration.setter
    def download_duration(self, download_duration):
        """Sets the download_duration of this JobStatistics.

        Gets or sets download Duration.  # noqa: E501

        :param download_duration: The download_duration of this JobStatistics.  # noqa: E501
        :type: str
        """

        self._download_duration = download_duration

    @property
    def last_install_date(self):
        """Gets the last_install_date of this JobStatistics.  # noqa: E501

        Gets or sets last Install Date.  # noqa: E501

        :return: The last_install_date of this JobStatistics.  # noqa: E501
        :rtype: str
        """
        return self._last_install_date

    @last_install_date.setter
    def last_install_date(self, last_install_date):
        """Sets the last_install_date of this JobStatistics.

        Gets or sets last Install Date.  # noqa: E501

        :param last_install_date: The last_install_date of this JobStatistics.  # noqa: E501
        :type: str
        """

        self._last_install_date = last_install_date

    @property
    def last_job_status(self):
        """Gets the last_job_status of this JobStatistics.  # noqa: E501

        Gets or sets status of the last job.  # noqa: E501

        :return: The last_job_status of this JobStatistics.  # noqa: E501
        :rtype: str
        """
        return self._last_job_status

    @last_job_status.setter
    def last_job_status(self, last_job_status):
        """Sets the last_job_status of this JobStatistics.

        Gets or sets status of the last job.  # noqa: E501

        :param last_job_status: The last_job_status of this JobStatistics.  # noqa: E501
        :type: str
        """

        self._last_job_status = last_job_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobStatistics):
            return True

        return self.to_dict() != other.to_dict()
