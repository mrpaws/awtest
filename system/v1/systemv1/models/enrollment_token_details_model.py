# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class EnrollmentTokenDetailsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_group': 'str',
        'username': 'str',
        'friendly_name': 'str',
        'asset_number': 'str',
        'token': 'str',
        'serial_number': 'str',
        'enrollment_status_id': 'str',
        'compliance_status_id': 'str',
        'custom_attributes': 'list[CustomAttributeNameValueApplicationModel_]',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'organization_group': 'OrganizationGroup',
        'username': 'Username',
        'friendly_name': 'FriendlyName',
        'asset_number': 'AssetNumber',
        'token': 'Token',
        'serial_number': 'SerialNumber',
        'enrollment_status_id': 'EnrollmentStatusID',
        'compliance_status_id': 'ComplianceStatusID',
        'custom_attributes': 'CustomAttributes',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, organization_group=None, username=None, friendly_name=None, asset_number=None, token=None, serial_number=None, enrollment_status_id=None, compliance_status_id=None, custom_attributes=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """EnrollmentTokenDetailsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._organization_group = None
        self._username = None
        self._friendly_name = None
        self._asset_number = None
        self._token = None
        self._serial_number = None
        self._enrollment_status_id = None
        self._compliance_status_id = None
        self._custom_attributes = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if organization_group is not None:
            self.organization_group = organization_group
        if username is not None:
            self.username = username
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if asset_number is not None:
            self.asset_number = asset_number
        if token is not None:
            self.token = token
        if serial_number is not None:
            self.serial_number = serial_number
        if enrollment_status_id is not None:
            self.enrollment_status_id = enrollment_status_id
        if compliance_status_id is not None:
            self.compliance_status_id = compliance_status_id
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def organization_group(self):
        """Gets the organization_group of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets organization Group Name where Current Enrollment Token is valid.  # noqa: E501

        :return: The organization_group of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: str
        """
        return self._organization_group

    @organization_group.setter
    def organization_group(self, organization_group):
        """Sets the organization_group of this EnrollmentTokenDetailsModel.

        Gets or sets organization Group Name where Current Enrollment Token is valid.  # noqa: E501

        :param organization_group: The organization_group of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: str
        """

        self._organization_group = organization_group

    @property
    def username(self):
        """Gets the username of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets enrollment User Name for whom current Enrollment Token is generated.  # noqa: E501

        :return: The username of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EnrollmentTokenDetailsModel.

        Gets or sets enrollment User Name for whom current Enrollment Token is generated.  # noqa: E501

        :param username: The username of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def friendly_name(self):
        """Gets the friendly_name of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets friendly Name of the Device, which will be enrolled using the current Enrollment Token.  # noqa: E501

        :return: The friendly_name of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this EnrollmentTokenDetailsModel.

        Gets or sets friendly Name of the Device, which will be enrolled using the current Enrollment Token.  # noqa: E501

        :param friendly_name: The friendly_name of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def asset_number(self):
        """Gets the asset_number of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets asset Number of the Device, which will be enrolled using the current Enrollment Token.  # noqa: E501

        :return: The asset_number of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this EnrollmentTokenDetailsModel.

        Gets or sets asset Number of the Device, which will be enrolled using the current Enrollment Token.  # noqa: E501

        :param asset_number: The asset_number of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: str
        """

        self._asset_number = asset_number

    @property
    def token(self):
        """Gets the token of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets enrollment Token.  # noqa: E501

        :return: The token of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this EnrollmentTokenDetailsModel.

        Gets or sets enrollment Token.  # noqa: E501

        :param token: The token of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def serial_number(self):
        """Gets the serial_number of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets serial Number of the device, which will be enrolled using the current Enrollment Token.  # noqa: E501

        :return: The serial_number of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this EnrollmentTokenDetailsModel.

        Gets or sets serial Number of the device, which will be enrolled using the current Enrollment Token.  # noqa: E501

        :param serial_number: The serial_number of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def enrollment_status_id(self):
        """Gets the enrollment_status_id of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets enrollment Status Id.  # noqa: E501

        :return: The enrollment_status_id of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_status_id

    @enrollment_status_id.setter
    def enrollment_status_id(self, enrollment_status_id):
        """Sets the enrollment_status_id of this EnrollmentTokenDetailsModel.

        Gets or sets enrollment Status Id.  # noqa: E501

        :param enrollment_status_id: The enrollment_status_id of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: str
        """

        self._enrollment_status_id = enrollment_status_id

    @property
    def compliance_status_id(self):
        """Gets the compliance_status_id of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets compliance Status Id.  # noqa: E501

        :return: The compliance_status_id of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: str
        """
        return self._compliance_status_id

    @compliance_status_id.setter
    def compliance_status_id(self, compliance_status_id):
        """Sets the compliance_status_id of this EnrollmentTokenDetailsModel.

        Gets or sets compliance Status Id.  # noqa: E501

        :param compliance_status_id: The compliance_status_id of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: str
        """

        self._compliance_status_id = compliance_status_id

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets list of Custom Attributes mapped to the Enrollment Token.  # noqa: E501

        :return: The custom_attributes of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: list[CustomAttributeNameValueApplicationModel_]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this EnrollmentTokenDetailsModel.

        Gets or sets list of Custom Attributes mapped to the Enrollment Token.  # noqa: E501

        :param custom_attributes: The custom_attributes of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: list[CustomAttributeNameValueApplicationModel_]
        """

        self._custom_attributes = custom_attributes

    @property
    def id(self):
        """Gets the id of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnrollmentTokenDetailsModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this EnrollmentTokenDetailsModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this EnrollmentTokenDetailsModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this EnrollmentTokenDetailsModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this EnrollmentTokenDetailsModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrollmentTokenDetailsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentTokenDetailsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentTokenDetailsModel):
            return True

        return self.to_dict() != other.to_dict()
