# coding: utf-8

"""
    MDM API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv3.configuration import Configuration


class ProfileSearchRequestV3Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_group_uuid': 'str',
        'platform': 'int',
        'configuration_types': 'list[int]',
        'status': 'str',
        'payloads': 'list[str]',
        'search_text': 'str',
        'context': 'int',
        'exclude_child_organization_group': 'bool',
        'exclude_compliance_profile': 'bool',
        'exclude_interactive_profile': 'bool',
        'page_size': 'int',
        'page_number': 'int',
        'sort_by': 'str',
        'sort_order': 'str'
    }

    attribute_map = {
        'organization_group_uuid': 'organization_group_uuid',
        'platform': 'platform',
        'configuration_types': 'configuration_types',
        'status': 'status',
        'payloads': 'payloads',
        'search_text': 'search_text',
        'context': 'context',
        'exclude_child_organization_group': 'exclude_child_organization_group',
        'exclude_compliance_profile': 'exclude_compliance_profile',
        'exclude_interactive_profile': 'exclude_interactive_profile',
        'page_size': 'page_size',
        'page_number': 'page_number',
        'sort_by': 'sort_by',
        'sort_order': 'sort_order'
    }

    def __init__(self, organization_group_uuid=None, platform=None, configuration_types=None, status=None, payloads=None, search_text=None, context=None, exclude_child_organization_group=None, exclude_compliance_profile=None, exclude_interactive_profile=None, page_size=None, page_number=None, sort_by=None, sort_order=None, _configuration=None):  # noqa: E501
        """ProfileSearchRequestV3Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._organization_group_uuid = None
        self._platform = None
        self._configuration_types = None
        self._status = None
        self._payloads = None
        self._search_text = None
        self._context = None
        self._exclude_child_organization_group = None
        self._exclude_compliance_profile = None
        self._exclude_interactive_profile = None
        self._page_size = None
        self._page_number = None
        self._sort_by = None
        self._sort_order = None
        self.discriminator = None

        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if platform is not None:
            self.platform = platform
        if configuration_types is not None:
            self.configuration_types = configuration_types
        if status is not None:
            self.status = status
        if payloads is not None:
            self.payloads = payloads
        if search_text is not None:
            self.search_text = search_text
        if context is not None:
            self.context = context
        if exclude_child_organization_group is not None:
            self.exclude_child_organization_group = exclude_child_organization_group
        if exclude_compliance_profile is not None:
            self.exclude_compliance_profile = exclude_compliance_profile
        if exclude_interactive_profile is not None:
            self.exclude_interactive_profile = exclude_interactive_profile
        if page_size is not None:
            self.page_size = page_size
        if page_number is not None:
            self.page_number = page_number
        if sort_by is not None:
            self.sort_by = sort_by
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this ProfileSearchRequestV3Model.  # noqa: E501

        Organization group uuid based on which we will search the profiles. If not provided it will search based on Admin Organization group.  # noqa: E501

        :return: The organization_group_uuid of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this ProfileSearchRequestV3Model.

        Organization group uuid based on which we will search the profiles. If not provided it will search based on Admin Organization group.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def platform(self):
        """Gets the platform of this ProfileSearchRequestV3Model.  # noqa: E501

        Filter based on the platform.  # noqa: E501

        :return: The platform of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ProfileSearchRequestV3Model.

        Filter based on the platform.  # noqa: E501

        :param platform: The platform of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 2, 5, 10, 11, 12, 14, 100]  # noqa: E501
        if (self._configuration.client_side_validation and
                platform not in allowed_values):
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def configuration_types(self):
        """Gets the configuration_types of this ProfileSearchRequestV3Model.  # noqa: E501

        Profile configuration type, default value DEVICE.  # noqa: E501

        :return: The configuration_types of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: list[int]
        """
        return self._configuration_types

    @configuration_types.setter
    def configuration_types(self, configuration_types):
        """Sets the configuration_types of this ProfileSearchRequestV3Model.

        Profile configuration type, default value DEVICE.  # noqa: E501

        :param configuration_types: The configuration_types of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [0, 1, 35]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(configuration_types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `configuration_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(configuration_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._configuration_types = configuration_types

    @property
    def status(self):
        """Gets the status of this ProfileSearchRequestV3Model.  # noqa: E501

        Profile status, default value ACTIVE, supported value ACTIVE, INACTIVE..  # noqa: E501

        :return: The status of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProfileSearchRequestV3Model.

        Profile status, default value ACTIVE, supported value ACTIVE, INACTIVE..  # noqa: E501

        :param status: The status of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def payloads(self):
        """Gets the payloads of this ProfileSearchRequestV3Model.  # noqa: E501

        Payload based on we will search the profile where payload has been configured.  Search is performed based on payload names for all platforms, however search will be performed on basis of GlobalizationKey as well for macOS platform.  # noqa: E501

        :return: The payloads of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._payloads

    @payloads.setter
    def payloads(self, payloads):
        """Sets the payloads of this ProfileSearchRequestV3Model.

        Payload based on we will search the profile where payload has been configured.  Search is performed based on payload names for all platforms, however search will be performed on basis of GlobalizationKey as well for macOS platform.  # noqa: E501

        :param payloads: The payloads of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: list[str]
        """

        self._payloads = payloads

    @property
    def search_text(self):
        """Gets the search_text of this ProfileSearchRequestV3Model.  # noqa: E501

        Search text based on profile name.  # noqa: E501

        :return: The search_text of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this ProfileSearchRequestV3Model.

        Search text based on profile name.  # noqa: E501

        :param search_text: The search_text of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def context(self):
        """Gets the context of this ProfileSearchRequestV3Model.  # noqa: E501

        Profile context.  # noqa: E501

        :return: The context of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: int
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ProfileSearchRequestV3Model.

        Profile context.  # noqa: E501

        :param context: The context of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if (self._configuration.client_side_validation and
                context not in allowed_values):
            raise ValueError(
                "Invalid value for `context` ({0}), must be one of {1}"  # noqa: E501
                .format(context, allowed_values)
            )

        self._context = context

    @property
    def exclude_child_organization_group(self):
        """Gets the exclude_child_organization_group of this ProfileSearchRequestV3Model.  # noqa: E501

        Exclude the child OG profile.  # noqa: E501

        :return: The exclude_child_organization_group of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_child_organization_group

    @exclude_child_organization_group.setter
    def exclude_child_organization_group(self, exclude_child_organization_group):
        """Sets the exclude_child_organization_group of this ProfileSearchRequestV3Model.

        Exclude the child OG profile.  # noqa: E501

        :param exclude_child_organization_group: The exclude_child_organization_group of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: bool
        """

        self._exclude_child_organization_group = exclude_child_organization_group

    @property
    def exclude_compliance_profile(self):
        """Gets the exclude_compliance_profile of this ProfileSearchRequestV3Model.  # noqa: E501

        Exclude the compliance profile.  # noqa: E501

        :return: The exclude_compliance_profile of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_compliance_profile

    @exclude_compliance_profile.setter
    def exclude_compliance_profile(self, exclude_compliance_profile):
        """Sets the exclude_compliance_profile of this ProfileSearchRequestV3Model.

        Exclude the compliance profile.  # noqa: E501

        :param exclude_compliance_profile: The exclude_compliance_profile of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: bool
        """

        self._exclude_compliance_profile = exclude_compliance_profile

    @property
    def exclude_interactive_profile(self):
        """Gets the exclude_interactive_profile of this ProfileSearchRequestV3Model.  # noqa: E501

        Exclude the compliance profile.  # noqa: E501

        :return: The exclude_interactive_profile of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_interactive_profile

    @exclude_interactive_profile.setter
    def exclude_interactive_profile(self, exclude_interactive_profile):
        """Sets the exclude_interactive_profile of this ProfileSearchRequestV3Model.

        Exclude the compliance profile.  # noqa: E501

        :param exclude_interactive_profile: The exclude_interactive_profile of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: bool
        """

        self._exclude_interactive_profile = exclude_interactive_profile

    @property
    def page_size(self):
        """Gets the page_size of this ProfileSearchRequestV3Model.  # noqa: E501

        Page size of search result. Default value 20, and maximum value 50.  # noqa: E501

        :return: The page_size of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ProfileSearchRequestV3Model.

        Page size of search result. Default value 20, and maximum value 50.  # noqa: E501

        :param page_size: The page_size of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_number(self):
        """Gets the page_number of this ProfileSearchRequestV3Model.  # noqa: E501

        Page number of search result.  # noqa: E501

        :return: The page_number of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ProfileSearchRequestV3Model.

        Page number of search result.  # noqa: E501

        :param page_number: The page_number of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def sort_by(self):
        """Gets the sort_by of this ProfileSearchRequestV3Model.  # noqa: E501

        Sort by column, currently supported profile name and ModifiedOn.  # noqa: E501

        :return: The sort_by of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ProfileSearchRequestV3Model.

        Sort by column, currently supported profile name and ModifiedOn.  # noqa: E501

        :param sort_by: The sort_by of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: str
        """

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this ProfileSearchRequestV3Model.  # noqa: E501

        Sort order, Currenty suppored ASC and DESC, default value ASC.  # noqa: E501

        :return: The sort_order of this ProfileSearchRequestV3Model.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ProfileSearchRequestV3Model.

        Sort order, Currenty suppored ASC and DESC, default value ASC.  # noqa: E501

        :param sort_order: The sort_order of this ProfileSearchRequestV3Model.  # noqa: E501
        :type: str
        """

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileSearchRequestV3Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileSearchRequestV3Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProfileSearchRequestV3Model):
            return True

        return self.to_dict() != other.to_dict()
