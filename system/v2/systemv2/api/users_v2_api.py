# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv2.api_client import ApiClient


class UsersV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def users_v2_create(self, user, **kwargs):  # noqa: E501
        """New - Create an enrollment user  # noqa: E501

        Create an enrollment user with attributes including externalId, userName, password, firstName, lastName, displayName, userPrincipalName, emailAddress, phoneNumber, mobileNumber, messageType, messageTemplateUuid, enrollmentRoleUuid, status, securityType, deviceStagingEnabled, deviceStagingType, organizationGroupUuid, enrollmentOrganizationGroupUuid, aadMappingAttribute, department, employeeIdentifier, costCenter, customAttribute1, customAttribute2, customAttribute3, customAttribute4 and customAttribute5. &lt;br/&gt;&lt;br/&gt;UsersV2 API support syncing of users into the Workspace ONE Access from Workspace ONE UEM.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_v2_create(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateEnrollmentUserV2Model user: Enrollment user attributes(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_v2_create_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.users_v2_create_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def users_v2_create_with_http_info(self, user, **kwargs):  # noqa: E501
        """New - Create an enrollment user  # noqa: E501

        Create an enrollment user with attributes including externalId, userName, password, firstName, lastName, displayName, userPrincipalName, emailAddress, phoneNumber, mobileNumber, messageType, messageTemplateUuid, enrollmentRoleUuid, status, securityType, deviceStagingEnabled, deviceStagingType, organizationGroupUuid, enrollmentOrganizationGroupUuid, aadMappingAttribute, department, employeeIdentifier, costCenter, customAttribute1, customAttribute2, customAttribute3, customAttribute4 and customAttribute5. &lt;br/&gt;&lt;br/&gt;UsersV2 API support syncing of users into the Workspace ONE Access from Workspace ONE UEM.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_v2_create_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateEnrollmentUserV2Model user: Enrollment user attributes(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_v2_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `users_v2_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_v2_delete_async(self, uuid, **kwargs):  # noqa: E501
        """New - Delete an enrollment user by UUID  # noqa: E501

        Delete an enrollment user by UUID. &lt;br/&gt;&lt;br/&gt;UsersV2 API support syncing of users into the Workspace ONE Access from Workspace ONE UEM.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_v2_delete_async(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an enrollment user(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_v2_delete_async_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.users_v2_delete_async_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def users_v2_delete_async_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Delete an enrollment user by UUID  # noqa: E501

        Delete an enrollment user by UUID. &lt;br/&gt;&lt;br/&gt;UsersV2 API support syncing of users into the Workspace ONE Access from Workspace ONE UEM.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_v2_delete_async_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an enrollment user(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_v2_delete_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `users_v2_delete_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_v2_read(self, uuid, **kwargs):  # noqa: E501
        """New - Read an enrollment user by UUID  # noqa: E501

        Read an enrollment user attributes including uuid, externalId, domain, userName, firstName, lastName, displayName, fullName, userPrincipalName, emailAddress, phoneNumber, mobileNumber, emailUserName, messageType, messageTemplateUuid, enrollmentRoleUuid, status, securityType, deviceStagingType, enrolledDeviceCount, organizationGroupUuid, enrollmentOrganizationGroupUuid, aadMappingAttribute, department, employeeIdentifier, costCenter, customAttribute1, customAttribute2, customAttribute3, customAttribute4 and customAttribute5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_v2_read(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an enrollment user(Required) (required)
        :return: ReadEnrollmentUserV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_v2_read_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.users_v2_read_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def users_v2_read_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Read an enrollment user by UUID  # noqa: E501

        Read an enrollment user attributes including uuid, externalId, domain, userName, firstName, lastName, displayName, fullName, userPrincipalName, emailAddress, phoneNumber, mobileNumber, emailUserName, messageType, messageTemplateUuid, enrollmentRoleUuid, status, securityType, deviceStagingType, enrolledDeviceCount, organizationGroupUuid, enrollmentOrganizationGroupUuid, aadMappingAttribute, department, employeeIdentifier, costCenter, customAttribute1, customAttribute2, customAttribute3, customAttribute4 and customAttribute5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_v2_read_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an enrollment user(Required) (required)
        :return: ReadEnrollmentUserV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_v2_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `users_v2_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReadEnrollmentUserV2Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_v2_update_async(self, uuid, user, **kwargs):  # noqa: E501
        """New - Update an enrollment user by UUID  # noqa: E501

        Update the enrollment user with attributes including password, firstName, lastName, displayName, emailAddress, phoneNumber, mobileNumber, messageType, messageTemplateUuid, deviceStagingEnabled, deviceStagingType,  enrollmentRoleUuid, enrollmentOrganizationGroupUuid, aadMappingAttribute, department, employeeIdentifier, costCenter, customAttribute1, customAttribute2, customAttribute3, customAttribute4 and customAttribute5. &lt;br/&gt;&lt;br/&gt;UsersV2 API support syncing of users into the Workspace ONE Access from Workspace ONE UEM.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_v2_update_async(uuid, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an enrollment user(Required) (required)
        :param UpdateEnrollmentUserV2Model user: Enrollment user attributes(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.users_v2_update_async_with_http_info(uuid, user, **kwargs)  # noqa: E501
        else:
            (data) = self.users_v2_update_async_with_http_info(uuid, user, **kwargs)  # noqa: E501
            return data

    def users_v2_update_async_with_http_info(self, uuid, user, **kwargs):  # noqa: E501
        """New - Update an enrollment user by UUID  # noqa: E501

        Update the enrollment user with attributes including password, firstName, lastName, displayName, emailAddress, phoneNumber, mobileNumber, messageType, messageTemplateUuid, deviceStagingEnabled, deviceStagingType,  enrollmentRoleUuid, enrollmentOrganizationGroupUuid, aadMappingAttribute, department, employeeIdentifier, costCenter, customAttribute1, customAttribute2, customAttribute3, customAttribute4 and customAttribute5. &lt;br/&gt;&lt;br/&gt;UsersV2 API support syncing of users into the Workspace ONE Access from Workspace ONE UEM.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.users_v2_update_async_with_http_info(uuid, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an enrollment user(Required) (required)
        :param UpdateEnrollmentUserV2Model user: Enrollment user attributes(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_v2_update_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `users_v2_update_async`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `users_v2_update_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
