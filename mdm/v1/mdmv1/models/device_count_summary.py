# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceCountSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_devices': 'int',
        'security': 'DeviceCountBySecurity_',
        'ownership': 'DeviceCountByOwnership_',
        'platforms': 'DeviceCountByPlatforms_',
        'enrollment_status': 'DeviceCountByEnrollmentStatus_'
    }

    attribute_map = {
        'total_devices': 'TotalDevices',
        'security': 'Security',
        'ownership': 'Ownership',
        'platforms': 'Platforms',
        'enrollment_status': 'EnrollmentStatus'
    }

    def __init__(self, total_devices=None, security=None, ownership=None, platforms=None, enrollment_status=None, _configuration=None):  # noqa: E501
        """DeviceCountSummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_devices = None
        self._security = None
        self._ownership = None
        self._platforms = None
        self._enrollment_status = None
        self.discriminator = None

        if total_devices is not None:
            self.total_devices = total_devices
        if security is not None:
            self.security = security
        if ownership is not None:
            self.ownership = ownership
        if platforms is not None:
            self.platforms = platforms
        if enrollment_status is not None:
            self.enrollment_status = enrollment_status

    @property
    def total_devices(self):
        """Gets the total_devices of this DeviceCountSummary.  # noqa: E501

        Gets or sets represents total number of devices deployed in an OG.  # noqa: E501

        :return: The total_devices of this DeviceCountSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_devices

    @total_devices.setter
    def total_devices(self, total_devices):
        """Sets the total_devices of this DeviceCountSummary.

        Gets or sets represents total number of devices deployed in an OG.  # noqa: E501

        :param total_devices: The total_devices of this DeviceCountSummary.  # noqa: E501
        :type: int
        """

        self._total_devices = total_devices

    @property
    def security(self):
        """Gets the security of this DeviceCountSummary.  # noqa: E501

        Gets or sets device count breakdown by Security Info.  # noqa: E501

        :return: The security of this DeviceCountSummary.  # noqa: E501
        :rtype: DeviceCountBySecurity_
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this DeviceCountSummary.

        Gets or sets device count breakdown by Security Info.  # noqa: E501

        :param security: The security of this DeviceCountSummary.  # noqa: E501
        :type: DeviceCountBySecurity_
        """

        self._security = security

    @property
    def ownership(self):
        """Gets the ownership of this DeviceCountSummary.  # noqa: E501

        Gets or sets device count breakdown by Ownership Info.  # noqa: E501

        :return: The ownership of this DeviceCountSummary.  # noqa: E501
        :rtype: DeviceCountByOwnership_
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this DeviceCountSummary.

        Gets or sets device count breakdown by Ownership Info.  # noqa: E501

        :param ownership: The ownership of this DeviceCountSummary.  # noqa: E501
        :type: DeviceCountByOwnership_
        """

        self._ownership = ownership

    @property
    def platforms(self):
        """Gets the platforms of this DeviceCountSummary.  # noqa: E501

        Gets or sets device count breakdown by Platform Info.  # noqa: E501

        :return: The platforms of this DeviceCountSummary.  # noqa: E501
        :rtype: DeviceCountByPlatforms_
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this DeviceCountSummary.

        Gets or sets device count breakdown by Platform Info.  # noqa: E501

        :param platforms: The platforms of this DeviceCountSummary.  # noqa: E501
        :type: DeviceCountByPlatforms_
        """

        self._platforms = platforms

    @property
    def enrollment_status(self):
        """Gets the enrollment_status of this DeviceCountSummary.  # noqa: E501

        Gets or sets device count breakdown by EnrollmentStatus Info.  # noqa: E501

        :return: The enrollment_status of this DeviceCountSummary.  # noqa: E501
        :rtype: DeviceCountByEnrollmentStatus_
        """
        return self._enrollment_status

    @enrollment_status.setter
    def enrollment_status(self, enrollment_status):
        """Sets the enrollment_status of this DeviceCountSummary.

        Gets or sets device count breakdown by EnrollmentStatus Info.  # noqa: E501

        :param enrollment_status: The enrollment_status of this DeviceCountSummary.  # noqa: E501
        :type: DeviceCountByEnrollmentStatus_
        """

        self._enrollment_status = enrollment_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCountSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCountSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCountSummary):
            return True

        return self.to_dict() != other.to_dict()
