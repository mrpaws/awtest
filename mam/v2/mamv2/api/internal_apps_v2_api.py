# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv2.api_client import ApiClient


class InternalAppsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def internal_apps_v2_get_application_branch_cache_statistics_async(self, bundleid, **kwargs):  # noqa: E501
        """New - Gets the BranchCache statistics for the application bundle identifier.  # noqa: E501

        Gets the BranchCache statistics for application deployments for the application bundle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v2_get_application_branch_cache_statistics_async(bundleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The application bundle identifier to query BranchCache statistics.(Required) (required)
        :param bool summary_only: Only the summary of the BranchCache statistics for the application deployments is returned. This is the default behavior if not specified.
        :param str application_uuids: Comma separated list of application UUIDs for the BranchCache statistics of the applications deployed to devices. At least one application must be part of the application bundle.
        :param str device_uuids: Comma separated list of device UUIDs for the BranchCache statistics of the applications deployed to those devices. Must not be specified with smart_group_uuids.
        :param str smart_group_uuids: Comma separated list of smart group UUIDs for the BranchCache statistics of the applications deployed to those smart groups. Must not be specified with device_uuids.
        :param object organization_group_uuid: The organization group to limit the BranchCache statistics query to.
        :return: ApplicationBranchCacheStatisticsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v2_get_application_branch_cache_statistics_async_with_http_info(bundleid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v2_get_application_branch_cache_statistics_async_with_http_info(bundleid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v2_get_application_branch_cache_statistics_async_with_http_info(self, bundleid, **kwargs):  # noqa: E501
        """New - Gets the BranchCache statistics for the application bundle identifier.  # noqa: E501

        Gets the BranchCache statistics for application deployments for the application bundle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v2_get_application_branch_cache_statistics_async_with_http_info(bundleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The application bundle identifier to query BranchCache statistics.(Required) (required)
        :param bool summary_only: Only the summary of the BranchCache statistics for the application deployments is returned. This is the default behavior if not specified.
        :param str application_uuids: Comma separated list of application UUIDs for the BranchCache statistics of the applications deployed to devices. At least one application must be part of the application bundle.
        :param str device_uuids: Comma separated list of device UUIDs for the BranchCache statistics of the applications deployed to those devices. Must not be specified with smart_group_uuids.
        :param str smart_group_uuids: Comma separated list of smart group UUIDs for the BranchCache statistics of the applications deployed to those smart groups. Must not be specified with device_uuids.
        :param object organization_group_uuid: The organization group to limit the BranchCache statistics query to.
        :return: ApplicationBranchCacheStatisticsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundleid', 'summary_only', 'application_uuids', 'device_uuids', 'smart_group_uuids', 'organization_group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v2_get_application_branch_cache_statistics_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundleid' is set
        if self.api_client.client_side_validation and ('bundleid' not in params or
                                                       params['bundleid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundleid` when calling `internal_apps_v2_get_application_branch_cache_statistics_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundleid' in params:
            path_params['bundleid'] = params['bundleid']  # noqa: E501

        query_params = []
        if 'summary_only' in params:
            query_params.append(('summary_only', params['summary_only']))  # noqa: E501
        if 'application_uuids' in params:
            query_params.append(('application_uuids', params['application_uuids']))  # noqa: E501
        if 'device_uuids' in params:
            query_params.append(('device_uuids', params['device_uuids']))  # noqa: E501
        if 'smart_group_uuids' in params:
            query_params.append(('smart_group_uuids', params['smart_group_uuids']))  # noqa: E501
        if 'organization_group_uuid' in params:
            query_params.append(('organization_group_uuid', params['organization_group_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/peerdistribution/branchcache/{bundleid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationBranchCacheStatisticsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v2_get_internal_app_by_uuid(self, uuid, **kwargs):  # noqa: E501
        """New - Details of an internal app identified by UUID.  # noqa: E501

        Gets the details of an internal app identified by UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v2_get_internal_app_by_uuid(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Application UUID(Required) (required)
        :return: InternalAppModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v2_get_internal_app_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v2_get_internal_app_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v2_get_internal_app_by_uuid_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Details of an internal app identified by UUID.  # noqa: E501

        Gets the details of an internal app identified by UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v2_get_internal_app_by_uuid_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Application UUID(Required) (required)
        :return: InternalAppModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v2_get_internal_app_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `internal_apps_v2_get_internal_app_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InternalAppModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v2_renew_provisioning_profile(self, uuid, **kwargs):  # noqa: E501
        """New - Renew the provisioning profile of all the applications using the given provisioning profile.  # noqa: E501

        Renews the provisioning profile all the applications using the given provisioning profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v2_renew_provisioning_profile(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the ptovisioning profile which has to be renewed.(Required) (required)
        :return: ApplicationsProvisionProfileModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v2_renew_provisioning_profile_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v2_renew_provisioning_profile_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v2_renew_provisioning_profile_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Renew the provisioning profile of all the applications using the given provisioning profile.  # noqa: E501

        Renews the provisioning profile all the applications using the given provisioning profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v2_renew_provisioning_profile_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The UUID of the ptovisioning profile which has to be renewed.(Required) (required)
        :return: ApplicationsProvisionProfileModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v2_renew_provisioning_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `internal_apps_v2_renew_provisioning_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/provisionings/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationsProvisionProfileModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
