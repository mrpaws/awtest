# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class ApplicationTransformModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_transform_id': 'int',
        'application_id': 'int',
        'transform_file_name': 'str',
        'transform_blob_id': 'int'
    }

    attribute_map = {
        'application_transform_id': 'ApplicationTransformId',
        'application_id': 'ApplicationId',
        'transform_file_name': 'TransformFileName',
        'transform_blob_id': 'TransformBlobId'
    }

    def __init__(self, application_transform_id=None, application_id=None, transform_file_name=None, transform_blob_id=None, _configuration=None):  # noqa: E501
        """ApplicationTransformModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application_transform_id = None
        self._application_id = None
        self._transform_file_name = None
        self._transform_blob_id = None
        self.discriminator = None

        if application_transform_id is not None:
            self.application_transform_id = application_transform_id
        if application_id is not None:
            self.application_id = application_id
        if transform_file_name is not None:
            self.transform_file_name = transform_file_name
        if transform_blob_id is not None:
            self.transform_blob_id = transform_blob_id

    @property
    def application_transform_id(self):
        """Gets the application_transform_id of this ApplicationTransformModel.  # noqa: E501

        Gets or sets application transform ID.  # noqa: E501

        :return: The application_transform_id of this ApplicationTransformModel.  # noqa: E501
        :rtype: int
        """
        return self._application_transform_id

    @application_transform_id.setter
    def application_transform_id(self, application_transform_id):
        """Sets the application_transform_id of this ApplicationTransformModel.

        Gets or sets application transform ID.  # noqa: E501

        :param application_transform_id: The application_transform_id of this ApplicationTransformModel.  # noqa: E501
        :type: int
        """

        self._application_transform_id = application_transform_id

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationTransformModel.  # noqa: E501

        Gets or sets application ID.  # noqa: E501

        :return: The application_id of this ApplicationTransformModel.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationTransformModel.

        Gets or sets application ID.  # noqa: E501

        :param application_id: The application_id of this ApplicationTransformModel.  # noqa: E501
        :type: int
        """

        self._application_id = application_id

    @property
    def transform_file_name(self):
        """Gets the transform_file_name of this ApplicationTransformModel.  # noqa: E501

        Gets or sets name of the uploaded Transform File.  # noqa: E501

        :return: The transform_file_name of this ApplicationTransformModel.  # noqa: E501
        :rtype: str
        """
        return self._transform_file_name

    @transform_file_name.setter
    def transform_file_name(self, transform_file_name):
        """Sets the transform_file_name of this ApplicationTransformModel.

        Gets or sets name of the uploaded Transform File.  # noqa: E501

        :param transform_file_name: The transform_file_name of this ApplicationTransformModel.  # noqa: E501
        :type: str
        """

        self._transform_file_name = transform_file_name

    @property
    def transform_blob_id(self):
        """Gets the transform_blob_id of this ApplicationTransformModel.  # noqa: E501

        Gets or sets blobId of the uploaded Tranform.  # noqa: E501

        :return: The transform_blob_id of this ApplicationTransformModel.  # noqa: E501
        :rtype: int
        """
        return self._transform_blob_id

    @transform_blob_id.setter
    def transform_blob_id(self, transform_blob_id):
        """Sets the transform_blob_id of this ApplicationTransformModel.

        Gets or sets blobId of the uploaded Tranform.  # noqa: E501

        :param transform_blob_id: The transform_blob_id of this ApplicationTransformModel.  # noqa: E501
        :type: int
        """

        self._transform_blob_id = transform_blob_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationTransformModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationTransformModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationTransformModel):
            return True

        return self.to_dict() != other.to_dict()
