# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkPasscodePayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device': 'AndroidForWorkDevicePasscodePayloadV2Entity_',
        'applications': 'AndroidForWorkAppPasscodePayloadV2Entity_',
        'samsung': 'AndroidForWorkSamsungPasscodePayloadV2Entity_'
    }

    attribute_map = {
        'device': 'Device',
        'applications': 'Applications',
        'samsung': 'Samsung'
    }

    def __init__(self, device=None, applications=None, samsung=None, _configuration=None):  # noqa: E501
        """AndroidForWorkPasscodePayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device = None
        self._applications = None
        self._samsung = None
        self.discriminator = None

        if device is not None:
            self.device = device
        if applications is not None:
            self.applications = applications
        if samsung is not None:
            self.samsung = samsung

    @property
    def device(self):
        """Gets the device of this AndroidForWorkPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets the AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        :return: The device of this AndroidForWorkPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: AndroidForWorkDevicePasscodePayloadV2Entity_
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this AndroidForWorkPasscodePayloadV2Entity_.

        Gets or sets the AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        :param device: The device of this AndroidForWorkPasscodePayloadV2Entity_.  # noqa: E501
        :type: AndroidForWorkDevicePasscodePayloadV2Entity_
        """

        self._device = device

    @property
    def applications(self):
        """Gets the applications of this AndroidForWorkPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets the AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        :return: The applications of this AndroidForWorkPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: AndroidForWorkAppPasscodePayloadV2Entity_
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this AndroidForWorkPasscodePayloadV2Entity_.

        Gets or sets the AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        :param applications: The applications of this AndroidForWorkPasscodePayloadV2Entity_.  # noqa: E501
        :type: AndroidForWorkAppPasscodePayloadV2Entity_
        """

        self._applications = applications

    @property
    def samsung(self):
        """Gets the samsung of this AndroidForWorkPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets the AndroidForWorkSamsungPasscodePayloadV2Entity.  # noqa: E501

        :return: The samsung of this AndroidForWorkPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: AndroidForWorkSamsungPasscodePayloadV2Entity_
        """
        return self._samsung

    @samsung.setter
    def samsung(self, samsung):
        """Sets the samsung of this AndroidForWorkPasscodePayloadV2Entity_.

        Gets or sets the AndroidForWorkSamsungPasscodePayloadV2Entity.  # noqa: E501

        :param samsung: The samsung of this AndroidForWorkPasscodePayloadV2Entity_.  # noqa: E501
        :type: AndroidForWorkSamsungPasscodePayloadV2Entity_
        """

        self._samsung = samsung

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkPasscodePayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkPasscodePayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkPasscodePayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
