# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class DeviceRegistrationV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_registration_v1_delete_registered_devices(self, http_request, searchby, **kwargs):  # noqa: E501
        """Delete the registered devices.  # noqa: E501

        Delete the registered devices identified by [Asset number] or [Udid] or [Serialnumber]              (Formats: Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: RZ1G124JZ6W, AssetNumber: ea856771ba6277bfca16528a79c5ce1f).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_delete_registered_devices(http_request, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, str) http_request: Holds request entity coming through call pipeline. (required)
        :param str searchby: The identifier type must be one of the following [ Udid, Serialnumber, AssetNumber](Required). (required)
        :param BulkInput bulk_input: List of devices identified by Asset number/Udid/SerialNumber.
        :param str username: User name with which the device is enrolled.
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_registration_v1_delete_registered_devices_with_http_info(http_request, searchby, **kwargs)  # noqa: E501
        else:
            (data) = self.device_registration_v1_delete_registered_devices_with_http_info(http_request, searchby, **kwargs)  # noqa: E501
            return data

    def device_registration_v1_delete_registered_devices_with_http_info(self, http_request, searchby, **kwargs):  # noqa: E501
        """Delete the registered devices.  # noqa: E501

        Delete the registered devices identified by [Asset number] or [Udid] or [Serialnumber]              (Formats: Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: RZ1G124JZ6W, AssetNumber: ea856771ba6277bfca16528a79c5ce1f).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_delete_registered_devices_with_http_info(http_request, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, str) http_request: Holds request entity coming through call pipeline. (required)
        :param str searchby: The identifier type must be one of the following [ Udid, Serialnumber, AssetNumber](Required). (required)
        :param BulkInput bulk_input: List of devices identified by Asset number/Udid/SerialNumber.
        :param str username: User name with which the device is enrolled.
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['http_request', 'searchby', 'bulk_input', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_registration_v1_delete_registered_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'http_request' is set
        if self.api_client.client_side_validation and ('http_request' not in params or
                                                       params['http_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `http_request` when calling `device_registration_v1_delete_registered_devices`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `device_registration_v1_delete_registered_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'http_request' in params:
            query_params.append(('httpRequest', params['http_request']))  # noqa: E501
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_registration_v1_delete_registered_devices_by_asset_number(self, **kwargs):  # noqa: E501
        """Deletes the registered devices identified by Asset number.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_delete_registered_devices_by_asset_number(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of devices identified by Asset number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_registration_v1_delete_registered_devices_by_asset_number_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_registration_v1_delete_registered_devices_by_asset_number_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_registration_v1_delete_registered_devices_by_asset_number_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes the registered devices identified by Asset number.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_delete_registered_devices_by_asset_number_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of devices identified by Asset number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_registration_v1_delete_registered_devices_by_asset_number" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/deletebyassetnumber', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_registration_v1_delete_registered_devices_by_serial_number(self, **kwargs):  # noqa: E501
        """Deletes the registered devices identified by serial number.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_delete_registered_devices_by_serial_number(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of devices identified by serial number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_registration_v1_delete_registered_devices_by_serial_number_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_registration_v1_delete_registered_devices_by_serial_number_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_registration_v1_delete_registered_devices_by_serial_number_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes the registered devices identified by serial number.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_delete_registered_devices_by_serial_number_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of devices identified by serial number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_registration_v1_delete_registered_devices_by_serial_number" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/deletebyserialnumber', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_registration_v1_delete_registered_devices_by_udid(self, **kwargs):  # noqa: E501
        """Deletes the registered devices identified by UDID.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_delete_registered_devices_by_udid(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of devices identified by UDID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_registration_v1_delete_registered_devices_by_udid_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_registration_v1_delete_registered_devices_by_udid_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_registration_v1_delete_registered_devices_by_udid_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes the registered devices identified by UDID.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_delete_registered_devices_by_udid_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of devices identified by UDID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_registration_v1_delete_registered_devices_by_udid" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/deletebyudid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_registration_v1_enrollment_token_search(self, **kwargs):  # noqa: E501
        """Search for Enrollment Token and Device details.  # noqa: E501

        Search for Enrollment Token and Device details using the query information provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_enrollment_token_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: UserName of the Enrollment User for whom Enrollment Tokens needs to be searched.
        :param int userid: Identifier of the Enrollment User for whom Enrollment Tokens needs to be searched.
        :param int organizationgroupid: Identifier of the Organization Group where Enrollment Tokens needs to be searched.
        :param str organizationgroup: Organization Group Name where Enrollment Tokens needs to be searched.
        :param str serialnumber: Serial number of device for which Enrollment Tokens to be retrieved. Eg:RZ1G124JZ6W.
        :param str assetnumber: Asset Number of device for which Enrollment Tokens to be retrieved.  Eg:ea856771ba6277bfca16528a79c5ce1f.
        :param int enrollmentstatusid: EnrollmentStatusID of device for which Enrollment Tokens to be retrieved.
        :param int compliancestatusid: ComplianceStatus of device for which Enrollment Tokens to be retrieved.
        :return: EnrollmentTokensModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_registration_v1_enrollment_token_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_registration_v1_enrollment_token_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_registration_v1_enrollment_token_search_with_http_info(self, **kwargs):  # noqa: E501
        """Search for Enrollment Token and Device details.  # noqa: E501

        Search for Enrollment Token and Device details using the query information provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_enrollment_token_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: UserName of the Enrollment User for whom Enrollment Tokens needs to be searched.
        :param int userid: Identifier of the Enrollment User for whom Enrollment Tokens needs to be searched.
        :param int organizationgroupid: Identifier of the Organization Group where Enrollment Tokens needs to be searched.
        :param str organizationgroup: Organization Group Name where Enrollment Tokens needs to be searched.
        :param str serialnumber: Serial number of device for which Enrollment Tokens to be retrieved. Eg:RZ1G124JZ6W.
        :param str assetnumber: Asset Number of device for which Enrollment Tokens to be retrieved.  Eg:ea856771ba6277bfca16528a79c5ce1f.
        :param int enrollmentstatusid: EnrollmentStatusID of device for which Enrollment Tokens to be retrieved.
        :param int compliancestatusid: ComplianceStatus of device for which Enrollment Tokens to be retrieved.
        :return: EnrollmentTokensModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'userid', 'organizationgroupid', 'organizationgroup', 'serialnumber', 'assetnumber', 'enrollmentstatusid', 'compliancestatusid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_registration_v1_enrollment_token_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'userid' in params:
            query_params.append(('userid', params['userid']))  # noqa: E501
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'organizationgroup' in params:
            query_params.append(('organizationgroup', params['organizationgroup']))  # noqa: E501
        if 'serialnumber' in params:
            query_params.append(('serialnumber', params['serialnumber']))  # noqa: E501
        if 'assetnumber' in params:
            query_params.append(('assetnumber', params['assetnumber']))  # noqa: E501
        if 'enrollmentstatusid' in params:
            query_params.append(('enrollmentstatusid', params['enrollmentstatusid']))  # noqa: E501
        if 'compliancestatusid' in params:
            query_params.append(('compliancestatusid', params['compliancestatusid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/enrollmenttoken/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentTokensModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_registration_v1_register_device_for_user_async(self, id, **kwargs):  # noqa: E501
        """Register a device to enrollment user.  # noqa: E501

        Register a device to the specified enrollment user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_register_device_for_user_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user Id. (required)
        :param RegisterDeviceDetailsModel register_device_details: The device details to register.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_registration_v1_register_device_for_user_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_registration_v1_register_device_for_user_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def device_registration_v1_register_device_for_user_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Register a device to enrollment user.  # noqa: E501

        Register a device to the specified enrollment user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_register_device_for_user_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user Id. (required)
        :param RegisterDeviceDetailsModel register_device_details: The device details to register.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'register_device_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_registration_v1_register_device_for_user_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `device_registration_v1_register_device_for_user_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'register_device_details' in params:
            body_params = params['register_device_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/registerdevice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_registration_v1_retrieve_enrolled_devices(self, **kwargs):  # noqa: E501
        """Retrieves enrolled device details.  # noqa: E501

        Retrieves enrolled device details for the query information provided in the request              <br />              *seensince, seentill, enrolledsince and enrolledtill* fields accept the following              Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,              yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,              yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_retrieve_enrolled_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization Group Identifier in which device details will be retrieved.
        :param str organizationgroup: Organization Group Name search parameter in which device details will be retrieved.
        :param str platform: Platform filter for the device details to be retrieved.
        :param str customattributes: List of custom attribute names [separated by comma (,)] for which values should be returned.
        :param str serialnumber: Device serialnumber for which values should be returned.
        :param datetime seensince: SeenSince DateTime, devices registered after the seensince datetime will be returned if present.
        :param datetime seentill: SeenTill DateTime, devices registered till the seentill datetime will be returned if present.
        :param datetime enrolledsince: EnrolledSince DateTime, devices enrolled after the enrolledsince datetime will be returned if present.
        :param datetime enrolledtill: EnrolledTill DateTime, devices enrolled till the enrolledtill datetime will be returned if present.
        :return: EnrolledDevices
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_registration_v1_retrieve_enrolled_devices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_registration_v1_retrieve_enrolled_devices_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_registration_v1_retrieve_enrolled_devices_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves enrolled device details.  # noqa: E501

        Retrieves enrolled device details for the query information provided in the request              <br />              *seensince, seentill, enrolledsince and enrolledtill* fields accept the following              Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,              yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,              yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_retrieve_enrolled_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization Group Identifier in which device details will be retrieved.
        :param str organizationgroup: Organization Group Name search parameter in which device details will be retrieved.
        :param str platform: Platform filter for the device details to be retrieved.
        :param str customattributes: List of custom attribute names [separated by comma (,)] for which values should be returned.
        :param str serialnumber: Device serialnumber for which values should be returned.
        :param datetime seensince: SeenSince DateTime, devices registered after the seensince datetime will be returned if present.
        :param datetime seentill: SeenTill DateTime, devices registered till the seentill datetime will be returned if present.
        :param datetime enrolledsince: EnrolledSince DateTime, devices enrolled after the enrolledsince datetime will be returned if present.
        :param datetime enrolledtill: EnrolledTill DateTime, devices enrolled till the enrolledtill datetime will be returned if present.
        :return: EnrolledDevices
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'organizationgroup', 'platform', 'customattributes', 'serialnumber', 'seensince', 'seentill', 'enrolledsince', 'enrolledtill']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_registration_v1_retrieve_enrolled_devices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'organizationgroup' in params:
            query_params.append(('organizationgroup', params['organizationgroup']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'customattributes' in params:
            query_params.append(('customattributes', params['customattributes']))  # noqa: E501
        if 'serialnumber' in params:
            query_params.append(('serialnumber', params['serialnumber']))  # noqa: E501
        if 'seensince' in params:
            query_params.append(('seensince', params['seensince']))  # noqa: E501
        if 'seentill' in params:
            query_params.append(('seentill', params['seentill']))  # noqa: E501
        if 'enrolledsince' in params:
            query_params.append(('enrolledsince', params['enrolledsince']))  # noqa: E501
        if 'enrolledtill' in params:
            query_params.append(('enrolledtill', params['enrolledtill']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/enrolleddevices/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrolledDevices',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_registration_v1_retrieve_registered_devices(self, **kwargs):  # noqa: E501
        """Retrieves registered device details.  # noqa: E501

        Retrieves registered device details for the query information provided in the request              <br />              *seensince and seentill* fields accept the following              Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,              yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,              yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_retrieve_registered_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization Group Identifier in which device details will be retrieved.
        :param str organizationgroup: Organization Group Name search parameter in which device details will be retrieved.
        :param str platform: Platform filter for the device details to be retrieved.
        :param str customattributes: List of custom attribute names [separated by comma (,)] for which values should be returned.
        :param str assetnumber: Asset number filter for the device details to be retrieved. Eg: ea856771ba6277bfca16528a79c5ce1f.
        :param datetime seensince: SeenSince DateTime, devices registered after the seensince datetime will be returned if present.
        :param datetime seentill: SeenTill DateTime, devices registered till the seentill datetime will be returned if present.
        :return: RegisteredDevices
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_registration_v1_retrieve_registered_devices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_registration_v1_retrieve_registered_devices_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_registration_v1_retrieve_registered_devices_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves registered device details.  # noqa: E501

        Retrieves registered device details for the query information provided in the request              <br />              *seensince and seentill* fields accept the following              Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,              yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,              yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_registration_v1_retrieve_registered_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization Group Identifier in which device details will be retrieved.
        :param str organizationgroup: Organization Group Name search parameter in which device details will be retrieved.
        :param str platform: Platform filter for the device details to be retrieved.
        :param str customattributes: List of custom attribute names [separated by comma (,)] for which values should be returned.
        :param str assetnumber: Asset number filter for the device details to be retrieved. Eg: ea856771ba6277bfca16528a79c5ce1f.
        :param datetime seensince: SeenSince DateTime, devices registered after the seensince datetime will be returned if present.
        :param datetime seentill: SeenTill DateTime, devices registered till the seentill datetime will be returned if present.
        :return: RegisteredDevices
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'organizationgroup', 'platform', 'customattributes', 'assetnumber', 'seensince', 'seentill']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_registration_v1_retrieve_registered_devices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'organizationgroup' in params:
            query_params.append(('organizationgroup', params['organizationgroup']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'customattributes' in params:
            query_params.append(('customattributes', params['customattributes']))  # noqa: E501
        if 'assetnumber' in params:
            query_params.append(('assetnumber', params['assetnumber']))  # noqa: E501
        if 'seensince' in params:
            query_params.append(('seensince', params['seensince']))  # noqa: E501
        if 'seentill' in params:
            query_params.append(('seentill', params['seentill']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/registereddevices/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegisteredDevices',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
