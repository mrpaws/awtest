# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class RelayServerGeneralDetailsModel_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'relay_server_type_id': 'int',
        'relay_server_type': 'str',
        'relay_server_log_level': 'int',
        'restrict_content_delivery_window': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'active': 'str',
        'up_stream_status': 'str',
        'up_stream_status_code': 'int',
        'up_stream_status_description': 'str',
        'down_stream_status': 'str',
        'down_stream_status_code': 'int',
        'down_stream_status_description': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'description': 'Description',
        'relay_server_type_id': 'RelayServerTypeId',
        'relay_server_type': 'RelayServerType',
        'relay_server_log_level': 'RelayServerLogLevel',
        'restrict_content_delivery_window': 'RestrictContentDeliveryWindow',
        'start_time': 'StartTime',
        'end_time': 'EndTime',
        'active': 'Active',
        'up_stream_status': 'UpStreamStatus',
        'up_stream_status_code': 'UpStreamStatusCode',
        'up_stream_status_description': 'UpStreamStatusDescription',
        'down_stream_status': 'DownStreamStatus',
        'down_stream_status_code': 'DownStreamStatusCode',
        'down_stream_status_description': 'DownStreamStatusDescription'
    }

    def __init__(self, name=None, description=None, relay_server_type_id=None, relay_server_type=None, relay_server_log_level=None, restrict_content_delivery_window=None, start_time=None, end_time=None, active=None, up_stream_status=None, up_stream_status_code=None, up_stream_status_description=None, down_stream_status=None, down_stream_status_code=None, down_stream_status_description=None, _configuration=None):  # noqa: E501
        """RelayServerGeneralDetailsModel_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._relay_server_type_id = None
        self._relay_server_type = None
        self._relay_server_log_level = None
        self._restrict_content_delivery_window = None
        self._start_time = None
        self._end_time = None
        self._active = None
        self._up_stream_status = None
        self._up_stream_status_code = None
        self._up_stream_status_description = None
        self._down_stream_status = None
        self._down_stream_status_code = None
        self._down_stream_status_description = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        self.relay_server_type_id = relay_server_type_id
        if relay_server_type is not None:
            self.relay_server_type = relay_server_type
        if relay_server_log_level is not None:
            self.relay_server_log_level = relay_server_log_level
        if restrict_content_delivery_window is not None:
            self.restrict_content_delivery_window = restrict_content_delivery_window
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if active is not None:
            self.active = active
        if up_stream_status is not None:
            self.up_stream_status = up_stream_status
        if up_stream_status_code is not None:
            self.up_stream_status_code = up_stream_status_code
        if up_stream_status_description is not None:
            self.up_stream_status_description = up_stream_status_description
        if down_stream_status is not None:
            self.down_stream_status = down_stream_status
        if down_stream_status_code is not None:
            self.down_stream_status_code = down_stream_status_code
        if down_stream_status_description is not None:
            self.down_stream_status_description = down_stream_status_description

    @property
    def name(self):
        """Gets the name of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the Name of server.  # noqa: E501

        :return: The name of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RelayServerGeneralDetailsModel_.

        Gets or sets the Name of server.  # noqa: E501

        :param name: The name of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'^[^*:?\"|\/\\\\;,\\[\\]\\(\\)]+$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[^*:?\"|\/\\\\;,\\[\\]\\(\\)]+$/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the Description of server.  # noqa: E501

        :return: The description of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RelayServerGeneralDetailsModel_.

        Gets or sets the Description of server.  # noqa: E501

        :param description: The description of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 500):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def relay_server_type_id(self):
        """Gets the relay_server_type_id of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the RelayServerType Identifier.  # noqa: E501

        :return: The relay_server_type_id of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: int
        """
        return self._relay_server_type_id

    @relay_server_type_id.setter
    def relay_server_type_id(self, relay_server_type_id):
        """Sets the relay_server_type_id of this RelayServerGeneralDetailsModel_.

        Gets or sets the RelayServerType Identifier.  # noqa: E501

        :param relay_server_type_id: The relay_server_type_id of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and relay_server_type_id is None:
            raise ValueError("Invalid value for `relay_server_type_id`, must not be `None`")  # noqa: E501

        self._relay_server_type_id = relay_server_type_id

    @property
    def relay_server_type(self):
        """Gets the relay_server_type of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the RelayServerType - Push or Pull.  # noqa: E501

        :return: The relay_server_type of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._relay_server_type

    @relay_server_type.setter
    def relay_server_type(self, relay_server_type):
        """Sets the relay_server_type of this RelayServerGeneralDetailsModel_.

        Gets or sets the RelayServerType - Push or Pull.  # noqa: E501

        :param relay_server_type: The relay_server_type of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._relay_server_type = relay_server_type

    @property
    def relay_server_log_level(self):
        """Gets the relay_server_log_level of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the RelayServerLogLevel - Error or Verbose.  # noqa: E501

        :return: The relay_server_log_level of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: int
        """
        return self._relay_server_log_level

    @relay_server_log_level.setter
    def relay_server_log_level(self, relay_server_log_level):
        """Sets the relay_server_log_level of this RelayServerGeneralDetailsModel_.

        Gets or sets the RelayServerLogLevel - Error or Verbose.  # noqa: E501

        :param relay_server_log_level: The relay_server_log_level of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                relay_server_log_level not in allowed_values):
            raise ValueError(
                "Invalid value for `relay_server_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(relay_server_log_level, allowed_values)
            )

        self._relay_server_log_level = relay_server_log_level

    @property
    def restrict_content_delivery_window(self):
        """Gets the restrict_content_delivery_window of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets whether RestrictContentDeliveryWindow is available or not.  # noqa: E501

        :return: The restrict_content_delivery_window of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._restrict_content_delivery_window

    @restrict_content_delivery_window.setter
    def restrict_content_delivery_window(self, restrict_content_delivery_window):
        """Sets the restrict_content_delivery_window of this RelayServerGeneralDetailsModel_.

        Gets or sets whether RestrictContentDeliveryWindow is available or not.  # noqa: E501

        :param restrict_content_delivery_window: The restrict_content_delivery_window of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._restrict_content_delivery_window = restrict_content_delivery_window

    @property
    def start_time(self):
        """Gets the start_time of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the Start Time of RestrictContentDeliveryWindow.  # noqa: E501

        :return: The start_time of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RelayServerGeneralDetailsModel_.

        Gets or sets the Start Time of RestrictContentDeliveryWindow.  # noqa: E501

        :param start_time: The start_time of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the EndTime of RestrictContentDeliveryWindow.  # noqa: E501

        :return: The end_time of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this RelayServerGeneralDetailsModel_.

        Gets or sets the EndTime of RestrictContentDeliveryWindow.  # noqa: E501

        :param end_time: The end_time of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def active(self):
        """Gets the active of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the status of the server.  # noqa: E501

        :return: The active of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this RelayServerGeneralDetailsModel_.

        Gets or sets the status of the server.  # noqa: E501

        :param active: The active of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._active = active

    @property
    def up_stream_status(self):
        """Gets the up_stream_status of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the status of the upstream.  # noqa: E501

        :return: The up_stream_status of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._up_stream_status

    @up_stream_status.setter
    def up_stream_status(self, up_stream_status):
        """Sets the up_stream_status of this RelayServerGeneralDetailsModel_.

        Gets or sets the status of the upstream.  # noqa: E501

        :param up_stream_status: The up_stream_status of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._up_stream_status = up_stream_status

    @property
    def up_stream_status_code(self):
        """Gets the up_stream_status_code of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the status code of the upstream.  # noqa: E501

        :return: The up_stream_status_code of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: int
        """
        return self._up_stream_status_code

    @up_stream_status_code.setter
    def up_stream_status_code(self, up_stream_status_code):
        """Sets the up_stream_status_code of this RelayServerGeneralDetailsModel_.

        Gets or sets the status code of the upstream.  # noqa: E501

        :param up_stream_status_code: The up_stream_status_code of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: int
        """

        self._up_stream_status_code = up_stream_status_code

    @property
    def up_stream_status_description(self):
        """Gets the up_stream_status_description of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the status description of the upstream.  # noqa: E501

        :return: The up_stream_status_description of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._up_stream_status_description

    @up_stream_status_description.setter
    def up_stream_status_description(self, up_stream_status_description):
        """Sets the up_stream_status_description of this RelayServerGeneralDetailsModel_.

        Gets or sets the status description of the upstream.  # noqa: E501

        :param up_stream_status_description: The up_stream_status_description of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._up_stream_status_description = up_stream_status_description

    @property
    def down_stream_status(self):
        """Gets the down_stream_status of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the status of the downstream.  # noqa: E501

        :return: The down_stream_status of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._down_stream_status

    @down_stream_status.setter
    def down_stream_status(self, down_stream_status):
        """Sets the down_stream_status of this RelayServerGeneralDetailsModel_.

        Gets or sets the status of the downstream.  # noqa: E501

        :param down_stream_status: The down_stream_status of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._down_stream_status = down_stream_status

    @property
    def down_stream_status_code(self):
        """Gets the down_stream_status_code of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the status code of the downstream.  # noqa: E501

        :return: The down_stream_status_code of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: int
        """
        return self._down_stream_status_code

    @down_stream_status_code.setter
    def down_stream_status_code(self, down_stream_status_code):
        """Sets the down_stream_status_code of this RelayServerGeneralDetailsModel_.

        Gets or sets the status code of the downstream.  # noqa: E501

        :param down_stream_status_code: The down_stream_status_code of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: int
        """

        self._down_stream_status_code = down_stream_status_code

    @property
    def down_stream_status_description(self):
        """Gets the down_stream_status_description of this RelayServerGeneralDetailsModel_.  # noqa: E501

        Gets or sets the status description of the downstream.  # noqa: E501

        :return: The down_stream_status_description of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :rtype: str
        """
        return self._down_stream_status_description

    @down_stream_status_description.setter
    def down_stream_status_description(self, down_stream_status_description):
        """Sets the down_stream_status_description of this RelayServerGeneralDetailsModel_.

        Gets or sets the status description of the downstream.  # noqa: E501

        :param down_stream_status_description: The down_stream_status_description of this RelayServerGeneralDetailsModel_.  # noqa: E501
        :type: str
        """

        self._down_stream_status_description = down_stream_status_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelayServerGeneralDetailsModel_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelayServerGeneralDetailsModel_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RelayServerGeneralDetailsModel_):
            return True

        return self.to_dict() != other.to_dict()
