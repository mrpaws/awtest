# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class ProductSetV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def product_set_v1_activate_product_in_product_set(self, product_set_id, product_id, **kwargs):  # noqa: E501
        """Activates a product in a Product Set.  # noqa: E501

        Activates a product in a Product Set when Product Set and Product Id are passed .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_activate_product_in_product_set(product_set_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_set_id: Product Set ID. (Required). (required)
        :param int product_id: Product ID. (Required). (required)
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_set_v1_activate_product_in_product_set_with_http_info(product_set_id, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_set_v1_activate_product_in_product_set_with_http_info(product_set_id, product_id, **kwargs)  # noqa: E501
            return data

    def product_set_v1_activate_product_in_product_set_with_http_info(self, product_set_id, product_id, **kwargs):  # noqa: E501
        """Activates a product in a Product Set.  # noqa: E501

        Activates a product in a Product Set when Product Set and Product Id are passed .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_activate_product_in_product_set_with_http_info(product_set_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_set_id: Product Set ID. (Required). (required)
        :param int product_id: Product ID. (Required). (required)
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_set_id', 'product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_set_v1_activate_product_in_product_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_set_id' is set
        if self.api_client.client_side_validation and ('product_set_id' not in params or
                                                       params['product_set_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product_set_id` when calling `product_set_v1_activate_product_in_product_set`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and ('product_id' not in params or
                                                       params['product_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product_id` when calling `product_set_v1_activate_product_in_product_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_set_id' in params:
            query_params.append(('productSetID', params['product_set_id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('productID', params['product_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/productsets/ActivateProductInProductSet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_set_v1_deactivate_product_in_product_set(self, product_set_id, product_id, **kwargs):  # noqa: E501
        """Deactivates a product in a Product Set.  # noqa: E501

        Deactivates a product in a Product Set when Product Set and Product Id are passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_deactivate_product_in_product_set(product_set_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_set_id: Product Set ID. (Required). (required)
        :param int product_id: Product ID. (Required). (required)
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_set_v1_deactivate_product_in_product_set_with_http_info(product_set_id, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_set_v1_deactivate_product_in_product_set_with_http_info(product_set_id, product_id, **kwargs)  # noqa: E501
            return data

    def product_set_v1_deactivate_product_in_product_set_with_http_info(self, product_set_id, product_id, **kwargs):  # noqa: E501
        """Deactivates a product in a Product Set.  # noqa: E501

        Deactivates a product in a Product Set when Product Set and Product Id are passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_deactivate_product_in_product_set_with_http_info(product_set_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_set_id: Product Set ID. (Required). (required)
        :param int product_id: Product ID. (Required). (required)
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_set_id', 'product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_set_v1_deactivate_product_in_product_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_set_id' is set
        if self.api_client.client_side_validation and ('product_set_id' not in params or
                                                       params['product_set_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product_set_id` when calling `product_set_v1_deactivate_product_in_product_set`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if self.api_client.client_side_validation and ('product_id' not in params or
                                                       params['product_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product_id` when calling `product_set_v1_deactivate_product_in_product_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_set_id' in params:
            query_params.append(('productSetID', params['product_set_id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('productID', params['product_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/productsets/DeactivateProductInProduct', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_set_v1_maintain_product_in_product_set_async(self, **kwargs):  # noqa: E501
        """Adds a product to or modifies an existing product in a Product Set.  # noqa: E501

        Adds a product to or modifies an existing product in a Product Set when product details are passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_maintain_product_in_product_set_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainProductInProductSetModel maintain_product_in_product_set_model: Input representing product to be added or modified in a product set, Organization group.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_set_v1_maintain_product_in_product_set_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_set_v1_maintain_product_in_product_set_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_set_v1_maintain_product_in_product_set_async_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a product to or modifies an existing product in a Product Set.  # noqa: E501

        Adds a product to or modifies an existing product in a Product Set when product details are passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_maintain_product_in_product_set_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainProductInProductSetModel maintain_product_in_product_set_model: Input representing product to be added or modified in a product set, Organization group.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maintain_product_in_product_set_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_set_v1_maintain_product_in_product_set_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maintain_product_in_product_set_model' in params:
            body_params = params['maintain_product_in_product_set_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/productsets/MaintainProductInProductSet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_set_v1_maintain_product_set_async(self, **kwargs):  # noqa: E501
        """Creates or updates a Product Set.  # noqa: E501

        Creates or updates a product set when Product Set details are provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_maintain_product_set_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainProductSetModel maintain_product_set_input_entity: Input representing product set, Organization group and insertOnly flag.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_set_v1_maintain_product_set_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_set_v1_maintain_product_set_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_set_v1_maintain_product_set_async_with_http_info(self, **kwargs):  # noqa: E501
        """Creates or updates a Product Set.  # noqa: E501

        Creates or updates a product set when Product Set details are provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_maintain_product_set_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainProductSetModel maintain_product_set_input_entity: Input representing product set, Organization group and insertOnly flag.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maintain_product_set_input_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_set_v1_maintain_product_set_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maintain_product_set_input_entity' in params:
            body_params = params['maintain_product_set_input_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/productsets/maintainProductSet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_set_v1_product_set_inquiry(self, **kwargs):  # noqa: E501
        """Retrieves information about a Product Set and the included products.  # noqa: E501

        Retrieves information about a Product Set and the list of products in the Product Set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_product_set_inquiry(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: Organization Group ID.
        :param str product_set_name: ProductSet Name.
        :param int product_set_id: ProductSet ID.
        :return: ProductSetInquiryResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_set_v1_product_set_inquiry_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_set_v1_product_set_inquiry_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_set_v1_product_set_inquiry_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves information about a Product Set and the included products.  # noqa: E501

        Retrieves information about a Product Set and the list of products in the Product Set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_product_set_inquiry_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: Organization Group ID.
        :param str product_set_name: ProductSet Name.
        :param int product_set_id: ProductSet ID.
        :return: ProductSetInquiryResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_id', 'product_set_name', 'product_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_set_v1_product_set_inquiry" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organization_group_id' in params:
            query_params.append(('OrganizationGroupID', params['organization_group_id']))  # noqa: E501
        if 'product_set_name' in params:
            query_params.append(('ProductSetName', params['product_set_name']))  # noqa: E501
        if 'product_set_id' in params:
            query_params.append(('ProductSetID', params['product_set_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/productsets/ProductSetInquiry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductSetInquiryResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_set_v1_push_product_set_on_policy_engine(self, product_set_id, fasttrack, **kwargs):  # noqa: E501
        """Pushes the Product Set onto the product policy engine.  # noqa: E501

        Pushes the Product Set onto the product policy engine when Product Set ID and fasttrack parameters are passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_push_product_set_on_policy_engine(product_set_id, fasttrack, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_set_id: Product Set ID. (Required). (required)
        :param int fasttrack: Should the device be fast tracked. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_set_v1_push_product_set_on_policy_engine_with_http_info(product_set_id, fasttrack, **kwargs)  # noqa: E501
        else:
            (data) = self.product_set_v1_push_product_set_on_policy_engine_with_http_info(product_set_id, fasttrack, **kwargs)  # noqa: E501
            return data

    def product_set_v1_push_product_set_on_policy_engine_with_http_info(self, product_set_id, fasttrack, **kwargs):  # noqa: E501
        """Pushes the Product Set onto the product policy engine.  # noqa: E501

        Pushes the Product Set onto the product policy engine when Product Set ID and fasttrack parameters are passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_push_product_set_on_policy_engine_with_http_info(product_set_id, fasttrack, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_set_id: Product Set ID. (Required). (required)
        :param int fasttrack: Should the device be fast tracked. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_set_id', 'fasttrack']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_set_v1_push_product_set_on_policy_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_set_id' is set
        if self.api_client.client_side_validation and ('product_set_id' not in params or
                                                       params['product_set_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product_set_id` when calling `product_set_v1_push_product_set_on_policy_engine`")  # noqa: E501
        # verify the required parameter 'fasttrack' is set
        if self.api_client.client_side_validation and ('fasttrack' not in params or
                                                       params['fasttrack'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fasttrack` when calling `product_set_v1_push_product_set_on_policy_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_set_id' in params:
            query_params.append(('productSetID', params['product_set_id']))  # noqa: E501
        if 'fasttrack' in params:
            query_params.append(('fasttrack', params['fasttrack']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/productsets/pushproductsetonpolicyengine', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_set_v1_rank_all_products_in_product_set(self, **kwargs):  # noqa: E501
        """Reranks all products in a Product Set.  # noqa: E501

        Reranks all products in a Product Set with the specified parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_rank_all_products_in_product_set(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RankAllProductsInProductSetInputEntity rank_all_products_in_product_set_input_entity: Input representing product rankings in a product set, Organziation Group.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_set_v1_rank_all_products_in_product_set_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_set_v1_rank_all_products_in_product_set_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_set_v1_rank_all_products_in_product_set_with_http_info(self, **kwargs):  # noqa: E501
        """Reranks all products in a Product Set.  # noqa: E501

        Reranks all products in a Product Set with the specified parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_rank_all_products_in_product_set_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RankAllProductsInProductSetInputEntity rank_all_products_in_product_set_input_entity: Input representing product rankings in a product set, Organziation Group.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rank_all_products_in_product_set_input_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_set_v1_rank_all_products_in_product_set" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rank_all_products_in_product_set_input_entity' in params:
            body_params = params['rank_all_products_in_product_set_input_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/productsets/RankAllProductsInProductSet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_set_v1_remove_product_from_product_set(self, og_id, product_set_id_or_name, product_id_or_name, **kwargs):  # noqa: E501
        """Deletes a product from a Product Set.  # noqa: E501

        Deletes a product from a Product Set when Organization Group Id,Product Set and the product to be deleted in product set are provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_remove_product_from_product_set(og_id, product_set_id_or_name, product_id_or_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str og_id: The Organization Group Id of the ProductSet. (Required). (required)
        :param str product_set_id_or_name: Product Set containing the product to be deleted. (Required). (required)
        :param str product_id_or_name: The product to be deleted. (Required). (required)
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_set_v1_remove_product_from_product_set_with_http_info(og_id, product_set_id_or_name, product_id_or_name, **kwargs)  # noqa: E501
        else:
            (data) = self.product_set_v1_remove_product_from_product_set_with_http_info(og_id, product_set_id_or_name, product_id_or_name, **kwargs)  # noqa: E501
            return data

    def product_set_v1_remove_product_from_product_set_with_http_info(self, og_id, product_set_id_or_name, product_id_or_name, **kwargs):  # noqa: E501
        """Deletes a product from a Product Set.  # noqa: E501

        Deletes a product from a Product Set when Organization Group Id,Product Set and the product to be deleted in product set are provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_set_v1_remove_product_from_product_set_with_http_info(og_id, product_set_id_or_name, product_id_or_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str og_id: The Organization Group Id of the ProductSet. (Required). (required)
        :param str product_set_id_or_name: Product Set containing the product to be deleted. (Required). (required)
        :param str product_id_or_name: The product to be deleted. (Required). (required)
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['og_id', 'product_set_id_or_name', 'product_id_or_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_set_v1_remove_product_from_product_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'og_id' is set
        if self.api_client.client_side_validation and ('og_id' not in params or
                                                       params['og_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `og_id` when calling `product_set_v1_remove_product_from_product_set`")  # noqa: E501
        # verify the required parameter 'product_set_id_or_name' is set
        if self.api_client.client_side_validation and ('product_set_id_or_name' not in params or
                                                       params['product_set_id_or_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product_set_id_or_name` when calling `product_set_v1_remove_product_from_product_set`")  # noqa: E501
        # verify the required parameter 'product_id_or_name' is set
        if self.api_client.client_side_validation and ('product_id_or_name' not in params or
                                                       params['product_id_or_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `product_id_or_name` when calling `product_set_v1_remove_product_from_product_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'og_id' in params:
            path_params['ogId'] = params['og_id']  # noqa: E501
        if 'product_set_id_or_name' in params:
            path_params['productSetIdOrName'] = params['product_set_id_or_name']  # noqa: E501
        if 'product_id_or_name' in params:
            path_params['productIdOrName'] = params['product_id_or_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/productsets/RemoveProductFromProductSet/{ogId}/{productSetIdOrName}/{productIdOrName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
