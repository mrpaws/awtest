# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class SmartGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def smart_groups_create_smart_group_async(self, **kwargs):  # noqa: E501
        """Creates a smart group in Airwatch.  # noqa: E501

        Create a smart group in Airwatch based on the given details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_create_smart_group_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmartGroupEditV1Model_ smart_group_edit_model: SmartGroup details.
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_groups_create_smart_group_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.smart_groups_create_smart_group_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def smart_groups_create_smart_group_async_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a smart group in Airwatch.  # noqa: E501

        Create a smart group in Airwatch based on the given details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_create_smart_group_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmartGroupEditV1Model_ smart_group_edit_model: SmartGroup details.
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smart_group_edit_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_groups_create_smart_group_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'smart_group_edit_model' in params:
            body_params = params['smart_group_edit_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/smartgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_groups_delete_async(self, id, **kwargs):  # noqa: E501
        """Deletes the Smart Group identified by the Smart Group Identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_delete_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The SmartGroup Identifier (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_groups_delete_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_groups_delete_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def smart_groups_delete_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes the Smart Group identified by the Smart Group Identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_delete_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The SmartGroup Identifier (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_groups_delete_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `smart_groups_delete_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/smartgroups/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_groups_get_apps_by_smart_group_async(self, id, **kwargs):  # noqa: E501
        """Gets List of Apps assigned to Smart Group.  # noqa: E501

        Get List of Apps assigned to the Smart Group based on Smart Group Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_get_apps_by_smart_group_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Smart Group Id (Required). (required)
        :return: list[ApplicationModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_groups_get_apps_by_smart_group_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_groups_get_apps_by_smart_group_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def smart_groups_get_apps_by_smart_group_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets List of Apps assigned to Smart Group.  # noqa: E501

        Get List of Apps assigned to the Smart Group based on Smart Group Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_get_apps_by_smart_group_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Smart Group Id (Required). (required)
        :return: list[ApplicationModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_groups_get_apps_by_smart_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `smart_groups_get_apps_by_smart_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/smartgroups/{id}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApplicationModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_groups_get_devices(self, smartgroupid, **kwargs):  # noqa: E501
        """Retrieves the device details in the smart group.  # noqa: E501

        Retrieves the list of all devices with their respective details (such as DeviceId, Model, OS Version, Platform and Ownership) which belongs to a specific SmartGroup based on Smart Group Identifier.              <br />              **seensince and seentill** fields accept the following              Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,              yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,              yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_get_devices(smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int smartgroupid: The SmartGroup Identifier. (required)
        :param str seensince: Filters the devices in the smart group seen after the seensince datetime.
        :param str seentill: Filters the devices in the smart group seen before the seentill datetime.
        :return: SmartGroupDevices
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_groups_get_devices_with_http_info(smartgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_groups_get_devices_with_http_info(smartgroupid, **kwargs)  # noqa: E501
            return data

    def smart_groups_get_devices_with_http_info(self, smartgroupid, **kwargs):  # noqa: E501
        """Retrieves the device details in the smart group.  # noqa: E501

        Retrieves the list of all devices with their respective details (such as DeviceId, Model, OS Version, Platform and Ownership) which belongs to a specific SmartGroup based on Smart Group Identifier.              <br />              **seensince and seentill** fields accept the following              Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,              yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,              yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_get_devices_with_http_info(smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int smartgroupid: The SmartGroup Identifier. (required)
        :param str seensince: Filters the devices in the smart group seen after the seensince datetime.
        :param str seentill: Filters the devices in the smart group seen before the seentill datetime.
        :return: SmartGroupDevices
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['smartgroupid', 'seensince', 'seentill']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_groups_get_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'smartgroupid' is set
        if self.api_client.client_side_validation and ('smartgroupid' not in params or
                                                       params['smartgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `smartgroupid` when calling `smart_groups_get_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'smartgroupid' in params:
            path_params['smartgroupid'] = params['smartgroupid']  # noqa: E501

        query_params = []
        if 'seensince' in params:
            query_params.append(('seensince', params['seensince']))  # noqa: E501
        if 'seentill' in params:
            query_params.append(('seentill', params['seentill']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/smartgroups/{smartgroupid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SmartGroupDevices',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_groups_load_smart_group_async(self, id, **kwargs):  # noqa: E501
        """Retrieves the Smart Group Details.  # noqa: E501

        Retrieves all the Smart Group details like ( Name, Id, RootLocationGroup, Devices Assigned,list of Users/User Groups etc.) from the Smart Group Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_load_smart_group_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The SmartGroup Identifier (Required). (required)
        :return: SmartGroup_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_groups_load_smart_group_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_groups_load_smart_group_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def smart_groups_load_smart_group_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the Smart Group Details.  # noqa: E501

        Retrieves all the Smart Group details like ( Name, Id, RootLocationGroup, Devices Assigned,list of Users/User Groups etc.) from the Smart Group Identifier.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_load_smart_group_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The SmartGroup Identifier (Required). (required)
        :return: SmartGroup_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_groups_load_smart_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `smart_groups_load_smart_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/smartgroups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SmartGroup_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_groups_search(self, **kwargs):  # noqa: E501
        """Searches for smart groups using the query information provided.  # noqa: E501

        Searches for smart groups using the query information (smartgroup name, organizationgroup Id, mdodifedfrom/modifiedtill date, page , pagesize) provided in the request query.              <br />              **modifiedfrom and modifiedtill** fields accept the following              Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,              yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,              yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: SmartGroup name.
        :param int organizationgroupid: Organization Group identifier.
        :param int managedbyorganizationgroupid: Smart group managing organization group identifier.
        :param datetime modifiedfrom: DateTime, Filters the result where SmartGroup modified date is greater or equal to modifiedfrom value.
        :param datetime modifiedtill: DateTime, Filters the result where SmartGroup modified date is less or equal to modifiedtill value.
        :param str orderby: Order by column name.
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :param int page: Page number.
        :param int pagesize: Records per page.
        :return: SmartGroupSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_groups_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.smart_groups_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def smart_groups_search_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for smart groups using the query information provided.  # noqa: E501

        Searches for smart groups using the query information (smartgroup name, organizationgroup Id, mdodifedfrom/modifiedtill date, page , pagesize) provided in the request query.              <br />              **modifiedfrom and modifiedtill** fields accept the following              Valid DateTime formats : yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,              yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,              yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: SmartGroup name.
        :param int organizationgroupid: Organization Group identifier.
        :param int managedbyorganizationgroupid: Smart group managing organization group identifier.
        :param datetime modifiedfrom: DateTime, Filters the result where SmartGroup modified date is greater or equal to modifiedfrom value.
        :param datetime modifiedtill: DateTime, Filters the result where SmartGroup modified date is less or equal to modifiedtill value.
        :param str orderby: Order by column name.
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :param int page: Page number.
        :param int pagesize: Records per page.
        :return: SmartGroupSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'organizationgroupid', 'managedbyorganizationgroupid', 'modifiedfrom', 'modifiedtill', 'orderby', 'sortorder', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_groups_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'managedbyorganizationgroupid' in params:
            query_params.append(('managedbyorganizationgroupid', params['managedbyorganizationgroupid']))  # noqa: E501
        if 'modifiedfrom' in params:
            query_params.append(('modifiedfrom', params['modifiedfrom']))  # noqa: E501
        if 'modifiedtill' in params:
            query_params.append(('modifiedtill', params['modifiedtill']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/smartgroups/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SmartGroupSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_groups_update_smart_group_async(self, id, **kwargs):  # noqa: E501
        """Updates the details of the specified Smart Group.  # noqa: E501

        Updates the details of the specified Smart Group based on Smart Group Identifier and Smart Group details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_update_smart_group_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The SmartGroup Identifier. (required)
        :param SmartGroupEditV1Model_ smart_group_edit_model: The SmartGroup details to be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_groups_update_smart_group_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_groups_update_smart_group_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def smart_groups_update_smart_group_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates the details of the specified Smart Group.  # noqa: E501

        Updates the details of the specified Smart Group based on Smart Group Identifier and Smart Group details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_groups_update_smart_group_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The SmartGroup Identifier. (required)
        :param SmartGroupEditV1Model_ smart_group_edit_model: The SmartGroup details to be updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'smart_group_edit_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_groups_update_smart_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `smart_groups_update_smart_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'smart_group_edit_model' in params:
            body_params = params['smart_group_edit_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/smartgroups/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
