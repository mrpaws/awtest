# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXRestrictionPreferencesPayloadEntity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled_preference_panes': 'bool',
        'preference_behavior': 'str',
        'accessibility': 'bool',
        'app_store': 'bool',
        'bluetooth': 'bool',
        'extensions': 'bool',
        'cds_and_dvds': 'bool',
        'date_and_time': 'bool',
        'desktop_and_screen_saver': 'bool',
        'dictation_and_speech': 'bool',
        'displays': 'bool',
        'dock': 'bool',
        'energy_saver': 'bool',
        'fibre_channel': 'bool',
        'flash_player': 'bool',
        'general': 'bool',
        'i_cloud': 'bool',
        'ink': 'bool',
        'internet_accounts': 'bool',
        'keyboard': 'bool',
        'language_and_text': 'bool',
        'mission_control': 'bool',
        'mobile_me': 'bool',
        'mouse': 'bool',
        'network': 'bool',
        'notifications': 'bool',
        'parental_controls': 'bool',
        'print_and_scan': 'bool',
        'profiles': 'bool',
        'security_and_privacy': 'bool',
        'sharing': 'bool',
        'software_update': 'bool',
        'sound': 'bool',
        'spotlight': 'bool',
        'startup_disk': 'bool',
        'time_machine': 'bool',
        'trackpad': 'bool',
        'users_and_groups': 'bool',
        'xsan': 'bool'
    }

    attribute_map = {
        'enabled_preference_panes': 'EnabledPreferencePanes',
        'preference_behavior': 'PreferenceBehavior',
        'accessibility': 'Accessibility',
        'app_store': 'AppStore',
        'bluetooth': 'Bluetooth',
        'extensions': 'Extensions',
        'cds_and_dvds': 'CDsAndDVDs',
        'date_and_time': 'DateAndTime',
        'desktop_and_screen_saver': 'DesktopAndScreenSaver',
        'dictation_and_speech': 'DictationAndSpeech',
        'displays': 'Displays',
        'dock': 'Dock',
        'energy_saver': 'EnergySaver',
        'fibre_channel': 'FibreChannel',
        'flash_player': 'FlashPlayer',
        'general': 'General',
        'i_cloud': 'iCloud',
        'ink': 'Ink',
        'internet_accounts': 'InternetAccounts',
        'keyboard': 'Keyboard',
        'language_and_text': 'LanguageAndText',
        'mission_control': 'MissionControl',
        'mobile_me': 'MobileMe',
        'mouse': 'Mouse',
        'network': 'Network',
        'notifications': 'Notifications',
        'parental_controls': 'ParentalControls',
        'print_and_scan': 'PrintAndScan',
        'profiles': 'Profiles',
        'security_and_privacy': 'SecurityAndPrivacy',
        'sharing': 'Sharing',
        'software_update': 'SoftwareUpdate',
        'sound': 'Sound',
        'spotlight': 'Spotlight',
        'startup_disk': 'StartupDisk',
        'time_machine': 'TimeMachine',
        'trackpad': 'Trackpad',
        'users_and_groups': 'UsersAndGroups',
        'xsan': 'Xsan'
    }

    def __init__(self, enabled_preference_panes=None, preference_behavior=None, accessibility=None, app_store=None, bluetooth=None, extensions=None, cds_and_dvds=None, date_and_time=None, desktop_and_screen_saver=None, dictation_and_speech=None, displays=None, dock=None, energy_saver=None, fibre_channel=None, flash_player=None, general=None, i_cloud=None, ink=None, internet_accounts=None, keyboard=None, language_and_text=None, mission_control=None, mobile_me=None, mouse=None, network=None, notifications=None, parental_controls=None, print_and_scan=None, profiles=None, security_and_privacy=None, sharing=None, software_update=None, sound=None, spotlight=None, startup_disk=None, time_machine=None, trackpad=None, users_and_groups=None, xsan=None, _configuration=None):  # noqa: E501
        """AppleOsXRestrictionPreferencesPayloadEntity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled_preference_panes = None
        self._preference_behavior = None
        self._accessibility = None
        self._app_store = None
        self._bluetooth = None
        self._extensions = None
        self._cds_and_dvds = None
        self._date_and_time = None
        self._desktop_and_screen_saver = None
        self._dictation_and_speech = None
        self._displays = None
        self._dock = None
        self._energy_saver = None
        self._fibre_channel = None
        self._flash_player = None
        self._general = None
        self._i_cloud = None
        self._ink = None
        self._internet_accounts = None
        self._keyboard = None
        self._language_and_text = None
        self._mission_control = None
        self._mobile_me = None
        self._mouse = None
        self._network = None
        self._notifications = None
        self._parental_controls = None
        self._print_and_scan = None
        self._profiles = None
        self._security_and_privacy = None
        self._sharing = None
        self._software_update = None
        self._sound = None
        self._spotlight = None
        self._startup_disk = None
        self._time_machine = None
        self._trackpad = None
        self._users_and_groups = None
        self._xsan = None
        self.discriminator = None

        if enabled_preference_panes is not None:
            self.enabled_preference_panes = enabled_preference_panes
        if preference_behavior is not None:
            self.preference_behavior = preference_behavior
        if accessibility is not None:
            self.accessibility = accessibility
        if app_store is not None:
            self.app_store = app_store
        if bluetooth is not None:
            self.bluetooth = bluetooth
        if extensions is not None:
            self.extensions = extensions
        if cds_and_dvds is not None:
            self.cds_and_dvds = cds_and_dvds
        if date_and_time is not None:
            self.date_and_time = date_and_time
        if desktop_and_screen_saver is not None:
            self.desktop_and_screen_saver = desktop_and_screen_saver
        if dictation_and_speech is not None:
            self.dictation_and_speech = dictation_and_speech
        if displays is not None:
            self.displays = displays
        if dock is not None:
            self.dock = dock
        if energy_saver is not None:
            self.energy_saver = energy_saver
        if fibre_channel is not None:
            self.fibre_channel = fibre_channel
        if flash_player is not None:
            self.flash_player = flash_player
        if general is not None:
            self.general = general
        if i_cloud is not None:
            self.i_cloud = i_cloud
        if ink is not None:
            self.ink = ink
        if internet_accounts is not None:
            self.internet_accounts = internet_accounts
        if keyboard is not None:
            self.keyboard = keyboard
        if language_and_text is not None:
            self.language_and_text = language_and_text
        if mission_control is not None:
            self.mission_control = mission_control
        if mobile_me is not None:
            self.mobile_me = mobile_me
        if mouse is not None:
            self.mouse = mouse
        if network is not None:
            self.network = network
        if notifications is not None:
            self.notifications = notifications
        if parental_controls is not None:
            self.parental_controls = parental_controls
        if print_and_scan is not None:
            self.print_and_scan = print_and_scan
        if profiles is not None:
            self.profiles = profiles
        if security_and_privacy is not None:
            self.security_and_privacy = security_and_privacy
        if sharing is not None:
            self.sharing = sharing
        if software_update is not None:
            self.software_update = software_update
        if sound is not None:
            self.sound = sound
        if spotlight is not None:
            self.spotlight = spotlight
        if startup_disk is not None:
            self.startup_disk = startup_disk
        if time_machine is not None:
            self.time_machine = time_machine
        if trackpad is not None:
            self.trackpad = trackpad
        if users_and_groups is not None:
            self.users_and_groups = users_and_groups
        if xsan is not None:
            self.xsan = xsan

    @property
    def enabled_preference_panes(self):
        """Gets the enabled_preference_panes of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the System Preference Panes.  # noqa: E501

        :return: The enabled_preference_panes of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._enabled_preference_panes

    @enabled_preference_panes.setter
    def enabled_preference_panes(self, enabled_preference_panes):
        """Sets the enabled_preference_panes of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the System Preference Panes.  # noqa: E501

        :param enabled_preference_panes: The enabled_preference_panes of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._enabled_preference_panes = enabled_preference_panes

    @property
    def preference_behavior(self):
        """Gets the preference_behavior of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets behavior of selected items.  # noqa: E501

        :return: The preference_behavior of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: str
        """
        return self._preference_behavior

    @preference_behavior.setter
    def preference_behavior(self, preference_behavior):
        """Sets the preference_behavior of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets behavior of selected items.  # noqa: E501

        :param preference_behavior: The preference_behavior of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: str
        """

        self._preference_behavior = preference_behavior

    @property
    def accessibility(self):
        """Gets the accessibility of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Accessibility Preference Pane.  # noqa: E501

        :return: The accessibility of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Accessibility Preference Pane.  # noqa: E501

        :param accessibility: The accessibility of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._accessibility = accessibility

    @property
    def app_store(self):
        """Gets the app_store of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the App Store.  # noqa: E501

        :return: The app_store of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._app_store

    @app_store.setter
    def app_store(self, app_store):
        """Sets the app_store of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the App Store.  # noqa: E501

        :param app_store: The app_store of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._app_store = app_store

    @property
    def bluetooth(self):
        """Gets the bluetooth of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Bluetooth.  # noqa: E501

        :return: The bluetooth of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._bluetooth

    @bluetooth.setter
    def bluetooth(self, bluetooth):
        """Sets the bluetooth of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Bluetooth.  # noqa: E501

        :param bluetooth: The bluetooth of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._bluetooth = bluetooth

    @property
    def extensions(self):
        """Gets the extensions of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Extensions.  # noqa: E501

        :return: The extensions of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Extensions.  # noqa: E501

        :param extensions: The extensions of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._extensions = extensions

    @property
    def cds_and_dvds(self):
        """Gets the cds_and_dvds of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the CDs and DVDs.  # noqa: E501

        :return: The cds_and_dvds of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._cds_and_dvds

    @cds_and_dvds.setter
    def cds_and_dvds(self, cds_and_dvds):
        """Sets the cds_and_dvds of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the CDs and DVDs.  # noqa: E501

        :param cds_and_dvds: The cds_and_dvds of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._cds_and_dvds = cds_and_dvds

    @property
    def date_and_time(self):
        """Gets the date_and_time of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Date and Time.  # noqa: E501

        :return: The date_and_time of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._date_and_time

    @date_and_time.setter
    def date_and_time(self, date_and_time):
        """Sets the date_and_time of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Date and Time.  # noqa: E501

        :param date_and_time: The date_and_time of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._date_and_time = date_and_time

    @property
    def desktop_and_screen_saver(self):
        """Gets the desktop_and_screen_saver of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Desktop and Screen Saver.  # noqa: E501

        :return: The desktop_and_screen_saver of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._desktop_and_screen_saver

    @desktop_and_screen_saver.setter
    def desktop_and_screen_saver(self, desktop_and_screen_saver):
        """Sets the desktop_and_screen_saver of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Desktop and Screen Saver.  # noqa: E501

        :param desktop_and_screen_saver: The desktop_and_screen_saver of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._desktop_and_screen_saver = desktop_and_screen_saver

    @property
    def dictation_and_speech(self):
        """Gets the dictation_and_speech of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Dictation and Speech.  # noqa: E501

        :return: The dictation_and_speech of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._dictation_and_speech

    @dictation_and_speech.setter
    def dictation_and_speech(self, dictation_and_speech):
        """Sets the dictation_and_speech of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Dictation and Speech.  # noqa: E501

        :param dictation_and_speech: The dictation_and_speech of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._dictation_and_speech = dictation_and_speech

    @property
    def displays(self):
        """Gets the displays of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Displays.  # noqa: E501

        :return: The displays of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._displays

    @displays.setter
    def displays(self, displays):
        """Sets the displays of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Displays.  # noqa: E501

        :param displays: The displays of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._displays = displays

    @property
    def dock(self):
        """Gets the dock of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Dock.  # noqa: E501

        :return: The dock of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._dock

    @dock.setter
    def dock(self, dock):
        """Sets the dock of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Dock.  # noqa: E501

        :param dock: The dock of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._dock = dock

    @property
    def energy_saver(self):
        """Gets the energy_saver of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Energy Saver.  # noqa: E501

        :return: The energy_saver of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._energy_saver

    @energy_saver.setter
    def energy_saver(self, energy_saver):
        """Sets the energy_saver of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Energy Saver.  # noqa: E501

        :param energy_saver: The energy_saver of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._energy_saver = energy_saver

    @property
    def fibre_channel(self):
        """Gets the fibre_channel of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Fibre Channel.  # noqa: E501

        :return: The fibre_channel of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._fibre_channel

    @fibre_channel.setter
    def fibre_channel(self, fibre_channel):
        """Sets the fibre_channel of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Fibre Channel.  # noqa: E501

        :param fibre_channel: The fibre_channel of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._fibre_channel = fibre_channel

    @property
    def flash_player(self):
        """Gets the flash_player of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether allows the user to enable or disable Flash Player preference pane in System Preferences.  # noqa: E501

        :return: The flash_player of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._flash_player

    @flash_player.setter
    def flash_player(self, flash_player):
        """Sets the flash_player of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether allows the user to enable or disable Flash Player preference pane in System Preferences.  # noqa: E501

        :param flash_player: The flash_player of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._flash_player = flash_player

    @property
    def general(self):
        """Gets the general of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the General.  # noqa: E501

        :return: The general of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the General.  # noqa: E501

        :param general: The general of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._general = general

    @property
    def i_cloud(self):
        """Gets the i_cloud of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the iCloud.  # noqa: E501

        :return: The i_cloud of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._i_cloud

    @i_cloud.setter
    def i_cloud(self, i_cloud):
        """Sets the i_cloud of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the iCloud.  # noqa: E501

        :param i_cloud: The i_cloud of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._i_cloud = i_cloud

    @property
    def ink(self):
        """Gets the ink of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Ink.  # noqa: E501

        :return: The ink of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._ink

    @ink.setter
    def ink(self, ink):
        """Sets the ink of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Ink.  # noqa: E501

        :param ink: The ink of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._ink = ink

    @property
    def internet_accounts(self):
        """Gets the internet_accounts of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Internet Account.  # noqa: E501

        :return: The internet_accounts of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._internet_accounts

    @internet_accounts.setter
    def internet_accounts(self, internet_accounts):
        """Sets the internet_accounts of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Internet Account.  # noqa: E501

        :param internet_accounts: The internet_accounts of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._internet_accounts = internet_accounts

    @property
    def keyboard(self):
        """Gets the keyboard of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Keyboard.  # noqa: E501

        :return: The keyboard of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._keyboard

    @keyboard.setter
    def keyboard(self, keyboard):
        """Sets the keyboard of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Keyboard.  # noqa: E501

        :param keyboard: The keyboard of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._keyboard = keyboard

    @property
    def language_and_text(self):
        """Gets the language_and_text of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Language and Text.  # noqa: E501

        :return: The language_and_text of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._language_and_text

    @language_and_text.setter
    def language_and_text(self, language_and_text):
        """Sets the language_and_text of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Language and Text.  # noqa: E501

        :param language_and_text: The language_and_text of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._language_and_text = language_and_text

    @property
    def mission_control(self):
        """Gets the mission_control of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Mission Control.  # noqa: E501

        :return: The mission_control of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._mission_control

    @mission_control.setter
    def mission_control(self, mission_control):
        """Sets the mission_control of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Mission Control.  # noqa: E501

        :param mission_control: The mission_control of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._mission_control = mission_control

    @property
    def mobile_me(self):
        """Gets the mobile_me of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the MobileMe.  # noqa: E501

        :return: The mobile_me of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._mobile_me

    @mobile_me.setter
    def mobile_me(self, mobile_me):
        """Sets the mobile_me of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the MobileMe.  # noqa: E501

        :param mobile_me: The mobile_me of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._mobile_me = mobile_me

    @property
    def mouse(self):
        """Gets the mouse of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Mouse.  # noqa: E501

        :return: The mouse of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._mouse

    @mouse.setter
    def mouse(self, mouse):
        """Sets the mouse of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Mouse.  # noqa: E501

        :param mouse: The mouse of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._mouse = mouse

    @property
    def network(self):
        """Gets the network of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Network.  # noqa: E501

        :return: The network of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Network.  # noqa: E501

        :param network: The network of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._network = network

    @property
    def notifications(self):
        """Gets the notifications of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Notification.  # noqa: E501

        :return: The notifications of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Notification.  # noqa: E501

        :param notifications: The notifications of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._notifications = notifications

    @property
    def parental_controls(self):
        """Gets the parental_controls of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Parental Controls.  # noqa: E501

        :return: The parental_controls of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._parental_controls

    @parental_controls.setter
    def parental_controls(self, parental_controls):
        """Sets the parental_controls of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Parental Controls.  # noqa: E501

        :param parental_controls: The parental_controls of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._parental_controls = parental_controls

    @property
    def print_and_scan(self):
        """Gets the print_and_scan of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Print and Scan.  # noqa: E501

        :return: The print_and_scan of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._print_and_scan

    @print_and_scan.setter
    def print_and_scan(self, print_and_scan):
        """Sets the print_and_scan of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Print and Scan.  # noqa: E501

        :param print_and_scan: The print_and_scan of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._print_and_scan = print_and_scan

    @property
    def profiles(self):
        """Gets the profiles of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Profiles.  # noqa: E501

        :return: The profiles of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Profiles.  # noqa: E501

        :param profiles: The profiles of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._profiles = profiles

    @property
    def security_and_privacy(self):
        """Gets the security_and_privacy of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Security and Privacy.  # noqa: E501

        :return: The security_and_privacy of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._security_and_privacy

    @security_and_privacy.setter
    def security_and_privacy(self, security_and_privacy):
        """Sets the security_and_privacy of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Security and Privacy.  # noqa: E501

        :param security_and_privacy: The security_and_privacy of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._security_and_privacy = security_and_privacy

    @property
    def sharing(self):
        """Gets the sharing of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Sharing.  # noqa: E501

        :return: The sharing of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._sharing

    @sharing.setter
    def sharing(self, sharing):
        """Sets the sharing of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Sharing.  # noqa: E501

        :param sharing: The sharing of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._sharing = sharing

    @property
    def software_update(self):
        """Gets the software_update of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Software Update.  # noqa: E501

        :return: The software_update of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._software_update

    @software_update.setter
    def software_update(self, software_update):
        """Sets the software_update of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Software Update.  # noqa: E501

        :param software_update: The software_update of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._software_update = software_update

    @property
    def sound(self):
        """Gets the sound of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Sound.  # noqa: E501

        :return: The sound of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._sound

    @sound.setter
    def sound(self, sound):
        """Sets the sound of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Sound.  # noqa: E501

        :param sound: The sound of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._sound = sound

    @property
    def spotlight(self):
        """Gets the spotlight of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Spotlight.  # noqa: E501

        :return: The spotlight of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._spotlight

    @spotlight.setter
    def spotlight(self, spotlight):
        """Sets the spotlight of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Spotlight.  # noqa: E501

        :param spotlight: The spotlight of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._spotlight = spotlight

    @property
    def startup_disk(self):
        """Gets the startup_disk of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the StartupDisk.  # noqa: E501

        :return: The startup_disk of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._startup_disk

    @startup_disk.setter
    def startup_disk(self, startup_disk):
        """Sets the startup_disk of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the StartupDisk.  # noqa: E501

        :param startup_disk: The startup_disk of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._startup_disk = startup_disk

    @property
    def time_machine(self):
        """Gets the time_machine of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the TimeMachine.  # noqa: E501

        :return: The time_machine of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._time_machine

    @time_machine.setter
    def time_machine(self, time_machine):
        """Sets the time_machine of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the TimeMachine.  # noqa: E501

        :param time_machine: The time_machine of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._time_machine = time_machine

    @property
    def trackpad(self):
        """Gets the trackpad of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Trackpad.  # noqa: E501

        :return: The trackpad of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._trackpad

    @trackpad.setter
    def trackpad(self, trackpad):
        """Sets the trackpad of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Trackpad.  # noqa: E501

        :param trackpad: The trackpad of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._trackpad = trackpad

    @property
    def users_and_groups(self):
        """Gets the users_and_groups of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Users and Groups.  # noqa: E501

        :return: The users_and_groups of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._users_and_groups

    @users_and_groups.setter
    def users_and_groups(self, users_and_groups):
        """Sets the users_and_groups of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Users and Groups.  # noqa: E501

        :param users_and_groups: The users_and_groups of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._users_and_groups = users_and_groups

    @property
    def xsan(self):
        """Gets the xsan of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501

        Gets or sets a value indicating whether whether to enable of the Xsan.  # noqa: E501

        :return: The xsan of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :rtype: bool
        """
        return self._xsan

    @xsan.setter
    def xsan(self, xsan):
        """Sets the xsan of this AppleOsXRestrictionPreferencesPayloadEntity_.

        Gets or sets a value indicating whether whether to enable of the Xsan.  # noqa: E501

        :param xsan: The xsan of this AppleOsXRestrictionPreferencesPayloadEntity_.  # noqa: E501
        :type: bool
        """

        self._xsan = xsan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXRestrictionPreferencesPayloadEntity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXRestrictionPreferencesPayloadEntity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXRestrictionPreferencesPayloadEntity_):
            return True

        return self.to_dict() != other.to_dict()
