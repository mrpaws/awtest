# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class TunnelAccessV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_access': 'bool',
        'reason': 'str',
        'device_display_name': 'str',
        'username': 'str',
        'organization_group_name': 'str'
    }

    attribute_map = {
        'block_access': 'block_access',
        'reason': 'reason',
        'device_display_name': 'device_display_name',
        'username': 'username',
        'organization_group_name': 'organization_group_name'
    }

    def __init__(self, block_access=None, reason=None, device_display_name=None, username=None, organization_group_name=None, _configuration=None):  # noqa: E501
        """TunnelAccessV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._block_access = None
        self._reason = None
        self._device_display_name = None
        self._username = None
        self._organization_group_name = None
        self.discriminator = None

        if block_access is not None:
            self.block_access = block_access
        if reason is not None:
            self.reason = reason
        if device_display_name is not None:
            self.device_display_name = device_display_name
        if username is not None:
            self.username = username
        if organization_group_name is not None:
            self.organization_group_name = organization_group_name

    @property
    def block_access(self):
        """Gets the block_access of this TunnelAccessV1Model.  # noqa: E501

        Represent whether the device is blocked or not.  # noqa: E501

        :return: The block_access of this TunnelAccessV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._block_access

    @block_access.setter
    def block_access(self, block_access):
        """Sets the block_access of this TunnelAccessV1Model.

        Represent whether the device is blocked or not.  # noqa: E501

        :param block_access: The block_access of this TunnelAccessV1Model.  # noqa: E501
        :type: bool
        """

        self._block_access = block_access

    @property
    def reason(self):
        """Gets the reason of this TunnelAccessV1Model.  # noqa: E501

        Represent the reason for which device is blocked or unblocked  # noqa: E501

        :return: The reason of this TunnelAccessV1Model.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this TunnelAccessV1Model.

        Represent the reason for which device is blocked or unblocked  # noqa: E501

        :param reason: The reason of this TunnelAccessV1Model.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def device_display_name(self):
        """Gets the device_display_name of this TunnelAccessV1Model.  # noqa: E501

        Represent the device display name  # noqa: E501

        :return: The device_display_name of this TunnelAccessV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_display_name

    @device_display_name.setter
    def device_display_name(self, device_display_name):
        """Sets the device_display_name of this TunnelAccessV1Model.

        Represent the device display name  # noqa: E501

        :param device_display_name: The device_display_name of this TunnelAccessV1Model.  # noqa: E501
        :type: str
        """

        self._device_display_name = device_display_name

    @property
    def username(self):
        """Gets the username of this TunnelAccessV1Model.  # noqa: E501

        Represent the username.  # noqa: E501

        :return: The username of this TunnelAccessV1Model.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TunnelAccessV1Model.

        Represent the username.  # noqa: E501

        :param username: The username of this TunnelAccessV1Model.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def organization_group_name(self):
        """Gets the organization_group_name of this TunnelAccessV1Model.  # noqa: E501

        Represnt the organization group name.  # noqa: E501

        :return: The organization_group_name of this TunnelAccessV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_name

    @organization_group_name.setter
    def organization_group_name(self, organization_group_name):
        """Sets the organization_group_name of this TunnelAccessV1Model.

        Represnt the organization group name.  # noqa: E501

        :param organization_group_name: The organization_group_name of this TunnelAccessV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_name = organization_group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TunnelAccessV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TunnelAccessV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TunnelAccessV1Model):
            return True

        return self.to_dict() != other.to_dict()
