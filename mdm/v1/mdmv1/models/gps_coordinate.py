# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class GpsCoordinate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_time': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'elevation': 'str',
        'speed': 'str',
        'note': 'str',
        'device_id': 'EntityId_',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'sample_time': 'SampleTime',
        'latitude': 'Latitude',
        'longitude': 'Longitude',
        'elevation': 'Elevation',
        'speed': 'Speed',
        'note': 'Note',
        'device_id': 'DeviceId',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, sample_time=None, latitude=None, longitude=None, elevation=None, speed=None, note=None, device_id=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """GpsCoordinate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sample_time = None
        self._latitude = None
        self._longitude = None
        self._elevation = None
        self._speed = None
        self._note = None
        self._device_id = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if sample_time is not None:
            self.sample_time = sample_time
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if elevation is not None:
            self.elevation = elevation
        if speed is not None:
            self.speed = speed
        if note is not None:
            self.note = note
        if device_id is not None:
            self.device_id = device_id
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def sample_time(self):
        """Gets the sample_time of this GpsCoordinate.  # noqa: E501

        Gets or sets date time of GPS Data collected.  # noqa: E501

        :return: The sample_time of this GpsCoordinate.  # noqa: E501
        :rtype: str
        """
        return self._sample_time

    @sample_time.setter
    def sample_time(self, sample_time):
        """Sets the sample_time of this GpsCoordinate.

        Gets or sets date time of GPS Data collected.  # noqa: E501

        :param sample_time: The sample_time of this GpsCoordinate.  # noqa: E501
        :type: str
        """

        self._sample_time = sample_time

    @property
    def latitude(self):
        """Gets the latitude of this GpsCoordinate.  # noqa: E501

        Gets or sets latitude of GPS Coordinate.  # noqa: E501

        :return: The latitude of this GpsCoordinate.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GpsCoordinate.

        Gets or sets latitude of GPS Coordinate.  # noqa: E501

        :param latitude: The latitude of this GpsCoordinate.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GpsCoordinate.  # noqa: E501

        Gets or sets longitude of GPS Coordinate.  # noqa: E501

        :return: The longitude of this GpsCoordinate.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GpsCoordinate.

        Gets or sets longitude of GPS Coordinate.  # noqa: E501

        :param longitude: The longitude of this GpsCoordinate.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def elevation(self):
        """Gets the elevation of this GpsCoordinate.  # noqa: E501

        Gets or sets elevation of GPS Coordinate.  # noqa: E501

        :return: The elevation of this GpsCoordinate.  # noqa: E501
        :rtype: str
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this GpsCoordinate.

        Gets or sets elevation of GPS Coordinate.  # noqa: E501

        :param elevation: The elevation of this GpsCoordinate.  # noqa: E501
        :type: str
        """

        self._elevation = elevation

    @property
    def speed(self):
        """Gets the speed of this GpsCoordinate.  # noqa: E501

        Gets or sets speed of GPS Coordinate.  # noqa: E501

        :return: The speed of this GpsCoordinate.  # noqa: E501
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this GpsCoordinate.

        Gets or sets speed of GPS Coordinate.  # noqa: E501

        :param speed: The speed of this GpsCoordinate.  # noqa: E501
        :type: str
        """

        self._speed = speed

    @property
    def note(self):
        """Gets the note of this GpsCoordinate.  # noqa: E501

        Gets or sets message from GPS.  # noqa: E501

        :return: The note of this GpsCoordinate.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this GpsCoordinate.

        Gets or sets message from GPS.  # noqa: E501

        :param note: The note of this GpsCoordinate.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def device_id(self):
        """Gets the device_id of this GpsCoordinate.  # noqa: E501

        Gets or sets device ID.  # noqa: E501

        :return: The device_id of this GpsCoordinate.  # noqa: E501
        :rtype: EntityId_
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this GpsCoordinate.

        Gets or sets device ID.  # noqa: E501

        :param device_id: The device_id of this GpsCoordinate.  # noqa: E501
        :type: EntityId_
        """

        self._device_id = device_id

    @property
    def id(self):
        """Gets the id of this GpsCoordinate.  # noqa: E501


        :return: The id of this GpsCoordinate.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GpsCoordinate.


        :param id: The id of this GpsCoordinate.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this GpsCoordinate.  # noqa: E501


        :return: The uuid of this GpsCoordinate.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this GpsCoordinate.


        :param uuid: The uuid of this GpsCoordinate.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GpsCoordinate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GpsCoordinate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GpsCoordinate):
            return True

        return self.to_dict() != other.to_dict()
