# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkRestrictionsPayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_contact_sharing': 'int',
        'allow_copy_paste': 'int',
        'allow_non_whitelisted_ime': 'bool',
        'required_ime_option_list': 'str',
        'allow_notifcations_in_full': 'int',
        'allow_camera': 'bool',
        'allow_factory_reset': 'bool',
        'allow_bluetooth': 'bool',
        'allow_bluetooth_android_o': 'bool',
        'allow_outgoing_bluetooth_connections': 'bool',
        'allow_usb_debugging': 'bool',
        'allow_allow_backup_services': 'bool',
        'allow_wifi_changes': 'bool',
        'allow_all_tethering': 'bool',
        'allow_non_market_app_install': 'bool',
        'allow_usb_mass_storage': 'bool',
        'install_policy_type': 'bool',
        'allowed_accounts': 'int',
        'allowed_email_address': 'str',
        'allow_chrome': 'bool',
        'allow_screen_capture': 'bool',
        'allow_account_changes': 'bool',
        'allow_remove_work_account': 'bool',
        'allow_outgoing_phone_calls': 'bool',
        'allow_sms': 'bool',
        'allow_credentials_changes': 'bool',
        'allow_keyguard_features': 'bool',
        'allow_keyguard_camera': 'bool',
        'allow_keyguard_notifications': 'bool',
        'allow_keyguard_fingerprint': 'bool',
        'allow_keyguard_trust_agent': 'bool',
        'allow_keyguard_unredacted': 'bool',
        'allow_modifying_apps_settings': 'bool',
        'allow_installing_apps': 'bool',
        'allow_uninstalling_apps': 'bool',
        'allow_disable_app_verify': 'bool',
        'allow_usb_file_transfer': 'bool',
        'allow_vpn_changes': 'bool',
        'allow_mobile_changes': 'bool',
        'allow_work_personal_paste': 'bool',
        'allow_work_to_access_personal': 'bool',
        'allow_personal_to_access_work': 'bool',
        'allow_personal_share_with_work': 'bool',
        'allow_work_share_with_personal': 'bool',
        'allow_work_contacts_in_phone': 'bool',
        'allow_contacts': 'bool',
        'force_screen_on_plugged_ac': 'bool',
        'force_screen_on_plugged_usb': 'bool',
        'force_screen_on_plugged_wireless': 'bool',
        'allow_status_bar': 'bool',
        'allow_keyguard': 'bool',
        'allow_adding_users': 'bool',
        'allow_removing_users': 'bool',
        'allow_safe_boot': 'bool',
        'allow_nfc': 'bool',
        'allow_managed_wifi_changes': 'bool',
        'allow_data_roaming': 'bool',
        'allow_location_access': 'int',
        'allow_bluetooth_contact_sharing': 'bool',
        'allow_wallpaper_change': 'bool',
        'allow_user_icon_change': 'bool',
        'allow_non_google_accounts': 'bool',
        'whitelist_approved_accessibility_services': 'bool',
        'accessibility_services_permitted_app_ids': 'str',
        'skip_first_use_hints': 'bool',
        'allow_system_windows': 'bool',
        'allow_system_error_dialogs': 'bool',
        'android_for_work_samsung_restrictions_payload': 'AndroidForWorkSamsungRestrictionsPayloadV2Entity_',
        'android_for_work_work_profile_restrictions_payload': 'AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_'
    }

    attribute_map = {
        'allow_contact_sharing': 'AllowContactSharing',
        'allow_copy_paste': 'AllowCopyPaste',
        'allow_non_whitelisted_ime': 'AllowNonWhitelistedIME',
        'required_ime_option_list': 'RequiredIMEOptionList',
        'allow_notifcations_in_full': 'AllowNotifcationsInFull',
        'allow_camera': 'AllowCamera',
        'allow_factory_reset': 'AllowFactoryReset',
        'allow_bluetooth': 'AllowBluetooth',
        'allow_bluetooth_android_o': 'AllowBluetoothAndroidO',
        'allow_outgoing_bluetooth_connections': 'AllowOutgoingBluetoothConnections',
        'allow_usb_debugging': 'AllowUSBDebugging',
        'allow_allow_backup_services': 'AllowAllowBackupServices',
        'allow_wifi_changes': 'AllowWifiChanges',
        'allow_all_tethering': 'AllowAllTethering',
        'allow_non_market_app_install': 'AllowNonMarketAppInstall',
        'allow_usb_mass_storage': 'AllowUSBMassStorage',
        'install_policy_type': 'InstallPolicyType',
        'allowed_accounts': 'AllowedAccounts',
        'allowed_email_address': 'AllowedEmailAddress',
        'allow_chrome': 'AllowChrome',
        'allow_screen_capture': 'AllowScreenCapture',
        'allow_account_changes': 'AllowAccountChanges',
        'allow_remove_work_account': 'AllowRemoveWorkAccount',
        'allow_outgoing_phone_calls': 'AllowOutgoingPhoneCalls',
        'allow_sms': 'AllowSMS',
        'allow_credentials_changes': 'AllowCredentialsChanges',
        'allow_keyguard_features': 'AllowKeyguardFeatures',
        'allow_keyguard_camera': 'AllowKeyguardCamera',
        'allow_keyguard_notifications': 'AllowKeyguardNotifications',
        'allow_keyguard_fingerprint': 'AllowKeyguardFingerprint',
        'allow_keyguard_trust_agent': 'AllowKeyguardTrustAgent',
        'allow_keyguard_unredacted': 'AllowKeyguardUnredacted',
        'allow_modifying_apps_settings': 'AllowModifyingAppsSettings',
        'allow_installing_apps': 'AllowInstallingApps',
        'allow_uninstalling_apps': 'AllowUninstallingApps',
        'allow_disable_app_verify': 'AllowDisableAppVerify',
        'allow_usb_file_transfer': 'AllowUSBFileTransfer',
        'allow_vpn_changes': 'AllowVPNChanges',
        'allow_mobile_changes': 'AllowMobileChanges',
        'allow_work_personal_paste': 'AllowWorkPersonalPaste',
        'allow_work_to_access_personal': 'AllowWorkToAccessPersonal',
        'allow_personal_to_access_work': 'AllowPersonalToAccessWork',
        'allow_personal_share_with_work': 'AllowPersonalShareWithWork',
        'allow_work_share_with_personal': 'AllowWorkShareWithPersonal',
        'allow_work_contacts_in_phone': 'AllowWorkContactsInPhone',
        'allow_contacts': 'AllowContacts',
        'force_screen_on_plugged_ac': 'ForceScreenOnPluggedAC',
        'force_screen_on_plugged_usb': 'ForceScreenOnPluggedUSB',
        'force_screen_on_plugged_wireless': 'ForceScreenOnPluggedWireless',
        'allow_status_bar': 'AllowStatusBar',
        'allow_keyguard': 'AllowKeyguard',
        'allow_adding_users': 'AllowAddingUsers',
        'allow_removing_users': 'AllowRemovingUsers',
        'allow_safe_boot': 'AllowSafeBoot',
        'allow_nfc': 'AllowNFC',
        'allow_managed_wifi_changes': 'AllowManagedWifiChanges',
        'allow_data_roaming': 'AllowDataRoaming',
        'allow_location_access': 'AllowLocationAccess',
        'allow_bluetooth_contact_sharing': 'AllowBluetoothContactSharing',
        'allow_wallpaper_change': 'AllowWallpaperChange',
        'allow_user_icon_change': 'AllowUserIconChange',
        'allow_non_google_accounts': 'AllowNonGoogleAccounts',
        'whitelist_approved_accessibility_services': 'WhitelistApprovedAccessibilityServices',
        'accessibility_services_permitted_app_ids': 'AccessibilityServicesPermittedAppIds',
        'skip_first_use_hints': 'SkipFirstUseHints',
        'allow_system_windows': 'AllowSystemWindows',
        'allow_system_error_dialogs': 'AllowSystemErrorDialogs',
        'android_for_work_samsung_restrictions_payload': 'AndroidForWorkSamsungRestrictionsPayload',
        'android_for_work_work_profile_restrictions_payload': 'AndroidForWorkWorkProfileRestrictionsPayload'
    }

    def __init__(self, allow_contact_sharing=None, allow_copy_paste=None, allow_non_whitelisted_ime=None, required_ime_option_list=None, allow_notifcations_in_full=None, allow_camera=None, allow_factory_reset=None, allow_bluetooth=None, allow_bluetooth_android_o=None, allow_outgoing_bluetooth_connections=None, allow_usb_debugging=None, allow_allow_backup_services=None, allow_wifi_changes=None, allow_all_tethering=None, allow_non_market_app_install=None, allow_usb_mass_storage=None, install_policy_type=None, allowed_accounts=None, allowed_email_address=None, allow_chrome=None, allow_screen_capture=None, allow_account_changes=None, allow_remove_work_account=None, allow_outgoing_phone_calls=None, allow_sms=None, allow_credentials_changes=None, allow_keyguard_features=None, allow_keyguard_camera=None, allow_keyguard_notifications=None, allow_keyguard_fingerprint=None, allow_keyguard_trust_agent=None, allow_keyguard_unredacted=None, allow_modifying_apps_settings=None, allow_installing_apps=None, allow_uninstalling_apps=None, allow_disable_app_verify=None, allow_usb_file_transfer=None, allow_vpn_changes=None, allow_mobile_changes=None, allow_work_personal_paste=None, allow_work_to_access_personal=None, allow_personal_to_access_work=None, allow_personal_share_with_work=None, allow_work_share_with_personal=None, allow_work_contacts_in_phone=None, allow_contacts=None, force_screen_on_plugged_ac=None, force_screen_on_plugged_usb=None, force_screen_on_plugged_wireless=None, allow_status_bar=None, allow_keyguard=None, allow_adding_users=None, allow_removing_users=None, allow_safe_boot=None, allow_nfc=None, allow_managed_wifi_changes=None, allow_data_roaming=None, allow_location_access=None, allow_bluetooth_contact_sharing=None, allow_wallpaper_change=None, allow_user_icon_change=None, allow_non_google_accounts=None, whitelist_approved_accessibility_services=None, accessibility_services_permitted_app_ids=None, skip_first_use_hints=None, allow_system_windows=None, allow_system_error_dialogs=None, android_for_work_samsung_restrictions_payload=None, android_for_work_work_profile_restrictions_payload=None, _configuration=None):  # noqa: E501
        """AndroidForWorkRestrictionsPayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_contact_sharing = None
        self._allow_copy_paste = None
        self._allow_non_whitelisted_ime = None
        self._required_ime_option_list = None
        self._allow_notifcations_in_full = None
        self._allow_camera = None
        self._allow_factory_reset = None
        self._allow_bluetooth = None
        self._allow_bluetooth_android_o = None
        self._allow_outgoing_bluetooth_connections = None
        self._allow_usb_debugging = None
        self._allow_allow_backup_services = None
        self._allow_wifi_changes = None
        self._allow_all_tethering = None
        self._allow_non_market_app_install = None
        self._allow_usb_mass_storage = None
        self._install_policy_type = None
        self._allowed_accounts = None
        self._allowed_email_address = None
        self._allow_chrome = None
        self._allow_screen_capture = None
        self._allow_account_changes = None
        self._allow_remove_work_account = None
        self._allow_outgoing_phone_calls = None
        self._allow_sms = None
        self._allow_credentials_changes = None
        self._allow_keyguard_features = None
        self._allow_keyguard_camera = None
        self._allow_keyguard_notifications = None
        self._allow_keyguard_fingerprint = None
        self._allow_keyguard_trust_agent = None
        self._allow_keyguard_unredacted = None
        self._allow_modifying_apps_settings = None
        self._allow_installing_apps = None
        self._allow_uninstalling_apps = None
        self._allow_disable_app_verify = None
        self._allow_usb_file_transfer = None
        self._allow_vpn_changes = None
        self._allow_mobile_changes = None
        self._allow_work_personal_paste = None
        self._allow_work_to_access_personal = None
        self._allow_personal_to_access_work = None
        self._allow_personal_share_with_work = None
        self._allow_work_share_with_personal = None
        self._allow_work_contacts_in_phone = None
        self._allow_contacts = None
        self._force_screen_on_plugged_ac = None
        self._force_screen_on_plugged_usb = None
        self._force_screen_on_plugged_wireless = None
        self._allow_status_bar = None
        self._allow_keyguard = None
        self._allow_adding_users = None
        self._allow_removing_users = None
        self._allow_safe_boot = None
        self._allow_nfc = None
        self._allow_managed_wifi_changes = None
        self._allow_data_roaming = None
        self._allow_location_access = None
        self._allow_bluetooth_contact_sharing = None
        self._allow_wallpaper_change = None
        self._allow_user_icon_change = None
        self._allow_non_google_accounts = None
        self._whitelist_approved_accessibility_services = None
        self._accessibility_services_permitted_app_ids = None
        self._skip_first_use_hints = None
        self._allow_system_windows = None
        self._allow_system_error_dialogs = None
        self._android_for_work_samsung_restrictions_payload = None
        self._android_for_work_work_profile_restrictions_payload = None
        self.discriminator = None

        if allow_contact_sharing is not None:
            self.allow_contact_sharing = allow_contact_sharing
        if allow_copy_paste is not None:
            self.allow_copy_paste = allow_copy_paste
        if allow_non_whitelisted_ime is not None:
            self.allow_non_whitelisted_ime = allow_non_whitelisted_ime
        if required_ime_option_list is not None:
            self.required_ime_option_list = required_ime_option_list
        if allow_notifcations_in_full is not None:
            self.allow_notifcations_in_full = allow_notifcations_in_full
        if allow_camera is not None:
            self.allow_camera = allow_camera
        if allow_factory_reset is not None:
            self.allow_factory_reset = allow_factory_reset
        if allow_bluetooth is not None:
            self.allow_bluetooth = allow_bluetooth
        if allow_bluetooth_android_o is not None:
            self.allow_bluetooth_android_o = allow_bluetooth_android_o
        if allow_outgoing_bluetooth_connections is not None:
            self.allow_outgoing_bluetooth_connections = allow_outgoing_bluetooth_connections
        if allow_usb_debugging is not None:
            self.allow_usb_debugging = allow_usb_debugging
        if allow_allow_backup_services is not None:
            self.allow_allow_backup_services = allow_allow_backup_services
        if allow_wifi_changes is not None:
            self.allow_wifi_changes = allow_wifi_changes
        if allow_all_tethering is not None:
            self.allow_all_tethering = allow_all_tethering
        if allow_non_market_app_install is not None:
            self.allow_non_market_app_install = allow_non_market_app_install
        if allow_usb_mass_storage is not None:
            self.allow_usb_mass_storage = allow_usb_mass_storage
        if install_policy_type is not None:
            self.install_policy_type = install_policy_type
        if allowed_accounts is not None:
            self.allowed_accounts = allowed_accounts
        if allowed_email_address is not None:
            self.allowed_email_address = allowed_email_address
        if allow_chrome is not None:
            self.allow_chrome = allow_chrome
        if allow_screen_capture is not None:
            self.allow_screen_capture = allow_screen_capture
        if allow_account_changes is not None:
            self.allow_account_changes = allow_account_changes
        if allow_remove_work_account is not None:
            self.allow_remove_work_account = allow_remove_work_account
        if allow_outgoing_phone_calls is not None:
            self.allow_outgoing_phone_calls = allow_outgoing_phone_calls
        if allow_sms is not None:
            self.allow_sms = allow_sms
        if allow_credentials_changes is not None:
            self.allow_credentials_changes = allow_credentials_changes
        if allow_keyguard_features is not None:
            self.allow_keyguard_features = allow_keyguard_features
        if allow_keyguard_camera is not None:
            self.allow_keyguard_camera = allow_keyguard_camera
        if allow_keyguard_notifications is not None:
            self.allow_keyguard_notifications = allow_keyguard_notifications
        if allow_keyguard_fingerprint is not None:
            self.allow_keyguard_fingerprint = allow_keyguard_fingerprint
        if allow_keyguard_trust_agent is not None:
            self.allow_keyguard_trust_agent = allow_keyguard_trust_agent
        if allow_keyguard_unredacted is not None:
            self.allow_keyguard_unredacted = allow_keyguard_unredacted
        if allow_modifying_apps_settings is not None:
            self.allow_modifying_apps_settings = allow_modifying_apps_settings
        if allow_installing_apps is not None:
            self.allow_installing_apps = allow_installing_apps
        if allow_uninstalling_apps is not None:
            self.allow_uninstalling_apps = allow_uninstalling_apps
        if allow_disable_app_verify is not None:
            self.allow_disable_app_verify = allow_disable_app_verify
        if allow_usb_file_transfer is not None:
            self.allow_usb_file_transfer = allow_usb_file_transfer
        if allow_vpn_changes is not None:
            self.allow_vpn_changes = allow_vpn_changes
        if allow_mobile_changes is not None:
            self.allow_mobile_changes = allow_mobile_changes
        if allow_work_personal_paste is not None:
            self.allow_work_personal_paste = allow_work_personal_paste
        if allow_work_to_access_personal is not None:
            self.allow_work_to_access_personal = allow_work_to_access_personal
        if allow_personal_to_access_work is not None:
            self.allow_personal_to_access_work = allow_personal_to_access_work
        if allow_personal_share_with_work is not None:
            self.allow_personal_share_with_work = allow_personal_share_with_work
        if allow_work_share_with_personal is not None:
            self.allow_work_share_with_personal = allow_work_share_with_personal
        if allow_work_contacts_in_phone is not None:
            self.allow_work_contacts_in_phone = allow_work_contacts_in_phone
        if allow_contacts is not None:
            self.allow_contacts = allow_contacts
        if force_screen_on_plugged_ac is not None:
            self.force_screen_on_plugged_ac = force_screen_on_plugged_ac
        if force_screen_on_plugged_usb is not None:
            self.force_screen_on_plugged_usb = force_screen_on_plugged_usb
        if force_screen_on_plugged_wireless is not None:
            self.force_screen_on_plugged_wireless = force_screen_on_plugged_wireless
        if allow_status_bar is not None:
            self.allow_status_bar = allow_status_bar
        if allow_keyguard is not None:
            self.allow_keyguard = allow_keyguard
        if allow_adding_users is not None:
            self.allow_adding_users = allow_adding_users
        if allow_removing_users is not None:
            self.allow_removing_users = allow_removing_users
        if allow_safe_boot is not None:
            self.allow_safe_boot = allow_safe_boot
        if allow_nfc is not None:
            self.allow_nfc = allow_nfc
        if allow_managed_wifi_changes is not None:
            self.allow_managed_wifi_changes = allow_managed_wifi_changes
        if allow_data_roaming is not None:
            self.allow_data_roaming = allow_data_roaming
        if allow_location_access is not None:
            self.allow_location_access = allow_location_access
        if allow_bluetooth_contact_sharing is not None:
            self.allow_bluetooth_contact_sharing = allow_bluetooth_contact_sharing
        if allow_wallpaper_change is not None:
            self.allow_wallpaper_change = allow_wallpaper_change
        if allow_user_icon_change is not None:
            self.allow_user_icon_change = allow_user_icon_change
        if allow_non_google_accounts is not None:
            self.allow_non_google_accounts = allow_non_google_accounts
        if whitelist_approved_accessibility_services is not None:
            self.whitelist_approved_accessibility_services = whitelist_approved_accessibility_services
        if accessibility_services_permitted_app_ids is not None:
            self.accessibility_services_permitted_app_ids = accessibility_services_permitted_app_ids
        if skip_first_use_hints is not None:
            self.skip_first_use_hints = skip_first_use_hints
        if allow_system_windows is not None:
            self.allow_system_windows = allow_system_windows
        if allow_system_error_dialogs is not None:
            self.allow_system_error_dialogs = allow_system_error_dialogs
        if android_for_work_samsung_restrictions_payload is not None:
            self.android_for_work_samsung_restrictions_payload = android_for_work_samsung_restrictions_payload
        if android_for_work_work_profile_restrictions_payload is not None:
            self.android_for_work_work_profile_restrictions_payload = android_for_work_work_profile_restrictions_payload

    @property
    def allow_contact_sharing(self):
        """Gets the allow_contact_sharing of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the allow contact sharing.  # noqa: E501

        :return: The allow_contact_sharing of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._allow_contact_sharing

    @allow_contact_sharing.setter
    def allow_contact_sharing(self, allow_contact_sharing):
        """Sets the allow_contact_sharing of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the allow contact sharing.  # noqa: E501

        :param allow_contact_sharing: The allow_contact_sharing of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._allow_contact_sharing = allow_contact_sharing

    @property
    def allow_copy_paste(self):
        """Gets the allow_copy_paste of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the allow copy paste value.  # noqa: E501

        :return: The allow_copy_paste of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._allow_copy_paste

    @allow_copy_paste.setter
    def allow_copy_paste(self, allow_copy_paste):
        """Sets the allow_copy_paste of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the allow copy paste value.  # noqa: E501

        :param allow_copy_paste: The allow_copy_paste of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._allow_copy_paste = allow_copy_paste

    @property
    def allow_non_whitelisted_ime(self):
        """Gets the allow_non_whitelisted_ime of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow non whitelisted IME].  # noqa: E501

        :return: The allow_non_whitelisted_ime of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_non_whitelisted_ime

    @allow_non_whitelisted_ime.setter
    def allow_non_whitelisted_ime(self, allow_non_whitelisted_ime):
        """Sets the allow_non_whitelisted_ime of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow non whitelisted IME].  # noqa: E501

        :param allow_non_whitelisted_ime: The allow_non_whitelisted_ime of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_non_whitelisted_ime = allow_non_whitelisted_ime

    @property
    def required_ime_option_list(self):
        """Gets the required_ime_option_list of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the required IME option list.  # noqa: E501

        :return: The required_ime_option_list of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._required_ime_option_list

    @required_ime_option_list.setter
    def required_ime_option_list(self, required_ime_option_list):
        """Sets the required_ime_option_list of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the required IME option list.  # noqa: E501

        :param required_ime_option_list: The required_ime_option_list of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._required_ime_option_list = required_ime_option_list

    @property
    def allow_notifcations_in_full(self):
        """Gets the allow_notifcations_in_full of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the allow notifcations in full value.  # noqa: E501

        :return: The allow_notifcations_in_full of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._allow_notifcations_in_full

    @allow_notifcations_in_full.setter
    def allow_notifcations_in_full(self, allow_notifcations_in_full):
        """Sets the allow_notifcations_in_full of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the allow notifcations in full value.  # noqa: E501

        :param allow_notifcations_in_full: The allow_notifcations_in_full of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._allow_notifcations_in_full = allow_notifcations_in_full

    @property
    def allow_camera(self):
        """Gets the allow_camera of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow camera].  # noqa: E501

        :return: The allow_camera of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_camera

    @allow_camera.setter
    def allow_camera(self, allow_camera):
        """Sets the allow_camera of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow camera].  # noqa: E501

        :param allow_camera: The allow_camera of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_camera = allow_camera

    @property
    def allow_factory_reset(self):
        """Gets the allow_factory_reset of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow factory reset].  # noqa: E501

        :return: The allow_factory_reset of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_factory_reset

    @allow_factory_reset.setter
    def allow_factory_reset(self, allow_factory_reset):
        """Sets the allow_factory_reset of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow factory reset].  # noqa: E501

        :param allow_factory_reset: The allow_factory_reset of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_factory_reset = allow_factory_reset

    @property
    def allow_bluetooth(self):
        """Gets the allow_bluetooth of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow bluetooth].  # noqa: E501

        :return: The allow_bluetooth of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth

    @allow_bluetooth.setter
    def allow_bluetooth(self, allow_bluetooth):
        """Sets the allow_bluetooth of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow bluetooth].  # noqa: E501

        :param allow_bluetooth: The allow_bluetooth of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth = allow_bluetooth

    @property
    def allow_bluetooth_android_o(self):
        """Gets the allow_bluetooth_android_o of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow bluetooth android o].  # noqa: E501

        :return: The allow_bluetooth_android_o of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth_android_o

    @allow_bluetooth_android_o.setter
    def allow_bluetooth_android_o(self, allow_bluetooth_android_o):
        """Sets the allow_bluetooth_android_o of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow bluetooth android o].  # noqa: E501

        :param allow_bluetooth_android_o: The allow_bluetooth_android_o of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth_android_o = allow_bluetooth_android_o

    @property
    def allow_outgoing_bluetooth_connections(self):
        """Gets the allow_outgoing_bluetooth_connections of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow outgoing bluetooth connections].  # noqa: E501

        :return: The allow_outgoing_bluetooth_connections of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_outgoing_bluetooth_connections

    @allow_outgoing_bluetooth_connections.setter
    def allow_outgoing_bluetooth_connections(self, allow_outgoing_bluetooth_connections):
        """Sets the allow_outgoing_bluetooth_connections of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow outgoing bluetooth connections].  # noqa: E501

        :param allow_outgoing_bluetooth_connections: The allow_outgoing_bluetooth_connections of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_outgoing_bluetooth_connections = allow_outgoing_bluetooth_connections

    @property
    def allow_usb_debugging(self):
        """Gets the allow_usb_debugging of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow usb debugging].  # noqa: E501

        :return: The allow_usb_debugging of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_debugging

    @allow_usb_debugging.setter
    def allow_usb_debugging(self, allow_usb_debugging):
        """Sets the allow_usb_debugging of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow usb debugging].  # noqa: E501

        :param allow_usb_debugging: The allow_usb_debugging of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_usb_debugging = allow_usb_debugging

    @property
    def allow_allow_backup_services(self):
        """Gets the allow_allow_backup_services of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow backup services].  # noqa: E501

        :return: The allow_allow_backup_services of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_allow_backup_services

    @allow_allow_backup_services.setter
    def allow_allow_backup_services(self, allow_allow_backup_services):
        """Sets the allow_allow_backup_services of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow backup services].  # noqa: E501

        :param allow_allow_backup_services: The allow_allow_backup_services of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_allow_backup_services = allow_allow_backup_services

    @property
    def allow_wifi_changes(self):
        """Gets the allow_wifi_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow wifi changes].  # noqa: E501

        :return: The allow_wifi_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wifi_changes

    @allow_wifi_changes.setter
    def allow_wifi_changes(self, allow_wifi_changes):
        """Sets the allow_wifi_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow wifi changes].  # noqa: E501

        :param allow_wifi_changes: The allow_wifi_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_wifi_changes = allow_wifi_changes

    @property
    def allow_all_tethering(self):
        """Gets the allow_all_tethering of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow all tethering].  # noqa: E501

        :return: The allow_all_tethering of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_all_tethering

    @allow_all_tethering.setter
    def allow_all_tethering(self, allow_all_tethering):
        """Sets the allow_all_tethering of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow all tethering].  # noqa: E501

        :param allow_all_tethering: The allow_all_tethering of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_all_tethering = allow_all_tethering

    @property
    def allow_non_market_app_install(self):
        """Gets the allow_non_market_app_install of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow non market application install].  # noqa: E501

        :return: The allow_non_market_app_install of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_non_market_app_install

    @allow_non_market_app_install.setter
    def allow_non_market_app_install(self, allow_non_market_app_install):
        """Sets the allow_non_market_app_install of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow non market application install].  # noqa: E501

        :param allow_non_market_app_install: The allow_non_market_app_install of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_non_market_app_install = allow_non_market_app_install

    @property
    def allow_usb_mass_storage(self):
        """Gets the allow_usb_mass_storage of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow usb mass storage].  # noqa: E501

        :return: The allow_usb_mass_storage of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_mass_storage

    @allow_usb_mass_storage.setter
    def allow_usb_mass_storage(self, allow_usb_mass_storage):
        """Sets the allow_usb_mass_storage of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow usb mass storage].  # noqa: E501

        :param allow_usb_mass_storage: The allow_usb_mass_storage of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_usb_mass_storage = allow_usb_mass_storage

    @property
    def install_policy_type(self):
        """Gets the install_policy_type of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow google play].  # noqa: E501

        :return: The install_policy_type of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._install_policy_type

    @install_policy_type.setter
    def install_policy_type(self, install_policy_type):
        """Sets the install_policy_type of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow google play].  # noqa: E501

        :param install_policy_type: The install_policy_type of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._install_policy_type = install_policy_type

    @property
    def allowed_accounts(self):
        """Gets the allowed_accounts of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the allowed accounts.  # noqa: E501

        :return: The allowed_accounts of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._allowed_accounts

    @allowed_accounts.setter
    def allowed_accounts(self, allowed_accounts):
        """Sets the allowed_accounts of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the allowed accounts.  # noqa: E501

        :param allowed_accounts: The allowed_accounts of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                allowed_accounts not in allowed_values):
            raise ValueError(
                "Invalid value for `allowed_accounts` ({0}), must be one of {1}"  # noqa: E501
                .format(allowed_accounts, allowed_values)
            )

        self._allowed_accounts = allowed_accounts

    @property
    def allowed_email_address(self):
        """Gets the allowed_email_address of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the allowed email address.  # noqa: E501

        :return: The allowed_email_address of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._allowed_email_address

    @allowed_email_address.setter
    def allowed_email_address(self, allowed_email_address):
        """Sets the allowed_email_address of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the allowed email address.  # noqa: E501

        :param allowed_email_address: The allowed_email_address of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._allowed_email_address = allowed_email_address

    @property
    def allow_chrome(self):
        """Gets the allow_chrome of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow chrome].  # noqa: E501

        :return: The allow_chrome of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_chrome

    @allow_chrome.setter
    def allow_chrome(self, allow_chrome):
        """Sets the allow_chrome of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow chrome].  # noqa: E501

        :param allow_chrome: The allow_chrome of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_chrome = allow_chrome

    @property
    def allow_screen_capture(self):
        """Gets the allow_screen_capture of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow screen capture].  # noqa: E501

        :return: The allow_screen_capture of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_screen_capture

    @allow_screen_capture.setter
    def allow_screen_capture(self, allow_screen_capture):
        """Sets the allow_screen_capture of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow screen capture].  # noqa: E501

        :param allow_screen_capture: The allow_screen_capture of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_screen_capture = allow_screen_capture

    @property
    def allow_account_changes(self):
        """Gets the allow_account_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow account changes].  # noqa: E501

        :return: The allow_account_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_account_changes

    @allow_account_changes.setter
    def allow_account_changes(self, allow_account_changes):
        """Sets the allow_account_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow account changes].  # noqa: E501

        :param allow_account_changes: The allow_account_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_account_changes = allow_account_changes

    @property
    def allow_remove_work_account(self):
        """Gets the allow_remove_work_account of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow remove work account].  # noqa: E501

        :return: The allow_remove_work_account of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_remove_work_account

    @allow_remove_work_account.setter
    def allow_remove_work_account(self, allow_remove_work_account):
        """Sets the allow_remove_work_account of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow remove work account].  # noqa: E501

        :param allow_remove_work_account: The allow_remove_work_account of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_remove_work_account = allow_remove_work_account

    @property
    def allow_outgoing_phone_calls(self):
        """Gets the allow_outgoing_phone_calls of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow outgoing phone calls].  # noqa: E501

        :return: The allow_outgoing_phone_calls of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_outgoing_phone_calls

    @allow_outgoing_phone_calls.setter
    def allow_outgoing_phone_calls(self, allow_outgoing_phone_calls):
        """Sets the allow_outgoing_phone_calls of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow outgoing phone calls].  # noqa: E501

        :param allow_outgoing_phone_calls: The allow_outgoing_phone_calls of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_outgoing_phone_calls = allow_outgoing_phone_calls

    @property
    def allow_sms(self):
        """Gets the allow_sms of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow SMS].  # noqa: E501

        :return: The allow_sms of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sms

    @allow_sms.setter
    def allow_sms(self, allow_sms):
        """Sets the allow_sms of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow SMS].  # noqa: E501

        :param allow_sms: The allow_sms of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_sms = allow_sms

    @property
    def allow_credentials_changes(self):
        """Gets the allow_credentials_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow credentials changes].  # noqa: E501

        :return: The allow_credentials_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_credentials_changes

    @allow_credentials_changes.setter
    def allow_credentials_changes(self, allow_credentials_changes):
        """Sets the allow_credentials_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow credentials changes].  # noqa: E501

        :param allow_credentials_changes: The allow_credentials_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_credentials_changes = allow_credentials_changes

    @property
    def allow_keyguard_features(self):
        """Gets the allow_keyguard_features of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard features].  # noqa: E501

        :return: The allow_keyguard_features of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_features

    @allow_keyguard_features.setter
    def allow_keyguard_features(self, allow_keyguard_features):
        """Sets the allow_keyguard_features of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow keyguard features].  # noqa: E501

        :param allow_keyguard_features: The allow_keyguard_features of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_features = allow_keyguard_features

    @property
    def allow_keyguard_camera(self):
        """Gets the allow_keyguard_camera of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard camera].  # noqa: E501

        :return: The allow_keyguard_camera of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_camera

    @allow_keyguard_camera.setter
    def allow_keyguard_camera(self, allow_keyguard_camera):
        """Sets the allow_keyguard_camera of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow keyguard camera].  # noqa: E501

        :param allow_keyguard_camera: The allow_keyguard_camera of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_camera = allow_keyguard_camera

    @property
    def allow_keyguard_notifications(self):
        """Gets the allow_keyguard_notifications of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard notifications].  # noqa: E501

        :return: The allow_keyguard_notifications of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_notifications

    @allow_keyguard_notifications.setter
    def allow_keyguard_notifications(self, allow_keyguard_notifications):
        """Sets the allow_keyguard_notifications of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow keyguard notifications].  # noqa: E501

        :param allow_keyguard_notifications: The allow_keyguard_notifications of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_notifications = allow_keyguard_notifications

    @property
    def allow_keyguard_fingerprint(self):
        """Gets the allow_keyguard_fingerprint of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard fingerprint].  # noqa: E501

        :return: The allow_keyguard_fingerprint of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_fingerprint

    @allow_keyguard_fingerprint.setter
    def allow_keyguard_fingerprint(self, allow_keyguard_fingerprint):
        """Sets the allow_keyguard_fingerprint of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow keyguard fingerprint].  # noqa: E501

        :param allow_keyguard_fingerprint: The allow_keyguard_fingerprint of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_fingerprint = allow_keyguard_fingerprint

    @property
    def allow_keyguard_trust_agent(self):
        """Gets the allow_keyguard_trust_agent of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard trust agent].  # noqa: E501

        :return: The allow_keyguard_trust_agent of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_trust_agent

    @allow_keyguard_trust_agent.setter
    def allow_keyguard_trust_agent(self, allow_keyguard_trust_agent):
        """Sets the allow_keyguard_trust_agent of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow keyguard trust agent].  # noqa: E501

        :param allow_keyguard_trust_agent: The allow_keyguard_trust_agent of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_trust_agent = allow_keyguard_trust_agent

    @property
    def allow_keyguard_unredacted(self):
        """Gets the allow_keyguard_unredacted of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard unredacted].  # noqa: E501

        :return: The allow_keyguard_unredacted of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard_unredacted

    @allow_keyguard_unredacted.setter
    def allow_keyguard_unredacted(self, allow_keyguard_unredacted):
        """Sets the allow_keyguard_unredacted of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow keyguard unredacted].  # noqa: E501

        :param allow_keyguard_unredacted: The allow_keyguard_unredacted of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard_unredacted = allow_keyguard_unredacted

    @property
    def allow_modifying_apps_settings(self):
        """Gets the allow_modifying_apps_settings of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow modifying apps settings].  # noqa: E501

        :return: The allow_modifying_apps_settings of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_modifying_apps_settings

    @allow_modifying_apps_settings.setter
    def allow_modifying_apps_settings(self, allow_modifying_apps_settings):
        """Sets the allow_modifying_apps_settings of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow modifying apps settings].  # noqa: E501

        :param allow_modifying_apps_settings: The allow_modifying_apps_settings of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_modifying_apps_settings = allow_modifying_apps_settings

    @property
    def allow_installing_apps(self):
        """Gets the allow_installing_apps of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow installing apps].  # noqa: E501

        :return: The allow_installing_apps of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_installing_apps

    @allow_installing_apps.setter
    def allow_installing_apps(self, allow_installing_apps):
        """Sets the allow_installing_apps of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow installing apps].  # noqa: E501

        :param allow_installing_apps: The allow_installing_apps of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_installing_apps = allow_installing_apps

    @property
    def allow_uninstalling_apps(self):
        """Gets the allow_uninstalling_apps of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow uninstalling apps].  # noqa: E501

        :return: The allow_uninstalling_apps of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_uninstalling_apps

    @allow_uninstalling_apps.setter
    def allow_uninstalling_apps(self, allow_uninstalling_apps):
        """Sets the allow_uninstalling_apps of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow uninstalling apps].  # noqa: E501

        :param allow_uninstalling_apps: The allow_uninstalling_apps of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_uninstalling_apps = allow_uninstalling_apps

    @property
    def allow_disable_app_verify(self):
        """Gets the allow_disable_app_verify of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow disable application verify].  # noqa: E501

        :return: The allow_disable_app_verify of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_disable_app_verify

    @allow_disable_app_verify.setter
    def allow_disable_app_verify(self, allow_disable_app_verify):
        """Sets the allow_disable_app_verify of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow disable application verify].  # noqa: E501

        :param allow_disable_app_verify: The allow_disable_app_verify of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_disable_app_verify = allow_disable_app_verify

    @property
    def allow_usb_file_transfer(self):
        """Gets the allow_usb_file_transfer of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow usb file transfer].  # noqa: E501

        :return: The allow_usb_file_transfer of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_file_transfer

    @allow_usb_file_transfer.setter
    def allow_usb_file_transfer(self, allow_usb_file_transfer):
        """Sets the allow_usb_file_transfer of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow usb file transfer].  # noqa: E501

        :param allow_usb_file_transfer: The allow_usb_file_transfer of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_usb_file_transfer = allow_usb_file_transfer

    @property
    def allow_vpn_changes(self):
        """Gets the allow_vpn_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow VPN changes].  # noqa: E501

        :return: The allow_vpn_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_vpn_changes

    @allow_vpn_changes.setter
    def allow_vpn_changes(self, allow_vpn_changes):
        """Sets the allow_vpn_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow VPN changes].  # noqa: E501

        :param allow_vpn_changes: The allow_vpn_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_vpn_changes = allow_vpn_changes

    @property
    def allow_mobile_changes(self):
        """Gets the allow_mobile_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow mobile changes].  # noqa: E501

        :return: The allow_mobile_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_mobile_changes

    @allow_mobile_changes.setter
    def allow_mobile_changes(self, allow_mobile_changes):
        """Sets the allow_mobile_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow mobile changes].  # noqa: E501

        :param allow_mobile_changes: The allow_mobile_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_mobile_changes = allow_mobile_changes

    @property
    def allow_work_personal_paste(self):
        """Gets the allow_work_personal_paste of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow work personal paste].  # noqa: E501

        :return: The allow_work_personal_paste of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_work_personal_paste

    @allow_work_personal_paste.setter
    def allow_work_personal_paste(self, allow_work_personal_paste):
        """Sets the allow_work_personal_paste of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow work personal paste].  # noqa: E501

        :param allow_work_personal_paste: The allow_work_personal_paste of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_work_personal_paste = allow_work_personal_paste

    @property
    def allow_work_to_access_personal(self):
        """Gets the allow_work_to_access_personal of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow work to access personal].  # noqa: E501

        :return: The allow_work_to_access_personal of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_work_to_access_personal

    @allow_work_to_access_personal.setter
    def allow_work_to_access_personal(self, allow_work_to_access_personal):
        """Sets the allow_work_to_access_personal of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow work to access personal].  # noqa: E501

        :param allow_work_to_access_personal: The allow_work_to_access_personal of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_work_to_access_personal = allow_work_to_access_personal

    @property
    def allow_personal_to_access_work(self):
        """Gets the allow_personal_to_access_work of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow personal to access work].  # noqa: E501

        :return: The allow_personal_to_access_work of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_personal_to_access_work

    @allow_personal_to_access_work.setter
    def allow_personal_to_access_work(self, allow_personal_to_access_work):
        """Sets the allow_personal_to_access_work of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow personal to access work].  # noqa: E501

        :param allow_personal_to_access_work: The allow_personal_to_access_work of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_personal_to_access_work = allow_personal_to_access_work

    @property
    def allow_personal_share_with_work(self):
        """Gets the allow_personal_share_with_work of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow personal share with work].  # noqa: E501

        :return: The allow_personal_share_with_work of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_personal_share_with_work

    @allow_personal_share_with_work.setter
    def allow_personal_share_with_work(self, allow_personal_share_with_work):
        """Sets the allow_personal_share_with_work of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow personal share with work].  # noqa: E501

        :param allow_personal_share_with_work: The allow_personal_share_with_work of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_personal_share_with_work = allow_personal_share_with_work

    @property
    def allow_work_share_with_personal(self):
        """Gets the allow_work_share_with_personal of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow work share with personal].  # noqa: E501

        :return: The allow_work_share_with_personal of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_work_share_with_personal

    @allow_work_share_with_personal.setter
    def allow_work_share_with_personal(self, allow_work_share_with_personal):
        """Sets the allow_work_share_with_personal of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow work share with personal].  # noqa: E501

        :param allow_work_share_with_personal: The allow_work_share_with_personal of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_work_share_with_personal = allow_work_share_with_personal

    @property
    def allow_work_contacts_in_phone(self):
        """Gets the allow_work_contacts_in_phone of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow work contacts in phone].  # noqa: E501

        :return: The allow_work_contacts_in_phone of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_work_contacts_in_phone

    @allow_work_contacts_in_phone.setter
    def allow_work_contacts_in_phone(self, allow_work_contacts_in_phone):
        """Sets the allow_work_contacts_in_phone of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow work contacts in phone].  # noqa: E501

        :param allow_work_contacts_in_phone: The allow_work_contacts_in_phone of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_work_contacts_in_phone = allow_work_contacts_in_phone

    @property
    def allow_contacts(self):
        """Gets the allow_contacts of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow contacts].  # noqa: E501

        :return: The allow_contacts of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_contacts

    @allow_contacts.setter
    def allow_contacts(self, allow_contacts):
        """Sets the allow_contacts of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow contacts].  # noqa: E501

        :param allow_contacts: The allow_contacts of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_contacts = allow_contacts

    @property
    def force_screen_on_plugged_ac(self):
        """Gets the force_screen_on_plugged_ac of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [force screen on plugged ac].  # noqa: E501

        :return: The force_screen_on_plugged_ac of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_screen_on_plugged_ac

    @force_screen_on_plugged_ac.setter
    def force_screen_on_plugged_ac(self, force_screen_on_plugged_ac):
        """Sets the force_screen_on_plugged_ac of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [force screen on plugged ac].  # noqa: E501

        :param force_screen_on_plugged_ac: The force_screen_on_plugged_ac of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_screen_on_plugged_ac = force_screen_on_plugged_ac

    @property
    def force_screen_on_plugged_usb(self):
        """Gets the force_screen_on_plugged_usb of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [force screen on plugged usb].  # noqa: E501

        :return: The force_screen_on_plugged_usb of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_screen_on_plugged_usb

    @force_screen_on_plugged_usb.setter
    def force_screen_on_plugged_usb(self, force_screen_on_plugged_usb):
        """Sets the force_screen_on_plugged_usb of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [force screen on plugged usb].  # noqa: E501

        :param force_screen_on_plugged_usb: The force_screen_on_plugged_usb of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_screen_on_plugged_usb = force_screen_on_plugged_usb

    @property
    def force_screen_on_plugged_wireless(self):
        """Gets the force_screen_on_plugged_wireless of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [force screen on plugged wireless].  # noqa: E501

        :return: The force_screen_on_plugged_wireless of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_screen_on_plugged_wireless

    @force_screen_on_plugged_wireless.setter
    def force_screen_on_plugged_wireless(self, force_screen_on_plugged_wireless):
        """Sets the force_screen_on_plugged_wireless of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [force screen on plugged wireless].  # noqa: E501

        :param force_screen_on_plugged_wireless: The force_screen_on_plugged_wireless of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_screen_on_plugged_wireless = force_screen_on_plugged_wireless

    @property
    def allow_status_bar(self):
        """Gets the allow_status_bar of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow status bar].  # noqa: E501

        :return: The allow_status_bar of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_status_bar

    @allow_status_bar.setter
    def allow_status_bar(self, allow_status_bar):
        """Sets the allow_status_bar of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow status bar].  # noqa: E501

        :param allow_status_bar: The allow_status_bar of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_status_bar = allow_status_bar

    @property
    def allow_keyguard(self):
        """Gets the allow_keyguard of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow keyguard].  # noqa: E501

        :return: The allow_keyguard of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keyguard

    @allow_keyguard.setter
    def allow_keyguard(self, allow_keyguard):
        """Sets the allow_keyguard of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow keyguard].  # noqa: E501

        :param allow_keyguard: The allow_keyguard of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_keyguard = allow_keyguard

    @property
    def allow_adding_users(self):
        """Gets the allow_adding_users of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow adding users].  # noqa: E501

        :return: The allow_adding_users of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_adding_users

    @allow_adding_users.setter
    def allow_adding_users(self, allow_adding_users):
        """Sets the allow_adding_users of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow adding users].  # noqa: E501

        :param allow_adding_users: The allow_adding_users of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_adding_users = allow_adding_users

    @property
    def allow_removing_users(self):
        """Gets the allow_removing_users of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow removing users].  # noqa: E501

        :return: The allow_removing_users of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_removing_users

    @allow_removing_users.setter
    def allow_removing_users(self, allow_removing_users):
        """Sets the allow_removing_users of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow removing users].  # noqa: E501

        :param allow_removing_users: The allow_removing_users of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_removing_users = allow_removing_users

    @property
    def allow_safe_boot(self):
        """Gets the allow_safe_boot of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow safe boot].  # noqa: E501

        :return: The allow_safe_boot of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_safe_boot

    @allow_safe_boot.setter
    def allow_safe_boot(self, allow_safe_boot):
        """Sets the allow_safe_boot of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow safe boot].  # noqa: E501

        :param allow_safe_boot: The allow_safe_boot of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_safe_boot = allow_safe_boot

    @property
    def allow_nfc(self):
        """Gets the allow_nfc of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow NFC].  # noqa: E501

        :return: The allow_nfc of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_nfc

    @allow_nfc.setter
    def allow_nfc(self, allow_nfc):
        """Sets the allow_nfc of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow NFC].  # noqa: E501

        :param allow_nfc: The allow_nfc of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_nfc = allow_nfc

    @property
    def allow_managed_wifi_changes(self):
        """Gets the allow_managed_wifi_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow managed wifi changes].  # noqa: E501

        :return: The allow_managed_wifi_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_managed_wifi_changes

    @allow_managed_wifi_changes.setter
    def allow_managed_wifi_changes(self, allow_managed_wifi_changes):
        """Sets the allow_managed_wifi_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow managed wifi changes].  # noqa: E501

        :param allow_managed_wifi_changes: The allow_managed_wifi_changes of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_managed_wifi_changes = allow_managed_wifi_changes

    @property
    def allow_data_roaming(self):
        """Gets the allow_data_roaming of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow data roaming].  # noqa: E501

        :return: The allow_data_roaming of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_data_roaming

    @allow_data_roaming.setter
    def allow_data_roaming(self, allow_data_roaming):
        """Sets the allow_data_roaming of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow data roaming].  # noqa: E501

        :param allow_data_roaming: The allow_data_roaming of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_data_roaming = allow_data_roaming

    @property
    def allow_location_access(self):
        """Gets the allow_location_access of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the allow location access.  # noqa: E501

        :return: The allow_location_access of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._allow_location_access

    @allow_location_access.setter
    def allow_location_access(self, allow_location_access):
        """Sets the allow_location_access of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the allow location access.  # noqa: E501

        :param allow_location_access: The allow_location_access of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._allow_location_access = allow_location_access

    @property
    def allow_bluetooth_contact_sharing(self):
        """Gets the allow_bluetooth_contact_sharing of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow bluetooth contact sharing].  # noqa: E501

        :return: The allow_bluetooth_contact_sharing of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth_contact_sharing

    @allow_bluetooth_contact_sharing.setter
    def allow_bluetooth_contact_sharing(self, allow_bluetooth_contact_sharing):
        """Sets the allow_bluetooth_contact_sharing of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow bluetooth contact sharing].  # noqa: E501

        :param allow_bluetooth_contact_sharing: The allow_bluetooth_contact_sharing of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth_contact_sharing = allow_bluetooth_contact_sharing

    @property
    def allow_wallpaper_change(self):
        """Gets the allow_wallpaper_change of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow set wallpaper].  # noqa: E501

        :return: The allow_wallpaper_change of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wallpaper_change

    @allow_wallpaper_change.setter
    def allow_wallpaper_change(self, allow_wallpaper_change):
        """Sets the allow_wallpaper_change of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow set wallpaper].  # noqa: E501

        :param allow_wallpaper_change: The allow_wallpaper_change of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_wallpaper_change = allow_wallpaper_change

    @property
    def allow_user_icon_change(self):
        """Gets the allow_user_icon_change of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow set user icon].  # noqa: E501

        :return: The allow_user_icon_change of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_icon_change

    @allow_user_icon_change.setter
    def allow_user_icon_change(self, allow_user_icon_change):
        """Sets the allow_user_icon_change of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow set user icon].  # noqa: E501

        :param allow_user_icon_change: The allow_user_icon_change of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_user_icon_change = allow_user_icon_change

    @property
    def allow_non_google_accounts(self):
        """Gets the allow_non_google_accounts of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [allow non google accounts].  # noqa: E501

        :return: The allow_non_google_accounts of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_non_google_accounts

    @allow_non_google_accounts.setter
    def allow_non_google_accounts(self, allow_non_google_accounts):
        """Sets the allow_non_google_accounts of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether [allow non google accounts].  # noqa: E501

        :param allow_non_google_accounts: The allow_non_google_accounts of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_non_google_accounts = allow_non_google_accounts

    @property
    def whitelist_approved_accessibility_services(self):
        """Gets the whitelist_approved_accessibility_services of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether whitelist permitted accessibility services.  # noqa: E501

        :return: The whitelist_approved_accessibility_services of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._whitelist_approved_accessibility_services

    @whitelist_approved_accessibility_services.setter
    def whitelist_approved_accessibility_services(self, whitelist_approved_accessibility_services):
        """Sets the whitelist_approved_accessibility_services of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether whitelist permitted accessibility services.  # noqa: E501

        :param whitelist_approved_accessibility_services: The whitelist_approved_accessibility_services of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._whitelist_approved_accessibility_services = whitelist_approved_accessibility_services

    @property
    def accessibility_services_permitted_app_ids(self):
        """Gets the accessibility_services_permitted_app_ids of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the accessibility services permitted application ids.  # noqa: E501

        :return: The accessibility_services_permitted_app_ids of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._accessibility_services_permitted_app_ids

    @accessibility_services_permitted_app_ids.setter
    def accessibility_services_permitted_app_ids(self, accessibility_services_permitted_app_ids):
        """Sets the accessibility_services_permitted_app_ids of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the accessibility services permitted application ids.  # noqa: E501

        :param accessibility_services_permitted_app_ids: The accessibility_services_permitted_app_ids of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._accessibility_services_permitted_app_ids = accessibility_services_permitted_app_ids

    @property
    def skip_first_use_hints(self):
        """Gets the skip_first_use_hints of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether dO mode skip user tutorial on first start-up for apps.  # noqa: E501

        :return: The skip_first_use_hints of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._skip_first_use_hints

    @skip_first_use_hints.setter
    def skip_first_use_hints(self, skip_first_use_hints):
        """Sets the skip_first_use_hints of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether dO mode skip user tutorial on first start-up for apps.  # noqa: E501

        :param skip_first_use_hints: The skip_first_use_hints of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._skip_first_use_hints = skip_first_use_hints

    @property
    def allow_system_windows(self):
        """Gets the allow_system_windows of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow System window to display.  # noqa: E501

        :return: The allow_system_windows of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_system_windows

    @allow_system_windows.setter
    def allow_system_windows(self, allow_system_windows):
        """Sets the allow_system_windows of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow System window to display.  # noqa: E501

        :param allow_system_windows: The allow_system_windows of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_system_windows = allow_system_windows

    @property
    def allow_system_error_dialogs(self):
        """Gets the allow_system_error_dialogs of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow Suppress error dialogues.  # noqa: E501

        :return: The allow_system_error_dialogs of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_system_error_dialogs

    @allow_system_error_dialogs.setter
    def allow_system_error_dialogs(self, allow_system_error_dialogs):
        """Sets the allow_system_error_dialogs of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow Suppress error dialogues.  # noqa: E501

        :param allow_system_error_dialogs: The allow_system_error_dialogs of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_system_error_dialogs = allow_system_error_dialogs

    @property
    def android_for_work_samsung_restrictions_payload(self):
        """Gets the android_for_work_samsung_restrictions_payload of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the android for work samsung restrictions payload.  # noqa: E501

        :return: The android_for_work_samsung_restrictions_payload of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: AndroidForWorkSamsungRestrictionsPayloadV2Entity_
        """
        return self._android_for_work_samsung_restrictions_payload

    @android_for_work_samsung_restrictions_payload.setter
    def android_for_work_samsung_restrictions_payload(self, android_for_work_samsung_restrictions_payload):
        """Sets the android_for_work_samsung_restrictions_payload of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the android for work samsung restrictions payload.  # noqa: E501

        :param android_for_work_samsung_restrictions_payload: The android_for_work_samsung_restrictions_payload of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: AndroidForWorkSamsungRestrictionsPayloadV2Entity_
        """

        self._android_for_work_samsung_restrictions_payload = android_for_work_samsung_restrictions_payload

    @property
    def android_for_work_work_profile_restrictions_payload(self):
        """Gets the android_for_work_work_profile_restrictions_payload of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets the android for work work profile restrictions payload.  # noqa: E501

        :return: The android_for_work_work_profile_restrictions_payload of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_
        """
        return self._android_for_work_work_profile_restrictions_payload

    @android_for_work_work_profile_restrictions_payload.setter
    def android_for_work_work_profile_restrictions_payload(self, android_for_work_work_profile_restrictions_payload):
        """Sets the android_for_work_work_profile_restrictions_payload of this AndroidForWorkRestrictionsPayloadV2Entity_.

        Gets or sets the android for work work profile restrictions payload.  # noqa: E501

        :param android_for_work_work_profile_restrictions_payload: The android_for_work_work_profile_restrictions_payload of this AndroidForWorkRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: AndroidForWorkWorkProfileRestrictionsPayloadV2Entity_
        """

        self._android_for_work_work_profile_restrictions_payload = android_for_work_work_profile_restrictions_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkRestrictionsPayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkRestrictionsPayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkRestrictionsPayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
