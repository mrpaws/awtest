# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class UserGroupModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'type': 'str',
        'last_sync_on': 'str',
        'root_location_group_name': 'str',
        'sync_status': 'str',
        'merge_status': 'str',
        'users': 'int',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'group_name': 'groupName',
        'type': 'type',
        'last_sync_on': 'lastSyncOn',
        'root_location_group_name': 'rootLocationGroupName',
        'sync_status': 'syncStatus',
        'merge_status': 'mergeStatus',
        'users': 'users',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, group_name=None, type=None, last_sync_on=None, root_location_group_name=None, sync_status=None, merge_status=None, users=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """UserGroupModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._group_name = None
        self._type = None
        self._last_sync_on = None
        self._root_location_group_name = None
        self._sync_status = None
        self._merge_status = None
        self._users = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if group_name is not None:
            self.group_name = group_name
        if type is not None:
            self.type = type
        if last_sync_on is not None:
            self.last_sync_on = last_sync_on
        if root_location_group_name is not None:
            self.root_location_group_name = root_location_group_name
        if sync_status is not None:
            self.sync_status = sync_status
        if merge_status is not None:
            self.merge_status = merge_status
        if users is not None:
            self.users = users
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def group_name(self):
        """Gets the group_name of this UserGroupModel.  # noqa: E501

        Gets or sets group Friendly Name.  # noqa: E501

        :return: The group_name of this UserGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this UserGroupModel.

        Gets or sets group Friendly Name.  # noqa: E501

        :param group_name: The group_name of this UserGroupModel.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def type(self):
        """Gets the type of this UserGroupModel.  # noqa: E501

        Gets or sets user Group Type.  # noqa: E501

        :return: The type of this UserGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserGroupModel.

        Gets or sets user Group Type.  # noqa: E501

        :param type: The type of this UserGroupModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def last_sync_on(self):
        """Gets the last_sync_on of this UserGroupModel.  # noqa: E501

        Gets or sets last Sync Datetime.  # noqa: E501

        :return: The last_sync_on of this UserGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._last_sync_on

    @last_sync_on.setter
    def last_sync_on(self, last_sync_on):
        """Sets the last_sync_on of this UserGroupModel.

        Gets or sets last Sync Datetime.  # noqa: E501

        :param last_sync_on: The last_sync_on of this UserGroupModel.  # noqa: E501
        :type: str
        """

        self._last_sync_on = last_sync_on

    @property
    def root_location_group_name(self):
        """Gets the root_location_group_name of this UserGroupModel.  # noqa: E501

        Gets or sets root Location Group Name.  # noqa: E501

        :return: The root_location_group_name of this UserGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._root_location_group_name

    @root_location_group_name.setter
    def root_location_group_name(self, root_location_group_name):
        """Sets the root_location_group_name of this UserGroupModel.

        Gets or sets root Location Group Name.  # noqa: E501

        :param root_location_group_name: The root_location_group_name of this UserGroupModel.  # noqa: E501
        :type: str
        """

        self._root_location_group_name = root_location_group_name

    @property
    def sync_status(self):
        """Gets the sync_status of this UserGroupModel.  # noqa: E501

        Gets or sets user Group Sync Status.  # noqa: E501

        :return: The sync_status of this UserGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this UserGroupModel.

        Gets or sets user Group Sync Status.  # noqa: E501

        :param sync_status: The sync_status of this UserGroupModel.  # noqa: E501
        :type: str
        """

        self._sync_status = sync_status

    @property
    def merge_status(self):
        """Gets the merge_status of this UserGroupModel.  # noqa: E501

        Gets or sets user Group Merge Status.  # noqa: E501

        :return: The merge_status of this UserGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._merge_status

    @merge_status.setter
    def merge_status(self, merge_status):
        """Sets the merge_status of this UserGroupModel.

        Gets or sets user Group Merge Status.  # noqa: E501

        :param merge_status: The merge_status of this UserGroupModel.  # noqa: E501
        :type: str
        """

        self._merge_status = merge_status

    @property
    def users(self):
        """Gets the users of this UserGroupModel.  # noqa: E501

        Gets or sets total Members of the User Group.  # noqa: E501

        :return: The users of this UserGroupModel.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this UserGroupModel.

        Gets or sets total Members of the User Group.  # noqa: E501

        :param users: The users of this UserGroupModel.  # noqa: E501
        :type: int
        """

        self._users = users

    @property
    def id(self):
        """Gets the id of this UserGroupModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this UserGroupModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserGroupModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this UserGroupModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this UserGroupModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this UserGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this UserGroupModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this UserGroupModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserGroupModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroupModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserGroupModel):
            return True

        return self.to_dict() != other.to_dict()
