# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class SecurityV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def security_v1_device_security_info_search(self, organizationgroupid, user, **kwargs):  # noqa: E501
        """Searches for Device Security Information for the device.  # noqa: E501

        Processes the information like organizationgroup ID, user name, model, platform, last seen, ownership, compliant status,              seen since parameters and fetches the security information for the same.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_device_security_info_search(organizationgroupid, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroup to be searched, user's OG is considered if not sent. e.g.[testOrganizationGroup] (Required). (required)
        :param str user: Enrolled username. e.g.[testUser] (Required). (required)
        :param str model: Device model. e.g.[iPhone]. 
        :param int platform: Device platform. e.g.[Apple]. 
        :param datetime lastseen: Last seen date string. e.g. [2017-02-03 01:33:07.383].
        :param str ownership: Ownership. e.g. [C:Corporate Dedicated, E:Employee Owned, S:Corporate Shared].
        :param bool compliantstatus: Complaint status [True or False].
        :param datetime seensince: Specifies the date filter for device search, which retrieves the devices that are seen after this date e.g. [2017-02-03 01:33:07.383].
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceSecurityInfoSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.security_v1_device_security_info_search_with_http_info(organizationgroupid, user, **kwargs)  # noqa: E501
        else:
            (data) = self.security_v1_device_security_info_search_with_http_info(organizationgroupid, user, **kwargs)  # noqa: E501
            return data

    def security_v1_device_security_info_search_with_http_info(self, organizationgroupid, user, **kwargs):  # noqa: E501
        """Searches for Device Security Information for the device.  # noqa: E501

        Processes the information like organizationgroup ID, user name, model, platform, last seen, ownership, compliant status,              seen since parameters and fetches the security information for the same.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_device_security_info_search_with_http_info(organizationgroupid, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroup to be searched, user's OG is considered if not sent. e.g.[testOrganizationGroup] (Required). (required)
        :param str user: Enrolled username. e.g.[testUser] (Required). (required)
        :param str model: Device model. e.g.[iPhone]. 
        :param int platform: Device platform. e.g.[Apple]. 
        :param datetime lastseen: Last seen date string. e.g. [2017-02-03 01:33:07.383].
        :param str ownership: Ownership. e.g. [C:Corporate Dedicated, E:Employee Owned, S:Corporate Shared].
        :param bool compliantstatus: Complaint status [True or False].
        :param datetime seensince: Specifies the date filter for device search, which retrieves the devices that are seen after this date e.g. [2017-02-03 01:33:07.383].
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceSecurityInfoSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'user', 'model', 'platform', 'lastseen', 'ownership', 'compliantstatus', 'seensince', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_v1_device_security_info_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organizationgroupid' is set
        if self.api_client.client_side_validation and ('organizationgroupid' not in params or
                                                       params['organizationgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizationgroupid` when calling `security_v1_device_security_info_search`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `security_v1_device_security_info_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'lastseen' in params:
            query_params.append(('lastseen', params['lastseen']))  # noqa: E501
        if 'ownership' in params:
            query_params.append(('ownership', params['ownership']))  # noqa: E501
        if 'compliantstatus' in params:
            query_params.append(('compliantstatus', params['compliantstatus']))  # noqa: E501
        if 'seensince' in params:
            query_params.append(('seensince', params['seensince']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/securityinfosearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSecurityInfoSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_v1_get_device_encryption_status_async(self, uuid, **kwargs):  # noqa: E501
        """New - Get encryption status of an enrolled device.  # noqa: E501

        Get encryption status of an enrolled device identified by device Uuid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_device_encryption_status_async(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Unique identifier (Uuid) of a device.(Required) (required)
        :return: DeviceEncryptionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.security_v1_get_device_encryption_status_async_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.security_v1_get_device_encryption_status_async_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def security_v1_get_device_encryption_status_async_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Get encryption status of an enrolled device.  # noqa: E501

        Get encryption status of an enrolled device identified by device Uuid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_device_encryption_status_async_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Unique identifier (Uuid) of a device.(Required) (required)
        :return: DeviceEncryptionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_v1_get_device_encryption_status_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `security_v1_get_device_encryption_status_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{uuid}/security/encryption-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceEncryptionStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_v1_get_device_recovery_lock_password_async(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the Recovery Lock password for a macOS device.  # noqa: E501

        Gets the Recovery Lock password for a macOS device identified by the device Uuid. Applicable for macOS 11.5+ and available with Apple Silicon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_device_recovery_lock_password_async(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Unique identifier (Uuid) of a device.(Required). (required)
        :return: DeviceRecoveryLockPasswordResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.security_v1_get_device_recovery_lock_password_async_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.security_v1_get_device_recovery_lock_password_async_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def security_v1_get_device_recovery_lock_password_async_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the Recovery Lock password for a macOS device.  # noqa: E501

        Gets the Recovery Lock password for a macOS device identified by the device Uuid. Applicable for macOS 11.5+ and available with Apple Silicon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_device_recovery_lock_password_async_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Unique identifier (Uuid) of a device.(Required). (required)
        :return: DeviceRecoveryLockPasswordResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_v1_get_device_recovery_lock_password_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `security_v1_get_device_recovery_lock_password_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{uuid}/security/recovery-lock-password', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceRecoveryLockPasswordResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_v1_get_device_security_info_async(self, id, **kwargs):  # noqa: E501
        """Retrieves the security information of the device identified by device ID.  # noqa: E501

        Processes the device ID to retrieve the security information sample related info. Security Info Sample for that device              needs to be reported to the server prior to the call in order to get successful response. This API will fetch security info by              device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_device_security_info_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID. (Required). (required)
        :return: DeviceSecurityInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.security_v1_get_device_security_info_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.security_v1_get_device_security_info_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def security_v1_get_device_security_info_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the security information of the device identified by device ID.  # noqa: E501

        Processes the device ID to retrieve the security information sample related info. Security Info Sample for that device              needs to be reported to the server prior to the call in order to get successful response. This API will fetch security info by              device ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_device_security_info_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID. (Required). (required)
        :return: DeviceSecurityInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_v1_get_device_security_info_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `security_v1_get_device_security_info_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/security', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSecurityInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_v1_get_device_security_info_by_alternateid_async(self, search_by, id, **kwargs):  # noqa: E501
        """Retrieves the security information of the device identified by device ID.  # noqa: E501

        Processes the device id to retrieve the security information sample related info. Security Info Sample for that device              needs to be reported to the server prior to the call in order to get successful response. This API will fetch security info by alternate ID              of the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_device_security_info_by_alternateid_async(search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber]. (Required). (required)
        :param str id: The alternate ID of the device. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837)(Required). (required)
        :return: DeviceSecurityInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.security_v1_get_device_security_info_by_alternateid_async_with_http_info(search_by, id, **kwargs)  # noqa: E501
        else:
            (data) = self.security_v1_get_device_security_info_by_alternateid_async_with_http_info(search_by, id, **kwargs)  # noqa: E501
            return data

    def security_v1_get_device_security_info_by_alternateid_async_with_http_info(self, search_by, id, **kwargs):  # noqa: E501
        """Retrieves the security information of the device identified by device ID.  # noqa: E501

        Processes the device id to retrieve the security information sample related info. Security Info Sample for that device              needs to be reported to the server prior to the call in order to get successful response. This API will fetch security info by alternate ID              of the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_device_security_info_by_alternateid_async_with_http_info(search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber]. (Required). (required)
        :param str id: The alternate ID of the device. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837)(Required). (required)
        :return: DeviceSecurityInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_by', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_v1_get_device_security_info_by_alternateid_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `security_v1_get_device_security_info_by_alternateid_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `security_v1_get_device_security_info_by_alternateid_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/security', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSecurityInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_v1_get_managed_admin_information(self, uuid, **kwargs):  # noqa: E501
        """New - Get information of the administrator account configured on a macOS device via the device enrollment program (DEP).  # noqa: E501

        Get information of the administrator account configured on a macOS device via the device enrollment program (DEP). It includes the name for the account, current and the old passwords for the account, and the date and time of the day on which the administrator password was last rotated. If a unique random password is generated for the account, for security reasons, a command will be queued automatically to rotate the administrator password in 8 hour(s) from when the information was accessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_managed_admin_information(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Universally unique identifier (UUID) of a device.(Required) (required)
        :return: ManagedAdminInformationResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.security_v1_get_managed_admin_information_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.security_v1_get_managed_admin_information_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def security_v1_get_managed_admin_information_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Get information of the administrator account configured on a macOS device via the device enrollment program (DEP).  # noqa: E501

        Get information of the administrator account configured on a macOS device via the device enrollment program (DEP). It includes the name for the account, current and the old passwords for the account, and the date and time of the day on which the administrator password was last rotated. If a unique random password is generated for the account, for security reasons, a command will be queued automatically to rotate the administrator password in 8 hour(s) from when the information was accessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_v1_get_managed_admin_information_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Universally unique identifier (UUID) of a device.(Required) (required)
        :return: ManagedAdminInformationResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_v1_get_managed_admin_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `security_v1_get_managed_admin_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{uuid}/security/managed-admin-information', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagedAdminInformationResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
