# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class ApplicationGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_group_id': 'str',
        'name': 'str',
        'platform': 'str',
        'app_group_type': 'str',
        'description': 'str',
        'managed_by_organization_group_id': 'str',
        'organization_groups': 'list[AppGroupOG]',
        'user_groups': 'list[AppGroupUserGroup]',
        'device_ownership': 'str',
        'device_model': 'str',
        'device_operating_system': 'str',
        'is_active': 'bool',
        'app_count': 'str',
        'applications': 'list[ApplicationGroupItem]'
    }

    attribute_map = {
        'application_group_id': 'ApplicationGroupID',
        'name': 'Name',
        'platform': 'Platform',
        'app_group_type': 'AppGroupType',
        'description': 'Description',
        'managed_by_organization_group_id': 'ManagedByOrganizationGroupID',
        'organization_groups': 'OrganizationGroups',
        'user_groups': 'UserGroups',
        'device_ownership': 'DeviceOwnership',
        'device_model': 'DeviceModel',
        'device_operating_system': 'DeviceOperatingSystem',
        'is_active': 'IsActive',
        'app_count': 'AppCount',
        'applications': 'Applications'
    }

    def __init__(self, application_group_id=None, name=None, platform=None, app_group_type=None, description=None, managed_by_organization_group_id=None, organization_groups=None, user_groups=None, device_ownership=None, device_model=None, device_operating_system=None, is_active=None, app_count=None, applications=None, _configuration=None):  # noqa: E501
        """ApplicationGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application_group_id = None
        self._name = None
        self._platform = None
        self._app_group_type = None
        self._description = None
        self._managed_by_organization_group_id = None
        self._organization_groups = None
        self._user_groups = None
        self._device_ownership = None
        self._device_model = None
        self._device_operating_system = None
        self._is_active = None
        self._app_count = None
        self._applications = None
        self.discriminator = None

        if application_group_id is not None:
            self.application_group_id = application_group_id
        if name is not None:
            self.name = name
        if platform is not None:
            self.platform = platform
        if app_group_type is not None:
            self.app_group_type = app_group_type
        if description is not None:
            self.description = description
        if managed_by_organization_group_id is not None:
            self.managed_by_organization_group_id = managed_by_organization_group_id
        if organization_groups is not None:
            self.organization_groups = organization_groups
        if user_groups is not None:
            self.user_groups = user_groups
        if device_ownership is not None:
            self.device_ownership = device_ownership
        if device_model is not None:
            self.device_model = device_model
        if device_operating_system is not None:
            self.device_operating_system = device_operating_system
        if is_active is not None:
            self.is_active = is_active
        if app_count is not None:
            self.app_count = app_count
        if applications is not None:
            self.applications = applications

    @property
    def application_group_id(self):
        """Gets the application_group_id of this ApplicationGroup.  # noqa: E501

        Gets or sets application Group ID.  # noqa: E501

        :return: The application_group_id of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._application_group_id

    @application_group_id.setter
    def application_group_id(self, application_group_id):
        """Sets the application_group_id of this ApplicationGroup.

        Gets or sets application Group ID.  # noqa: E501

        :param application_group_id: The application_group_id of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._application_group_id = application_group_id

    @property
    def name(self):
        """Gets the name of this ApplicationGroup.  # noqa: E501

        Gets or sets name of Application Group.  # noqa: E501

        :return: The name of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationGroup.

        Gets or sets name of Application Group.  # noqa: E501

        :param name: The name of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this ApplicationGroup.  # noqa: E501

        Gets or sets device Platform Name.  # noqa: E501

        :return: The platform of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ApplicationGroup.

        Gets or sets device Platform Name.  # noqa: E501

        :param platform: The platform of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def app_group_type(self):
        """Gets the app_group_type of this ApplicationGroup.  # noqa: E501

        Gets or sets type of Application Group.  # noqa: E501

        :return: The app_group_type of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._app_group_type

    @app_group_type.setter
    def app_group_type(self, app_group_type):
        """Sets the app_group_type of this ApplicationGroup.

        Gets or sets type of Application Group.  # noqa: E501

        :param app_group_type: The app_group_type of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._app_group_type = app_group_type

    @property
    def description(self):
        """Gets the description of this ApplicationGroup.  # noqa: E501

        Gets or sets application Group description.  # noqa: E501

        :return: The description of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationGroup.

        Gets or sets application Group description.  # noqa: E501

        :param description: The description of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def managed_by_organization_group_id(self):
        """Gets the managed_by_organization_group_id of this ApplicationGroup.  # noqa: E501

        Gets or sets organization group ID in which Application group is managed.  # noqa: E501

        :return: The managed_by_organization_group_id of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_organization_group_id

    @managed_by_organization_group_id.setter
    def managed_by_organization_group_id(self, managed_by_organization_group_id):
        """Sets the managed_by_organization_group_id of this ApplicationGroup.

        Gets or sets organization group ID in which Application group is managed.  # noqa: E501

        :param managed_by_organization_group_id: The managed_by_organization_group_id of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._managed_by_organization_group_id = managed_by_organization_group_id

    @property
    def organization_groups(self):
        """Gets the organization_groups of this ApplicationGroup.  # noqa: E501

        Gets or sets list of Organization Groups to which this App Group is assigned.  # noqa: E501

        :return: The organization_groups of this ApplicationGroup.  # noqa: E501
        :rtype: list[AppGroupOG]
        """
        return self._organization_groups

    @organization_groups.setter
    def organization_groups(self, organization_groups):
        """Sets the organization_groups of this ApplicationGroup.

        Gets or sets list of Organization Groups to which this App Group is assigned.  # noqa: E501

        :param organization_groups: The organization_groups of this ApplicationGroup.  # noqa: E501
        :type: list[AppGroupOG]
        """

        self._organization_groups = organization_groups

    @property
    def user_groups(self):
        """Gets the user_groups of this ApplicationGroup.  # noqa: E501

        Gets or sets list of User Groups to which this App Group is assigned.  # noqa: E501

        :return: The user_groups of this ApplicationGroup.  # noqa: E501
        :rtype: list[AppGroupUserGroup]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this ApplicationGroup.

        Gets or sets list of User Groups to which this App Group is assigned.  # noqa: E501

        :param user_groups: The user_groups of this ApplicationGroup.  # noqa: E501
        :type: list[AppGroupUserGroup]
        """

        self._user_groups = user_groups

    @property
    def device_ownership(self):
        """Gets the device_ownership of this ApplicationGroup.  # noqa: E501

        Gets or sets device Ownership Name.  # noqa: E501

        :return: The device_ownership of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._device_ownership

    @device_ownership.setter
    def device_ownership(self, device_ownership):
        """Sets the device_ownership of this ApplicationGroup.

        Gets or sets device Ownership Name.  # noqa: E501

        :param device_ownership: The device_ownership of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._device_ownership = device_ownership

    @property
    def device_model(self):
        """Gets the device_model of this ApplicationGroup.  # noqa: E501

        Gets or sets device Model.  # noqa: E501

        :return: The device_model of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this ApplicationGroup.

        Gets or sets device Model.  # noqa: E501

        :param device_model: The device_model of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._device_model = device_model

    @property
    def device_operating_system(self):
        """Gets the device_operating_system of this ApplicationGroup.  # noqa: E501

        Gets or sets device Operating System.  # noqa: E501

        :return: The device_operating_system of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._device_operating_system

    @device_operating_system.setter
    def device_operating_system(self, device_operating_system):
        """Sets the device_operating_system of this ApplicationGroup.

        Gets or sets device Operating System.  # noqa: E501

        :param device_operating_system: The device_operating_system of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._device_operating_system = device_operating_system

    @property
    def is_active(self):
        """Gets the is_active of this ApplicationGroup.  # noqa: E501

        Gets or sets a value indicating whether app Group status.  # noqa: E501

        :return: The is_active of this ApplicationGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ApplicationGroup.

        Gets or sets a value indicating whether app Group status.  # noqa: E501

        :param is_active: The is_active of this ApplicationGroup.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def app_count(self):
        """Gets the app_count of this ApplicationGroup.  # noqa: E501

        Gets or sets number of Applications in the App Group.  # noqa: E501

        :return: The app_count of this ApplicationGroup.  # noqa: E501
        :rtype: str
        """
        return self._app_count

    @app_count.setter
    def app_count(self, app_count):
        """Sets the app_count of this ApplicationGroup.

        Gets or sets number of Applications in the App Group.  # noqa: E501

        :param app_count: The app_count of this ApplicationGroup.  # noqa: E501
        :type: str
        """

        self._app_count = app_count

    @property
    def applications(self):
        """Gets the applications of this ApplicationGroup.  # noqa: E501

        Gets or sets application Items required to create app group.  # noqa: E501

        :return: The applications of this ApplicationGroup.  # noqa: E501
        :rtype: list[ApplicationGroupItem]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this ApplicationGroup.

        Gets or sets application Items required to create app group.  # noqa: E501

        :param applications: The applications of this ApplicationGroup.  # noqa: E501
        :type: list[ApplicationGroupItem]
        """

        self._applications = applications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationGroup):
            return True

        return self.to_dict() != other.to_dict()
