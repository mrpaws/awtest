# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceEventLogEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'str',
        'time_stamp': 'str',
        'source': 'str',
        'event': 'str',
        'admin_account': 'str',
        'event_data_list': 'list[EventData]',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'severity': 'Severity',
        'time_stamp': 'TimeStamp',
        'source': 'Source',
        'event': 'Event',
        'admin_account': 'AdminAccount',
        'event_data_list': 'EventDataList',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, severity=None, time_stamp=None, source=None, event=None, admin_account=None, event_data_list=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceEventLogEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._severity = None
        self._time_stamp = None
        self._source = None
        self._event = None
        self._admin_account = None
        self._event_data_list = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if severity is not None:
            self.severity = severity
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if source is not None:
            self.source = source
        if event is not None:
            self.event = event
        if admin_account is not None:
            self.admin_account = admin_account
        if event_data_list is not None:
            self.event_data_list = event_data_list
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def severity(self):
        """Gets the severity of this DeviceEventLogEntry.  # noqa: E501

        Gets or sets severity of Event Log.  # noqa: E501

        :return: The severity of this DeviceEventLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DeviceEventLogEntry.

        Gets or sets severity of Event Log.  # noqa: E501

        :param severity: The severity of this DeviceEventLogEntry.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def time_stamp(self):
        """Gets the time_stamp of this DeviceEventLogEntry.  # noqa: E501

        Gets or sets dateTime corresponding to Event Log.  # noqa: E501

        :return: The time_stamp of this DeviceEventLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this DeviceEventLogEntry.

        Gets or sets dateTime corresponding to Event Log.  # noqa: E501

        :param time_stamp: The time_stamp of this DeviceEventLogEntry.  # noqa: E501
        :type: str
        """

        self._time_stamp = time_stamp

    @property
    def source(self):
        """Gets the source of this DeviceEventLogEntry.  # noqa: E501

        Gets or sets source corresponding to Event Log.  # noqa: E501

        :return: The source of this DeviceEventLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DeviceEventLogEntry.

        Gets or sets source corresponding to Event Log.  # noqa: E501

        :param source: The source of this DeviceEventLogEntry.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def event(self):
        """Gets the event of this DeviceEventLogEntry.  # noqa: E501

        Gets or sets event name corresponding to Event Log.  # noqa: E501

        :return: The event of this DeviceEventLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this DeviceEventLogEntry.

        Gets or sets event name corresponding to Event Log.  # noqa: E501

        :param event: The event of this DeviceEventLogEntry.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def admin_account(self):
        """Gets the admin_account of this DeviceEventLogEntry.  # noqa: E501

        Gets or sets admin Account corresponding to Event Log.  # noqa: E501

        :return: The admin_account of this DeviceEventLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._admin_account

    @admin_account.setter
    def admin_account(self, admin_account):
        """Sets the admin_account of this DeviceEventLogEntry.

        Gets or sets admin Account corresponding to Event Log.  # noqa: E501

        :param admin_account: The admin_account of this DeviceEventLogEntry.  # noqa: E501
        :type: str
        """

        self._admin_account = admin_account

    @property
    def event_data_list(self):
        """Gets the event_data_list of this DeviceEventLogEntry.  # noqa: E501

        Gets or sets the event data list.  # noqa: E501

        :return: The event_data_list of this DeviceEventLogEntry.  # noqa: E501
        :rtype: list[EventData]
        """
        return self._event_data_list

    @event_data_list.setter
    def event_data_list(self, event_data_list):
        """Sets the event_data_list of this DeviceEventLogEntry.

        Gets or sets the event data list.  # noqa: E501

        :param event_data_list: The event_data_list of this DeviceEventLogEntry.  # noqa: E501
        :type: list[EventData]
        """

        self._event_data_list = event_data_list

    @property
    def id(self):
        """Gets the id of this DeviceEventLogEntry.  # noqa: E501


        :return: The id of this DeviceEventLogEntry.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceEventLogEntry.


        :param id: The id of this DeviceEventLogEntry.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceEventLogEntry.  # noqa: E501


        :return: The uuid of this DeviceEventLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceEventLogEntry.


        :param uuid: The uuid of this DeviceEventLogEntry.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceEventLogEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceEventLogEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceEventLogEntry):
            return True

        return self.to_dict() != other.to_dict()
