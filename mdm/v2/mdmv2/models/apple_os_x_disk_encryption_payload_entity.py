# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXDiskEncryptionPayloadEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disk_encryption_air_watch': 'AppleOsXDiskEncryptionAirWatchPayloadEntity_',
        'disk_encryption_file_vault2': 'AppleOsXDiskEncryptionFileVault2PayloadEntity_',
        'disk_encryption_mcx': 'AppleOsXDiskEncryptionMCXPayloadEntity_'
    }

    attribute_map = {
        'disk_encryption_air_watch': 'DiskEncryptionAirWatch',
        'disk_encryption_file_vault2': 'DiskEncryptionFileVault2',
        'disk_encryption_mcx': 'DiskEncryptionMCX'
    }

    def __init__(self, disk_encryption_air_watch=None, disk_encryption_file_vault2=None, disk_encryption_mcx=None, _configuration=None):  # noqa: E501
        """AppleOsXDiskEncryptionPayloadEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._disk_encryption_air_watch = None
        self._disk_encryption_file_vault2 = None
        self._disk_encryption_mcx = None
        self.discriminator = None

        if disk_encryption_air_watch is not None:
            self.disk_encryption_air_watch = disk_encryption_air_watch
        if disk_encryption_file_vault2 is not None:
            self.disk_encryption_file_vault2 = disk_encryption_file_vault2
        if disk_encryption_mcx is not None:
            self.disk_encryption_mcx = disk_encryption_mcx

    @property
    def disk_encryption_air_watch(self):
        """Gets the disk_encryption_air_watch of this AppleOsXDiskEncryptionPayloadEntity.  # noqa: E501

        Gets or sets disk Encryption AirWatch payload.  # noqa: E501

        :return: The disk_encryption_air_watch of this AppleOsXDiskEncryptionPayloadEntity.  # noqa: E501
        :rtype: AppleOsXDiskEncryptionAirWatchPayloadEntity_
        """
        return self._disk_encryption_air_watch

    @disk_encryption_air_watch.setter
    def disk_encryption_air_watch(self, disk_encryption_air_watch):
        """Sets the disk_encryption_air_watch of this AppleOsXDiskEncryptionPayloadEntity.

        Gets or sets disk Encryption AirWatch payload.  # noqa: E501

        :param disk_encryption_air_watch: The disk_encryption_air_watch of this AppleOsXDiskEncryptionPayloadEntity.  # noqa: E501
        :type: AppleOsXDiskEncryptionAirWatchPayloadEntity_
        """

        self._disk_encryption_air_watch = disk_encryption_air_watch

    @property
    def disk_encryption_file_vault2(self):
        """Gets the disk_encryption_file_vault2 of this AppleOsXDiskEncryptionPayloadEntity.  # noqa: E501

        Gets or sets disk Encryption FileVault2 payload.  # noqa: E501

        :return: The disk_encryption_file_vault2 of this AppleOsXDiskEncryptionPayloadEntity.  # noqa: E501
        :rtype: AppleOsXDiskEncryptionFileVault2PayloadEntity_
        """
        return self._disk_encryption_file_vault2

    @disk_encryption_file_vault2.setter
    def disk_encryption_file_vault2(self, disk_encryption_file_vault2):
        """Sets the disk_encryption_file_vault2 of this AppleOsXDiskEncryptionPayloadEntity.

        Gets or sets disk Encryption FileVault2 payload.  # noqa: E501

        :param disk_encryption_file_vault2: The disk_encryption_file_vault2 of this AppleOsXDiskEncryptionPayloadEntity.  # noqa: E501
        :type: AppleOsXDiskEncryptionFileVault2PayloadEntity_
        """

        self._disk_encryption_file_vault2 = disk_encryption_file_vault2

    @property
    def disk_encryption_mcx(self):
        """Gets the disk_encryption_mcx of this AppleOsXDiskEncryptionPayloadEntity.  # noqa: E501

        Gets or sets disk Encryption MCX payload.  # noqa: E501

        :return: The disk_encryption_mcx of this AppleOsXDiskEncryptionPayloadEntity.  # noqa: E501
        :rtype: AppleOsXDiskEncryptionMCXPayloadEntity_
        """
        return self._disk_encryption_mcx

    @disk_encryption_mcx.setter
    def disk_encryption_mcx(self, disk_encryption_mcx):
        """Sets the disk_encryption_mcx of this AppleOsXDiskEncryptionPayloadEntity.

        Gets or sets disk Encryption MCX payload.  # noqa: E501

        :param disk_encryption_mcx: The disk_encryption_mcx of this AppleOsXDiskEncryptionPayloadEntity.  # noqa: E501
        :type: AppleOsXDiskEncryptionMCXPayloadEntity_
        """

        self._disk_encryption_mcx = disk_encryption_mcx

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXDiskEncryptionPayloadEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXDiskEncryptionPayloadEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXDiskEncryptionPayloadEntity):
            return True

        return self.to_dict() != other.to_dict()
