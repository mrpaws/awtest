# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class UserGroupSearchDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_group_id': 'int',
        'user_group_name': 'str',
        'organization_group': 'str',
        'user_count': 'int'
    }

    attribute_map = {
        'user_group_id': 'UserGroupId',
        'user_group_name': 'UserGroupName',
        'organization_group': 'OrganizationGroup',
        'user_count': 'UserCount'
    }

    def __init__(self, user_group_id=None, user_group_name=None, organization_group=None, user_count=None, _configuration=None):  # noqa: E501
        """UserGroupSearchDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_group_id = None
        self._user_group_name = None
        self._organization_group = None
        self._user_count = None
        self.discriminator = None

        if user_group_id is not None:
            self.user_group_id = user_group_id
        if user_group_name is not None:
            self.user_group_name = user_group_name
        if organization_group is not None:
            self.organization_group = organization_group
        if user_count is not None:
            self.user_count = user_count

    @property
    def user_group_id(self):
        """Gets the user_group_id of this UserGroupSearchDetail.  # noqa: E501

        Gets or sets usergroup name.  # noqa: E501

        :return: The user_group_id of this UserGroupSearchDetail.  # noqa: E501
        :rtype: int
        """
        return self._user_group_id

    @user_group_id.setter
    def user_group_id(self, user_group_id):
        """Sets the user_group_id of this UserGroupSearchDetail.

        Gets or sets usergroup name.  # noqa: E501

        :param user_group_id: The user_group_id of this UserGroupSearchDetail.  # noqa: E501
        :type: int
        """

        self._user_group_id = user_group_id

    @property
    def user_group_name(self):
        """Gets the user_group_name of this UserGroupSearchDetail.  # noqa: E501

        Gets or sets name of the group.  # noqa: E501

        :return: The user_group_name of this UserGroupSearchDetail.  # noqa: E501
        :rtype: str
        """
        return self._user_group_name

    @user_group_name.setter
    def user_group_name(self, user_group_name):
        """Sets the user_group_name of this UserGroupSearchDetail.

        Gets or sets name of the group.  # noqa: E501

        :param user_group_name: The user_group_name of this UserGroupSearchDetail.  # noqa: E501
        :type: str
        """

        self._user_group_name = user_group_name

    @property
    def organization_group(self):
        """Gets the organization_group of this UserGroupSearchDetail.  # noqa: E501

        Gets or sets orgnization group name.  # noqa: E501

        :return: The organization_group of this UserGroupSearchDetail.  # noqa: E501
        :rtype: str
        """
        return self._organization_group

    @organization_group.setter
    def organization_group(self, organization_group):
        """Sets the organization_group of this UserGroupSearchDetail.

        Gets or sets orgnization group name.  # noqa: E501

        :param organization_group: The organization_group of this UserGroupSearchDetail.  # noqa: E501
        :type: str
        """

        self._organization_group = organization_group

    @property
    def user_count(self):
        """Gets the user_count of this UserGroupSearchDetail.  # noqa: E501

        Gets or sets user Count.  # noqa: E501

        :return: The user_count of this UserGroupSearchDetail.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this UserGroupSearchDetail.

        Gets or sets user Count.  # noqa: E501

        :param user_count: The user_count of this UserGroupSearchDetail.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserGroupSearchDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroupSearchDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserGroupSearchDetail):
            return True

        return self.to_dict() != other.to_dict()
