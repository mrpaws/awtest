# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class CommandsV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_wipe': 'DeviceWipeV2Model',
        'work_passcode': 'bool',
        'allow_pin_at_startup': 'bool',
        'esim_url': 'str',
        'unlock_pin': 'int',
        'message': 'str',
        'managed_apple_id': 'str',
        'sensor_names': 'list[str]',
        'reboot_count': 'int',
        'device_restart': 'DeviceRestartV2Model'
    }

    attribute_map = {
        'device_wipe': 'deviceWipe',
        'work_passcode': 'workPasscode',
        'allow_pin_at_startup': 'AllowPinAtStartup',
        'esim_url': 'esim_url',
        'unlock_pin': 'unlock_pin',
        'message': 'message',
        'managed_apple_id': 'managed_apple_id',
        'sensor_names': 'sensor_names',
        'reboot_count': 'reboot_count',
        'device_restart': 'device_restart'
    }

    def __init__(self, device_wipe=None, work_passcode=None, allow_pin_at_startup=None, esim_url=None, unlock_pin=None, message=None, managed_apple_id=None, sensor_names=None, reboot_count=None, device_restart=None, _configuration=None):  # noqa: E501
        """CommandsV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_wipe = None
        self._work_passcode = None
        self._allow_pin_at_startup = None
        self._esim_url = None
        self._unlock_pin = None
        self._message = None
        self._managed_apple_id = None
        self._sensor_names = None
        self._reboot_count = None
        self._device_restart = None
        self.discriminator = None

        if device_wipe is not None:
            self.device_wipe = device_wipe
        if work_passcode is not None:
            self.work_passcode = work_passcode
        if allow_pin_at_startup is not None:
            self.allow_pin_at_startup = allow_pin_at_startup
        if esim_url is not None:
            self.esim_url = esim_url
        if unlock_pin is not None:
            self.unlock_pin = unlock_pin
        if message is not None:
            self.message = message
        if managed_apple_id is not None:
            self.managed_apple_id = managed_apple_id
        if sensor_names is not None:
            self.sensor_names = sensor_names
        if reboot_count is not None:
            self.reboot_count = reboot_count
        if device_restart is not None:
            self.device_restart = device_restart

    @property
    def device_wipe(self):
        """Gets the device_wipe of this CommandsV2Model.  # noqa: E501

        Gets or sets DeviceWipe model  # noqa: E501

        :return: The device_wipe of this CommandsV2Model.  # noqa: E501
        :rtype: DeviceWipeV2Model
        """
        return self._device_wipe

    @device_wipe.setter
    def device_wipe(self, device_wipe):
        """Sets the device_wipe of this CommandsV2Model.

        Gets or sets DeviceWipe model  # noqa: E501

        :param device_wipe: The device_wipe of this CommandsV2Model.  # noqa: E501
        :type: DeviceWipeV2Model
        """

        self._device_wipe = device_wipe

    @property
    def work_passcode(self):
        """Gets the work_passcode of this CommandsV2Model.  # noqa: E501

        If set to true then Work Profile side passcode will be cleared on the device.  # noqa: E501

        :return: The work_passcode of this CommandsV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._work_passcode

    @work_passcode.setter
    def work_passcode(self, work_passcode):
        """Sets the work_passcode of this CommandsV2Model.

        If set to true then Work Profile side passcode will be cleared on the device.  # noqa: E501

        :param work_passcode: The work_passcode of this CommandsV2Model.  # noqa: E501
        :type: bool
        """

        self._work_passcode = work_passcode

    @property
    def allow_pin_at_startup(self):
        """Gets the allow_pin_at_startup of this CommandsV2Model.  # noqa: E501

        If set to true then Allow pin at Startup will be enabled for Device Owner Android devices.  # noqa: E501

        :return: The allow_pin_at_startup of this CommandsV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_pin_at_startup

    @allow_pin_at_startup.setter
    def allow_pin_at_startup(self, allow_pin_at_startup):
        """Sets the allow_pin_at_startup of this CommandsV2Model.

        If set to true then Allow pin at Startup will be enabled for Device Owner Android devices.  # noqa: E501

        :param allow_pin_at_startup: The allow_pin_at_startup of this CommandsV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_pin_at_startup = allow_pin_at_startup

    @property
    def esim_url(self):
        """Gets the esim_url of this CommandsV2Model.  # noqa: E501

        The carrier's eSIM server URL to query for iOS 13 (refresh-esim).  # noqa: E501

        :return: The esim_url of this CommandsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._esim_url

    @esim_url.setter
    def esim_url(self, esim_url):
        """Sets the esim_url of this CommandsV2Model.

        The carrier's eSIM server URL to query for iOS 13 (refresh-esim).  # noqa: E501

        :param esim_url: The esim_url of this CommandsV2Model.  # noqa: E501
        :type: str
        """

        self._esim_url = esim_url

    @property
    def unlock_pin(self):
        """Gets the unlock_pin of this CommandsV2Model.  # noqa: E501

        Applicable only for macOS devices. Unlock PIN code is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.  # noqa: E501

        :return: The unlock_pin of this CommandsV2Model.  # noqa: E501
        :rtype: int
        """
        return self._unlock_pin

    @unlock_pin.setter
    def unlock_pin(self, unlock_pin):
        """Sets the unlock_pin of this CommandsV2Model.

        Applicable only for macOS devices. Unlock PIN code is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.  # noqa: E501

        :param unlock_pin: The unlock_pin of this CommandsV2Model.  # noqa: E501
        :type: int
        """

        self._unlock_pin = unlock_pin

    @property
    def message(self):
        """Gets the message of this CommandsV2Model.  # noqa: E501

        Applicable only for macOS devices. Message is optional for Lock Command. Max allowed length is 256 chars.  # noqa: E501

        :return: The message of this CommandsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CommandsV2Model.

        Applicable only for macOS devices. Message is optional for Lock Command. Max allowed length is 256 chars.  # noqa: E501

        :param message: The message of this CommandsV2Model.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                message is not None and len(message) > 256):
            raise ValueError("Invalid value for `message`, length must be less than or equal to `256`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message is not None and len(message) < 0):
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `0`")  # noqa: E501

        self._message = message

    @property
    def managed_apple_id(self):
        """Gets the managed_apple_id of this CommandsV2Model.  # noqa: E501

        The username indicating the user to be deleted on a shared Apple device.  # noqa: E501

        :return: The managed_apple_id of this CommandsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._managed_apple_id

    @managed_apple_id.setter
    def managed_apple_id(self, managed_apple_id):
        """Sets the managed_apple_id of this CommandsV2Model.

        The username indicating the user to be deleted on a shared Apple device.  # noqa: E501

        :param managed_apple_id: The managed_apple_id of this CommandsV2Model.  # noqa: E501
        :type: str
        """

        self._managed_apple_id = managed_apple_id

    @property
    def sensor_names(self):
        """Gets the sensor_names of this CommandsV2Model.  # noqa: E501

        The list of sensor names assigned to the device. Applicable only for macOS and Linux platform and it is required for the SyncSensors command.  # noqa: E501

        :return: The sensor_names of this CommandsV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._sensor_names

    @sensor_names.setter
    def sensor_names(self, sensor_names):
        """Sets the sensor_names of this CommandsV2Model.

        The list of sensor names assigned to the device. Applicable only for macOS and Linux platform and it is required for the SyncSensors command.  # noqa: E501

        :param sensor_names: The sensor_names of this CommandsV2Model.  # noqa: E501
        :type: list[str]
        """

        self._sensor_names = sensor_names

    @property
    def reboot_count(self):
        """Gets the reboot_count of this CommandsV2Model.  # noqa: E501

        Number of reboots the BitLocker encryption on the operating system volume is suspended for (value should be between 1 and 15).  # noqa: E501

        :return: The reboot_count of this CommandsV2Model.  # noqa: E501
        :rtype: int
        """
        return self._reboot_count

    @reboot_count.setter
    def reboot_count(self, reboot_count):
        """Sets the reboot_count of this CommandsV2Model.

        Number of reboots the BitLocker encryption on the operating system volume is suspended for (value should be between 1 and 15).  # noqa: E501

        :param reboot_count: The reboot_count of this CommandsV2Model.  # noqa: E501
        :type: int
        """

        self._reboot_count = reboot_count

    @property
    def device_restart(self):
        """Gets the device_restart of this CommandsV2Model.  # noqa: E501

        The DeviceRestart command options.  # noqa: E501

        :return: The device_restart of this CommandsV2Model.  # noqa: E501
        :rtype: DeviceRestartV2Model
        """
        return self._device_restart

    @device_restart.setter
    def device_restart(self, device_restart):
        """Sets the device_restart of this CommandsV2Model.

        The DeviceRestart command options.  # noqa: E501

        :param device_restart: The device_restart of this CommandsV2Model.  # noqa: E501
        :type: DeviceRestartV2Model
        """

        self._device_restart = device_restart

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommandsV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommandsV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommandsV2Model):
            return True

        return self.to_dict() != other.to_dict()
