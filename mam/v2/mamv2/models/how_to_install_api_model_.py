# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv2.configuration import Configuration


class HowToInstallApiModel_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'install_context': 'str',
        'install_command': 'str',
        'admin_privileges': 'bool',
        'device_restart': 'str',
        'retry_count': 'int',
        'retry_interval_in_minutes': 'int',
        'install_timeout_in_minutes': 'int',
        'installer_reboot_exit_code': 'str',
        'installer_success_exit_code': 'str',
        'restart_deadline_in_days': 'int'
    }

    attribute_map = {
        'install_context': 'InstallContext',
        'install_command': 'InstallCommand',
        'admin_privileges': 'AdminPrivileges',
        'device_restart': 'DeviceRestart',
        'retry_count': 'RetryCount',
        'retry_interval_in_minutes': 'RetryIntervalInMinutes',
        'install_timeout_in_minutes': 'InstallTimeoutInMinutes',
        'installer_reboot_exit_code': 'InstallerRebootExitCode',
        'installer_success_exit_code': 'InstallerSuccessExitCode',
        'restart_deadline_in_days': 'RestartDeadlineInDays'
    }

    def __init__(self, install_context=None, install_command=None, admin_privileges=None, device_restart=None, retry_count=None, retry_interval_in_minutes=None, install_timeout_in_minutes=None, installer_reboot_exit_code=None, installer_success_exit_code=None, restart_deadline_in_days=None, _configuration=None):  # noqa: E501
        """HowToInstallApiModel_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._install_context = None
        self._install_command = None
        self._admin_privileges = None
        self._device_restart = None
        self._retry_count = None
        self._retry_interval_in_minutes = None
        self._install_timeout_in_minutes = None
        self._installer_reboot_exit_code = None
        self._installer_success_exit_code = None
        self._restart_deadline_in_days = None
        self.discriminator = None

        if install_context is not None:
            self.install_context = install_context
        if install_command is not None:
            self.install_command = install_command
        if admin_privileges is not None:
            self.admin_privileges = admin_privileges
        if device_restart is not None:
            self.device_restart = device_restart
        if retry_count is not None:
            self.retry_count = retry_count
        if retry_interval_in_minutes is not None:
            self.retry_interval_in_minutes = retry_interval_in_minutes
        if install_timeout_in_minutes is not None:
            self.install_timeout_in_minutes = install_timeout_in_minutes
        if installer_reboot_exit_code is not None:
            self.installer_reboot_exit_code = installer_reboot_exit_code
        if installer_success_exit_code is not None:
            self.installer_success_exit_code = installer_success_exit_code
        if restart_deadline_in_days is not None:
            self.restart_deadline_in_days = restart_deadline_in_days

    @property
    def install_context(self):
        """Gets the install_context of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets install context (Supported values:  Device, User) where the package has to be installed.  # noqa: E501

        :return: The install_context of this HowToInstallApiModel_.  # noqa: E501
        :rtype: str
        """
        return self._install_context

    @install_context.setter
    def install_context(self, install_context):
        """Sets the install_context of this HowToInstallApiModel_.

        Gets or sets install context (Supported values:  Device, User) where the package has to be installed.  # noqa: E501

        :param install_context: The install_context of this HowToInstallApiModel_.  # noqa: E501
        :type: str
        """

        self._install_context = install_context

    @property
    def install_command(self):
        """Gets the install_command of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets the install command to install a package using the command line ex: \"/quiet\".  # noqa: E501

        :return: The install_command of this HowToInstallApiModel_.  # noqa: E501
        :rtype: str
        """
        return self._install_command

    @install_command.setter
    def install_command(self, install_command):
        """Sets the install_command of this HowToInstallApiModel_.

        Gets or sets the install command to install a package using the command line ex: \"/quiet\".  # noqa: E501

        :param install_command: The install_command of this HowToInstallApiModel_.  # noqa: E501
        :type: str
        """

        self._install_command = install_command

    @property
    def admin_privileges(self):
        """Gets the admin_privileges of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets a value indicating whether admin privileges are needed for the installation of a package.  # noqa: E501

        :return: The admin_privileges of this HowToInstallApiModel_.  # noqa: E501
        :rtype: bool
        """
        return self._admin_privileges

    @admin_privileges.setter
    def admin_privileges(self, admin_privileges):
        """Sets the admin_privileges of this HowToInstallApiModel_.

        Gets or sets a value indicating whether admin privileges are needed for the installation of a package.  # noqa: E501

        :param admin_privileges: The admin_privileges of this HowToInstallApiModel_.  # noqa: E501
        :type: bool
        """

        self._admin_privileges = admin_privileges

    @property
    def device_restart(self):
        """Gets the device_restart of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets the device restart option. Supported values: DoNotRestart, ForceRestart, RestartIfNeeded.  # noqa: E501

        :return: The device_restart of this HowToInstallApiModel_.  # noqa: E501
        :rtype: str
        """
        return self._device_restart

    @device_restart.setter
    def device_restart(self, device_restart):
        """Sets the device_restart of this HowToInstallApiModel_.

        Gets or sets the device restart option. Supported values: DoNotRestart, ForceRestart, RestartIfNeeded.  # noqa: E501

        :param device_restart: The device_restart of this HowToInstallApiModel_.  # noqa: E501
        :type: str
        """

        self._device_restart = device_restart

    @property
    def retry_count(self):
        """Gets the retry_count of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets the number of times package installation operation will be retried. Valid range 0 - 10.  # noqa: E501

        :return: The retry_count of this HowToInstallApiModel_.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this HowToInstallApiModel_.

        Gets or sets the number of times package installation operation will be retried. Valid range 0 - 10.  # noqa: E501

        :param retry_count: The retry_count of this HowToInstallApiModel_.  # noqa: E501
        :type: int
        """

        self._retry_count = retry_count

    @property
    def retry_interval_in_minutes(self):
        """Gets the retry_interval_in_minutes of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets the amount of time in minutes between retry operations.  Valid range 0 - 10.  # noqa: E501

        :return: The retry_interval_in_minutes of this HowToInstallApiModel_.  # noqa: E501
        :rtype: int
        """
        return self._retry_interval_in_minutes

    @retry_interval_in_minutes.setter
    def retry_interval_in_minutes(self, retry_interval_in_minutes):
        """Sets the retry_interval_in_minutes of this HowToInstallApiModel_.

        Gets or sets the amount of time in minutes between retry operations.  Valid range 0 - 10.  # noqa: E501

        :param retry_interval_in_minutes: The retry_interval_in_minutes of this HowToInstallApiModel_.  # noqa: E501
        :type: int
        """

        self._retry_interval_in_minutes = retry_interval_in_minutes

    @property
    def install_timeout_in_minutes(self):
        """Gets the install_timeout_in_minutes of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets the amount of time in minutes that the installation process can run before the installer considers the installation may have failed. Valid range 0 - 60.  # noqa: E501

        :return: The install_timeout_in_minutes of this HowToInstallApiModel_.  # noqa: E501
        :rtype: int
        """
        return self._install_timeout_in_minutes

    @install_timeout_in_minutes.setter
    def install_timeout_in_minutes(self, install_timeout_in_minutes):
        """Sets the install_timeout_in_minutes of this HowToInstallApiModel_.

        Gets or sets the amount of time in minutes that the installation process can run before the installer considers the installation may have failed. Valid range 0 - 60.  # noqa: E501

        :param install_timeout_in_minutes: The install_timeout_in_minutes of this HowToInstallApiModel_.  # noqa: E501
        :type: int
        """

        self._install_timeout_in_minutes = install_timeout_in_minutes

    @property
    def installer_reboot_exit_code(self):
        """Gets the installer_reboot_exit_code of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets the success exit code.  # noqa: E501

        :return: The installer_reboot_exit_code of this HowToInstallApiModel_.  # noqa: E501
        :rtype: str
        """
        return self._installer_reboot_exit_code

    @installer_reboot_exit_code.setter
    def installer_reboot_exit_code(self, installer_reboot_exit_code):
        """Sets the installer_reboot_exit_code of this HowToInstallApiModel_.

        Gets or sets the success exit code.  # noqa: E501

        :param installer_reboot_exit_code: The installer_reboot_exit_code of this HowToInstallApiModel_.  # noqa: E501
        :type: str
        """

        self._installer_reboot_exit_code = installer_reboot_exit_code

    @property
    def installer_success_exit_code(self):
        """Gets the installer_success_exit_code of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets the success exit code.  # noqa: E501

        :return: The installer_success_exit_code of this HowToInstallApiModel_.  # noqa: E501
        :rtype: str
        """
        return self._installer_success_exit_code

    @installer_success_exit_code.setter
    def installer_success_exit_code(self, installer_success_exit_code):
        """Sets the installer_success_exit_code of this HowToInstallApiModel_.

        Gets or sets the success exit code.  # noqa: E501

        :param installer_success_exit_code: The installer_success_exit_code of this HowToInstallApiModel_.  # noqa: E501
        :type: str
        """

        self._installer_success_exit_code = installer_success_exit_code

    @property
    def restart_deadline_in_days(self):
        """Gets the restart_deadline_in_days of this HowToInstallApiModel_.  # noqa: E501

        Gets or sets the numbers days after which device is force restarted.  # noqa: E501

        :return: The restart_deadline_in_days of this HowToInstallApiModel_.  # noqa: E501
        :rtype: int
        """
        return self._restart_deadline_in_days

    @restart_deadline_in_days.setter
    def restart_deadline_in_days(self, restart_deadline_in_days):
        """Sets the restart_deadline_in_days of this HowToInstallApiModel_.

        Gets or sets the numbers days after which device is force restarted.  # noqa: E501

        :param restart_deadline_in_days: The restart_deadline_in_days of this HowToInstallApiModel_.  # noqa: E501
        :type: int
        """

        self._restart_deadline_in_days = restart_deadline_in_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HowToInstallApiModel_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HowToInstallApiModel_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HowToInstallApiModel_):
            return True

        return self.to_dict() != other.to_dict()
