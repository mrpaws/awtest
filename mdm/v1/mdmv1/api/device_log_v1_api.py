# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class DeviceLogV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_log_v1_get_device_log_by_source_async(self, device_uuid, source_uuid, **kwargs):  # noqa: E501
        """New - Gets the logs associated with particular source from device.  # noqa: E501

        Get the logs of device that belong to each source Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_log_v1_get_device_log_by_source_async(device_uuid, source_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: Unique Identifier for the device.(Required). (required)
        :param str source_uuid: Unique Identifier for the source associated with log.(Required). (required)
        :param datetime generated_after: Logs generated after the timestamp.
        :param datetime generated_before: Logs generated before the timestamp.
        :param int limit: Max numbers of records to be retrieved.
        :param int offset: Current position of the result set.
        :param object sort_order: Sort order.
        :return: list[DeviceLogResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_log_v1_get_device_log_by_source_async_with_http_info(device_uuid, source_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_log_v1_get_device_log_by_source_async_with_http_info(device_uuid, source_uuid, **kwargs)  # noqa: E501
            return data

    def device_log_v1_get_device_log_by_source_async_with_http_info(self, device_uuid, source_uuid, **kwargs):  # noqa: E501
        """New - Gets the logs associated with particular source from device.  # noqa: E501

        Get the logs of device that belong to each source Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_log_v1_get_device_log_by_source_async_with_http_info(device_uuid, source_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: Unique Identifier for the device.(Required). (required)
        :param str source_uuid: Unique Identifier for the source associated with log.(Required). (required)
        :param datetime generated_after: Logs generated after the timestamp.
        :param datetime generated_before: Logs generated before the timestamp.
        :param int limit: Max numbers of records to be retrieved.
        :param int offset: Current position of the result set.
        :param object sort_order: Sort order.
        :return: list[DeviceLogResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_uuid', 'source_uuid', 'generated_after', 'generated_before', 'limit', 'offset', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_log_v1_get_device_log_by_source_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_uuid' is set
        if self.api_client.client_side_validation and ('device_uuid' not in params or
                                                       params['device_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_uuid` when calling `device_log_v1_get_device_log_by_source_async`")  # noqa: E501
        # verify the required parameter 'source_uuid' is set
        if self.api_client.client_side_validation and ('source_uuid' not in params or
                                                       params['source_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source_uuid` when calling `device_log_v1_get_device_log_by_source_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_uuid' in params:
            path_params['deviceUuid'] = params['device_uuid']  # noqa: E501
        if 'source_uuid' in params:
            path_params['sourceUuid'] = params['source_uuid']  # noqa: E501

        query_params = []
        if 'generated_after' in params:
            query_params.append(('generated_after', params['generated_after']))  # noqa: E501
        if 'generated_before' in params:
            query_params.append(('generated_before', params['generated_before']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceUuid}/sources/{sourceUuid}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceLogResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
