# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleEmailPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_description': 'str',
        'account_type': 'str',
        'path_prefix': 'str',
        'user_display_name': 'str',
        'email_address': 'str',
        'prevent_moving_messages': 'bool',
        'disable_recent_contact_sync': 'bool',
        'incoming_mail_server_host_name': 'str',
        'incoming_mail_server_port_number': 'str',
        'incoming_mail_server_use_ssl': 'bool',
        'incoming_mail_server_username': 'str',
        'incoming_mail_server_authentication': 'str',
        'incoming_password': 'str',
        'outgoing_mail_server_host_name': 'str',
        'outgoing_mail_server_port_number': 'str',
        'outgoing_mail_server_authentication': 'str',
        'outgoing_mail_server_use_ssl': 'bool',
        'outgoing_mail_server_username': 'str',
        'outgoing_password_same_as_incoming': 'bool',
        'outgoing_password': 'str',
        'prevent_use_in_third_party_apps': 'bool',
        'use_smime': 'bool',
        'smime_certificate': 'str',
        'smime_encryption_certificate': 'str',
        'smime_encryption_enabled': 'bool',
        'smime_signing_enabled': 'bool',
        'smime_signing_user_overrideable': 'bool',
        'smime_signing_certificate_uuid_user_overrideable': 'bool',
        'smime_encrypt_by_default': 'bool',
        'smime_encrypt_by_default_user_overrideable': 'bool',
        'smime_encryption_certificate_uuid_user_overrideable': 'bool',
        'smime_enable_encryption_per_message_switch': 'bool'
    }

    attribute_map = {
        'account_description': 'AccountDescription',
        'account_type': 'AccountType',
        'path_prefix': 'PathPrefix',
        'user_display_name': 'UserDisplayName',
        'email_address': 'EmailAddress',
        'prevent_moving_messages': 'PreventMovingMessages',
        'disable_recent_contact_sync': 'DisableRecentContactSync',
        'incoming_mail_server_host_name': 'IncomingMailServerHostName',
        'incoming_mail_server_port_number': 'IncomingMailServerPortNumber',
        'incoming_mail_server_use_ssl': 'IncomingMailServerUseSSL',
        'incoming_mail_server_username': 'IncomingMailServerUsername',
        'incoming_mail_server_authentication': 'IncomingMailServerAuthentication',
        'incoming_password': 'IncomingPassword',
        'outgoing_mail_server_host_name': 'OutgoingMailServerHostName',
        'outgoing_mail_server_port_number': 'OutgoingMailServerPortNumber',
        'outgoing_mail_server_authentication': 'OutgoingMailServerAuthentication',
        'outgoing_mail_server_use_ssl': 'OutgoingMailServerUseSSL',
        'outgoing_mail_server_username': 'OutgoingMailServerUsername',
        'outgoing_password_same_as_incoming': 'OutgoingPasswordSameAsIncoming',
        'outgoing_password': 'OutgoingPassword',
        'prevent_use_in_third_party_apps': 'PreventUseInThirdPartyApps',
        'use_smime': 'UseSMIME',
        'smime_certificate': 'SMIMECertificate',
        'smime_encryption_certificate': 'SMIMEEncryptionCertificate',
        'smime_encryption_enabled': 'SMIMEEncryptionEnabled',
        'smime_signing_enabled': 'SMIMESigningEnabled',
        'smime_signing_user_overrideable': 'SMIMESigningUserOverrideable',
        'smime_signing_certificate_uuid_user_overrideable': 'SMIMESigningCertificateUUIDUserOverrideable',
        'smime_encrypt_by_default': 'SMIMEEncryptByDefault',
        'smime_encrypt_by_default_user_overrideable': 'SMIMEEncryptByDefaultUserOverrideable',
        'smime_encryption_certificate_uuid_user_overrideable': 'SMIMEEncryptionCertificateUUIDUserOverrideable',
        'smime_enable_encryption_per_message_switch': 'SMIMEEnableEncryptionPerMessageSwitch'
    }

    def __init__(self, account_description=None, account_type=None, path_prefix=None, user_display_name=None, email_address=None, prevent_moving_messages=None, disable_recent_contact_sync=None, incoming_mail_server_host_name=None, incoming_mail_server_port_number=None, incoming_mail_server_use_ssl=None, incoming_mail_server_username=None, incoming_mail_server_authentication=None, incoming_password=None, outgoing_mail_server_host_name=None, outgoing_mail_server_port_number=None, outgoing_mail_server_authentication=None, outgoing_mail_server_use_ssl=None, outgoing_mail_server_username=None, outgoing_password_same_as_incoming=None, outgoing_password=None, prevent_use_in_third_party_apps=None, use_smime=None, smime_certificate=None, smime_encryption_certificate=None, smime_encryption_enabled=None, smime_signing_enabled=None, smime_signing_user_overrideable=None, smime_signing_certificate_uuid_user_overrideable=None, smime_encrypt_by_default=None, smime_encrypt_by_default_user_overrideable=None, smime_encryption_certificate_uuid_user_overrideable=None, smime_enable_encryption_per_message_switch=None, _configuration=None):  # noqa: E501
        """AppleEmailPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_description = None
        self._account_type = None
        self._path_prefix = None
        self._user_display_name = None
        self._email_address = None
        self._prevent_moving_messages = None
        self._disable_recent_contact_sync = None
        self._incoming_mail_server_host_name = None
        self._incoming_mail_server_port_number = None
        self._incoming_mail_server_use_ssl = None
        self._incoming_mail_server_username = None
        self._incoming_mail_server_authentication = None
        self._incoming_password = None
        self._outgoing_mail_server_host_name = None
        self._outgoing_mail_server_port_number = None
        self._outgoing_mail_server_authentication = None
        self._outgoing_mail_server_use_ssl = None
        self._outgoing_mail_server_username = None
        self._outgoing_password_same_as_incoming = None
        self._outgoing_password = None
        self._prevent_use_in_third_party_apps = None
        self._use_smime = None
        self._smime_certificate = None
        self._smime_encryption_certificate = None
        self._smime_encryption_enabled = None
        self._smime_signing_enabled = None
        self._smime_signing_user_overrideable = None
        self._smime_signing_certificate_uuid_user_overrideable = None
        self._smime_encrypt_by_default = None
        self._smime_encrypt_by_default_user_overrideable = None
        self._smime_encryption_certificate_uuid_user_overrideable = None
        self._smime_enable_encryption_per_message_switch = None
        self.discriminator = None

        if account_description is not None:
            self.account_description = account_description
        if account_type is not None:
            self.account_type = account_type
        if path_prefix is not None:
            self.path_prefix = path_prefix
        if user_display_name is not None:
            self.user_display_name = user_display_name
        if email_address is not None:
            self.email_address = email_address
        if prevent_moving_messages is not None:
            self.prevent_moving_messages = prevent_moving_messages
        if disable_recent_contact_sync is not None:
            self.disable_recent_contact_sync = disable_recent_contact_sync
        if incoming_mail_server_host_name is not None:
            self.incoming_mail_server_host_name = incoming_mail_server_host_name
        if incoming_mail_server_port_number is not None:
            self.incoming_mail_server_port_number = incoming_mail_server_port_number
        if incoming_mail_server_use_ssl is not None:
            self.incoming_mail_server_use_ssl = incoming_mail_server_use_ssl
        if incoming_mail_server_username is not None:
            self.incoming_mail_server_username = incoming_mail_server_username
        if incoming_mail_server_authentication is not None:
            self.incoming_mail_server_authentication = incoming_mail_server_authentication
        if incoming_password is not None:
            self.incoming_password = incoming_password
        if outgoing_mail_server_host_name is not None:
            self.outgoing_mail_server_host_name = outgoing_mail_server_host_name
        if outgoing_mail_server_port_number is not None:
            self.outgoing_mail_server_port_number = outgoing_mail_server_port_number
        if outgoing_mail_server_authentication is not None:
            self.outgoing_mail_server_authentication = outgoing_mail_server_authentication
        if outgoing_mail_server_use_ssl is not None:
            self.outgoing_mail_server_use_ssl = outgoing_mail_server_use_ssl
        if outgoing_mail_server_username is not None:
            self.outgoing_mail_server_username = outgoing_mail_server_username
        if outgoing_password_same_as_incoming is not None:
            self.outgoing_password_same_as_incoming = outgoing_password_same_as_incoming
        if outgoing_password is not None:
            self.outgoing_password = outgoing_password
        if prevent_use_in_third_party_apps is not None:
            self.prevent_use_in_third_party_apps = prevent_use_in_third_party_apps
        if use_smime is not None:
            self.use_smime = use_smime
        if smime_certificate is not None:
            self.smime_certificate = smime_certificate
        if smime_encryption_certificate is not None:
            self.smime_encryption_certificate = smime_encryption_certificate
        if smime_encryption_enabled is not None:
            self.smime_encryption_enabled = smime_encryption_enabled
        if smime_signing_enabled is not None:
            self.smime_signing_enabled = smime_signing_enabled
        if smime_signing_user_overrideable is not None:
            self.smime_signing_user_overrideable = smime_signing_user_overrideable
        if smime_signing_certificate_uuid_user_overrideable is not None:
            self.smime_signing_certificate_uuid_user_overrideable = smime_signing_certificate_uuid_user_overrideable
        if smime_encrypt_by_default is not None:
            self.smime_encrypt_by_default = smime_encrypt_by_default
        if smime_encrypt_by_default_user_overrideable is not None:
            self.smime_encrypt_by_default_user_overrideable = smime_encrypt_by_default_user_overrideable
        if smime_encryption_certificate_uuid_user_overrideable is not None:
            self.smime_encryption_certificate_uuid_user_overrideable = smime_encryption_certificate_uuid_user_overrideable
        if smime_enable_encryption_per_message_switch is not None:
            self.smime_enable_encryption_per_message_switch = smime_enable_encryption_per_message_switch

    @property
    def account_description(self):
        """Gets the account_description of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a user-visible description of the email account, shown in the Mail and Settings applications.  # noqa: E501

        :return: The account_description of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._account_description

    @account_description.setter
    def account_description(self, account_description):
        """Sets the account_description of this AppleEmailPayloadV2Entity.

        Gets or sets a user-visible description of the email account, shown in the Mail and Settings applications.  # noqa: E501

        :param account_description: The account_description of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._account_description = account_description

    @property
    def account_type(self):
        """Gets the account_type of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets defines the protocol to be used for that account.  # noqa: E501

        :return: The account_type of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this AppleEmailPayloadV2Entity.

        Gets or sets defines the protocol to be used for that account.  # noqa: E501

        :param account_type: The account_type of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def path_prefix(self):
        """Gets the path_prefix of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets path prefix for IMAP mail server.  # noqa: E501

        :return: The path_prefix of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._path_prefix

    @path_prefix.setter
    def path_prefix(self, path_prefix):
        """Sets the path_prefix of this AppleEmailPayloadV2Entity.

        Gets or sets path prefix for IMAP mail server.  # noqa: E501

        :param path_prefix: The path_prefix of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._path_prefix = path_prefix

    @property
    def user_display_name(self):
        """Gets the user_display_name of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets the full user name for the account.  # noqa: E501

        :return: The user_display_name of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._user_display_name

    @user_display_name.setter
    def user_display_name(self, user_display_name):
        """Sets the user_display_name of this AppleEmailPayloadV2Entity.

        Gets or sets the full user name for the account.  # noqa: E501

        :param user_display_name: The user_display_name of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._user_display_name = user_display_name

    @property
    def email_address(self):
        """Gets the email_address of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets designates the full email address for the account.  # noqa: E501

        :return: The email_address of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AppleEmailPayloadV2Entity.

        Gets or sets designates the full email address for the account.  # noqa: E501

        :param email_address: The email_address of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def prevent_moving_messages(self):
        """Gets the prevent_moving_messages of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, messages may not be moved out of this email account into another account on iOS 5+.  # noqa: E501

        :return: The prevent_moving_messages of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_moving_messages

    @prevent_moving_messages.setter
    def prevent_moving_messages(self, prevent_moving_messages):
        """Sets the prevent_moving_messages of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if true, messages may not be moved out of this email account into another account on iOS 5+.  # noqa: E501

        :param prevent_moving_messages: The prevent_moving_messages of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._prevent_moving_messages = prevent_moving_messages

    @property
    def disable_recent_contact_sync(self):
        """Gets the disable_recent_contact_sync of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, this account is excluded from address Recents syncing on iOS 6+.  # noqa: E501

        :return: The disable_recent_contact_sync of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._disable_recent_contact_sync

    @disable_recent_contact_sync.setter
    def disable_recent_contact_sync(self, disable_recent_contact_sync):
        """Sets the disable_recent_contact_sync of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if true, this account is excluded from address Recents syncing on iOS 6+.  # noqa: E501

        :param disable_recent_contact_sync: The disable_recent_contact_sync of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._disable_recent_contact_sync = disable_recent_contact_sync

    @property
    def incoming_mail_server_host_name(self):
        """Gets the incoming_mail_server_host_name of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets designates the incoming mail server host name (or IP address).  # noqa: E501

        :return: The incoming_mail_server_host_name of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_host_name

    @incoming_mail_server_host_name.setter
    def incoming_mail_server_host_name(self, incoming_mail_server_host_name):
        """Sets the incoming_mail_server_host_name of this AppleEmailPayloadV2Entity.

        Gets or sets designates the incoming mail server host name (or IP address).  # noqa: E501

        :param incoming_mail_server_host_name: The incoming_mail_server_host_name of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_host_name = incoming_mail_server_host_name

    @property
    def incoming_mail_server_port_number(self):
        """Gets the incoming_mail_server_port_number of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets designates the incoming mail server port number.  # noqa: E501

        :return: The incoming_mail_server_port_number of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_port_number

    @incoming_mail_server_port_number.setter
    def incoming_mail_server_port_number(self, incoming_mail_server_port_number):
        """Sets the incoming_mail_server_port_number of this AppleEmailPayloadV2Entity.

        Gets or sets designates the incoming mail server port number.  # noqa: E501

        :param incoming_mail_server_port_number: The incoming_mail_server_port_number of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_port_number = incoming_mail_server_port_number

    @property
    def incoming_mail_server_use_ssl(self):
        """Gets the incoming_mail_server_use_ssl of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether designates whether the incoming mail server uses SSL for authentication.  # noqa: E501

        :return: The incoming_mail_server_use_ssl of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._incoming_mail_server_use_ssl

    @incoming_mail_server_use_ssl.setter
    def incoming_mail_server_use_ssl(self, incoming_mail_server_use_ssl):
        """Sets the incoming_mail_server_use_ssl of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether designates whether the incoming mail server uses SSL for authentication.  # noqa: E501

        :param incoming_mail_server_use_ssl: The incoming_mail_server_use_ssl of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._incoming_mail_server_use_ssl = incoming_mail_server_use_ssl

    @property
    def incoming_mail_server_username(self):
        """Gets the incoming_mail_server_username of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets designates the user name for the email account, usually the same as the email address up to the @ character.  # noqa: E501

        :return: The incoming_mail_server_username of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_username

    @incoming_mail_server_username.setter
    def incoming_mail_server_username(self, incoming_mail_server_username):
        """Sets the incoming_mail_server_username of this AppleEmailPayloadV2Entity.

        Gets or sets designates the user name for the email account, usually the same as the email address up to the @ character.  # noqa: E501

        :param incoming_mail_server_username: The incoming_mail_server_username of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_username = incoming_mail_server_username

    @property
    def incoming_mail_server_authentication(self):
        """Gets the incoming_mail_server_authentication of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets designates the authentication scheme for incoming mail.  # noqa: E501

        :return: The incoming_mail_server_authentication of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_mail_server_authentication

    @incoming_mail_server_authentication.setter
    def incoming_mail_server_authentication(self, incoming_mail_server_authentication):
        """Sets the incoming_mail_server_authentication of this AppleEmailPayloadV2Entity.

        Gets or sets designates the authentication scheme for incoming mail.  # noqa: E501

        :param incoming_mail_server_authentication: The incoming_mail_server_authentication of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._incoming_mail_server_authentication = incoming_mail_server_authentication

    @property
    def incoming_password(self):
        """Gets the incoming_password of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets password for the Incoming Mail Server.  # noqa: E501

        :return: The incoming_password of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._incoming_password

    @incoming_password.setter
    def incoming_password(self, incoming_password):
        """Sets the incoming_password of this AppleEmailPayloadV2Entity.

        Gets or sets password for the Incoming Mail Server.  # noqa: E501

        :param incoming_password: The incoming_password of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._incoming_password = incoming_password

    @property
    def outgoing_mail_server_host_name(self):
        """Gets the outgoing_mail_server_host_name of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets designates the outgoing mail server host name (or IP address).  # noqa: E501

        :return: The outgoing_mail_server_host_name of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_host_name

    @outgoing_mail_server_host_name.setter
    def outgoing_mail_server_host_name(self, outgoing_mail_server_host_name):
        """Sets the outgoing_mail_server_host_name of this AppleEmailPayloadV2Entity.

        Gets or sets designates the outgoing mail server host name (or IP address).  # noqa: E501

        :param outgoing_mail_server_host_name: The outgoing_mail_server_host_name of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_host_name = outgoing_mail_server_host_name

    @property
    def outgoing_mail_server_port_number(self):
        """Gets the outgoing_mail_server_port_number of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets designates the outgoing mail server port number.  # noqa: E501

        :return: The outgoing_mail_server_port_number of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_port_number

    @outgoing_mail_server_port_number.setter
    def outgoing_mail_server_port_number(self, outgoing_mail_server_port_number):
        """Sets the outgoing_mail_server_port_number of this AppleEmailPayloadV2Entity.

        Gets or sets designates the outgoing mail server port number.  # noqa: E501

        :param outgoing_mail_server_port_number: The outgoing_mail_server_port_number of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_port_number = outgoing_mail_server_port_number

    @property
    def outgoing_mail_server_authentication(self):
        """Gets the outgoing_mail_server_authentication of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets designates the authentication scheme for outgoing mail.  # noqa: E501

        :return: The outgoing_mail_server_authentication of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_authentication

    @outgoing_mail_server_authentication.setter
    def outgoing_mail_server_authentication(self, outgoing_mail_server_authentication):
        """Sets the outgoing_mail_server_authentication of this AppleEmailPayloadV2Entity.

        Gets or sets designates the authentication scheme for outgoing mail.  # noqa: E501

        :param outgoing_mail_server_authentication: The outgoing_mail_server_authentication of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_authentication = outgoing_mail_server_authentication

    @property
    def outgoing_mail_server_use_ssl(self):
        """Gets the outgoing_mail_server_use_ssl of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether designates whether the outgoing mail server uses SSL for authentication.  # noqa: E501

        :return: The outgoing_mail_server_use_ssl of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._outgoing_mail_server_use_ssl

    @outgoing_mail_server_use_ssl.setter
    def outgoing_mail_server_use_ssl(self, outgoing_mail_server_use_ssl):
        """Sets the outgoing_mail_server_use_ssl of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether designates whether the outgoing mail server uses SSL for authentication.  # noqa: E501

        :param outgoing_mail_server_use_ssl: The outgoing_mail_server_use_ssl of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._outgoing_mail_server_use_ssl = outgoing_mail_server_use_ssl

    @property
    def outgoing_mail_server_username(self):
        """Gets the outgoing_mail_server_username of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets designates the user name for the email account, usually the same as the email address up to the @ character.  # noqa: E501

        :return: The outgoing_mail_server_username of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_mail_server_username

    @outgoing_mail_server_username.setter
    def outgoing_mail_server_username(self, outgoing_mail_server_username):
        """Sets the outgoing_mail_server_username of this AppleEmailPayloadV2Entity.

        Gets or sets designates the user name for the email account, usually the same as the email address up to the @ character.  # noqa: E501

        :param outgoing_mail_server_username: The outgoing_mail_server_username of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outgoing_mail_server_username = outgoing_mail_server_username

    @property
    def outgoing_password_same_as_incoming(self):
        """Gets the outgoing_password_same_as_incoming of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set, the user will be prompted for the password only once and it will be used for both outgoing and incoming mail.  # noqa: E501

        :return: The outgoing_password_same_as_incoming of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._outgoing_password_same_as_incoming

    @outgoing_password_same_as_incoming.setter
    def outgoing_password_same_as_incoming(self, outgoing_password_same_as_incoming):
        """Sets the outgoing_password_same_as_incoming of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if set, the user will be prompted for the password only once and it will be used for both outgoing and incoming mail.  # noqa: E501

        :param outgoing_password_same_as_incoming: The outgoing_password_same_as_incoming of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._outgoing_password_same_as_incoming = outgoing_password_same_as_incoming

    @property
    def outgoing_password(self):
        """Gets the outgoing_password of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets password for the Outgoing Mail Server.  # noqa: E501

        :return: The outgoing_password of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._outgoing_password

    @outgoing_password.setter
    def outgoing_password(self, outgoing_password):
        """Sets the outgoing_password of this AppleEmailPayloadV2Entity.

        Gets or sets password for the Outgoing Mail Server.  # noqa: E501

        :param outgoing_password: The outgoing_password of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._outgoing_password = outgoing_password

    @property
    def prevent_use_in_third_party_apps(self):
        """Gets the prevent_use_in_third_party_apps of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, this account is not available for sending mail in any app other than the Apple Mail app on iOS 5+.  # noqa: E501

        :return: The prevent_use_in_third_party_apps of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_use_in_third_party_apps

    @prevent_use_in_third_party_apps.setter
    def prevent_use_in_third_party_apps(self, prevent_use_in_third_party_apps):
        """Sets the prevent_use_in_third_party_apps of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if true, this account is not available for sending mail in any app other than the Apple Mail app on iOS 5+.  # noqa: E501

        :param prevent_use_in_third_party_apps: The prevent_use_in_third_party_apps of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._prevent_use_in_third_party_apps = prevent_use_in_third_party_apps

    @property
    def use_smime(self):
        """Gets the use_smime of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, this account supports S/MIME on iOS 5.0 through iOS 9.3.3.  # noqa: E501

        :return: The use_smime of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_smime

    @use_smime.setter
    def use_smime(self, use_smime):
        """Sets the use_smime of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if true, this account supports S/MIME on iOS 5.0 through iOS 9.3.3.  # noqa: E501

        :param use_smime: The use_smime of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_smime = use_smime

    @property
    def smime_certificate(self):
        """Gets the smime_certificate of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets s/MIME Certificate used to sign messages sent from this account on iOS 5+.  # noqa: E501

        :return: The smime_certificate of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._smime_certificate

    @smime_certificate.setter
    def smime_certificate(self, smime_certificate):
        """Sets the smime_certificate of this AppleEmailPayloadV2Entity.

        Gets or sets s/MIME Certificate used to sign messages sent from this account on iOS 5+.  # noqa: E501

        :param smime_certificate: The smime_certificate of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._smime_certificate = smime_certificate

    @property
    def smime_encryption_certificate(self):
        """Gets the smime_encryption_certificate of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets s/MIME Certificate used to decrypt messages sent to this account on iOS 5+.  # noqa: E501

        :return: The smime_encryption_certificate of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._smime_encryption_certificate

    @smime_encryption_certificate.setter
    def smime_encryption_certificate(self, smime_encryption_certificate):
        """Sets the smime_encryption_certificate of this AppleEmailPayloadV2Entity.

        Gets or sets s/MIME Certificate used to decrypt messages sent to this account on iOS 5+.  # noqa: E501

        :param smime_encryption_certificate: The smime_encryption_certificate of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._smime_encryption_certificate = smime_encryption_certificate

    @property
    def smime_encryption_enabled(self):
        """Gets the smime_encryption_enabled of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, S/MIME encryption is on by default for this account on iOS 10.3+.  # noqa: E501

        :return: The smime_encryption_enabled of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_encryption_enabled

    @smime_encryption_enabled.setter
    def smime_encryption_enabled(self, smime_encryption_enabled):
        """Sets the smime_encryption_enabled of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, S/MIME encryption is on by default for this account on iOS 10.3+.  # noqa: E501

        :param smime_encryption_enabled: The smime_encryption_enabled of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_encryption_enabled = smime_encryption_enabled

    @property
    def smime_signing_enabled(self):
        """Gets the smime_signing_enabled of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, S/MIME signing is enabled for this account on iOS 10.3+.  # noqa: E501

        :return: The smime_signing_enabled of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_signing_enabled

    @smime_signing_enabled.setter
    def smime_signing_enabled(self, smime_signing_enabled):
        """Sets the smime_signing_enabled of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, S/MIME signing is enabled for this account on iOS 10.3+.  # noqa: E501

        :param smime_signing_enabled: The smime_signing_enabled of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_signing_enabled = smime_signing_enabled

    @property
    def smime_signing_user_overrideable(self):
        """Gets the smime_signing_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will allow users to toggle S/MIME signing in device email settings.  # noqa: E501

        :return: The smime_signing_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_signing_user_overrideable

    @smime_signing_user_overrideable.setter
    def smime_signing_user_overrideable(self, smime_signing_user_overrideable):
        """Sets the smime_signing_user_overrideable of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will allow users to toggle S/MIME signing in device email settings.  # noqa: E501

        :param smime_signing_user_overrideable: The smime_signing_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_signing_user_overrideable = smime_signing_user_overrideable

    @property
    def smime_signing_certificate_uuid_user_overrideable(self):
        """Gets the smime_signing_certificate_uuid_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will allow user to choose S/MIME signing certificate on iOS 12.  # noqa: E501

        :return: The smime_signing_certificate_uuid_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_signing_certificate_uuid_user_overrideable

    @smime_signing_certificate_uuid_user_overrideable.setter
    def smime_signing_certificate_uuid_user_overrideable(self, smime_signing_certificate_uuid_user_overrideable):
        """Sets the smime_signing_certificate_uuid_user_overrideable of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will allow user to choose S/MIME signing certificate on iOS 12.  # noqa: E501

        :param smime_signing_certificate_uuid_user_overrideable: The smime_signing_certificate_uuid_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_signing_certificate_uuid_user_overrideable = smime_signing_certificate_uuid_user_overrideable

    @property
    def smime_encrypt_by_default(self):
        """Gets the smime_encrypt_by_default of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will encrypt by default when S/MIME encryption is enabled for iOS 12.  # noqa: E501

        :return: The smime_encrypt_by_default of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_encrypt_by_default

    @smime_encrypt_by_default.setter
    def smime_encrypt_by_default(self, smime_encrypt_by_default):
        """Sets the smime_encrypt_by_default of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will encrypt by default when S/MIME encryption is enabled for iOS 12.  # noqa: E501

        :param smime_encrypt_by_default: The smime_encrypt_by_default of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_encrypt_by_default = smime_encrypt_by_default

    @property
    def smime_encrypt_by_default_user_overrideable(self):
        """Gets the smime_encrypt_by_default_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will allow user to toggle S/MIME encryption on iOS 12.  # noqa: E501

        :return: The smime_encrypt_by_default_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_encrypt_by_default_user_overrideable

    @smime_encrypt_by_default_user_overrideable.setter
    def smime_encrypt_by_default_user_overrideable(self, smime_encrypt_by_default_user_overrideable):
        """Sets the smime_encrypt_by_default_user_overrideable of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will allow user to toggle S/MIME encryption on iOS 12.  # noqa: E501

        :param smime_encrypt_by_default_user_overrideable: The smime_encrypt_by_default_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_encrypt_by_default_user_overrideable = smime_encrypt_by_default_user_overrideable

    @property
    def smime_encryption_certificate_uuid_user_overrideable(self):
        """Gets the smime_encryption_certificate_uuid_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will allow user to choose S/MIME encryption certificate on iOS 12.  # noqa: E501

        :return: The smime_encryption_certificate_uuid_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_encryption_certificate_uuid_user_overrideable

    @smime_encryption_certificate_uuid_user_overrideable.setter
    def smime_encryption_certificate_uuid_user_overrideable(self, smime_encryption_certificate_uuid_user_overrideable):
        """Sets the smime_encryption_certificate_uuid_user_overrideable of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will allow user to choose S/MIME encryption certificate on iOS 12.  # noqa: E501

        :param smime_encryption_certificate_uuid_user_overrideable: The smime_encryption_certificate_uuid_user_overrideable of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_encryption_certificate_uuid_user_overrideable = smime_encryption_certificate_uuid_user_overrideable

    @property
    def smime_enable_encryption_per_message_switch(self):
        """Gets the smime_enable_encryption_per_message_switch of this AppleEmailPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will enable S/MIME encryption on per-message switch on iOS 12.  # noqa: E501

        :return: The smime_enable_encryption_per_message_switch of this AppleEmailPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_enable_encryption_per_message_switch

    @smime_enable_encryption_per_message_switch.setter
    def smime_enable_encryption_per_message_switch(self, smime_enable_encryption_per_message_switch):
        """Sets the smime_enable_encryption_per_message_switch of this AppleEmailPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will enable S/MIME encryption on per-message switch on iOS 12.  # noqa: E501

        :param smime_enable_encryption_per_message_switch: The smime_enable_encryption_per_message_switch of this AppleEmailPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_enable_encryption_per_message_switch = smime_enable_encryption_per_message_switch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleEmailPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleEmailPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleEmailPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
