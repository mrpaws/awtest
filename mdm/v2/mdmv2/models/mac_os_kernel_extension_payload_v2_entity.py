# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class MacOsKernelExtensionPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_user_overrides': 'bool',
        'allowed_team_identifiers': 'list[str]',
        'allowed_kernel_extensions': 'list[MacOsAllowedKernelExtensionsEntity_]'
    }

    attribute_map = {
        'allow_user_overrides': 'AllowUserOverrides',
        'allowed_team_identifiers': 'AllowedTeamIdentifiers',
        'allowed_kernel_extensions': 'AllowedKernelExtensions'
    }

    def __init__(self, allow_user_overrides=None, allowed_team_identifiers=None, allowed_kernel_extensions=None, _configuration=None):  # noqa: E501
        """MacOsKernelExtensionPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_user_overrides = None
        self._allowed_team_identifiers = None
        self._allowed_kernel_extensions = None
        self.discriminator = None

        if allow_user_overrides is not None:
            self.allow_user_overrides = allow_user_overrides
        if allowed_team_identifiers is not None:
            self.allowed_team_identifiers = allowed_team_identifiers
        if allowed_kernel_extensions is not None:
            self.allowed_kernel_extensions = allowed_kernel_extensions

    @property
    def allow_user_overrides(self):
        """Gets the allow_user_overrides of this MacOsKernelExtensionPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether indicates whether users are allowed to approve additional kernel extensions.  # noqa: E501

        :return: The allow_user_overrides of this MacOsKernelExtensionPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_overrides

    @allow_user_overrides.setter
    def allow_user_overrides(self, allow_user_overrides):
        """Sets the allow_user_overrides of this MacOsKernelExtensionPayloadV2Entity.

        Gets or sets a value indicating whether indicates whether users are allowed to approve additional kernel extensions.  # noqa: E501

        :param allow_user_overrides: The allow_user_overrides of this MacOsKernelExtensionPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_user_overrides = allow_user_overrides

    @property
    def allowed_team_identifiers(self):
        """Gets the allowed_team_identifiers of this MacOsKernelExtensionPayloadV2Entity.  # noqa: E501

        Gets or sets team identifiers for which all validly signed kernel extensions will be allowed to load.  # noqa: E501

        :return: The allowed_team_identifiers of this MacOsKernelExtensionPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_team_identifiers

    @allowed_team_identifiers.setter
    def allowed_team_identifiers(self, allowed_team_identifiers):
        """Sets the allowed_team_identifiers of this MacOsKernelExtensionPayloadV2Entity.

        Gets or sets team identifiers for which all validly signed kernel extensions will be allowed to load.  # noqa: E501

        :param allowed_team_identifiers: The allowed_team_identifiers of this MacOsKernelExtensionPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._allowed_team_identifiers = allowed_team_identifiers

    @property
    def allowed_kernel_extensions(self):
        """Gets the allowed_kernel_extensions of this MacOsKernelExtensionPayloadV2Entity.  # noqa: E501

        Gets or sets set of kernel extensions that will always be allowed to load on the machine.  # noqa: E501

        :return: The allowed_kernel_extensions of this MacOsKernelExtensionPayloadV2Entity.  # noqa: E501
        :rtype: list[MacOsAllowedKernelExtensionsEntity_]
        """
        return self._allowed_kernel_extensions

    @allowed_kernel_extensions.setter
    def allowed_kernel_extensions(self, allowed_kernel_extensions):
        """Sets the allowed_kernel_extensions of this MacOsKernelExtensionPayloadV2Entity.

        Gets or sets set of kernel extensions that will always be allowed to load on the machine.  # noqa: E501

        :param allowed_kernel_extensions: The allowed_kernel_extensions of this MacOsKernelExtensionPayloadV2Entity.  # noqa: E501
        :type: list[MacOsAllowedKernelExtensionsEntity_]
        """

        self._allowed_kernel_extensions = allowed_kernel_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MacOsKernelExtensionPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MacOsKernelExtensionPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MacOsKernelExtensionPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
