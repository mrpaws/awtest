# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class LocationGroupDeviceCountSummaryModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location_group_id': 'int',
        'location_group_name': 'str',
        'total_devices': 'int',
        'device_count_by_enrollment_status': 'DeviceCountByEnrollmentStatusModel_'
    }

    attribute_map = {
        'location_group_id': 'LocationGroupId',
        'location_group_name': 'LocationGroupName',
        'total_devices': 'TotalDevices',
        'device_count_by_enrollment_status': 'DeviceCountByEnrollmentStatus'
    }

    def __init__(self, location_group_id=None, location_group_name=None, total_devices=None, device_count_by_enrollment_status=None, _configuration=None):  # noqa: E501
        """LocationGroupDeviceCountSummaryModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._location_group_id = None
        self._location_group_name = None
        self._total_devices = None
        self._device_count_by_enrollment_status = None
        self.discriminator = None

        if location_group_id is not None:
            self.location_group_id = location_group_id
        if location_group_name is not None:
            self.location_group_name = location_group_name
        if total_devices is not None:
            self.total_devices = total_devices
        if device_count_by_enrollment_status is not None:
            self.device_count_by_enrollment_status = device_count_by_enrollment_status

    @property
    def location_group_id(self):
        """Gets the location_group_id of this LocationGroupDeviceCountSummaryModel.  # noqa: E501

        Gets or sets Location Group Id.  # noqa: E501

        :return: The location_group_id of this LocationGroupDeviceCountSummaryModel.  # noqa: E501
        :rtype: int
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this LocationGroupDeviceCountSummaryModel.

        Gets or sets Location Group Id.  # noqa: E501

        :param location_group_id: The location_group_id of this LocationGroupDeviceCountSummaryModel.  # noqa: E501
        :type: int
        """

        self._location_group_id = location_group_id

    @property
    def location_group_name(self):
        """Gets the location_group_name of this LocationGroupDeviceCountSummaryModel.  # noqa: E501

        Gets or sets Location Group Name.  # noqa: E501

        :return: The location_group_name of this LocationGroupDeviceCountSummaryModel.  # noqa: E501
        :rtype: str
        """
        return self._location_group_name

    @location_group_name.setter
    def location_group_name(self, location_group_name):
        """Sets the location_group_name of this LocationGroupDeviceCountSummaryModel.

        Gets or sets Location Group Name.  # noqa: E501

        :param location_group_name: The location_group_name of this LocationGroupDeviceCountSummaryModel.  # noqa: E501
        :type: str
        """

        self._location_group_name = location_group_name

    @property
    def total_devices(self):
        """Gets the total_devices of this LocationGroupDeviceCountSummaryModel.  # noqa: E501

        Gets or sets the Total device count for this Location Group.  # noqa: E501

        :return: The total_devices of this LocationGroupDeviceCountSummaryModel.  # noqa: E501
        :rtype: int
        """
        return self._total_devices

    @total_devices.setter
    def total_devices(self, total_devices):
        """Sets the total_devices of this LocationGroupDeviceCountSummaryModel.

        Gets or sets the Total device count for this Location Group.  # noqa: E501

        :param total_devices: The total_devices of this LocationGroupDeviceCountSummaryModel.  # noqa: E501
        :type: int
        """

        self._total_devices = total_devices

    @property
    def device_count_by_enrollment_status(self):
        """Gets the device_count_by_enrollment_status of this LocationGroupDeviceCountSummaryModel.  # noqa: E501

        Gets or sets the Device Count Breakup for this Location Group.  # noqa: E501

        :return: The device_count_by_enrollment_status of this LocationGroupDeviceCountSummaryModel.  # noqa: E501
        :rtype: DeviceCountByEnrollmentStatusModel_
        """
        return self._device_count_by_enrollment_status

    @device_count_by_enrollment_status.setter
    def device_count_by_enrollment_status(self, device_count_by_enrollment_status):
        """Sets the device_count_by_enrollment_status of this LocationGroupDeviceCountSummaryModel.

        Gets or sets the Device Count Breakup for this Location Group.  # noqa: E501

        :param device_count_by_enrollment_status: The device_count_by_enrollment_status of this LocationGroupDeviceCountSummaryModel.  # noqa: E501
        :type: DeviceCountByEnrollmentStatusModel_
        """

        self._device_count_by_enrollment_status = device_count_by_enrollment_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationGroupDeviceCountSummaryModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationGroupDeviceCountSummaryModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocationGroupDeviceCountSummaryModel):
            return True

        return self.to_dict() != other.to_dict()
