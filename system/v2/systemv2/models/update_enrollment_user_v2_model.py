# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv2.configuration import Configuration


class UpdateEnrollmentUserV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'display_name': 'str',
        'user_principal_name': 'str',
        'email_address': 'str',
        'email_username': 'str',
        'phone_number': 'str',
        'mobile_number': 'str',
        'department': 'str',
        'employee_identifier': 'str',
        'cost_center': 'str',
        'message_type': 'str',
        'message_template_uuid': 'str',
        'device_staging_enabled': 'bool',
        'device_staging_type': 'str',
        'enrollment_role_uuid': 'str',
        'enrollment_organization_group_uuid': 'str',
        'aad_mapping_attribute': 'str',
        'custom_attribute1': 'str',
        'custom_attribute2': 'str',
        'custom_attribute3': 'str',
        'custom_attribute4': 'str',
        'custom_attribute5': 'str',
        'android_shared_device_mode': 'str',
        'android_shared_device_admin_mode_passcode': 'str',
        'android_shared_device_system_apps_enabled': 'bool'
    }

    attribute_map = {
        'password': 'password',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'display_name': 'displayName',
        'user_principal_name': 'userPrincipalName',
        'email_address': 'emailAddress',
        'email_username': 'emailUsername',
        'phone_number': 'phoneNumber',
        'mobile_number': 'mobileNumber',
        'department': 'department',
        'employee_identifier': 'employeeIdentifier',
        'cost_center': 'costCenter',
        'message_type': 'messageType',
        'message_template_uuid': 'messageTemplateUuid',
        'device_staging_enabled': 'deviceStagingEnabled',
        'device_staging_type': 'deviceStagingType',
        'enrollment_role_uuid': 'enrollmentRoleUuid',
        'enrollment_organization_group_uuid': 'enrollmentOrganizationGroupUuid',
        'aad_mapping_attribute': 'aadMappingAttribute',
        'custom_attribute1': 'CustomAttribute1',
        'custom_attribute2': 'CustomAttribute2',
        'custom_attribute3': 'CustomAttribute3',
        'custom_attribute4': 'CustomAttribute4',
        'custom_attribute5': 'CustomAttribute5',
        'android_shared_device_mode': 'androidSharedDeviceMode',
        'android_shared_device_admin_mode_passcode': 'androidSharedDeviceAdminModePasscode',
        'android_shared_device_system_apps_enabled': 'androidSharedDeviceSystemAppsEnabled'
    }

    def __init__(self, password=None, first_name=None, last_name=None, display_name=None, user_principal_name=None, email_address=None, email_username=None, phone_number=None, mobile_number=None, department=None, employee_identifier=None, cost_center=None, message_type=None, message_template_uuid=None, device_staging_enabled=None, device_staging_type=None, enrollment_role_uuid=None, enrollment_organization_group_uuid=None, aad_mapping_attribute=None, custom_attribute1=None, custom_attribute2=None, custom_attribute3=None, custom_attribute4=None, custom_attribute5=None, android_shared_device_mode=None, android_shared_device_admin_mode_passcode=None, android_shared_device_system_apps_enabled=None, _configuration=None):  # noqa: E501
        """UpdateEnrollmentUserV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._password = None
        self._first_name = None
        self._last_name = None
        self._display_name = None
        self._user_principal_name = None
        self._email_address = None
        self._email_username = None
        self._phone_number = None
        self._mobile_number = None
        self._department = None
        self._employee_identifier = None
        self._cost_center = None
        self._message_type = None
        self._message_template_uuid = None
        self._device_staging_enabled = None
        self._device_staging_type = None
        self._enrollment_role_uuid = None
        self._enrollment_organization_group_uuid = None
        self._aad_mapping_attribute = None
        self._custom_attribute1 = None
        self._custom_attribute2 = None
        self._custom_attribute3 = None
        self._custom_attribute4 = None
        self._custom_attribute5 = None
        self._android_shared_device_mode = None
        self._android_shared_device_admin_mode_passcode = None
        self._android_shared_device_system_apps_enabled = None
        self.discriminator = None

        if password is not None:
            self.password = password
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if display_name is not None:
            self.display_name = display_name
        if user_principal_name is not None:
            self.user_principal_name = user_principal_name
        if email_address is not None:
            self.email_address = email_address
        if email_username is not None:
            self.email_username = email_username
        if phone_number is not None:
            self.phone_number = phone_number
        if mobile_number is not None:
            self.mobile_number = mobile_number
        if department is not None:
            self.department = department
        if employee_identifier is not None:
            self.employee_identifier = employee_identifier
        if cost_center is not None:
            self.cost_center = cost_center
        if message_type is not None:
            self.message_type = message_type
        if message_template_uuid is not None:
            self.message_template_uuid = message_template_uuid
        if device_staging_enabled is not None:
            self.device_staging_enabled = device_staging_enabled
        if device_staging_type is not None:
            self.device_staging_type = device_staging_type
        if enrollment_role_uuid is not None:
            self.enrollment_role_uuid = enrollment_role_uuid
        if enrollment_organization_group_uuid is not None:
            self.enrollment_organization_group_uuid = enrollment_organization_group_uuid
        if aad_mapping_attribute is not None:
            self.aad_mapping_attribute = aad_mapping_attribute
        if custom_attribute1 is not None:
            self.custom_attribute1 = custom_attribute1
        if custom_attribute2 is not None:
            self.custom_attribute2 = custom_attribute2
        if custom_attribute3 is not None:
            self.custom_attribute3 = custom_attribute3
        if custom_attribute4 is not None:
            self.custom_attribute4 = custom_attribute4
        if custom_attribute5 is not None:
            self.custom_attribute5 = custom_attribute5
        if android_shared_device_mode is not None:
            self.android_shared_device_mode = android_shared_device_mode
        if android_shared_device_admin_mode_passcode is not None:
            self.android_shared_device_admin_mode_passcode = android_shared_device_admin_mode_passcode
        if android_shared_device_system_apps_enabled is not None:
            self.android_shared_device_system_apps_enabled = android_shared_device_system_apps_enabled

    @property
    def password(self):
        """Gets the password of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user password.  # noqa: E501

        :return: The password of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user password.  # noqa: E501

        :param password: The password of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def first_name(self):
        """Gets the first_name of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user first name.  # noqa: E501

        :return: The first_name of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user first name.  # noqa: E501

        :param first_name: The first_name of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user last name.  # noqa: E501

        :return: The last_name of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user last name.  # noqa: E501

        :param last_name: The last_name of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def display_name(self):
        """Gets the display_name of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user display name.  # noqa: E501

        :return: The display_name of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user display name.  # noqa: E501

        :param display_name: The display_name of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def user_principal_name(self):
        """Gets the user_principal_name of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user userprincipalname.  # noqa: E501

        :return: The user_principal_name of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._user_principal_name

    @user_principal_name.setter
    def user_principal_name(self, user_principal_name):
        """Sets the user_principal_name of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user userprincipalname.  # noqa: E501

        :param user_principal_name: The user_principal_name of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._user_principal_name = user_principal_name

    @property
    def email_address(self):
        """Gets the email_address of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user email address.  # noqa: E501

        :return: The email_address of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user email address.  # noqa: E501

        :param email_address: The email_address of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def email_username(self):
        """Gets the email_username of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets email user account name.  # noqa: E501

        :return: The email_username of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._email_username

    @email_username.setter
    def email_username(self, email_username):
        """Sets the email_username of this UpdateEnrollmentUserV2Model.

        Gets or sets email user account name.  # noqa: E501

        :param email_username: The email_username of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._email_username = email_username

    @property
    def phone_number(self):
        """Gets the phone_number of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user phone number.  # noqa: E501

        :return: The phone_number of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user phone number.  # noqa: E501

        :param phone_number: The phone_number of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def mobile_number(self):
        """Gets the mobile_number of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user mobile number.  # noqa: E501

        :return: The mobile_number of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number):
        """Sets the mobile_number of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user mobile number.  # noqa: E501

        :param mobile_number: The mobile_number of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._mobile_number = mobile_number

    @property
    def department(self):
        """Gets the department of this UpdateEnrollmentUserV2Model.  # noqa: E501

        The department that the enrollment user belongs to.  # noqa: E501

        :return: The department of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this UpdateEnrollmentUserV2Model.

        The department that the enrollment user belongs to.  # noqa: E501

        :param department: The department of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def employee_identifier(self):
        """Gets the employee_identifier of this UpdateEnrollmentUserV2Model.  # noqa: E501

        The employee identifier of enrollment user.  # noqa: E501

        :return: The employee_identifier of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._employee_identifier

    @employee_identifier.setter
    def employee_identifier(self, employee_identifier):
        """Sets the employee_identifier of this UpdateEnrollmentUserV2Model.

        The employee identifier of enrollment user.  # noqa: E501

        :param employee_identifier: The employee_identifier of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._employee_identifier = employee_identifier

    @property
    def cost_center(self):
        """Gets the cost_center of this UpdateEnrollmentUserV2Model.  # noqa: E501

        The cost center associated to the enrollment user.  # noqa: E501

        :return: The cost_center of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this UpdateEnrollmentUserV2Model.

        The cost center associated to the enrollment user.  # noqa: E501

        :param cost_center: The cost_center of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._cost_center = cost_center

    @property
    def message_type(self):
        """Gets the message_type of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user message type, available options are None, Email and SMS.  # noqa: E501

        :return: The message_type of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user message type, available options are None, Email and SMS.  # noqa: E501

        :param message_type: The message_type of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def message_template_uuid(self):
        """Gets the message_template_uuid of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user message template uuid.  # noqa: E501

        :return: The message_template_uuid of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._message_template_uuid

    @message_template_uuid.setter
    def message_template_uuid(self, message_template_uuid):
        """Sets the message_template_uuid of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user message template uuid.  # noqa: E501

        :param message_template_uuid: The message_template_uuid of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._message_template_uuid = message_template_uuid

    @property
    def device_staging_enabled(self):
        """Gets the device_staging_enabled of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user device staging enabled.  # noqa: E501

        :return: The device_staging_enabled of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._device_staging_enabled

    @device_staging_enabled.setter
    def device_staging_enabled(self, device_staging_enabled):
        """Sets the device_staging_enabled of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user device staging enabled.  # noqa: E501

        :param device_staging_enabled: The device_staging_enabled of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: bool
        """

        self._device_staging_enabled = device_staging_enabled

    @property
    def device_staging_type(self):
        """Gets the device_staging_type of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user device staging type.  # noqa: E501

        :return: The device_staging_type of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._device_staging_type

    @device_staging_type.setter
    def device_staging_type(self, device_staging_type):
        """Sets the device_staging_type of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user device staging type.  # noqa: E501

        :param device_staging_type: The device_staging_type of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._device_staging_type = device_staging_type

    @property
    def enrollment_role_uuid(self):
        """Gets the enrollment_role_uuid of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user role uuid.  # noqa: E501

        :return: The enrollment_role_uuid of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_role_uuid

    @enrollment_role_uuid.setter
    def enrollment_role_uuid(self, enrollment_role_uuid):
        """Sets the enrollment_role_uuid of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user role uuid.  # noqa: E501

        :param enrollment_role_uuid: The enrollment_role_uuid of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._enrollment_role_uuid = enrollment_role_uuid

    @property
    def enrollment_organization_group_uuid(self):
        """Gets the enrollment_organization_group_uuid of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets enrollment user enrollment organization group uuid.  # noqa: E501

        :return: The enrollment_organization_group_uuid of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_organization_group_uuid

    @enrollment_organization_group_uuid.setter
    def enrollment_organization_group_uuid(self, enrollment_organization_group_uuid):
        """Sets the enrollment_organization_group_uuid of this UpdateEnrollmentUserV2Model.

        Gets or sets enrollment user enrollment organization group uuid.  # noqa: E501

        :param enrollment_organization_group_uuid: The enrollment_organization_group_uuid of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._enrollment_organization_group_uuid = enrollment_organization_group_uuid

    @property
    def aad_mapping_attribute(self):
        """Gets the aad_mapping_attribute of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets Azure active directory mapping attribute.  # noqa: E501

        :return: The aad_mapping_attribute of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._aad_mapping_attribute

    @aad_mapping_attribute.setter
    def aad_mapping_attribute(self, aad_mapping_attribute):
        """Sets the aad_mapping_attribute of this UpdateEnrollmentUserV2Model.

        Gets or sets Azure active directory mapping attribute.  # noqa: E501

        :param aad_mapping_attribute: The aad_mapping_attribute of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._aad_mapping_attribute = aad_mapping_attribute

    @property
    def custom_attribute1(self):
        """Gets the custom_attribute1 of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets the enrollment user custom attribute 1.  # noqa: E501

        :return: The custom_attribute1 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute1

    @custom_attribute1.setter
    def custom_attribute1(self, custom_attribute1):
        """Sets the custom_attribute1 of this UpdateEnrollmentUserV2Model.

        Gets or sets the enrollment user custom attribute 1.  # noqa: E501

        :param custom_attribute1: The custom_attribute1 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._custom_attribute1 = custom_attribute1

    @property
    def custom_attribute2(self):
        """Gets the custom_attribute2 of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets the enrollment user custom attribute 2.  # noqa: E501

        :return: The custom_attribute2 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute2

    @custom_attribute2.setter
    def custom_attribute2(self, custom_attribute2):
        """Sets the custom_attribute2 of this UpdateEnrollmentUserV2Model.

        Gets or sets the enrollment user custom attribute 2.  # noqa: E501

        :param custom_attribute2: The custom_attribute2 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._custom_attribute2 = custom_attribute2

    @property
    def custom_attribute3(self):
        """Gets the custom_attribute3 of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets the enrollment user custom attribute 3.  # noqa: E501

        :return: The custom_attribute3 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute3

    @custom_attribute3.setter
    def custom_attribute3(self, custom_attribute3):
        """Sets the custom_attribute3 of this UpdateEnrollmentUserV2Model.

        Gets or sets the enrollment user custom attribute 3.  # noqa: E501

        :param custom_attribute3: The custom_attribute3 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._custom_attribute3 = custom_attribute3

    @property
    def custom_attribute4(self):
        """Gets the custom_attribute4 of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets the enrollment user custom attribute 4.  # noqa: E501

        :return: The custom_attribute4 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute4

    @custom_attribute4.setter
    def custom_attribute4(self, custom_attribute4):
        """Sets the custom_attribute4 of this UpdateEnrollmentUserV2Model.

        Gets or sets the enrollment user custom attribute 4.  # noqa: E501

        :param custom_attribute4: The custom_attribute4 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._custom_attribute4 = custom_attribute4

    @property
    def custom_attribute5(self):
        """Gets the custom_attribute5 of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Gets or sets the enrollment user custom attribute 5.  # noqa: E501

        :return: The custom_attribute5 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute5

    @custom_attribute5.setter
    def custom_attribute5(self, custom_attribute5):
        """Sets the custom_attribute5 of this UpdateEnrollmentUserV2Model.

        Gets or sets the enrollment user custom attribute 5.  # noqa: E501

        :param custom_attribute5: The custom_attribute5 of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._custom_attribute5 = custom_attribute5

    @property
    def android_shared_device_mode(self):
        """Gets the android_shared_device_mode of this UpdateEnrollmentUserV2Model.  # noqa: E501

        A value indicating the mode used to manage android shared devices. Applicable only for android platform with multi staging enabled. Defaults to Launcher.  # noqa: E501

        :return: The android_shared_device_mode of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._android_shared_device_mode

    @android_shared_device_mode.setter
    def android_shared_device_mode(self, android_shared_device_mode):
        """Sets the android_shared_device_mode of this UpdateEnrollmentUserV2Model.

        A value indicating the mode used to manage android shared devices. Applicable only for android platform with multi staging enabled. Defaults to Launcher.  # noqa: E501

        :param android_shared_device_mode: The android_shared_device_mode of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._android_shared_device_mode = android_shared_device_mode

    @property
    def android_shared_device_admin_mode_passcode(self):
        """Gets the android_shared_device_admin_mode_passcode of this UpdateEnrollmentUserV2Model.  # noqa: E501

        The Android Shared device admin mode passcode for native check out.  # noqa: E501

        :return: The android_shared_device_admin_mode_passcode of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: str
        """
        return self._android_shared_device_admin_mode_passcode

    @android_shared_device_admin_mode_passcode.setter
    def android_shared_device_admin_mode_passcode(self, android_shared_device_admin_mode_passcode):
        """Sets the android_shared_device_admin_mode_passcode of this UpdateEnrollmentUserV2Model.

        The Android Shared device admin mode passcode for native check out.  # noqa: E501

        :param android_shared_device_admin_mode_passcode: The android_shared_device_admin_mode_passcode of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: str
        """

        self._android_shared_device_admin_mode_passcode = android_shared_device_admin_mode_passcode

    @property
    def android_shared_device_system_apps_enabled(self):
        """Gets the android_shared_device_system_apps_enabled of this UpdateEnrollmentUserV2Model.  # noqa: E501

        Android Shared device system apps enabled for native check out.  # noqa: E501

        :return: The android_shared_device_system_apps_enabled of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._android_shared_device_system_apps_enabled

    @android_shared_device_system_apps_enabled.setter
    def android_shared_device_system_apps_enabled(self, android_shared_device_system_apps_enabled):
        """Sets the android_shared_device_system_apps_enabled of this UpdateEnrollmentUserV2Model.

        Android Shared device system apps enabled for native check out.  # noqa: E501

        :param android_shared_device_system_apps_enabled: The android_shared_device_system_apps_enabled of this UpdateEnrollmentUserV2Model.  # noqa: E501
        :type: bool
        """

        self._android_shared_device_system_apps_enabled = android_shared_device_system_apps_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateEnrollmentUserV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateEnrollmentUserV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateEnrollmentUserV2Model):
            return True

        return self.to_dict() != other.to_dict()
