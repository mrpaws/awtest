# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class DeviceRestartV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rebuild_kernel_cache': 'bool',
        'kext_paths': 'list[str]'
    }

    attribute_map = {
        'rebuild_kernel_cache': 'rebuild_kernel_cache',
        'kext_paths': 'kext_paths'
    }

    def __init__(self, rebuild_kernel_cache=None, kext_paths=None, _configuration=None):  # noqa: E501
        """DeviceRestartV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._rebuild_kernel_cache = None
        self._kext_paths = None
        self.discriminator = None

        if rebuild_kernel_cache is not None:
            self.rebuild_kernel_cache = rebuild_kernel_cache
        if kext_paths is not None:
            self.kext_paths = kext_paths

    @property
    def rebuild_kernel_cache(self):
        """Gets the rebuild_kernel_cache of this DeviceRestartV2Model.  # noqa: E501

        If true, the kernel cache is rebuilt during a device restart. If BootstrapTokenAllowedForAuthentication is true in the SecurityInfoResponse. SecurityInfo response, the device requests the Bootstrap Token from the MDM prior to executing this command. This value is available in macOS 11 and later.  # noqa: E501

        :return: The rebuild_kernel_cache of this DeviceRestartV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._rebuild_kernel_cache

    @rebuild_kernel_cache.setter
    def rebuild_kernel_cache(self, rebuild_kernel_cache):
        """Sets the rebuild_kernel_cache of this DeviceRestartV2Model.

        If true, the kernel cache is rebuilt during a device restart. If BootstrapTokenAllowedForAuthentication is true in the SecurityInfoResponse. SecurityInfo response, the device requests the Bootstrap Token from the MDM prior to executing this command. This value is available in macOS 11 and later.  # noqa: E501

        :param rebuild_kernel_cache: The rebuild_kernel_cache of this DeviceRestartV2Model.  # noqa: E501
        :type: bool
        """

        self._rebuild_kernel_cache = rebuild_kernel_cache

    @property
    def kext_paths(self):
        """Gets the kext_paths of this DeviceRestartV2Model.  # noqa: E501

        If RebuildKernelCache is true, this value specifies the paths to kexts to add to the auxiliary kernel cache since the last kernel cache rebuild. If not present, the system only adds previously-discovered kexts to the kernel cache. This value is available in macOS 11 and later.  # noqa: E501

        :return: The kext_paths of this DeviceRestartV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._kext_paths

    @kext_paths.setter
    def kext_paths(self, kext_paths):
        """Sets the kext_paths of this DeviceRestartV2Model.

        If RebuildKernelCache is true, this value specifies the paths to kexts to add to the auxiliary kernel cache since the last kernel cache rebuild. If not present, the system only adds previously-discovered kexts to the kernel cache. This value is available in macOS 11 and later.  # noqa: E501

        :param kext_paths: The kext_paths of this DeviceRestartV2Model.  # noqa: E501
        :type: list[str]
        """

        self._kext_paths = kext_paths

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceRestartV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceRestartV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceRestartV2Model):
            return True

        return self.to_dict() != other.to_dict()
