# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class ProductComponentsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def product_components_v1_condition_search(self, **kwargs):  # noqa: E501
        """New - Returns available conditions for the Organization Group  # noqa: E501

        Retrieves conditions available for the specified Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_condition_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier
        :param int page: Specific page number to get. 0 based index
        :param int pagesize: Maximum records per page. Default 500
        :return: list[ProductCondition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_condition_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_condition_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_condition_search_with_http_info(self, **kwargs):  # noqa: E501
        """New - Returns available conditions for the Organization Group  # noqa: E501

        Retrieves conditions available for the specified Organization Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_condition_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier
        :param int page: Specific page number to get. 0 based index
        :param int pagesize: Maximum records per page. Default 500
        :return: list[ProductCondition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_condition_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/conditionsearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProductCondition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_devices_processed_pe_async(self, **kwargs):  # noqa: E501
        """Report back device counts pertaining to the policy engine.  # noqa: E501

        Report back device counts pertaining to the policy engine when Organization group ID, Start and End time are passed.  The parameters starttime and endtime accepts the below DateTime formats :  <br>yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff, yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,</br>  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_devices_processed_pe_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group ID.
        :param datetime starttime: DateTime, Filters the result where modified date is greater than or equal to starttime value.
        :param datetime endtime: DateTime, Filters the result where  modified date is lesser than or equal to endtime value.
        :return: DevicesProcessedPE
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_devices_processed_pe_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_devices_processed_pe_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_devices_processed_pe_async_with_http_info(self, **kwargs):  # noqa: E501
        """Report back device counts pertaining to the policy engine.  # noqa: E501

        Report back device counts pertaining to the policy engine when Organization group ID, Start and End time are passed.  The parameters starttime and endtime accepts the below DateTime formats :  <br>yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff, yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,</br>  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_devices_processed_pe_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group ID.
        :param datetime starttime: DateTime, Filters the result where modified date is greater than or equal to starttime value.
        :param datetime endtime: DateTime, Filters the result where  modified date is lesser than or equal to endtime value.
        :return: DevicesProcessedPE
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'starttime', 'endtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_devices_processed_pe_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/DevicesProcessedPE', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DevicesProcessedPE',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_file_condition_search(self, **kwargs):  # noqa: E501
        """New - Search for file conditions with the specified parameters.  # noqa: E501

        Search for file conditions with the specified parameters such as organization group id, start time and end time value.  The parameters starttime and endtime accepts the below DateTime formats :  yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,   yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff,   MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_file_condition_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier
        :param str starttime: DateTime, Filters the result where FileCondition modified date is greater than or equal to starttime value
        :param str endtime: DateTime, Filters the result where FileCondition modified date is lesser than or equal to endtime value
        :return: list[FileCondtion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_file_condition_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_file_condition_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_file_condition_search_with_http_info(self, **kwargs):  # noqa: E501
        """New - Search for file conditions with the specified parameters.  # noqa: E501

        Search for file conditions with the specified parameters such as organization group id, start time and end time value.  The parameters starttime and endtime accepts the below DateTime formats :  yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,   yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff,   MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_file_condition_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier
        :param str starttime: DateTime, Filters the result where FileCondition modified date is greater than or equal to starttime value
        :param str endtime: DateTime, Filters the result where FileCondition modified date is lesser than or equal to endtime value
        :return: list[FileCondtion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'starttime', 'endtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_file_condition_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/fileconditionsearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FileCondtion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_get_events_actions_list(self, **kwargs):  # noqa: E501
        """Retrieves paginated lists of events actions for the specified organization group and page size.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_get_events_actions_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier.
        :param int page: Specific page number to get in the resulting list.
        :param int pagesize: Maximum records per page. The default value is 500.
        :return: EventActionsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_get_events_actions_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_get_events_actions_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_get_events_actions_list_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves paginated lists of events actions for the specified organization group and page size.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_get_events_actions_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier.
        :param int page: Specific page number to get in the resulting list.
        :param int pagesize: Maximum records per page. The default value is 500.
        :return: EventActionsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_get_events_actions_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/eventactionslist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventActionsListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_get_file_actions_by_product_id(self, id, **kwargs):  # noqa: E501
        """Get specified Product file actions by Product Id.  # noqa: E501

        Retrieves specified product file actions when Product ID is specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_get_file_actions_by_product_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product. (Required). (required)
        :return: ProductFileActions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_get_file_actions_by_product_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_get_file_actions_by_product_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_components_v1_get_file_actions_by_product_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get specified Product file actions by Product Id.  # noqa: E501

        Retrieves specified product file actions when Product ID is specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_get_file_actions_by_product_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product. (Required). (required)
        :return: ProductFileActions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_get_file_actions_by_product_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `product_components_v1_get_file_actions_by_product_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/fileactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductFileActions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_get_profile_by_product_id_async(self, id, **kwargs):  # noqa: E501
        """Returns the list of Profiles which are assigned to the passed Product ID.  # noqa: E501

        Returns the list of Profiles when Product ID is passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_get_profile_by_product_id_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product. (Required). (required)
        :return: DevicePolicyProfiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_get_profile_by_product_id_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_get_profile_by_product_id_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_components_v1_get_profile_by_product_id_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Returns the list of Profiles which are assigned to the passed Product ID.  # noqa: E501

        Returns the list of Profiles when Product ID is passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_get_profile_by_product_id_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product. (Required). (required)
        :return: DevicePolicyProfiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_get_profile_by_product_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `product_components_v1_get_profile_by_product_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DevicePolicyProfiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_get_time_condition_by_product_id(self, id, **kwargs):  # noqa: E501
        """Get specified Product time conditions by Product Id.  # noqa: E501

        Retrieves specified Product time conditions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_get_time_condition_by_product_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product. (Required). (required)
        :return: ProductTimeCondition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_get_time_condition_by_product_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_get_time_condition_by_product_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_components_v1_get_time_condition_by_product_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get specified Product time conditions by Product Id.  # noqa: E501

        Retrieves specified Product time conditions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_get_time_condition_by_product_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Identifier of the Product. (Required). (required)
        :return: ProductTimeCondition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_get_time_condition_by_product_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `product_components_v1_get_time_condition_by_product_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/timesconditions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProductTimeCondition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_maintain_condition(self, **kwargs):  # noqa: E501
        """Creates  or updates a condition.  # noqa: E501

        Creates or updates a condition with specified parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_maintain_condition(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainConditionV1Model maintain_condition_v1_model: Object representing ConditionModel.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_maintain_condition_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_maintain_condition_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_maintain_condition_with_http_info(self, **kwargs):  # noqa: E501
        """Creates  or updates a condition.  # noqa: E501

        Creates or updates a condition with specified parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_maintain_condition_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainConditionV1Model maintain_condition_v1_model: Object representing ConditionModel.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maintain_condition_v1_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_maintain_condition" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maintain_condition_v1_model' in params:
            body_params = params['maintain_condition_v1_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/maintainCondition', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_maintain_event_action(self, **kwargs):  # noqa: E501
        """Create or update an Event/Action.  # noqa: E501

        This method creates new event action and updates existing event actions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_maintain_event_action(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainEventActionInputEntity maintain_event_action_input: Input representing event/action and location group.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_maintain_event_action_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_maintain_event_action_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_maintain_event_action_with_http_info(self, **kwargs):  # noqa: E501
        """Create or update an Event/Action.  # noqa: E501

        This method creates new event action and updates existing event actions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_maintain_event_action_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainEventActionInputEntity maintain_event_action_input: Input representing event/action and location group.
        :return: MaintainResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maintain_event_action_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_maintain_event_action" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maintain_event_action_input' in params:
            body_params = params['maintain_event_action_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/maintainEventAction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintainResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_maintain_file_action(self, **kwargs):  # noqa: E501
        """Creates or updates a file action.  # noqa: E501

        Creates or updates a file action when required data is passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_maintain_file_action(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainFileActionModel maintain_file_action_input: Input representing file action and Organization group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_maintain_file_action_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_maintain_file_action_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_maintain_file_action_with_http_info(self, **kwargs):  # noqa: E501
        """Creates or updates a file action.  # noqa: E501

        Creates or updates a file action when required data is passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_maintain_file_action_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintainFileActionModel maintain_file_action_input: Input representing file action and Organization group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maintain_file_action_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_maintain_file_action" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maintain_file_action_input' in params:
            body_params = params['maintain_file_action_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/maintainFileAction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_provisioning_queue_counts_async(self, id, **kwargs):  # noqa: E501
        """Report back queue counts pertaining to the policy engine.  # noqa: E501

        Report back queue counts pertaining to the policy engine when Organization group ID is passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_provisioning_queue_counts_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Organization group ID. (Required). (required)
        :return: ProvisioningQueueCounts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_provisioning_queue_counts_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_provisioning_queue_counts_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_components_v1_provisioning_queue_counts_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Report back queue counts pertaining to the policy engine.  # noqa: E501

        Report back queue counts pertaining to the policy engine when Organization group ID is passed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_provisioning_queue_counts_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Organization group ID. (Required). (required)
        :return: ProvisioningQueueCounts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_provisioning_queue_counts_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `product_components_v1_provisioning_queue_counts_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/provisioningqueuecounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProvisioningQueueCounts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_retrieve_product_download_and_install_statistics(self, **kwargs):  # noqa: E501
        """Retrieves the product installation and download statistics.  # noqa: E501

        Retrieves Product Download And Install Statistics based on the parameters passed.  The parameters starttime and endtime accepts the below DateTime formats :  <br>yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff, yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,</br>  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_retrieve_product_download_and_install_statistics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier.
        :param datetime starttime: DateTime, Filters the result where Product's Last modified date on device is greater than or equal to starttime value. 
        :param datetime endtime: DateTime, Filters the result where Product's Last modified date on device is lesser than or equal to endtime value.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DownloadAndInstallStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_retrieve_product_download_and_install_statistics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_retrieve_product_download_and_install_statistics_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_retrieve_product_download_and_install_statistics_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the product installation and download statistics.  # noqa: E501

        Retrieves Product Download And Install Statistics based on the parameters passed.  The parameters starttime and endtime accepts the below DateTime formats :  <br>yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff, yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,</br>  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_retrieve_product_download_and_install_statistics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier.
        :param datetime starttime: DateTime, Filters the result where Product's Last modified date on device is greater than or equal to starttime value. 
        :param datetime endtime: DateTime, Filters the result where Product's Last modified date on device is lesser than or equal to endtime value.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DownloadAndInstallStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'starttime', 'endtime', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_retrieve_product_download_and_install_statistics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/productdownloadandinstallstatistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadAndInstallStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_search_files_actions(self, **kwargs):  # noqa: E501
        """Searches for the Files/Actions with the search parameters passed.  # noqa: E501

        Retrieves Files Actions Search Result when search parameters are passed.  The parameters lastmodifiedon and lastmodifiedtill accepts the below DateTime formats :  <br>yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff, yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,</br>  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_search_files_actions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group ID.
        :param str platform: Name of the Platform in which the Files/Actions is created. (Example:Android).
        :param datetime lastmodifiedon: DateTime, Filters the result where Files/Actions modified date is greater than or equal to lastmodifiedon value.
        :param datetime lastmodifiedtill: DateTime, Filters the result where Files/Actions modified date is lesser than or equal to lastmodifiedtill value.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: FilesActionsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_search_files_actions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_search_files_actions_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_search_files_actions_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for the Files/Actions with the search parameters passed.  # noqa: E501

        Retrieves Files Actions Search Result when search parameters are passed.  The parameters lastmodifiedon and lastmodifiedtill accepts the below DateTime formats :  <br>yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff, yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,</br>  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_search_files_actions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group ID.
        :param str platform: Name of the Platform in which the Files/Actions is created. (Example:Android).
        :param datetime lastmodifiedon: DateTime, Filters the result where Files/Actions modified date is greater than or equal to lastmodifiedon value.
        :param datetime lastmodifiedtill: DateTime, Filters the result where Files/Actions modified date is lesser than or equal to lastmodifiedtill value.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: FilesActionsSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'platform', 'lastmodifiedon', 'lastmodifiedtill', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_search_files_actions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'lastmodifiedon' in params:
            query_params.append(('lastmodifiedon', params['lastmodifiedon']))  # noqa: E501
        if 'lastmodifiedtill' in params:
            query_params.append(('lastmodifiedtill', params['lastmodifiedtill']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/filesactionssearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilesActionsSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_components_v1_time_condition_search(self, **kwargs):  # noqa: E501
        """New - Search for Time Conditions with the specified parameters.  # noqa: E501

        Search for Time Conditions with the specified parameters such as organization group ID, start and end time values.  The parameters starttime and endtime accepts the below DateTime formats :  yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,   yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff,   MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_time_condition_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier
        :param str starttime: DateTime, Filters the result where TimeCondition modified date is greater than or equal to starttime value
        :param str endtime: DateTime, Filters the result where TimeCondition modified date is lesser than or equal to endtime value
        :return: list[TimeCondition]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_components_v1_time_condition_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_components_v1_time_condition_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_components_v1_time_condition_search_with_http_info(self, **kwargs):  # noqa: E501
        """New - Search for Time Conditions with the specified parameters.  # noqa: E501

        Search for Time Conditions with the specified parameters such as organization group ID, start and end time values.  The parameters starttime and endtime accepts the below DateTime formats :  yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,   yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff,   MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_components_v1_time_condition_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group identifier
        :param str starttime: DateTime, Filters the result where TimeCondition modified date is greater than or equal to starttime value
        :param str endtime: DateTime, Filters the result where TimeCondition modified date is lesser than or equal to endtime value
        :return: list[TimeCondition]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'starttime', 'endtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_components_v1_time_condition_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/products/timeconditionsearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TimeCondition]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
