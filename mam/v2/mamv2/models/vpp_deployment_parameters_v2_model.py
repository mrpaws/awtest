# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv2.configuration import Configuration


class VppDeploymentParametersV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_type': 'int',
        'remove_on_unenroll': 'bool',
        'prevent_application_backup': 'bool',
        'allow_management': 'bool',
        'use_vpn': 'bool',
        'vpn_profile_uuid': 'str',
        'send_application_configuration': 'bool',
        'application_configurations': 'list[ApplicationConfigurationV2Model]',
        'send_application_attributes': 'bool',
        'prevent_removal': 'bool',
        'application_attributes': 'list[ApplicationConfigurationV2Model]'
    }

    attribute_map = {
        'assignment_type': 'assignment_type',
        'remove_on_unenroll': 'remove_on_unenroll',
        'prevent_application_backup': 'prevent_application_backup',
        'allow_management': 'allow_management',
        'use_vpn': 'use_vpn',
        'vpn_profile_uuid': 'vpn_profile_uuid',
        'send_application_configuration': 'send_application_configuration',
        'application_configurations': 'application_configurations',
        'send_application_attributes': 'send_application_attributes',
        'prevent_removal': 'prevent_removal',
        'application_attributes': 'application_attributes'
    }

    def __init__(self, assignment_type=None, remove_on_unenroll=None, prevent_application_backup=None, allow_management=None, use_vpn=None, vpn_profile_uuid=None, send_application_configuration=None, application_configurations=None, send_application_attributes=None, prevent_removal=None, application_attributes=None, _configuration=None):  # noqa: E501
        """VppDeploymentParametersV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assignment_type = None
        self._remove_on_unenroll = None
        self._prevent_application_backup = None
        self._allow_management = None
        self._use_vpn = None
        self._vpn_profile_uuid = None
        self._send_application_configuration = None
        self._application_configurations = None
        self._send_application_attributes = None
        self._prevent_removal = None
        self._application_attributes = None
        self.discriminator = None

        if assignment_type is not None:
            self.assignment_type = assignment_type
        if remove_on_unenroll is not None:
            self.remove_on_unenroll = remove_on_unenroll
        if prevent_application_backup is not None:
            self.prevent_application_backup = prevent_application_backup
        if allow_management is not None:
            self.allow_management = allow_management
        if use_vpn is not None:
            self.use_vpn = use_vpn
        if vpn_profile_uuid is not None:
            self.vpn_profile_uuid = vpn_profile_uuid
        if send_application_configuration is not None:
            self.send_application_configuration = send_application_configuration
        if application_configurations is not None:
            self.application_configurations = application_configurations
        if send_application_attributes is not None:
            self.send_application_attributes = send_application_attributes
        if prevent_removal is not None:
            self.prevent_removal = prevent_removal
        if application_attributes is not None:
            self.application_attributes = application_attributes

    @property
    def assignment_type(self):
        """Gets the assignment_type of this VppDeploymentParametersV2Model.  # noqa: E501

        Type to deploy the application.  # noqa: E501

        :return: The assignment_type of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: int
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this VppDeploymentParametersV2Model.

        Type to deploy the application.  # noqa: E501

        :param assignment_type: The assignment_type of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                assignment_type not in allowed_values):
            raise ValueError(
                "Invalid value for `assignment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignment_type, allowed_values)
            )

        self._assignment_type = assignment_type

    @property
    def remove_on_unenroll(self):
        """Gets the remove_on_unenroll of this VppDeploymentParametersV2Model.  # noqa: E501

        Indicates whether to remove the application on device's unenrollment.  # noqa: E501

        :return: The remove_on_unenroll of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._remove_on_unenroll

    @remove_on_unenroll.setter
    def remove_on_unenroll(self, remove_on_unenroll):
        """Sets the remove_on_unenroll of this VppDeploymentParametersV2Model.

        Indicates whether to remove the application on device's unenrollment.  # noqa: E501

        :param remove_on_unenroll: The remove_on_unenroll of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: bool
        """

        self._remove_on_unenroll = remove_on_unenroll

    @property
    def prevent_application_backup(self):
        """Gets the prevent_application_backup of this VppDeploymentParametersV2Model.  # noqa: E501

        Indicates whether to prevent the application's backup.  # noqa: E501

        :return: The prevent_application_backup of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_application_backup

    @prevent_application_backup.setter
    def prevent_application_backup(self, prevent_application_backup):
        """Sets the prevent_application_backup of this VppDeploymentParametersV2Model.

        Indicates whether to prevent the application's backup.  # noqa: E501

        :param prevent_application_backup: The prevent_application_backup of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: bool
        """

        self._prevent_application_backup = prevent_application_backup

    @property
    def allow_management(self):
        """Gets the allow_management of this VppDeploymentParametersV2Model.  # noqa: E501

        Indicates whether to assume management of the user installed application.  # noqa: E501

        :return: The allow_management of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_management

    @allow_management.setter
    def allow_management(self, allow_management):
        """Sets the allow_management of this VppDeploymentParametersV2Model.

        Indicates whether to assume management of the user installed application.  # noqa: E501

        :param allow_management: The allow_management of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_management = allow_management

    @property
    def use_vpn(self):
        """Gets the use_vpn of this VppDeploymentParametersV2Model.  # noqa: E501

        Indicates whether to use the VPN profile.  # noqa: E501

        :return: The use_vpn of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._use_vpn

    @use_vpn.setter
    def use_vpn(self, use_vpn):
        """Sets the use_vpn of this VppDeploymentParametersV2Model.

        Indicates whether to use the VPN profile.  # noqa: E501

        :param use_vpn: The use_vpn of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: bool
        """

        self._use_vpn = use_vpn

    @property
    def vpn_profile_uuid(self):
        """Gets the vpn_profile_uuid of this VppDeploymentParametersV2Model.  # noqa: E501

        VPN profile's UUID.  # noqa: E501

        :return: The vpn_profile_uuid of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: str
        """
        return self._vpn_profile_uuid

    @vpn_profile_uuid.setter
    def vpn_profile_uuid(self, vpn_profile_uuid):
        """Sets the vpn_profile_uuid of this VppDeploymentParametersV2Model.

        VPN profile's UUID.  # noqa: E501

        :param vpn_profile_uuid: The vpn_profile_uuid of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: str
        """

        self._vpn_profile_uuid = vpn_profile_uuid

    @property
    def send_application_configuration(self):
        """Gets the send_application_configuration of this VppDeploymentParametersV2Model.  # noqa: E501

        Indicates whether to send the application configuration.  # noqa: E501

        :return: The send_application_configuration of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._send_application_configuration

    @send_application_configuration.setter
    def send_application_configuration(self, send_application_configuration):
        """Sets the send_application_configuration of this VppDeploymentParametersV2Model.

        Indicates whether to send the application configuration.  # noqa: E501

        :param send_application_configuration: The send_application_configuration of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: bool
        """

        self._send_application_configuration = send_application_configuration

    @property
    def application_configurations(self):
        """Gets the application_configurations of this VppDeploymentParametersV2Model.  # noqa: E501

        Application's configurations.  # noqa: E501

        :return: The application_configurations of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: list[ApplicationConfigurationV2Model]
        """
        return self._application_configurations

    @application_configurations.setter
    def application_configurations(self, application_configurations):
        """Sets the application_configurations of this VppDeploymentParametersV2Model.

        Application's configurations.  # noqa: E501

        :param application_configurations: The application_configurations of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: list[ApplicationConfigurationV2Model]
        """

        self._application_configurations = application_configurations

    @property
    def send_application_attributes(self):
        """Gets the send_application_attributes of this VppDeploymentParametersV2Model.  # noqa: E501

        Indicates whether to send the application attributes.  # noqa: E501

        :return: The send_application_attributes of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._send_application_attributes

    @send_application_attributes.setter
    def send_application_attributes(self, send_application_attributes):
        """Sets the send_application_attributes of this VppDeploymentParametersV2Model.

        Indicates whether to send the application attributes.  # noqa: E501

        :param send_application_attributes: The send_application_attributes of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: bool
        """

        self._send_application_attributes = send_application_attributes

    @property
    def prevent_removal(self):
        """Gets the prevent_removal of this VppDeploymentParametersV2Model.  # noqa: E501

        Indicates whether to send the prevent removal application attributes.  # noqa: E501

        :return: The prevent_removal of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_removal

    @prevent_removal.setter
    def prevent_removal(self, prevent_removal):
        """Sets the prevent_removal of this VppDeploymentParametersV2Model.

        Indicates whether to send the prevent removal application attributes.  # noqa: E501

        :param prevent_removal: The prevent_removal of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: bool
        """

        self._prevent_removal = prevent_removal

    @property
    def application_attributes(self):
        """Gets the application_attributes of this VppDeploymentParametersV2Model.  # noqa: E501

        Application's attributes.  # noqa: E501

        :return: The application_attributes of this VppDeploymentParametersV2Model.  # noqa: E501
        :rtype: list[ApplicationConfigurationV2Model]
        """
        return self._application_attributes

    @application_attributes.setter
    def application_attributes(self, application_attributes):
        """Sets the application_attributes of this VppDeploymentParametersV2Model.

        Application's attributes.  # noqa: E501

        :param application_attributes: The application_attributes of this VppDeploymentParametersV2Model.  # noqa: E501
        :type: list[ApplicationConfigurationV2Model]
        """

        self._application_attributes = application_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VppDeploymentParametersV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VppDeploymentParametersV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VppDeploymentParametersV2Model):
            return True

        return self.to_dict() != other.to_dict()
