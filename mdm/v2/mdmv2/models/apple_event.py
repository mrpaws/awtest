# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permission': 'str',
        'identifier': 'str',
        'identifier_type': 'str',
        'code_requirement': 'str'
    }

    attribute_map = {
        'permission': 'Permission',
        'identifier': 'Identifier',
        'identifier_type': 'IdentifierType',
        'code_requirement': 'CodeRequirement'
    }

    def __init__(self, permission=None, identifier=None, identifier_type=None, code_requirement=None, _configuration=None):  # noqa: E501
        """AppleEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._permission = None
        self._identifier = None
        self._identifier_type = None
        self._code_requirement = None
        self.discriminator = None

        if permission is not None:
            self.permission = permission
        if identifier is not None:
            self.identifier = identifier
        if identifier_type is not None:
            self.identifier_type = identifier_type
        if code_requirement is not None:
            self.code_requirement = code_requirement

    @property
    def permission(self):
        """Gets the permission of this AppleEvent.  # noqa: E501

        Gets or sets allows the application to send a restricted AppleEvent to another process.  # noqa: E501

        :return: The permission of this AppleEvent.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AppleEvent.

        Gets or sets allows the application to send a restricted AppleEvent to another process.  # noqa: E501

        :param permission: The permission of this AppleEvent.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def identifier(self):
        """Gets the identifier of this AppleEvent.  # noqa: E501

        Gets or sets the bundle ID or installation path of the binary.  # noqa: E501

        :return: The identifier of this AppleEvent.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AppleEvent.

        Gets or sets the bundle ID or installation path of the binary.  # noqa: E501

        :param identifier: The identifier of this AppleEvent.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def identifier_type(self):
        """Gets the identifier_type of this AppleEvent.  # noqa: E501

        Gets or sets the type of Identifier value. Must be either bundleID or path.  # noqa: E501

        :return: The identifier_type of this AppleEvent.  # noqa: E501
        :rtype: str
        """
        return self._identifier_type

    @identifier_type.setter
    def identifier_type(self, identifier_type):
        """Sets the identifier_type of this AppleEvent.

        Gets or sets the type of Identifier value. Must be either bundleID or path.  # noqa: E501

        :param identifier_type: The identifier_type of this AppleEvent.  # noqa: E501
        :type: str
        """

        self._identifier_type = identifier_type

    @property
    def code_requirement(self):
        """Gets the code_requirement of this AppleEvent.  # noqa: E501

        Gets or sets obtained via the command \"codesign --display -r - path\".  # noqa: E501

        :return: The code_requirement of this AppleEvent.  # noqa: E501
        :rtype: str
        """
        return self._code_requirement

    @code_requirement.setter
    def code_requirement(self, code_requirement):
        """Sets the code_requirement of this AppleEvent.

        Gets or sets obtained via the command \"codesign --display -r - path\".  # noqa: E501

        :param code_requirement: The code_requirement of this AppleEvent.  # noqa: E501
        :type: str
        """

        self._code_requirement = code_requirement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleEvent):
            return True

        return self.to_dict() != other.to_dict()
