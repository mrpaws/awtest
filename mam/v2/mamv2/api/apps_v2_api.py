# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv2.api_client import ApiClient


class AppsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apps_v2_get_app_config_template_async(self, application_uuid, **kwargs):  # noqa: E501
        """New - Get app config template for an application.  # noqa: E501

        Get list of app configs supported for an application based on the application uuid provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v2_get_app_config_template_async(application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.              Accepted formats **uuid**              example: 3d958f38-246e-4854-a306-189d941ab073(Required). (required)
        :param object organization_group_uuid: Current Organization Group identifier for which admin is trying to get the template and from where assigment of the given app will happen. Accepted formats **uuid**              example: 3d958f38-246e-4854-a306-189d941ab073
        :return: list[AppConfigTemplateV2Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_v2_get_app_config_template_async_with_http_info(application_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_v2_get_app_config_template_async_with_http_info(application_uuid, **kwargs)  # noqa: E501
            return data

    def apps_v2_get_app_config_template_async_with_http_info(self, application_uuid, **kwargs):  # noqa: E501
        """New - Get app config template for an application.  # noqa: E501

        Get list of app configs supported for an application based on the application uuid provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v2_get_app_config_template_async_with_http_info(application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.              Accepted formats **uuid**              example: 3d958f38-246e-4854-a306-189d941ab073(Required). (required)
        :param object organization_group_uuid: Current Organization Group identifier for which admin is trying to get the template and from where assigment of the given app will happen. Accepted formats **uuid**              example: 3d958f38-246e-4854-a306-189d941ab073
        :return: list[AppConfigTemplateV2Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_uuid', 'organization_group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_v2_get_app_config_template_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in params or
                                                       params['application_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_uuid` when calling `apps_v2_get_app_config_template_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in params:
            path_params['applicationUuid'] = params['application_uuid']  # noqa: E501

        query_params = []
        if 'organization_group_uuid' in params:
            query_params.append(('organization_group_uuid', params['organization_group_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{applicationUuid}/app-config-template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AppConfigTemplateV2Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_v2_get_assignment_rule_async(self, application_uuid, **kwargs):  # noqa: E501
        """New - Get assignment rule for an application.  # noqa: E501

        Get assignment rule which contains deployment parameters for assignments and smart group exclusions for an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v2_get_assignment_rule_async(application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.              Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :return: AppAssignmentRuleV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_v2_get_assignment_rule_async_with_http_info(application_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_v2_get_assignment_rule_async_with_http_info(application_uuid, **kwargs)  # noqa: E501
            return data

    def apps_v2_get_assignment_rule_async_with_http_info(self, application_uuid, **kwargs):  # noqa: E501
        """New - Get assignment rule for an application.  # noqa: E501

        Get assignment rule which contains deployment parameters for assignments and smart group exclusions for an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v2_get_assignment_rule_async_with_http_info(application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.              Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :return: AppAssignmentRuleV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_v2_get_assignment_rule_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in params or
                                                       params['application_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_uuid` when calling `apps_v2_get_assignment_rule_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in params:
            path_params['applicationUuid'] = params['application_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{applicationUuid}/assignment-rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppAssignmentRuleV2Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_v2_update_assignment_rule_async(self, application_uuid, assignment_rule, **kwargs):  # noqa: E501
        """New - Updates assignment rule for an application and publishes the application to the devices associated with assignment rule.  # noqa: E501

        Updates assignments with assignment policies and exclusions for an application. Publishes the application to the devices associated with the assignment rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v2_update_assignment_rule_async(application_uuid, assignment_rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.              Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param AppAssignmentRuleV2Model assignment_rule: Assignment rule which contains list of assignments and exclusions for an application.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_v2_update_assignment_rule_async_with_http_info(application_uuid, assignment_rule, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_v2_update_assignment_rule_async_with_http_info(application_uuid, assignment_rule, **kwargs)  # noqa: E501
            return data

    def apps_v2_update_assignment_rule_async_with_http_info(self, application_uuid, assignment_rule, **kwargs):  # noqa: E501
        """New - Updates assignment rule for an application and publishes the application to the devices associated with assignment rule.  # noqa: E501

        Updates assignments with assignment policies and exclusions for an application. Publishes the application to the devices associated with the assignment rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v2_update_assignment_rule_async_with_http_info(application_uuid, assignment_rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.              Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param AppAssignmentRuleV2Model assignment_rule: Assignment rule which contains list of assignments and exclusions for an application.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_uuid', 'assignment_rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_v2_update_assignment_rule_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in params or
                                                       params['application_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_uuid` when calling `apps_v2_update_assignment_rule_async`")  # noqa: E501
        # verify the required parameter 'assignment_rule' is set
        if self.api_client.client_side_validation and ('assignment_rule' not in params or
                                                       params['assignment_rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_rule` when calling `apps_v2_update_assignment_rule_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in params:
            path_params['applicationUuid'] = params['application_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assignment_rule' in params:
            body_params = params['assignment_rule']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{applicationUuid}/assignment-rules', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
