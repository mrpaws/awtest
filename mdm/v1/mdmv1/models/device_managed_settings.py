# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceManagedSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bluetooth': 'bool',
        'voice_roaming_allowed': 'bool',
        'data_roaming_allowed': 'bool',
        'personal_hotspot_allowed': 'bool'
    }

    attribute_map = {
        'bluetooth': 'Bluetooth',
        'voice_roaming_allowed': 'VoiceRoamingAllowed',
        'data_roaming_allowed': 'DataRoamingAllowed',
        'personal_hotspot_allowed': 'PersonalHotspotAllowed'
    }

    def __init__(self, bluetooth=None, voice_roaming_allowed=None, data_roaming_allowed=None, personal_hotspot_allowed=None, _configuration=None):  # noqa: E501
        """DeviceManagedSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bluetooth = None
        self._voice_roaming_allowed = None
        self._data_roaming_allowed = None
        self._personal_hotspot_allowed = None
        self.discriminator = None

        if bluetooth is not None:
            self.bluetooth = bluetooth
        if voice_roaming_allowed is not None:
            self.voice_roaming_allowed = voice_roaming_allowed
        if data_roaming_allowed is not None:
            self.data_roaming_allowed = data_roaming_allowed
        if personal_hotspot_allowed is not None:
            self.personal_hotspot_allowed = personal_hotspot_allowed

    @property
    def bluetooth(self):
        """Gets the bluetooth of this DeviceManagedSettings.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether to turn on/off bluetooth.  # noqa: E501

        :return: The bluetooth of this DeviceManagedSettings.  # noqa: E501
        :rtype: bool
        """
        return self._bluetooth

    @bluetooth.setter
    def bluetooth(self, bluetooth):
        """Sets the bluetooth of this DeviceManagedSettings.

        Gets or sets a value indicating whether gets or sets a value which indicates whether to turn on/off bluetooth.  # noqa: E501

        :param bluetooth: The bluetooth of this DeviceManagedSettings.  # noqa: E501
        :type: bool
        """

        self._bluetooth = bluetooth

    @property
    def voice_roaming_allowed(self):
        """Gets the voice_roaming_allowed of this DeviceManagedSettings.  # noqa: E501

        Gets or sets a value indicating whether voice Roaming Allowed.  # noqa: E501

        :return: The voice_roaming_allowed of this DeviceManagedSettings.  # noqa: E501
        :rtype: bool
        """
        return self._voice_roaming_allowed

    @voice_roaming_allowed.setter
    def voice_roaming_allowed(self, voice_roaming_allowed):
        """Sets the voice_roaming_allowed of this DeviceManagedSettings.

        Gets or sets a value indicating whether voice Roaming Allowed.  # noqa: E501

        :param voice_roaming_allowed: The voice_roaming_allowed of this DeviceManagedSettings.  # noqa: E501
        :type: bool
        """

        self._voice_roaming_allowed = voice_roaming_allowed

    @property
    def data_roaming_allowed(self):
        """Gets the data_roaming_allowed of this DeviceManagedSettings.  # noqa: E501

        Gets or sets a value indicating whether data Roaming Allowed.  # noqa: E501

        :return: The data_roaming_allowed of this DeviceManagedSettings.  # noqa: E501
        :rtype: bool
        """
        return self._data_roaming_allowed

    @data_roaming_allowed.setter
    def data_roaming_allowed(self, data_roaming_allowed):
        """Sets the data_roaming_allowed of this DeviceManagedSettings.

        Gets or sets a value indicating whether data Roaming Allowed.  # noqa: E501

        :param data_roaming_allowed: The data_roaming_allowed of this DeviceManagedSettings.  # noqa: E501
        :type: bool
        """

        self._data_roaming_allowed = data_roaming_allowed

    @property
    def personal_hotspot_allowed(self):
        """Gets the personal_hotspot_allowed of this DeviceManagedSettings.  # noqa: E501

        Gets or sets a value indicating whether personal Hotspot Allowed.  # noqa: E501

        :return: The personal_hotspot_allowed of this DeviceManagedSettings.  # noqa: E501
        :rtype: bool
        """
        return self._personal_hotspot_allowed

    @personal_hotspot_allowed.setter
    def personal_hotspot_allowed(self, personal_hotspot_allowed):
        """Sets the personal_hotspot_allowed of this DeviceManagedSettings.

        Gets or sets a value indicating whether personal Hotspot Allowed.  # noqa: E501

        :param personal_hotspot_allowed: The personal_hotspot_allowed of this DeviceManagedSettings.  # noqa: E501
        :type: bool
        """

        self._personal_hotspot_allowed = personal_hotspot_allowed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceManagedSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceManagedSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceManagedSettings):
            return True

        return self.to_dict() != other.to_dict()
