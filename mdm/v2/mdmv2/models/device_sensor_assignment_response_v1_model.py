# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class DeviceSensorAssignmentResponseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'smart_group_count': 'int',
        'ranking': 'int',
        'name': 'str',
        'assigned_smart_groups': 'list[DeviceSensorAssignedSmartGroupV1Model]',
        'trigger_type': 'int',
        'event_triggers': 'list[int]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'smart_group_count': 'smart_group_count',
        'ranking': 'ranking',
        'name': 'name',
        'assigned_smart_groups': 'assigned_smart_groups',
        'trigger_type': 'trigger_type',
        'event_triggers': 'event_triggers'
    }

    def __init__(self, uuid=None, smart_group_count=None, ranking=None, name=None, assigned_smart_groups=None, trigger_type=None, event_triggers=None, _configuration=None):  # noqa: E501
        """DeviceSensorAssignmentResponseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uuid = None
        self._smart_group_count = None
        self._ranking = None
        self._name = None
        self._assigned_smart_groups = None
        self._trigger_type = None
        self._event_triggers = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if smart_group_count is not None:
            self.smart_group_count = smart_group_count
        if ranking is not None:
            self.ranking = ranking
        if name is not None:
            self.name = name
        if assigned_smart_groups is not None:
            self.assigned_smart_groups = assigned_smart_groups
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if event_triggers is not None:
            self.event_triggers = event_triggers

    @property
    def uuid(self):
        """Gets the uuid of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501

        Assignment UUID  # noqa: E501

        :return: The uuid of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceSensorAssignmentResponseV1Model.

        Assignment UUID  # noqa: E501

        :param uuid: The uuid of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def smart_group_count(self):
        """Gets the smart_group_count of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501

        The total count of smart groups associated with the assignment.  # noqa: E501

        :return: The smart_group_count of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._smart_group_count

    @smart_group_count.setter
    def smart_group_count(self, smart_group_count):
        """Sets the smart_group_count of this DeviceSensorAssignmentResponseV1Model.

        The total count of smart groups associated with the assignment.  # noqa: E501

        :param smart_group_count: The smart_group_count of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :type: int
        """

        self._smart_group_count = smart_group_count

    @property
    def ranking(self):
        """Gets the ranking of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501

        Ranking of the assignment. 1 specifies highest ranking.  # noqa: E501

        :return: The ranking of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this DeviceSensorAssignmentResponseV1Model.

        Ranking of the assignment. 1 specifies highest ranking.  # noqa: E501

        :param ranking: The ranking of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :type: int
        """

        self._ranking = ranking

    @property
    def name(self):
        """Gets the name of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501

        Name of the device sensor assignment.  # noqa: E501

        :return: The name of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceSensorAssignmentResponseV1Model.

        Name of the device sensor assignment.  # noqa: E501

        :param name: The name of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def assigned_smart_groups(self):
        """Gets the assigned_smart_groups of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501

        Assigned smart groups to the device sensor.  # noqa: E501

        :return: The assigned_smart_groups of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :rtype: list[DeviceSensorAssignedSmartGroupV1Model]
        """
        return self._assigned_smart_groups

    @assigned_smart_groups.setter
    def assigned_smart_groups(self, assigned_smart_groups):
        """Sets the assigned_smart_groups of this DeviceSensorAssignmentResponseV1Model.

        Assigned smart groups to the device sensor.  # noqa: E501

        :param assigned_smart_groups: The assigned_smart_groups of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :type: list[DeviceSensorAssignedSmartGroupV1Model]
        """

        self._assigned_smart_groups = assigned_smart_groups

    @property
    def trigger_type(self):
        """Gets the trigger_type of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501

        Trigger type for script execution. SCHEDULEANDEVENT trigger type is applicable only for macOS platform. Linux platform supports only SCHEDULE trigger type.  # noqa: E501

        :return: The trigger_type of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this DeviceSensorAssignmentResponseV1Model.

        Trigger type for script execution. SCHEDULEANDEVENT trigger type is applicable only for macOS platform. Linux platform supports only SCHEDULE trigger type.  # noqa: E501

        :param trigger_type: The trigger_type of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                trigger_type not in allowed_values):
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def event_triggers(self):
        """Gets the event_triggers of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501

        Event triggers defining the trigger for the data collection. The NETWORK_CHANGE trigger is applicable only for macOS platform.  # noqa: E501

        :return: The event_triggers of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :rtype: list[int]
        """
        return self._event_triggers

    @event_triggers.setter
    def event_triggers(self, event_triggers):
        """Sets the event_triggers of this DeviceSensorAssignmentResponseV1Model.

        Event triggers defining the trigger for the data collection. The NETWORK_CHANGE trigger is applicable only for macOS platform.  # noqa: E501

        :param event_triggers: The event_triggers of this DeviceSensorAssignmentResponseV1Model.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(event_triggers).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `event_triggers` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(event_triggers) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._event_triggers = event_triggers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceSensorAssignmentResponseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSensorAssignmentResponseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceSensorAssignmentResponseV1Model):
            return True

        return self.to_dict() != other.to_dict()
