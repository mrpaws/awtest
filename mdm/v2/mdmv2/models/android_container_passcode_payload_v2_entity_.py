# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidContainerPasscodePayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maximum_number_of_failed_attempts': 'int',
        'maximum_lengthof_alphabetic_sequences': 'int',
        'maximum_number_of_numbers_allowed': 'int',
        'passcode_history': 'int',
        'minimum_number_of_digits_or_symbols': 'int',
        'minimum_character_change_length': 'int',
        'maximum_passcode_age': 'int',
        'maximum_repeat_characters': 'int',
        'strings_forbidden_in_password': 'list[str]',
        'enable_password_visibility': 'bool',
        'passcode_content': 'int',
        'minimum_passcode_length': 'int',
        'device_lock_timeout_in_minutes': 'int',
        'fingerprint_authentication': 'bool',
        'multifactor_authentication': 'bool',
        'default_realm': 'str',
        'kdc_realm': 'str',
        'federation_service_url': 'str',
        'renewable_lifetime': 'str',
        'ticket_lifetime': 'str'
    }

    attribute_map = {
        'maximum_number_of_failed_attempts': 'MaximumNumberOfFailedAttempts',
        'maximum_lengthof_alphabetic_sequences': 'MaximumLengthofAlphabeticSequences',
        'maximum_number_of_numbers_allowed': 'MaximumNumberOfNumbersAllowed',
        'passcode_history': 'PasscodeHistory',
        'minimum_number_of_digits_or_symbols': 'MinimumNumberOfDigitsOrSymbols',
        'minimum_character_change_length': 'MinimumCharacterChangeLength',
        'maximum_passcode_age': 'MaximumPasscodeAge',
        'maximum_repeat_characters': 'MaximumRepeatCharacters',
        'strings_forbidden_in_password': 'StringsForbiddenInPassword',
        'enable_password_visibility': 'EnablePasswordVisibility',
        'passcode_content': 'PasscodeContent',
        'minimum_passcode_length': 'MinimumPasscodeLength',
        'device_lock_timeout_in_minutes': 'DeviceLockTimeoutInMinutes',
        'fingerprint_authentication': 'FingerprintAuthentication',
        'multifactor_authentication': 'MultifactorAuthentication',
        'default_realm': 'DefaultRealm',
        'kdc_realm': 'KDCRealm',
        'federation_service_url': 'FederationServiceURL',
        'renewable_lifetime': 'RenewableLifetime',
        'ticket_lifetime': 'TicketLifetime'
    }

    def __init__(self, maximum_number_of_failed_attempts=None, maximum_lengthof_alphabetic_sequences=None, maximum_number_of_numbers_allowed=None, passcode_history=None, minimum_number_of_digits_or_symbols=None, minimum_character_change_length=None, maximum_passcode_age=None, maximum_repeat_characters=None, strings_forbidden_in_password=None, enable_password_visibility=None, passcode_content=None, minimum_passcode_length=None, device_lock_timeout_in_minutes=None, fingerprint_authentication=None, multifactor_authentication=None, default_realm=None, kdc_realm=None, federation_service_url=None, renewable_lifetime=None, ticket_lifetime=None, _configuration=None):  # noqa: E501
        """AndroidContainerPasscodePayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._maximum_number_of_failed_attempts = None
        self._maximum_lengthof_alphabetic_sequences = None
        self._maximum_number_of_numbers_allowed = None
        self._passcode_history = None
        self._minimum_number_of_digits_or_symbols = None
        self._minimum_character_change_length = None
        self._maximum_passcode_age = None
        self._maximum_repeat_characters = None
        self._strings_forbidden_in_password = None
        self._enable_password_visibility = None
        self._passcode_content = None
        self._minimum_passcode_length = None
        self._device_lock_timeout_in_minutes = None
        self._fingerprint_authentication = None
        self._multifactor_authentication = None
        self._default_realm = None
        self._kdc_realm = None
        self._federation_service_url = None
        self._renewable_lifetime = None
        self._ticket_lifetime = None
        self.discriminator = None

        if maximum_number_of_failed_attempts is not None:
            self.maximum_number_of_failed_attempts = maximum_number_of_failed_attempts
        if maximum_lengthof_alphabetic_sequences is not None:
            self.maximum_lengthof_alphabetic_sequences = maximum_lengthof_alphabetic_sequences
        if maximum_number_of_numbers_allowed is not None:
            self.maximum_number_of_numbers_allowed = maximum_number_of_numbers_allowed
        if passcode_history is not None:
            self.passcode_history = passcode_history
        if minimum_number_of_digits_or_symbols is not None:
            self.minimum_number_of_digits_or_symbols = minimum_number_of_digits_or_symbols
        if minimum_character_change_length is not None:
            self.minimum_character_change_length = minimum_character_change_length
        if maximum_passcode_age is not None:
            self.maximum_passcode_age = maximum_passcode_age
        if maximum_repeat_characters is not None:
            self.maximum_repeat_characters = maximum_repeat_characters
        if strings_forbidden_in_password is not None:
            self.strings_forbidden_in_password = strings_forbidden_in_password
        if enable_password_visibility is not None:
            self.enable_password_visibility = enable_password_visibility
        if passcode_content is not None:
            self.passcode_content = passcode_content
        if minimum_passcode_length is not None:
            self.minimum_passcode_length = minimum_passcode_length
        if device_lock_timeout_in_minutes is not None:
            self.device_lock_timeout_in_minutes = device_lock_timeout_in_minutes
        if fingerprint_authentication is not None:
            self.fingerprint_authentication = fingerprint_authentication
        if multifactor_authentication is not None:
            self.multifactor_authentication = multifactor_authentication
        if default_realm is not None:
            self.default_realm = default_realm
        if kdc_realm is not None:
            self.kdc_realm = kdc_realm
        if federation_service_url is not None:
            self.federation_service_url = federation_service_url
        if renewable_lifetime is not None:
            self.renewable_lifetime = renewable_lifetime
        if ticket_lifetime is not None:
            self.ticket_lifetime = ticket_lifetime

    @property
    def maximum_number_of_failed_attempts(self):
        """Gets the maximum_number_of_failed_attempts of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets the maximum number of failed attempts.  # noqa: E501

        :return: The maximum_number_of_failed_attempts of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._maximum_number_of_failed_attempts

    @maximum_number_of_failed_attempts.setter
    def maximum_number_of_failed_attempts(self, maximum_number_of_failed_attempts):
        """Sets the maximum_number_of_failed_attempts of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets the maximum number of failed attempts.  # noqa: E501

        :param maximum_number_of_failed_attempts: The maximum_number_of_failed_attempts of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._maximum_number_of_failed_attempts = maximum_number_of_failed_attempts

    @property
    def maximum_lengthof_alphabetic_sequences(self):
        """Gets the maximum_lengthof_alphabetic_sequences of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets maximum length of alphabetic sequence.  # noqa: E501

        :return: The maximum_lengthof_alphabetic_sequences of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._maximum_lengthof_alphabetic_sequences

    @maximum_lengthof_alphabetic_sequences.setter
    def maximum_lengthof_alphabetic_sequences(self, maximum_lengthof_alphabetic_sequences):
        """Sets the maximum_lengthof_alphabetic_sequences of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets maximum length of alphabetic sequence.  # noqa: E501

        :param maximum_lengthof_alphabetic_sequences: The maximum_lengthof_alphabetic_sequences of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._maximum_lengthof_alphabetic_sequences = maximum_lengthof_alphabetic_sequences

    @property
    def maximum_number_of_numbers_allowed(self):
        """Gets the maximum_number_of_numbers_allowed of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets maximum number of numbers allowed.  # noqa: E501

        :return: The maximum_number_of_numbers_allowed of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._maximum_number_of_numbers_allowed

    @maximum_number_of_numbers_allowed.setter
    def maximum_number_of_numbers_allowed(self, maximum_number_of_numbers_allowed):
        """Sets the maximum_number_of_numbers_allowed of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets maximum number of numbers allowed.  # noqa: E501

        :param maximum_number_of_numbers_allowed: The maximum_number_of_numbers_allowed of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._maximum_number_of_numbers_allowed = maximum_number_of_numbers_allowed

    @property
    def passcode_history(self):
        """Gets the passcode_history of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets passcode history.  # noqa: E501

        :return: The passcode_history of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._passcode_history

    @passcode_history.setter
    def passcode_history(self, passcode_history):
        """Sets the passcode_history of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets passcode history.  # noqa: E501

        :param passcode_history: The passcode_history of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._passcode_history = passcode_history

    @property
    def minimum_number_of_digits_or_symbols(self):
        """Gets the minimum_number_of_digits_or_symbols of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets minimum number of digits or symbols.  # noqa: E501

        :return: The minimum_number_of_digits_or_symbols of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_digits_or_symbols

    @minimum_number_of_digits_or_symbols.setter
    def minimum_number_of_digits_or_symbols(self, minimum_number_of_digits_or_symbols):
        """Sets the minimum_number_of_digits_or_symbols of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets minimum number of digits or symbols.  # noqa: E501

        :param minimum_number_of_digits_or_symbols: The minimum_number_of_digits_or_symbols of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._minimum_number_of_digits_or_symbols = minimum_number_of_digits_or_symbols

    @property
    def minimum_character_change_length(self):
        """Gets the minimum_character_change_length of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets maximum character length.  # noqa: E501

        :return: The minimum_character_change_length of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._minimum_character_change_length

    @minimum_character_change_length.setter
    def minimum_character_change_length(self, minimum_character_change_length):
        """Sets the minimum_character_change_length of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets maximum character length.  # noqa: E501

        :param minimum_character_change_length: The minimum_character_change_length of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._minimum_character_change_length = minimum_character_change_length

    @property
    def maximum_passcode_age(self):
        """Gets the maximum_passcode_age of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets passcode age.  # noqa: E501

        :return: The maximum_passcode_age of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._maximum_passcode_age

    @maximum_passcode_age.setter
    def maximum_passcode_age(self, maximum_passcode_age):
        """Sets the maximum_passcode_age of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets passcode age.  # noqa: E501

        :param maximum_passcode_age: The maximum_passcode_age of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._maximum_passcode_age = maximum_passcode_age

    @property
    def maximum_repeat_characters(self):
        """Gets the maximum_repeat_characters of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets maximum repeating characters.  # noqa: E501

        :return: The maximum_repeat_characters of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._maximum_repeat_characters

    @maximum_repeat_characters.setter
    def maximum_repeat_characters(self, maximum_repeat_characters):
        """Sets the maximum_repeat_characters of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets maximum repeating characters.  # noqa: E501

        :param maximum_repeat_characters: The maximum_repeat_characters of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._maximum_repeat_characters = maximum_repeat_characters

    @property
    def strings_forbidden_in_password(self):
        """Gets the strings_forbidden_in_password of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets list of strings forbidden in password.  # noqa: E501

        :return: The strings_forbidden_in_password of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: list[str]
        """
        return self._strings_forbidden_in_password

    @strings_forbidden_in_password.setter
    def strings_forbidden_in_password(self, strings_forbidden_in_password):
        """Sets the strings_forbidden_in_password of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets list of strings forbidden in password.  # noqa: E501

        :param strings_forbidden_in_password: The strings_forbidden_in_password of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: list[str]
        """

        self._strings_forbidden_in_password = strings_forbidden_in_password

    @property
    def enable_password_visibility(self):
        """Gets the enable_password_visibility of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether gets or sets passcode visibility.  # noqa: E501

        :return: The enable_password_visibility of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_password_visibility

    @enable_password_visibility.setter
    def enable_password_visibility(self, enable_password_visibility):
        """Sets the enable_password_visibility of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether gets or sets passcode visibility.  # noqa: E501

        :param enable_password_visibility: The enable_password_visibility of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_password_visibility = enable_password_visibility

    @property
    def passcode_content(self):
        """Gets the passcode_content of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets passcode content.  # noqa: E501

        :return: The passcode_content of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._passcode_content

    @passcode_content.setter
    def passcode_content(self, passcode_content):
        """Sets the passcode_content of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets passcode content.  # noqa: E501

        :param passcode_content: The passcode_content of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._passcode_content = passcode_content

    @property
    def minimum_passcode_length(self):
        """Gets the minimum_passcode_length of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets minimum passcode length.  # noqa: E501

        :return: The minimum_passcode_length of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._minimum_passcode_length

    @minimum_passcode_length.setter
    def minimum_passcode_length(self, minimum_passcode_length):
        """Sets the minimum_passcode_length of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets minimum passcode length.  # noqa: E501

        :param minimum_passcode_length: The minimum_passcode_length of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._minimum_passcode_length = minimum_passcode_length

    @property
    def device_lock_timeout_in_minutes(self):
        """Gets the device_lock_timeout_in_minutes of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets expiration timeout in Minutes.  # noqa: E501

        :return: The device_lock_timeout_in_minutes of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._device_lock_timeout_in_minutes

    @device_lock_timeout_in_minutes.setter
    def device_lock_timeout_in_minutes(self, device_lock_timeout_in_minutes):
        """Sets the device_lock_timeout_in_minutes of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets expiration timeout in Minutes.  # noqa: E501

        :param device_lock_timeout_in_minutes: The device_lock_timeout_in_minutes of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._device_lock_timeout_in_minutes = device_lock_timeout_in_minutes

    @property
    def fingerprint_authentication(self):
        """Gets the fingerprint_authentication of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether gets or sets finger print authentication.  # noqa: E501

        :return: The fingerprint_authentication of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._fingerprint_authentication

    @fingerprint_authentication.setter
    def fingerprint_authentication(self, fingerprint_authentication):
        """Sets the fingerprint_authentication of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether gets or sets finger print authentication.  # noqa: E501

        :param fingerprint_authentication: The fingerprint_authentication of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._fingerprint_authentication = fingerprint_authentication

    @property
    def multifactor_authentication(self):
        """Gets the multifactor_authentication of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether gets or sets multifactor authentication.  # noqa: E501

        :return: The multifactor_authentication of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._multifactor_authentication

    @multifactor_authentication.setter
    def multifactor_authentication(self, multifactor_authentication):
        """Sets the multifactor_authentication of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether gets or sets multifactor authentication.  # noqa: E501

        :param multifactor_authentication: The multifactor_authentication of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._multifactor_authentication = multifactor_authentication

    @property
    def default_realm(self):
        """Gets the default_realm of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets default realm.  # noqa: E501

        :return: The default_realm of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._default_realm

    @default_realm.setter
    def default_realm(self, default_realm):
        """Sets the default_realm of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets default realm.  # noqa: E501

        :param default_realm: The default_realm of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._default_realm = default_realm

    @property
    def kdc_realm(self):
        """Gets the kdc_realm of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets KDCRealm.  # noqa: E501

        :return: The kdc_realm of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._kdc_realm

    @kdc_realm.setter
    def kdc_realm(self, kdc_realm):
        """Sets the kdc_realm of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets KDCRealm.  # noqa: E501

        :param kdc_realm: The kdc_realm of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._kdc_realm = kdc_realm

    @property
    def federation_service_url(self):
        """Gets the federation_service_url of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets federation service url.  # noqa: E501

        :return: The federation_service_url of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._federation_service_url

    @federation_service_url.setter
    def federation_service_url(self, federation_service_url):
        """Sets the federation_service_url of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets federation service url.  # noqa: E501

        :param federation_service_url: The federation_service_url of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._federation_service_url = federation_service_url

    @property
    def renewable_lifetime(self):
        """Gets the renewable_lifetime of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets renewable life time.  # noqa: E501

        :return: The renewable_lifetime of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._renewable_lifetime

    @renewable_lifetime.setter
    def renewable_lifetime(self, renewable_lifetime):
        """Sets the renewable_lifetime of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets renewable life time.  # noqa: E501

        :param renewable_lifetime: The renewable_lifetime of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._renewable_lifetime = renewable_lifetime

    @property
    def ticket_lifetime(self):
        """Gets the ticket_lifetime of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets ticket life time .  # noqa: E501

        :return: The ticket_lifetime of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._ticket_lifetime

    @ticket_lifetime.setter
    def ticket_lifetime(self, ticket_lifetime):
        """Sets the ticket_lifetime of this AndroidContainerPasscodePayloadV2Entity_.

        Gets or sets ticket life time .  # noqa: E501

        :param ticket_lifetime: The ticket_lifetime of this AndroidContainerPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._ticket_lifetime = ticket_lifetime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidContainerPasscodePayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidContainerPasscodePayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidContainerPasscodePayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
