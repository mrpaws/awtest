# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class OgCustomAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_id': 'int',
        'name': 'str',
        'application': 'str',
        'managed_by': 'str',
        'organization_group_id': 'int',
        'values': 'list[AttributeValue]'
    }

    attribute_map = {
        'attribute_id': 'AttributeId',
        'name': 'Name',
        'application': 'Application',
        'managed_by': 'ManagedBy',
        'organization_group_id': 'OrganizationGroupId',
        'values': 'Values'
    }

    def __init__(self, attribute_id=None, name=None, application=None, managed_by=None, organization_group_id=None, values=None, _configuration=None):  # noqa: E501
        """OgCustomAttribute - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute_id = None
        self._name = None
        self._application = None
        self._managed_by = None
        self._organization_group_id = None
        self._values = None
        self.discriminator = None

        if attribute_id is not None:
            self.attribute_id = attribute_id
        if name is not None:
            self.name = name
        if application is not None:
            self.application = application
        if managed_by is not None:
            self.managed_by = managed_by
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if values is not None:
            self.values = values

    @property
    def attribute_id(self):
        """Gets the attribute_id of this OgCustomAttribute.  # noqa: E501

        Gets or sets custom Attribute Id.  # noqa: E501

        :return: The attribute_id of this OgCustomAttribute.  # noqa: E501
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this OgCustomAttribute.

        Gets or sets custom Attribute Id.  # noqa: E501

        :param attribute_id: The attribute_id of this OgCustomAttribute.  # noqa: E501
        :type: int
        """

        self._attribute_id = attribute_id

    @property
    def name(self):
        """Gets the name of this OgCustomAttribute.  # noqa: E501

        Gets or sets custom Attribute Name.  # noqa: E501

        :return: The name of this OgCustomAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OgCustomAttribute.

        Gets or sets custom Attribute Name.  # noqa: E501

        :param name: The name of this OgCustomAttribute.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def application(self):
        """Gets the application of this OgCustomAttribute.  # noqa: E501

        Gets or sets custom Attribute Application.  # noqa: E501

        :return: The application of this OgCustomAttribute.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this OgCustomAttribute.

        Gets or sets custom Attribute Application.  # noqa: E501

        :param application: The application of this OgCustomAttribute.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def managed_by(self):
        """Gets the managed_by of this OgCustomAttribute.  # noqa: E501

        Gets or sets name of the OG at which current Custom Attribute is created.  # noqa: E501

        :return: The managed_by of this OgCustomAttribute.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this OgCustomAttribute.

        Gets or sets name of the OG at which current Custom Attribute is created.  # noqa: E501

        :param managed_by: The managed_by of this OgCustomAttribute.  # noqa: E501
        :type: str
        """

        self._managed_by = managed_by

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this OgCustomAttribute.  # noqa: E501

        Gets or sets oG Id at which current Custom Attribute is created.  # noqa: E501

        :return: The organization_group_id of this OgCustomAttribute.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this OgCustomAttribute.

        Gets or sets oG Id at which current Custom Attribute is created.  # noqa: E501

        :param organization_group_id: The organization_group_id of this OgCustomAttribute.  # noqa: E501
        :type: int
        """

        self._organization_group_id = organization_group_id

    @property
    def values(self):
        """Gets the values of this OgCustomAttribute.  # noqa: E501

        Gets or sets values of the current Custom Attribute.  # noqa: E501

        :return: The values of this OgCustomAttribute.  # noqa: E501
        :rtype: list[AttributeValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this OgCustomAttribute.

        Gets or sets values of the current Custom Attribute.  # noqa: E501

        :param values: The values of this OgCustomAttribute.  # noqa: E501
        :type: list[AttributeValue]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OgCustomAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OgCustomAttribute):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OgCustomAttribute):
            return True

        return self.to_dict() != other.to_dict()
