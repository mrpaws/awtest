# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mcmv1.configuration import Configuration


class AdminStorageModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'storage_capacity': 'float',
        'used_storage': 'float',
        'used_storage_percentage': 'float',
        'max_file_size_allowed': 'float',
        'overage_allowed': 'float',
        'file_encryption': 'bool',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'storage_capacity': 'storageCapacity',
        'used_storage': 'usedStorage',
        'used_storage_percentage': 'usedStoragePercentage',
        'max_file_size_allowed': 'maxFileSizeAllowed',
        'overage_allowed': 'overageAllowed',
        'file_encryption': 'fileEncryption',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, storage_capacity=None, used_storage=None, used_storage_percentage=None, max_file_size_allowed=None, overage_allowed=None, file_encryption=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """AdminStorageModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._storage_capacity = None
        self._used_storage = None
        self._used_storage_percentage = None
        self._max_file_size_allowed = None
        self._overage_allowed = None
        self._file_encryption = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if storage_capacity is not None:
            self.storage_capacity = storage_capacity
        if used_storage is not None:
            self.used_storage = used_storage
        if used_storage_percentage is not None:
            self.used_storage_percentage = used_storage_percentage
        if max_file_size_allowed is not None:
            self.max_file_size_allowed = max_file_size_allowed
        if overage_allowed is not None:
            self.overage_allowed = overage_allowed
        if file_encryption is not None:
            self.file_encryption = file_encryption
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def storage_capacity(self):
        """Gets the storage_capacity of this AdminStorageModel.  # noqa: E501

        Gets or sets storage capacity for admin.  # noqa: E501

        :return: The storage_capacity of this AdminStorageModel.  # noqa: E501
        :rtype: float
        """
        return self._storage_capacity

    @storage_capacity.setter
    def storage_capacity(self, storage_capacity):
        """Sets the storage_capacity of this AdminStorageModel.

        Gets or sets storage capacity for admin.  # noqa: E501

        :param storage_capacity: The storage_capacity of this AdminStorageModel.  # noqa: E501
        :type: float
        """

        self._storage_capacity = storage_capacity

    @property
    def used_storage(self):
        """Gets the used_storage of this AdminStorageModel.  # noqa: E501

        Gets or sets storage Usage for admin.  # noqa: E501

        :return: The used_storage of this AdminStorageModel.  # noqa: E501
        :rtype: float
        """
        return self._used_storage

    @used_storage.setter
    def used_storage(self, used_storage):
        """Sets the used_storage of this AdminStorageModel.

        Gets or sets storage Usage for admin.  # noqa: E501

        :param used_storage: The used_storage of this AdminStorageModel.  # noqa: E501
        :type: float
        """

        self._used_storage = used_storage

    @property
    def used_storage_percentage(self):
        """Gets the used_storage_percentage of this AdminStorageModel.  # noqa: E501

        Gets or sets used storage Percentage of admin user.  # noqa: E501

        :return: The used_storage_percentage of this AdminStorageModel.  # noqa: E501
        :rtype: float
        """
        return self._used_storage_percentage

    @used_storage_percentage.setter
    def used_storage_percentage(self, used_storage_percentage):
        """Sets the used_storage_percentage of this AdminStorageModel.

        Gets or sets used storage Percentage of admin user.  # noqa: E501

        :param used_storage_percentage: The used_storage_percentage of this AdminStorageModel.  # noqa: E501
        :type: float
        """

        self._used_storage_percentage = used_storage_percentage

    @property
    def max_file_size_allowed(self):
        """Gets the max_file_size_allowed of this AdminStorageModel.  # noqa: E501

        Gets or sets max file size allowed.  # noqa: E501

        :return: The max_file_size_allowed of this AdminStorageModel.  # noqa: E501
        :rtype: float
        """
        return self._max_file_size_allowed

    @max_file_size_allowed.setter
    def max_file_size_allowed(self, max_file_size_allowed):
        """Sets the max_file_size_allowed of this AdminStorageModel.

        Gets or sets max file size allowed.  # noqa: E501

        :param max_file_size_allowed: The max_file_size_allowed of this AdminStorageModel.  # noqa: E501
        :type: float
        """

        self._max_file_size_allowed = max_file_size_allowed

    @property
    def overage_allowed(self):
        """Gets the overage_allowed of this AdminStorageModel.  # noqa: E501

        Gets or sets overage size allowed.  # noqa: E501

        :return: The overage_allowed of this AdminStorageModel.  # noqa: E501
        :rtype: float
        """
        return self._overage_allowed

    @overage_allowed.setter
    def overage_allowed(self, overage_allowed):
        """Sets the overage_allowed of this AdminStorageModel.

        Gets or sets overage size allowed.  # noqa: E501

        :param overage_allowed: The overage_allowed of this AdminStorageModel.  # noqa: E501
        :type: float
        """

        self._overage_allowed = overage_allowed

    @property
    def file_encryption(self):
        """Gets the file_encryption of this AdminStorageModel.  # noqa: E501

        Gets or sets a value indicating whether checks if file encryption is enabled or not. Returns 'True' if file encryption is enabled.  # noqa: E501

        :return: The file_encryption of this AdminStorageModel.  # noqa: E501
        :rtype: bool
        """
        return self._file_encryption

    @file_encryption.setter
    def file_encryption(self, file_encryption):
        """Sets the file_encryption of this AdminStorageModel.

        Gets or sets a value indicating whether checks if file encryption is enabled or not. Returns 'True' if file encryption is enabled.  # noqa: E501

        :param file_encryption: The file_encryption of this AdminStorageModel.  # noqa: E501
        :type: bool
        """

        self._file_encryption = file_encryption

    @property
    def id(self):
        """Gets the id of this AdminStorageModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this AdminStorageModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdminStorageModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this AdminStorageModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this AdminStorageModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this AdminStorageModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AdminStorageModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this AdminStorageModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminStorageModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminStorageModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdminStorageModel):
            return True

        return self.to_dict() != other.to_dict()
