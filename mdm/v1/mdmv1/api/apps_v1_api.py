# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class AppsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apps_v1_get_app_info_for_device(self, device_uuid, bundleid, **kwargs):  # noqa: E501
        """New - Returns details for the specified app installed/assigned to the device.  # noqa: E501

        This endpoint returns the details of specified app which is assigned or installed on the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v1_get_app_info_for_device(device_uuid, bundleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: The uuid of the device.              Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param str bundleid: The bundle id of the application.              E.g. com.tencent.ig(Required) (required)
        :return: AppV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_v1_get_app_info_for_device_with_http_info(device_uuid, bundleid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_v1_get_app_info_for_device_with_http_info(device_uuid, bundleid, **kwargs)  # noqa: E501
            return data

    def apps_v1_get_app_info_for_device_with_http_info(self, device_uuid, bundleid, **kwargs):  # noqa: E501
        """New - Returns details for the specified app installed/assigned to the device.  # noqa: E501

        This endpoint returns the details of specified app which is assigned or installed on the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v1_get_app_info_for_device_with_http_info(device_uuid, bundleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: The uuid of the device.              Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param str bundleid: The bundle id of the application.              E.g. com.tencent.ig(Required) (required)
        :return: AppV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_uuid', 'bundleid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_v1_get_app_info_for_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_uuid' is set
        if self.api_client.client_side_validation and ('device_uuid' not in params or
                                                       params['device_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_uuid` when calling `apps_v1_get_app_info_for_device`")  # noqa: E501
        # verify the required parameter 'bundleid' is set
        if self.api_client.client_side_validation and ('bundleid' not in params or
                                                       params['bundleid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundleid` when calling `apps_v1_get_app_info_for_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_uuid' in params:
            path_params['deviceUuid'] = params['device_uuid']  # noqa: E501

        query_params = []
        if 'bundleid' in params:
            query_params.append(('bundleid', params['bundleid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceUuid}/apps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_v1_search_apps_for_device(self, device_uuid, **kwargs):  # noqa: E501
        """New - Returns the apps which are applicable to the device.  # noqa: E501

        This endpoint returns the details of apps which are assigned or installed on the device matching the search text.  Following special characters are not allowed in query params ('[', ']', '(', ')', '{', '}', '&lt;', '&gt;', '\\\"').  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v1_search_apps_for_device(device_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: The uuid of the device.              Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param int page: Page number which will be fetched, 0 based index. Default 0.
        :param int pagesize: Maximum number of results to be returned in one page. Default 500.
        :param str searchtext: If provided, the records matching this text will be returned. The search will be applied on the following properties [name, installed_version, assigned_version]. The default value will be empty string.
        :param str sortorder: Whether the sort order is ascending or descending. The property used for sorting is name. Possible values [Asc, Desc]. Default value is Asc.
        :return: AppV1PagedSearchResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_v1_search_apps_for_device_with_http_info(device_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_v1_search_apps_for_device_with_http_info(device_uuid, **kwargs)  # noqa: E501
            return data

    def apps_v1_search_apps_for_device_with_http_info(self, device_uuid, **kwargs):  # noqa: E501
        """New - Returns the apps which are applicable to the device.  # noqa: E501

        This endpoint returns the details of apps which are assigned or installed on the device matching the search text.  Following special characters are not allowed in query params ('[', ']', '(', ')', '{', '}', '&lt;', '&gt;', '\\\"').  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_v1_search_apps_for_device_with_http_info(device_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: The uuid of the device.              Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param int page: Page number which will be fetched, 0 based index. Default 0.
        :param int pagesize: Maximum number of results to be returned in one page. Default 500.
        :param str searchtext: If provided, the records matching this text will be returned. The search will be applied on the following properties [name, installed_version, assigned_version]. The default value will be empty string.
        :param str sortorder: Whether the sort order is ascending or descending. The property used for sorting is name. Possible values [Asc, Desc]. Default value is Asc.
        :return: AppV1PagedSearchResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_uuid', 'page', 'pagesize', 'searchtext', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_v1_search_apps_for_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_uuid' is set
        if self.api_client.client_side_validation and ('device_uuid' not in params or
                                                       params['device_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_uuid` when calling `apps_v1_search_apps_for_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_uuid' in params:
            path_params['deviceUuid'] = params['device_uuid']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'searchtext' in params:
            query_params.append(('searchtext', params['searchtext']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceUuid}/apps/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppV1PagedSearchResultsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
