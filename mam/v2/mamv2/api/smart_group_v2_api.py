# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv2.api_client import ApiClient


class SmartGroupV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def smart_group_v2_add_bsp_app_to_smart_group_async(self, application_id, **kwargs):  # noqa: E501
        """New - Assigns Smart Groups to an BSP Application.  # noqa: E501

        Assigns smartgroup identified by the smartgroup id to the BSP application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_v2_add_bsp_app_to_smart_group_async(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Application Id. (required)
        :param str offlinesmartgroupid: Offline smart group Identifier.
        :param str onlinesmartgroupid: Online smart group Identifier.
        :param str type: Type is {harmony/airwatch}.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_group_v2_add_bsp_app_to_smart_group_async_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_group_v2_add_bsp_app_to_smart_group_async_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def smart_group_v2_add_bsp_app_to_smart_group_async_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """New - Assigns Smart Groups to an BSP Application.  # noqa: E501

        Assigns smartgroup identified by the smartgroup id to the BSP application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_v2_add_bsp_app_to_smart_group_async_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Application Id. (required)
        :param str offlinesmartgroupid: Offline smart group Identifier.
        :param str onlinesmartgroupid: Online smart group Identifier.
        :param str type: Type is {harmony/airwatch}.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'offlinesmartgroupid', 'onlinesmartgroupid', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_group_v2_add_bsp_app_to_smart_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `smart_group_v2_add_bsp_app_to_smart_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []
        if 'offlinesmartgroupid' in params:
            query_params.append(('offlinesmartgroupid', params['offlinesmartgroupid']))  # noqa: E501
        if 'onlinesmartgroupid' in params:
            query_params.append(('onlinesmartgroupid', params['onlinesmartgroupid']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationId}/bspsmartgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
