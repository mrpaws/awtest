# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkAppRuntimePermissionV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permission_id': 'str',
        'name': 'str',
        'description': 'str',
        'state': 'str',
        'permission_option': 'int',
        'kind': 'str'
    }

    attribute_map = {
        'permission_id': 'PermissionId',
        'name': 'Name',
        'description': 'Description',
        'state': 'State',
        'permission_option': 'PermissionOption',
        'kind': 'Kind'
    }

    def __init__(self, permission_id=None, name=None, description=None, state=None, permission_option=None, kind=None, _configuration=None):  # noqa: E501
        """AndroidForWorkAppRuntimePermissionV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._permission_id = None
        self._name = None
        self._description = None
        self._state = None
        self._permission_option = None
        self._kind = None
        self.discriminator = None

        if permission_id is not None:
            self.permission_id = permission_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if state is not None:
            self.state = state
        if permission_option is not None:
            self.permission_option = permission_option
        if kind is not None:
            self.kind = kind

    @property
    def permission_id(self):
        """Gets the permission_id of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501

        Gets or sets permission Id.  # noqa: E501

        :return: The permission_id of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this AndroidForWorkAppRuntimePermissionV2Entity.

        Gets or sets permission Id.  # noqa: E501

        :param permission_id: The permission_id of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :type: str
        """

        self._permission_id = permission_id

    @property
    def name(self):
        """Gets the name of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501

        Gets or sets permission Name.  # noqa: E501

        :return: The name of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AndroidForWorkAppRuntimePermissionV2Entity.

        Gets or sets permission Name.  # noqa: E501

        :param name: The name of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501

        Gets or sets permission Description.  # noqa: E501

        :return: The description of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AndroidForWorkAppRuntimePermissionV2Entity.

        Gets or sets permission Description.  # noqa: E501

        :param description: The description of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def state(self):
        """Gets the state of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501

        Gets or sets permission state accepted/required.  # noqa: E501

        :return: The state of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AndroidForWorkAppRuntimePermissionV2Entity.

        Gets or sets permission state accepted/required.  # noqa: E501

        :param state: The state of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def permission_option(self):
        """Gets the permission_option of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501

        Gets or sets permission Option.  # noqa: E501

        :return: The permission_option of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._permission_option

    @permission_option.setter
    def permission_option(self, permission_option):
        """Sets the permission_option of this AndroidForWorkAppRuntimePermissionV2Entity.

        Gets or sets permission Option.  # noqa: E501

        :param permission_option: The permission_option of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :type: int
        """

        self._permission_option = permission_option

    @property
    def kind(self):
        """Gets the kind of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501

        Gets or sets kind - androidenterprise#permission.  # noqa: E501

        :return: The kind of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AndroidForWorkAppRuntimePermissionV2Entity.

        Gets or sets kind - androidenterprise#permission.  # noqa: E501

        :param kind: The kind of this AndroidForWorkAppRuntimePermissionV2Entity.  # noqa: E501
        :type: str
        """

        self._kind = kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkAppRuntimePermissionV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkAppRuntimePermissionV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkAppRuntimePermissionV2Entity):
            return True

        return self.to_dict() != other.to_dict()
