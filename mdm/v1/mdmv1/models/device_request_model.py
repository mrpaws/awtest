# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_number': 'str',
        'ownership': 'str',
        'device_friendly_name': 'str'
    }

    attribute_map = {
        'asset_number': 'AssetNumber',
        'ownership': 'Ownership',
        'device_friendly_name': 'DeviceFriendlyName'
    }

    def __init__(self, asset_number=None, ownership=None, device_friendly_name=None, _configuration=None):  # noqa: E501
        """DeviceRequestModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset_number = None
        self._ownership = None
        self._device_friendly_name = None
        self.discriminator = None

        if asset_number is not None:
            self.asset_number = asset_number
        if ownership is not None:
            self.ownership = ownership
        if device_friendly_name is not None:
            self.device_friendly_name = device_friendly_name

    @property
    def asset_number(self):
        """Gets the asset_number of this DeviceRequestModel.  # noqa: E501

        The asset number of the device.  # noqa: E501

        :return: The asset_number of this DeviceRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this DeviceRequestModel.

        The asset number of the device.  # noqa: E501

        :param asset_number: The asset_number of this DeviceRequestModel.  # noqa: E501
        :type: str
        """

        self._asset_number = asset_number

    @property
    def ownership(self):
        """Gets the ownership of this DeviceRequestModel.  # noqa: E501

        The device ownership status. (i.e. Corporate, Employee, Shared)  # noqa: E501

        :return: The ownership of this DeviceRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this DeviceRequestModel.

        The device ownership status. (i.e. Corporate, Employee, Shared)  # noqa: E501

        :param ownership: The ownership of this DeviceRequestModel.  # noqa: E501
        :type: str
        """

        self._ownership = ownership

    @property
    def device_friendly_name(self):
        """Gets the device_friendly_name of this DeviceRequestModel.  # noqa: E501

        The device friendly name.  # noqa: E501

        :return: The device_friendly_name of this DeviceRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._device_friendly_name

    @device_friendly_name.setter
    def device_friendly_name(self, device_friendly_name):
        """Sets the device_friendly_name of this DeviceRequestModel.

        The device friendly name.  # noqa: E501

        :param device_friendly_name: The device_friendly_name of this DeviceRequestModel.  # noqa: E501
        :type: str
        """

        self._device_friendly_name = device_friendly_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceRequestModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceRequestModel):
            return True

        return self.to_dict() != other.to_dict()
