# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceProfileApiEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'name': 'str',
        'description': 'str',
        'location_group_id': 'EntityReference_',
        'current_version': 'int',
        'assignment_type': 'int',
        'installed_profile_version': 'int',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'status': 'Status',
        'name': 'Name',
        'description': 'Description',
        'location_group_id': 'LocationGroupId',
        'current_version': 'CurrentVersion',
        'assignment_type': 'AssignmentType',
        'installed_profile_version': 'InstalledProfileVersion',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, status=None, name=None, description=None, location_group_id=None, current_version=None, assignment_type=None, installed_profile_version=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceProfileApiEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._name = None
        self._description = None
        self._location_group_id = None
        self._current_version = None
        self._assignment_type = None
        self._installed_profile_version = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if location_group_id is not None:
            self.location_group_id = location_group_id
        if current_version is not None:
            self.current_version = current_version
        if assignment_type is not None:
            self.assignment_type = assignment_type
        if installed_profile_version is not None:
            self.installed_profile_version = installed_profile_version
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def status(self):
        """Gets the status of this DeviceProfileApiEntity.  # noqa: E501

        Gets or sets status of the device profile.  # noqa: E501

        :return: The status of this DeviceProfileApiEntity.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceProfileApiEntity.

        Gets or sets status of the device profile.  # noqa: E501

        :param status: The status of this DeviceProfileApiEntity.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def name(self):
        """Gets the name of this DeviceProfileApiEntity.  # noqa: E501

        Gets or sets name.  # noqa: E501

        :return: The name of this DeviceProfileApiEntity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceProfileApiEntity.

        Gets or sets name.  # noqa: E501

        :param name: The name of this DeviceProfileApiEntity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this DeviceProfileApiEntity.  # noqa: E501

        Gets or sets description.  # noqa: E501

        :return: The description of this DeviceProfileApiEntity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceProfileApiEntity.

        Gets or sets description.  # noqa: E501

        :param description: The description of this DeviceProfileApiEntity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location_group_id(self):
        """Gets the location_group_id of this DeviceProfileApiEntity.  # noqa: E501

        Gets or sets link to the location group the device belongs to.  # noqa: E501

        :return: The location_group_id of this DeviceProfileApiEntity.  # noqa: E501
        :rtype: EntityReference_
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this DeviceProfileApiEntity.

        Gets or sets link to the location group the device belongs to.  # noqa: E501

        :param location_group_id: The location_group_id of this DeviceProfileApiEntity.  # noqa: E501
        :type: EntityReference_
        """

        self._location_group_id = location_group_id

    @property
    def current_version(self):
        """Gets the current_version of this DeviceProfileApiEntity.  # noqa: E501

        Gets or sets version.  # noqa: E501

        :return: The current_version of this DeviceProfileApiEntity.  # noqa: E501
        :rtype: int
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this DeviceProfileApiEntity.

        Gets or sets version.  # noqa: E501

        :param current_version: The current_version of this DeviceProfileApiEntity.  # noqa: E501
        :type: int
        """

        self._current_version = current_version

    @property
    def assignment_type(self):
        """Gets the assignment_type of this DeviceProfileApiEntity.  # noqa: E501

        Gets or sets assignment type of the device profile.  # noqa: E501

        :return: The assignment_type of this DeviceProfileApiEntity.  # noqa: E501
        :rtype: int
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this DeviceProfileApiEntity.

        Gets or sets assignment type of the device profile.  # noqa: E501

        :param assignment_type: The assignment_type of this DeviceProfileApiEntity.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                assignment_type not in allowed_values):
            raise ValueError(
                "Invalid value for `assignment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignment_type, allowed_values)
            )

        self._assignment_type = assignment_type

    @property
    def installed_profile_version(self):
        """Gets the installed_profile_version of this DeviceProfileApiEntity.  # noqa: E501

        Gets or sets installed Profile Version- Last installed profile on the device.  # noqa: E501

        :return: The installed_profile_version of this DeviceProfileApiEntity.  # noqa: E501
        :rtype: int
        """
        return self._installed_profile_version

    @installed_profile_version.setter
    def installed_profile_version(self, installed_profile_version):
        """Sets the installed_profile_version of this DeviceProfileApiEntity.

        Gets or sets installed Profile Version- Last installed profile on the device.  # noqa: E501

        :param installed_profile_version: The installed_profile_version of this DeviceProfileApiEntity.  # noqa: E501
        :type: int
        """

        self._installed_profile_version = installed_profile_version

    @property
    def id(self):
        """Gets the id of this DeviceProfileApiEntity.  # noqa: E501


        :return: The id of this DeviceProfileApiEntity.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceProfileApiEntity.


        :param id: The id of this DeviceProfileApiEntity.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceProfileApiEntity.  # noqa: E501


        :return: The uuid of this DeviceProfileApiEntity.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceProfileApiEntity.


        :param uuid: The uuid of this DeviceProfileApiEntity.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceProfileApiEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceProfileApiEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceProfileApiEntity):
            return True

        return self.to_dict() != other.to_dict()
