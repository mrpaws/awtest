# coding: utf-8

"""
    MEM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memv1.configuration import Configuration


class MEMDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mem_device_id': 'int',
        'eas_device_id': 'str',
        'email_address': 'str',
        'friendly_name': 'str',
        'status': 'str',
        'reason': 'str',
        'managed': 'str',
        'eas_device_type': 'str',
        'platform': 'str'
    }

    attribute_map = {
        'mem_device_id': 'MEMDeviceID',
        'eas_device_id': 'EASDeviceID',
        'email_address': 'EmailAddress',
        'friendly_name': 'FriendlyName',
        'status': 'Status',
        'reason': 'Reason',
        'managed': 'Managed',
        'eas_device_type': 'EasDeviceType',
        'platform': 'Platform'
    }

    def __init__(self, mem_device_id=None, eas_device_id=None, email_address=None, friendly_name=None, status=None, reason=None, managed=None, eas_device_type=None, platform=None, _configuration=None):  # noqa: E501
        """MEMDevice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mem_device_id = None
        self._eas_device_id = None
        self._email_address = None
        self._friendly_name = None
        self._status = None
        self._reason = None
        self._managed = None
        self._eas_device_type = None
        self._platform = None
        self.discriminator = None

        if mem_device_id is not None:
            self.mem_device_id = mem_device_id
        if eas_device_id is not None:
            self.eas_device_id = eas_device_id
        if email_address is not None:
            self.email_address = email_address
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if status is not None:
            self.status = status
        if reason is not None:
            self.reason = reason
        if managed is not None:
            self.managed = managed
        if eas_device_type is not None:
            self.eas_device_type = eas_device_type
        if platform is not None:
            self.platform = platform

    @property
    def mem_device_id(self):
        """Gets the mem_device_id of this MEMDevice.  # noqa: E501

        Gets or sets mEM Device Identifier.  # noqa: E501

        :return: The mem_device_id of this MEMDevice.  # noqa: E501
        :rtype: int
        """
        return self._mem_device_id

    @mem_device_id.setter
    def mem_device_id(self, mem_device_id):
        """Sets the mem_device_id of this MEMDevice.

        Gets or sets mEM Device Identifier.  # noqa: E501

        :param mem_device_id: The mem_device_id of this MEMDevice.  # noqa: E501
        :type: int
        """

        self._mem_device_id = mem_device_id

    @property
    def eas_device_id(self):
        """Gets the eas_device_id of this MEMDevice.  # noqa: E501

        Gets or sets eAS Device Identifier.  # noqa: E501

        :return: The eas_device_id of this MEMDevice.  # noqa: E501
        :rtype: str
        """
        return self._eas_device_id

    @eas_device_id.setter
    def eas_device_id(self, eas_device_id):
        """Sets the eas_device_id of this MEMDevice.

        Gets or sets eAS Device Identifier.  # noqa: E501

        :param eas_device_id: The eas_device_id of this MEMDevice.  # noqa: E501
        :type: str
        """

        self._eas_device_id = eas_device_id

    @property
    def email_address(self):
        """Gets the email_address of this MEMDevice.  # noqa: E501

        Gets or sets email Address of the user.  # noqa: E501

        :return: The email_address of this MEMDevice.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this MEMDevice.

        Gets or sets email Address of the user.  # noqa: E501

        :param email_address: The email_address of this MEMDevice.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def friendly_name(self):
        """Gets the friendly_name of this MEMDevice.  # noqa: E501

        Gets or sets device Friendly Name.  # noqa: E501

        :return: The friendly_name of this MEMDevice.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this MEMDevice.

        Gets or sets device Friendly Name.  # noqa: E501

        :param friendly_name: The friendly_name of this MEMDevice.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def status(self):
        """Gets the status of this MEMDevice.  # noqa: E501

        Gets or sets status of the email-action commands with Email-Server.  # noqa: E501

        :return: The status of this MEMDevice.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MEMDevice.

        Gets or sets status of the email-action commands with Email-Server.  # noqa: E501

        :param status: The status of this MEMDevice.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this MEMDevice.  # noqa: E501

        Gets or sets reason which tells why the email-action commands were Blocked or Allowed.  # noqa: E501

        :return: The reason of this MEMDevice.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this MEMDevice.

        Gets or sets reason which tells why the email-action commands were Blocked or Allowed.  # noqa: E501

        :param reason: The reason of this MEMDevice.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def managed(self):
        """Gets the managed of this MEMDevice.  # noqa: E501

        Gets or sets flag to specify whether device-email is managed or not  Valid values: TRUE, FALSE.  # noqa: E501

        :return: The managed of this MEMDevice.  # noqa: E501
        :rtype: str
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this MEMDevice.

        Gets or sets flag to specify whether device-email is managed or not  Valid values: TRUE, FALSE.  # noqa: E501

        :param managed: The managed of this MEMDevice.  # noqa: E501
        :type: str
        """

        self._managed = managed

    @property
    def eas_device_type(self):
        """Gets the eas_device_type of this MEMDevice.  # noqa: E501

        Gets or sets specifies the EasDeviceType Name.  # noqa: E501

        :return: The eas_device_type of this MEMDevice.  # noqa: E501
        :rtype: str
        """
        return self._eas_device_type

    @eas_device_type.setter
    def eas_device_type(self, eas_device_type):
        """Sets the eas_device_type of this MEMDevice.

        Gets or sets specifies the EasDeviceType Name.  # noqa: E501

        :param eas_device_type: The eas_device_type of this MEMDevice.  # noqa: E501
        :type: str
        """

        self._eas_device_type = eas_device_type

    @property
    def platform(self):
        """Gets the platform of this MEMDevice.  # noqa: E501

        Gets or sets device Platform, This value will be not null only for Managed Device. For Unmanaged Devices this will be null.  # noqa: E501

        :return: The platform of this MEMDevice.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this MEMDevice.

        Gets or sets device Platform, This value will be not null only for Managed Device. For Unmanaged Devices this will be null.  # noqa: E501

        :param platform: The platform of this MEMDevice.  # noqa: E501
        :type: str
        """

        self._platform = platform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MEMDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MEMDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MEMDevice):
            return True

        return self.to_dict() != other.to_dict()
