# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceRecoveryLockPasswordResponseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_uuid': 'str',
        'applied_password': 'str',
        'applied_on': 'datetime',
        'submitted_password': 'str',
        'submitted_on': 'datetime'
    }

    attribute_map = {
        'device_uuid': 'device_uuid',
        'applied_password': 'applied_password',
        'applied_on': 'applied_on',
        'submitted_password': 'submitted_password',
        'submitted_on': 'submitted_on'
    }

    def __init__(self, device_uuid=None, applied_password=None, applied_on=None, submitted_password=None, submitted_on=None, _configuration=None):  # noqa: E501
        """DeviceRecoveryLockPasswordResponseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_uuid = None
        self._applied_password = None
        self._applied_on = None
        self._submitted_password = None
        self._submitted_on = None
        self.discriminator = None

        if device_uuid is not None:
            self.device_uuid = device_uuid
        if applied_password is not None:
            self.applied_password = applied_password
        if applied_on is not None:
            self.applied_on = applied_on
        if submitted_password is not None:
            self.submitted_password = submitted_password
        if submitted_on is not None:
            self.submitted_on = submitted_on

    @property
    def device_uuid(self):
        """Gets the device_uuid of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501

        Unique identifier (Uuid) of the device.  # noqa: E501

        :return: The device_uuid of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this DeviceRecoveryLockPasswordResponseV1Model.

        Unique identifier (Uuid) of the device.  # noqa: E501

        :param device_uuid: The device_uuid of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def applied_password(self):
        """Gets the applied_password of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501

        The password that is currently applied on the macOS device.  # noqa: E501

        :return: The applied_password of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._applied_password

    @applied_password.setter
    def applied_password(self, applied_password):
        """Sets the applied_password of this DeviceRecoveryLockPasswordResponseV1Model.

        The password that is currently applied on the macOS device.  # noqa: E501

        :param applied_password: The applied_password of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :type: str
        """

        self._applied_password = applied_password

    @property
    def applied_on(self):
        """Gets the applied_on of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501

        The date and time of day on which the password was applied on device.  # noqa: E501

        :return: The applied_on of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._applied_on

    @applied_on.setter
    def applied_on(self, applied_on):
        """Sets the applied_on of this DeviceRecoveryLockPasswordResponseV1Model.

        The date and time of day on which the password was applied on device.  # noqa: E501

        :param applied_on: The applied_on of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :type: datetime
        """

        self._applied_on = applied_on

    @property
    def submitted_password(self):
        """Gets the submitted_password of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501

        The password that is submitted for the macOS device.  # noqa: E501

        :return: The submitted_password of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._submitted_password

    @submitted_password.setter
    def submitted_password(self, submitted_password):
        """Sets the submitted_password of this DeviceRecoveryLockPasswordResponseV1Model.

        The password that is submitted for the macOS device.  # noqa: E501

        :param submitted_password: The submitted_password of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :type: str
        """

        self._submitted_password = submitted_password

    @property
    def submitted_on(self):
        """Gets the submitted_on of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501

        The date and time of day on which the password was submitted.  # noqa: E501

        :return: The submitted_on of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_on

    @submitted_on.setter
    def submitted_on(self, submitted_on):
        """Sets the submitted_on of this DeviceRecoveryLockPasswordResponseV1Model.

        The date and time of day on which the password was submitted.  # noqa: E501

        :param submitted_on: The submitted_on of this DeviceRecoveryLockPasswordResponseV1Model.  # noqa: E501
        :type: datetime
        """

        self._submitted_on = submitted_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceRecoveryLockPasswordResponseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceRecoveryLockPasswordResponseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceRecoveryLockPasswordResponseV1Model):
            return True

        return self.to_dict() != other.to_dict()
