# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class DeviceExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eas_ids': 'EasIds_',
        'time_zone': 'str',
        'udid': 'str',
        'serial_number': 'str',
        'mac_address': 'str',
        'imei': 'str',
        'eas_id': 'str',
        'asset_number': 'str',
        'device_friendly_name': 'str',
        'device_reported_name': 'str',
        'location_group_id': 'EntityReference_',
        'location_group_name': 'str',
        'user_id': 'EntityReference_',
        'user_name': 'str',
        'data_protection_status': 'int',
        'user_email_address': 'str',
        'ownership': 'str',
        'platform_id': 'EntityReference_',
        'platform': 'str',
        'model_id': 'EntityReference_',
        'model': 'str',
        'operating_system': 'str',
        'phone_number': 'str',
        'last_seen': 'datetime',
        'enrollment_status': 'str',
        'compliance_status': 'str',
        'compromised_status': 'bool',
        'last_enrolled_on': 'datetime',
        'last_compliance_check_on': 'datetime',
        'last_compromised_check_on': 'datetime',
        'compliance_summary': 'ComplianceSummary_',
        'is_supervised': 'bool',
        'device_mcc': 'DeviceMcc_',
        'is_remote_management_enabled': 'str',
        'data_encryption_yn': 'str',
        'ac_line_status': 'int',
        'virtual_memory': 'int',
        'oem_info': 'str',
        'device_capacity': 'float',
        'available_device_capacity': 'float',
        'last_system_sample_time': 'datetime',
        'is_device_dnd_enabled': 'bool',
        'is_device_locator_enabled': 'bool',
        'is_cloud_backup_enabled': 'bool',
        'is_activation_lock_enabled': 'bool',
        'is_network_tethered': 'bool',
        'battery_level': 'str',
        'is_roaming': 'bool',
        'last_network_lan_sample_time': 'datetime',
        'last_bluetooth_sample_time': 'datetime',
        'system_integrity_protection_enabled': 'bool',
        'processor_architecture': 'int',
        'user_approved_enrollment': 'bool',
        'enrolled_via_dep': 'bool',
        'total_physical_memory': 'int',
        'available_physical_memory': 'int',
        'os_build_version': 'str',
        'host_name': 'str',
        'local_host_name': 'str',
        'security_patch_date': 'datetime',
        'system_update_received_time': 'datetime',
        'is_security_patch_update': 'bool',
        'device_manufacturer_id': 'int',
        'device_network_info': 'list[DeviceNetworkInfo]',
        'device_cellular_network_info': 'list[DeviceCellularInfoModel]',
        'enrollment_user_uuid': 'str',
        'managed_by': 'int',
        'wifi_ssid': 'str',
        'dep_token_source': 'int',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'eas_ids': 'EasIds',
        'time_zone': 'TimeZone',
        'udid': 'Udid',
        'serial_number': 'SerialNumber',
        'mac_address': 'MacAddress',
        'imei': 'Imei',
        'eas_id': 'EasId',
        'asset_number': 'AssetNumber',
        'device_friendly_name': 'DeviceFriendlyName',
        'device_reported_name': 'DeviceReportedName',
        'location_group_id': 'LocationGroupId',
        'location_group_name': 'LocationGroupName',
        'user_id': 'UserId',
        'user_name': 'UserName',
        'data_protection_status': 'DataProtectionStatus',
        'user_email_address': 'UserEmailAddress',
        'ownership': 'Ownership',
        'platform_id': 'PlatformId',
        'platform': 'Platform',
        'model_id': 'ModelId',
        'model': 'Model',
        'operating_system': 'OperatingSystem',
        'phone_number': 'PhoneNumber',
        'last_seen': 'LastSeen',
        'enrollment_status': 'EnrollmentStatus',
        'compliance_status': 'ComplianceStatus',
        'compromised_status': 'CompromisedStatus',
        'last_enrolled_on': 'LastEnrolledOn',
        'last_compliance_check_on': 'LastComplianceCheckOn',
        'last_compromised_check_on': 'LastCompromisedCheckOn',
        'compliance_summary': 'ComplianceSummary',
        'is_supervised': 'IsSupervised',
        'device_mcc': 'DeviceMCC',
        'is_remote_management_enabled': 'IsRemoteManagementEnabled',
        'data_encryption_yn': 'DataEncryptionYN',
        'ac_line_status': 'AcLineStatus',
        'virtual_memory': 'VirtualMemory',
        'oem_info': 'OEMInfo',
        'device_capacity': 'DeviceCapacity',
        'available_device_capacity': 'AvailableDeviceCapacity',
        'last_system_sample_time': 'LastSystemSampleTime',
        'is_device_dnd_enabled': 'IsDeviceDNDEnabled',
        'is_device_locator_enabled': 'IsDeviceLocatorEnabled',
        'is_cloud_backup_enabled': 'IsCloudBackupEnabled',
        'is_activation_lock_enabled': 'IsActivationLockEnabled',
        'is_network_tethered': 'IsNetworkTethered',
        'battery_level': 'BatteryLevel',
        'is_roaming': 'IsRoaming',
        'last_network_lan_sample_time': 'LastNetworkLANSampleTime',
        'last_bluetooth_sample_time': 'LastBluetoothSampleTime',
        'system_integrity_protection_enabled': 'SystemIntegrityProtectionEnabled',
        'processor_architecture': 'ProcessorArchitecture',
        'user_approved_enrollment': 'UserApprovedEnrollment',
        'enrolled_via_dep': 'EnrolledViaDEP',
        'total_physical_memory': 'TotalPhysicalMemory',
        'available_physical_memory': 'AvailablePhysicalMemory',
        'os_build_version': 'OSBuildVersion',
        'host_name': 'HostName',
        'local_host_name': 'LocalHostName',
        'security_patch_date': 'SecurityPatchDate',
        'system_update_received_time': 'SystemUpdateReceivedTime',
        'is_security_patch_update': 'IsSecurityPatchUpdate',
        'device_manufacturer_id': 'DeviceManufacturerId',
        'device_network_info': 'DeviceNetworkInfo',
        'device_cellular_network_info': 'DeviceCellularNetworkInfo',
        'enrollment_user_uuid': 'EnrollmentUserUuid',
        'managed_by': 'ManagedBy',
        'wifi_ssid': 'WifiSsid',
        'dep_token_source': 'DepTokenSource',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, eas_ids=None, time_zone=None, udid=None, serial_number=None, mac_address=None, imei=None, eas_id=None, asset_number=None, device_friendly_name=None, device_reported_name=None, location_group_id=None, location_group_name=None, user_id=None, user_name=None, data_protection_status=None, user_email_address=None, ownership=None, platform_id=None, platform=None, model_id=None, model=None, operating_system=None, phone_number=None, last_seen=None, enrollment_status=None, compliance_status=None, compromised_status=None, last_enrolled_on=None, last_compliance_check_on=None, last_compromised_check_on=None, compliance_summary=None, is_supervised=None, device_mcc=None, is_remote_management_enabled=None, data_encryption_yn=None, ac_line_status=None, virtual_memory=None, oem_info=None, device_capacity=None, available_device_capacity=None, last_system_sample_time=None, is_device_dnd_enabled=None, is_device_locator_enabled=None, is_cloud_backup_enabled=None, is_activation_lock_enabled=None, is_network_tethered=None, battery_level=None, is_roaming=None, last_network_lan_sample_time=None, last_bluetooth_sample_time=None, system_integrity_protection_enabled=None, processor_architecture=None, user_approved_enrollment=None, enrolled_via_dep=None, total_physical_memory=None, available_physical_memory=None, os_build_version=None, host_name=None, local_host_name=None, security_patch_date=None, system_update_received_time=None, is_security_patch_update=None, device_manufacturer_id=None, device_network_info=None, device_cellular_network_info=None, enrollment_user_uuid=None, managed_by=None, wifi_ssid=None, dep_token_source=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceExtended - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._eas_ids = None
        self._time_zone = None
        self._udid = None
        self._serial_number = None
        self._mac_address = None
        self._imei = None
        self._eas_id = None
        self._asset_number = None
        self._device_friendly_name = None
        self._device_reported_name = None
        self._location_group_id = None
        self._location_group_name = None
        self._user_id = None
        self._user_name = None
        self._data_protection_status = None
        self._user_email_address = None
        self._ownership = None
        self._platform_id = None
        self._platform = None
        self._model_id = None
        self._model = None
        self._operating_system = None
        self._phone_number = None
        self._last_seen = None
        self._enrollment_status = None
        self._compliance_status = None
        self._compromised_status = None
        self._last_enrolled_on = None
        self._last_compliance_check_on = None
        self._last_compromised_check_on = None
        self._compliance_summary = None
        self._is_supervised = None
        self._device_mcc = None
        self._is_remote_management_enabled = None
        self._data_encryption_yn = None
        self._ac_line_status = None
        self._virtual_memory = None
        self._oem_info = None
        self._device_capacity = None
        self._available_device_capacity = None
        self._last_system_sample_time = None
        self._is_device_dnd_enabled = None
        self._is_device_locator_enabled = None
        self._is_cloud_backup_enabled = None
        self._is_activation_lock_enabled = None
        self._is_network_tethered = None
        self._battery_level = None
        self._is_roaming = None
        self._last_network_lan_sample_time = None
        self._last_bluetooth_sample_time = None
        self._system_integrity_protection_enabled = None
        self._processor_architecture = None
        self._user_approved_enrollment = None
        self._enrolled_via_dep = None
        self._total_physical_memory = None
        self._available_physical_memory = None
        self._os_build_version = None
        self._host_name = None
        self._local_host_name = None
        self._security_patch_date = None
        self._system_update_received_time = None
        self._is_security_patch_update = None
        self._device_manufacturer_id = None
        self._device_network_info = None
        self._device_cellular_network_info = None
        self._enrollment_user_uuid = None
        self._managed_by = None
        self._wifi_ssid = None
        self._dep_token_source = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if eas_ids is not None:
            self.eas_ids = eas_ids
        if time_zone is not None:
            self.time_zone = time_zone
        if udid is not None:
            self.udid = udid
        if serial_number is not None:
            self.serial_number = serial_number
        if mac_address is not None:
            self.mac_address = mac_address
        if imei is not None:
            self.imei = imei
        if eas_id is not None:
            self.eas_id = eas_id
        if asset_number is not None:
            self.asset_number = asset_number
        if device_friendly_name is not None:
            self.device_friendly_name = device_friendly_name
        if device_reported_name is not None:
            self.device_reported_name = device_reported_name
        if location_group_id is not None:
            self.location_group_id = location_group_id
        if location_group_name is not None:
            self.location_group_name = location_group_name
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if data_protection_status is not None:
            self.data_protection_status = data_protection_status
        if user_email_address is not None:
            self.user_email_address = user_email_address
        if ownership is not None:
            self.ownership = ownership
        if platform_id is not None:
            self.platform_id = platform_id
        if platform is not None:
            self.platform = platform
        if model_id is not None:
            self.model_id = model_id
        if model is not None:
            self.model = model
        if operating_system is not None:
            self.operating_system = operating_system
        if phone_number is not None:
            self.phone_number = phone_number
        if last_seen is not None:
            self.last_seen = last_seen
        if enrollment_status is not None:
            self.enrollment_status = enrollment_status
        if compliance_status is not None:
            self.compliance_status = compliance_status
        if compromised_status is not None:
            self.compromised_status = compromised_status
        if last_enrolled_on is not None:
            self.last_enrolled_on = last_enrolled_on
        if last_compliance_check_on is not None:
            self.last_compliance_check_on = last_compliance_check_on
        if last_compromised_check_on is not None:
            self.last_compromised_check_on = last_compromised_check_on
        if compliance_summary is not None:
            self.compliance_summary = compliance_summary
        if is_supervised is not None:
            self.is_supervised = is_supervised
        if device_mcc is not None:
            self.device_mcc = device_mcc
        if is_remote_management_enabled is not None:
            self.is_remote_management_enabled = is_remote_management_enabled
        if data_encryption_yn is not None:
            self.data_encryption_yn = data_encryption_yn
        if ac_line_status is not None:
            self.ac_line_status = ac_line_status
        if virtual_memory is not None:
            self.virtual_memory = virtual_memory
        if oem_info is not None:
            self.oem_info = oem_info
        if device_capacity is not None:
            self.device_capacity = device_capacity
        if available_device_capacity is not None:
            self.available_device_capacity = available_device_capacity
        if last_system_sample_time is not None:
            self.last_system_sample_time = last_system_sample_time
        if is_device_dnd_enabled is not None:
            self.is_device_dnd_enabled = is_device_dnd_enabled
        if is_device_locator_enabled is not None:
            self.is_device_locator_enabled = is_device_locator_enabled
        if is_cloud_backup_enabled is not None:
            self.is_cloud_backup_enabled = is_cloud_backup_enabled
        if is_activation_lock_enabled is not None:
            self.is_activation_lock_enabled = is_activation_lock_enabled
        if is_network_tethered is not None:
            self.is_network_tethered = is_network_tethered
        if battery_level is not None:
            self.battery_level = battery_level
        if is_roaming is not None:
            self.is_roaming = is_roaming
        if last_network_lan_sample_time is not None:
            self.last_network_lan_sample_time = last_network_lan_sample_time
        if last_bluetooth_sample_time is not None:
            self.last_bluetooth_sample_time = last_bluetooth_sample_time
        if system_integrity_protection_enabled is not None:
            self.system_integrity_protection_enabled = system_integrity_protection_enabled
        if processor_architecture is not None:
            self.processor_architecture = processor_architecture
        if user_approved_enrollment is not None:
            self.user_approved_enrollment = user_approved_enrollment
        if enrolled_via_dep is not None:
            self.enrolled_via_dep = enrolled_via_dep
        if total_physical_memory is not None:
            self.total_physical_memory = total_physical_memory
        if available_physical_memory is not None:
            self.available_physical_memory = available_physical_memory
        if os_build_version is not None:
            self.os_build_version = os_build_version
        if host_name is not None:
            self.host_name = host_name
        if local_host_name is not None:
            self.local_host_name = local_host_name
        if security_patch_date is not None:
            self.security_patch_date = security_patch_date
        if system_update_received_time is not None:
            self.system_update_received_time = system_update_received_time
        if is_security_patch_update is not None:
            self.is_security_patch_update = is_security_patch_update
        if device_manufacturer_id is not None:
            self.device_manufacturer_id = device_manufacturer_id
        if device_network_info is not None:
            self.device_network_info = device_network_info
        if device_cellular_network_info is not None:
            self.device_cellular_network_info = device_cellular_network_info
        if enrollment_user_uuid is not None:
            self.enrollment_user_uuid = enrollment_user_uuid
        if managed_by is not None:
            self.managed_by = managed_by
        if wifi_ssid is not None:
            self.wifi_ssid = wifi_ssid
        if dep_token_source is not None:
            self.dep_token_source = dep_token_source
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def eas_ids(self):
        """Gets the eas_ids of this DeviceExtended.  # noqa: E501

        Gets or sets unique identifiers for devices mail client.  # noqa: E501

        :return: The eas_ids of this DeviceExtended.  # noqa: E501
        :rtype: EasIds_
        """
        return self._eas_ids

    @eas_ids.setter
    def eas_ids(self, eas_ids):
        """Sets the eas_ids of this DeviceExtended.

        Gets or sets unique identifiers for devices mail client.  # noqa: E501

        :param eas_ids: The eas_ids of this DeviceExtended.  # noqa: E501
        :type: EasIds_
        """

        self._eas_ids = eas_ids

    @property
    def time_zone(self):
        """Gets the time_zone of this DeviceExtended.  # noqa: E501

        Gets or sets the time zone.  # noqa: E501

        :return: The time_zone of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this DeviceExtended.

        Gets or sets the time zone.  # noqa: E501

        :param time_zone: The time_zone of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def udid(self):
        """Gets the udid of this DeviceExtended.  # noqa: E501

        Gets or sets the device's unique identifier.  # noqa: E501

        :return: The udid of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this DeviceExtended.

        Gets or sets the device's unique identifier.  # noqa: E501

        :param udid: The udid of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._udid = udid

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceExtended.  # noqa: E501

        Gets or sets the serial number reported by the device.  # noqa: E501

        :return: The serial_number of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceExtended.

        Gets or sets the serial number reported by the device.  # noqa: E501

        :param serial_number: The serial_number of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def mac_address(self):
        """Gets the mac_address of this DeviceExtended.  # noqa: E501

        Gets or sets macaddress of the device.  # noqa: E501

        :return: The mac_address of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this DeviceExtended.

        Gets or sets macaddress of the device.  # noqa: E501

        :param mac_address: The mac_address of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def imei(self):
        """Gets the imei of this DeviceExtended.  # noqa: E501

        Gets or sets the device IMEI hardware identifier.  # noqa: E501

        :return: The imei of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this DeviceExtended.

        Gets or sets the device IMEI hardware identifier.  # noqa: E501

        :param imei: The imei of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._imei = imei

    @property
    def eas_id(self):
        """Gets the eas_id of this DeviceExtended.  # noqa: E501

        Gets or sets the device's Eas Id.  # noqa: E501

        :return: The eas_id of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._eas_id

    @eas_id.setter
    def eas_id(self, eas_id):
        """Sets the eas_id of this DeviceExtended.

        Gets or sets the device's Eas Id.  # noqa: E501

        :param eas_id: The eas_id of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._eas_id = eas_id

    @property
    def asset_number(self):
        """Gets the asset_number of this DeviceExtended.  # noqa: E501

        Gets or sets the device asset number.  # noqa: E501

        :return: The asset_number of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this DeviceExtended.

        Gets or sets the device asset number.  # noqa: E501

        :param asset_number: The asset_number of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._asset_number = asset_number

    @property
    def device_friendly_name(self):
        """Gets the device_friendly_name of this DeviceExtended.  # noqa: E501

        Gets or sets the friendly name.  # noqa: E501

        :return: The device_friendly_name of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._device_friendly_name

    @device_friendly_name.setter
    def device_friendly_name(self, device_friendly_name):
        """Sets the device_friendly_name of this DeviceExtended.

        Gets or sets the friendly name.  # noqa: E501

        :param device_friendly_name: The device_friendly_name of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._device_friendly_name = device_friendly_name

    @property
    def device_reported_name(self):
        """Gets the device_reported_name of this DeviceExtended.  # noqa: E501

        Gets or sets the Device reported name.  # noqa: E501

        :return: The device_reported_name of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._device_reported_name

    @device_reported_name.setter
    def device_reported_name(self, device_reported_name):
        """Sets the device_reported_name of this DeviceExtended.

        Gets or sets the Device reported name.  # noqa: E501

        :param device_reported_name: The device_reported_name of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._device_reported_name = device_reported_name

    @property
    def location_group_id(self):
        """Gets the location_group_id of this DeviceExtended.  # noqa: E501

        Gets or sets link to the location group the device belongs to.  # noqa: E501

        :return: The location_group_id of this DeviceExtended.  # noqa: E501
        :rtype: EntityReference_
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this DeviceExtended.

        Gets or sets link to the location group the device belongs to.  # noqa: E501

        :param location_group_id: The location_group_id of this DeviceExtended.  # noqa: E501
        :type: EntityReference_
        """

        self._location_group_id = location_group_id

    @property
    def location_group_name(self):
        """Gets the location_group_name of this DeviceExtended.  # noqa: E501

        Gets or sets the location group name.  # noqa: E501

        :return: The location_group_name of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._location_group_name

    @location_group_name.setter
    def location_group_name(self, location_group_name):
        """Sets the location_group_name of this DeviceExtended.

        Gets or sets the location group name.  # noqa: E501

        :param location_group_name: The location_group_name of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._location_group_name = location_group_name

    @property
    def user_id(self):
        """Gets the user_id of this DeviceExtended.  # noqa: E501

        Gets or sets the user the device is assigned to.  # noqa: E501

        :return: The user_id of this DeviceExtended.  # noqa: E501
        :rtype: EntityReference_
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DeviceExtended.

        Gets or sets the user the device is assigned to.  # noqa: E501

        :param user_id: The user_id of this DeviceExtended.  # noqa: E501
        :type: EntityReference_
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this DeviceExtended.  # noqa: E501

        Gets or sets the user name the device is assigned to.  # noqa: E501

        :return: The user_name of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this DeviceExtended.

        Gets or sets the user name the device is assigned to.  # noqa: E501

        :param user_name: The user_name of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def data_protection_status(self):
        """Gets the data_protection_status of this DeviceExtended.  # noqa: E501

        Gets or sets data protection status of the user the device belongs to.  # noqa: E501

        :return: The data_protection_status of this DeviceExtended.  # noqa: E501
        :rtype: int
        """
        return self._data_protection_status

    @data_protection_status.setter
    def data_protection_status(self, data_protection_status):
        """Sets the data_protection_status of this DeviceExtended.

        Gets or sets data protection status of the user the device belongs to.  # noqa: E501

        :param data_protection_status: The data_protection_status of this DeviceExtended.  # noqa: E501
        :type: int
        """

        self._data_protection_status = data_protection_status

    @property
    def user_email_address(self):
        """Gets the user_email_address of this DeviceExtended.  # noqa: E501

        Gets or sets email Address of the User.  # noqa: E501

        :return: The user_email_address of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._user_email_address

    @user_email_address.setter
    def user_email_address(self, user_email_address):
        """Sets the user_email_address of this DeviceExtended.

        Gets or sets email Address of the User.  # noqa: E501

        :param user_email_address: The user_email_address of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._user_email_address = user_email_address

    @property
    def ownership(self):
        """Gets the ownership of this DeviceExtended.  # noqa: E501

        Gets or sets the device ownership status. I.e. Corporate, Employee, Shared.  # noqa: E501

        :return: The ownership of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this DeviceExtended.

        Gets or sets the device ownership status. I.e. Corporate, Employee, Shared.  # noqa: E501

        :param ownership: The ownership of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._ownership = ownership

    @property
    def platform_id(self):
        """Gets the platform_id of this DeviceExtended.  # noqa: E501

        Gets or sets the device platform id.  # noqa: E501

        :return: The platform_id of this DeviceExtended.  # noqa: E501
        :rtype: EntityReference_
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this DeviceExtended.

        Gets or sets the device platform id.  # noqa: E501

        :param platform_id: The platform_id of this DeviceExtended.  # noqa: E501
        :type: EntityReference_
        """

        self._platform_id = platform_id

    @property
    def platform(self):
        """Gets the platform of this DeviceExtended.  # noqa: E501

        Gets or sets the platform. E.g.: iOS, BlackBerry, Android, etc..  # noqa: E501

        :return: The platform of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeviceExtended.

        Gets or sets the platform. E.g.: iOS, BlackBerry, Android, etc..  # noqa: E501

        :param platform: The platform of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def model_id(self):
        """Gets the model_id of this DeviceExtended.  # noqa: E501

        Gets or sets the device model id.  # noqa: E501

        :return: The model_id of this DeviceExtended.  # noqa: E501
        :rtype: EntityReference_
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this DeviceExtended.

        Gets or sets the device model id.  # noqa: E501

        :param model_id: The model_id of this DeviceExtended.  # noqa: E501
        :type: EntityReference_
        """

        self._model_id = model_id

    @property
    def model(self):
        """Gets the model of this DeviceExtended.  # noqa: E501

        Gets or sets the device model.  # noqa: E501

        :return: The model of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceExtended.

        Gets or sets the device model.  # noqa: E501

        :param model: The model of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def operating_system(self):
        """Gets the operating_system of this DeviceExtended.  # noqa: E501

        Gets or sets the operating system including version.  # noqa: E501

        :return: The operating_system of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this DeviceExtended.

        Gets or sets the operating system including version.  # noqa: E501

        :param operating_system: The operating_system of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def phone_number(self):
        """Gets the phone_number of this DeviceExtended.  # noqa: E501

        Gets or sets phone number, if available.  # noqa: E501

        :return: The phone_number of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this DeviceExtended.

        Gets or sets phone number, if available.  # noqa: E501

        :param phone_number: The phone_number of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def last_seen(self):
        """Gets the last_seen of this DeviceExtended.  # noqa: E501

        Gets or sets the time the device last reported any status with AirWatch.  # noqa: E501

        :return: The last_seen of this DeviceExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this DeviceExtended.

        Gets or sets the time the device last reported any status with AirWatch.  # noqa: E501

        :param last_seen: The last_seen of this DeviceExtended.  # noqa: E501
        :type: datetime
        """

        self._last_seen = last_seen

    @property
    def enrollment_status(self):
        """Gets the enrollment_status of this DeviceExtended.  # noqa: E501

        Gets or sets gives Enrollment status of the device.  # noqa: E501

        :return: The enrollment_status of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_status

    @enrollment_status.setter
    def enrollment_status(self, enrollment_status):
        """Sets the enrollment_status of this DeviceExtended.

        Gets or sets gives Enrollment status of the device.  # noqa: E501

        :param enrollment_status: The enrollment_status of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._enrollment_status = enrollment_status

    @property
    def compliance_status(self):
        """Gets the compliance_status of this DeviceExtended.  # noqa: E501

        Gets or sets this gives Compliance status of the device.  # noqa: E501

        :return: The compliance_status of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        """Sets the compliance_status of this DeviceExtended.

        Gets or sets this gives Compliance status of the device.  # noqa: E501

        :param compliance_status: The compliance_status of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._compliance_status = compliance_status

    @property
    def compromised_status(self):
        """Gets the compromised_status of this DeviceExtended.  # noqa: E501

        Gets or sets a value indicating whether this gives Compromised status of the device. Value is true if device is compromised otherwise false.  # noqa: E501

        :return: The compromised_status of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._compromised_status

    @compromised_status.setter
    def compromised_status(self, compromised_status):
        """Sets the compromised_status of this DeviceExtended.

        Gets or sets a value indicating whether this gives Compromised status of the device. Value is true if device is compromised otherwise false.  # noqa: E501

        :param compromised_status: The compromised_status of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._compromised_status = compromised_status

    @property
    def last_enrolled_on(self):
        """Gets the last_enrolled_on of this DeviceExtended.  # noqa: E501

        Gets or sets this gives the Date-Time of last enrollment date.  # noqa: E501

        :return: The last_enrolled_on of this DeviceExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._last_enrolled_on

    @last_enrolled_on.setter
    def last_enrolled_on(self, last_enrolled_on):
        """Sets the last_enrolled_on of this DeviceExtended.

        Gets or sets this gives the Date-Time of last enrollment date.  # noqa: E501

        :param last_enrolled_on: The last_enrolled_on of this DeviceExtended.  # noqa: E501
        :type: datetime
        """

        self._last_enrolled_on = last_enrolled_on

    @property
    def last_compliance_check_on(self):
        """Gets the last_compliance_check_on of this DeviceExtended.  # noqa: E501

        Gets or sets this gives the Date-time of when the last compliance check was performed.  # noqa: E501

        :return: The last_compliance_check_on of this DeviceExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._last_compliance_check_on

    @last_compliance_check_on.setter
    def last_compliance_check_on(self, last_compliance_check_on):
        """Sets the last_compliance_check_on of this DeviceExtended.

        Gets or sets this gives the Date-time of when the last compliance check was performed.  # noqa: E501

        :param last_compliance_check_on: The last_compliance_check_on of this DeviceExtended.  # noqa: E501
        :type: datetime
        """

        self._last_compliance_check_on = last_compliance_check_on

    @property
    def last_compromised_check_on(self):
        """Gets the last_compromised_check_on of this DeviceExtended.  # noqa: E501

        Gets or sets it gives the Date-time of when the last Compromised data was received.  # noqa: E501

        :return: The last_compromised_check_on of this DeviceExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._last_compromised_check_on

    @last_compromised_check_on.setter
    def last_compromised_check_on(self, last_compromised_check_on):
        """Sets the last_compromised_check_on of this DeviceExtended.

        Gets or sets it gives the Date-time of when the last Compromised data was received.  # noqa: E501

        :param last_compromised_check_on: The last_compromised_check_on of this DeviceExtended.  # noqa: E501
        :type: datetime
        """

        self._last_compromised_check_on = last_compromised_check_on

    @property
    def compliance_summary(self):
        """Gets the compliance_summary of this DeviceExtended.  # noqa: E501

        Gets or sets compliance details of the device.  # noqa: E501

        :return: The compliance_summary of this DeviceExtended.  # noqa: E501
        :rtype: ComplianceSummary_
        """
        return self._compliance_summary

    @compliance_summary.setter
    def compliance_summary(self, compliance_summary):
        """Sets the compliance_summary of this DeviceExtended.

        Gets or sets compliance details of the device.  # noqa: E501

        :param compliance_summary: The compliance_summary of this DeviceExtended.  # noqa: E501
        :type: ComplianceSummary_
        """

        self._compliance_summary = compliance_summary

    @property
    def is_supervised(self):
        """Gets the is_supervised of this DeviceExtended.  # noqa: E501

        Gets or sets a value indicating whether this gives information about whether the device is supervised or not.  # noqa: E501

        :return: The is_supervised of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._is_supervised

    @is_supervised.setter
    def is_supervised(self, is_supervised):
        """Sets the is_supervised of this DeviceExtended.

        Gets or sets a value indicating whether this gives information about whether the device is supervised or not.  # noqa: E501

        :param is_supervised: The is_supervised of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._is_supervised = is_supervised

    @property
    def device_mcc(self):
        """Gets the device_mcc of this DeviceExtended.  # noqa: E501

        Gets or sets information about Device Mobile Country Code i.e.,SIM and Current Mobile Country Code.  # noqa: E501

        :return: The device_mcc of this DeviceExtended.  # noqa: E501
        :rtype: DeviceMcc_
        """
        return self._device_mcc

    @device_mcc.setter
    def device_mcc(self, device_mcc):
        """Sets the device_mcc of this DeviceExtended.

        Gets or sets information about Device Mobile Country Code i.e.,SIM and Current Mobile Country Code.  # noqa: E501

        :param device_mcc: The device_mcc of this DeviceExtended.  # noqa: E501
        :type: DeviceMcc_
        """

        self._device_mcc = device_mcc

    @property
    def is_remote_management_enabled(self):
        """Gets the is_remote_management_enabled of this DeviceExtended.  # noqa: E501

        Gets or sets flag which indicates whether Remote Management[MotoRC] is enabled in Device or not.  # noqa: E501

        :return: The is_remote_management_enabled of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._is_remote_management_enabled

    @is_remote_management_enabled.setter
    def is_remote_management_enabled(self, is_remote_management_enabled):
        """Sets the is_remote_management_enabled of this DeviceExtended.

        Gets or sets flag which indicates whether Remote Management[MotoRC] is enabled in Device or not.  # noqa: E501

        :param is_remote_management_enabled: The is_remote_management_enabled of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._is_remote_management_enabled = is_remote_management_enabled

    @property
    def data_encryption_yn(self):
        """Gets the data_encryption_yn of this DeviceExtended.  # noqa: E501

        Gets or sets whether there is data protection enabled or not.  # noqa: E501

        :return: The data_encryption_yn of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._data_encryption_yn

    @data_encryption_yn.setter
    def data_encryption_yn(self, data_encryption_yn):
        """Sets the data_encryption_yn of this DeviceExtended.

        Gets or sets whether there is data protection enabled or not.  # noqa: E501

        :param data_encryption_yn: The data_encryption_yn of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._data_encryption_yn = data_encryption_yn

    @property
    def ac_line_status(self):
        """Gets the ac_line_status of this DeviceExtended.  # noqa: E501

        Gets or sets power Status.  <para>0 indicates Battery. </para><para>1 indicates AC Power.</para>  # noqa: E501

        :return: The ac_line_status of this DeviceExtended.  # noqa: E501
        :rtype: int
        """
        return self._ac_line_status

    @ac_line_status.setter
    def ac_line_status(self, ac_line_status):
        """Sets the ac_line_status of this DeviceExtended.

        Gets or sets power Status.  <para>0 indicates Battery. </para><para>1 indicates AC Power.</para>  # noqa: E501

        :param ac_line_status: The ac_line_status of this DeviceExtended.  # noqa: E501
        :type: int
        """

        self._ac_line_status = ac_line_status

    @property
    def virtual_memory(self):
        """Gets the virtual_memory of this DeviceExtended.  # noqa: E501

        Gets or sets virtual Memory.  # noqa: E501

        :return: The virtual_memory of this DeviceExtended.  # noqa: E501
        :rtype: int
        """
        return self._virtual_memory

    @virtual_memory.setter
    def virtual_memory(self, virtual_memory):
        """Sets the virtual_memory of this DeviceExtended.

        Gets or sets virtual Memory.  # noqa: E501

        :param virtual_memory: The virtual_memory of this DeviceExtended.  # noqa: E501
        :type: int
        """

        self._virtual_memory = virtual_memory

    @property
    def oem_info(self):
        """Gets the oem_info of this DeviceExtended.  # noqa: E501

        Gets or sets OEM Info of the device.  # noqa: E501

        :return: The oem_info of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._oem_info

    @oem_info.setter
    def oem_info(self, oem_info):
        """Sets the oem_info of this DeviceExtended.

        Gets or sets OEM Info of the device.  # noqa: E501

        :param oem_info: The oem_info of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._oem_info = oem_info

    @property
    def device_capacity(self):
        """Gets the device_capacity of this DeviceExtended.  # noqa: E501

        Gets or sets total Device Capacity of the device.  # noqa: E501

        :return: The device_capacity of this DeviceExtended.  # noqa: E501
        :rtype: float
        """
        return self._device_capacity

    @device_capacity.setter
    def device_capacity(self, device_capacity):
        """Sets the device_capacity of this DeviceExtended.

        Gets or sets total Device Capacity of the device.  # noqa: E501

        :param device_capacity: The device_capacity of this DeviceExtended.  # noqa: E501
        :type: float
        """

        self._device_capacity = device_capacity

    @property
    def available_device_capacity(self):
        """Gets the available_device_capacity of this DeviceExtended.  # noqa: E501

        Gets or sets available Device Capacity of the device.  # noqa: E501

        :return: The available_device_capacity of this DeviceExtended.  # noqa: E501
        :rtype: float
        """
        return self._available_device_capacity

    @available_device_capacity.setter
    def available_device_capacity(self, available_device_capacity):
        """Sets the available_device_capacity of this DeviceExtended.

        Gets or sets available Device Capacity of the device.  # noqa: E501

        :param available_device_capacity: The available_device_capacity of this DeviceExtended.  # noqa: E501
        :type: float
        """

        self._available_device_capacity = available_device_capacity

    @property
    def last_system_sample_time(self):
        """Gets the last_system_sample_time of this DeviceExtended.  # noqa: E501

        Gets or sets last System Sample time of the device.  # noqa: E501

        :return: The last_system_sample_time of this DeviceExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._last_system_sample_time

    @last_system_sample_time.setter
    def last_system_sample_time(self, last_system_sample_time):
        """Sets the last_system_sample_time of this DeviceExtended.

        Gets or sets last System Sample time of the device.  # noqa: E501

        :param last_system_sample_time: The last_system_sample_time of this DeviceExtended.  # noqa: E501
        :type: datetime
        """

        self._last_system_sample_time = last_system_sample_time

    @property
    def is_device_dnd_enabled(self):
        """Gets the is_device_dnd_enabled of this DeviceExtended.  # noqa: E501

        Gets or sets a value indicating whether this gives information about whether the device is in do not disturb mode or not.  # noqa: E501

        :return: The is_device_dnd_enabled of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._is_device_dnd_enabled

    @is_device_dnd_enabled.setter
    def is_device_dnd_enabled(self, is_device_dnd_enabled):
        """Sets the is_device_dnd_enabled of this DeviceExtended.

        Gets or sets a value indicating whether this gives information about whether the device is in do not disturb mode or not.  # noqa: E501

        :param is_device_dnd_enabled: The is_device_dnd_enabled of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._is_device_dnd_enabled = is_device_dnd_enabled

    @property
    def is_device_locator_enabled(self):
        """Gets the is_device_locator_enabled of this DeviceExtended.  # noqa: E501

        Gets or sets a value indicating whether this gives information about whether the device locator is enabled or not.  # noqa: E501

        :return: The is_device_locator_enabled of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._is_device_locator_enabled

    @is_device_locator_enabled.setter
    def is_device_locator_enabled(self, is_device_locator_enabled):
        """Sets the is_device_locator_enabled of this DeviceExtended.

        Gets or sets a value indicating whether this gives information about whether the device locator is enabled or not.  # noqa: E501

        :param is_device_locator_enabled: The is_device_locator_enabled of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._is_device_locator_enabled = is_device_locator_enabled

    @property
    def is_cloud_backup_enabled(self):
        """Gets the is_cloud_backup_enabled of this DeviceExtended.  # noqa: E501

        Gets or sets a value indicating whether this gives information about whether the device cloud backup is enabled or not.  # noqa: E501

        :return: The is_cloud_backup_enabled of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._is_cloud_backup_enabled

    @is_cloud_backup_enabled.setter
    def is_cloud_backup_enabled(self, is_cloud_backup_enabled):
        """Sets the is_cloud_backup_enabled of this DeviceExtended.

        Gets or sets a value indicating whether this gives information about whether the device cloud backup is enabled or not.  # noqa: E501

        :param is_cloud_backup_enabled: The is_cloud_backup_enabled of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._is_cloud_backup_enabled = is_cloud_backup_enabled

    @property
    def is_activation_lock_enabled(self):
        """Gets the is_activation_lock_enabled of this DeviceExtended.  # noqa: E501

        Gets or sets a value indicating whether this gives information about whether the device activation lock is enabled or not.  # noqa: E501

        :return: The is_activation_lock_enabled of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._is_activation_lock_enabled

    @is_activation_lock_enabled.setter
    def is_activation_lock_enabled(self, is_activation_lock_enabled):
        """Sets the is_activation_lock_enabled of this DeviceExtended.

        Gets or sets a value indicating whether this gives information about whether the device activation lock is enabled or not.  # noqa: E501

        :param is_activation_lock_enabled: The is_activation_lock_enabled of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._is_activation_lock_enabled = is_activation_lock_enabled

    @property
    def is_network_tethered(self):
        """Gets the is_network_tethered of this DeviceExtended.  # noqa: E501

        Gets or sets a value indicating whether this gives information about whether the iOS device is network tethered or not.  # noqa: E501

        :return: The is_network_tethered of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._is_network_tethered

    @is_network_tethered.setter
    def is_network_tethered(self, is_network_tethered):
        """Sets the is_network_tethered of this DeviceExtended.

        Gets or sets a value indicating whether this gives information about whether the iOS device is network tethered or not.  # noqa: E501

        :param is_network_tethered: The is_network_tethered of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._is_network_tethered = is_network_tethered

    @property
    def battery_level(self):
        """Gets the battery_level of this DeviceExtended.  # noqa: E501

        Gets or sets this gives information about battery level of the iOS device.  # noqa: E501

        :return: The battery_level of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._battery_level

    @battery_level.setter
    def battery_level(self, battery_level):
        """Sets the battery_level of this DeviceExtended.

        Gets or sets this gives information about battery level of the iOS device.  # noqa: E501

        :param battery_level: The battery_level of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._battery_level = battery_level

    @property
    def is_roaming(self):
        """Gets the is_roaming of this DeviceExtended.  # noqa: E501

        Gets or sets a value indicating whether this gives information about roaming status of the device.  # noqa: E501

        :return: The is_roaming of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._is_roaming

    @is_roaming.setter
    def is_roaming(self, is_roaming):
        """Sets the is_roaming of this DeviceExtended.

        Gets or sets a value indicating whether this gives information about roaming status of the device.  # noqa: E501

        :param is_roaming: The is_roaming of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._is_roaming = is_roaming

    @property
    def last_network_lan_sample_time(self):
        """Gets the last_network_lan_sample_time of this DeviceExtended.  # noqa: E501

        Gets or sets last Network LAN Sample time of the device.  # noqa: E501

        :return: The last_network_lan_sample_time of this DeviceExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._last_network_lan_sample_time

    @last_network_lan_sample_time.setter
    def last_network_lan_sample_time(self, last_network_lan_sample_time):
        """Sets the last_network_lan_sample_time of this DeviceExtended.

        Gets or sets last Network LAN Sample time of the device.  # noqa: E501

        :param last_network_lan_sample_time: The last_network_lan_sample_time of this DeviceExtended.  # noqa: E501
        :type: datetime
        """

        self._last_network_lan_sample_time = last_network_lan_sample_time

    @property
    def last_bluetooth_sample_time(self):
        """Gets the last_bluetooth_sample_time of this DeviceExtended.  # noqa: E501

        Gets or sets last Bluetooth Sample time of the device.  # noqa: E501

        :return: The last_bluetooth_sample_time of this DeviceExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._last_bluetooth_sample_time

    @last_bluetooth_sample_time.setter
    def last_bluetooth_sample_time(self, last_bluetooth_sample_time):
        """Sets the last_bluetooth_sample_time of this DeviceExtended.

        Gets or sets last Bluetooth Sample time of the device.  # noqa: E501

        :param last_bluetooth_sample_time: The last_bluetooth_sample_time of this DeviceExtended.  # noqa: E501
        :type: datetime
        """

        self._last_bluetooth_sample_time = last_bluetooth_sample_time

    @property
    def system_integrity_protection_enabled(self):
        """Gets the system_integrity_protection_enabled of this DeviceExtended.  # noqa: E501

        Gets or sets a value indicating whether this gives information about whether system integrity protection is enabled on a macOS device.  # noqa: E501

        :return: The system_integrity_protection_enabled of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._system_integrity_protection_enabled

    @system_integrity_protection_enabled.setter
    def system_integrity_protection_enabled(self, system_integrity_protection_enabled):
        """Sets the system_integrity_protection_enabled of this DeviceExtended.

        Gets or sets a value indicating whether this gives information about whether system integrity protection is enabled on a macOS device.  # noqa: E501

        :param system_integrity_protection_enabled: The system_integrity_protection_enabled of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._system_integrity_protection_enabled = system_integrity_protection_enabled

    @property
    def processor_architecture(self):
        """Gets the processor_architecture of this DeviceExtended.  # noqa: E501

        Gets or sets this gives information about processor Architecure reported by the device.  # noqa: E501

        :return: The processor_architecture of this DeviceExtended.  # noqa: E501
        :rtype: int
        """
        return self._processor_architecture

    @processor_architecture.setter
    def processor_architecture(self, processor_architecture):
        """Sets the processor_architecture of this DeviceExtended.

        Gets or sets this gives information about processor Architecure reported by the device.  # noqa: E501

        :param processor_architecture: The processor_architecture of this DeviceExtended.  # noqa: E501
        :type: int
        """

        self._processor_architecture = processor_architecture

    @property
    def user_approved_enrollment(self):
        """Gets the user_approved_enrollment of this DeviceExtended.  # noqa: E501

        Gets or sets flag to check if user has approved installation of MDM profile.  # noqa: E501

        :return: The user_approved_enrollment of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._user_approved_enrollment

    @user_approved_enrollment.setter
    def user_approved_enrollment(self, user_approved_enrollment):
        """Sets the user_approved_enrollment of this DeviceExtended.

        Gets or sets flag to check if user has approved installation of MDM profile.  # noqa: E501

        :param user_approved_enrollment: The user_approved_enrollment of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._user_approved_enrollment = user_approved_enrollment

    @property
    def enrolled_via_dep(self):
        """Gets the enrolled_via_dep of this DeviceExtended.  # noqa: E501

        Gets or sets this key will tell us if the device is enrolled via DEP.  # noqa: E501

        :return: The enrolled_via_dep of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._enrolled_via_dep

    @enrolled_via_dep.setter
    def enrolled_via_dep(self, enrolled_via_dep):
        """Sets the enrolled_via_dep of this DeviceExtended.

        Gets or sets this key will tell us if the device is enrolled via DEP.  # noqa: E501

        :param enrolled_via_dep: The enrolled_via_dep of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._enrolled_via_dep = enrolled_via_dep

    @property
    def total_physical_memory(self):
        """Gets the total_physical_memory of this DeviceExtended.  # noqa: E501

        Gets or sets total Physical Memory.  # noqa: E501

        :return: The total_physical_memory of this DeviceExtended.  # noqa: E501
        :rtype: int
        """
        return self._total_physical_memory

    @total_physical_memory.setter
    def total_physical_memory(self, total_physical_memory):
        """Sets the total_physical_memory of this DeviceExtended.

        Gets or sets total Physical Memory.  # noqa: E501

        :param total_physical_memory: The total_physical_memory of this DeviceExtended.  # noqa: E501
        :type: int
        """

        self._total_physical_memory = total_physical_memory

    @property
    def available_physical_memory(self):
        """Gets the available_physical_memory of this DeviceExtended.  # noqa: E501

        Gets or sets available Physical Memory.  # noqa: E501

        :return: The available_physical_memory of this DeviceExtended.  # noqa: E501
        :rtype: int
        """
        return self._available_physical_memory

    @available_physical_memory.setter
    def available_physical_memory(self, available_physical_memory):
        """Sets the available_physical_memory of this DeviceExtended.

        Gets or sets available Physical Memory.  # noqa: E501

        :param available_physical_memory: The available_physical_memory of this DeviceExtended.  # noqa: E501
        :type: int
        """

        self._available_physical_memory = available_physical_memory

    @property
    def os_build_version(self):
        """Gets the os_build_version of this DeviceExtended.  # noqa: E501

        Gets or sets build version for the operating system.  # noqa: E501

        :return: The os_build_version of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._os_build_version

    @os_build_version.setter
    def os_build_version(self, os_build_version):
        """Sets the os_build_version of this DeviceExtended.

        Gets or sets build version for the operating system.  # noqa: E501

        :param os_build_version: The os_build_version of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._os_build_version = os_build_version

    @property
    def host_name(self):
        """Gets the host_name of this DeviceExtended.  # noqa: E501

        Gets or sets the host name of the macOS device.  # noqa: E501

        :return: The host_name of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this DeviceExtended.

        Gets or sets the host name of the macOS device.  # noqa: E501

        :param host_name: The host_name of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def local_host_name(self):
        """Gets the local_host_name of this DeviceExtended.  # noqa: E501

        Gets or sets the local host name of the macOS device as reported by Bonjour.  # noqa: E501

        :return: The local_host_name of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._local_host_name

    @local_host_name.setter
    def local_host_name(self, local_host_name):
        """Sets the local_host_name of this DeviceExtended.

        Gets or sets the local host name of the macOS device as reported by Bonjour.  # noqa: E501

        :param local_host_name: The local_host_name of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._local_host_name = local_host_name

    @property
    def security_patch_date(self):
        """Gets the security_patch_date of this DeviceExtended.  # noqa: E501

        Gets or sets the SecurityPatch date received from agent.  # noqa: E501

        :return: The security_patch_date of this DeviceExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._security_patch_date

    @security_patch_date.setter
    def security_patch_date(self, security_patch_date):
        """Sets the security_patch_date of this DeviceExtended.

        Gets or sets the SecurityPatch date received from agent.  # noqa: E501

        :param security_patch_date: The security_patch_date of this DeviceExtended.  # noqa: E501
        :type: datetime
        """

        self._security_patch_date = security_patch_date

    @property
    def system_update_received_time(self):
        """Gets the system_update_received_time of this DeviceExtended.  # noqa: E501

        Gets or sets the pending SystemUpdate received time.  # noqa: E501

        :return: The system_update_received_time of this DeviceExtended.  # noqa: E501
        :rtype: datetime
        """
        return self._system_update_received_time

    @system_update_received_time.setter
    def system_update_received_time(self, system_update_received_time):
        """Sets the system_update_received_time of this DeviceExtended.

        Gets or sets the pending SystemUpdate received time.  # noqa: E501

        :param system_update_received_time: The system_update_received_time of this DeviceExtended.  # noqa: E501
        :type: datetime
        """

        self._system_update_received_time = system_update_received_time

    @property
    def is_security_patch_update(self):
        """Gets the is_security_patch_update of this DeviceExtended.  # noqa: E501

        Gets or sets the IsSecurityPatchUpdate to true when there is a Security Patch update available.  # noqa: E501

        :return: The is_security_patch_update of this DeviceExtended.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_patch_update

    @is_security_patch_update.setter
    def is_security_patch_update(self, is_security_patch_update):
        """Sets the is_security_patch_update of this DeviceExtended.

        Gets or sets the IsSecurityPatchUpdate to true when there is a Security Patch update available.  # noqa: E501

        :param is_security_patch_update: The is_security_patch_update of this DeviceExtended.  # noqa: E501
        :type: bool
        """

        self._is_security_patch_update = is_security_patch_update

    @property
    def device_manufacturer_id(self):
        """Gets the device_manufacturer_id of this DeviceExtended.  # noqa: E501

        Gets or sets the DeviceManufacturerID.  # noqa: E501

        :return: The device_manufacturer_id of this DeviceExtended.  # noqa: E501
        :rtype: int
        """
        return self._device_manufacturer_id

    @device_manufacturer_id.setter
    def device_manufacturer_id(self, device_manufacturer_id):
        """Sets the device_manufacturer_id of this DeviceExtended.

        Gets or sets the DeviceManufacturerID.  # noqa: E501

        :param device_manufacturer_id: The device_manufacturer_id of this DeviceExtended.  # noqa: E501
        :type: int
        """

        self._device_manufacturer_id = device_manufacturer_id

    @property
    def device_network_info(self):
        """Gets the device_network_info of this DeviceExtended.  # noqa: E501

        Gets or sets the device network information of the device.  # noqa: E501

        :return: The device_network_info of this DeviceExtended.  # noqa: E501
        :rtype: list[DeviceNetworkInfo]
        """
        return self._device_network_info

    @device_network_info.setter
    def device_network_info(self, device_network_info):
        """Sets the device_network_info of this DeviceExtended.

        Gets or sets the device network information of the device.  # noqa: E501

        :param device_network_info: The device_network_info of this DeviceExtended.  # noqa: E501
        :type: list[DeviceNetworkInfo]
        """

        self._device_network_info = device_network_info

    @property
    def device_cellular_network_info(self):
        """Gets the device_cellular_network_info of this DeviceExtended.  # noqa: E501

        Gets or sets cellular Network information of the device.  # noqa: E501

        :return: The device_cellular_network_info of this DeviceExtended.  # noqa: E501
        :rtype: list[DeviceCellularInfoModel]
        """
        return self._device_cellular_network_info

    @device_cellular_network_info.setter
    def device_cellular_network_info(self, device_cellular_network_info):
        """Sets the device_cellular_network_info of this DeviceExtended.

        Gets or sets cellular Network information of the device.  # noqa: E501

        :param device_cellular_network_info: The device_cellular_network_info of this DeviceExtended.  # noqa: E501
        :type: list[DeviceCellularInfoModel]
        """

        self._device_cellular_network_info = device_cellular_network_info

    @property
    def enrollment_user_uuid(self):
        """Gets the enrollment_user_uuid of this DeviceExtended.  # noqa: E501

        Gets or sets enrollment user UUID.  # noqa: E501

        :return: The enrollment_user_uuid of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_user_uuid

    @enrollment_user_uuid.setter
    def enrollment_user_uuid(self, enrollment_user_uuid):
        """Sets the enrollment_user_uuid of this DeviceExtended.

        Gets or sets enrollment user UUID.  # noqa: E501

        :param enrollment_user_uuid: The enrollment_user_uuid of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._enrollment_user_uuid = enrollment_user_uuid

    @property
    def managed_by(self):
        """Gets the managed_by of this DeviceExtended.  # noqa: E501

        Gets or sets Device ManagedBy.  # noqa: E501

        :return: The managed_by of this DeviceExtended.  # noqa: E501
        :rtype: int
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this DeviceExtended.

        Gets or sets Device ManagedBy.  # noqa: E501

        :param managed_by: The managed_by of this DeviceExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 998, 999]  # noqa: E501
        if (self._configuration.client_side_validation and
                managed_by not in allowed_values):
            raise ValueError(
                "Invalid value for `managed_by` ({0}), must be one of {1}"  # noqa: E501
                .format(managed_by, allowed_values)
            )

        self._managed_by = managed_by

    @property
    def wifi_ssid(self):
        """Gets the wifi_ssid of this DeviceExtended.  # noqa: E501

        Gets or sets wifi SSID, if available.  # noqa: E501

        :return: The wifi_ssid of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._wifi_ssid

    @wifi_ssid.setter
    def wifi_ssid(self, wifi_ssid):
        """Sets the wifi_ssid of this DeviceExtended.

        Gets or sets wifi SSID, if available.  # noqa: E501

        :param wifi_ssid: The wifi_ssid of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._wifi_ssid = wifi_ssid

    @property
    def dep_token_source(self):
        """Gets the dep_token_source of this DeviceExtended.  # noqa: E501

        Gets or sets DEP token source.  # noqa: E501

        :return: The dep_token_source of this DeviceExtended.  # noqa: E501
        :rtype: int
        """
        return self._dep_token_source

    @dep_token_source.setter
    def dep_token_source(self, dep_token_source):
        """Sets the dep_token_source of this DeviceExtended.

        Gets or sets DEP token source.  # noqa: E501

        :param dep_token_source: The dep_token_source of this DeviceExtended.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                dep_token_source not in allowed_values):
            raise ValueError(
                "Invalid value for `dep_token_source` ({0}), must be one of {1}"  # noqa: E501
                .format(dep_token_source, allowed_values)
            )

        self._dep_token_source = dep_token_source

    @property
    def id(self):
        """Gets the id of this DeviceExtended.  # noqa: E501


        :return: The id of this DeviceExtended.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceExtended.


        :param id: The id of this DeviceExtended.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceExtended.  # noqa: E501


        :return: The uuid of this DeviceExtended.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceExtended.


        :param uuid: The uuid of this DeviceExtended.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceExtended):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceExtended):
            return True

        return self.to_dict() != other.to_dict()
