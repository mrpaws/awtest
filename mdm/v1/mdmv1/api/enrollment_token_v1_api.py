# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class EnrollmentTokenV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def enrollment_token_v1_create_async(self, device_registration_record, og_uuid, **kwargs):  # noqa: E501
        """New - Creates device enrollment token based on registration type  # noqa: E501

        Creates enrollment token for devices with specific registration type like Blacklist or Whitelist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_token_v1_create_async(device_registration_record, og_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnrollmentTokenRequestV1Model device_registration_record: Device registration record to create token with registration type(Required) (required)
        :param str og_uuid: Organization group UUID(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_token_v1_create_async_with_http_info(device_registration_record, og_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_token_v1_create_async_with_http_info(device_registration_record, og_uuid, **kwargs)  # noqa: E501
            return data

    def enrollment_token_v1_create_async_with_http_info(self, device_registration_record, og_uuid, **kwargs):  # noqa: E501
        """New - Creates device enrollment token based on registration type  # noqa: E501

        Creates enrollment token for devices with specific registration type like Blacklist or Whitelist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_token_v1_create_async_with_http_info(device_registration_record, og_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnrollmentTokenRequestV1Model device_registration_record: Device registration record to create token with registration type(Required) (required)
        :param str og_uuid: Organization group UUID(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_registration_record', 'og_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_token_v1_create_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_registration_record' is set
        if self.api_client.client_side_validation and ('device_registration_record' not in params or
                                                       params['device_registration_record'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_registration_record` when calling `enrollment_token_v1_create_async`")  # noqa: E501
        # verify the required parameter 'og_uuid' is set
        if self.api_client.client_side_validation and ('og_uuid' not in params or
                                                       params['og_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `og_uuid` when calling `enrollment_token_v1_create_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'og_uuid' in params:
            path_params['ogUuid'] = params['og_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_registration_record' in params:
            body_params = params['device_registration_record']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{ogUuid}/enrollment-tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_token_v1_delete_by_id_async(self, token_uuid, og_uuid, **kwargs):  # noqa: E501
        """New - Delete device enrollment token  # noqa: E501

        Delete device enrollment token for provided enrollment token UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_token_v1_delete_by_id_async(token_uuid, og_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_uuid: Enrollment token UUID(Required) (required)
        :param str og_uuid: Organization group UUID(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_token_v1_delete_by_id_async_with_http_info(token_uuid, og_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_token_v1_delete_by_id_async_with_http_info(token_uuid, og_uuid, **kwargs)  # noqa: E501
            return data

    def enrollment_token_v1_delete_by_id_async_with_http_info(self, token_uuid, og_uuid, **kwargs):  # noqa: E501
        """New - Delete device enrollment token  # noqa: E501

        Delete device enrollment token for provided enrollment token UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_token_v1_delete_by_id_async_with_http_info(token_uuid, og_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_uuid: Enrollment token UUID(Required) (required)
        :param str og_uuid: Organization group UUID(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_uuid', 'og_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_token_v1_delete_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_uuid' is set
        if self.api_client.client_side_validation and ('token_uuid' not in params or
                                                       params['token_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token_uuid` when calling `enrollment_token_v1_delete_by_id_async`")  # noqa: E501
        # verify the required parameter 'og_uuid' is set
        if self.api_client.client_side_validation and ('og_uuid' not in params or
                                                       params['og_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `og_uuid` when calling `enrollment_token_v1_delete_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token_uuid' in params:
            path_params['tokenUuid'] = params['token_uuid']  # noqa: E501
        if 'og_uuid' in params:
            path_params['ogUuid'] = params['og_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{ogUuid}/enrollment-tokens/{tokenUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_token_v1_get_by_criteria_async(self, og_uuid, **kwargs):  # noqa: E501
        """New - Returns a list of enrollment tokens that match the search criteria  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_token_v1_get_by_criteria_async(og_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str og_uuid: Organization group UUID.(Required) (required)
        :param object serial_number: Serial number of the device.
        :param str imei: IMEI number of the device
        :param str compliance_status: Compliance status of registration.
        :param str enrollment_status: Enrollment status.
        :param str device_type: Device type (Platform)
        :param int page: Specific page number to get. 0 based index.
        :param int page_size: Maximum records per page. Default 500.
        :return: EnrollmentTokenGetByCriteriaResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_token_v1_get_by_criteria_async_with_http_info(og_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_token_v1_get_by_criteria_async_with_http_info(og_uuid, **kwargs)  # noqa: E501
            return data

    def enrollment_token_v1_get_by_criteria_async_with_http_info(self, og_uuid, **kwargs):  # noqa: E501
        """New - Returns a list of enrollment tokens that match the search criteria  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_token_v1_get_by_criteria_async_with_http_info(og_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str og_uuid: Organization group UUID.(Required) (required)
        :param object serial_number: Serial number of the device.
        :param str imei: IMEI number of the device
        :param str compliance_status: Compliance status of registration.
        :param str enrollment_status: Enrollment status.
        :param str device_type: Device type (Platform)
        :param int page: Specific page number to get. 0 based index.
        :param int page_size: Maximum records per page. Default 500.
        :return: EnrollmentTokenGetByCriteriaResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['og_uuid', 'serial_number', 'imei', 'compliance_status', 'enrollment_status', 'device_type', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_token_v1_get_by_criteria_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'og_uuid' is set
        if self.api_client.client_side_validation and ('og_uuid' not in params or
                                                       params['og_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `og_uuid` when calling `enrollment_token_v1_get_by_criteria_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'og_uuid' in params:
            path_params['ogUuid'] = params['og_uuid']  # noqa: E501

        query_params = []
        if 'serial_number' in params:
            query_params.append(('serial_number', params['serial_number']))  # noqa: E501
        if 'imei' in params:
            query_params.append(('imei', params['imei']))  # noqa: E501
        if 'compliance_status' in params:
            query_params.append(('compliance_status', params['compliance_status']))  # noqa: E501
        if 'enrollment_status' in params:
            query_params.append(('enrollment_status', params['enrollment_status']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{ogUuid}/enrollment-tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentTokenGetByCriteriaResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_token_v1_get_by_id_async(self, token_uuid, og_uuid, **kwargs):  # noqa: E501
        """New - Get device enrollment token details  # noqa: E501

        Retrieves device enrollment token for provided enrollment token UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_token_v1_get_by_id_async(token_uuid, og_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_uuid: Enrollment token UUID(Required) (required)
        :param str og_uuid: Organization group UUID(Required) (required)
        :return: EnrollmentTokenResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_token_v1_get_by_id_async_with_http_info(token_uuid, og_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_token_v1_get_by_id_async_with_http_info(token_uuid, og_uuid, **kwargs)  # noqa: E501
            return data

    def enrollment_token_v1_get_by_id_async_with_http_info(self, token_uuid, og_uuid, **kwargs):  # noqa: E501
        """New - Get device enrollment token details  # noqa: E501

        Retrieves device enrollment token for provided enrollment token UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_token_v1_get_by_id_async_with_http_info(token_uuid, og_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token_uuid: Enrollment token UUID(Required) (required)
        :param str og_uuid: Organization group UUID(Required) (required)
        :return: EnrollmentTokenResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token_uuid', 'og_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_token_v1_get_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token_uuid' is set
        if self.api_client.client_side_validation and ('token_uuid' not in params or
                                                       params['token_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token_uuid` when calling `enrollment_token_v1_get_by_id_async`")  # noqa: E501
        # verify the required parameter 'og_uuid' is set
        if self.api_client.client_side_validation and ('og_uuid' not in params or
                                                       params['og_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `og_uuid` when calling `enrollment_token_v1_get_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token_uuid' in params:
            path_params['tokenUuid'] = params['token_uuid']  # noqa: E501
        if 'og_uuid' in params:
            path_params['ogUuid'] = params['og_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{ogUuid}/enrollment-tokens/{tokenUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentTokenResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
