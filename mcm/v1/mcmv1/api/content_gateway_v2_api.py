# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mcmv1.api_client import ApiClient


class ContentGatewayV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def content_gateway_v2_content_gateway_configuration_bulk_delete_async(self, content_gateway_configuration_uuids, **kwargs):  # noqa: E501
        """New - Deletes Content Gateway configurations.  # noqa: E501

        Deletes content gateway configuration in bulk for the provided configuration uuids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_content_gateway_configuration_bulk_delete_async(content_gateway_configuration_uuids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] content_gateway_configuration_uuids: Content gateway configuration uuids to be deleted.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_gateway_v2_content_gateway_configuration_bulk_delete_async_with_http_info(content_gateway_configuration_uuids, **kwargs)  # noqa: E501
        else:
            (data) = self.content_gateway_v2_content_gateway_configuration_bulk_delete_async_with_http_info(content_gateway_configuration_uuids, **kwargs)  # noqa: E501
            return data

    def content_gateway_v2_content_gateway_configuration_bulk_delete_async_with_http_info(self, content_gateway_configuration_uuids, **kwargs):  # noqa: E501
        """New - Deletes Content Gateway configurations.  # noqa: E501

        Deletes content gateway configuration in bulk for the provided configuration uuids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_content_gateway_configuration_bulk_delete_async_with_http_info(content_gateway_configuration_uuids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] content_gateway_configuration_uuids: Content gateway configuration uuids to be deleted.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_gateway_configuration_uuids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_gateway_v2_content_gateway_configuration_bulk_delete_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_gateway_configuration_uuids' is set
        if self.api_client.client_side_validation and ('content_gateway_configuration_uuids' not in params or
                                                       params['content_gateway_configuration_uuids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_gateway_configuration_uuids` when calling `content_gateway_v2_content_gateway_configuration_bulk_delete_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'content_gateway_configuration_uuids' in params:
            body_params = params['content_gateway_configuration_uuids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/V2/groups/contentgateway/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_gateway_v2_content_gateway_configuration_delete_async(self, content_gateway_configuration_uuid, **kwargs):  # noqa: E501
        """New - Deletes a Content Gateway configuration.  # noqa: E501

        It deletes a content gateway configuration for the provided content gateway configuration uuid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_content_gateway_configuration_delete_async(content_gateway_configuration_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_gateway_configuration_uuid: Content gateway configuration uuid to be deleted.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_gateway_v2_content_gateway_configuration_delete_async_with_http_info(content_gateway_configuration_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.content_gateway_v2_content_gateway_configuration_delete_async_with_http_info(content_gateway_configuration_uuid, **kwargs)  # noqa: E501
            return data

    def content_gateway_v2_content_gateway_configuration_delete_async_with_http_info(self, content_gateway_configuration_uuid, **kwargs):  # noqa: E501
        """New - Deletes a Content Gateway configuration.  # noqa: E501

        It deletes a content gateway configuration for the provided content gateway configuration uuid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_content_gateway_configuration_delete_async_with_http_info(content_gateway_configuration_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_gateway_configuration_uuid: Content gateway configuration uuid to be deleted.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_gateway_configuration_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_gateway_v2_content_gateway_configuration_delete_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_gateway_configuration_uuid' is set
        if self.api_client.client_side_validation and ('content_gateway_configuration_uuid' not in params or
                                                       params['content_gateway_configuration_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_gateway_configuration_uuid` when calling `content_gateway_v2_content_gateway_configuration_delete_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_gateway_configuration_uuid' in params:
            path_params['contentGatewayConfigurationUuid'] = params['content_gateway_configuration_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/V2/groups/contentgateway/{contentGatewayConfigurationUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_gateway_v2_create_content_gateway_configuration_async(self, content_gateway_v2_model, **kwargs):  # noqa: E501
        """New - Creates a Content Gateway Configuration  # noqa: E501

        It creates a content gateway configuration for the specific platform for which content gateway needs to be configured  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_create_content_gateway_configuration_async(content_gateway_v2_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContentGatewayV2Model content_gateway_v2_model: Content gateway configuration details to be created(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_gateway_v2_create_content_gateway_configuration_async_with_http_info(content_gateway_v2_model, **kwargs)  # noqa: E501
        else:
            (data) = self.content_gateway_v2_create_content_gateway_configuration_async_with_http_info(content_gateway_v2_model, **kwargs)  # noqa: E501
            return data

    def content_gateway_v2_create_content_gateway_configuration_async_with_http_info(self, content_gateway_v2_model, **kwargs):  # noqa: E501
        """New - Creates a Content Gateway Configuration  # noqa: E501

        It creates a content gateway configuration for the specific platform for which content gateway needs to be configured  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_create_content_gateway_configuration_async_with_http_info(content_gateway_v2_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContentGatewayV2Model content_gateway_v2_model: Content gateway configuration details to be created(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_gateway_v2_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_gateway_v2_create_content_gateway_configuration_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_gateway_v2_model' is set
        if self.api_client.client_side_validation and ('content_gateway_v2_model' not in params or
                                                       params['content_gateway_v2_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_gateway_v2_model` when calling `content_gateway_v2_create_content_gateway_configuration_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'content_gateway_v2_model' in params:
            body_params = params['content_gateway_v2_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/V2/groups/contentgateway', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_gateway_v2_get_content_gateway_configuration_custom_settings_by_id_async(self, content_gateway_configuration_id, password, **kwargs):  # noqa: E501
        """New - Gets the content gateway configurations and the certificate details with custom settings.  # noqa: E501

        It returns content gateway configurations along with the custom settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_get_content_gateway_configuration_custom_settings_by_id_async(content_gateway_configuration_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_gateway_configuration_id: Content gateway configuration id for which content gateway configurations are needed(Required) (required)
        :param EncryptionModel password: A JSON object containing certificate password.(Required) (required)
        :return: list[ContentGatewayCustomSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_gateway_v2_get_content_gateway_configuration_custom_settings_by_id_async_with_http_info(content_gateway_configuration_id, password, **kwargs)  # noqa: E501
        else:
            (data) = self.content_gateway_v2_get_content_gateway_configuration_custom_settings_by_id_async_with_http_info(content_gateway_configuration_id, password, **kwargs)  # noqa: E501
            return data

    def content_gateway_v2_get_content_gateway_configuration_custom_settings_by_id_async_with_http_info(self, content_gateway_configuration_id, password, **kwargs):  # noqa: E501
        """New - Gets the content gateway configurations and the certificate details with custom settings.  # noqa: E501

        It returns content gateway configurations along with the custom settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_get_content_gateway_configuration_custom_settings_by_id_async_with_http_info(content_gateway_configuration_id, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_gateway_configuration_id: Content gateway configuration id for which content gateway configurations are needed(Required) (required)
        :param EncryptionModel password: A JSON object containing certificate password.(Required) (required)
        :return: list[ContentGatewayCustomSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_gateway_configuration_id', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_gateway_v2_get_content_gateway_configuration_custom_settings_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_gateway_configuration_id' is set
        if self.api_client.client_side_validation and ('content_gateway_configuration_id' not in params or
                                                       params['content_gateway_configuration_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_gateway_configuration_id` when calling `content_gateway_v2_get_content_gateway_configuration_custom_settings_by_id_async`")  # noqa: E501
        # verify the required parameter 'password' is set
        if self.api_client.client_side_validation and ('password' not in params or
                                                       params['password'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `password` when calling `content_gateway_v2_get_content_gateway_configuration_custom_settings_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_gateway_configuration_id' in params:
            path_params['contentGatewayConfigurationId'] = params['content_gateway_configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'password' in params:
            body_params = params['password']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/V2/groups/customsettings/contentgateway/{contentGatewayConfigurationId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContentGatewayCustomSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_gateway_v2_get_content_gateway_configurations_async(self, group_id, **kwargs):  # noqa: E501
        """New - Gets the content gateway configurations  # noqa: E501

        It returns all the content gateway configurations such as the platform in which the content gateway is configured and the ports to which requests are to be forwarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_get_content_gateway_configurations_async(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Location group id for which content gateway configurations are needed(Required) (required)
        :return: ContentGatewayV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_gateway_v2_get_content_gateway_configurations_async_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.content_gateway_v2_get_content_gateway_configurations_async_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def content_gateway_v2_get_content_gateway_configurations_async_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """New - Gets the content gateway configurations  # noqa: E501

        It returns all the content gateway configurations such as the platform in which the content gateway is configured and the ports to which requests are to be forwarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_get_content_gateway_configurations_async_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Location group id for which content gateway configurations are needed(Required) (required)
        :return: ContentGatewayV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_gateway_v2_get_content_gateway_configurations_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `content_gateway_v2_get_content_gateway_configurations_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/V2/groups/{groupId}/contentgateway', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContentGatewayV2Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def content_gateway_v2_get_content_gateway_configurations_by_id_async(self, content_gateway_configuration_uuid, password, **kwargs):  # noqa: E501
        """New - gets the content gateway configurations and the certificate details  # noqa: E501

        It returns a content gateway configuration such as the platform in which the content gateway is configured and the port to which requests are to be forwarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_get_content_gateway_configurations_by_id_async(content_gateway_configuration_uuid, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_gateway_configuration_uuid: Content gateway configuration uuid for which content gateway configurations are needed.(Required) (required)
        :param EncryptionModel password: A JSON object containing certificate password.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.content_gateway_v2_get_content_gateway_configurations_by_id_async_with_http_info(content_gateway_configuration_uuid, password, **kwargs)  # noqa: E501
        else:
            (data) = self.content_gateway_v2_get_content_gateway_configurations_by_id_async_with_http_info(content_gateway_configuration_uuid, password, **kwargs)  # noqa: E501
            return data

    def content_gateway_v2_get_content_gateway_configurations_by_id_async_with_http_info(self, content_gateway_configuration_uuid, password, **kwargs):  # noqa: E501
        """New - gets the content gateway configurations and the certificate details  # noqa: E501

        It returns a content gateway configuration such as the platform in which the content gateway is configured and the port to which requests are to be forwarded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.content_gateway_v2_get_content_gateway_configurations_by_id_async_with_http_info(content_gateway_configuration_uuid, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str content_gateway_configuration_uuid: Content gateway configuration uuid for which content gateway configurations are needed.(Required) (required)
        :param EncryptionModel password: A JSON object containing certificate password.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_gateway_configuration_uuid', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method content_gateway_v2_get_content_gateway_configurations_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_gateway_configuration_uuid' is set
        if self.api_client.client_side_validation and ('content_gateway_configuration_uuid' not in params or
                                                       params['content_gateway_configuration_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_gateway_configuration_uuid` when calling `content_gateway_v2_get_content_gateway_configurations_by_id_async`")  # noqa: E501
        # verify the required parameter 'password' is set
        if self.api_client.client_side_validation and ('password' not in params or
                                                       params['password'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `password` when calling `content_gateway_v2_get_content_gateway_configurations_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_gateway_configuration_uuid' in params:
            path_params['contentGatewayConfigurationUuid'] = params['content_gateway_configuration_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'password' in params:
            body_params = params['password']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml -application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/V2/groups/contentgateway/{contentGatewayConfigurationUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
