# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class ExportV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_source': 'str',
        'organization_group_uuid': 'str',
        'time_exported': 'datetime',
        'expiration_date': 'datetime',
        'report_status': 'ExportStatusModelV1',
        'export_type': 'int'
    }

    attribute_map = {
        'export_source': 'export_source',
        'organization_group_uuid': 'organization_group_uuid',
        'time_exported': 'time_exported',
        'expiration_date': 'expiration_date',
        'report_status': 'report_status',
        'export_type': 'export_type'
    }

    def __init__(self, export_source=None, organization_group_uuid=None, time_exported=None, expiration_date=None, report_status=None, export_type=None, _configuration=None):  # noqa: E501
        """ExportV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._export_source = None
        self._organization_group_uuid = None
        self._time_exported = None
        self._expiration_date = None
        self._report_status = None
        self._export_type = None
        self.discriminator = None

        if export_source is not None:
            self.export_source = export_source
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if time_exported is not None:
            self.time_exported = time_exported
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if report_status is not None:
            self.report_status = report_status
        if export_type is not None:
            self.export_type = export_type

    @property
    def export_source(self):
        """Gets the export_source of this ExportV1Model.  # noqa: E501

        Page on which Export operation is done  # noqa: E501

        :return: The export_source of this ExportV1Model.  # noqa: E501
        :rtype: str
        """
        return self._export_source

    @export_source.setter
    def export_source(self, export_source):
        """Sets the export_source of this ExportV1Model.

        Page on which Export operation is done  # noqa: E501

        :param export_source: The export_source of this ExportV1Model.  # noqa: E501
        :type: str
        """

        self._export_source = export_source

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this ExportV1Model.  # noqa: E501

        Identifier of the organization group for the exported report.  # noqa: E501

        :return: The organization_group_uuid of this ExportV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this ExportV1Model.

        Identifier of the organization group for the exported report.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this ExportV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def time_exported(self):
        """Gets the time_exported of this ExportV1Model.  # noqa: E501

        Time of export operation  # noqa: E501

        :return: The time_exported of this ExportV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._time_exported

    @time_exported.setter
    def time_exported(self, time_exported):
        """Sets the time_exported of this ExportV1Model.

        Time of export operation  # noqa: E501

        :param time_exported: The time_exported of this ExportV1Model.  # noqa: E501
        :type: datetime
        """

        self._time_exported = time_exported

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ExportV1Model.  # noqa: E501

        expiration date of report  # noqa: E501

        :return: The expiration_date of this ExportV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ExportV1Model.

        expiration date of report  # noqa: E501

        :param expiration_date: The expiration_date of this ExportV1Model.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def report_status(self):
        """Gets the report_status of this ExportV1Model.  # noqa: E501

          # noqa: E501

        :return: The report_status of this ExportV1Model.  # noqa: E501
        :rtype: ExportStatusModelV1
        """
        return self._report_status

    @report_status.setter
    def report_status(self, report_status):
        """Sets the report_status of this ExportV1Model.

          # noqa: E501

        :param report_status: The report_status of this ExportV1Model.  # noqa: E501
        :type: ExportStatusModelV1
        """

        self._report_status = report_status

    @property
    def export_type(self):
        """Gets the export_type of this ExportV1Model.  # noqa: E501

        Type of page which is used for export  # noqa: E501

        :return: The export_type of this ExportV1Model.  # noqa: E501
        :rtype: int
        """
        return self._export_type

    @export_type.setter
    def export_type(self, export_type):
        """Sets the export_type of this ExportV1Model.

        Type of page which is used for export  # noqa: E501

        :param export_type: The export_type of this ExportV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                export_type not in allowed_values):
            raise ValueError(
                "Invalid value for `export_type` ({0}), must be one of {1}"  # noqa: E501
                .format(export_type, allowed_values)
            )

        self._export_type = export_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExportV1Model):
            return True

        return self.to_dict() != other.to_dict()
