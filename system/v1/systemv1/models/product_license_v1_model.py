# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class ProductLicenseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku_id': 'int',
        'quantity_purchased': 'int',
        'quantity_used': 'int',
        'expiration_date': 'datetime',
        'license_type': 'int'
    }

    attribute_map = {
        'sku_id': 'sku_id',
        'quantity_purchased': 'quantity_purchased',
        'quantity_used': 'quantity_used',
        'expiration_date': 'expiration_date',
        'license_type': 'license_type'
    }

    def __init__(self, sku_id=None, quantity_purchased=None, quantity_used=None, expiration_date=None, license_type=None, _configuration=None):  # noqa: E501
        """ProductLicenseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sku_id = None
        self._quantity_purchased = None
        self._quantity_used = None
        self._expiration_date = None
        self._license_type = None
        self.discriminator = None

        if sku_id is not None:
            self.sku_id = sku_id
        if quantity_purchased is not None:
            self.quantity_purchased = quantity_purchased
        if quantity_used is not None:
            self.quantity_used = quantity_used
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if license_type is not None:
            self.license_type = license_type

    @property
    def sku_id(self):
        """Gets the sku_id of this ProductLicenseV1Model.  # noqa: E501

        The sku id.  # noqa: E501

        :return: The sku_id of this ProductLicenseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this ProductLicenseV1Model.

        The sku id.  # noqa: E501

        :param sku_id: The sku_id of this ProductLicenseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 75]  # noqa: E501
        if (self._configuration.client_side_validation and
                sku_id not in allowed_values):
            raise ValueError(
                "Invalid value for `sku_id` ({0}), must be one of {1}"  # noqa: E501
                .format(sku_id, allowed_values)
            )

        self._sku_id = sku_id

    @property
    def quantity_purchased(self):
        """Gets the quantity_purchased of this ProductLicenseV1Model.  # noqa: E501

        The number of licenses purchased.  # noqa: E501

        :return: The quantity_purchased of this ProductLicenseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._quantity_purchased

    @quantity_purchased.setter
    def quantity_purchased(self, quantity_purchased):
        """Sets the quantity_purchased of this ProductLicenseV1Model.

        The number of licenses purchased.  # noqa: E501

        :param quantity_purchased: The quantity_purchased of this ProductLicenseV1Model.  # noqa: E501
        :type: int
        """

        self._quantity_purchased = quantity_purchased

    @property
    def quantity_used(self):
        """Gets the quantity_used of this ProductLicenseV1Model.  # noqa: E501

        The number of licenses that have been used.  # noqa: E501

        :return: The quantity_used of this ProductLicenseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._quantity_used

    @quantity_used.setter
    def quantity_used(self, quantity_used):
        """Sets the quantity_used of this ProductLicenseV1Model.

        The number of licenses that have been used.  # noqa: E501

        :param quantity_used: The quantity_used of this ProductLicenseV1Model.  # noqa: E501
        :type: int
        """

        self._quantity_used = quantity_used

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ProductLicenseV1Model.  # noqa: E501

        The expiration date of the licenses.  # noqa: E501

        :return: The expiration_date of this ProductLicenseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ProductLicenseV1Model.

        The expiration date of the licenses.  # noqa: E501

        :param expiration_date: The expiration_date of this ProductLicenseV1Model.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def license_type(self):
        """Gets the license_type of this ProductLicenseV1Model.  # noqa: E501

        The license_type.  # noqa: E501

        :return: The license_type of this ProductLicenseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this ProductLicenseV1Model.

        The license_type.  # noqa: E501

        :param license_type: The license_type of this ProductLicenseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                license_type not in allowed_values):
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"  # noqa: E501
                .format(license_type, allowed_values)
            )

        self._license_type = license_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductLicenseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductLicenseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductLicenseV1Model):
            return True

        return self.to_dict() != other.to_dict()
