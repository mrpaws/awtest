# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv2.configuration import Configuration


class AppAssignmentDistributionV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'smart_groups': 'list[str]',
        'bsp_assignments': 'AppAssignmentBspV1Model',
        'vpp_app_details': 'AppAssignmentVppV1Model',
        'app_delivery_method': 'int',
        'pre_release_version': 'int',
        'app_track_id': 'str',
        'effective_date': 'datetime',
        'auto_update_devices_with_previous_versions': 'bool',
        'display_in_app_catalog': 'bool',
        'requires_approval': 'bool',
        'hide_notifications': 'bool',
        'application_transforms': 'list[str]',
        'installer_deferral_allowed': 'bool',
        'installer_deferral_interval': 'int',
        'installer_deferral_exit_code': 'str',
        'is_default_assignment': 'bool',
        'reboot_override': 'bool',
        'msi_deployment_override_params': 'MsiDeploymentOptionsV1Model',
        'keep_app_updated_automatically': 'bool',
        'allow_user_to_uninstall_from_catalog': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'smart_groups': 'smart_groups',
        'bsp_assignments': 'bsp_assignments',
        'vpp_app_details': 'vpp_app_details',
        'app_delivery_method': 'app_delivery_method',
        'pre_release_version': 'pre_release_version',
        'app_track_id': 'app_track_id',
        'effective_date': 'effective_date',
        'auto_update_devices_with_previous_versions': 'auto_update_devices_with_previous_versions',
        'display_in_app_catalog': 'display_in_app_catalog',
        'requires_approval': 'requires_approval',
        'hide_notifications': 'hide_notifications',
        'application_transforms': 'application_transforms',
        'installer_deferral_allowed': 'installer_deferral_allowed',
        'installer_deferral_interval': 'installer_deferral_interval',
        'installer_deferral_exit_code': 'installer_deferral_exit_code',
        'is_default_assignment': 'is_default_assignment',
        'reboot_override': 'reboot_override',
        'msi_deployment_override_params': 'msi_deployment_override_params',
        'keep_app_updated_automatically': 'keep_app_updated_automatically',
        'allow_user_to_uninstall_from_catalog': 'allow_user_to_uninstall_from_catalog'
    }

    def __init__(self, name=None, description=None, smart_groups=None, bsp_assignments=None, vpp_app_details=None, app_delivery_method=None, pre_release_version=None, app_track_id=None, effective_date=None, auto_update_devices_with_previous_versions=None, display_in_app_catalog=None, requires_approval=None, hide_notifications=None, application_transforms=None, installer_deferral_allowed=None, installer_deferral_interval=None, installer_deferral_exit_code=None, is_default_assignment=None, reboot_override=None, msi_deployment_override_params=None, keep_app_updated_automatically=None, allow_user_to_uninstall_from_catalog=None, _configuration=None):  # noqa: E501
        """AppAssignmentDistributionV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._smart_groups = None
        self._bsp_assignments = None
        self._vpp_app_details = None
        self._app_delivery_method = None
        self._pre_release_version = None
        self._app_track_id = None
        self._effective_date = None
        self._auto_update_devices_with_previous_versions = None
        self._display_in_app_catalog = None
        self._requires_approval = None
        self._hide_notifications = None
        self._application_transforms = None
        self._installer_deferral_allowed = None
        self._installer_deferral_interval = None
        self._installer_deferral_exit_code = None
        self._is_default_assignment = None
        self._reboot_override = None
        self._msi_deployment_override_params = None
        self._keep_app_updated_automatically = None
        self._allow_user_to_uninstall_from_catalog = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if smart_groups is not None:
            self.smart_groups = smart_groups
        if bsp_assignments is not None:
            self.bsp_assignments = bsp_assignments
        if vpp_app_details is not None:
            self.vpp_app_details = vpp_app_details
        if app_delivery_method is not None:
            self.app_delivery_method = app_delivery_method
        if pre_release_version is not None:
            self.pre_release_version = pre_release_version
        if app_track_id is not None:
            self.app_track_id = app_track_id
        if effective_date is not None:
            self.effective_date = effective_date
        if auto_update_devices_with_previous_versions is not None:
            self.auto_update_devices_with_previous_versions = auto_update_devices_with_previous_versions
        if display_in_app_catalog is not None:
            self.display_in_app_catalog = display_in_app_catalog
        if requires_approval is not None:
            self.requires_approval = requires_approval
        if hide_notifications is not None:
            self.hide_notifications = hide_notifications
        if application_transforms is not None:
            self.application_transforms = application_transforms
        if installer_deferral_allowed is not None:
            self.installer_deferral_allowed = installer_deferral_allowed
        if installer_deferral_interval is not None:
            self.installer_deferral_interval = installer_deferral_interval
        if installer_deferral_exit_code is not None:
            self.installer_deferral_exit_code = installer_deferral_exit_code
        if is_default_assignment is not None:
            self.is_default_assignment = is_default_assignment
        if reboot_override is not None:
            self.reboot_override = reboot_override
        if msi_deployment_override_params is not None:
            self.msi_deployment_override_params = msi_deployment_override_params
        if keep_app_updated_automatically is not None:
            self.keep_app_updated_automatically = keep_app_updated_automatically
        if allow_user_to_uninstall_from_catalog is not None:
            self.allow_user_to_uninstall_from_catalog = allow_user_to_uninstall_from_catalog

    @property
    def name(self):
        """Gets the name of this AppAssignmentDistributionV2Model.  # noqa: E501

        Name of the assignment group.  # noqa: E501

        :return: The name of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppAssignmentDistributionV2Model.

        Name of the assignment group.  # noqa: E501

        :param name: The name of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this AppAssignmentDistributionV2Model.  # noqa: E501

        Description of the assignment group.  # noqa: E501

        :return: The description of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppAssignmentDistributionV2Model.

        Description of the assignment group.  # noqa: E501

        :param description: The description of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def smart_groups(self):
        """Gets the smart_groups of this AppAssignmentDistributionV2Model.  # noqa: E501

        Collection of smart group uuids.  # noqa: E501

        :return: The smart_groups of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._smart_groups

    @smart_groups.setter
    def smart_groups(self, smart_groups):
        """Sets the smart_groups of this AppAssignmentDistributionV2Model.

        Collection of smart group uuids.  # noqa: E501

        :param smart_groups: The smart_groups of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: list[str]
        """

        self._smart_groups = smart_groups

    @property
    def bsp_assignments(self):
        """Gets the bsp_assignments of this AppAssignmentDistributionV2Model.  # noqa: E501

        BSP app assignments with smart groups applicable for online and offline licenses.  # noqa: E501

        :return: The bsp_assignments of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: AppAssignmentBspV1Model
        """
        return self._bsp_assignments

    @bsp_assignments.setter
    def bsp_assignments(self, bsp_assignments):
        """Sets the bsp_assignments of this AppAssignmentDistributionV2Model.

        BSP app assignments with smart groups applicable for online and offline licenses.  # noqa: E501

        :param bsp_assignments: The bsp_assignments of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: AppAssignmentBspV1Model
        """

        self._bsp_assignments = bsp_assignments

    @property
    def vpp_app_details(self):
        """Gets the vpp_app_details of this AppAssignmentDistributionV2Model.  # noqa: E501

        Purchased application assignments with VPP licenses.  # noqa: E501

        :return: The vpp_app_details of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: AppAssignmentVppV1Model
        """
        return self._vpp_app_details

    @vpp_app_details.setter
    def vpp_app_details(self, vpp_app_details):
        """Sets the vpp_app_details of this AppAssignmentDistributionV2Model.

        Purchased application assignments with VPP licenses.  # noqa: E501

        :param vpp_app_details: The vpp_app_details of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: AppAssignmentVppV1Model
        """

        self._vpp_app_details = vpp_app_details

    @property
    def app_delivery_method(self):
        """Gets the app_delivery_method of this AppAssignmentDistributionV2Model.  # noqa: E501

        App Delivery Method  # noqa: E501

        :return: The app_delivery_method of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: int
        """
        return self._app_delivery_method

    @app_delivery_method.setter
    def app_delivery_method(self, app_delivery_method):
        """Sets the app_delivery_method of this AppAssignmentDistributionV2Model.

        App Delivery Method  # noqa: E501

        :param app_delivery_method: The app_delivery_method of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                app_delivery_method not in allowed_values):
            raise ValueError(
                "Invalid value for `app_delivery_method` ({0}), must be one of {1}"  # noqa: E501
                .format(app_delivery_method, allowed_values)
            )

        self._app_delivery_method = app_delivery_method

    @property
    def pre_release_version(self):
        """Gets the pre_release_version of this AppAssignmentDistributionV2Model.  # noqa: E501

        App pre release version applicable for Android For Work apps.  # noqa: E501

        :return: The pre_release_version of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: int
        """
        return self._pre_release_version

    @pre_release_version.setter
    def pre_release_version(self, pre_release_version):
        """Sets the pre_release_version of this AppAssignmentDistributionV2Model.

        App pre release version applicable for Android For Work apps.  # noqa: E501

        :param pre_release_version: The pre_release_version of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                pre_release_version not in allowed_values):
            raise ValueError(
                "Invalid value for `pre_release_version` ({0}), must be one of {1}"  # noqa: E501
                .format(pre_release_version, allowed_values)
            )

        self._pre_release_version = pre_release_version

    @property
    def app_track_id(self):
        """Gets the app_track_id of this AppAssignmentDistributionV2Model.  # noqa: E501

        App track id for Android For Work Apps.  # noqa: E501

        :return: The app_track_id of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: str
        """
        return self._app_track_id

    @app_track_id.setter
    def app_track_id(self, app_track_id):
        """Sets the app_track_id of this AppAssignmentDistributionV2Model.

        App track id for Android For Work Apps.  # noqa: E501

        :param app_track_id: The app_track_id of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: str
        """

        self._app_track_id = app_track_id

    @property
    def effective_date(self):
        """Gets the effective_date of this AppAssignmentDistributionV2Model.  # noqa: E501

        The effective datetime for the application in Admin's timezone. Applicable for internal application only.  If effective datetime is null or not provided then current admin's datetime will be considered.  # noqa: E501

        :return: The effective_date of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this AppAssignmentDistributionV2Model.

        The effective datetime for the application in Admin's timezone. Applicable for internal application only.  If effective datetime is null or not provided then current admin's datetime will be considered.  # noqa: E501

        :param effective_date: The effective_date of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: datetime
        """

        self._effective_date = effective_date

    @property
    def auto_update_devices_with_previous_versions(self):
        """Gets the auto_update_devices_with_previous_versions of this AppAssignmentDistributionV2Model.  # noqa: E501

        Auto update devices with previous versions is applicable for Android, iOS and Windows internal apps.  # noqa: E501

        :return: The auto_update_devices_with_previous_versions of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._auto_update_devices_with_previous_versions

    @auto_update_devices_with_previous_versions.setter
    def auto_update_devices_with_previous_versions(self, auto_update_devices_with_previous_versions):
        """Sets the auto_update_devices_with_previous_versions of this AppAssignmentDistributionV2Model.

        Auto update devices with previous versions is applicable for Android, iOS and Windows internal apps.  # noqa: E501

        :param auto_update_devices_with_previous_versions: The auto_update_devices_with_previous_versions of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: bool
        """

        self._auto_update_devices_with_previous_versions = auto_update_devices_with_previous_versions

    @property
    def display_in_app_catalog(self):
        """Gets the display_in_app_catalog of this AppAssignmentDistributionV2Model.  # noqa: E501

        Display in App Catalog flag is applicable for macOS and Windows SFD internal apps.  # noqa: E501

        :return: The display_in_app_catalog of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._display_in_app_catalog

    @display_in_app_catalog.setter
    def display_in_app_catalog(self, display_in_app_catalog):
        """Sets the display_in_app_catalog of this AppAssignmentDistributionV2Model.

        Display in App Catalog flag is applicable for macOS and Windows SFD internal apps.  # noqa: E501

        :param display_in_app_catalog: The display_in_app_catalog of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: bool
        """

        self._display_in_app_catalog = display_in_app_catalog

    @property
    def requires_approval(self):
        """Gets the requires_approval of this AppAssignmentDistributionV2Model.  # noqa: E501

        Requires approval flag is applicable only for Windows SFD apps.  # noqa: E501

        :return: The requires_approval of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._requires_approval

    @requires_approval.setter
    def requires_approval(self, requires_approval):
        """Sets the requires_approval of this AppAssignmentDistributionV2Model.

        Requires approval flag is applicable only for Windows SFD apps.  # noqa: E501

        :param requires_approval: The requires_approval of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: bool
        """

        self._requires_approval = requires_approval

    @property
    def hide_notifications(self):
        """Gets the hide_notifications of this AppAssignmentDistributionV2Model.  # noqa: E501

        Hide notifications flag is applicable only for Windows SFD apps.  # noqa: E501

        :return: The hide_notifications of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._hide_notifications

    @hide_notifications.setter
    def hide_notifications(self, hide_notifications):
        """Sets the hide_notifications of this AppAssignmentDistributionV2Model.

        Hide notifications flag is applicable only for Windows SFD apps.  # noqa: E501

        :param hide_notifications: The hide_notifications of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: bool
        """

        self._hide_notifications = hide_notifications

    @property
    def application_transforms(self):
        """Gets the application_transforms of this AppAssignmentDistributionV2Model.  # noqa: E501

        Collection of application transforms uuids applicable only for Windows SFD apps.  # noqa: E501

        :return: The application_transforms of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._application_transforms

    @application_transforms.setter
    def application_transforms(self, application_transforms):
        """Sets the application_transforms of this AppAssignmentDistributionV2Model.

        Collection of application transforms uuids applicable only for Windows SFD apps.  # noqa: E501

        :param application_transforms: The application_transforms of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: list[str]
        """

        self._application_transforms = application_transforms

    @property
    def installer_deferral_allowed(self):
        """Gets the installer_deferral_allowed of this AppAssignmentDistributionV2Model.  # noqa: E501

        Gets or sets whether installer deferral is allowed.  # noqa: E501

        :return: The installer_deferral_allowed of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._installer_deferral_allowed

    @installer_deferral_allowed.setter
    def installer_deferral_allowed(self, installer_deferral_allowed):
        """Sets the installer_deferral_allowed of this AppAssignmentDistributionV2Model.

        Gets or sets whether installer deferral is allowed.  # noqa: E501

        :param installer_deferral_allowed: The installer_deferral_allowed of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: bool
        """

        self._installer_deferral_allowed = installer_deferral_allowed

    @property
    def installer_deferral_interval(self):
        """Gets the installer_deferral_interval of this AppAssignmentDistributionV2Model.  # noqa: E501

        Gets or sets the number of hours of installer deferral interval.  # noqa: E501

        :return: The installer_deferral_interval of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: int
        """
        return self._installer_deferral_interval

    @installer_deferral_interval.setter
    def installer_deferral_interval(self, installer_deferral_interval):
        """Sets the installer_deferral_interval of this AppAssignmentDistributionV2Model.

        Gets or sets the number of hours of installer deferral interval.  # noqa: E501

        :param installer_deferral_interval: The installer_deferral_interval of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: int
        """

        self._installer_deferral_interval = installer_deferral_interval

    @property
    def installer_deferral_exit_code(self):
        """Gets the installer_deferral_exit_code of this AppAssignmentDistributionV2Model.  # noqa: E501

        Gets or sets the installer deferral exit code.  # noqa: E501

        :return: The installer_deferral_exit_code of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: str
        """
        return self._installer_deferral_exit_code

    @installer_deferral_exit_code.setter
    def installer_deferral_exit_code(self, installer_deferral_exit_code):
        """Sets the installer_deferral_exit_code of this AppAssignmentDistributionV2Model.

        Gets or sets the installer deferral exit code.  # noqa: E501

        :param installer_deferral_exit_code: The installer_deferral_exit_code of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: str
        """

        self._installer_deferral_exit_code = installer_deferral_exit_code

    @property
    def is_default_assignment(self):
        """Gets the is_default_assignment of this AppAssignmentDistributionV2Model.  # noqa: E501

        Flag to check if the assignment is default.  # noqa: E501

        :return: The is_default_assignment of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._is_default_assignment

    @is_default_assignment.setter
    def is_default_assignment(self, is_default_assignment):
        """Sets the is_default_assignment of this AppAssignmentDistributionV2Model.

        Flag to check if the assignment is default.  # noqa: E501

        :param is_default_assignment: The is_default_assignment of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: bool
        """

        self._is_default_assignment = is_default_assignment

    @property
    def reboot_override(self):
        """Gets the reboot_override of this AppAssignmentDistributionV2Model.  # noqa: E501

        Flag to check the reboot override option.  # noqa: E501

        :return: The reboot_override of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._reboot_override

    @reboot_override.setter
    def reboot_override(self, reboot_override):
        """Sets the reboot_override of this AppAssignmentDistributionV2Model.

        Flag to check the reboot override option.  # noqa: E501

        :param reboot_override: The reboot_override of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: bool
        """

        self._reboot_override = reboot_override

    @property
    def msi_deployment_override_params(self):
        """Gets the msi_deployment_override_params of this AppAssignmentDistributionV2Model.  # noqa: E501

        Reboot option in case of override  # noqa: E501

        :return: The msi_deployment_override_params of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: MsiDeploymentOptionsV1Model
        """
        return self._msi_deployment_override_params

    @msi_deployment_override_params.setter
    def msi_deployment_override_params(self, msi_deployment_override_params):
        """Sets the msi_deployment_override_params of this AppAssignmentDistributionV2Model.

        Reboot option in case of override  # noqa: E501

        :param msi_deployment_override_params: The msi_deployment_override_params of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: MsiDeploymentOptionsV1Model
        """

        self._msi_deployment_override_params = msi_deployment_override_params

    @property
    def keep_app_updated_automatically(self):
        """Gets the keep_app_updated_automatically of this AppAssignmentDistributionV2Model.  # noqa: E501

        Keep app updated automatically (To push the application to the eligible devices). This is supposed to be only for macOS.  # noqa: E501

        :return: The keep_app_updated_automatically of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._keep_app_updated_automatically

    @keep_app_updated_automatically.setter
    def keep_app_updated_automatically(self, keep_app_updated_automatically):
        """Sets the keep_app_updated_automatically of this AppAssignmentDistributionV2Model.

        Keep app updated automatically (To push the application to the eligible devices). This is supposed to be only for macOS.  # noqa: E501

        :param keep_app_updated_automatically: The keep_app_updated_automatically of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: bool
        """

        self._keep_app_updated_automatically = keep_app_updated_automatically

    @property
    def allow_user_to_uninstall_from_catalog(self):
        """Gets the allow_user_to_uninstall_from_catalog of this AppAssignmentDistributionV2Model.  # noqa: E501

        Allow user to uninstall from catalog hub. This is supposed to be only for macOS.  # noqa: E501

        :return: The allow_user_to_uninstall_from_catalog of this AppAssignmentDistributionV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_uninstall_from_catalog

    @allow_user_to_uninstall_from_catalog.setter
    def allow_user_to_uninstall_from_catalog(self, allow_user_to_uninstall_from_catalog):
        """Sets the allow_user_to_uninstall_from_catalog of this AppAssignmentDistributionV2Model.

        Allow user to uninstall from catalog hub. This is supposed to be only for macOS.  # noqa: E501

        :param allow_user_to_uninstall_from_catalog: The allow_user_to_uninstall_from_catalog of this AppAssignmentDistributionV2Model.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_uninstall_from_catalog = allow_user_to_uninstall_from_catalog

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppAssignmentDistributionV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppAssignmentDistributionV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppAssignmentDistributionV2Model):
            return True

        return self.to_dict() != other.to_dict()
