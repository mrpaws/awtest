# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class CommandsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def commands_v1_bulk_execute_async(self, bulk_input, command, searchby, **kwargs):  # noqa: E501
        """Executes command for multiple devices identified by alternate ID type.  # noqa: E501

        Processes the bulk commands mentioned by command type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_bulk_execute_async(bulk_input, command, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: The bulk input with list of device IDs. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837)(Required). (required)
        :param str command: The command to execute [EnterpriseWipe, LockDevice, ScheduleOsUpdate, SoftReset, Shutdown].(Required). (required)
        :param str searchby: The alternate id type [Macaddress, Udid, Serialnumber, ImeiNumber].(Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_bulk_execute_async_with_http_info(bulk_input, command, searchby, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_bulk_execute_async_with_http_info(bulk_input, command, searchby, **kwargs)  # noqa: E501
            return data

    def commands_v1_bulk_execute_async_with_http_info(self, bulk_input, command, searchby, **kwargs):  # noqa: E501
        """Executes command for multiple devices identified by alternate ID type.  # noqa: E501

        Processes the bulk commands mentioned by command type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_bulk_execute_async_with_http_info(bulk_input, command, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: The bulk input with list of device IDs. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837)(Required). (required)
        :param str command: The command to execute [EnterpriseWipe, LockDevice, ScheduleOsUpdate, SoftReset, Shutdown].(Required). (required)
        :param str searchby: The alternate id type [Macaddress, Udid, Serialnumber, ImeiNumber].(Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input', 'command', 'searchby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_bulk_execute_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_input' is set
        if self.api_client.client_side_validation and ('bulk_input' not in params or
                                                       params['bulk_input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_input` when calling `commands_v1_bulk_execute_async`")  # noqa: E501
        # verify the required parameter 'command' is set
        if self.api_client.client_side_validation and ('command' not in params or
                                                       params['command'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command` when calling `commands_v1_bulk_execute_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `commands_v1_bulk_execute_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_bulk_execute_schedule_os_update(self, bulk_input, searchby, installaction, **kwargs):  # noqa: E501
        """New - Executes Schedule OS Update command for devices in bulk.  # noqa: E501

        This API will execute schedule OS Update command for multiple devices. For iOS 10.3 and later, devices must be supervised. Prior to iOS 10.3, devices must be supervised and DEP enrolled. (iOS only)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_bulk_execute_schedule_os_update(bulk_input, searchby, installaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of device identifiers of the type specified in the searchby parameter.(Required). (required)
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}(Required) (required)
        :param object installaction: Install action type for OS update. Possible Values = [Default, DownloadOnly, InstallASAP](Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_bulk_execute_schedule_os_update_with_http_info(bulk_input, searchby, installaction, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_bulk_execute_schedule_os_update_with_http_info(bulk_input, searchby, installaction, **kwargs)  # noqa: E501
            return data

    def commands_v1_bulk_execute_schedule_os_update_with_http_info(self, bulk_input, searchby, installaction, **kwargs):  # noqa: E501
        """New - Executes Schedule OS Update command for devices in bulk.  # noqa: E501

        This API will execute schedule OS Update command for multiple devices. For iOS 10.3 and later, devices must be supervised. Prior to iOS 10.3, devices must be supervised and DEP enrolled. (iOS only)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_bulk_execute_schedule_os_update_with_http_info(bulk_input, searchby, installaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of device identifiers of the type specified in the searchby parameter.(Required). (required)
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}(Required) (required)
        :param object installaction: Install action type for OS update. Possible Values = [Default, DownloadOnly, InstallASAP](Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input', 'searchby', 'installaction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_bulk_execute_schedule_os_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_input' is set
        if self.api_client.client_side_validation and ('bulk_input' not in params or
                                                       params['bulk_input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_input` when calling `commands_v1_bulk_execute_schedule_os_update`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `commands_v1_bulk_execute_schedule_os_update`")  # noqa: E501
        # verify the required parameter 'installaction' is set
        if self.api_client.client_side_validation and ('installaction' not in params or
                                                       params['installaction'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `installaction` when calling `commands_v1_bulk_execute_schedule_os_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'installaction' in params:
            query_params.append(('installaction', params['installaction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/bulk/scheduleosupdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_change_organization_group_async(self, id, organizationgroupid, **kwargs):  # noqa: E501
        """Changes the organization group to which the device is assigned.  # noqa: E501

        Processes the command to change organization group for the specific device. It will also check if device can be accessed or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_change_organization_group_async(id, organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The AirWatch device ID. (Required). (required)
        :param int organizationgroupid: The new organization group ID. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_change_organization_group_async_with_http_info(id, organizationgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_change_organization_group_async_with_http_info(id, organizationgroupid, **kwargs)  # noqa: E501
            return data

    def commands_v1_change_organization_group_async_with_http_info(self, id, organizationgroupid, **kwargs):  # noqa: E501
        """Changes the organization group to which the device is assigned.  # noqa: E501

        Processes the command to change organization group for the specific device. It will also check if device can be accessed or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_change_organization_group_async_with_http_info(id, organizationgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The AirWatch device ID. (Required). (required)
        :param int organizationgroupid: The new organization group ID. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_change_organization_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_change_organization_group_async`")  # noqa: E501
        # verify the required parameter 'organizationgroupid' is set
        if self.api_client.client_side_validation and ('organizationgroupid' not in params or
                                                       params['organizationgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organizationgroupid` when calling `commands_v1_change_organization_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'organizationgroupid' in params:
            path_params['organizationgroupid'] = params['organizationgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/commands/changeorganizationgroup/{organizationgroupid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_change_organization_group_by_alternate_id_async(self, search_by, id, ogid, **kwargs):  # noqa: E501
        """New - Changes the organization group to which the device identified by the alternate ID is assigned.  # noqa: E501

        Processes the command to change the organization group of the device. Performs additional checks on device to find by alternate IDs like udid, imei.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_change_organization_group_by_alternate_id_async(search_by, id, ogid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber](Required) (required)
        :param str id: Device alternate ID [Formats = {Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}](Required) (required)
        :param int ogid: The new organization group ID.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_change_organization_group_by_alternate_id_async_with_http_info(search_by, id, ogid, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_change_organization_group_by_alternate_id_async_with_http_info(search_by, id, ogid, **kwargs)  # noqa: E501
            return data

    def commands_v1_change_organization_group_by_alternate_id_async_with_http_info(self, search_by, id, ogid, **kwargs):  # noqa: E501
        """New - Changes the organization group to which the device identified by the alternate ID is assigned.  # noqa: E501

        Processes the command to change the organization group of the device. Performs additional checks on device to find by alternate IDs like udid, imei.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_change_organization_group_by_alternate_id_async_with_http_info(search_by, id, ogid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber](Required) (required)
        :param str id: Device alternate ID [Formats = {Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}](Required) (required)
        :param int ogid: The new organization group ID.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_by', 'id', 'ogid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_change_organization_group_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `commands_v1_change_organization_group_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_change_organization_group_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'ogid' is set
        if self.api_client.client_side_validation and ('ogid' not in params or
                                                       params['ogid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ogid` when calling `commands_v1_change_organization_group_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'ogid' in params:
            query_params.append(('ogid', params['ogid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/changeorganizationgroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_async(self, deviceid, command, **kwargs):  # noqa: E501
        """New - Executes commands for the specified device.  # noqa: E501

        Executes the command for the device after performing necessary checks like command accessibility, device enrollment status, support for command on device etc. Supported commands are Lock, EnterpriseWipe, DeviceWipe, DeviceQuery, ClearPasscode, SyncDevice, StopAirPlay, ScheduleOsUpdate, CustomMdmCommand (iOS, macOS, and tvOS only), InstallPackagedMacOSXAgent (macOS only), SoftReset, Shutdown, EnterpriseReset, SyncSensors (macOS only), OsUpdateStatus (iOS and macOS only), RotateFileVaultKey (macOS only), RotateDEPAdminPassword (macOS only), ResetBiosPassword (WinRT only), UserList (iOS only), SyncWorkflows (macOS and WinRT only), InstallSeededScepProfile (Window only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_async(deviceid, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int deviceid: Id of the device on which command is to be executed.(Required). (required)
        :param str command: The command to execute [Lock, EnterpriseWipe, DeviceWipe, DeviceQuery, ClearPasscode, SyncDevice, StopAirPlay, ScheduleOsUpdate, CustomMdmCommand, InstallPackagedMacOSXAgent, SoftReset, Shutdown, EnterpriseReset, SyncSensors, OsUpdateStatus, RotateFileVaultKey, RotateDEPAdminPassword, ResetBiosPassword, UserList, SyncWorkflows, InstallSeededScepProfile].(Required) (required)
        :param CustomCommandModel custom_command_model: Applicable only for Apple devices. Required if the command type is CustomMdmCommand. Model containing the custom XML for the command.
        :param str reason: Applicable only for Chrome Os Devices. Enterprise Wipe reason must be one of the following values - different_model_replacement, retiring_device, same_model_replacement.
        :param bool keep_apps_on_device: Applicable only for Windows devices and Enterprise Wipe command. Set this value to true/false to keep or remove apps on the device upon Enterprise Wipe.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_async_with_http_info(deviceid, command, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_async_with_http_info(deviceid, command, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_async_with_http_info(self, deviceid, command, **kwargs):  # noqa: E501
        """New - Executes commands for the specified device.  # noqa: E501

        Executes the command for the device after performing necessary checks like command accessibility, device enrollment status, support for command on device etc. Supported commands are Lock, EnterpriseWipe, DeviceWipe, DeviceQuery, ClearPasscode, SyncDevice, StopAirPlay, ScheduleOsUpdate, CustomMdmCommand (iOS, macOS, and tvOS only), InstallPackagedMacOSXAgent (macOS only), SoftReset, Shutdown, EnterpriseReset, SyncSensors (macOS only), OsUpdateStatus (iOS and macOS only), RotateFileVaultKey (macOS only), RotateDEPAdminPassword (macOS only), ResetBiosPassword (WinRT only), UserList (iOS only), SyncWorkflows (macOS and WinRT only), InstallSeededScepProfile (Window only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_async_with_http_info(deviceid, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int deviceid: Id of the device on which command is to be executed.(Required). (required)
        :param str command: The command to execute [Lock, EnterpriseWipe, DeviceWipe, DeviceQuery, ClearPasscode, SyncDevice, StopAirPlay, ScheduleOsUpdate, CustomMdmCommand, InstallPackagedMacOSXAgent, SoftReset, Shutdown, EnterpriseReset, SyncSensors, OsUpdateStatus, RotateFileVaultKey, RotateDEPAdminPassword, ResetBiosPassword, UserList, SyncWorkflows, InstallSeededScepProfile].(Required) (required)
        :param CustomCommandModel custom_command_model: Applicable only for Apple devices. Required if the command type is CustomMdmCommand. Model containing the custom XML for the command.
        :param str reason: Applicable only for Chrome Os Devices. Enterprise Wipe reason must be one of the following values - different_model_replacement, retiring_device, same_model_replacement.
        :param bool keep_apps_on_device: Applicable only for Windows devices and Enterprise Wipe command. Set this value to true/false to keep or remove apps on the device upon Enterprise Wipe.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deviceid', 'command', 'custom_command_model', 'reason', 'keep_apps_on_device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in params or
                                                       params['deviceid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `deviceid` when calling `commands_v1_execute_async`")  # noqa: E501
        # verify the required parameter 'command' is set
        if self.api_client.client_side_validation and ('command' not in params or
                                                       params['command'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command` when calling `commands_v1_execute_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deviceid' in params:
            path_params['deviceid'] = params['deviceid']  # noqa: E501

        query_params = []
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501
        if 'keep_apps_on_device' in params:
            query_params.append(('keep_apps_on_device', params['keep_apps_on_device']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_command_model' in params:
            body_params = params['custom_command_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceid}/commands', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_by_alternate_id_async(self, custom_command_model, searchby, id, command, **kwargs):  # noqa: E501
        """New - Executes a command for device by alternate ID.  # noqa: E501

        Executes command for the specific device identified using an alternate ID [Macaddress, Udid, Serialnumber, ImeiNumber]. Supported commands are Lock, EnterpriseWipe, DeviceWipe, DeviceQuery, ClearPasscode, SyncDevice, StopAirPlay, ScheduleOsUpdate, CustomMdmCommand (iOS, macOS, and tvOS only), InstallPackagedMacOSXAgent (macOS only), SoftReset, Shutdown, EnterpriseReset, SyncSensors (macOS only), OsUpdateStatus (iOS and macOS only), RotateFileVaultKey (macOS only), RotateDEPAdminPassword (macOS only), InstallSeededScepProfile (Windows Only), ResetBiosPassword (WinRT only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_by_alternate_id_async(custom_command_model, searchby, id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomCommandModel custom_command_model: Applicable only for Apple devices. Required if the command type is CustomMdmCommand. Model containing the custom XML for the command.(Required). (required)
        :param object searchby: Search by alternate id type(Required) (required)
        :param str id: Device id(Required) (required)
        :param str command: The command to execute [Lock, EnterpriseWipe, DeviceWipe, DeviceQuery, ClearPasscode, SyncDevice, StopAirPlay, ScheduleOsUpdate, CustomMdmCommand, InstallPackagedMacOSXAgent, SoftReset, Shutdown, EnterpriseReset, SyncSensors, OsUpdateStatus, RotateFileVaultKey, RotateDEPAdminPassword, InstallSeededScepProfile, ResetBiosPassword].(Required) (required)
        :param str reason: Applicable only for Chrome Os Devices. Enterprise Wipe reason must be one of the following values - different_model_replacement, retiring_device, same_model_replacement.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_by_alternate_id_async_with_http_info(custom_command_model, searchby, id, command, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_by_alternate_id_async_with_http_info(custom_command_model, searchby, id, command, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_by_alternate_id_async_with_http_info(self, custom_command_model, searchby, id, command, **kwargs):  # noqa: E501
        """New - Executes a command for device by alternate ID.  # noqa: E501

        Executes command for the specific device identified using an alternate ID [Macaddress, Udid, Serialnumber, ImeiNumber]. Supported commands are Lock, EnterpriseWipe, DeviceWipe, DeviceQuery, ClearPasscode, SyncDevice, StopAirPlay, ScheduleOsUpdate, CustomMdmCommand (iOS, macOS, and tvOS only), InstallPackagedMacOSXAgent (macOS only), SoftReset, Shutdown, EnterpriseReset, SyncSensors (macOS only), OsUpdateStatus (iOS and macOS only), RotateFileVaultKey (macOS only), RotateDEPAdminPassword (macOS only), InstallSeededScepProfile (Windows Only), ResetBiosPassword (WinRT only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_by_alternate_id_async_with_http_info(custom_command_model, searchby, id, command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomCommandModel custom_command_model: Applicable only for Apple devices. Required if the command type is CustomMdmCommand. Model containing the custom XML for the command.(Required). (required)
        :param object searchby: Search by alternate id type(Required) (required)
        :param str id: Device id(Required) (required)
        :param str command: The command to execute [Lock, EnterpriseWipe, DeviceWipe, DeviceQuery, ClearPasscode, SyncDevice, StopAirPlay, ScheduleOsUpdate, CustomMdmCommand, InstallPackagedMacOSXAgent, SoftReset, Shutdown, EnterpriseReset, SyncSensors, OsUpdateStatus, RotateFileVaultKey, RotateDEPAdminPassword, InstallSeededScepProfile, ResetBiosPassword].(Required) (required)
        :param str reason: Applicable only for Chrome Os Devices. Enterprise Wipe reason must be one of the following values - different_model_replacement, retiring_device, same_model_replacement.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_command_model', 'searchby', 'id', 'command', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_command_model' is set
        if self.api_client.client_side_validation and ('custom_command_model' not in params or
                                                       params['custom_command_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_command_model` when calling `commands_v1_execute_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `commands_v1_execute_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_execute_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'command' is set
        if self.api_client.client_side_validation and ('command' not in params or
                                                       params['command'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command` when calling `commands_v1_execute_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_command_model' in params:
            body_params = params['custom_command_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_change_container_passcode_by_alternate_id_async(self, passcode, searchby, id, **kwargs):  # noqa: E501
        """New - Executes change passcode command for container device matching the filter criteria.  # noqa: E501

        This will change the knox container passcode with the provided new passcode for the device matching the device criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_change_container_passcode_by_alternate_id_async(passcode, searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContainerPasscodeV1Model passcode: New container passcode(Required). (required)
        :param object searchby: Search by alternate id type(Required) (required)
        :param str id: Device id(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_change_container_passcode_by_alternate_id_async_with_http_info(passcode, searchby, id, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_change_container_passcode_by_alternate_id_async_with_http_info(passcode, searchby, id, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_change_container_passcode_by_alternate_id_async_with_http_info(self, passcode, searchby, id, **kwargs):  # noqa: E501
        """New - Executes change passcode command for container device matching the filter criteria.  # noqa: E501

        This will change the knox container passcode with the provided new passcode for the device matching the device criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_change_container_passcode_by_alternate_id_async_with_http_info(passcode, searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ContainerPasscodeV1Model passcode: New container passcode(Required). (required)
        :param object searchby: Search by alternate id type(Required) (required)
        :param str id: Device id(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['passcode', 'searchby', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_change_container_passcode_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'passcode' is set
        if self.api_client.client_side_validation and ('passcode' not in params or
                                                       params['passcode'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `passcode` when calling `commands_v1_execute_change_container_passcode_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `commands_v1_execute_change_container_passcode_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_execute_change_container_passcode_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'passcode' in params:
            body_params = params['passcode']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/containerpasscode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_change_device_passcode_async(self, id, passcode, **kwargs):  # noqa: E501
        """Executes change passcode command for device ID.  # noqa: E501

        Processes change passcode command for the specific device with passcode provided. Performs necessary checks regarding device ID and its enrollment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_change_device_passcode_async(id, passcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID (Required). (required)
        :param DevicePasscode passcode: New passcode value which needs to be set in the device. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_change_device_passcode_async_with_http_info(id, passcode, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_change_device_passcode_async_with_http_info(id, passcode, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_change_device_passcode_async_with_http_info(self, id, passcode, **kwargs):  # noqa: E501
        """Executes change passcode command for device ID.  # noqa: E501

        Processes change passcode command for the specific device with passcode provided. Performs necessary checks regarding device ID and its enrollment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_change_device_passcode_async_with_http_info(id, passcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID (Required). (required)
        :param DevicePasscode passcode: New passcode value which needs to be set in the device. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'passcode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_change_device_passcode_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_execute_change_device_passcode_async`")  # noqa: E501
        # verify the required parameter 'passcode' is set
        if self.api_client.client_side_validation and ('passcode' not in params or
                                                       params['passcode'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `passcode` when calling `commands_v1_execute_change_device_passcode_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'passcode' in params:
            body_params = params['passcode']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/commands/changepasscode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_change_device_passcode_by_alternate_id_async(self, search_by, id, **kwargs):  # noqa: E501
        """Executes command for change passcode of device by alternate ID.  # noqa: E501

        Processes command for change passcode with device alternate ID. It also performs additional checks if device is enrolled or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_change_device_passcode_by_alternate_id_async(search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837) (Required). (required)
        :param str id: The alternate ID of the device. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837)(Required). (required)
        :param DevicePasscode passcode: The change passcode request.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_change_device_passcode_by_alternate_id_async_with_http_info(search_by, id, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_change_device_passcode_by_alternate_id_async_with_http_info(search_by, id, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_change_device_passcode_by_alternate_id_async_with_http_info(self, search_by, id, **kwargs):  # noqa: E501
        """Executes command for change passcode of device by alternate ID.  # noqa: E501

        Processes command for change passcode with device alternate ID. It also performs additional checks if device is enrolled or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_change_device_passcode_by_alternate_id_async_with_http_info(search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837) (Required). (required)
        :param str id: The alternate ID of the device. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837)(Required). (required)
        :param DevicePasscode passcode: The change passcode request.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_by', 'id', 'passcode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_change_device_passcode_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `commands_v1_execute_change_device_passcode_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_execute_change_device_passcode_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'passcode' in params:
            body_params = params['passcode']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/changepasscode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_find_device_async(self, device_id, **kwargs):  # noqa: E501
        """Executes find device command for device by device id.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_find_device_async(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The AirWatch Device Id. (required)
        :param FindDevice find_device: The find device request.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_find_device_async_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_find_device_async_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_find_device_async_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Executes find device command for device by device id.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_find_device_async_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The AirWatch Device Id. (required)
        :param FindDevice find_device: The find device request.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'find_device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_find_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `commands_v1_execute_find_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'find_device' in params:
            body_params = params['find_device']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceId}/commands/finddevice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_find_device_by_alternate_id_async(self, **kwargs):  # noqa: E501
        """Executes finddevice command for device by alternate id.  # noqa: E501

        API to Executes finddevice command for device by alternate id as [Macaddress, Udid, Serialnumber, ImeiNumber].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_find_device_by_alternate_id_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindDevice find_device: The find device request.
        :param str search_by: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).
        :param str id: The alternate id.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_find_device_by_alternate_id_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_find_device_by_alternate_id_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def commands_v1_execute_find_device_by_alternate_id_async_with_http_info(self, **kwargs):  # noqa: E501
        """Executes finddevice command for device by alternate id.  # noqa: E501

        API to Executes finddevice command for device by alternate id as [Macaddress, Udid, Serialnumber, ImeiNumber].  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_find_device_by_alternate_id_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FindDevice find_device: The find device request.
        :param str search_by: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).
        :param str id: The alternate id.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['find_device', 'search_by', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_find_device_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'find_device' in params:
            body_params = params['find_device']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/finddevice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_request_device_log_async(self, log_params, searchby, id, **kwargs):  # noqa: E501
        """New - Executes device log request command for device matching the filter criteria.  # noqa: E501

        This api will execute deviceLog command on the device matching the filter criteria. The logs will become available to an admin on AirWatch Console.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_request_device_log_async(log_params, searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceLogRequestV1Model log_params: Contains parameters for device log request.(Required). (required)
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}(Required) (required)
        :param str id: Device id(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_request_device_log_async_with_http_info(log_params, searchby, id, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_request_device_log_async_with_http_info(log_params, searchby, id, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_request_device_log_async_with_http_info(self, log_params, searchby, id, **kwargs):  # noqa: E501
        """New - Executes device log request command for device matching the filter criteria.  # noqa: E501

        This api will execute deviceLog command on the device matching the filter criteria. The logs will become available to an admin on AirWatch Console.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_request_device_log_async_with_http_info(log_params, searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceLogRequestV1Model log_params: Contains parameters for device log request.(Required). (required)
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}(Required) (required)
        :param str id: Device id(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['log_params', 'searchby', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_request_device_log_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'log_params' is set
        if self.api_client.client_side_validation and ('log_params' not in params or
                                                       params['log_params'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `log_params` when calling `commands_v1_execute_request_device_log_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `commands_v1_execute_request_device_log_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_execute_request_device_log_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'log_params' in params:
            body_params = params['log_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/requestdevicelog', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_schedule_os_update_by_alternate_id_async(self, osupdateproductkeys, searchby, id, installaction, **kwargs):  # noqa: E501
        """New - Schedule OS Update for supervised DEP devices  # noqa: E501

        Executes the Schedule OS Update command on the specified device. For iOS 10.3 and later, devices must be supervised. Prior to iOS 10.3, devices must be supervised and DEP enrolled. For macOS, the device must be DEP enrolled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_schedule_os_update_by_alternate_id_async(osupdateproductkeys, searchby, id, installaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] osupdateproductkeys: List of macOS Update product keys. This field is required and only for macOS devices. Ex. [\"macOSUpdate15D100\"](Required). (required)
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber, Uuid] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837, Uuid - EFA9E128-DE1B-404A-A3F4-E5824A666681}(Required) (required)
        :param str id: Device alternate ID(Required) (required)
        :param object installaction: Install action type for OS update. Possible Values = [Default, DownloadOnly, InstallASAP, NotifyOnly, InstallLater](Required) (required)
        :param str osupdateproductversion: A single iOS Update product version. This field is required and only for iOS devices. Ex. 12.3.1
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_schedule_os_update_by_alternate_id_async_with_http_info(osupdateproductkeys, searchby, id, installaction, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_schedule_os_update_by_alternate_id_async_with_http_info(osupdateproductkeys, searchby, id, installaction, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_schedule_os_update_by_alternate_id_async_with_http_info(self, osupdateproductkeys, searchby, id, installaction, **kwargs):  # noqa: E501
        """New - Schedule OS Update for supervised DEP devices  # noqa: E501

        Executes the Schedule OS Update command on the specified device. For iOS 10.3 and later, devices must be supervised. Prior to iOS 10.3, devices must be supervised and DEP enrolled. For macOS, the device must be DEP enrolled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_schedule_os_update_by_alternate_id_async_with_http_info(osupdateproductkeys, searchby, id, installaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] osupdateproductkeys: List of macOS Update product keys. This field is required and only for macOS devices. Ex. [\"macOSUpdate15D100\"](Required). (required)
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber, Uuid] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837, Uuid - EFA9E128-DE1B-404A-A3F4-E5824A666681}(Required) (required)
        :param str id: Device alternate ID(Required) (required)
        :param object installaction: Install action type for OS update. Possible Values = [Default, DownloadOnly, InstallASAP, NotifyOnly, InstallLater](Required) (required)
        :param str osupdateproductversion: A single iOS Update product version. This field is required and only for iOS devices. Ex. 12.3.1
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['osupdateproductkeys', 'searchby', 'id', 'installaction', 'osupdateproductversion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_schedule_os_update_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'osupdateproductkeys' is set
        if self.api_client.client_side_validation and ('osupdateproductkeys' not in params or
                                                       params['osupdateproductkeys'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `osupdateproductkeys` when calling `commands_v1_execute_schedule_os_update_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `commands_v1_execute_schedule_os_update_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_execute_schedule_os_update_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'installaction' is set
        if self.api_client.client_side_validation and ('installaction' not in params or
                                                       params['installaction'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `installaction` when calling `commands_v1_execute_schedule_os_update_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'osupdateproductversion' in params:
            query_params.append(('osupdateproductversion', params['osupdateproductversion']))  # noqa: E501
        if 'installaction' in params:
            query_params.append(('installaction', params['installaction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'osupdateproductkeys' in params:
            body_params = params['osupdateproductkeys']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/scheduleosupdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_start_air_play_async(self, deviceid, **kwargs):  # noqa: E501
        """Executes start airplay for a specific device.  # noqa: E501

        AirPlay on specified destination device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_start_air_play_async(deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int deviceid: Device id. (required)
        :param StartAirPlay start_air_play: Start airplay for a device.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_start_air_play_async_with_http_info(deviceid, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_start_air_play_async_with_http_info(deviceid, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_start_air_play_async_with_http_info(self, deviceid, **kwargs):  # noqa: E501
        """Executes start airplay for a specific device.  # noqa: E501

        AirPlay on specified destination device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_start_air_play_async_with_http_info(deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int deviceid: Device id. (required)
        :param StartAirPlay start_air_play: Start airplay for a device.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deviceid', 'start_air_play']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_start_air_play_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in params or
                                                       params['deviceid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `deviceid` when calling `commands_v1_execute_start_air_play_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deviceid' in params:
            path_params['deviceid'] = params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'start_air_play' in params:
            body_params = params['start_air_play']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceid}/commands/startairplay', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_start_remote_view_by_alternate_id_async(self, searchby, id, remoteview_id, **kwargs):  # noqa: E501
        """New - Executes start remoteview command for device matching the filter criteria.  # noqa: E501

        This api will execute remoteview command in device and user can remoteview the device in the destination device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_start_remote_view_by_alternate_id_async(searchby, id, remoteview_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}(Required) (required)
        :param str id: Device id(Required) (required)
        :param int remoteview_id: Id of the Remoteview destination device(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_start_remote_view_by_alternate_id_async_with_http_info(searchby, id, remoteview_id, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_start_remote_view_by_alternate_id_async_with_http_info(searchby, id, remoteview_id, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_start_remote_view_by_alternate_id_async_with_http_info(self, searchby, id, remoteview_id, **kwargs):  # noqa: E501
        """New - Executes start remoteview command for device matching the filter criteria.  # noqa: E501

        This api will execute remoteview command in device and user can remoteview the device in the destination device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_start_remote_view_by_alternate_id_async_with_http_info(searchby, id, remoteview_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}(Required) (required)
        :param str id: Device id(Required) (required)
        :param int remoteview_id: Id of the Remoteview destination device(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['searchby', 'id', 'remoteview_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_start_remote_view_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `commands_v1_execute_start_remote_view_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_execute_start_remote_view_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'remoteview_id' is set
        if self.api_client.client_side_validation and ('remoteview_id' not in params or
                                                       params['remoteview_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `remoteview_id` when calling `commands_v1_execute_start_remote_view_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'remoteview_id' in params:
            query_params.append(('remoteviewId', params['remoteview_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/remoteview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v1_execute_stop_device_log_async(self, searchby, id, **kwargs):  # noqa: E501
        """New - Executes stop device log request command for device.  # noqa: E501

        This api will execute StopDeviceLog command on the device matching the filter criteria. The logs collected till that time will become available to an admin on AirWatch Console.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_stop_device_log_async(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}(Required) (required)
        :param str id: Device id(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v1_execute_stop_device_log_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v1_execute_stop_device_log_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
            return data

    def commands_v1_execute_stop_device_log_async_with_http_info(self, searchby, id, **kwargs):  # noqa: E501
        """New - Executes stop device log request command for device.  # noqa: E501

        This api will execute StopDeviceLog command on the device matching the filter criteria. The logs collected till that time will become available to an admin on AirWatch Console.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v1_execute_stop_device_log_async_with_http_info(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: Search by alternate id type. Possible values = [Macaddress, Udid, Serialnumber, ImeiNumber] {Formats= Macaddress - 848506B900BA, Udid - 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber - LGH871c18f631a, ImeiNumber - 354833052322837}(Required) (required)
        :param str id: Device id(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['searchby', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v1_execute_stop_device_log_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `commands_v1_execute_stop_device_log_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v1_execute_stop_device_log_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/stopdevicelog', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
