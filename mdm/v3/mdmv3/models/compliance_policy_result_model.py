# coding: utf-8

"""
    MDM API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv3.configuration import Configuration


class CompliancePolicyResultModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'compliance_status': 'int',
        'policy_name': 'str',
        'policy_description': 'str',
        'last_compliance_check': 'datetime',
        'next_compliance_check': 'datetime',
        'actions_taken': 'list[ComplianceActionTakenV2Model]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'compliance_status': 'compliance_status',
        'policy_name': 'policy_name',
        'policy_description': 'policy_description',
        'last_compliance_check': 'last_compliance_check',
        'next_compliance_check': 'next_compliance_check',
        'actions_taken': 'actions_taken'
    }

    def __init__(self, uuid=None, compliance_status=None, policy_name=None, policy_description=None, last_compliance_check=None, next_compliance_check=None, actions_taken=None, _configuration=None):  # noqa: E501
        """CompliancePolicyResultModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uuid = None
        self._compliance_status = None
        self._policy_name = None
        self._policy_description = None
        self._last_compliance_check = None
        self._next_compliance_check = None
        self._actions_taken = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if compliance_status is not None:
            self.compliance_status = compliance_status
        if policy_name is not None:
            self.policy_name = policy_name
        if policy_description is not None:
            self.policy_description = policy_description
        if last_compliance_check is not None:
            self.last_compliance_check = last_compliance_check
        if next_compliance_check is not None:
            self.next_compliance_check = next_compliance_check
        if actions_taken is not None:
            self.actions_taken = actions_taken

    @property
    def uuid(self):
        """Gets the uuid of this CompliancePolicyResultModel.  # noqa: E501

        The policy's universally unique identifier (UUID).  # noqa: E501

        :return: The uuid of this CompliancePolicyResultModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this CompliancePolicyResultModel.

        The policy's universally unique identifier (UUID).  # noqa: E501

        :param uuid: The uuid of this CompliancePolicyResultModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def compliance_status(self):
        """Gets the compliance_status of this CompliancePolicyResultModel.  # noqa: E501

        The compliance evaluation of the policy.  # noqa: E501

        :return: The compliance_status of this CompliancePolicyResultModel.  # noqa: E501
        :rtype: int
        """
        return self._compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        """Sets the compliance_status of this CompliancePolicyResultModel.

        The compliance evaluation of the policy.  # noqa: E501

        :param compliance_status: The compliance_status of this CompliancePolicyResultModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                compliance_status not in allowed_values):
            raise ValueError(
                "Invalid value for `compliance_status` ({0}), must be one of {1}"  # noqa: E501
                .format(compliance_status, allowed_values)
            )

        self._compliance_status = compliance_status

    @property
    def policy_name(self):
        """Gets the policy_name of this CompliancePolicyResultModel.  # noqa: E501

        The name of the compliance policy for the device.  # noqa: E501

        :return: The policy_name of this CompliancePolicyResultModel.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this CompliancePolicyResultModel.

        The name of the compliance policy for the device.  # noqa: E501

        :param policy_name: The policy_name of this CompliancePolicyResultModel.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    @property
    def policy_description(self):
        """Gets the policy_description of this CompliancePolicyResultModel.  # noqa: E501

        The description of the compliance policy.  # noqa: E501

        :return: The policy_description of this CompliancePolicyResultModel.  # noqa: E501
        :rtype: str
        """
        return self._policy_description

    @policy_description.setter
    def policy_description(self, policy_description):
        """Sets the policy_description of this CompliancePolicyResultModel.

        The description of the compliance policy.  # noqa: E501

        :param policy_description: The policy_description of this CompliancePolicyResultModel.  # noqa: E501
        :type: str
        """

        self._policy_description = policy_description

    @property
    def last_compliance_check(self):
        """Gets the last_compliance_check of this CompliancePolicyResultModel.  # noqa: E501

        The date and time of the last compliance check in UTC.  # noqa: E501

        :return: The last_compliance_check of this CompliancePolicyResultModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_compliance_check

    @last_compliance_check.setter
    def last_compliance_check(self, last_compliance_check):
        """Sets the last_compliance_check of this CompliancePolicyResultModel.

        The date and time of the last compliance check in UTC.  # noqa: E501

        :param last_compliance_check: The last_compliance_check of this CompliancePolicyResultModel.  # noqa: E501
        :type: datetime
        """

        self._last_compliance_check = last_compliance_check

    @property
    def next_compliance_check(self):
        """Gets the next_compliance_check of this CompliancePolicyResultModel.  # noqa: E501

        The date and time of the next compliance check in UTC.  # noqa: E501

        :return: The next_compliance_check of this CompliancePolicyResultModel.  # noqa: E501
        :rtype: datetime
        """
        return self._next_compliance_check

    @next_compliance_check.setter
    def next_compliance_check(self, next_compliance_check):
        """Sets the next_compliance_check of this CompliancePolicyResultModel.

        The date and time of the next compliance check in UTC.  # noqa: E501

        :param next_compliance_check: The next_compliance_check of this CompliancePolicyResultModel.  # noqa: E501
        :type: datetime
        """

        self._next_compliance_check = next_compliance_check

    @property
    def actions_taken(self):
        """Gets the actions_taken of this CompliancePolicyResultModel.  # noqa: E501

        The compliance actions taken on the device due to non-compliance policy evaluation.  # noqa: E501

        :return: The actions_taken of this CompliancePolicyResultModel.  # noqa: E501
        :rtype: list[ComplianceActionTakenV2Model]
        """
        return self._actions_taken

    @actions_taken.setter
    def actions_taken(self, actions_taken):
        """Sets the actions_taken of this CompliancePolicyResultModel.

        The compliance actions taken on the device due to non-compliance policy evaluation.  # noqa: E501

        :param actions_taken: The actions_taken of this CompliancePolicyResultModel.  # noqa: E501
        :type: list[ComplianceActionTakenV2Model]
        """

        self._actions_taken = actions_taken

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompliancePolicyResultModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompliancePolicyResultModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompliancePolicyResultModel):
            return True

        return self.to_dict() != other.to_dict()
