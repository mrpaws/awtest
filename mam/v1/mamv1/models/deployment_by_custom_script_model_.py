# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class DeploymentByCustomScriptModel_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'script_type': 'str',
        'command_to_run_the_script': 'str',
        'custom_script_file_blod_id': 'int',
        'success_exit_code': 'int'
    }

    attribute_map = {
        'script_type': 'ScriptType',
        'command_to_run_the_script': 'CommandToRunTheScript',
        'custom_script_file_blod_id': 'CustomScriptFileBlodId',
        'success_exit_code': 'SuccessExitCode'
    }

    def __init__(self, script_type=None, command_to_run_the_script=None, custom_script_file_blod_id=None, success_exit_code=None, _configuration=None):  # noqa: E501
        """DeploymentByCustomScriptModel_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._script_type = None
        self._command_to_run_the_script = None
        self._custom_script_file_blod_id = None
        self._success_exit_code = None
        self.discriminator = None

        if script_type is not None:
            self.script_type = script_type
        if command_to_run_the_script is not None:
            self.command_to_run_the_script = command_to_run_the_script
        if custom_script_file_blod_id is not None:
            self.custom_script_file_blod_id = custom_script_file_blod_id
        if success_exit_code is not None:
            self.success_exit_code = success_exit_code

    @property
    def script_type(self):
        """Gets the script_type of this DeploymentByCustomScriptModel_.  # noqa: E501

        Gets or sets script Type (JScript, PowerShell, VBScript).  # noqa: E501

        :return: The script_type of this DeploymentByCustomScriptModel_.  # noqa: E501
        :rtype: str
        """
        return self._script_type

    @script_type.setter
    def script_type(self, script_type):
        """Sets the script_type of this DeploymentByCustomScriptModel_.

        Gets or sets script Type (JScript, PowerShell, VBScript).  # noqa: E501

        :param script_type: The script_type of this DeploymentByCustomScriptModel_.  # noqa: E501
        :type: str
        """

        self._script_type = script_type

    @property
    def command_to_run_the_script(self):
        """Gets the command_to_run_the_script of this DeploymentByCustomScriptModel_.  # noqa: E501

        Gets or sets command to run the script.  # noqa: E501

        :return: The command_to_run_the_script of this DeploymentByCustomScriptModel_.  # noqa: E501
        :rtype: str
        """
        return self._command_to_run_the_script

    @command_to_run_the_script.setter
    def command_to_run_the_script(self, command_to_run_the_script):
        """Sets the command_to_run_the_script of this DeploymentByCustomScriptModel_.

        Gets or sets command to run the script.  # noqa: E501

        :param command_to_run_the_script: The command_to_run_the_script of this DeploymentByCustomScriptModel_.  # noqa: E501
        :type: str
        """

        self._command_to_run_the_script = command_to_run_the_script

    @property
    def custom_script_file_blod_id(self):
        """Gets the custom_script_file_blod_id of this DeploymentByCustomScriptModel_.  # noqa: E501

        Gets or sets the BlobId of the script file associated.  Supported file types : js, jse, ps1, ps1xml, psc1, psd1, psm1, pssc, cdxml, vbs, vbe, wsf, wsc.  # noqa: E501

        :return: The custom_script_file_blod_id of this DeploymentByCustomScriptModel_.  # noqa: E501
        :rtype: int
        """
        return self._custom_script_file_blod_id

    @custom_script_file_blod_id.setter
    def custom_script_file_blod_id(self, custom_script_file_blod_id):
        """Sets the custom_script_file_blod_id of this DeploymentByCustomScriptModel_.

        Gets or sets the BlobId of the script file associated.  Supported file types : js, jse, ps1, ps1xml, psc1, psd1, psm1, pssc, cdxml, vbs, vbe, wsf, wsc.  # noqa: E501

        :param custom_script_file_blod_id: The custom_script_file_blod_id of this DeploymentByCustomScriptModel_.  # noqa: E501
        :type: int
        """

        self._custom_script_file_blod_id = custom_script_file_blod_id

    @property
    def success_exit_code(self):
        """Gets the success_exit_code of this DeploymentByCustomScriptModel_.  # noqa: E501

        Gets or sets the success exit code.  # noqa: E501

        :return: The success_exit_code of this DeploymentByCustomScriptModel_.  # noqa: E501
        :rtype: int
        """
        return self._success_exit_code

    @success_exit_code.setter
    def success_exit_code(self, success_exit_code):
        """Sets the success_exit_code of this DeploymentByCustomScriptModel_.

        Gets or sets the success exit code.  # noqa: E501

        :param success_exit_code: The success_exit_code of this DeploymentByCustomScriptModel_.  # noqa: E501
        :type: int
        """

        self._success_exit_code = success_exit_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentByCustomScriptModel_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentByCustomScriptModel_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeploymentByCustomScriptModel_):
            return True

        return self.to_dict() != other.to_dict()
