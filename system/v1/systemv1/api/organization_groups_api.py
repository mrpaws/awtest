# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class OrganizationGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def organization_groups_create_og_async(self, id, **kwargs):  # noqa: E501
        """New - Creates a new organization group.  # noqa: E501

        Create a new organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_create_og_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parent OrganizationGroup Identifier. (required)
        :param LocationGroup_ location_group: The OrganizationGroup resource to be created.
        :return: EntityIdModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_create_og_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_create_og_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organization_groups_create_og_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """New - Creates a new organization group.  # noqa: E501

        Create a new organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_create_og_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parent OrganizationGroup Identifier. (required)
        :param LocationGroup_ location_group: The OrganizationGroup resource to be created.
        :return: EntityIdModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'location_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_create_og_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `organization_groups_create_og_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'location_group' in params:
            body_params = params['location_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityIdModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_delete_async(self, id, **kwargs):  # noqa: E501
        """Deletes the specified organization group.  # noqa: E501

        Delete organization group by given ID. It return Forbidden if user want to delete current organization group. It returns bad request,if organization group cannot be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_delete_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The OrganizationGroup Identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_delete_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_delete_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organization_groups_delete_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes the specified organization group.  # noqa: E501

        Delete organization group by given ID. It return Forbidden if user want to delete current organization group. It returns bad request,if organization group cannot be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_delete_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The OrganizationGroup Identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_delete_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `organization_groups_delete_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_get_async(self, id, **kwargs):  # noqa: E501
        """Retrieves information about the specified organization group.  # noqa: E501

        Retrieves organization group by ID. If Organization goup is not found, it will throw 404 error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The OrganizationGroup Identifier. (required)
        :return: LocationGroup_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_get_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_get_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organization_groups_get_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves information about the specified organization group.  # noqa: E501

        Retrieves organization group by ID. If Organization goup is not found, it will throw 404 error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The OrganizationGroup Identifier. (required)
        :return: LocationGroup_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_get_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `organization_groups_get_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationGroup_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_get_child_location_groups(self, id, **kwargs):  # noqa: E501
        """Provides a list of child organization groups of the specified organization group.  # noqa: E501

        Lists the Organization Group specified by the ID and all of its child Organization Groups. Users, administrators, and devices in the OG specified by the ID are broken down and listed underneath the Organization Group they are enrolled or created at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_child_location_groups(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parent organization group ID. (required)
        :return: list[LocationGroup_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_get_child_location_groups_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_get_child_location_groups_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organization_groups_get_child_location_groups_with_http_info(self, id, **kwargs):  # noqa: E501
        """Provides a list of child organization groups of the specified organization group.  # noqa: E501

        Lists the Organization Group specified by the ID and all of its child Organization Groups. Users, administrators, and devices in the OG specified by the ID are broken down and listed underneath the Organization Group they are enrolled or created at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_child_location_groups_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parent organization group ID. (required)
        :return: list[LocationGroup_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_get_child_location_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `organization_groups_get_child_location_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LocationGroup_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_get_device_count_for_each_location_group_async(self, **kwargs):  # noqa: E501
        """Returns the Device Count for all the Organization Groups that are available under the specified Organization Group.  # noqa: E501

        Returns the device count for all the organization groups under specified organization group. It return bad request if start date is greater than end date or user has no access to the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_device_count_for_each_location_group_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization Group to be searched, user's OG is considered if not sent.
        :param datetime seensince: Filter devices such that devices with last seen after this date will be returned. Supported format:              \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy/MM/dd HH:mm:ss.fff\", \"yyyy-MM-dd HH:mm:ss.fff\", \"MM/dd/yyyy HH:mm:ss.fff\", \"MM-dd-yyyy HH:mm:ss.fff\", \"yyyy/MM/ddTHH:mm:ss.fff\", \"yyyy-MM-ddTHH:mm:ss.fff\", \"MM/dd/yyyyTHH:mm:ss.fff\", \"MM-dd-yyyyTHH:mm:ss.fff\", \"yyyy-MM-dd HH-mm-ss-tt\", \"yyyy-MM-ddTHH-mm-ss-tt\".              
        :param datetime seentill: Filter devices such that devices with last seen till this date will be returned              Supported format:\"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy/MM/dd HH:mm:ss.fff\", \"yyyy-MM-dd HH:mm:ss.fff\", \"MM/dd/yyyy HH:mm:ss.fff\", \"MM-dd-yyyy HH:mm:ss.fff\", \"yyyy/MM/ddTHH:mm:ss.fff\", \"yyyy-MM-ddTHH:mm:ss.fff\", \"MM/dd/yyyyTHH:mm:ss.fff\", \"MM-dd-yyyyTHH:mm:ss.fff\", \"yyyy-MM-dd HH-mm-ss-tt\", \"yyyy-MM-ddTHH-mm-ss-tt\".              
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceCountPerLocationGroupSearchResultModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_get_device_count_for_each_location_group_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_get_device_count_for_each_location_group_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def organization_groups_get_device_count_for_each_location_group_async_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the Device Count for all the Organization Groups that are available under the specified Organization Group.  # noqa: E501

        Returns the device count for all the organization groups under specified organization group. It return bad request if start date is greater than end date or user has no access to the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_device_count_for_each_location_group_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization Group to be searched, user's OG is considered if not sent.
        :param datetime seensince: Filter devices such that devices with last seen after this date will be returned. Supported format:              \"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy/MM/dd HH:mm:ss.fff\", \"yyyy-MM-dd HH:mm:ss.fff\", \"MM/dd/yyyy HH:mm:ss.fff\", \"MM-dd-yyyy HH:mm:ss.fff\", \"yyyy/MM/ddTHH:mm:ss.fff\", \"yyyy-MM-ddTHH:mm:ss.fff\", \"MM/dd/yyyyTHH:mm:ss.fff\", \"MM-dd-yyyyTHH:mm:ss.fff\", \"yyyy-MM-dd HH-mm-ss-tt\", \"yyyy-MM-ddTHH-mm-ss-tt\".              
        :param datetime seentill: Filter devices such that devices with last seen till this date will be returned              Supported format:\"yyyy/MM/dd\", \"yyyy-MM-dd\", \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy/MM/dd HH:mm:ss.fff\", \"yyyy-MM-dd HH:mm:ss.fff\", \"MM/dd/yyyy HH:mm:ss.fff\", \"MM-dd-yyyy HH:mm:ss.fff\", \"yyyy/MM/ddTHH:mm:ss.fff\", \"yyyy-MM-ddTHH:mm:ss.fff\", \"MM/dd/yyyyTHH:mm:ss.fff\", \"MM-dd-yyyyTHH:mm:ss.fff\", \"yyyy-MM-dd HH-mm-ss-tt\", \"yyyy-MM-ddTHH-mm-ss-tt\".              
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceCountPerLocationGroupSearchResultModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'seensince', 'seentill', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_get_device_count_for_each_location_group_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'seensince' in params:
            query_params.append(('seensince', params['seensince']))  # noqa: E501
        if 'seentill' in params:
            query_params.append(('seentill', params['seentill']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/devicecounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceCountPerLocationGroupSearchResultModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_get_sample_rates_async(self, id, **kwargs):  # noqa: E501
        """Provides the device sample rates for an organization group by platform.  # noqa: E501

        Return the device sample rates for organization group by Platform such as iOS, Android etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_sample_rates_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Organization group ID. (required)
        :param str platform: Platform name.
        :return: DeviceSampleRates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_get_sample_rates_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_get_sample_rates_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organization_groups_get_sample_rates_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Provides the device sample rates for an organization group by platform.  # noqa: E501

        Return the device sample rates for organization group by Platform such as iOS, Android etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_sample_rates_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Organization group ID. (required)
        :param str platform: Platform name.
        :return: DeviceSampleRates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'platform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_get_sample_rates_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `organization_groups_get_sample_rates_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}/sampleratesbyplatform', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSampleRates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_get_sample_rates_by_platform_async(self, id, platform, **kwargs):  # noqa: E501
        """New - Provides the device sample rates.  # noqa: E501

        Provides the device sample rates for an organization group by platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_sample_rates_by_platform_async(id, platform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Organization Group Id.(Required). (required)
        :param object platform: The platform of device for which sample rates are requested.(Required) (required)
        :return: DeviceSampleRates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_get_sample_rates_by_platform_async_with_http_info(id, platform, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_get_sample_rates_by_platform_async_with_http_info(id, platform, **kwargs)  # noqa: E501
            return data

    def organization_groups_get_sample_rates_by_platform_async_with_http_info(self, id, platform, **kwargs):  # noqa: E501
        """New - Provides the device sample rates.  # noqa: E501

        Provides the device sample rates for an organization group by platform.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_get_sample_rates_by_platform_async_with_http_info(id, platform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Organization Group Id.(Required). (required)
        :param object platform: The platform of device for which sample rates are requested.(Required) (required)
        :return: DeviceSampleRates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'platform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_get_sample_rates_by_platform_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `organization_groups_get_sample_rates_by_platform_async`")  # noqa: E501
        # verify the required parameter 'platform' is set
        if self.api_client.client_side_validation and ('platform' not in params or
                                                       params['platform'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `platform` when calling `organization_groups_get_sample_rates_by_platform_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}/samplerates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSampleRates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_location_group_search(self, **kwargs):  # noqa: E501
        """Searches for organization groups using the query information provided.  # noqa: E501

        Search organization group by given parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_location_group_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The OrganizationGroup name, such as \"Global\".
        :param str type: The OrganizationGroup type. (eg. \"Container\",\"Customer\",\"Partner\").
        :param str groupid: The organization group identifier[Activation code] to search for.[Exact match is performed for this attribute].
        :param str orderby: Orders the results based on this attribute-value[Valid values are: Id/Name/GroupId/LocationGroupType].
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified.
        :return: LocationGroupSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_location_group_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_location_group_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def organization_groups_location_group_search_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for organization groups using the query information provided.  # noqa: E501

        Search organization group by given parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_location_group_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The OrganizationGroup name, such as \"Global\".
        :param str type: The OrganizationGroup type. (eg. \"Container\",\"Customer\",\"Partner\").
        :param str groupid: The organization group identifier[Activation code] to search for.[Exact match is performed for this attribute].
        :param str orderby: Orders the results based on this attribute-value[Valid values are: Id/Name/GroupId/LocationGroupType].
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified.
        :return: LocationGroupSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'groupid', 'orderby', 'page', 'pagesize', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_location_group_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'groupid' in params:
            query_params.append(('groupid', params['groupid']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocationGroupSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_update_location_group(self, id, **kwargs):  # noqa: E501
        """Updates the metadata of the specified organization group.  # noqa: E501

        update the metadata of organization group specified by ID. It return bad request if organization group name too long or group id too long.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_update_location_group(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Organization Group Identifier. (required)
        :param LocationGroup_ location_group: An organization group resource containing the updated values.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_update_location_group_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_update_location_group_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organization_groups_update_location_group_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates the metadata of the specified organization group.  # noqa: E501

        update the metadata of organization group specified by ID. It return bad request if organization group name too long or group id too long.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_update_location_group_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The Organization Group Identifier. (required)
        :param LocationGroup_ location_group: An organization group resource containing the updated values.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'location_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_update_location_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `organization_groups_update_location_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'location_group' in params:
            body_params = params['location_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
