# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class MaintainProductStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step_type': 'int',
        'sequence_number': 'int',
        'file_action_id': 'int',
        'file_action_name': 'str',
        'event_action_id': 'int',
        'event_action_name': 'str',
        'profile_id': 'int',
        'profile_name': 'str',
        'application_id': 'int',
        'application_bundle_id': 'str',
        'application_package_version': 'str',
        'persist': 'bool',
        'app_tunneling': 'bool',
        'android_legacy_vpn_profile_uuid': 'str',
        'android_for_work_vpn_profile_uuid': 'str'
    }

    attribute_map = {
        'step_type': 'StepType',
        'sequence_number': 'SequenceNumber',
        'file_action_id': 'FileActionID',
        'file_action_name': 'FileActionName',
        'event_action_id': 'EventActionID',
        'event_action_name': 'EventActionName',
        'profile_id': 'ProfileID',
        'profile_name': 'ProfileName',
        'application_id': 'ApplicationID',
        'application_bundle_id': 'ApplicationBundleID',
        'application_package_version': 'ApplicationPackageVersion',
        'persist': 'Persist',
        'app_tunneling': 'AppTunneling',
        'android_legacy_vpn_profile_uuid': 'AndroidLegacyVpnProfileUuid',
        'android_for_work_vpn_profile_uuid': 'AndroidForWorkVpnProfileUuid'
    }

    def __init__(self, step_type=None, sequence_number=None, file_action_id=None, file_action_name=None, event_action_id=None, event_action_name=None, profile_id=None, profile_name=None, application_id=None, application_bundle_id=None, application_package_version=None, persist=None, app_tunneling=None, android_legacy_vpn_profile_uuid=None, android_for_work_vpn_profile_uuid=None, _configuration=None):  # noqa: E501
        """MaintainProductStep - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._step_type = None
        self._sequence_number = None
        self._file_action_id = None
        self._file_action_name = None
        self._event_action_id = None
        self._event_action_name = None
        self._profile_id = None
        self._profile_name = None
        self._application_id = None
        self._application_bundle_id = None
        self._application_package_version = None
        self._persist = None
        self._app_tunneling = None
        self._android_legacy_vpn_profile_uuid = None
        self._android_for_work_vpn_profile_uuid = None
        self.discriminator = None

        if step_type is not None:
            self.step_type = step_type
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if file_action_id is not None:
            self.file_action_id = file_action_id
        if file_action_name is not None:
            self.file_action_name = file_action_name
        if event_action_id is not None:
            self.event_action_id = event_action_id
        if event_action_name is not None:
            self.event_action_name = event_action_name
        if profile_id is not None:
            self.profile_id = profile_id
        if profile_name is not None:
            self.profile_name = profile_name
        if application_id is not None:
            self.application_id = application_id
        if application_bundle_id is not None:
            self.application_bundle_id = application_bundle_id
        if application_package_version is not None:
            self.application_package_version = application_package_version
        if persist is not None:
            self.persist = persist
        if app_tunneling is not None:
            self.app_tunneling = app_tunneling
        if android_legacy_vpn_profile_uuid is not None:
            self.android_legacy_vpn_profile_uuid = android_legacy_vpn_profile_uuid
        if android_for_work_vpn_profile_uuid is not None:
            self.android_for_work_vpn_profile_uuid = android_for_work_vpn_profile_uuid

    @property
    def step_type(self):
        """Gets the step_type of this MaintainProductStep.  # noqa: E501

        Gets or sets iD of action to perform.  # noqa: E501

        :return: The step_type of this MaintainProductStep.  # noqa: E501
        :rtype: int
        """
        return self._step_type

    @step_type.setter
    def step_type(self, step_type):
        """Sets the step_type of this MaintainProductStep.

        Gets or sets iD of action to perform.  # noqa: E501

        :param step_type: The step_type of this MaintainProductStep.  # noqa: E501
        :type: int
        """

        self._step_type = step_type

    @property
    def sequence_number(self):
        """Gets the sequence_number of this MaintainProductStep.  # noqa: E501

        Gets or sets sequence Number of the action.  # noqa: E501

        :return: The sequence_number of this MaintainProductStep.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this MaintainProductStep.

        Gets or sets sequence Number of the action.  # noqa: E501

        :param sequence_number: The sequence_number of this MaintainProductStep.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def file_action_id(self):
        """Gets the file_action_id of this MaintainProductStep.  # noqa: E501

        Gets or sets iD of File Action.  # noqa: E501

        :return: The file_action_id of this MaintainProductStep.  # noqa: E501
        :rtype: int
        """
        return self._file_action_id

    @file_action_id.setter
    def file_action_id(self, file_action_id):
        """Sets the file_action_id of this MaintainProductStep.

        Gets or sets iD of File Action.  # noqa: E501

        :param file_action_id: The file_action_id of this MaintainProductStep.  # noqa: E501
        :type: int
        """

        self._file_action_id = file_action_id

    @property
    def file_action_name(self):
        """Gets the file_action_name of this MaintainProductStep.  # noqa: E501

        Gets or sets name of File Action.  # noqa: E501

        :return: The file_action_name of this MaintainProductStep.  # noqa: E501
        :rtype: str
        """
        return self._file_action_name

    @file_action_name.setter
    def file_action_name(self, file_action_name):
        """Sets the file_action_name of this MaintainProductStep.

        Gets or sets name of File Action.  # noqa: E501

        :param file_action_name: The file_action_name of this MaintainProductStep.  # noqa: E501
        :type: str
        """

        self._file_action_name = file_action_name

    @property
    def event_action_id(self):
        """Gets the event_action_id of this MaintainProductStep.  # noqa: E501

        Gets or sets iD of Event Action.  # noqa: E501

        :return: The event_action_id of this MaintainProductStep.  # noqa: E501
        :rtype: int
        """
        return self._event_action_id

    @event_action_id.setter
    def event_action_id(self, event_action_id):
        """Sets the event_action_id of this MaintainProductStep.

        Gets or sets iD of Event Action.  # noqa: E501

        :param event_action_id: The event_action_id of this MaintainProductStep.  # noqa: E501
        :type: int
        """

        self._event_action_id = event_action_id

    @property
    def event_action_name(self):
        """Gets the event_action_name of this MaintainProductStep.  # noqa: E501

        Gets or sets name of Event Action.  # noqa: E501

        :return: The event_action_name of this MaintainProductStep.  # noqa: E501
        :rtype: str
        """
        return self._event_action_name

    @event_action_name.setter
    def event_action_name(self, event_action_name):
        """Sets the event_action_name of this MaintainProductStep.

        Gets or sets name of Event Action.  # noqa: E501

        :param event_action_name: The event_action_name of this MaintainProductStep.  # noqa: E501
        :type: str
        """

        self._event_action_name = event_action_name

    @property
    def profile_id(self):
        """Gets the profile_id of this MaintainProductStep.  # noqa: E501

        Gets or sets iD of Profile.  # noqa: E501

        :return: The profile_id of this MaintainProductStep.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this MaintainProductStep.

        Gets or sets iD of Profile.  # noqa: E501

        :param profile_id: The profile_id of this MaintainProductStep.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    @property
    def profile_name(self):
        """Gets the profile_name of this MaintainProductStep.  # noqa: E501

        Gets or sets name of Profile.  # noqa: E501

        :return: The profile_name of this MaintainProductStep.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this MaintainProductStep.

        Gets or sets name of Profile.  # noqa: E501

        :param profile_name: The profile_name of this MaintainProductStep.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def application_id(self):
        """Gets the application_id of this MaintainProductStep.  # noqa: E501

        Gets or sets identifier for Application.  # noqa: E501

        :return: The application_id of this MaintainProductStep.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this MaintainProductStep.

        Gets or sets identifier for Application.  # noqa: E501

        :param application_id: The application_id of this MaintainProductStep.  # noqa: E501
        :type: int
        """

        self._application_id = application_id

    @property
    def application_bundle_id(self):
        """Gets the application_bundle_id of this MaintainProductStep.  # noqa: E501

        Gets or sets identifier for Application Bundle.  # noqa: E501

        :return: The application_bundle_id of this MaintainProductStep.  # noqa: E501
        :rtype: str
        """
        return self._application_bundle_id

    @application_bundle_id.setter
    def application_bundle_id(self, application_bundle_id):
        """Sets the application_bundle_id of this MaintainProductStep.

        Gets or sets identifier for Application Bundle.  # noqa: E501

        :param application_bundle_id: The application_bundle_id of this MaintainProductStep.  # noqa: E501
        :type: str
        """

        self._application_bundle_id = application_bundle_id

    @property
    def application_package_version(self):
        """Gets the application_package_version of this MaintainProductStep.  # noqa: E501

        Gets or sets version of Application Package.  # noqa: E501

        :return: The application_package_version of this MaintainProductStep.  # noqa: E501
        :rtype: str
        """
        return self._application_package_version

    @application_package_version.setter
    def application_package_version(self, application_package_version):
        """Sets the application_package_version of this MaintainProductStep.

        Gets or sets version of Application Package.  # noqa: E501

        :param application_package_version: The application_package_version of this MaintainProductStep.  # noqa: E501
        :type: str
        """

        self._application_package_version = application_package_version

    @property
    def persist(self):
        """Gets the persist of this MaintainProductStep.  # noqa: E501

        Gets or sets a value indicating whether whether persistent through enterprise reset.  # noqa: E501

        :return: The persist of this MaintainProductStep.  # noqa: E501
        :rtype: bool
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this MaintainProductStep.

        Gets or sets a value indicating whether whether persistent through enterprise reset.  # noqa: E501

        :param persist: The persist of this MaintainProductStep.  # noqa: E501
        :type: bool
        """

        self._persist = persist

    @property
    def app_tunneling(self):
        """Gets the app_tunneling of this MaintainProductStep.  # noqa: E501

        Gets or sets a value indicating whether gets or Sets whether AppTunneling should be configured.  # noqa: E501

        :return: The app_tunneling of this MaintainProductStep.  # noqa: E501
        :rtype: bool
        """
        return self._app_tunneling

    @app_tunneling.setter
    def app_tunneling(self, app_tunneling):
        """Sets the app_tunneling of this MaintainProductStep.

        Gets or sets a value indicating whether gets or Sets whether AppTunneling should be configured.  # noqa: E501

        :param app_tunneling: The app_tunneling of this MaintainProductStep.  # noqa: E501
        :type: bool
        """

        self._app_tunneling = app_tunneling

    @property
    def android_legacy_vpn_profile_uuid(self):
        """Gets the android_legacy_vpn_profile_uuid of this MaintainProductStep.  # noqa: E501

        Gets or Sets Android Legacy VPN profile UUID.  # noqa: E501

        :return: The android_legacy_vpn_profile_uuid of this MaintainProductStep.  # noqa: E501
        :rtype: str
        """
        return self._android_legacy_vpn_profile_uuid

    @android_legacy_vpn_profile_uuid.setter
    def android_legacy_vpn_profile_uuid(self, android_legacy_vpn_profile_uuid):
        """Sets the android_legacy_vpn_profile_uuid of this MaintainProductStep.

        Gets or Sets Android Legacy VPN profile UUID.  # noqa: E501

        :param android_legacy_vpn_profile_uuid: The android_legacy_vpn_profile_uuid of this MaintainProductStep.  # noqa: E501
        :type: str
        """

        self._android_legacy_vpn_profile_uuid = android_legacy_vpn_profile_uuid

    @property
    def android_for_work_vpn_profile_uuid(self):
        """Gets the android_for_work_vpn_profile_uuid of this MaintainProductStep.  # noqa: E501

        Gets or Sets Android For Work VPN profile UUID.  # noqa: E501

        :return: The android_for_work_vpn_profile_uuid of this MaintainProductStep.  # noqa: E501
        :rtype: str
        """
        return self._android_for_work_vpn_profile_uuid

    @android_for_work_vpn_profile_uuid.setter
    def android_for_work_vpn_profile_uuid(self, android_for_work_vpn_profile_uuid):
        """Sets the android_for_work_vpn_profile_uuid of this MaintainProductStep.

        Gets or Sets Android For Work VPN profile UUID.  # noqa: E501

        :param android_for_work_vpn_profile_uuid: The android_for_work_vpn_profile_uuid of this MaintainProductStep.  # noqa: E501
        :type: str
        """

        self._android_for_work_vpn_profile_uuid = android_for_work_vpn_profile_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintainProductStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintainProductStep):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaintainProductStep):
            return True

        return self.to_dict() != other.to_dict()
