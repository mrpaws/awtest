# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class MdmEnrollmentProgramApiModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shared_mdm_profile_data_id': 'int',
        'dep_authentication_id': 'int',
        'profile_name': 'str',
        'department': 'str',
        'support_number': 'str',
        'require_mdm_enrollment': 'bool',
        'supervise_devices': 'bool',
        'is_multi_user': 'bool',
        'is_mdm_removable': 'bool',
        'token_location_group_id': 'int',
        'hdn_token_id': 'int',
        'device_pairing': 'bool',
        'skip_location_services': 'bool',
        'skip_restoring_from_backup': 'bool',
        'skip_android': 'bool',
        'skip_signing_with_apple_id': 'bool',
        'skip_termsof_use': 'bool',
        'skip_siri': 'bool',
        'skip_diagnostics': 'bool',
        'skip_passcode': 'bool',
        'skip_registration': 'bool',
        'staging_mode': 'int',
        'enrollment_username': 'str',
        'device_ownership_id': 'int',
        'default_enrollment_user_id': 'int',
        'device_location_group_id': 'int',
        'assign_profile': 'bool',
        'auto_assign_default_profile': 'bool',
        'authentication_required': 'bool',
        'session_id': 'str',
        'org_magic': 'str',
        'custom_prompt_required': 'bool',
        'message_template_id': 'int',
        'skip_apple_pay': 'bool',
        'skip_zoom': 'bool',
        'skip_biometric': 'bool',
        'await_configuration': 'bool',
        'host_pairing_certificate_ids': 'list[int]',
        'skip_primary_setup_account_creation': 'bool',
        'account_type': 'str',
        'user_name': 'str',
        'full_name': 'str',
        'password': 'str',
        'enable_unique_random_password_for_admin_account': 'bool',
        'hidden': 'bool',
        'skip_file_vault': 'bool',
        'skip_display_tone': 'bool',
        'auto_advance_setup': 'bool',
        'skip_home_button_sensitivity': 'bool',
        'skip_tap_to_setup': 'bool',
        'skip_screen_saver': 'bool',
        'skip_keyboard': 'bool',
        'skip_on_boarding': 'bool',
        'skipi_cloud_diagnostics': 'bool',
        'skip_watch_migration': 'bool',
        'skip_tv_home_screen_sync': 'bool',
        'skip_tv_provider_sign_in': 'bool',
        'skip_tv_room': 'bool',
        'skip_privacy': 'bool',
        'skipi_cloud_storage': 'bool',
        'skipi_message_and_face_time': 'bool',
        'skip_software_update': 'bool',
        'skip_screen_time': 'bool',
        'skip_sim_setup': 'bool',
        'skip_express_language': 'bool',
        'skip_preferred_language': 'bool',
        'skip_welcome': 'bool',
        'skip_device_to_device_migration': 'bool',
        'skip_choose_your_look': 'bool',
        'skip_update_completed': 'bool',
        'skip_restore_completed': 'bool',
        'skip_app_store': 'bool',
        'skip_accessibility': 'bool',
        'unique_key': 'str',
        'anchor_certificate_ids': 'list[int]',
        'enable_custom_enrollment': 'bool',
        'primary_account_user_name': 'str',
        'primary_account_full_name': 'str',
        'primary_account_auto_fill': 'bool',
        'primary_account_allow_editing': 'bool',
        'profile_identifier': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'shared_mdm_profile_data_id': 'SharedMdmProfileDataId',
        'dep_authentication_id': 'DepAuthenticationId',
        'profile_name': 'ProfileName',
        'department': 'Department',
        'support_number': 'SupportNumber',
        'require_mdm_enrollment': 'RequireMdmEnrollment',
        'supervise_devices': 'SuperviseDevices',
        'is_multi_user': 'IsMultiUser',
        'is_mdm_removable': 'IsMdmRemovable',
        'token_location_group_id': 'TokenLocationGroupId',
        'hdn_token_id': 'HdnTokenId',
        'device_pairing': 'DevicePairing',
        'skip_location_services': 'SkipLocationServices',
        'skip_restoring_from_backup': 'SkipRestoringFromBackup',
        'skip_android': 'SkipAndroid',
        'skip_signing_with_apple_id': 'SkipSigningWithAppleId',
        'skip_termsof_use': 'SkipTermsofUse',
        'skip_siri': 'SkipSiri',
        'skip_diagnostics': 'SkipDiagnostics',
        'skip_passcode': 'SkipPasscode',
        'skip_registration': 'SkipRegistration',
        'staging_mode': 'StagingMode',
        'enrollment_username': 'EnrollmentUsername',
        'device_ownership_id': 'DeviceOwnershipId',
        'default_enrollment_user_id': 'DefaultEnrollmentUserId',
        'device_location_group_id': 'DeviceLocationGroupId',
        'assign_profile': 'AssignProfile',
        'auto_assign_default_profile': 'AutoAssignDefaultProfile',
        'authentication_required': 'AuthenticationRequired',
        'session_id': 'SessionId',
        'org_magic': 'OrgMagic',
        'custom_prompt_required': 'CustomPromptRequired',
        'message_template_id': 'MessageTemplateId',
        'skip_apple_pay': 'SkipApplePay',
        'skip_zoom': 'SkipZoom',
        'skip_biometric': 'SkipBiometric',
        'await_configuration': 'AwaitConfiguration',
        'host_pairing_certificate_ids': 'HostPairingCertificateIDs',
        'skip_primary_setup_account_creation': 'SkipPrimarySetupAccountCreation',
        'account_type': 'AccountType',
        'user_name': 'UserName',
        'full_name': 'FullName',
        'password': 'Password',
        'enable_unique_random_password_for_admin_account': 'EnableUniqueRandomPasswordForAdminAccount',
        'hidden': 'Hidden',
        'skip_file_vault': 'SkipFileVault',
        'skip_display_tone': 'SkipDisplayTone',
        'auto_advance_setup': 'AutoAdvanceSetup',
        'skip_home_button_sensitivity': 'SkipHomeButtonSensitivity',
        'skip_tap_to_setup': 'SkipTapToSetup',
        'skip_screen_saver': 'SkipScreenSaver',
        'skip_keyboard': 'SkipKeyboard',
        'skip_on_boarding': 'SkipOnBoarding',
        'skipi_cloud_diagnostics': 'SkipiCloudDiagnostics',
        'skip_watch_migration': 'SkipWatchMigration',
        'skip_tv_home_screen_sync': 'SkipTvHomeScreenSync',
        'skip_tv_provider_sign_in': 'SkipTvProviderSignIn',
        'skip_tv_room': 'SkipTVRoom',
        'skip_privacy': 'SkipPrivacy',
        'skipi_cloud_storage': 'SkipiCloudStorage',
        'skipi_message_and_face_time': 'SkipiMessageAndFaceTime',
        'skip_software_update': 'SkipSoftwareUpdate',
        'skip_screen_time': 'SkipScreenTime',
        'skip_sim_setup': 'SkipSIMSetup',
        'skip_express_language': 'SkipExpressLanguage',
        'skip_preferred_language': 'SkipPreferredLanguage',
        'skip_welcome': 'SkipWelcome',
        'skip_device_to_device_migration': 'SkipDeviceToDeviceMigration',
        'skip_choose_your_look': 'SkipChooseYourLook',
        'skip_update_completed': 'SkipUpdateCompleted',
        'skip_restore_completed': 'SkipRestoreCompleted',
        'skip_app_store': 'skip_app_store',
        'skip_accessibility': 'SkipAccessibility',
        'unique_key': 'UniqueKey',
        'anchor_certificate_ids': 'AnchorCertificateIDs',
        'enable_custom_enrollment': 'EnableCustomEnrollment',
        'primary_account_user_name': 'PrimaryAccountUserName',
        'primary_account_full_name': 'PrimaryAccountFullName',
        'primary_account_auto_fill': 'PrimaryAccountAutoFill',
        'primary_account_allow_editing': 'PrimaryAccountAllowEditing',
        'profile_identifier': 'profile_identifier',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, shared_mdm_profile_data_id=None, dep_authentication_id=None, profile_name=None, department=None, support_number=None, require_mdm_enrollment=None, supervise_devices=None, is_multi_user=None, is_mdm_removable=None, token_location_group_id=None, hdn_token_id=None, device_pairing=None, skip_location_services=None, skip_restoring_from_backup=None, skip_android=None, skip_signing_with_apple_id=None, skip_termsof_use=None, skip_siri=None, skip_diagnostics=None, skip_passcode=None, skip_registration=None, staging_mode=None, enrollment_username=None, device_ownership_id=None, default_enrollment_user_id=None, device_location_group_id=None, assign_profile=None, auto_assign_default_profile=None, authentication_required=None, session_id=None, org_magic=None, custom_prompt_required=None, message_template_id=None, skip_apple_pay=None, skip_zoom=None, skip_biometric=None, await_configuration=None, host_pairing_certificate_ids=None, skip_primary_setup_account_creation=None, account_type=None, user_name=None, full_name=None, password=None, enable_unique_random_password_for_admin_account=None, hidden=None, skip_file_vault=None, skip_display_tone=None, auto_advance_setup=None, skip_home_button_sensitivity=None, skip_tap_to_setup=None, skip_screen_saver=None, skip_keyboard=None, skip_on_boarding=None, skipi_cloud_diagnostics=None, skip_watch_migration=None, skip_tv_home_screen_sync=None, skip_tv_provider_sign_in=None, skip_tv_room=None, skip_privacy=None, skipi_cloud_storage=None, skipi_message_and_face_time=None, skip_software_update=None, skip_screen_time=None, skip_sim_setup=None, skip_express_language=None, skip_preferred_language=None, skip_welcome=None, skip_device_to_device_migration=None, skip_choose_your_look=None, skip_update_completed=None, skip_restore_completed=None, skip_app_store=None, skip_accessibility=None, unique_key=None, anchor_certificate_ids=None, enable_custom_enrollment=None, primary_account_user_name=None, primary_account_full_name=None, primary_account_auto_fill=None, primary_account_allow_editing=None, profile_identifier=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """MdmEnrollmentProgramApiModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._shared_mdm_profile_data_id = None
        self._dep_authentication_id = None
        self._profile_name = None
        self._department = None
        self._support_number = None
        self._require_mdm_enrollment = None
        self._supervise_devices = None
        self._is_multi_user = None
        self._is_mdm_removable = None
        self._token_location_group_id = None
        self._hdn_token_id = None
        self._device_pairing = None
        self._skip_location_services = None
        self._skip_restoring_from_backup = None
        self._skip_android = None
        self._skip_signing_with_apple_id = None
        self._skip_termsof_use = None
        self._skip_siri = None
        self._skip_diagnostics = None
        self._skip_passcode = None
        self._skip_registration = None
        self._staging_mode = None
        self._enrollment_username = None
        self._device_ownership_id = None
        self._default_enrollment_user_id = None
        self._device_location_group_id = None
        self._assign_profile = None
        self._auto_assign_default_profile = None
        self._authentication_required = None
        self._session_id = None
        self._org_magic = None
        self._custom_prompt_required = None
        self._message_template_id = None
        self._skip_apple_pay = None
        self._skip_zoom = None
        self._skip_biometric = None
        self._await_configuration = None
        self._host_pairing_certificate_ids = None
        self._skip_primary_setup_account_creation = None
        self._account_type = None
        self._user_name = None
        self._full_name = None
        self._password = None
        self._enable_unique_random_password_for_admin_account = None
        self._hidden = None
        self._skip_file_vault = None
        self._skip_display_tone = None
        self._auto_advance_setup = None
        self._skip_home_button_sensitivity = None
        self._skip_tap_to_setup = None
        self._skip_screen_saver = None
        self._skip_keyboard = None
        self._skip_on_boarding = None
        self._skipi_cloud_diagnostics = None
        self._skip_watch_migration = None
        self._skip_tv_home_screen_sync = None
        self._skip_tv_provider_sign_in = None
        self._skip_tv_room = None
        self._skip_privacy = None
        self._skipi_cloud_storage = None
        self._skipi_message_and_face_time = None
        self._skip_software_update = None
        self._skip_screen_time = None
        self._skip_sim_setup = None
        self._skip_express_language = None
        self._skip_preferred_language = None
        self._skip_welcome = None
        self._skip_device_to_device_migration = None
        self._skip_choose_your_look = None
        self._skip_update_completed = None
        self._skip_restore_completed = None
        self._skip_app_store = None
        self._skip_accessibility = None
        self._unique_key = None
        self._anchor_certificate_ids = None
        self._enable_custom_enrollment = None
        self._primary_account_user_name = None
        self._primary_account_full_name = None
        self._primary_account_auto_fill = None
        self._primary_account_allow_editing = None
        self._profile_identifier = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if shared_mdm_profile_data_id is not None:
            self.shared_mdm_profile_data_id = shared_mdm_profile_data_id
        if dep_authentication_id is not None:
            self.dep_authentication_id = dep_authentication_id
        if profile_name is not None:
            self.profile_name = profile_name
        if department is not None:
            self.department = department
        if support_number is not None:
            self.support_number = support_number
        if require_mdm_enrollment is not None:
            self.require_mdm_enrollment = require_mdm_enrollment
        if supervise_devices is not None:
            self.supervise_devices = supervise_devices
        if is_multi_user is not None:
            self.is_multi_user = is_multi_user
        if is_mdm_removable is not None:
            self.is_mdm_removable = is_mdm_removable
        if token_location_group_id is not None:
            self.token_location_group_id = token_location_group_id
        if hdn_token_id is not None:
            self.hdn_token_id = hdn_token_id
        if device_pairing is not None:
            self.device_pairing = device_pairing
        if skip_location_services is not None:
            self.skip_location_services = skip_location_services
        if skip_restoring_from_backup is not None:
            self.skip_restoring_from_backup = skip_restoring_from_backup
        if skip_android is not None:
            self.skip_android = skip_android
        if skip_signing_with_apple_id is not None:
            self.skip_signing_with_apple_id = skip_signing_with_apple_id
        if skip_termsof_use is not None:
            self.skip_termsof_use = skip_termsof_use
        if skip_siri is not None:
            self.skip_siri = skip_siri
        if skip_diagnostics is not None:
            self.skip_diagnostics = skip_diagnostics
        if skip_passcode is not None:
            self.skip_passcode = skip_passcode
        if skip_registration is not None:
            self.skip_registration = skip_registration
        if staging_mode is not None:
            self.staging_mode = staging_mode
        if enrollment_username is not None:
            self.enrollment_username = enrollment_username
        if device_ownership_id is not None:
            self.device_ownership_id = device_ownership_id
        if default_enrollment_user_id is not None:
            self.default_enrollment_user_id = default_enrollment_user_id
        if device_location_group_id is not None:
            self.device_location_group_id = device_location_group_id
        if assign_profile is not None:
            self.assign_profile = assign_profile
        if auto_assign_default_profile is not None:
            self.auto_assign_default_profile = auto_assign_default_profile
        if authentication_required is not None:
            self.authentication_required = authentication_required
        if session_id is not None:
            self.session_id = session_id
        if org_magic is not None:
            self.org_magic = org_magic
        if custom_prompt_required is not None:
            self.custom_prompt_required = custom_prompt_required
        if message_template_id is not None:
            self.message_template_id = message_template_id
        if skip_apple_pay is not None:
            self.skip_apple_pay = skip_apple_pay
        if skip_zoom is not None:
            self.skip_zoom = skip_zoom
        if skip_biometric is not None:
            self.skip_biometric = skip_biometric
        if await_configuration is not None:
            self.await_configuration = await_configuration
        if host_pairing_certificate_ids is not None:
            self.host_pairing_certificate_ids = host_pairing_certificate_ids
        if skip_primary_setup_account_creation is not None:
            self.skip_primary_setup_account_creation = skip_primary_setup_account_creation
        if account_type is not None:
            self.account_type = account_type
        if user_name is not None:
            self.user_name = user_name
        if full_name is not None:
            self.full_name = full_name
        if password is not None:
            self.password = password
        if enable_unique_random_password_for_admin_account is not None:
            self.enable_unique_random_password_for_admin_account = enable_unique_random_password_for_admin_account
        if hidden is not None:
            self.hidden = hidden
        if skip_file_vault is not None:
            self.skip_file_vault = skip_file_vault
        if skip_display_tone is not None:
            self.skip_display_tone = skip_display_tone
        if auto_advance_setup is not None:
            self.auto_advance_setup = auto_advance_setup
        if skip_home_button_sensitivity is not None:
            self.skip_home_button_sensitivity = skip_home_button_sensitivity
        if skip_tap_to_setup is not None:
            self.skip_tap_to_setup = skip_tap_to_setup
        if skip_screen_saver is not None:
            self.skip_screen_saver = skip_screen_saver
        if skip_keyboard is not None:
            self.skip_keyboard = skip_keyboard
        if skip_on_boarding is not None:
            self.skip_on_boarding = skip_on_boarding
        if skipi_cloud_diagnostics is not None:
            self.skipi_cloud_diagnostics = skipi_cloud_diagnostics
        if skip_watch_migration is not None:
            self.skip_watch_migration = skip_watch_migration
        if skip_tv_home_screen_sync is not None:
            self.skip_tv_home_screen_sync = skip_tv_home_screen_sync
        if skip_tv_provider_sign_in is not None:
            self.skip_tv_provider_sign_in = skip_tv_provider_sign_in
        if skip_tv_room is not None:
            self.skip_tv_room = skip_tv_room
        if skip_privacy is not None:
            self.skip_privacy = skip_privacy
        if skipi_cloud_storage is not None:
            self.skipi_cloud_storage = skipi_cloud_storage
        if skipi_message_and_face_time is not None:
            self.skipi_message_and_face_time = skipi_message_and_face_time
        if skip_software_update is not None:
            self.skip_software_update = skip_software_update
        if skip_screen_time is not None:
            self.skip_screen_time = skip_screen_time
        if skip_sim_setup is not None:
            self.skip_sim_setup = skip_sim_setup
        if skip_express_language is not None:
            self.skip_express_language = skip_express_language
        if skip_preferred_language is not None:
            self.skip_preferred_language = skip_preferred_language
        if skip_welcome is not None:
            self.skip_welcome = skip_welcome
        if skip_device_to_device_migration is not None:
            self.skip_device_to_device_migration = skip_device_to_device_migration
        if skip_choose_your_look is not None:
            self.skip_choose_your_look = skip_choose_your_look
        if skip_update_completed is not None:
            self.skip_update_completed = skip_update_completed
        if skip_restore_completed is not None:
            self.skip_restore_completed = skip_restore_completed
        if skip_app_store is not None:
            self.skip_app_store = skip_app_store
        if skip_accessibility is not None:
            self.skip_accessibility = skip_accessibility
        if unique_key is not None:
            self.unique_key = unique_key
        if anchor_certificate_ids is not None:
            self.anchor_certificate_ids = anchor_certificate_ids
        if enable_custom_enrollment is not None:
            self.enable_custom_enrollment = enable_custom_enrollment
        if primary_account_user_name is not None:
            self.primary_account_user_name = primary_account_user_name
        if primary_account_full_name is not None:
            self.primary_account_full_name = primary_account_full_name
        if primary_account_auto_fill is not None:
            self.primary_account_auto_fill = primary_account_auto_fill
        if primary_account_allow_editing is not None:
            self.primary_account_allow_editing = primary_account_allow_editing
        if profile_identifier is not None:
            self.profile_identifier = profile_identifier
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def shared_mdm_profile_data_id(self):
        """Gets the shared_mdm_profile_data_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Shared MDM profile data ID.  # noqa: E501

        :return: The shared_mdm_profile_data_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._shared_mdm_profile_data_id

    @shared_mdm_profile_data_id.setter
    def shared_mdm_profile_data_id(self, shared_mdm_profile_data_id):
        """Sets the shared_mdm_profile_data_id of this MdmEnrollmentProgramApiModel.

        Shared MDM profile data ID.  # noqa: E501

        :param shared_mdm_profile_data_id: The shared_mdm_profile_data_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._shared_mdm_profile_data_id = shared_mdm_profile_data_id

    @property
    def dep_authentication_id(self):
        """Gets the dep_authentication_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        DEP authentication ID.  # noqa: E501

        :return: The dep_authentication_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._dep_authentication_id

    @dep_authentication_id.setter
    def dep_authentication_id(self, dep_authentication_id):
        """Sets the dep_authentication_id of this MdmEnrollmentProgramApiModel.

        DEP authentication ID.  # noqa: E501

        :param dep_authentication_id: The dep_authentication_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._dep_authentication_id = dep_authentication_id

    @property
    def profile_name(self):
        """Gets the profile_name of this MdmEnrollmentProgramApiModel.  # noqa: E501

        The profile name.  # noqa: E501

        :return: The profile_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this MdmEnrollmentProgramApiModel.

        The profile name.  # noqa: E501

        :param profile_name: The profile_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def department(self):
        """Gets the department of this MdmEnrollmentProgramApiModel.  # noqa: E501

        The profile department.  # noqa: E501

        :return: The department of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this MdmEnrollmentProgramApiModel.

        The profile department.  # noqa: E501

        :param department: The department of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                department is not None and len(department) > 125):
            raise ValueError("Invalid value for `department`, length must be less than or equal to `125`")  # noqa: E501
        if (self._configuration.client_side_validation and
                department is not None and len(department) < 1):
            raise ValueError("Invalid value for `department`, length must be greater than or equal to `1`")  # noqa: E501

        self._department = department

    @property
    def support_number(self):
        """Gets the support_number of this MdmEnrollmentProgramApiModel.  # noqa: E501

        The profile support number.  # noqa: E501

        :return: The support_number of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._support_number

    @support_number.setter
    def support_number(self, support_number):
        """Sets the support_number of this MdmEnrollmentProgramApiModel.

        The profile support number.  # noqa: E501

        :param support_number: The support_number of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._support_number = support_number

    @property
    def require_mdm_enrollment(self):
        """Gets the require_mdm_enrollment of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether MDM enrollment is required.  # noqa: E501

        :return: The require_mdm_enrollment of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._require_mdm_enrollment

    @require_mdm_enrollment.setter
    def require_mdm_enrollment(self, require_mdm_enrollment):
        """Sets the require_mdm_enrollment of this MdmEnrollmentProgramApiModel.

        Flag indicating whether MDM enrollment is required.  # noqa: E501

        :param require_mdm_enrollment: The require_mdm_enrollment of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._require_mdm_enrollment = require_mdm_enrollment

    @property
    def supervise_devices(self):
        """Gets the supervise_devices of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether devices are supervised.  # noqa: E501

        :return: The supervise_devices of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._supervise_devices

    @supervise_devices.setter
    def supervise_devices(self, supervise_devices):
        """Sets the supervise_devices of this MdmEnrollmentProgramApiModel.

        Flag indicating whether devices are supervised.  # noqa: E501

        :param supervise_devices: The supervise_devices of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._supervise_devices = supervise_devices

    @property
    def is_multi_user(self):
        """Gets the is_multi_user of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether is multi user.  # noqa: E501

        :return: The is_multi_user of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_multi_user

    @is_multi_user.setter
    def is_multi_user(self, is_multi_user):
        """Sets the is_multi_user of this MdmEnrollmentProgramApiModel.

        Flag indicating whether is multi user.  # noqa: E501

        :param is_multi_user: The is_multi_user of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._is_multi_user = is_multi_user

    @property
    def is_mdm_removable(self):
        """Gets the is_mdm_removable of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether is MDM removable.  # noqa: E501

        :return: The is_mdm_removable of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_mdm_removable

    @is_mdm_removable.setter
    def is_mdm_removable(self, is_mdm_removable):
        """Sets the is_mdm_removable of this MdmEnrollmentProgramApiModel.

        Flag indicating whether is MDM removable.  # noqa: E501

        :param is_mdm_removable: The is_mdm_removable of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._is_mdm_removable = is_mdm_removable

    @property
    def token_location_group_id(self):
        """Gets the token_location_group_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Token organization group ID.  # noqa: E501

        :return: The token_location_group_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._token_location_group_id

    @token_location_group_id.setter
    def token_location_group_id(self, token_location_group_id):
        """Sets the token_location_group_id of this MdmEnrollmentProgramApiModel.

        Token organization group ID.  # noqa: E501

        :param token_location_group_id: The token_location_group_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._token_location_group_id = token_location_group_id

    @property
    def hdn_token_id(self):
        """Gets the hdn_token_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        The hdn token ID.  # noqa: E501

        :return: The hdn_token_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._hdn_token_id

    @hdn_token_id.setter
    def hdn_token_id(self, hdn_token_id):
        """Sets the hdn_token_id of this MdmEnrollmentProgramApiModel.

        The hdn token ID.  # noqa: E501

        :param hdn_token_id: The hdn_token_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._hdn_token_id = hdn_token_id

    @property
    def device_pairing(self):
        """Gets the device_pairing of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating device pairing.  # noqa: E501

        :return: The device_pairing of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._device_pairing

    @device_pairing.setter
    def device_pairing(self, device_pairing):
        """Sets the device_pairing of this MdmEnrollmentProgramApiModel.

        Flag indicating device pairing.  # noqa: E501

        :param device_pairing: The device_pairing of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._device_pairing = device_pairing

    @property
    def skip_location_services(self):
        """Gets the skip_location_services of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip location services.  # noqa: E501

        :return: The skip_location_services of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_location_services

    @skip_location_services.setter
    def skip_location_services(self, skip_location_services):
        """Sets the skip_location_services of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip location services.  # noqa: E501

        :param skip_location_services: The skip_location_services of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_location_services = skip_location_services

    @property
    def skip_restoring_from_backup(self):
        """Gets the skip_restoring_from_backup of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip restoring from backup.  # noqa: E501

        :return: The skip_restoring_from_backup of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_restoring_from_backup

    @skip_restoring_from_backup.setter
    def skip_restoring_from_backup(self, skip_restoring_from_backup):
        """Sets the skip_restoring_from_backup of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip restoring from backup.  # noqa: E501

        :param skip_restoring_from_backup: The skip_restoring_from_backup of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_restoring_from_backup = skip_restoring_from_backup

    @property
    def skip_android(self):
        """Gets the skip_android of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip Android.  # noqa: E501

        :return: The skip_android of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_android

    @skip_android.setter
    def skip_android(self, skip_android):
        """Sets the skip_android of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip Android.  # noqa: E501

        :param skip_android: The skip_android of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_android = skip_android

    @property
    def skip_signing_with_apple_id(self):
        """Gets the skip_signing_with_apple_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip signing with Apple ID.  # noqa: E501

        :return: The skip_signing_with_apple_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_signing_with_apple_id

    @skip_signing_with_apple_id.setter
    def skip_signing_with_apple_id(self, skip_signing_with_apple_id):
        """Sets the skip_signing_with_apple_id of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip signing with Apple ID.  # noqa: E501

        :param skip_signing_with_apple_id: The skip_signing_with_apple_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_signing_with_apple_id = skip_signing_with_apple_id

    @property
    def skip_termsof_use(self):
        """Gets the skip_termsof_use of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip terms of use.  # noqa: E501

        :return: The skip_termsof_use of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_termsof_use

    @skip_termsof_use.setter
    def skip_termsof_use(self, skip_termsof_use):
        """Sets the skip_termsof_use of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip terms of use.  # noqa: E501

        :param skip_termsof_use: The skip_termsof_use of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_termsof_use = skip_termsof_use

    @property
    def skip_siri(self):
        """Gets the skip_siri of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip Siri setup.  # noqa: E501

        :return: The skip_siri of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_siri

    @skip_siri.setter
    def skip_siri(self, skip_siri):
        """Sets the skip_siri of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip Siri setup.  # noqa: E501

        :param skip_siri: The skip_siri of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_siri = skip_siri

    @property
    def skip_diagnostics(self):
        """Gets the skip_diagnostics of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip diagnostics.  # noqa: E501

        :return: The skip_diagnostics of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_diagnostics

    @skip_diagnostics.setter
    def skip_diagnostics(self, skip_diagnostics):
        """Sets the skip_diagnostics of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip diagnostics.  # noqa: E501

        :param skip_diagnostics: The skip_diagnostics of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_diagnostics = skip_diagnostics

    @property
    def skip_passcode(self):
        """Gets the skip_passcode of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip passcode creation.  # noqa: E501

        :return: The skip_passcode of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_passcode

    @skip_passcode.setter
    def skip_passcode(self, skip_passcode):
        """Sets the skip_passcode of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip passcode creation.  # noqa: E501

        :param skip_passcode: The skip_passcode of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_passcode = skip_passcode

    @property
    def skip_registration(self):
        """Gets the skip_registration of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip registration.  # noqa: E501

        :return: The skip_registration of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_registration

    @skip_registration.setter
    def skip_registration(self, skip_registration):
        """Sets the skip_registration of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip registration.  # noqa: E501

        :param skip_registration: The skip_registration of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_registration = skip_registration

    @property
    def staging_mode(self):
        """Gets the staging_mode of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Staging mode.  # noqa: E501

        :return: The staging_mode of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._staging_mode

    @staging_mode.setter
    def staging_mode(self, staging_mode):
        """Sets the staging_mode of this MdmEnrollmentProgramApiModel.

        Staging mode.  # noqa: E501

        :param staging_mode: The staging_mode of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._staging_mode = staging_mode

    @property
    def enrollment_username(self):
        """Gets the enrollment_username of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Enrollment username.  # noqa: E501

        :return: The enrollment_username of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_username

    @enrollment_username.setter
    def enrollment_username(self, enrollment_username):
        """Sets the enrollment_username of this MdmEnrollmentProgramApiModel.

        Enrollment username.  # noqa: E501

        :param enrollment_username: The enrollment_username of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._enrollment_username = enrollment_username

    @property
    def device_ownership_id(self):
        """Gets the device_ownership_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Device ownership ID.  # noqa: E501

        :return: The device_ownership_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._device_ownership_id

    @device_ownership_id.setter
    def device_ownership_id(self, device_ownership_id):
        """Sets the device_ownership_id of this MdmEnrollmentProgramApiModel.

        Device ownership ID.  # noqa: E501

        :param device_ownership_id: The device_ownership_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._device_ownership_id = device_ownership_id

    @property
    def default_enrollment_user_id(self):
        """Gets the default_enrollment_user_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Default enrollment user ID.  # noqa: E501

        :return: The default_enrollment_user_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._default_enrollment_user_id

    @default_enrollment_user_id.setter
    def default_enrollment_user_id(self, default_enrollment_user_id):
        """Sets the default_enrollment_user_id of this MdmEnrollmentProgramApiModel.

        Default enrollment user ID.  # noqa: E501

        :param default_enrollment_user_id: The default_enrollment_user_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._default_enrollment_user_id = default_enrollment_user_id

    @property
    def device_location_group_id(self):
        """Gets the device_location_group_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Device location group ID.  # noqa: E501

        :return: The device_location_group_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._device_location_group_id

    @device_location_group_id.setter
    def device_location_group_id(self, device_location_group_id):
        """Sets the device_location_group_id of this MdmEnrollmentProgramApiModel.

        Device location group ID.  # noqa: E501

        :param device_location_group_id: The device_location_group_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._device_location_group_id = device_location_group_id

    @property
    def assign_profile(self):
        """Gets the assign_profile of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to assign profile.  # noqa: E501

        :return: The assign_profile of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._assign_profile

    @assign_profile.setter
    def assign_profile(self, assign_profile):
        """Sets the assign_profile of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to assign profile.  # noqa: E501

        :param assign_profile: The assign_profile of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._assign_profile = assign_profile

    @property
    def auto_assign_default_profile(self):
        """Gets the auto_assign_default_profile of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to auto assign default profile.  # noqa: E501

        :return: The auto_assign_default_profile of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._auto_assign_default_profile

    @auto_assign_default_profile.setter
    def auto_assign_default_profile(self, auto_assign_default_profile):
        """Sets the auto_assign_default_profile of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to auto assign default profile.  # noqa: E501

        :param auto_assign_default_profile: The auto_assign_default_profile of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._auto_assign_default_profile = auto_assign_default_profile

    @property
    def authentication_required(self):
        """Gets the authentication_required of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating if authentication is required.  # noqa: E501

        :return: The authentication_required of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._authentication_required

    @authentication_required.setter
    def authentication_required(self, authentication_required):
        """Sets the authentication_required of this MdmEnrollmentProgramApiModel.

        Flag indicating if authentication is required.  # noqa: E501

        :param authentication_required: The authentication_required of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._authentication_required = authentication_required

    @property
    def session_id(self):
        """Gets the session_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Session ID.  # noqa: E501

        :return: The session_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this MdmEnrollmentProgramApiModel.

        Session ID.  # noqa: E501

        :param session_id: The session_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def org_magic(self):
        """Gets the org_magic of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Org magic (A string that uniquely identifies various services that are managed by a single organization).  # noqa: E501

        :return: The org_magic of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._org_magic

    @org_magic.setter
    def org_magic(self, org_magic):
        """Sets the org_magic of this MdmEnrollmentProgramApiModel.

        Org magic (A string that uniquely identifies various services that are managed by a single organization).  # noqa: E501

        :param org_magic: The org_magic of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._org_magic = org_magic

    @property
    def custom_prompt_required(self):
        """Gets the custom_prompt_required of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether custom prompt is required.  # noqa: E501

        :return: The custom_prompt_required of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._custom_prompt_required

    @custom_prompt_required.setter
    def custom_prompt_required(self, custom_prompt_required):
        """Sets the custom_prompt_required of this MdmEnrollmentProgramApiModel.

        Flag indicating whether custom prompt is required.  # noqa: E501

        :param custom_prompt_required: The custom_prompt_required of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._custom_prompt_required = custom_prompt_required

    @property
    def message_template_id(self):
        """Gets the message_template_id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Message template ID.  # noqa: E501

        :return: The message_template_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._message_template_id

    @message_template_id.setter
    def message_template_id(self, message_template_id):
        """Sets the message_template_id of this MdmEnrollmentProgramApiModel.

        Message template ID.  # noqa: E501

        :param message_template_id: The message_template_id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._message_template_id = message_template_id

    @property
    def skip_apple_pay(self):
        """Gets the skip_apple_pay of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip Apple pay setup.  # noqa: E501

        :return: The skip_apple_pay of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_apple_pay

    @skip_apple_pay.setter
    def skip_apple_pay(self, skip_apple_pay):
        """Sets the skip_apple_pay of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip Apple pay setup.  # noqa: E501

        :param skip_apple_pay: The skip_apple_pay of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_apple_pay = skip_apple_pay

    @property
    def skip_zoom(self):
        """Gets the skip_zoom of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip Zoom.  # noqa: E501

        :return: The skip_zoom of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_zoom

    @skip_zoom.setter
    def skip_zoom(self, skip_zoom):
        """Sets the skip_zoom of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip Zoom.  # noqa: E501

        :param skip_zoom: The skip_zoom of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_zoom = skip_zoom

    @property
    def skip_biometric(self):
        """Gets the skip_biometric of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip biometric setup.  # noqa: E501

        :return: The skip_biometric of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_biometric

    @skip_biometric.setter
    def skip_biometric(self, skip_biometric):
        """Sets the skip_biometric of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip biometric setup.  # noqa: E501

        :param skip_biometric: The skip_biometric of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_biometric = skip_biometric

    @property
    def await_configuration(self):
        """Gets the await_configuration of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag value indicating whether await configuration.  # noqa: E501

        :return: The await_configuration of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._await_configuration

    @await_configuration.setter
    def await_configuration(self, await_configuration):
        """Sets the await_configuration of this MdmEnrollmentProgramApiModel.

        Flag value indicating whether await configuration.  # noqa: E501

        :param await_configuration: The await_configuration of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._await_configuration = await_configuration

    @property
    def host_pairing_certificate_ids(self):
        """Gets the host_pairing_certificate_ids of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Host pairing certificate IDs.  # noqa: E501

        :return: The host_pairing_certificate_ids of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._host_pairing_certificate_ids

    @host_pairing_certificate_ids.setter
    def host_pairing_certificate_ids(self, host_pairing_certificate_ids):
        """Sets the host_pairing_certificate_ids of this MdmEnrollmentProgramApiModel.

        Host pairing certificate IDs.  # noqa: E501

        :param host_pairing_certificate_ids: The host_pairing_certificate_ids of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: list[int]
        """

        self._host_pairing_certificate_ids = host_pairing_certificate_ids

    @property
    def skip_primary_setup_account_creation(self):
        """Gets the skip_primary_setup_account_creation of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip primary setup account creation.  # noqa: E501

        :return: The skip_primary_setup_account_creation of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_primary_setup_account_creation

    @skip_primary_setup_account_creation.setter
    def skip_primary_setup_account_creation(self, skip_primary_setup_account_creation):
        """Sets the skip_primary_setup_account_creation of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip primary setup account creation.  # noqa: E501

        :param skip_primary_setup_account_creation: The skip_primary_setup_account_creation of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_primary_setup_account_creation = skip_primary_setup_account_creation

    @property
    def account_type(self):
        """Gets the account_type of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Account type.  # noqa: E501

        :return: The account_type of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this MdmEnrollmentProgramApiModel.

        Account type.  # noqa: E501

        :param account_type: The account_type of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def user_name(self):
        """Gets the user_name of this MdmEnrollmentProgramApiModel.  # noqa: E501

        User name.  # noqa: E501

        :return: The user_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this MdmEnrollmentProgramApiModel.

        User name.  # noqa: E501

        :param user_name: The user_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def full_name(self):
        """Gets the full_name of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Full name.  # noqa: E501

        :return: The full_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this MdmEnrollmentProgramApiModel.

        Full name.  # noqa: E501

        :param full_name: The full_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def password(self):
        """Gets the password of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Password.  # noqa: E501

        :return: The password of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MdmEnrollmentProgramApiModel.

        Password.  # noqa: E501

        :param password: The password of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def enable_unique_random_password_for_admin_account(self):
        """Gets the enable_unique_random_password_for_admin_account of this MdmEnrollmentProgramApiModel.  # noqa: E501

        If true an unique random password will be auto generated for the admin account.  # noqa: E501

        :return: The enable_unique_random_password_for_admin_account of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable_unique_random_password_for_admin_account

    @enable_unique_random_password_for_admin_account.setter
    def enable_unique_random_password_for_admin_account(self, enable_unique_random_password_for_admin_account):
        """Sets the enable_unique_random_password_for_admin_account of this MdmEnrollmentProgramApiModel.

        If true an unique random password will be auto generated for the admin account.  # noqa: E501

        :param enable_unique_random_password_for_admin_account: The enable_unique_random_password_for_admin_account of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._enable_unique_random_password_for_admin_account = enable_unique_random_password_for_admin_account

    @property
    def hidden(self):
        """Gets the hidden of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether hidden.  # noqa: E501

        :return: The hidden of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this MdmEnrollmentProgramApiModel.

        Flag indicating whether hidden.  # noqa: E501

        :param hidden: The hidden of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def skip_file_vault(self):
        """Gets the skip_file_vault of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip file vault.  # noqa: E501

        :return: The skip_file_vault of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_file_vault

    @skip_file_vault.setter
    def skip_file_vault(self, skip_file_vault):
        """Sets the skip_file_vault of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip file vault.  # noqa: E501

        :param skip_file_vault: The skip_file_vault of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_file_vault = skip_file_vault

    @property
    def skip_display_tone(self):
        """Gets the skip_display_tone of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether to skip display tone on setup assistant for iOS device.  # noqa: E501

        :return: The skip_display_tone of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_display_tone

    @skip_display_tone.setter
    def skip_display_tone(self, skip_display_tone):
        """Sets the skip_display_tone of this MdmEnrollmentProgramApiModel.

        Flag indicating whether to skip display tone on setup assistant for iOS device.  # noqa: E501

        :param skip_display_tone: The skip_display_tone of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_display_tone = skip_display_tone

    @property
    def auto_advance_setup(self):
        """Gets the auto_advance_setup of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether use auto advance setup on tvOS devices.  # noqa: E501

        :return: The auto_advance_setup of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._auto_advance_setup

    @auto_advance_setup.setter
    def auto_advance_setup(self, auto_advance_setup):
        """Sets the auto_advance_setup of this MdmEnrollmentProgramApiModel.

        Flag indicating whether use auto advance setup on tvOS devices.  # noqa: E501

        :param auto_advance_setup: The auto_advance_setup of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._auto_advance_setup = auto_advance_setup

    @property
    def skip_home_button_sensitivity(self):
        """Gets the skip_home_button_sensitivity of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the home button sensitivity screen during iOS setup assistant.  # noqa: E501

        :return: The skip_home_button_sensitivity of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_home_button_sensitivity

    @skip_home_button_sensitivity.setter
    def skip_home_button_sensitivity(self, skip_home_button_sensitivity):
        """Sets the skip_home_button_sensitivity of this MdmEnrollmentProgramApiModel.

        Skips the home button sensitivity screen during iOS setup assistant.  # noqa: E501

        :param skip_home_button_sensitivity: The skip_home_button_sensitivity of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_home_button_sensitivity = skip_home_button_sensitivity

    @property
    def skip_tap_to_setup(self):
        """Gets the skip_tap_to_setup of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the tap to setup screen during tvOS setup assistant.  # noqa: E501

        :return: The skip_tap_to_setup of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_tap_to_setup

    @skip_tap_to_setup.setter
    def skip_tap_to_setup(self, skip_tap_to_setup):
        """Sets the skip_tap_to_setup of this MdmEnrollmentProgramApiModel.

        Skips the tap to setup screen during tvOS setup assistant.  # noqa: E501

        :param skip_tap_to_setup: The skip_tap_to_setup of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_tap_to_setup = skip_tap_to_setup

    @property
    def skip_screen_saver(self):
        """Gets the skip_screen_saver of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the screensaver screen during tvOS setup assistant.  # noqa: E501

        :return: The skip_screen_saver of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_screen_saver

    @skip_screen_saver.setter
    def skip_screen_saver(self, skip_screen_saver):
        """Sets the skip_screen_saver of this MdmEnrollmentProgramApiModel.

        Skips the screensaver screen during tvOS setup assistant.  # noqa: E501

        :param skip_screen_saver: The skip_screen_saver of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_screen_saver = skip_screen_saver

    @property
    def skip_keyboard(self):
        """Gets the skip_keyboard of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the keyboard selection screen in iOSsetup assistant  # noqa: E501

        :return: The skip_keyboard of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_keyboard

    @skip_keyboard.setter
    def skip_keyboard(self, skip_keyboard):
        """Sets the skip_keyboard of this MdmEnrollmentProgramApiModel.

        Skips the keyboard selection screen in iOSsetup assistant  # noqa: E501

        :param skip_keyboard: The skip_keyboard of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_keyboard = skip_keyboard

    @property
    def skip_on_boarding(self):
        """Gets the skip_on_boarding of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips on-boarding informational screens like Cover Sheet Multitasking and Control Center for iOS education user.  # noqa: E501

        :return: The skip_on_boarding of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_on_boarding

    @skip_on_boarding.setter
    def skip_on_boarding(self, skip_on_boarding):
        """Sets the skip_on_boarding of this MdmEnrollmentProgramApiModel.

        Skips on-boarding informational screens like Cover Sheet Multitasking and Control Center for iOS education user.  # noqa: E501

        :param skip_on_boarding: The skip_on_boarding of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_on_boarding = skip_on_boarding

    @property
    def skipi_cloud_diagnostics(self):
        """Gets the skipi_cloud_diagnostics of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips iCloud Analytics screen in macOS setup assistant.  # noqa: E501

        :return: The skipi_cloud_diagnostics of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skipi_cloud_diagnostics

    @skipi_cloud_diagnostics.setter
    def skipi_cloud_diagnostics(self, skipi_cloud_diagnostics):
        """Sets the skipi_cloud_diagnostics of this MdmEnrollmentProgramApiModel.

        Skips iCloud Analytics screen in macOS setup assistant.  # noqa: E501

        :param skipi_cloud_diagnostics: The skipi_cloud_diagnostics of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skipi_cloud_diagnostics = skipi_cloud_diagnostics

    @property
    def skip_watch_migration(self):
        """Gets the skip_watch_migration of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the screen for watch migration in iOS setup assistant.  # noqa: E501

        :return: The skip_watch_migration of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_watch_migration

    @skip_watch_migration.setter
    def skip_watch_migration(self, skip_watch_migration):
        """Sets the skip_watch_migration of this MdmEnrollmentProgramApiModel.

        Skips the screen for watch migration in iOS setup assistant.  # noqa: E501

        :param skip_watch_migration: The skip_watch_migration of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_watch_migration = skip_watch_migration

    @property
    def skip_tv_home_screen_sync(self):
        """Gets the skip_tv_home_screen_sync of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips TV home screen layout sync screen in tvOS setup assistant.  # noqa: E501

        :return: The skip_tv_home_screen_sync of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_tv_home_screen_sync

    @skip_tv_home_screen_sync.setter
    def skip_tv_home_screen_sync(self, skip_tv_home_screen_sync):
        """Sets the skip_tv_home_screen_sync of this MdmEnrollmentProgramApiModel.

        Skips TV home screen layout sync screen in tvOS setup assistant.  # noqa: E501

        :param skip_tv_home_screen_sync: The skip_tv_home_screen_sync of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_tv_home_screen_sync = skip_tv_home_screen_sync

    @property
    def skip_tv_provider_sign_in(self):
        """Gets the skip_tv_provider_sign_in of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the TV provider sign in screen in tvOS setup assistant  # noqa: E501

        :return: The skip_tv_provider_sign_in of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_tv_provider_sign_in

    @skip_tv_provider_sign_in.setter
    def skip_tv_provider_sign_in(self, skip_tv_provider_sign_in):
        """Sets the skip_tv_provider_sign_in of this MdmEnrollmentProgramApiModel.

        Skips the TV provider sign in screen in tvOS setup assistant  # noqa: E501

        :param skip_tv_provider_sign_in: The skip_tv_provider_sign_in of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_tv_provider_sign_in = skip_tv_provider_sign_in

    @property
    def skip_tv_room(self):
        """Gets the skip_tv_room of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the \"Where is this Apple TV?\" screen in tvOS.  # noqa: E501

        :return: The skip_tv_room of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_tv_room

    @skip_tv_room.setter
    def skip_tv_room(self, skip_tv_room):
        """Sets the skip_tv_room of this MdmEnrollmentProgramApiModel.

        Skips the \"Where is this Apple TV?\" screen in tvOS.  # noqa: E501

        :param skip_tv_room: The skip_tv_room of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_tv_room = skip_tv_room

    @property
    def skip_privacy(self):
        """Gets the skip_privacy of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips privacy pane for Apple devices  # noqa: E501

        :return: The skip_privacy of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_privacy

    @skip_privacy.setter
    def skip_privacy(self, skip_privacy):
        """Sets the skip_privacy of this MdmEnrollmentProgramApiModel.

        Skips privacy pane for Apple devices  # noqa: E501

        :param skip_privacy: The skip_privacy of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_privacy = skip_privacy

    @property
    def skipi_cloud_storage(self):
        """Gets the skipi_cloud_storage of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips iCloud Documents and Desktop screen in macOS.  # noqa: E501

        :return: The skipi_cloud_storage of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skipi_cloud_storage

    @skipi_cloud_storage.setter
    def skipi_cloud_storage(self, skipi_cloud_storage):
        """Sets the skipi_cloud_storage of this MdmEnrollmentProgramApiModel.

        Skips iCloud Documents and Desktop screen in macOS.  # noqa: E501

        :param skipi_cloud_storage: The skipi_cloud_storage of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skipi_cloud_storage = skipi_cloud_storage

    @property
    def skipi_message_and_face_time(self):
        """Gets the skipi_message_and_face_time of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the iMessage and FaceTime screen in iOS.  # noqa: E501

        :return: The skipi_message_and_face_time of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skipi_message_and_face_time

    @skipi_message_and_face_time.setter
    def skipi_message_and_face_time(self, skipi_message_and_face_time):
        """Sets the skipi_message_and_face_time of this MdmEnrollmentProgramApiModel.

        Skips the iMessage and FaceTime screen in iOS.  # noqa: E501

        :param skipi_message_and_face_time: The skipi_message_and_face_time of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skipi_message_and_face_time = skipi_message_and_face_time

    @property
    def skip_software_update(self):
        """Gets the skip_software_update of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the Software Update screen in iOS.  # noqa: E501

        :return: The skip_software_update of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_software_update

    @skip_software_update.setter
    def skip_software_update(self, skip_software_update):
        """Sets the skip_software_update of this MdmEnrollmentProgramApiModel.

        Skips the Software Update screen in iOS.  # noqa: E501

        :param skip_software_update: The skip_software_update of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_software_update = skip_software_update

    @property
    def skip_screen_time(self):
        """Gets the skip_screen_time of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the Screen Time screen in iOS.  # noqa: E501

        :return: The skip_screen_time of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_screen_time

    @skip_screen_time.setter
    def skip_screen_time(self, skip_screen_time):
        """Sets the skip_screen_time of this MdmEnrollmentProgramApiModel.

        Skips the Screen Time screen in iOS.  # noqa: E501

        :param skip_screen_time: The skip_screen_time of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_screen_time = skip_screen_time

    @property
    def skip_sim_setup(self):
        """Gets the skip_sim_setup of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the SIM Setup screen in iOS 12.1.  # noqa: E501

        :return: The skip_sim_setup of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_sim_setup

    @skip_sim_setup.setter
    def skip_sim_setup(self, skip_sim_setup):
        """Sets the skip_sim_setup of this MdmEnrollmentProgramApiModel.

        Skips the SIM Setup screen in iOS 12.1.  # noqa: E501

        :param skip_sim_setup: The skip_sim_setup of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_sim_setup = skip_sim_setup

    @property
    def skip_express_language(self):
        """Gets the skip_express_language of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the express language setup pane in iOS.  # noqa: E501

        :return: The skip_express_language of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_express_language

    @skip_express_language.setter
    def skip_express_language(self, skip_express_language):
        """Sets the skip_express_language of this MdmEnrollmentProgramApiModel.

        Skips the express language setup pane in iOS.  # noqa: E501

        :param skip_express_language: The skip_express_language of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_express_language = skip_express_language

    @property
    def skip_preferred_language(self):
        """Gets the skip_preferred_language of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the preferred language order pane in iOS.  # noqa: E501

        :return: The skip_preferred_language of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_preferred_language

    @skip_preferred_language.setter
    def skip_preferred_language(self, skip_preferred_language):
        """Sets the skip_preferred_language of this MdmEnrollmentProgramApiModel.

        Skips the preferred language order pane in iOS.  # noqa: E501

        :param skip_preferred_language: The skip_preferred_language of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_preferred_language = skip_preferred_language

    @property
    def skip_welcome(self):
        """Gets the skip_welcome of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the Welcome screen in iOS.  # noqa: E501

        :return: The skip_welcome of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_welcome

    @skip_welcome.setter
    def skip_welcome(self, skip_welcome):
        """Sets the skip_welcome of this MdmEnrollmentProgramApiModel.

        Skips the Welcome screen in iOS.  # noqa: E501

        :param skip_welcome: The skip_welcome of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_welcome = skip_welcome

    @property
    def skip_device_to_device_migration(self):
        """Gets the skip_device_to_device_migration of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the device to device migration pane in iOS.  # noqa: E501

        :return: The skip_device_to_device_migration of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_device_to_device_migration

    @skip_device_to_device_migration.setter
    def skip_device_to_device_migration(self, skip_device_to_device_migration):
        """Sets the skip_device_to_device_migration of this MdmEnrollmentProgramApiModel.

        Skips the device to device migration pane in iOS.  # noqa: E501

        :param skip_device_to_device_migration: The skip_device_to_device_migration of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_device_to_device_migration = skip_device_to_device_migration

    @property
    def skip_choose_your_look(self):
        """Gets the skip_choose_your_look of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the Choose Your Look screen in macOS.  # noqa: E501

        :return: The skip_choose_your_look of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_choose_your_look

    @skip_choose_your_look.setter
    def skip_choose_your_look(self, skip_choose_your_look):
        """Sets the skip_choose_your_look of this MdmEnrollmentProgramApiModel.

        Skips the Choose Your Look screen in macOS.  # noqa: E501

        :param skip_choose_your_look: The skip_choose_your_look of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_choose_your_look = skip_choose_your_look

    @property
    def skip_update_completed(self):
        """Gets the skip_update_completed of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the Update Completed pane in iOS.  # noqa: E501

        :return: The skip_update_completed of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_update_completed

    @skip_update_completed.setter
    def skip_update_completed(self, skip_update_completed):
        """Sets the skip_update_completed of this MdmEnrollmentProgramApiModel.

        Skips the Update Completed pane in iOS.  # noqa: E501

        :param skip_update_completed: The skip_update_completed of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_update_completed = skip_update_completed

    @property
    def skip_restore_completed(self):
        """Gets the skip_restore_completed of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the Restore Completed pane in iOS.  # noqa: E501

        :return: The skip_restore_completed of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_restore_completed

    @skip_restore_completed.setter
    def skip_restore_completed(self, skip_restore_completed):
        """Sets the skip_restore_completed of this MdmEnrollmentProgramApiModel.

        Skips the Restore Completed pane in iOS.  # noqa: E501

        :param skip_restore_completed: The skip_restore_completed of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_restore_completed = skip_restore_completed

    @property
    def skip_app_store(self):
        """Gets the skip_app_store of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the App Store information Screen.  # noqa: E501

        :return: The skip_app_store of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_app_store

    @skip_app_store.setter
    def skip_app_store(self, skip_app_store):
        """Sets the skip_app_store of this MdmEnrollmentProgramApiModel.

        Skips the App Store information Screen.  # noqa: E501

        :param skip_app_store: The skip_app_store of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_app_store = skip_app_store

    @property
    def skip_accessibility(self):
        """Gets the skip_accessibility of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Skips the Accessibility pane in macOS.  # noqa: E501

        :return: The skip_accessibility of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._skip_accessibility

    @skip_accessibility.setter
    def skip_accessibility(self, skip_accessibility):
        """Sets the skip_accessibility of this MdmEnrollmentProgramApiModel.

        Skips the Accessibility pane in macOS.  # noqa: E501

        :param skip_accessibility: The skip_accessibility of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._skip_accessibility = skip_accessibility

    @property
    def unique_key(self):
        """Gets the unique_key of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Apple Unique ID.  # noqa: E501

        :return: The unique_key of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._unique_key

    @unique_key.setter
    def unique_key(self, unique_key):
        """Sets the unique_key of this MdmEnrollmentProgramApiModel.

        Apple Unique ID.  # noqa: E501

        :param unique_key: The unique_key of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._unique_key = unique_key

    @property
    def anchor_certificate_ids(self):
        """Gets the anchor_certificate_ids of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Anchor certificate IDs.  # noqa: E501

        :return: The anchor_certificate_ids of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._anchor_certificate_ids

    @anchor_certificate_ids.setter
    def anchor_certificate_ids(self, anchor_certificate_ids):
        """Sets the anchor_certificate_ids of this MdmEnrollmentProgramApiModel.

        Anchor certificate IDs.  # noqa: E501

        :param anchor_certificate_ids: The anchor_certificate_ids of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: list[int]
        """

        self._anchor_certificate_ids = anchor_certificate_ids

    @property
    def enable_custom_enrollment(self):
        """Gets the enable_custom_enrollment of this MdmEnrollmentProgramApiModel.  # noqa: E501

        The flag to indicate if DEP custom web view based enrollment has been enabled.  # noqa: E501

        :return: The enable_custom_enrollment of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable_custom_enrollment

    @enable_custom_enrollment.setter
    def enable_custom_enrollment(self, enable_custom_enrollment):
        """Sets the enable_custom_enrollment of this MdmEnrollmentProgramApiModel.

        The flag to indicate if DEP custom web view based enrollment has been enabled.  # noqa: E501

        :param enable_custom_enrollment: The enable_custom_enrollment of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._enable_custom_enrollment = enable_custom_enrollment

    @property
    def primary_account_user_name(self):
        """Gets the primary_account_user_name of this MdmEnrollmentProgramApiModel.  # noqa: E501

        The account name for the primary account.  # noqa: E501

        :return: The primary_account_user_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._primary_account_user_name

    @primary_account_user_name.setter
    def primary_account_user_name(self, primary_account_user_name):
        """Sets the primary_account_user_name of this MdmEnrollmentProgramApiModel.

        The account name for the primary account.  # noqa: E501

        :param primary_account_user_name: The primary_account_user_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._primary_account_user_name = primary_account_user_name

    @property
    def primary_account_full_name(self):
        """Gets the primary_account_full_name of this MdmEnrollmentProgramApiModel.  # noqa: E501

        The full name for the primary account.  # noqa: E501

        :return: The primary_account_full_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._primary_account_full_name

    @primary_account_full_name.setter
    def primary_account_full_name(self, primary_account_full_name):
        """Sets the primary_account_full_name of this MdmEnrollmentProgramApiModel.

        The full name for the primary account.  # noqa: E501

        :param primary_account_full_name: The primary_account_full_name of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._primary_account_full_name = primary_account_full_name

    @property
    def primary_account_auto_fill(self):
        """Gets the primary_account_auto_fill of this MdmEnrollmentProgramApiModel.  # noqa: E501

        If false ignores the primary account information.  # noqa: E501

        :return: The primary_account_auto_fill of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._primary_account_auto_fill

    @primary_account_auto_fill.setter
    def primary_account_auto_fill(self, primary_account_auto_fill):
        """Sets the primary_account_auto_fill of this MdmEnrollmentProgramApiModel.

        If false ignores the primary account information.  # noqa: E501

        :param primary_account_auto_fill: The primary_account_auto_fill of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._primary_account_auto_fill = primary_account_auto_fill

    @property
    def primary_account_allow_editing(self):
        """Gets the primary_account_allow_editing of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Flag indicating whether editing is allowed for primary account.  # noqa: E501

        :return: The primary_account_allow_editing of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._primary_account_allow_editing

    @primary_account_allow_editing.setter
    def primary_account_allow_editing(self, primary_account_allow_editing):
        """Sets the primary_account_allow_editing of this MdmEnrollmentProgramApiModel.

        Flag indicating whether editing is allowed for primary account.  # noqa: E501

        :param primary_account_allow_editing: The primary_account_allow_editing of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: bool
        """

        self._primary_account_allow_editing = primary_account_allow_editing

    @property
    def profile_identifier(self):
        """Gets the profile_identifier of this MdmEnrollmentProgramApiModel.  # noqa: E501

        The UUID for the Device Enrollment Program profile.  # noqa: E501

        :return: The profile_identifier of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._profile_identifier

    @profile_identifier.setter
    def profile_identifier(self, profile_identifier):
        """Sets the profile_identifier of this MdmEnrollmentProgramApiModel.

        The UUID for the Device Enrollment Program profile.  # noqa: E501

        :param profile_identifier: The profile_identifier of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._profile_identifier = profile_identifier

    @property
    def id(self):
        """Gets the id of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MdmEnrollmentProgramApiModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this MdmEnrollmentProgramApiModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this MdmEnrollmentProgramApiModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this MdmEnrollmentProgramApiModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MdmEnrollmentProgramApiModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdmEnrollmentProgramApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MdmEnrollmentProgramApiModel):
            return True

        return self.to_dict() != other.to_dict()
