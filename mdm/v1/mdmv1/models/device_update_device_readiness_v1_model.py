# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceUpdateDeviceReadinessV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eligible': 'int',
        'not_eligible': 'int',
        'already_on_this_version': 'int',
        'on_higher_version': 'int'
    }

    attribute_map = {
        'eligible': 'eligible',
        'not_eligible': 'not_eligible',
        'already_on_this_version': 'already_on_this_version',
        'on_higher_version': 'on_higher_version'
    }

    def __init__(self, eligible=None, not_eligible=None, already_on_this_version=None, on_higher_version=None, _configuration=None):  # noqa: E501
        """DeviceUpdateDeviceReadinessV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._eligible = None
        self._not_eligible = None
        self._already_on_this_version = None
        self._on_higher_version = None
        self.discriminator = None

        if eligible is not None:
            self.eligible = eligible
        if not_eligible is not None:
            self.not_eligible = not_eligible
        if already_on_this_version is not None:
            self.already_on_this_version = already_on_this_version
        if on_higher_version is not None:
            self.on_higher_version = on_higher_version

    @property
    def eligible(self):
        """Gets the eligible of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501

        The count of devices eligible to receive the device update  # noqa: E501

        :return: The eligible of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501
        :rtype: int
        """
        return self._eligible

    @eligible.setter
    def eligible(self, eligible):
        """Sets the eligible of this DeviceUpdateDeviceReadinessV1Model.

        The count of devices eligible to receive the device update  # noqa: E501

        :param eligible: The eligible of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501
        :type: int
        """

        self._eligible = eligible

    @property
    def not_eligible(self):
        """Gets the not_eligible of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501

        The count of devices not eligible to receive the device update  # noqa: E501

        :return: The not_eligible of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501
        :rtype: int
        """
        return self._not_eligible

    @not_eligible.setter
    def not_eligible(self, not_eligible):
        """Sets the not_eligible of this DeviceUpdateDeviceReadinessV1Model.

        The count of devices not eligible to receive the device update  # noqa: E501

        :param not_eligible: The not_eligible of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501
        :type: int
        """

        self._not_eligible = not_eligible

    @property
    def already_on_this_version(self):
        """Gets the already_on_this_version of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501

        The count of devices already on the device update version  # noqa: E501

        :return: The already_on_this_version of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501
        :rtype: int
        """
        return self._already_on_this_version

    @already_on_this_version.setter
    def already_on_this_version(self, already_on_this_version):
        """Sets the already_on_this_version of this DeviceUpdateDeviceReadinessV1Model.

        The count of devices already on the device update version  # noqa: E501

        :param already_on_this_version: The already_on_this_version of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501
        :type: int
        """

        self._already_on_this_version = already_on_this_version

    @property
    def on_higher_version(self):
        """Gets the on_higher_version of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501

        The count of devices on a higher version than the selected device update version  # noqa: E501

        :return: The on_higher_version of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501
        :rtype: int
        """
        return self._on_higher_version

    @on_higher_version.setter
    def on_higher_version(self, on_higher_version):
        """Sets the on_higher_version of this DeviceUpdateDeviceReadinessV1Model.

        The count of devices on a higher version than the selected device update version  # noqa: E501

        :param on_higher_version: The on_higher_version of this DeviceUpdateDeviceReadinessV1Model.  # noqa: E501
        :type: int
        """

        self._on_higher_version = on_higher_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceUpdateDeviceReadinessV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceUpdateDeviceReadinessV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceUpdateDeviceReadinessV1Model):
            return True

        return self.to_dict() != other.to_dict()
