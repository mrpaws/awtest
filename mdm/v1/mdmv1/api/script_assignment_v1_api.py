# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class ScriptAssignmentV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def script_assignment_v1_add_script_assignment_async(self, script_uuid, create_script_assignment, **kwargs):  # noqa: E501
        """New - AddScriptAssignmentAsync  # noqa: E501

        Adds an assignment to script. Assignment information includes assigned smart groups and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_add_script_assignment_async(script_uuid, create_script_assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param CreateScriptAssignment create_script_assignment: Script assignment request model. Includes smart group uuids, triggers and assignment group name.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.script_assignment_v1_add_script_assignment_async_with_http_info(script_uuid, create_script_assignment, **kwargs)  # noqa: E501
        else:
            (data) = self.script_assignment_v1_add_script_assignment_async_with_http_info(script_uuid, create_script_assignment, **kwargs)  # noqa: E501
            return data

    def script_assignment_v1_add_script_assignment_async_with_http_info(self, script_uuid, create_script_assignment, **kwargs):  # noqa: E501
        """New - AddScriptAssignmentAsync  # noqa: E501

        Adds an assignment to script. Assignment information includes assigned smart groups and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_add_script_assignment_async_with_http_info(script_uuid, create_script_assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param CreateScriptAssignment create_script_assignment: Script assignment request model. Includes smart group uuids, triggers and assignment group name.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['script_uuid', 'create_script_assignment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method script_assignment_v1_add_script_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `script_assignment_v1_add_script_assignment_async`")  # noqa: E501
        # verify the required parameter 'create_script_assignment' is set
        if self.api_client.client_side_validation and ('create_script_assignment' not in params or
                                                       params['create_script_assignment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_script_assignment` when calling `script_assignment_v1_add_script_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_script_assignment' in params:
            body_params = params['create_script_assignment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scripts/{scriptUuid}/assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def script_assignment_v1_bulk_update_script_assignments_async(self, script_uuid, bulk_update_script_assignment, **kwargs):  # noqa: E501
        """New - BulkUpdateScriptAssignmentsAsync  # noqa: E501

        Updates the list of assignment for the script.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_bulk_update_script_assignments_async(script_uuid, bulk_update_script_assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param BulkUpdateScriptAssignment bulk_update_script_assignment: Bulk Script assignments request model. List of assignments which include smart group uuids, triggers and assignment group name.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.script_assignment_v1_bulk_update_script_assignments_async_with_http_info(script_uuid, bulk_update_script_assignment, **kwargs)  # noqa: E501
        else:
            (data) = self.script_assignment_v1_bulk_update_script_assignments_async_with_http_info(script_uuid, bulk_update_script_assignment, **kwargs)  # noqa: E501
            return data

    def script_assignment_v1_bulk_update_script_assignments_async_with_http_info(self, script_uuid, bulk_update_script_assignment, **kwargs):  # noqa: E501
        """New - BulkUpdateScriptAssignmentsAsync  # noqa: E501

        Updates the list of assignment for the script.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_bulk_update_script_assignments_async_with_http_info(script_uuid, bulk_update_script_assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param BulkUpdateScriptAssignment bulk_update_script_assignment: Bulk Script assignments request model. List of assignments which include smart group uuids, triggers and assignment group name.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['script_uuid', 'bulk_update_script_assignment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method script_assignment_v1_bulk_update_script_assignments_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `script_assignment_v1_bulk_update_script_assignments_async`")  # noqa: E501
        # verify the required parameter 'bulk_update_script_assignment' is set
        if self.api_client.client_side_validation and ('bulk_update_script_assignment' not in params or
                                                       params['bulk_update_script_assignment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_update_script_assignment` when calling `script_assignment_v1_bulk_update_script_assignments_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_update_script_assignment' in params:
            body_params = params['bulk_update_script_assignment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scripts/{scriptUuid}/updateassignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def script_assignment_v1_delete_script_assignment_async(self, script_uuid, assignment_uuid, **kwargs):  # noqa: E501
        """New - DeleteScriptAssignmentAsync  # noqa: E501

        Deletes a single script assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_delete_script_assignment_async(script_uuid, assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param str assignment_uuid: Uuid of the script assignment.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.script_assignment_v1_delete_script_assignment_async_with_http_info(script_uuid, assignment_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.script_assignment_v1_delete_script_assignment_async_with_http_info(script_uuid, assignment_uuid, **kwargs)  # noqa: E501
            return data

    def script_assignment_v1_delete_script_assignment_async_with_http_info(self, script_uuid, assignment_uuid, **kwargs):  # noqa: E501
        """New - DeleteScriptAssignmentAsync  # noqa: E501

        Deletes a single script assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_delete_script_assignment_async_with_http_info(script_uuid, assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param str assignment_uuid: Uuid of the script assignment.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['script_uuid', 'assignment_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method script_assignment_v1_delete_script_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `script_assignment_v1_delete_script_assignment_async`")  # noqa: E501
        # verify the required parameter 'assignment_uuid' is set
        if self.api_client.client_side_validation and ('assignment_uuid' not in params or
                                                       params['assignment_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_uuid` when calling `script_assignment_v1_delete_script_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501
        if 'assignment_uuid' in params:
            path_params['assignmentUuid'] = params['assignment_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scripts/{scriptUuid}/assignments/{assignmentUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def script_assignment_v1_get_script_assignment_async(self, assignment_uuid, **kwargs):  # noqa: E501
        """New - GetScriptAssignmentAsync  # noqa: E501

        Get script assignment information which includes assigned smart groups and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_get_script_assignment_async(assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_uuid: Uuid of the device assignment.(Required) (required)
        :return: ScriptAssignmentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.script_assignment_v1_get_script_assignment_async_with_http_info(assignment_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.script_assignment_v1_get_script_assignment_async_with_http_info(assignment_uuid, **kwargs)  # noqa: E501
            return data

    def script_assignment_v1_get_script_assignment_async_with_http_info(self, assignment_uuid, **kwargs):  # noqa: E501
        """New - GetScriptAssignmentAsync  # noqa: E501

        Get script assignment information which includes assigned smart groups and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_get_script_assignment_async_with_http_info(assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_uuid: Uuid of the device assignment.(Required) (required)
        :return: ScriptAssignmentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method script_assignment_v1_get_script_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_uuid' is set
        if self.api_client.client_side_validation and ('assignment_uuid' not in params or
                                                       params['assignment_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_uuid` when calling `script_assignment_v1_get_script_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_uuid' in params:
            path_params['assignmentUuid'] = params['assignment_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scriptassignments/{assignmentUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScriptAssignmentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def script_assignment_v1_get_script_assignments_async(self, script_uuid, **kwargs):  # noqa: E501
        """New - GetScriptAssignmentsAsync  # noqa: E501

        Get a list of script assignments information which includes assigned smart groups and triggers for each assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_get_script_assignments_async(script_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :return: SearchResult1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.script_assignment_v1_get_script_assignments_async_with_http_info(script_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.script_assignment_v1_get_script_assignments_async_with_http_info(script_uuid, **kwargs)  # noqa: E501
            return data

    def script_assignment_v1_get_script_assignments_async_with_http_info(self, script_uuid, **kwargs):  # noqa: E501
        """New - GetScriptAssignmentsAsync  # noqa: E501

        Get a list of script assignments information which includes assigned smart groups and triggers for each assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_get_script_assignments_async_with_http_info(script_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :return: SearchResult1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['script_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method script_assignment_v1_get_script_assignments_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `script_assignment_v1_get_script_assignments_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scripts/{scriptUuid}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def script_assignment_v1_replace_script_assignment_async(self, script_uuid, assignment_uuid, update_script_assignment, **kwargs):  # noqa: E501
        """New - ReplaceScriptAssignmentAsync  # noqa: E501

        Replace the script assignment information which includes smartgroup ids and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_replace_script_assignment_async(script_uuid, assignment_uuid, update_script_assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param str assignment_uuid: Uuid of the script assignment.(Required) (required)
        :param UpdateScriptAssignment update_script_assignment: Script assignment request model. Includes smart group uuids, triggers and assignment group name.(Required) (required)
        :return: BaseExceptionModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.script_assignment_v1_replace_script_assignment_async_with_http_info(script_uuid, assignment_uuid, update_script_assignment, **kwargs)  # noqa: E501
        else:
            (data) = self.script_assignment_v1_replace_script_assignment_async_with_http_info(script_uuid, assignment_uuid, update_script_assignment, **kwargs)  # noqa: E501
            return data

    def script_assignment_v1_replace_script_assignment_async_with_http_info(self, script_uuid, assignment_uuid, update_script_assignment, **kwargs):  # noqa: E501
        """New - ReplaceScriptAssignmentAsync  # noqa: E501

        Replace the script assignment information which includes smartgroup ids and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_replace_script_assignment_async_with_http_info(script_uuid, assignment_uuid, update_script_assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param str assignment_uuid: Uuid of the script assignment.(Required) (required)
        :param UpdateScriptAssignment update_script_assignment: Script assignment request model. Includes smart group uuids, triggers and assignment group name.(Required) (required)
        :return: BaseExceptionModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['script_uuid', 'assignment_uuid', 'update_script_assignment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method script_assignment_v1_replace_script_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `script_assignment_v1_replace_script_assignment_async`")  # noqa: E501
        # verify the required parameter 'assignment_uuid' is set
        if self.api_client.client_side_validation and ('assignment_uuid' not in params or
                                                       params['assignment_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_uuid` when calling `script_assignment_v1_replace_script_assignment_async`")  # noqa: E501
        # verify the required parameter 'update_script_assignment' is set
        if self.api_client.client_side_validation and ('update_script_assignment' not in params or
                                                       params['update_script_assignment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_script_assignment` when calling `script_assignment_v1_replace_script_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501
        if 'assignment_uuid' in params:
            path_params['assignmentUuid'] = params['assignment_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_script_assignment' in params:
            body_params = params['update_script_assignment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scripts/{scriptUuid}/assignments/{assignmentUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseExceptionModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def script_assignment_v1_update_assignment_rankings_async(self, script_uuid, update_rankings, **kwargs):  # noqa: E501
        """New - UpdateScriptAssignmentsAsync  # noqa: E501

        Bulk update script assignments priority so that no two scripts assignment have same priority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_update_assignment_rankings_async(script_uuid, update_rankings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param list[AssignmentRankingMap] update_rankings: Contains a list of script assignment rankings.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.script_assignment_v1_update_assignment_rankings_async_with_http_info(script_uuid, update_rankings, **kwargs)  # noqa: E501
        else:
            (data) = self.script_assignment_v1_update_assignment_rankings_async_with_http_info(script_uuid, update_rankings, **kwargs)  # noqa: E501
            return data

    def script_assignment_v1_update_assignment_rankings_async_with_http_info(self, script_uuid, update_rankings, **kwargs):  # noqa: E501
        """New - UpdateScriptAssignmentsAsync  # noqa: E501

        Bulk update script assignments priority so that no two scripts assignment have same priority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.script_assignment_v1_update_assignment_rankings_async_with_http_info(script_uuid, update_rankings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param list[AssignmentRankingMap] update_rankings: Contains a list of script assignment rankings.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['script_uuid', 'update_rankings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method script_assignment_v1_update_assignment_rankings_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `script_assignment_v1_update_assignment_rankings_async`")  # noqa: E501
        # verify the required parameter 'update_rankings' is set
        if self.api_client.client_side_validation and ('update_rankings' not in params or
                                                       params['update_rankings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_rankings` when calling `script_assignment_v1_update_assignment_rankings_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_rankings' in params:
            body_params = params['update_rankings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scripts/{scriptUuid}/assignments/updateranking', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
