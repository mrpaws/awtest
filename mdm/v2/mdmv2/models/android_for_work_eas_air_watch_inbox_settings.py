# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkEASAirWatchInboxSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payload_display_name': 'str',
        'ignore_ssl': 'bool',
        'payload_certificate_name': 'str',
        'aw_email_client_max_email_age_filter': 'int',
        'aw_email_client_sync_interval': 'int',
        'max_calendar_age_filter': 'int',
        'email_signature': 'str',
        'sync_contacts': 'bool',
        'contacts_app_type': 'bool',
        'allow_single_export': 'bool',
        'allow_multiple_export': 'bool',
        'sync_calendar': 'bool',
        'calendar_app_type': 'bool',
        'require_passcode': 'bool',
        'single_sign_on': 'bool',
        'authentication_type': 'int',
        'passcode_complexity': 'int',
        'minimum_passcode_length': 'int',
        'minimum_complex_characters': 'int',
        'maximum_passcode_age': 'int',
        'passcode_history': 'int',
        'auto_lock_minutes': 'int',
        'auto_lock_device_lock': 'bool',
        'maximum_failed_attempts': 'int',
        'disable_copy_paste': 'int',
        'allow_attachments': 'bool',
        'max_attachment_size': 'int',
        'restrict_attachment_in_apps': 'bool',
        'attachment_restricted_app_list': 'list[str]',
        'allow_screen_capture': 'bool',
        'restrict_domains': 'bool',
        'restriction_type': 'int',
        'domain_name_list': 'list[str]',
        'restrict_links_in_apps': 'bool'
    }

    attribute_map = {
        'payload_display_name': 'PayloadDisplayName',
        'ignore_ssl': 'IgnoreSSL',
        'payload_certificate_name': 'PayloadCertificateName',
        'aw_email_client_max_email_age_filter': 'AwEmailClientMaxEmailAgeFilter',
        'aw_email_client_sync_interval': 'AwEmailClientSyncInterval',
        'max_calendar_age_filter': 'MaxCalendarAgeFilter',
        'email_signature': 'EmailSignature',
        'sync_contacts': 'SyncContacts',
        'contacts_app_type': 'ContactsAppType',
        'allow_single_export': 'AllowSingleExport',
        'allow_multiple_export': 'AllowMultipleExport',
        'sync_calendar': 'SyncCalendar',
        'calendar_app_type': 'CalendarAppType',
        'require_passcode': 'RequirePasscode',
        'single_sign_on': 'SingleSignOn',
        'authentication_type': 'AuthenticationType',
        'passcode_complexity': 'PasscodeComplexity',
        'minimum_passcode_length': 'MinimumPasscodeLength',
        'minimum_complex_characters': 'MinimumComplexCharacters',
        'maximum_passcode_age': 'MaximumPasscodeAge',
        'passcode_history': 'PasscodeHistory',
        'auto_lock_minutes': 'AutoLockMinutes',
        'auto_lock_device_lock': 'AutoLockDeviceLock',
        'maximum_failed_attempts': 'MaximumFailedAttempts',
        'disable_copy_paste': 'DisableCopyPaste',
        'allow_attachments': 'AllowAttachments',
        'max_attachment_size': 'MaxAttachmentSize',
        'restrict_attachment_in_apps': 'RestrictAttachmentInApps',
        'attachment_restricted_app_list': 'AttachmentRestrictedAppList',
        'allow_screen_capture': 'AllowScreenCapture',
        'restrict_domains': 'RestrictDomains',
        'restriction_type': 'RestrictionType',
        'domain_name_list': 'DomainNameList',
        'restrict_links_in_apps': 'RestrictLinksInApps'
    }

    def __init__(self, payload_display_name=None, ignore_ssl=None, payload_certificate_name=None, aw_email_client_max_email_age_filter=None, aw_email_client_sync_interval=None, max_calendar_age_filter=None, email_signature=None, sync_contacts=None, contacts_app_type=None, allow_single_export=None, allow_multiple_export=None, sync_calendar=None, calendar_app_type=None, require_passcode=None, single_sign_on=None, authentication_type=None, passcode_complexity=None, minimum_passcode_length=None, minimum_complex_characters=None, maximum_passcode_age=None, passcode_history=None, auto_lock_minutes=None, auto_lock_device_lock=None, maximum_failed_attempts=None, disable_copy_paste=None, allow_attachments=None, max_attachment_size=None, restrict_attachment_in_apps=None, attachment_restricted_app_list=None, allow_screen_capture=None, restrict_domains=None, restriction_type=None, domain_name_list=None, restrict_links_in_apps=None, _configuration=None):  # noqa: E501
        """AndroidForWorkEASAirWatchInboxSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._payload_display_name = None
        self._ignore_ssl = None
        self._payload_certificate_name = None
        self._aw_email_client_max_email_age_filter = None
        self._aw_email_client_sync_interval = None
        self._max_calendar_age_filter = None
        self._email_signature = None
        self._sync_contacts = None
        self._contacts_app_type = None
        self._allow_single_export = None
        self._allow_multiple_export = None
        self._sync_calendar = None
        self._calendar_app_type = None
        self._require_passcode = None
        self._single_sign_on = None
        self._authentication_type = None
        self._passcode_complexity = None
        self._minimum_passcode_length = None
        self._minimum_complex_characters = None
        self._maximum_passcode_age = None
        self._passcode_history = None
        self._auto_lock_minutes = None
        self._auto_lock_device_lock = None
        self._maximum_failed_attempts = None
        self._disable_copy_paste = None
        self._allow_attachments = None
        self._max_attachment_size = None
        self._restrict_attachment_in_apps = None
        self._attachment_restricted_app_list = None
        self._allow_screen_capture = None
        self._restrict_domains = None
        self._restriction_type = None
        self._domain_name_list = None
        self._restrict_links_in_apps = None
        self.discriminator = None

        if payload_display_name is not None:
            self.payload_display_name = payload_display_name
        if ignore_ssl is not None:
            self.ignore_ssl = ignore_ssl
        if payload_certificate_name is not None:
            self.payload_certificate_name = payload_certificate_name
        if aw_email_client_max_email_age_filter is not None:
            self.aw_email_client_max_email_age_filter = aw_email_client_max_email_age_filter
        if aw_email_client_sync_interval is not None:
            self.aw_email_client_sync_interval = aw_email_client_sync_interval
        if max_calendar_age_filter is not None:
            self.max_calendar_age_filter = max_calendar_age_filter
        if email_signature is not None:
            self.email_signature = email_signature
        if sync_contacts is not None:
            self.sync_contacts = sync_contacts
        if contacts_app_type is not None:
            self.contacts_app_type = contacts_app_type
        if allow_single_export is not None:
            self.allow_single_export = allow_single_export
        if allow_multiple_export is not None:
            self.allow_multiple_export = allow_multiple_export
        if sync_calendar is not None:
            self.sync_calendar = sync_calendar
        if calendar_app_type is not None:
            self.calendar_app_type = calendar_app_type
        if require_passcode is not None:
            self.require_passcode = require_passcode
        if single_sign_on is not None:
            self.single_sign_on = single_sign_on
        if authentication_type is not None:
            self.authentication_type = authentication_type
        if passcode_complexity is not None:
            self.passcode_complexity = passcode_complexity
        if minimum_passcode_length is not None:
            self.minimum_passcode_length = minimum_passcode_length
        if minimum_complex_characters is not None:
            self.minimum_complex_characters = minimum_complex_characters
        if maximum_passcode_age is not None:
            self.maximum_passcode_age = maximum_passcode_age
        if passcode_history is not None:
            self.passcode_history = passcode_history
        if auto_lock_minutes is not None:
            self.auto_lock_minutes = auto_lock_minutes
        if auto_lock_device_lock is not None:
            self.auto_lock_device_lock = auto_lock_device_lock
        if maximum_failed_attempts is not None:
            self.maximum_failed_attempts = maximum_failed_attempts
        if disable_copy_paste is not None:
            self.disable_copy_paste = disable_copy_paste
        if allow_attachments is not None:
            self.allow_attachments = allow_attachments
        if max_attachment_size is not None:
            self.max_attachment_size = max_attachment_size
        if restrict_attachment_in_apps is not None:
            self.restrict_attachment_in_apps = restrict_attachment_in_apps
        if attachment_restricted_app_list is not None:
            self.attachment_restricted_app_list = attachment_restricted_app_list
        if allow_screen_capture is not None:
            self.allow_screen_capture = allow_screen_capture
        if restrict_domains is not None:
            self.restrict_domains = restrict_domains
        if restriction_type is not None:
            self.restriction_type = restriction_type
        if domain_name_list is not None:
            self.domain_name_list = domain_name_list
        if restrict_links_in_apps is not None:
            self.restrict_links_in_apps = restrict_links_in_apps

    @property
    def payload_display_name(self):
        """Gets the payload_display_name of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the display name of the payload.  # noqa: E501

        :return: The payload_display_name of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: str
        """
        return self._payload_display_name

    @payload_display_name.setter
    def payload_display_name(self, payload_display_name):
        """Sets the payload_display_name of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the display name of the payload.  # noqa: E501

        :param payload_display_name: The payload_display_name of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: str
        """

        self._payload_display_name = payload_display_name

    @property
    def ignore_ssl(self):
        """Gets the ignore_ssl of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [allow any server cert].  # noqa: E501

        :return: The ignore_ssl of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_ssl

    @ignore_ssl.setter
    def ignore_ssl(self, ignore_ssl):
        """Sets the ignore_ssl of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [allow any server cert].  # noqa: E501

        :param ignore_ssl: The ignore_ssl of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._ignore_ssl = ignore_ssl

    @property
    def payload_certificate_name(self):
        """Gets the payload_certificate_name of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the name of the payload certificate.  # noqa: E501

        :return: The payload_certificate_name of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: str
        """
        return self._payload_certificate_name

    @payload_certificate_name.setter
    def payload_certificate_name(self, payload_certificate_name):
        """Sets the payload_certificate_name of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the name of the payload certificate.  # noqa: E501

        :param payload_certificate_name: The payload_certificate_name of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: str
        """

        self._payload_certificate_name = payload_certificate_name

    @property
    def aw_email_client_max_email_age_filter(self):
        """Gets the aw_email_client_max_email_age_filter of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the aw email client maximum email age filter.  # noqa: E501

        :return: The aw_email_client_max_email_age_filter of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._aw_email_client_max_email_age_filter

    @aw_email_client_max_email_age_filter.setter
    def aw_email_client_max_email_age_filter(self, aw_email_client_max_email_age_filter):
        """Sets the aw_email_client_max_email_age_filter of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the aw email client maximum email age filter.  # noqa: E501

        :param aw_email_client_max_email_age_filter: The aw_email_client_max_email_age_filter of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._aw_email_client_max_email_age_filter = aw_email_client_max_email_age_filter

    @property
    def aw_email_client_sync_interval(self):
        """Gets the aw_email_client_sync_interval of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the aw email client synchronize interval.  # noqa: E501

        :return: The aw_email_client_sync_interval of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._aw_email_client_sync_interval

    @aw_email_client_sync_interval.setter
    def aw_email_client_sync_interval(self, aw_email_client_sync_interval):
        """Sets the aw_email_client_sync_interval of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the aw email client synchronize interval.  # noqa: E501

        :param aw_email_client_sync_interval: The aw_email_client_sync_interval of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._aw_email_client_sync_interval = aw_email_client_sync_interval

    @property
    def max_calendar_age_filter(self):
        """Gets the max_calendar_age_filter of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the maximum calendar age filter.  # noqa: E501

        :return: The max_calendar_age_filter of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_calendar_age_filter

    @max_calendar_age_filter.setter
    def max_calendar_age_filter(self, max_calendar_age_filter):
        """Sets the max_calendar_age_filter of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the maximum calendar age filter.  # noqa: E501

        :param max_calendar_age_filter: The max_calendar_age_filter of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._max_calendar_age_filter = max_calendar_age_filter

    @property
    def email_signature(self):
        """Gets the email_signature of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the email signature.  # noqa: E501

        :return: The email_signature of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: str
        """
        return self._email_signature

    @email_signature.setter
    def email_signature(self, email_signature):
        """Sets the email_signature of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the email signature.  # noqa: E501

        :param email_signature: The email_signature of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: str
        """

        self._email_signature = email_signature

    @property
    def sync_contacts(self):
        """Gets the sync_contacts of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [synchronize contacts].  # noqa: E501

        :return: The sync_contacts of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sync_contacts

    @sync_contacts.setter
    def sync_contacts(self, sync_contacts):
        """Sets the sync_contacts of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [synchronize contacts].  # noqa: E501

        :param sync_contacts: The sync_contacts of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._sync_contacts = sync_contacts

    @property
    def contacts_app_type(self):
        """Gets the contacts_app_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [contacts application type].  # noqa: E501

        :return: The contacts_app_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._contacts_app_type

    @contacts_app_type.setter
    def contacts_app_type(self, contacts_app_type):
        """Sets the contacts_app_type of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [contacts application type].  # noqa: E501

        :param contacts_app_type: The contacts_app_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._contacts_app_type = contacts_app_type

    @property
    def allow_single_export(self):
        """Gets the allow_single_export of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the allow single export.  # noqa: E501

        :return: The allow_single_export of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_single_export

    @allow_single_export.setter
    def allow_single_export(self, allow_single_export):
        """Sets the allow_single_export of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the allow single export.  # noqa: E501

        :param allow_single_export: The allow_single_export of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._allow_single_export = allow_single_export

    @property
    def allow_multiple_export(self):
        """Gets the allow_multiple_export of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the allow multiple export.  # noqa: E501

        :return: The allow_multiple_export of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_export

    @allow_multiple_export.setter
    def allow_multiple_export(self, allow_multiple_export):
        """Sets the allow_multiple_export of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the allow multiple export.  # noqa: E501

        :param allow_multiple_export: The allow_multiple_export of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_export = allow_multiple_export

    @property
    def sync_calendar(self):
        """Gets the sync_calendar of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [synchronize calendar].  # noqa: E501

        :return: The sync_calendar of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sync_calendar

    @sync_calendar.setter
    def sync_calendar(self, sync_calendar):
        """Sets the sync_calendar of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [synchronize calendar].  # noqa: E501

        :param sync_calendar: The sync_calendar of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._sync_calendar = sync_calendar

    @property
    def calendar_app_type(self):
        """Gets the calendar_app_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [calendar application type].  # noqa: E501

        :return: The calendar_app_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._calendar_app_type

    @calendar_app_type.setter
    def calendar_app_type(self, calendar_app_type):
        """Sets the calendar_app_type of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [calendar application type].  # noqa: E501

        :param calendar_app_type: The calendar_app_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._calendar_app_type = calendar_app_type

    @property
    def require_passcode(self):
        """Gets the require_passcode of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [require passcode].  # noqa: E501

        :return: The require_passcode of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._require_passcode

    @require_passcode.setter
    def require_passcode(self, require_passcode):
        """Sets the require_passcode of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [require passcode].  # noqa: E501

        :param require_passcode: The require_passcode of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._require_passcode = require_passcode

    @property
    def single_sign_on(self):
        """Gets the single_sign_on of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the single sign on.  # noqa: E501

        :return: The single_sign_on of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._single_sign_on

    @single_sign_on.setter
    def single_sign_on(self, single_sign_on):
        """Sets the single_sign_on of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the single sign on.  # noqa: E501

        :param single_sign_on: The single_sign_on of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._single_sign_on = single_sign_on

    @property
    def authentication_type(self):
        """Gets the authentication_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the type of the authentication.  # noqa: E501

        :return: The authentication_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the type of the authentication.  # noqa: E501

        :param authentication_type: The authentication_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._authentication_type = authentication_type

    @property
    def passcode_complexity(self):
        """Gets the passcode_complexity of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the passcode complexity.  # noqa: E501

        :return: The passcode_complexity of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._passcode_complexity

    @passcode_complexity.setter
    def passcode_complexity(self, passcode_complexity):
        """Sets the passcode_complexity of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the passcode complexity.  # noqa: E501

        :param passcode_complexity: The passcode_complexity of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._passcode_complexity = passcode_complexity

    @property
    def minimum_passcode_length(self):
        """Gets the minimum_passcode_length of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the minimum length of the passcode.  # noqa: E501

        :return: The minimum_passcode_length of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._minimum_passcode_length

    @minimum_passcode_length.setter
    def minimum_passcode_length(self, minimum_passcode_length):
        """Sets the minimum_passcode_length of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the minimum length of the passcode.  # noqa: E501

        :param minimum_passcode_length: The minimum_passcode_length of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._minimum_passcode_length = minimum_passcode_length

    @property
    def minimum_complex_characters(self):
        """Gets the minimum_complex_characters of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the minimum complex characters.  # noqa: E501

        :return: The minimum_complex_characters of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._minimum_complex_characters

    @minimum_complex_characters.setter
    def minimum_complex_characters(self, minimum_complex_characters):
        """Sets the minimum_complex_characters of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the minimum complex characters.  # noqa: E501

        :param minimum_complex_characters: The minimum_complex_characters of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._minimum_complex_characters = minimum_complex_characters

    @property
    def maximum_passcode_age(self):
        """Gets the maximum_passcode_age of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the maximum passcode age.  # noqa: E501

        :return: The maximum_passcode_age of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._maximum_passcode_age

    @maximum_passcode_age.setter
    def maximum_passcode_age(self, maximum_passcode_age):
        """Sets the maximum_passcode_age of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the maximum passcode age.  # noqa: E501

        :param maximum_passcode_age: The maximum_passcode_age of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._maximum_passcode_age = maximum_passcode_age

    @property
    def passcode_history(self):
        """Gets the passcode_history of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the passcode history.  # noqa: E501

        :return: The passcode_history of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._passcode_history

    @passcode_history.setter
    def passcode_history(self, passcode_history):
        """Sets the passcode_history of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the passcode history.  # noqa: E501

        :param passcode_history: The passcode_history of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._passcode_history = passcode_history

    @property
    def auto_lock_minutes(self):
        """Gets the auto_lock_minutes of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the automatic lock minutes.  # noqa: E501

        :return: The auto_lock_minutes of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._auto_lock_minutes

    @auto_lock_minutes.setter
    def auto_lock_minutes(self, auto_lock_minutes):
        """Sets the auto_lock_minutes of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the automatic lock minutes.  # noqa: E501

        :param auto_lock_minutes: The auto_lock_minutes of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._auto_lock_minutes = auto_lock_minutes

    @property
    def auto_lock_device_lock(self):
        """Gets the auto_lock_device_lock of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the automatic lock device lock.  # noqa: E501

        :return: The auto_lock_device_lock of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_lock_device_lock

    @auto_lock_device_lock.setter
    def auto_lock_device_lock(self, auto_lock_device_lock):
        """Sets the auto_lock_device_lock of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the automatic lock device lock.  # noqa: E501

        :param auto_lock_device_lock: The auto_lock_device_lock of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._auto_lock_device_lock = auto_lock_device_lock

    @property
    def maximum_failed_attempts(self):
        """Gets the maximum_failed_attempts of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the maximum failed attempts.  # noqa: E501

        :return: The maximum_failed_attempts of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._maximum_failed_attempts

    @maximum_failed_attempts.setter
    def maximum_failed_attempts(self, maximum_failed_attempts):
        """Sets the maximum_failed_attempts of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the maximum failed attempts.  # noqa: E501

        :param maximum_failed_attempts: The maximum_failed_attempts of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._maximum_failed_attempts = maximum_failed_attempts

    @property
    def disable_copy_paste(self):
        """Gets the disable_copy_paste of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the disable copy paste.  # noqa: E501

        :return: The disable_copy_paste of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._disable_copy_paste

    @disable_copy_paste.setter
    def disable_copy_paste(self, disable_copy_paste):
        """Sets the disable_copy_paste of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the disable copy paste.  # noqa: E501

        :param disable_copy_paste: The disable_copy_paste of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._disable_copy_paste = disable_copy_paste

    @property
    def allow_attachments(self):
        """Gets the allow_attachments of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [allow attachments].  # noqa: E501

        :return: The allow_attachments of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_attachments

    @allow_attachments.setter
    def allow_attachments(self, allow_attachments):
        """Sets the allow_attachments of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [allow attachments].  # noqa: E501

        :param allow_attachments: The allow_attachments of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._allow_attachments = allow_attachments

    @property
    def max_attachment_size(self):
        """Gets the max_attachment_size of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the maximum size of the attachment.  # noqa: E501

        :return: The max_attachment_size of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_attachment_size

    @max_attachment_size.setter
    def max_attachment_size(self, max_attachment_size):
        """Sets the max_attachment_size of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the maximum size of the attachment.  # noqa: E501

        :param max_attachment_size: The max_attachment_size of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._max_attachment_size = max_attachment_size

    @property
    def restrict_attachment_in_apps(self):
        """Gets the restrict_attachment_in_apps of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the restrict attachment in apps.  # noqa: E501

        :return: The restrict_attachment_in_apps of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_attachment_in_apps

    @restrict_attachment_in_apps.setter
    def restrict_attachment_in_apps(self, restrict_attachment_in_apps):
        """Sets the restrict_attachment_in_apps of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the restrict attachment in apps.  # noqa: E501

        :param restrict_attachment_in_apps: The restrict_attachment_in_apps of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._restrict_attachment_in_apps = restrict_attachment_in_apps

    @property
    def attachment_restricted_app_list(self):
        """Gets the attachment_restricted_app_list of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the attachment restricted application list.  # noqa: E501

        :return: The attachment_restricted_app_list of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_restricted_app_list

    @attachment_restricted_app_list.setter
    def attachment_restricted_app_list(self, attachment_restricted_app_list):
        """Sets the attachment_restricted_app_list of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the attachment restricted application list.  # noqa: E501

        :param attachment_restricted_app_list: The attachment_restricted_app_list of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: list[str]
        """

        self._attachment_restricted_app_list = attachment_restricted_app_list

    @property
    def allow_screen_capture(self):
        """Gets the allow_screen_capture of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [allow screen capture].  # noqa: E501

        :return: The allow_screen_capture of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_screen_capture

    @allow_screen_capture.setter
    def allow_screen_capture(self, allow_screen_capture):
        """Sets the allow_screen_capture of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [allow screen capture].  # noqa: E501

        :param allow_screen_capture: The allow_screen_capture of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._allow_screen_capture = allow_screen_capture

    @property
    def restrict_domains(self):
        """Gets the restrict_domains of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [restrict domains].  # noqa: E501

        :return: The restrict_domains of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_domains

    @restrict_domains.setter
    def restrict_domains(self, restrict_domains):
        """Sets the restrict_domains of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [restrict domains].  # noqa: E501

        :param restrict_domains: The restrict_domains of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._restrict_domains = restrict_domains

    @property
    def restriction_type(self):
        """Gets the restriction_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the type of the restriction.  # noqa: E501

        :return: The restriction_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: int
        """
        return self._restriction_type

    @restriction_type.setter
    def restriction_type(self, restriction_type):
        """Sets the restriction_type of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the type of the restriction.  # noqa: E501

        :param restriction_type: The restriction_type of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: int
        """

        self._restriction_type = restriction_type

    @property
    def domain_name_list(self):
        """Gets the domain_name_list of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets the domain name list.  # noqa: E501

        :return: The domain_name_list of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._domain_name_list

    @domain_name_list.setter
    def domain_name_list(self, domain_name_list):
        """Sets the domain_name_list of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets the domain name list.  # noqa: E501

        :param domain_name_list: The domain_name_list of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: list[str]
        """

        self._domain_name_list = domain_name_list

    @property
    def restrict_links_in_apps(self):
        """Gets the restrict_links_in_apps of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501

        Gets or sets a value indicating whether [restrict links in apps].  # noqa: E501

        :return: The restrict_links_in_apps of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_links_in_apps

    @restrict_links_in_apps.setter
    def restrict_links_in_apps(self, restrict_links_in_apps):
        """Sets the restrict_links_in_apps of this AndroidForWorkEASAirWatchInboxSettings.

        Gets or sets a value indicating whether [restrict links in apps].  # noqa: E501

        :param restrict_links_in_apps: The restrict_links_in_apps of this AndroidForWorkEASAirWatchInboxSettings.  # noqa: E501
        :type: bool
        """

        self._restrict_links_in_apps = restrict_links_in_apps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkEASAirWatchInboxSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkEASAirWatchInboxSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkEASAirWatchInboxSettings):
            return True

        return self.to_dict() != other.to_dict()
