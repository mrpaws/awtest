# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv2.configuration import Configuration


class DeviceBranchCacheStatisticsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_uuid': 'str',
        'download_sources': 'str',
        'branchcache_enabled': 'str',
        'client_mode': 'str',
        'hosted_servers': 'list[str]',
        'cache_bytes': 'int',
        'server_bytes': 'int',
        'application_uuid': 'str',
        'application_size': 'int'
    }

    attribute_map = {
        'device_uuid': 'device_uuid',
        'download_sources': 'download_sources',
        'branchcache_enabled': 'branchcache_enabled',
        'client_mode': 'client_mode',
        'hosted_servers': 'hosted_servers',
        'cache_bytes': 'cache_bytes',
        'server_bytes': 'server_bytes',
        'application_uuid': 'application_uuid',
        'application_size': 'application_size'
    }

    def __init__(self, device_uuid=None, download_sources=None, branchcache_enabled=None, client_mode=None, hosted_servers=None, cache_bytes=None, server_bytes=None, application_uuid=None, application_size=None, _configuration=None):  # noqa: E501
        """DeviceBranchCacheStatisticsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_uuid = None
        self._download_sources = None
        self._branchcache_enabled = None
        self._client_mode = None
        self._hosted_servers = None
        self._cache_bytes = None
        self._server_bytes = None
        self._application_uuid = None
        self._application_size = None
        self.discriminator = None

        if device_uuid is not None:
            self.device_uuid = device_uuid
        if download_sources is not None:
            self.download_sources = download_sources
        if branchcache_enabled is not None:
            self.branchcache_enabled = branchcache_enabled
        if client_mode is not None:
            self.client_mode = client_mode
        if hosted_servers is not None:
            self.hosted_servers = hosted_servers
        if cache_bytes is not None:
            self.cache_bytes = cache_bytes
        if server_bytes is not None:
            self.server_bytes = server_bytes
        if application_uuid is not None:
            self.application_uuid = application_uuid
        if application_size is not None:
            self.application_size = application_size

    @property
    def device_uuid(self):
        """Gets the device_uuid of this DeviceBranchCacheStatisticsModel.  # noqa: E501

        The device UUID of the device to be queried.  # noqa: E501

        :return: The device_uuid of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this DeviceBranchCacheStatisticsModel.

        The device UUID of the device to be queried.  # noqa: E501

        :param device_uuid: The device_uuid of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def download_sources(self):
        """Gets the download_sources of this DeviceBranchCacheStatisticsModel.  # noqa: E501

        The download sources that was used for an application download for that device.  # noqa: E501

        :return: The download_sources of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :rtype: str
        """
        return self._download_sources

    @download_sources.setter
    def download_sources(self, download_sources):
        """Sets the download_sources of this DeviceBranchCacheStatisticsModel.

        The download sources that was used for an application download for that device.  # noqa: E501

        :param download_sources: The download_sources of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :type: str
        """

        self._download_sources = download_sources

    @property
    def branchcache_enabled(self):
        """Gets the branchcache_enabled of this DeviceBranchCacheStatisticsModel.  # noqa: E501

        If BranchCache was leveraged for the application download for that device.  # noqa: E501

        :return: The branchcache_enabled of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :rtype: str
        """
        return self._branchcache_enabled

    @branchcache_enabled.setter
    def branchcache_enabled(self, branchcache_enabled):
        """Sets the branchcache_enabled of this DeviceBranchCacheStatisticsModel.

        If BranchCache was leveraged for the application download for that device.  # noqa: E501

        :param branchcache_enabled: The branchcache_enabled of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :type: str
        """

        self._branchcache_enabled = branchcache_enabled

    @property
    def client_mode(self):
        """Gets the client_mode of this DeviceBranchCacheStatisticsModel.  # noqa: E501

        The configured BranchCache mode for the device.  # noqa: E501

        :return: The client_mode of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :rtype: str
        """
        return self._client_mode

    @client_mode.setter
    def client_mode(self, client_mode):
        """Sets the client_mode of this DeviceBranchCacheStatisticsModel.

        The configured BranchCache mode for the device.  # noqa: E501

        :param client_mode: The client_mode of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :type: str
        """

        self._client_mode = client_mode

    @property
    def hosted_servers(self):
        """Gets the hosted_servers of this DeviceBranchCacheStatisticsModel.  # noqa: E501

        The list of hosted server names if the device is configured in Hosted mode.  # noqa: E501

        :return: The hosted_servers of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosted_servers

    @hosted_servers.setter
    def hosted_servers(self, hosted_servers):
        """Sets the hosted_servers of this DeviceBranchCacheStatisticsModel.

        The list of hosted server names if the device is configured in Hosted mode.  # noqa: E501

        :param hosted_servers: The hosted_servers of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :type: list[str]
        """

        self._hosted_servers = hosted_servers

    @property
    def cache_bytes(self):
        """Gets the cache_bytes of this DeviceBranchCacheStatisticsModel.  # noqa: E501

        The number of bytes from the cache/peers for the application download for that device.  # noqa: E501

        :return: The cache_bytes of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :rtype: int
        """
        return self._cache_bytes

    @cache_bytes.setter
    def cache_bytes(self, cache_bytes):
        """Sets the cache_bytes of this DeviceBranchCacheStatisticsModel.

        The number of bytes from the cache/peers for the application download for that device.  # noqa: E501

        :param cache_bytes: The cache_bytes of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :type: int
        """

        self._cache_bytes = cache_bytes

    @property
    def server_bytes(self):
        """Gets the server_bytes of this DeviceBranchCacheStatisticsModel.  # noqa: E501

        The number of bytes from the server for the application download for that device.  # noqa: E501

        :return: The server_bytes of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :rtype: int
        """
        return self._server_bytes

    @server_bytes.setter
    def server_bytes(self, server_bytes):
        """Sets the server_bytes of this DeviceBranchCacheStatisticsModel.

        The number of bytes from the server for the application download for that device.  # noqa: E501

        :param server_bytes: The server_bytes of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :type: int
        """

        self._server_bytes = server_bytes

    @property
    def application_uuid(self):
        """Gets the application_uuid of this DeviceBranchCacheStatisticsModel.  # noqa: E501

        The application UUID.  # noqa: E501

        :return: The application_uuid of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :rtype: str
        """
        return self._application_uuid

    @application_uuid.setter
    def application_uuid(self, application_uuid):
        """Sets the application_uuid of this DeviceBranchCacheStatisticsModel.

        The application UUID.  # noqa: E501

        :param application_uuid: The application_uuid of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :type: str
        """

        self._application_uuid = application_uuid

    @property
    def application_size(self):
        """Gets the application_size of this DeviceBranchCacheStatisticsModel.  # noqa: E501

        The application size in bytes.  # noqa: E501

        :return: The application_size of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :rtype: int
        """
        return self._application_size

    @application_size.setter
    def application_size(self, application_size):
        """Sets the application_size of this DeviceBranchCacheStatisticsModel.

        The application size in bytes.  # noqa: E501

        :param application_size: The application_size of this DeviceBranchCacheStatisticsModel.  # noqa: E501
        :type: int
        """

        self._application_size = application_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceBranchCacheStatisticsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceBranchCacheStatisticsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceBranchCacheStatisticsModel):
            return True

        return self.to_dict() != other.to_dict()
