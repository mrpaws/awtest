# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceApplicationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_name': 'str',
        'version': 'str',
        'build_version': 'str',
        'status': 'int',
        'device_id': 'EntityReference_',
        'size': 'str',
        'application_identifier': 'str',
        'type': 'str',
        'is_managed': 'bool',
        'app_version': 'str',
        'app_store_vendable': 'bool',
        'device_based_vpp': 'bool',
        'beta_app': 'bool',
        'ad_hoc_code_signed': 'bool',
        'has_update_available': 'bool',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'application_name': 'ApplicationName',
        'version': 'Version',
        'build_version': 'BuildVersion',
        'status': 'Status',
        'device_id': 'DeviceId',
        'size': 'Size',
        'application_identifier': 'ApplicationIdentifier',
        'type': 'Type',
        'is_managed': 'IsManaged',
        'app_version': 'AppVersion',
        'app_store_vendable': 'AppStoreVendable',
        'device_based_vpp': 'DeviceBasedVPP',
        'beta_app': 'BetaApp',
        'ad_hoc_code_signed': 'AdHocCodeSigned',
        'has_update_available': 'HasUpdateAvailable',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, application_name=None, version=None, build_version=None, status=None, device_id=None, size=None, application_identifier=None, type=None, is_managed=None, app_version=None, app_store_vendable=None, device_based_vpp=None, beta_app=None, ad_hoc_code_signed=None, has_update_available=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceApplicationInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application_name = None
        self._version = None
        self._build_version = None
        self._status = None
        self._device_id = None
        self._size = None
        self._application_identifier = None
        self._type = None
        self._is_managed = None
        self._app_version = None
        self._app_store_vendable = None
        self._device_based_vpp = None
        self._beta_app = None
        self._ad_hoc_code_signed = None
        self._has_update_available = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if application_name is not None:
            self.application_name = application_name
        if version is not None:
            self.version = version
        if build_version is not None:
            self.build_version = build_version
        if status is not None:
            self.status = status
        if device_id is not None:
            self.device_id = device_id
        if size is not None:
            self.size = size
        if application_identifier is not None:
            self.application_identifier = application_identifier
        if type is not None:
            self.type = type
        if is_managed is not None:
            self.is_managed = is_managed
        if app_version is not None:
            self.app_version = app_version
        if app_store_vendable is not None:
            self.app_store_vendable = app_store_vendable
        if device_based_vpp is not None:
            self.device_based_vpp = device_based_vpp
        if beta_app is not None:
            self.beta_app = beta_app
        if ad_hoc_code_signed is not None:
            self.ad_hoc_code_signed = ad_hoc_code_signed
        if has_update_available is not None:
            self.has_update_available = has_update_available
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def application_name(self):
        """Gets the application_name of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets the name of application.  # noqa: E501

        :return: The application_name of this DeviceApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this DeviceApplicationInfo.

        Gets or sets the name of application.  # noqa: E501

        :param application_name: The application_name of this DeviceApplicationInfo.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def version(self):
        """Gets the version of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets application version.  # noqa: E501

        :return: The version of this DeviceApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DeviceApplicationInfo.

        Gets or sets application version.  # noqa: E501

        :param version: The version of this DeviceApplicationInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def build_version(self):
        """Gets the build_version of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets application build version.  # noqa: E501

        :return: The build_version of this DeviceApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this DeviceApplicationInfo.

        Gets or sets application build version.  # noqa: E501

        :param build_version: The build_version of this DeviceApplicationInfo.  # noqa: E501
        :type: str
        """

        self._build_version = build_version

    @property
    def status(self):
        """Gets the status of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets status of the application, installation status [Pending Install, Installed, Pending Removal, Removed, Unknown].  # noqa: E501

        :return: The status of this DeviceApplicationInfo.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceApplicationInfo.

        Gets or sets status of the application, installation status [Pending Install, Installed, Pending Removal, Removed, Unknown].  # noqa: E501

        :param status: The status of this DeviceApplicationInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def device_id(self):
        """Gets the device_id of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets link to the Device where the Application belongs to.  # noqa: E501

        :return: The device_id of this DeviceApplicationInfo.  # noqa: E501
        :rtype: EntityReference_
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceApplicationInfo.

        Gets or sets link to the Device where the Application belongs to.  # noqa: E501

        :param device_id: The device_id of this DeviceApplicationInfo.  # noqa: E501
        :type: EntityReference_
        """

        self._device_id = device_id

    @property
    def size(self):
        """Gets the size of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets represents the size of Application in Bytes.  # noqa: E501

        :return: The size of this DeviceApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DeviceApplicationInfo.

        Gets or sets represents the size of Application in Bytes.  # noqa: E501

        :param size: The size of this DeviceApplicationInfo.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def application_identifier(self):
        """Gets the application_identifier of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets identifier of the application i.e. Bundle Id or Package Id.  # noqa: E501

        :return: The application_identifier of this DeviceApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._application_identifier

    @application_identifier.setter
    def application_identifier(self, application_identifier):
        """Sets the application_identifier of this DeviceApplicationInfo.

        Gets or sets identifier of the application i.e. Bundle Id or Package Id.  # noqa: E501

        :param application_identifier: The application_identifier of this DeviceApplicationInfo.  # noqa: E501
        :type: str
        """

        self._application_identifier = application_identifier

    @property
    def type(self):
        """Gets the type of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets application type... for e.g. System/Internal/Public etc.  # noqa: E501

        :return: The type of this DeviceApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeviceApplicationInfo.

        Gets or sets application type... for e.g. System/Internal/Public etc.  # noqa: E501

        :param type: The type of this DeviceApplicationInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def is_managed(self):
        """Gets the is_managed of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets a value indicating whether this instance is managed.  # noqa: E501

        :return: The is_managed of this DeviceApplicationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_managed

    @is_managed.setter
    def is_managed(self, is_managed):
        """Sets the is_managed of this DeviceApplicationInfo.

        Gets or sets a value indicating whether this instance is managed.  # noqa: E501

        :param is_managed: The is_managed of this DeviceApplicationInfo.  # noqa: E501
        :type: bool
        """

        self._is_managed = is_managed

    @property
    def app_version(self):
        """Gets the app_version of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets application version.  # noqa: E501

        :return: The app_version of this DeviceApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this DeviceApplicationInfo.

        Gets or sets application version.  # noqa: E501

        :param app_version: The app_version of this DeviceApplicationInfo.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def app_store_vendable(self):
        """Gets the app_store_vendable of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets indicates whether the app came from the store and can participate in store features. Available in iOS 11.3 and later.  # noqa: E501

        :return: The app_store_vendable of this DeviceApplicationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._app_store_vendable

    @app_store_vendable.setter
    def app_store_vendable(self, app_store_vendable):
        """Sets the app_store_vendable of this DeviceApplicationInfo.

        Gets or sets indicates whether the app came from the store and can participate in store features. Available in iOS 11.3 and later.  # noqa: E501

        :param app_store_vendable: The app_store_vendable of this DeviceApplicationInfo.  # noqa: E501
        :type: bool
        """

        self._app_store_vendable = app_store_vendable

    @property
    def device_based_vpp(self):
        """Gets the device_based_vpp of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets indicates whether the app is distributed to the device without requiring an Apple ID. Available in iOS 11.3 and later.  # noqa: E501

        :return: The device_based_vpp of this DeviceApplicationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._device_based_vpp

    @device_based_vpp.setter
    def device_based_vpp(self, device_based_vpp):
        """Sets the device_based_vpp of this DeviceApplicationInfo.

        Gets or sets indicates whether the app is distributed to the device without requiring an Apple ID. Available in iOS 11.3 and later.  # noqa: E501

        :param device_based_vpp: The device_based_vpp of this DeviceApplicationInfo.  # noqa: E501
        :type: bool
        """

        self._device_based_vpp = device_based_vpp

    @property
    def beta_app(self):
        """Gets the beta_app of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets indicates whether the app is part of the Beta program. Available in iOS 11.3 and later.  # noqa: E501

        :return: The beta_app of this DeviceApplicationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._beta_app

    @beta_app.setter
    def beta_app(self, beta_app):
        """Sets the beta_app of this DeviceApplicationInfo.

        Gets or sets indicates whether the app is part of the Beta program. Available in iOS 11.3 and later.  # noqa: E501

        :param beta_app: The beta_app of this DeviceApplicationInfo.  # noqa: E501
        :type: bool
        """

        self._beta_app = beta_app

    @property
    def ad_hoc_code_signed(self):
        """Gets the ad_hoc_code_signed of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets indicates whether the app is ad-hoc code signed. Available in iOS 11.3 and later.  # noqa: E501

        :return: The ad_hoc_code_signed of this DeviceApplicationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._ad_hoc_code_signed

    @ad_hoc_code_signed.setter
    def ad_hoc_code_signed(self, ad_hoc_code_signed):
        """Sets the ad_hoc_code_signed of this DeviceApplicationInfo.

        Gets or sets indicates whether the app is ad-hoc code signed. Available in iOS 11.3 and later.  # noqa: E501

        :param ad_hoc_code_signed: The ad_hoc_code_signed of this DeviceApplicationInfo.  # noqa: E501
        :type: bool
        """

        self._ad_hoc_code_signed = ad_hoc_code_signed

    @property
    def has_update_available(self):
        """Gets the has_update_available of this DeviceApplicationInfo.  # noqa: E501

        Gets or sets indicates whether the app has an update available. Available in iOS 11.3 and later and in macOS 10.13.4 and later.  # noqa: E501

        :return: The has_update_available of this DeviceApplicationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_update_available

    @has_update_available.setter
    def has_update_available(self, has_update_available):
        """Sets the has_update_available of this DeviceApplicationInfo.

        Gets or sets indicates whether the app has an update available. Available in iOS 11.3 and later and in macOS 10.13.4 and later.  # noqa: E501

        :param has_update_available: The has_update_available of this DeviceApplicationInfo.  # noqa: E501
        :type: bool
        """

        self._has_update_available = has_update_available

    @property
    def id(self):
        """Gets the id of this DeviceApplicationInfo.  # noqa: E501


        :return: The id of this DeviceApplicationInfo.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceApplicationInfo.


        :param id: The id of this DeviceApplicationInfo.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceApplicationInfo.  # noqa: E501


        :return: The uuid of this DeviceApplicationInfo.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceApplicationInfo.


        :param uuid: The uuid of this DeviceApplicationInfo.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceApplicationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceApplicationInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceApplicationInfo):
            return True

        return self.to_dict() != other.to_dict()
