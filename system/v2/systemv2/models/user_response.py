# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv2.configuration import Configuration


class UserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'external_id': 'str',
        'user_name': 'str',
        'schemas': 'list[str]',
        'urnscimschemasextensionworkspace1_0_user': 'UserExtensions',
        'groups': 'list[GroupSummary]',
        'meta': 'Metadata'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'externalId',
        'user_name': 'userName',
        'schemas': 'schemas',
        'urnscimschemasextensionworkspace1_0_user': 'urn:scim:schemas:extension:workspace:1.0:User',
        'groups': 'groups',
        'meta': 'meta'
    }

    def __init__(self, id=None, external_id=None, user_name=None, schemas=None, urnscimschemasextensionworkspace1_0_user=None, groups=None, meta=None, _configuration=None):  # noqa: E501
        """UserResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._external_id = None
        self._user_name = None
        self._schemas = None
        self._urnscimschemasextensionworkspace1_0_user = None
        self._groups = None
        self._meta = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if external_id is not None:
            self.external_id = external_id
        self.user_name = user_name
        self.schemas = schemas
        if urnscimschemasextensionworkspace1_0_user is not None:
            self.urnscimschemasextensionworkspace1_0_user = urnscimschemasextensionworkspace1_0_user
        if groups is not None:
            self.groups = groups
        if meta is not None:
            self.meta = meta

    @property
    def id(self):
        """Gets the id of this UserResponse.  # noqa: E501

        Unique identifier for a user  # noqa: E501

        :return: The id of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserResponse.

        Unique identifier for a user  # noqa: E501

        :param id: The id of this UserResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this UserResponse.  # noqa: E501

        An identifier for the resource as defined by the provisioning client.    The \"externalId\" may simplify identification of a resource between the   provisioning client and the service provider by allowing the client to   use a filter to locate the resource with an identifier from the provisioning   domain, obviating the need to store a local mapping between the provisioning   domain's identifier of the resource and the identifier used by the service provider.  Each resource MAY include a non-empty \"externalId\" value.  # noqa: E501

        :return: The external_id of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this UserResponse.

        An identifier for the resource as defined by the provisioning client.    The \"externalId\" may simplify identification of a resource between the   provisioning client and the service provider by allowing the client to   use a filter to locate the resource with an identifier from the provisioning   domain, obviating the need to store a local mapping between the provisioning   domain's identifier of the resource and the identifier used by the service provider.  Each resource MAY include a non-empty \"externalId\" value.  # noqa: E501

        :param external_id: The external_id of this UserResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def user_name(self):
        """Gets the user_name of this UserResponse.  # noqa: E501

        Unique identifier for the user, used by the user to directly authenticate.   Often displayed to the user as their unique identifier within the system   (as opposed to \"id\" or \"externalId\", which are generally opaque and not user-friendly   identifiers).  Each User MUST include a non-empty userName value.  This identifier MUST   be unique across entire set of Users.  This attribute is REQUIRED and is case insensitive.  # noqa: E501

        :return: The user_name of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserResponse.

        Unique identifier for the user, used by the user to directly authenticate.   Often displayed to the user as their unique identifier within the system   (as opposed to \"id\" or \"externalId\", which are generally opaque and not user-friendly   identifiers).  Each User MUST include a non-empty userName value.  This identifier MUST   be unique across entire set of Users.  This attribute is REQUIRED and is case insensitive.  # noqa: E501

        :param user_name: The user_name of this UserResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def schemas(self):
        """Gets the schemas of this UserResponse.  # noqa: E501

        Schemas used to compose a user entity  # noqa: E501

        :return: The schemas of this UserResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this UserResponse.

        Schemas used to compose a user entity  # noqa: E501

        :param schemas: The schemas of this UserResponse.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and schemas is None:
            raise ValueError("Invalid value for `schemas`, must not be `None`")  # noqa: E501

        self._schemas = schemas

    @property
    def urnscimschemasextensionworkspace1_0_user(self):
        """Gets the urnscimschemasextensionworkspace1_0_user of this UserResponse.  # noqa: E501

        Extension to user schema.  # noqa: E501

        :return: The urnscimschemasextensionworkspace1_0_user of this UserResponse.  # noqa: E501
        :rtype: UserExtensions
        """
        return self._urnscimschemasextensionworkspace1_0_user

    @urnscimschemasextensionworkspace1_0_user.setter
    def urnscimschemasextensionworkspace1_0_user(self, urnscimschemasextensionworkspace1_0_user):
        """Sets the urnscimschemasextensionworkspace1_0_user of this UserResponse.

        Extension to user schema.  # noqa: E501

        :param urnscimschemasextensionworkspace1_0_user: The urnscimschemasextensionworkspace1_0_user of this UserResponse.  # noqa: E501
        :type: UserExtensions
        """

        self._urnscimschemasextensionworkspace1_0_user = urnscimschemasextensionworkspace1_0_user

    @property
    def groups(self):
        """Gets the groups of this UserResponse.  # noqa: E501

        A list of groups to which the user belongs, either through direct membership, through   nested groups, or dynamically calculated.  # noqa: E501

        :return: The groups of this UserResponse.  # noqa: E501
        :rtype: list[GroupSummary]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserResponse.

        A list of groups to which the user belongs, either through direct membership, through   nested groups, or dynamically calculated.  # noqa: E501

        :param groups: The groups of this UserResponse.  # noqa: E501
        :type: list[GroupSummary]
        """

        self._groups = groups

    @property
    def meta(self):
        """Gets the meta of this UserResponse.  # noqa: E501

        Resource metadata  # noqa: E501

        :return: The meta of this UserResponse.  # noqa: E501
        :rtype: Metadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this UserResponse.

        Resource metadata  # noqa: E501

        :param meta: The meta of this UserResponse.  # noqa: E501
        :type: Metadata
        """

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserResponse):
            return True

        return self.to_dict() != other.to_dict()
