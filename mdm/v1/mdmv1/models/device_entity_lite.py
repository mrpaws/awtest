# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceEntityLite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'friendly_name': 'str',
        'date_tagged': 'datetime',
        'device_uuid': 'str',
        'device_last_seen': 'datetime'
    }

    attribute_map = {
        'device_id': 'DeviceId',
        'friendly_name': 'FriendlyName',
        'date_tagged': 'DateTagged',
        'device_uuid': 'DeviceUuid',
        'device_last_seen': 'DeviceLastSeen'
    }

    def __init__(self, device_id=None, friendly_name=None, date_tagged=None, device_uuid=None, device_last_seen=None, _configuration=None):  # noqa: E501
        """DeviceEntityLite - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_id = None
        self._friendly_name = None
        self._date_tagged = None
        self._device_uuid = None
        self._device_last_seen = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if date_tagged is not None:
            self.date_tagged = date_tagged
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if device_last_seen is not None:
            self.device_last_seen = device_last_seen

    @property
    def device_id(self):
        """Gets the device_id of this DeviceEntityLite.  # noqa: E501


        :return: The device_id of this DeviceEntityLite.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceEntityLite.


        :param device_id: The device_id of this DeviceEntityLite.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DeviceEntityLite.  # noqa: E501


        :return: The friendly_name of this DeviceEntityLite.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DeviceEntityLite.


        :param friendly_name: The friendly_name of this DeviceEntityLite.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def date_tagged(self):
        """Gets the date_tagged of this DeviceEntityLite.  # noqa: E501


        :return: The date_tagged of this DeviceEntityLite.  # noqa: E501
        :rtype: datetime
        """
        return self._date_tagged

    @date_tagged.setter
    def date_tagged(self, date_tagged):
        """Sets the date_tagged of this DeviceEntityLite.


        :param date_tagged: The date_tagged of this DeviceEntityLite.  # noqa: E501
        :type: datetime
        """

        self._date_tagged = date_tagged

    @property
    def device_uuid(self):
        """Gets the device_uuid of this DeviceEntityLite.  # noqa: E501


        :return: The device_uuid of this DeviceEntityLite.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this DeviceEntityLite.


        :param device_uuid: The device_uuid of this DeviceEntityLite.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def device_last_seen(self):
        """Gets the device_last_seen of this DeviceEntityLite.  # noqa: E501


        :return: The device_last_seen of this DeviceEntityLite.  # noqa: E501
        :rtype: datetime
        """
        return self._device_last_seen

    @device_last_seen.setter
    def device_last_seen(self, device_last_seen):
        """Sets the device_last_seen of this DeviceEntityLite.


        :param device_last_seen: The device_last_seen of this DeviceEntityLite.  # noqa: E501
        :type: datetime
        """

        self._device_last_seen = device_last_seen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceEntityLite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceEntityLite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceEntityLite):
            return True

        return self.to_dict() != other.to_dict()
