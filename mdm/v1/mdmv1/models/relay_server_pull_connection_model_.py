# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class RelayServerPullConnectionModel_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pull_local_directory': 'str',
        'pull_discovery_text': 'str',
        'pull_frequency': 'int',
        'max_push_connections': 'int',
        'report_status_batch_size': 'int',
        'pull_phrase': 'str'
    }

    attribute_map = {
        'pull_local_directory': 'PullLocalDirectory',
        'pull_discovery_text': 'PullDiscoveryText',
        'pull_frequency': 'PullFrequency',
        'max_push_connections': 'MaxPushConnections',
        'report_status_batch_size': 'ReportStatusBatchSize',
        'pull_phrase': 'PullPhrase'
    }

    def __init__(self, pull_local_directory=None, pull_discovery_text=None, pull_frequency=None, max_push_connections=None, report_status_batch_size=None, pull_phrase=None, _configuration=None):  # noqa: E501
        """RelayServerPullConnectionModel_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._pull_local_directory = None
        self._pull_discovery_text = None
        self._pull_frequency = None
        self._max_push_connections = None
        self._report_status_batch_size = None
        self._pull_phrase = None
        self.discriminator = None

        if pull_local_directory is not None:
            self.pull_local_directory = pull_local_directory
        if pull_discovery_text is not None:
            self.pull_discovery_text = pull_discovery_text
        if pull_frequency is not None:
            self.pull_frequency = pull_frequency
        if max_push_connections is not None:
            self.max_push_connections = max_push_connections
        if report_status_batch_size is not None:
            self.report_status_batch_size = report_status_batch_size
        if pull_phrase is not None:
            self.pull_phrase = pull_phrase

    @property
    def pull_local_directory(self):
        """Gets the pull_local_directory of this RelayServerPullConnectionModel_.  # noqa: E501

        Gets or sets the path of local directory to which the files will get copied.  # noqa: E501

        :return: The pull_local_directory of this RelayServerPullConnectionModel_.  # noqa: E501
        :rtype: str
        """
        return self._pull_local_directory

    @pull_local_directory.setter
    def pull_local_directory(self, pull_local_directory):
        """Sets the pull_local_directory of this RelayServerPullConnectionModel_.

        Gets or sets the path of local directory to which the files will get copied.  # noqa: E501

        :param pull_local_directory: The pull_local_directory of this RelayServerPullConnectionModel_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                pull_local_directory is not None and len(pull_local_directory) > 255):
            raise ValueError("Invalid value for `pull_local_directory`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                pull_local_directory is not None and len(pull_local_directory) < 0):
            raise ValueError("Invalid value for `pull_local_directory`, length must be greater than or equal to `0`")  # noqa: E501

        self._pull_local_directory = pull_local_directory

    @property
    def pull_discovery_text(self):
        """Gets the pull_discovery_text of this RelayServerPullConnectionModel_.  # noqa: E501

        Gets or sets pullDiscoveryText - the text would be how the AW server will recognize the pull service.  # noqa: E501

        :return: The pull_discovery_text of this RelayServerPullConnectionModel_.  # noqa: E501
        :rtype: str
        """
        return self._pull_discovery_text

    @pull_discovery_text.setter
    def pull_discovery_text(self, pull_discovery_text):
        """Sets the pull_discovery_text of this RelayServerPullConnectionModel_.

        Gets or sets pullDiscoveryText - the text would be how the AW server will recognize the pull service.  # noqa: E501

        :param pull_discovery_text: The pull_discovery_text of this RelayServerPullConnectionModel_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                pull_discovery_text is not None and len(pull_discovery_text) > 512):
            raise ValueError("Invalid value for `pull_discovery_text`, length must be less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                pull_discovery_text is not None and len(pull_discovery_text) < 0):
            raise ValueError("Invalid value for `pull_discovery_text`, length must be greater than or equal to `0`")  # noqa: E501
        if (self._configuration.client_side_validation and
                pull_discovery_text is not None and not re.search(r'^(?!(127\\.0\\.0\\.1:\\d+|127\\.0\\.0\\.1)$).*', pull_discovery_text)):  # noqa: E501
            raise ValueError(r"Invalid value for `pull_discovery_text`, must be a follow pattern or equal to `/^(?!(127\\.0\\.0\\.1:\\d+|127\\.0\\.0\\.1)$).*/`")  # noqa: E501

        self._pull_discovery_text = pull_discovery_text

    @property
    def pull_frequency(self):
        """Gets the pull_frequency of this RelayServerPullConnectionModel_.  # noqa: E501

        Gets or sets the PullFrequency - How often during the time Window relay server should check-in.  # noqa: E501

        :return: The pull_frequency of this RelayServerPullConnectionModel_.  # noqa: E501
        :rtype: int
        """
        return self._pull_frequency

    @pull_frequency.setter
    def pull_frequency(self, pull_frequency):
        """Sets the pull_frequency of this RelayServerPullConnectionModel_.

        Gets or sets the PullFrequency - How often during the time Window relay server should check-in.  # noqa: E501

        :param pull_frequency: The pull_frequency of this RelayServerPullConnectionModel_.  # noqa: E501
        :type: int
        """

        self._pull_frequency = pull_frequency

    @property
    def max_push_connections(self):
        """Gets the max_push_connections of this RelayServerPullConnectionModel_.  # noqa: E501

        Gets or sets the MaxPushConnections - Number of connections between Cloud relay and push relay servers.  # noqa: E501

        :return: The max_push_connections of this RelayServerPullConnectionModel_.  # noqa: E501
        :rtype: int
        """
        return self._max_push_connections

    @max_push_connections.setter
    def max_push_connections(self, max_push_connections):
        """Sets the max_push_connections of this RelayServerPullConnectionModel_.

        Gets or sets the MaxPushConnections - Number of connections between Cloud relay and push relay servers.  # noqa: E501

        :param max_push_connections: The max_push_connections of this RelayServerPullConnectionModel_.  # noqa: E501
        :type: int
        """

        self._max_push_connections = max_push_connections

    @property
    def report_status_batch_size(self):
        """Gets the report_status_batch_size of this RelayServerPullConnectionModel_.  # noqa: E501

        Gets or sets the ReportStatusBatchSize - Number of relay server status in a batch to be reported by cloud relay to content pull.  # noqa: E501

        :return: The report_status_batch_size of this RelayServerPullConnectionModel_.  # noqa: E501
        :rtype: int
        """
        return self._report_status_batch_size

    @report_status_batch_size.setter
    def report_status_batch_size(self, report_status_batch_size):
        """Sets the report_status_batch_size of this RelayServerPullConnectionModel_.

        Gets or sets the ReportStatusBatchSize - Number of relay server status in a batch to be reported by cloud relay to content pull.  # noqa: E501

        :param report_status_batch_size: The report_status_batch_size of this RelayServerPullConnectionModel_.  # noqa: E501
        :type: int
        """

        self._report_status_batch_size = report_status_batch_size

    @property
    def pull_phrase(self):
        """Gets the pull_phrase of this RelayServerPullConnectionModel_.  # noqa: E501

        Gets or sets the pull phrase.  # noqa: E501

        :return: The pull_phrase of this RelayServerPullConnectionModel_.  # noqa: E501
        :rtype: str
        """
        return self._pull_phrase

    @pull_phrase.setter
    def pull_phrase(self, pull_phrase):
        """Sets the pull_phrase of this RelayServerPullConnectionModel_.

        Gets or sets the pull phrase.  # noqa: E501

        :param pull_phrase: The pull_phrase of this RelayServerPullConnectionModel_.  # noqa: E501
        :type: str
        """

        self._pull_phrase = pull_phrase

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelayServerPullConnectionModel_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelayServerPullConnectionModel_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RelayServerPullConnectionModel_):
            return True

        return self.to_dict() != other.to_dict()
