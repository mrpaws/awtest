# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkDevicePasscodePayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_device_passcode_policy': 'bool',
        'set_password_minimum_length': 'int',
        'predefine_passcode': 'bool',
        'passcode': 'str',
        'allow_pin_at_startup': 'bool',
        'set_password_quality': 'int',
        'set_password_history_length': 'int',
        'passcode_change_alert': 'int',
        'set_password_expiration_timeout': 'int',
        'set_password_expiration_timeout_days': 'int',
        'set_maximum_failed_passwords_for_wipe': 'int',
        'set_maximum_time_to_lock': 'int',
        'passcode_required_range': 'int',
        'minimum_letters': 'int',
        'minimum_lower_case': 'int',
        'minimum_upper_case': 'int',
        'minimum_non_letter': 'int',
        'minimum_numeric': 'int',
        'minimum_symbols': 'int',
        'allow_biometric_options': 'bool',
        'allow_fingerprint_sensor': 'bool',
        'allow_face_scanning': 'bool',
        'allow_iris_scanning': 'bool'
    }

    attribute_map = {
        'enable_device_passcode_policy': 'EnableDevicePasscodePolicy',
        'set_password_minimum_length': 'setPasswordMinimumLength',
        'predefine_passcode': 'predefinePasscode',
        'passcode': 'passcode',
        'allow_pin_at_startup': 'AllowPinAtStartup',
        'set_password_quality': 'setPasswordQuality',
        'set_password_history_length': 'setPasswordHistoryLength',
        'passcode_change_alert': 'PasscodeChangeAlert',
        'set_password_expiration_timeout': 'setPasswordExpirationTimeout',
        'set_password_expiration_timeout_days': 'setPasswordExpirationTimeoutDays',
        'set_maximum_failed_passwords_for_wipe': 'setMaximumFailedPasswordsForWipe',
        'set_maximum_time_to_lock': 'setMaximumTimeToLock',
        'passcode_required_range': 'PasscodeRequiredRange',
        'minimum_letters': 'minimumLetters',
        'minimum_lower_case': 'minimumLowerCase',
        'minimum_upper_case': 'minimumUpperCase',
        'minimum_non_letter': 'minimumNonLetter',
        'minimum_numeric': 'minimumNumeric',
        'minimum_symbols': 'minimumSymbols',
        'allow_biometric_options': 'AllowBiometricOptions',
        'allow_fingerprint_sensor': 'AllowFingerprintSensor',
        'allow_face_scanning': 'AllowFaceScanning',
        'allow_iris_scanning': 'AllowIrisScanning'
    }

    def __init__(self, enable_device_passcode_policy=None, set_password_minimum_length=None, predefine_passcode=None, passcode=None, allow_pin_at_startup=None, set_password_quality=None, set_password_history_length=None, passcode_change_alert=None, set_password_expiration_timeout=None, set_password_expiration_timeout_days=None, set_maximum_failed_passwords_for_wipe=None, set_maximum_time_to_lock=None, passcode_required_range=None, minimum_letters=None, minimum_lower_case=None, minimum_upper_case=None, minimum_non_letter=None, minimum_numeric=None, minimum_symbols=None, allow_biometric_options=None, allow_fingerprint_sensor=None, allow_face_scanning=None, allow_iris_scanning=None, _configuration=None):  # noqa: E501
        """AndroidForWorkDevicePasscodePayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enable_device_passcode_policy = None
        self._set_password_minimum_length = None
        self._predefine_passcode = None
        self._passcode = None
        self._allow_pin_at_startup = None
        self._set_password_quality = None
        self._set_password_history_length = None
        self._passcode_change_alert = None
        self._set_password_expiration_timeout = None
        self._set_password_expiration_timeout_days = None
        self._set_maximum_failed_passwords_for_wipe = None
        self._set_maximum_time_to_lock = None
        self._passcode_required_range = None
        self._minimum_letters = None
        self._minimum_lower_case = None
        self._minimum_upper_case = None
        self._minimum_non_letter = None
        self._minimum_numeric = None
        self._minimum_symbols = None
        self._allow_biometric_options = None
        self._allow_fingerprint_sensor = None
        self._allow_face_scanning = None
        self._allow_iris_scanning = None
        self.discriminator = None

        if enable_device_passcode_policy is not None:
            self.enable_device_passcode_policy = enable_device_passcode_policy
        if set_password_minimum_length is not None:
            self.set_password_minimum_length = set_password_minimum_length
        if predefine_passcode is not None:
            self.predefine_passcode = predefine_passcode
        if passcode is not None:
            self.passcode = passcode
        if allow_pin_at_startup is not None:
            self.allow_pin_at_startup = allow_pin_at_startup
        if set_password_quality is not None:
            self.set_password_quality = set_password_quality
        if set_password_history_length is not None:
            self.set_password_history_length = set_password_history_length
        if passcode_change_alert is not None:
            self.passcode_change_alert = passcode_change_alert
        if set_password_expiration_timeout is not None:
            self.set_password_expiration_timeout = set_password_expiration_timeout
        if set_password_expiration_timeout_days is not None:
            self.set_password_expiration_timeout_days = set_password_expiration_timeout_days
        if set_maximum_failed_passwords_for_wipe is not None:
            self.set_maximum_failed_passwords_for_wipe = set_maximum_failed_passwords_for_wipe
        if set_maximum_time_to_lock is not None:
            self.set_maximum_time_to_lock = set_maximum_time_to_lock
        if passcode_required_range is not None:
            self.passcode_required_range = passcode_required_range
        if minimum_letters is not None:
            self.minimum_letters = minimum_letters
        if minimum_lower_case is not None:
            self.minimum_lower_case = minimum_lower_case
        if minimum_upper_case is not None:
            self.minimum_upper_case = minimum_upper_case
        if minimum_non_letter is not None:
            self.minimum_non_letter = minimum_non_letter
        if minimum_numeric is not None:
            self.minimum_numeric = minimum_numeric
        if minimum_symbols is not None:
            self.minimum_symbols = minimum_symbols
        if allow_biometric_options is not None:
            self.allow_biometric_options = allow_biometric_options
        if allow_fingerprint_sensor is not None:
            self.allow_fingerprint_sensor = allow_fingerprint_sensor
        if allow_face_scanning is not None:
            self.allow_face_scanning = allow_face_scanning
        if allow_iris_scanning is not None:
            self.allow_iris_scanning = allow_iris_scanning

    @property
    def enable_device_passcode_policy(self):
        """Gets the enable_device_passcode_policy of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether enable device passcode policy.  # noqa: E501

        :return: The enable_device_passcode_policy of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_device_passcode_policy

    @enable_device_passcode_policy.setter
    def enable_device_passcode_policy(self, enable_device_passcode_policy):
        """Sets the enable_device_passcode_policy of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets a value indicating whether enable device passcode policy.  # noqa: E501

        :param enable_device_passcode_policy: The enable_device_passcode_policy of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_device_passcode_policy = enable_device_passcode_policy

    @property
    def set_password_minimum_length(self):
        """Gets the set_password_minimum_length of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the setPasswordMinimumLength.  # noqa: E501

        :return: The set_password_minimum_length of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._set_password_minimum_length

    @set_password_minimum_length.setter
    def set_password_minimum_length(self, set_password_minimum_length):
        """Sets the set_password_minimum_length of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the setPasswordMinimumLength.  # noqa: E501

        :param set_password_minimum_length: The set_password_minimum_length of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._set_password_minimum_length = set_password_minimum_length

    @property
    def predefine_passcode(self):
        """Gets the predefine_passcode of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value to indicate enabling a predefined passcode.  # noqa: E501

        :return: The predefine_passcode of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._predefine_passcode

    @predefine_passcode.setter
    def predefine_passcode(self, predefine_passcode):
        """Sets the predefine_passcode of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value to indicate enabling a predefined passcode.  # noqa: E501

        :param predefine_passcode: The predefine_passcode of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._predefine_passcode = predefine_passcode

    @property
    def passcode(self):
        """Gets the passcode of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets a value for a predefined passcode.  # noqa: E501

        :return: The passcode of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._passcode

    @passcode.setter
    def passcode(self, passcode):
        """Sets the passcode of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets a value for a predefined passcode.  # noqa: E501

        :param passcode: The passcode of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._passcode = passcode

    @property
    def allow_pin_at_startup(self):
        """Gets the allow_pin_at_startup of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether AllowPinAtStartup.  # noqa: E501

        :return: The allow_pin_at_startup of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_pin_at_startup

    @allow_pin_at_startup.setter
    def allow_pin_at_startup(self, allow_pin_at_startup):
        """Sets the allow_pin_at_startup of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets a value indicating whether AllowPinAtStartup.  # noqa: E501

        :param allow_pin_at_startup: The allow_pin_at_startup of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_pin_at_startup = allow_pin_at_startup

    @property
    def set_password_quality(self):
        """Gets the set_password_quality of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the setPasswordQuality.  # noqa: E501

        :return: The set_password_quality of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._set_password_quality

    @set_password_quality.setter
    def set_password_quality(self, set_password_quality):
        """Sets the set_password_quality of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the setPasswordQuality.  # noqa: E501

        :param set_password_quality: The set_password_quality of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._set_password_quality = set_password_quality

    @property
    def set_password_history_length(self):
        """Gets the set_password_history_length of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the setPasswordHistoryLength.  # noqa: E501

        :return: The set_password_history_length of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._set_password_history_length

    @set_password_history_length.setter
    def set_password_history_length(self, set_password_history_length):
        """Sets the set_password_history_length of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the setPasswordHistoryLength.  # noqa: E501

        :param set_password_history_length: The set_password_history_length of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._set_password_history_length = set_password_history_length

    @property
    def passcode_change_alert(self):
        """Gets the passcode_change_alert of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the Passcode change alert.  # noqa: E501

        :return: The passcode_change_alert of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._passcode_change_alert

    @passcode_change_alert.setter
    def passcode_change_alert(self, passcode_change_alert):
        """Sets the passcode_change_alert of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the Passcode change alert.  # noqa: E501

        :param passcode_change_alert: The passcode_change_alert of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._passcode_change_alert = passcode_change_alert

    @property
    def set_password_expiration_timeout(self):
        """Gets the set_password_expiration_timeout of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the setPasswordExpirationTimeout.  # noqa: E501

        :return: The set_password_expiration_timeout of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._set_password_expiration_timeout

    @set_password_expiration_timeout.setter
    def set_password_expiration_timeout(self, set_password_expiration_timeout):
        """Sets the set_password_expiration_timeout of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the setPasswordExpirationTimeout.  # noqa: E501

        :param set_password_expiration_timeout: The set_password_expiration_timeout of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._set_password_expiration_timeout = set_password_expiration_timeout

    @property
    def set_password_expiration_timeout_days(self):
        """Gets the set_password_expiration_timeout_days of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets device password expiration timeout in days.  # noqa: E501

        :return: The set_password_expiration_timeout_days of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._set_password_expiration_timeout_days

    @set_password_expiration_timeout_days.setter
    def set_password_expiration_timeout_days(self, set_password_expiration_timeout_days):
        """Sets the set_password_expiration_timeout_days of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets device password expiration timeout in days.  # noqa: E501

        :param set_password_expiration_timeout_days: The set_password_expiration_timeout_days of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._set_password_expiration_timeout_days = set_password_expiration_timeout_days

    @property
    def set_maximum_failed_passwords_for_wipe(self):
        """Gets the set_maximum_failed_passwords_for_wipe of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the setMaximumFailedPasswordsForWipe.  # noqa: E501

        :return: The set_maximum_failed_passwords_for_wipe of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._set_maximum_failed_passwords_for_wipe

    @set_maximum_failed_passwords_for_wipe.setter
    def set_maximum_failed_passwords_for_wipe(self, set_maximum_failed_passwords_for_wipe):
        """Sets the set_maximum_failed_passwords_for_wipe of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the setMaximumFailedPasswordsForWipe.  # noqa: E501

        :param set_maximum_failed_passwords_for_wipe: The set_maximum_failed_passwords_for_wipe of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._set_maximum_failed_passwords_for_wipe = set_maximum_failed_passwords_for_wipe

    @property
    def set_maximum_time_to_lock(self):
        """Gets the set_maximum_time_to_lock of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the setMaximumTimeToLock.  # noqa: E501

        :return: The set_maximum_time_to_lock of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._set_maximum_time_to_lock

    @set_maximum_time_to_lock.setter
    def set_maximum_time_to_lock(self, set_maximum_time_to_lock):
        """Sets the set_maximum_time_to_lock of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the setMaximumTimeToLock.  # noqa: E501

        :param set_maximum_time_to_lock: The set_maximum_time_to_lock of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._set_maximum_time_to_lock = set_maximum_time_to_lock

    @property
    def passcode_required_range(self):
        """Gets the passcode_required_range of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or Sets the passcode required time in mins before the strong passcode is required.  # noqa: E501

        :return: The passcode_required_range of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._passcode_required_range

    @passcode_required_range.setter
    def passcode_required_range(self, passcode_required_range):
        """Sets the passcode_required_range of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or Sets the passcode required time in mins before the strong passcode is required.  # noqa: E501

        :param passcode_required_range: The passcode_required_range of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._passcode_required_range = passcode_required_range

    @property
    def minimum_letters(self):
        """Gets the minimum_letters of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the minimumLetters.  # noqa: E501

        :return: The minimum_letters of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._minimum_letters

    @minimum_letters.setter
    def minimum_letters(self, minimum_letters):
        """Sets the minimum_letters of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the minimumLetters.  # noqa: E501

        :param minimum_letters: The minimum_letters of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._minimum_letters = minimum_letters

    @property
    def minimum_lower_case(self):
        """Gets the minimum_lower_case of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the minimumLowerCase.  # noqa: E501

        :return: The minimum_lower_case of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._minimum_lower_case

    @minimum_lower_case.setter
    def minimum_lower_case(self, minimum_lower_case):
        """Sets the minimum_lower_case of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the minimumLowerCase.  # noqa: E501

        :param minimum_lower_case: The minimum_lower_case of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._minimum_lower_case = minimum_lower_case

    @property
    def minimum_upper_case(self):
        """Gets the minimum_upper_case of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the minimumUpperCase.  # noqa: E501

        :return: The minimum_upper_case of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._minimum_upper_case

    @minimum_upper_case.setter
    def minimum_upper_case(self, minimum_upper_case):
        """Sets the minimum_upper_case of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the minimumUpperCase.  # noqa: E501

        :param minimum_upper_case: The minimum_upper_case of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._minimum_upper_case = minimum_upper_case

    @property
    def minimum_non_letter(self):
        """Gets the minimum_non_letter of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the minimumNonLetter.  # noqa: E501

        :return: The minimum_non_letter of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._minimum_non_letter

    @minimum_non_letter.setter
    def minimum_non_letter(self, minimum_non_letter):
        """Sets the minimum_non_letter of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the minimumNonLetter.  # noqa: E501

        :param minimum_non_letter: The minimum_non_letter of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._minimum_non_letter = minimum_non_letter

    @property
    def minimum_numeric(self):
        """Gets the minimum_numeric of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the minimumNumeric.  # noqa: E501

        :return: The minimum_numeric of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._minimum_numeric

    @minimum_numeric.setter
    def minimum_numeric(self, minimum_numeric):
        """Sets the minimum_numeric of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the minimumNumeric.  # noqa: E501

        :param minimum_numeric: The minimum_numeric of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._minimum_numeric = minimum_numeric

    @property
    def minimum_symbols(self):
        """Gets the minimum_symbols of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the minimumSymbols.  # noqa: E501

        :return: The minimum_symbols of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._minimum_symbols

    @minimum_symbols.setter
    def minimum_symbols(self, minimum_symbols):
        """Sets the minimum_symbols of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets the minimumSymbols.  # noqa: E501

        :param minimum_symbols: The minimum_symbols of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._minimum_symbols = minimum_symbols

    @property
    def allow_biometric_options(self):
        """Gets the allow_biometric_options of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets Biometric Options for device.  # noqa: E501

        :return: The allow_biometric_options of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_biometric_options

    @allow_biometric_options.setter
    def allow_biometric_options(self, allow_biometric_options):
        """Sets the allow_biometric_options of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets Biometric Options for device.  # noqa: E501

        :param allow_biometric_options: The allow_biometric_options of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_biometric_options = allow_biometric_options

    @property
    def allow_fingerprint_sensor(self):
        """Gets the allow_fingerprint_sensor of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets finger print sensor for device.  # noqa: E501

        :return: The allow_fingerprint_sensor of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_fingerprint_sensor

    @allow_fingerprint_sensor.setter
    def allow_fingerprint_sensor(self, allow_fingerprint_sensor):
        """Sets the allow_fingerprint_sensor of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets finger print sensor for device.  # noqa: E501

        :param allow_fingerprint_sensor: The allow_fingerprint_sensor of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_fingerprint_sensor = allow_fingerprint_sensor

    @property
    def allow_face_scanning(self):
        """Gets the allow_face_scanning of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets face scanning options for device.  # noqa: E501

        :return: The allow_face_scanning of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_face_scanning

    @allow_face_scanning.setter
    def allow_face_scanning(self, allow_face_scanning):
        """Sets the allow_face_scanning of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets face scanning options for device.  # noqa: E501

        :param allow_face_scanning: The allow_face_scanning of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_face_scanning = allow_face_scanning

    @property
    def allow_iris_scanning(self):
        """Gets the allow_iris_scanning of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501

        Gets or sets Iris scanning for device.  # noqa: E501

        :return: The allow_iris_scanning of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_iris_scanning

    @allow_iris_scanning.setter
    def allow_iris_scanning(self, allow_iris_scanning):
        """Sets the allow_iris_scanning of this AndroidForWorkDevicePasscodePayloadV2Entity.

        Gets or sets Iris scanning for device.  # noqa: E501

        :param allow_iris_scanning: The allow_iris_scanning of this AndroidForWorkDevicePasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_iris_scanning = allow_iris_scanning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkDevicePasscodePayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkDevicePasscodePayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkDevicePasscodePayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
