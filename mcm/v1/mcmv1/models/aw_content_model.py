# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mcmv1.configuration import Configuration


class AwContentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'uuid': 'str',
        'content_id': 'str',
        'name': 'str',
        'description': 'str',
        'mime_type': 'str',
        'is_active': 'bool',
        'importance': 'str',
        'location_group_id': 'int',
        'created_on': 'datetime',
        'created_by': 'str',
        'modified_on': 'datetime',
        'modified_by': 'str',
        'categories': 'list[SearchCategoryModel]',
        'content_version': 'AwContentVersionModel',
        'security_settings': 'SecuritySettingsModel',
        'deployment_settings': 'DeploymentSettingsModel',
        'assignment_settings': 'AssignmentSettingsModel'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'content_id': 'contentId',
        'name': 'name',
        'description': 'description',
        'mime_type': 'mimeType',
        'is_active': 'isActive',
        'importance': 'importance',
        'location_group_id': 'locationGroupId',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'modified_on': 'modifiedOn',
        'modified_by': 'modifiedBy',
        'categories': 'Categories',
        'content_version': 'ContentVersion',
        'security_settings': 'SecuritySettings',
        'deployment_settings': 'DeploymentSettings',
        'assignment_settings': 'AssignmentSettings'
    }

    def __init__(self, id=None, uuid=None, content_id=None, name=None, description=None, mime_type=None, is_active=None, importance=None, location_group_id=None, created_on=None, created_by=None, modified_on=None, modified_by=None, categories=None, content_version=None, security_settings=None, deployment_settings=None, assignment_settings=None, _configuration=None):  # noqa: E501
        """AwContentModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._uuid = None
        self._content_id = None
        self._name = None
        self._description = None
        self._mime_type = None
        self._is_active = None
        self._importance = None
        self._location_group_id = None
        self._created_on = None
        self._created_by = None
        self._modified_on = None
        self._modified_by = None
        self._categories = None
        self._content_version = None
        self._security_settings = None
        self._deployment_settings = None
        self._assignment_settings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if content_id is not None:
            self.content_id = content_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if mime_type is not None:
            self.mime_type = mime_type
        if is_active is not None:
            self.is_active = is_active
        if importance is not None:
            self.importance = importance
        if location_group_id is not None:
            self.location_group_id = location_group_id
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if modified_on is not None:
            self.modified_on = modified_on
        if modified_by is not None:
            self.modified_by = modified_by
        if categories is not None:
            self.categories = categories
        if content_version is not None:
            self.content_version = content_version
        if security_settings is not None:
            self.security_settings = security_settings
        if deployment_settings is not None:
            self.deployment_settings = deployment_settings
        if assignment_settings is not None:
            self.assignment_settings = assignment_settings

    @property
    def id(self):
        """Gets the id of this AwContentModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this AwContentModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AwContentModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this AwContentModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this AwContentModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this AwContentModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AwContentModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this AwContentModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def content_id(self):
        """Gets the content_id of this AwContentModel.  # noqa: E501

        The Unique Identifier for the File.  # noqa: E501

        :return: The content_id of this AwContentModel.  # noqa: E501
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this AwContentModel.

        The Unique Identifier for the File.  # noqa: E501

        :param content_id: The content_id of this AwContentModel.  # noqa: E501
        :type: str
        """

        self._content_id = content_id

    @property
    def name(self):
        """Gets the name of this AwContentModel.  # noqa: E501

        Content name.  # noqa: E501

        :return: The name of this AwContentModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AwContentModel.

        Content name.  # noqa: E501

        :param name: The name of this AwContentModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AwContentModel.  # noqa: E501

        Description of the file.  # noqa: E501

        :return: The description of this AwContentModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AwContentModel.

        Description of the file.  # noqa: E501

        :param description: The description of this AwContentModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mime_type(self):
        """Gets the mime_type of this AwContentModel.  # noqa: E501

        Mime type of the file.  # noqa: E501

        :return: The mime_type of this AwContentModel.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this AwContentModel.

        Mime type of the file.  # noqa: E501

        :param mime_type: The mime_type of this AwContentModel.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def is_active(self):
        """Gets the is_active of this AwContentModel.  # noqa: E501

        Active status of file.  # noqa: E501

        :return: The is_active of this AwContentModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AwContentModel.

        Active status of file.  # noqa: E501

        :param is_active: The is_active of this AwContentModel.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def importance(self):
        """Gets the importance of this AwContentModel.  # noqa: E501

        Content importance value.  # noqa: E501

        :return: The importance of this AwContentModel.  # noqa: E501
        :rtype: str
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this AwContentModel.

        Content importance value.  # noqa: E501

        :param importance: The importance of this AwContentModel.  # noqa: E501
        :type: str
        """

        self._importance = importance

    @property
    def location_group_id(self):
        """Gets the location_group_id of this AwContentModel.  # noqa: E501

        Content locationgroupId.  # noqa: E501

        :return: The location_group_id of this AwContentModel.  # noqa: E501
        :rtype: int
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this AwContentModel.

        Content locationgroupId.  # noqa: E501

        :param location_group_id: The location_group_id of this AwContentModel.  # noqa: E501
        :type: int
        """

        self._location_group_id = location_group_id

    @property
    def created_on(self):
        """Gets the created_on of this AwContentModel.  # noqa: E501

        The creation date of content.  # noqa: E501

        :return: The created_on of this AwContentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this AwContentModel.

        The creation date of content.  # noqa: E501

        :param created_on: The created_on of this AwContentModel.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this AwContentModel.  # noqa: E501

        Content created by user.  # noqa: E501

        :return: The created_by of this AwContentModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AwContentModel.

        Content created by user.  # noqa: E501

        :param created_by: The created_by of this AwContentModel.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_on(self):
        """Gets the modified_on of this AwContentModel.  # noqa: E501

        Content modified on datetime.  # noqa: E501

        :return: The modified_on of this AwContentModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this AwContentModel.

        Content modified on datetime.  # noqa: E501

        :param modified_on: The modified_on of this AwContentModel.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def modified_by(self):
        """Gets the modified_by of this AwContentModel.  # noqa: E501

        Content created by user.  # noqa: E501

        :return: The modified_by of this AwContentModel.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this AwContentModel.

        Content created by user.  # noqa: E501

        :param modified_by: The modified_by of this AwContentModel.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def categories(self):
        """Gets the categories of this AwContentModel.  # noqa: E501

        Categories for the file.  # noqa: E501

        :return: The categories of this AwContentModel.  # noqa: E501
        :rtype: list[SearchCategoryModel]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AwContentModel.

        Categories for the file.  # noqa: E501

        :param categories: The categories of this AwContentModel.  # noqa: E501
        :type: list[SearchCategoryModel]
        """

        self._categories = categories

    @property
    def content_version(self):
        """Gets the content_version of this AwContentModel.  # noqa: E501

        Content version object.  # noqa: E501

        :return: The content_version of this AwContentModel.  # noqa: E501
        :rtype: AwContentVersionModel
        """
        return self._content_version

    @content_version.setter
    def content_version(self, content_version):
        """Sets the content_version of this AwContentModel.

        Content version object.  # noqa: E501

        :param content_version: The content_version of this AwContentModel.  # noqa: E501
        :type: AwContentVersionModel
        """

        self._content_version = content_version

    @property
    def security_settings(self):
        """Gets the security_settings of this AwContentModel.  # noqa: E501

        Security settings object.  # noqa: E501

        :return: The security_settings of this AwContentModel.  # noqa: E501
        :rtype: SecuritySettingsModel
        """
        return self._security_settings

    @security_settings.setter
    def security_settings(self, security_settings):
        """Sets the security_settings of this AwContentModel.

        Security settings object.  # noqa: E501

        :param security_settings: The security_settings of this AwContentModel.  # noqa: E501
        :type: SecuritySettingsModel
        """

        self._security_settings = security_settings

    @property
    def deployment_settings(self):
        """Gets the deployment_settings of this AwContentModel.  # noqa: E501

        Deployment settings object.  # noqa: E501

        :return: The deployment_settings of this AwContentModel.  # noqa: E501
        :rtype: DeploymentSettingsModel
        """
        return self._deployment_settings

    @deployment_settings.setter
    def deployment_settings(self, deployment_settings):
        """Sets the deployment_settings of this AwContentModel.

        Deployment settings object.  # noqa: E501

        :param deployment_settings: The deployment_settings of this AwContentModel.  # noqa: E501
        :type: DeploymentSettingsModel
        """

        self._deployment_settings = deployment_settings

    @property
    def assignment_settings(self):
        """Gets the assignment_settings of this AwContentModel.  # noqa: E501

        Assignment settings object.  # noqa: E501

        :return: The assignment_settings of this AwContentModel.  # noqa: E501
        :rtype: AssignmentSettingsModel
        """
        return self._assignment_settings

    @assignment_settings.setter
    def assignment_settings(self, assignment_settings):
        """Sets the assignment_settings of this AwContentModel.

        Assignment settings object.  # noqa: E501

        :param assignment_settings: The assignment_settings of this AwContentModel.  # noqa: E501
        :type: AssignmentSettingsModel
        """

        self._assignment_settings = assignment_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AwContentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwContentModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwContentModel):
            return True

        return self.to_dict() != other.to_dict()
