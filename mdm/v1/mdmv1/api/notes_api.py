# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class NotesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def notes_create_notes(self, device_id, device_notes, **kwargs):  # noqa: E501
        """Creates a new note for the device identified by device ID.  # noqa: E501

        Creates a new note for the specified device identified by device ID.  <br />   Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_create_notes(device_id, device_notes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Unique identifier used to identify device. (Required). (required)
        :param DeviceNotes device_notes: New device note to be added against specified device. (required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_create_notes_with_http_info(device_id, device_notes, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_create_notes_with_http_info(device_id, device_notes, **kwargs)  # noqa: E501
            return data

    def notes_create_notes_with_http_info(self, device_id, device_notes, **kwargs):  # noqa: E501
        """Creates a new note for the device identified by device ID.  # noqa: E501

        Creates a new note for the specified device identified by device ID.  <br />   Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_create_notes_with_http_info(device_id, device_notes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Unique identifier used to identify device. (Required). (required)
        :param DeviceNotes device_notes: New device note to be added against specified device. (required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'device_notes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_create_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `notes_create_notes`")  # noqa: E501
        # verify the required parameter 'device_notes' is set
        if self.api_client.client_side_validation and ('device_notes' not in params or
                                                       params['device_notes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_notes` when calling `notes_create_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_notes' in params:
            body_params = params['device_notes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceId}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_create_notes_by_alternate_id_async(self, device_notes, search_by, id, **kwargs):  # noqa: E501
        """Creates a note for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  creates a note for the device corresponding to alternate ID [Macaddress, Udid, Serialnumber, ImeiNumber].  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_create_notes_by_alternate_id_async(device_notes, search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceNotes_ device_notes: The DeviceNotes resource to create.(Required). (required)
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_create_notes_by_alternate_id_async_with_http_info(device_notes, search_by, id, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_create_notes_by_alternate_id_async_with_http_info(device_notes, search_by, id, **kwargs)  # noqa: E501
            return data

    def notes_create_notes_by_alternate_id_async_with_http_info(self, device_notes, search_by, id, **kwargs):  # noqa: E501
        """Creates a note for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  creates a note for the device corresponding to alternate ID [Macaddress, Udid, Serialnumber, ImeiNumber].  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_create_notes_by_alternate_id_async_with_http_info(device_notes, search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceNotes_ device_notes: The DeviceNotes resource to create.(Required). (required)
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_notes', 'search_by', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_create_notes_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_notes' is set
        if self.api_client.client_side_validation and ('device_notes' not in params or
                                                       params['device_notes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_notes` when calling `notes_create_notes_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `notes_create_notes_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `notes_create_notes_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_notes' in params:
            body_params = params['device_notes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_delete_note(self, device_id, note_id, **kwargs):  # noqa: E501
        """Deletes a note identified by note ID for the device identified by device ID.  # noqa: E501

        Deletes the existing note identified by note ID for the specified device identified by device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_delete_note(device_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Unique identifier used to identify device. (Required). (required)
        :param int note_id: Unique identifier used to identify device note. (Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_delete_note_with_http_info(device_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_delete_note_with_http_info(device_id, note_id, **kwargs)  # noqa: E501
            return data

    def notes_delete_note_with_http_info(self, device_id, note_id, **kwargs):  # noqa: E501
        """Deletes a note identified by note ID for the device identified by device ID.  # noqa: E501

        Deletes the existing note identified by note ID for the specified device identified by device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_delete_note_with_http_info(device_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Unique identifier used to identify device. (Required). (required)
        :param int note_id: Unique identifier used to identify device note. (Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_delete_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `notes_delete_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in params or
                                                       params['note_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note_id` when calling `notes_delete_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceId}/notes/{noteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_delete_note_by_alternate_id_async(self, note_id, search_by, id, **kwargs):  # noqa: E501
        """Deletes a note for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  deletes the note corresponding to alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber].  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_delete_note_by_alternate_id_async(note_id, search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: The note ID.(Required). (required)
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_delete_note_by_alternate_id_async_with_http_info(note_id, search_by, id, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_delete_note_by_alternate_id_async_with_http_info(note_id, search_by, id, **kwargs)  # noqa: E501
            return data

    def notes_delete_note_by_alternate_id_async_with_http_info(self, note_id, search_by, id, **kwargs):  # noqa: E501
        """Deletes a note for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  deletes the note corresponding to alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber].  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_delete_note_by_alternate_id_async_with_http_info(note_id, search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: The note ID.(Required). (required)
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id', 'search_by', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_delete_note_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in params or
                                                       params['note_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note_id` when calling `notes_delete_note_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `notes_delete_note_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `notes_delete_note_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/notes/{noteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_get_device_note(self, device_id, note_id, **kwargs):  # noqa: E501
        """Retrieves a particular note identified by note ID for the device identified by device ID.  # noqa: E501

        Retrieves the particular note identified by note ID added for specified device identified by device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_get_device_note(device_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Unique identifier used to identify device. (Required). (required)
        :param int note_id: Unique identifier used to identify device note. (Required). (required)
        :return: DeviceNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_get_device_note_with_http_info(device_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_get_device_note_with_http_info(device_id, note_id, **kwargs)  # noqa: E501
            return data

    def notes_get_device_note_with_http_info(self, device_id, note_id, **kwargs):  # noqa: E501
        """Retrieves a particular note identified by note ID for the device identified by device ID.  # noqa: E501

        Retrieves the particular note identified by note ID added for specified device identified by device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_get_device_note_with_http_info(device_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Unique identifier used to identify device. (Required). (required)
        :param int note_id: Unique identifier used to identify device note. (Required). (required)
        :return: DeviceNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'note_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_get_device_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `notes_get_device_note`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in params or
                                                       params['note_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note_id` when calling `notes_get_device_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceId}/notes/{noteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceNotes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_get_device_note_by_alternate_id_async(self, note_id, search_by, id, **kwargs):  # noqa: E501
        """Retrieves a particular note for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  returns the particular note for the device corresponding to alternate ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_get_device_note_by_alternate_id_async(note_id, search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: The note ID.(Required). (required)
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: DeviceNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_get_device_note_by_alternate_id_async_with_http_info(note_id, search_by, id, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_get_device_note_by_alternate_id_async_with_http_info(note_id, search_by, id, **kwargs)  # noqa: E501
            return data

    def notes_get_device_note_by_alternate_id_async_with_http_info(self, note_id, search_by, id, **kwargs):  # noqa: E501
        """Retrieves a particular note for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  returns the particular note for the device corresponding to alternate ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_get_device_note_by_alternate_id_async_with_http_info(note_id, search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: The note ID.(Required). (required)
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: DeviceNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id', 'search_by', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_get_device_note_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in params or
                                                       params['note_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note_id` when calling `notes_get_device_note_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `notes_get_device_note_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `notes_get_device_note_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/notes/{noteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceNotes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_get_device_notes_by_alternate_id_async(self, search_by, id, **kwargs):  # noqa: E501
        """Retrieves the notes for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  returns all the notes for the device corresponding to alternate search type and device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_get_device_notes_by_alternate_id_async(search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: DeviceNotesSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_get_device_notes_by_alternate_id_async_with_http_info(search_by, id, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_get_device_notes_by_alternate_id_async_with_http_info(search_by, id, **kwargs)  # noqa: E501
            return data

    def notes_get_device_notes_by_alternate_id_async_with_http_info(self, search_by, id, **kwargs):  # noqa: E501
        """Retrieves the notes for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  returns all the notes for the device corresponding to alternate search type and device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_get_device_notes_by_alternate_id_async_with_http_info(search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: DeviceNotesSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_by', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_get_device_notes_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `notes_get_device_notes_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `notes_get_device_notes_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceNotesSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_get_notes_by_device(self, id, **kwargs):  # noqa: E501
        """Retrieves the notes for the device identified by device ID.  # noqa: E501

        Retrieves the notes which are added for the specified device identified by device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_get_notes_by_device(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Unique identifier used to identify device. (Required). (required)
        :return: DeviceNotesSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_get_notes_by_device_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_get_notes_by_device_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notes_get_notes_by_device_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the notes for the device identified by device ID.  # noqa: E501

        Retrieves the notes which are added for the specified device identified by device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_get_notes_by_device_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Unique identifier used to identify device. (Required). (required)
        :return: DeviceNotesSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_get_notes_by_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `notes_get_notes_by_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceNotesSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_update_notes(self, device_id, note_id, device_notes, **kwargs):  # noqa: E501
        """Updates a note identified by note ID for the device identified by device ID.  # noqa: E501

        Updates the existing note identified by note ID for the specified device identified by device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_update_notes(device_id, note_id, device_notes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Unique identifier used to identify device. (Required). (required)
        :param int note_id: Unique identifier used to identify device note. (Required). (required)
        :param DeviceNotes device_notes: Device note to be updated against specified device. (Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_update_notes_with_http_info(device_id, note_id, device_notes, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_update_notes_with_http_info(device_id, note_id, device_notes, **kwargs)  # noqa: E501
            return data

    def notes_update_notes_with_http_info(self, device_id, note_id, device_notes, **kwargs):  # noqa: E501
        """Updates a note identified by note ID for the device identified by device ID.  # noqa: E501

        Updates the existing note identified by note ID for the specified device identified by device ID.  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_update_notes_with_http_info(device_id, note_id, device_notes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: Unique identifier used to identify device. (Required). (required)
        :param int note_id: Unique identifier used to identify device note. (Required). (required)
        :param DeviceNotes device_notes: Device note to be updated against specified device. (Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id', 'note_id', 'device_notes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_update_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `notes_update_notes`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in params or
                                                       params['note_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note_id` when calling `notes_update_notes`")  # noqa: E501
        # verify the required parameter 'device_notes' is set
        if self.api_client.client_side_validation and ('device_notes' not in params or
                                                       params['device_notes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_notes` when calling `notes_update_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_notes' in params:
            body_params = params['device_notes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceId}/notes/{noteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_update_notes_by_alternate_id_async(self, note_id, device_notes, search_by, id, **kwargs):  # noqa: E501
        """Updates a note for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  updates the note corresponding to alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber].  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_update_notes_by_alternate_id_async(note_id, device_notes, search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: The note ID.(Required). (required)
        :param DeviceNotes device_notes: Resource containing the note details.(Required). (required)
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notes_update_notes_by_alternate_id_async_with_http_info(note_id, device_notes, search_by, id, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_update_notes_by_alternate_id_async_with_http_info(note_id, device_notes, search_by, id, **kwargs)  # noqa: E501
            return data

    def notes_update_notes_by_alternate_id_async_with_http_info(self, note_id, device_notes, search_by, id, **kwargs):  # noqa: E501
        """Updates a note for the device identified by alternate ID.  # noqa: E501

        Perform all the necessary checks and  updates the note corresponding to alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber].  <br />  Notes can help better device management within deployment by specifying these against devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notes_update_notes_by_alternate_id_async_with_http_info(note_id, device_notes, search_by, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int note_id: The note ID.(Required). (required)
        :param DeviceNotes device_notes: Resource containing the note details.(Required). (required)
        :param str search_by: The alternate ID type [Macaddress, Udid, Serialnumber, ImeiNumber]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837).(Required). (required)
        :param str id: Device alternate ID.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['note_id', 'device_notes', 'search_by', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notes_update_notes_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in params or
                                                       params['note_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `note_id` when calling `notes_update_notes_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'device_notes' is set
        if self.api_client.client_side_validation and ('device_notes' not in params or
                                                       params['device_notes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_notes` when calling `notes_update_notes_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `notes_update_notes_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `notes_update_notes_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'note_id' in params:
            path_params['noteId'] = params['note_id']  # noqa: E501

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_notes' in params:
            body_params = params['device_notes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/notes/{noteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
