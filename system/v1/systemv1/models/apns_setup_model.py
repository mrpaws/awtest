# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class ApnsSetupModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apple_id': 'str',
        'certificate_signing_request_blob_id': 'int',
        'uploaded_certificate_blob_id': 'int',
        'issued_certificate_id': 'int',
        'renew': 'bool',
        'certificate_password': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'apple_id': 'AppleId',
        'certificate_signing_request_blob_id': 'CertificateSigningRequestBlobId',
        'uploaded_certificate_blob_id': 'UploadedCertificateBlobId',
        'issued_certificate_id': 'IssuedCertificateId',
        'renew': 'Renew',
        'certificate_password': 'CertificatePassword',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, apple_id=None, certificate_signing_request_blob_id=None, uploaded_certificate_blob_id=None, issued_certificate_id=None, renew=None, certificate_password=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """ApnsSetupModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._apple_id = None
        self._certificate_signing_request_blob_id = None
        self._uploaded_certificate_blob_id = None
        self._issued_certificate_id = None
        self._renew = None
        self._certificate_password = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if apple_id is not None:
            self.apple_id = apple_id
        if certificate_signing_request_blob_id is not None:
            self.certificate_signing_request_blob_id = certificate_signing_request_blob_id
        if uploaded_certificate_blob_id is not None:
            self.uploaded_certificate_blob_id = uploaded_certificate_blob_id
        if issued_certificate_id is not None:
            self.issued_certificate_id = issued_certificate_id
        if renew is not None:
            self.renew = renew
        if certificate_password is not None:
            self.certificate_password = certificate_password
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def apple_id(self):
        """Gets the apple_id of this ApnsSetupModel.  # noqa: E501

        Gets or sets apple id of account from which APNS certificate is created.  # noqa: E501

        :return: The apple_id of this ApnsSetupModel.  # noqa: E501
        :rtype: str
        """
        return self._apple_id

    @apple_id.setter
    def apple_id(self, apple_id):
        """Sets the apple_id of this ApnsSetupModel.

        Gets or sets apple id of account from which APNS certificate is created.  # noqa: E501

        :param apple_id: The apple_id of this ApnsSetupModel.  # noqa: E501
        :type: str
        """

        self._apple_id = apple_id

    @property
    def certificate_signing_request_blob_id(self):
        """Gets the certificate_signing_request_blob_id of this ApnsSetupModel.  # noqa: E501

        Gets or sets blob Url from which user can download .plist file required for APNS certificate generation.  # noqa: E501

        :return: The certificate_signing_request_blob_id of this ApnsSetupModel.  # noqa: E501
        :rtype: int
        """
        return self._certificate_signing_request_blob_id

    @certificate_signing_request_blob_id.setter
    def certificate_signing_request_blob_id(self, certificate_signing_request_blob_id):
        """Sets the certificate_signing_request_blob_id of this ApnsSetupModel.

        Gets or sets blob Url from which user can download .plist file required for APNS certificate generation.  # noqa: E501

        :param certificate_signing_request_blob_id: The certificate_signing_request_blob_id of this ApnsSetupModel.  # noqa: E501
        :type: int
        """

        self._certificate_signing_request_blob_id = certificate_signing_request_blob_id

    @property
    def uploaded_certificate_blob_id(self):
        """Gets the uploaded_certificate_blob_id of this ApnsSetupModel.  # noqa: E501

        Gets or sets id of APNS certificate blob uploaded by user,  Used in view to mark blob which points to Apple signed certificate uploaded by user from view  Remark this property is issued at the time of saving apple signed certificate, with the help of this Id, actual file is fetched from BlobStore.  # noqa: E501

        :return: The uploaded_certificate_blob_id of this ApnsSetupModel.  # noqa: E501
        :rtype: int
        """
        return self._uploaded_certificate_blob_id

    @uploaded_certificate_blob_id.setter
    def uploaded_certificate_blob_id(self, uploaded_certificate_blob_id):
        """Sets the uploaded_certificate_blob_id of this ApnsSetupModel.

        Gets or sets id of APNS certificate blob uploaded by user,  Used in view to mark blob which points to Apple signed certificate uploaded by user from view  Remark this property is issued at the time of saving apple signed certificate, with the help of this Id, actual file is fetched from BlobStore.  # noqa: E501

        :param uploaded_certificate_blob_id: The uploaded_certificate_blob_id of this ApnsSetupModel.  # noqa: E501
        :type: int
        """

        self._uploaded_certificate_blob_id = uploaded_certificate_blob_id

    @property
    def issued_certificate_id(self):
        """Gets the issued_certificate_id of this ApnsSetupModel.  # noqa: E501

        Gets or sets apns certificate Id issued for given environment, Id is 0 if no certificate exists for current OG.  # noqa: E501

        :return: The issued_certificate_id of this ApnsSetupModel.  # noqa: E501
        :rtype: int
        """
        return self._issued_certificate_id

    @issued_certificate_id.setter
    def issued_certificate_id(self, issued_certificate_id):
        """Sets the issued_certificate_id of this ApnsSetupModel.

        Gets or sets apns certificate Id issued for given environment, Id is 0 if no certificate exists for current OG.  # noqa: E501

        :param issued_certificate_id: The issued_certificate_id of this ApnsSetupModel.  # noqa: E501
        :type: int
        """

        self._issued_certificate_id = issued_certificate_id

    @property
    def renew(self):
        """Gets the renew of this ApnsSetupModel.  # noqa: E501

        Gets or sets apns certificate Child permission for given environment.  # noqa: E501

        :return: The renew of this ApnsSetupModel.  # noqa: E501
        :rtype: bool
        """
        return self._renew

    @renew.setter
    def renew(self, renew):
        """Sets the renew of this ApnsSetupModel.

        Gets or sets apns certificate Child permission for given environment.  # noqa: E501

        :param renew: The renew of this ApnsSetupModel.  # noqa: E501
        :type: bool
        """

        self._renew = renew

    @property
    def certificate_password(self):
        """Gets the certificate_password of this ApnsSetupModel.  # noqa: E501

        Gets or sets apns certificate Password for given environment.  # noqa: E501

        :return: The certificate_password of this ApnsSetupModel.  # noqa: E501
        :rtype: str
        """
        return self._certificate_password

    @certificate_password.setter
    def certificate_password(self, certificate_password):
        """Sets the certificate_password of this ApnsSetupModel.

        Gets or sets apns certificate Password for given environment.  # noqa: E501

        :param certificate_password: The certificate_password of this ApnsSetupModel.  # noqa: E501
        :type: str
        """

        self._certificate_password = certificate_password

    @property
    def id(self):
        """Gets the id of this ApnsSetupModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this ApnsSetupModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApnsSetupModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this ApnsSetupModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ApnsSetupModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this ApnsSetupModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApnsSetupModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this ApnsSetupModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApnsSetupModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApnsSetupModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApnsSetupModel):
            return True

        return self.to_dict() != other.to_dict()
