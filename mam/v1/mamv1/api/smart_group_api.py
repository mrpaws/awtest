# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv1.api_client import ApiClient


class SmartGroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def smart_group_add_internal_app_to_smart_group_async(self, applicationid, smartgroupid, **kwargs):  # noqa: E501
        """Assigns a Smart Group to an Internal Application.  # noqa: E501

        Assigns the smart group identified by the smartgroup id to the internal application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_add_internal_app_to_smart_group_async(applicationid, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :param int smartgroupid: SmartGroup Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_group_add_internal_app_to_smart_group_async_with_http_info(applicationid, smartgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_group_add_internal_app_to_smart_group_async_with_http_info(applicationid, smartgroupid, **kwargs)  # noqa: E501
            return data

    def smart_group_add_internal_app_to_smart_group_async_with_http_info(self, applicationid, smartgroupid, **kwargs):  # noqa: E501
        """Assigns a Smart Group to an Internal Application.  # noqa: E501

        Assigns the smart group identified by the smartgroup id to the internal application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_add_internal_app_to_smart_group_async_with_http_info(applicationid, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :param int smartgroupid: SmartGroup Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'smartgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_group_add_internal_app_to_smart_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `smart_group_add_internal_app_to_smart_group_async`")  # noqa: E501
        # verify the required parameter 'smartgroupid' is set
        if self.api_client.client_side_validation and ('smartgroupid' not in params or
                                                       params['smartgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `smartgroupid` when calling `smart_group_add_internal_app_to_smart_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501
        if 'smartgroupid' in params:
            path_params['smartgroupid'] = params['smartgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/smartgroups/{smartgroupid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_group_add_public_app_to_smart_group_async(self, application_id, smart_group_id, **kwargs):  # noqa: E501
        """Assigns a Smart Group to an Public Application.  # noqa: E501

        Assigns the smart group identified by the smartgroup id to the public application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_add_public_app_to_smart_group_async(application_id, smart_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Application Id. (required)
        :param int smart_group_id: SmartGroup Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_group_add_public_app_to_smart_group_async_with_http_info(application_id, smart_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_group_add_public_app_to_smart_group_async_with_http_info(application_id, smart_group_id, **kwargs)  # noqa: E501
            return data

    def smart_group_add_public_app_to_smart_group_async_with_http_info(self, application_id, smart_group_id, **kwargs):  # noqa: E501
        """Assigns a Smart Group to an Public Application.  # noqa: E501

        Assigns the smart group identified by the smartgroup id to the public application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_add_public_app_to_smart_group_async_with_http_info(application_id, smart_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Application Id. (required)
        :param int smart_group_id: SmartGroup Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'smart_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_group_add_public_app_to_smart_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `smart_group_add_public_app_to_smart_group_async`")  # noqa: E501
        # verify the required parameter 'smart_group_id' is set
        if self.api_client.client_side_validation and ('smart_group_id' not in params or
                                                       params['smart_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `smart_group_id` when calling `smart_group_add_public_app_to_smart_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501
        if 'smart_group_id' in params:
            path_params['smartGroupId'] = params['smart_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationId}/smartgroups/{smartGroupId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_group_delete_assignment_async(self, applicationid, smartgroupid, **kwargs):  # noqa: E501
        """Deletes smartgroup Assignment from a purchased application.  # noqa: E501

        Deletes the smart group assignment identified by the smartgroup id of the VPP application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_delete_assignment_async(applicationid, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Identifier. (required)
        :param int smartgroupid: SmartGroup Identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_group_delete_assignment_async_with_http_info(applicationid, smartgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_group_delete_assignment_async_with_http_info(applicationid, smartgroupid, **kwargs)  # noqa: E501
            return data

    def smart_group_delete_assignment_async_with_http_info(self, applicationid, smartgroupid, **kwargs):  # noqa: E501
        """Deletes smartgroup Assignment from a purchased application.  # noqa: E501

        Deletes the smart group assignment identified by the smartgroup id of the VPP application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_delete_assignment_async_with_http_info(applicationid, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Identifier. (required)
        :param int smartgroupid: SmartGroup Identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'smartgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_group_delete_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `smart_group_delete_assignment_async`")  # noqa: E501
        # verify the required parameter 'smartgroupid' is set
        if self.api_client.client_side_validation and ('smartgroupid' not in params or
                                                       params['smartgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `smartgroupid` when calling `smart_group_delete_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501
        if 'smartgroupid' in params:
            path_params['smartgroupid'] = params['smartgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/purchased/{applicationid}/smartgroups/{smartgroupid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_group_remove_internal_app_from_smart_group_async(self, applicationid, smartgroupid, **kwargs):  # noqa: E501
        """Removes the Smart Group Assignment from an Internal Application.  # noqa: E501

        Removes the assignment identified by the smartgroup id for the internal application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_remove_internal_app_from_smart_group_async(applicationid, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :param int smartgroupid: SmartGroup Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_group_remove_internal_app_from_smart_group_async_with_http_info(applicationid, smartgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_group_remove_internal_app_from_smart_group_async_with_http_info(applicationid, smartgroupid, **kwargs)  # noqa: E501
            return data

    def smart_group_remove_internal_app_from_smart_group_async_with_http_info(self, applicationid, smartgroupid, **kwargs):  # noqa: E501
        """Removes the Smart Group Assignment from an Internal Application.  # noqa: E501

        Removes the assignment identified by the smartgroup id for the internal application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_remove_internal_app_from_smart_group_async_with_http_info(applicationid, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :param int smartgroupid: SmartGroup Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'smartgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_group_remove_internal_app_from_smart_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `smart_group_remove_internal_app_from_smart_group_async`")  # noqa: E501
        # verify the required parameter 'smartgroupid' is set
        if self.api_client.client_side_validation and ('smartgroupid' not in params or
                                                       params['smartgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `smartgroupid` when calling `smart_group_remove_internal_app_from_smart_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501
        if 'smartgroupid' in params:
            path_params['smartgroupid'] = params['smartgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/smartgroups/{smartgroupid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def smart_group_remove_public_app_from_smart_group_async(self, applicationid, smartgroupid, **kwargs):  # noqa: E501
        """Removes the Smart Group Assignment from a Public Application.  # noqa: E501

        1. Removes the assignment identified by the smartgroup id for the public application  2. Excluded Assignment Groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any SG ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_remove_public_app_from_smart_group_async(applicationid, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :param int smartgroupid: SmartGroup Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.smart_group_remove_public_app_from_smart_group_async_with_http_info(applicationid, smartgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.smart_group_remove_public_app_from_smart_group_async_with_http_info(applicationid, smartgroupid, **kwargs)  # noqa: E501
            return data

    def smart_group_remove_public_app_from_smart_group_async_with_http_info(self, applicationid, smartgroupid, **kwargs):  # noqa: E501
        """Removes the Smart Group Assignment from a Public Application.  # noqa: E501

        1. Removes the assignment identified by the smartgroup id for the public application  2. Excluded Assignment Groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any SG ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.smart_group_remove_public_app_from_smart_group_async_with_http_info(applicationid, smartgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :param int smartgroupid: SmartGroup Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'smartgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method smart_group_remove_public_app_from_smart_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `smart_group_remove_public_app_from_smart_group_async`")  # noqa: E501
        # verify the required parameter 'smartgroupid' is set
        if self.api_client.client_side_validation and ('smartgroupid' not in params or
                                                       params['smartgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `smartgroupid` when calling `smart_group_remove_public_app_from_smart_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501
        if 'smartgroupid' in params:
            path_params['smartgroupid'] = params['smartgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/public/{applicationid}/smartgroups/{smartgroupid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
