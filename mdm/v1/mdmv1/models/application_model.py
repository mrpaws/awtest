# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ApplicationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_name': 'str',
        'bundle_id': 'str',
        'platform': 'str',
        'version': 'str',
        'managed_by': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'application_name': 'applicationName',
        'bundle_id': 'bundleId',
        'platform': 'platform',
        'version': 'version',
        'managed_by': 'managedBy',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, application_name=None, bundle_id=None, platform=None, version=None, managed_by=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """ApplicationModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application_name = None
        self._bundle_id = None
        self._platform = None
        self._version = None
        self._managed_by = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if application_name is not None:
            self.application_name = application_name
        if bundle_id is not None:
            self.bundle_id = bundle_id
        if platform is not None:
            self.platform = platform
        if version is not None:
            self.version = version
        if managed_by is not None:
            self.managed_by = managed_by
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def application_name(self):
        """Gets the application_name of this ApplicationModel.  # noqa: E501

        Gets or sets the Application Name.  # noqa: E501

        :return: The application_name of this ApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApplicationModel.

        Gets or sets the Application Name.  # noqa: E501

        :param application_name: The application_name of this ApplicationModel.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def bundle_id(self):
        """Gets the bundle_id of this ApplicationModel.  # noqa: E501

        Gets or sets Bundle Id of the App.  # noqa: E501

        :return: The bundle_id of this ApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this ApplicationModel.

        Gets or sets Bundle Id of the App.  # noqa: E501

        :param bundle_id: The bundle_id of this ApplicationModel.  # noqa: E501
        :type: str
        """

        self._bundle_id = bundle_id

    @property
    def platform(self):
        """Gets the platform of this ApplicationModel.  # noqa: E501

        Gets or sets the Platform.  # noqa: E501

        :return: The platform of this ApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ApplicationModel.

        Gets or sets the Platform.  # noqa: E501

        :param platform: The platform of this ApplicationModel.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def version(self):
        """Gets the version of this ApplicationModel.  # noqa: E501

        Gets or sets the Version of the App.  # noqa: E501

        :return: The version of this ApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApplicationModel.

        Gets or sets the Version of the App.  # noqa: E501

        :param version: The version of this ApplicationModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def managed_by(self):
        """Gets the managed_by of this ApplicationModel.  # noqa: E501

        Gets or sets Managed By Organization Group Id.  # noqa: E501

        :return: The managed_by of this ApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this ApplicationModel.

        Gets or sets Managed By Organization Group Id.  # noqa: E501

        :param managed_by: The managed_by of this ApplicationModel.  # noqa: E501
        :type: str
        """

        self._managed_by = managed_by

    @property
    def id(self):
        """Gets the id of this ApplicationModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this ApplicationModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this ApplicationModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ApplicationModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this ApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApplicationModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this ApplicationModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationModel):
            return True

        return self.to_dict() != other.to_dict()
