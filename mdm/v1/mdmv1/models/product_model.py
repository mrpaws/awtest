# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ProductModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'EntityId_',
        'platform_id': 'int',
        'name': 'str',
        'managed_by_organization_group_id': 'str',
        'description': 'str',
        'managed_by_organization_group_name': 'str',
        'active': 'bool',
        'platform': 'str',
        'smart_groups': 'list[ProductSmartGroup]',
        'manifest': 'Manifest_',
        'conditions': 'list[ProductCondition1]',
        'total_assigned': 'int',
        'compliant': 'int',
        'in_progress': 'int',
        'failed': 'int',
        'rule_logic': 'str',
        'activation_date_time': 'str',
        'deactivation_date_time': 'str',
        'pause_resume': 'bool',
        'deployment_mode': 'int',
        'device_policy_type_id': 'int',
        'device_policy_type': 'str',
        'activation_or_deactivation_type': 'str',
        'compliance_override_rule': 'str',
        'auto_retry': 'bool',
        'device_reprocess': 'bool',
        'device_policy_uuid': 'str',
        'is_expedited': 'bool',
        'version': 'int',
        'product_e_tag': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'platform_id': 'PlatformID',
        'name': 'Name',
        'managed_by_organization_group_id': 'ManagedByOrganizationGroupID',
        'description': 'Description',
        'managed_by_organization_group_name': 'ManagedByOrganizationGroupName',
        'active': 'Active',
        'platform': 'Platform',
        'smart_groups': 'SmartGroups',
        'manifest': 'Manifest',
        'conditions': 'Conditions',
        'total_assigned': 'TotalAssigned',
        'compliant': 'Compliant',
        'in_progress': 'InProgress',
        'failed': 'Failed',
        'rule_logic': 'RuleLogic',
        'activation_date_time': 'ActivationDateTime',
        'deactivation_date_time': 'DeactivationDateTime',
        'pause_resume': 'PauseResume',
        'deployment_mode': 'DeploymentMode',
        'device_policy_type_id': 'DevicePolicyTypeID',
        'device_policy_type': 'DevicePolicyType',
        'activation_or_deactivation_type': 'ActivationOrDeactivationType',
        'compliance_override_rule': 'ComplianceOverrideRule',
        'auto_retry': 'AutoRetry',
        'device_reprocess': 'DeviceReprocess',
        'device_policy_uuid': 'DevicePolicyUuid',
        'is_expedited': 'IsExpedited',
        'version': 'Version',
        'product_e_tag': 'ProductETag'
    }

    def __init__(self, id=None, platform_id=None, name=None, managed_by_organization_group_id=None, description=None, managed_by_organization_group_name=None, active=None, platform=None, smart_groups=None, manifest=None, conditions=None, total_assigned=None, compliant=None, in_progress=None, failed=None, rule_logic=None, activation_date_time=None, deactivation_date_time=None, pause_resume=None, deployment_mode=None, device_policy_type_id=None, device_policy_type=None, activation_or_deactivation_type=None, compliance_override_rule=None, auto_retry=None, device_reprocess=None, device_policy_uuid=None, is_expedited=None, version=None, product_e_tag=None, _configuration=None):  # noqa: E501
        """ProductModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._platform_id = None
        self._name = None
        self._managed_by_organization_group_id = None
        self._description = None
        self._managed_by_organization_group_name = None
        self._active = None
        self._platform = None
        self._smart_groups = None
        self._manifest = None
        self._conditions = None
        self._total_assigned = None
        self._compliant = None
        self._in_progress = None
        self._failed = None
        self._rule_logic = None
        self._activation_date_time = None
        self._deactivation_date_time = None
        self._pause_resume = None
        self._deployment_mode = None
        self._device_policy_type_id = None
        self._device_policy_type = None
        self._activation_or_deactivation_type = None
        self._compliance_override_rule = None
        self._auto_retry = None
        self._device_reprocess = None
        self._device_policy_uuid = None
        self._is_expedited = None
        self._version = None
        self._product_e_tag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if platform_id is not None:
            self.platform_id = platform_id
        if name is not None:
            self.name = name
        if managed_by_organization_group_id is not None:
            self.managed_by_organization_group_id = managed_by_organization_group_id
        if description is not None:
            self.description = description
        if managed_by_organization_group_name is not None:
            self.managed_by_organization_group_name = managed_by_organization_group_name
        if active is not None:
            self.active = active
        if platform is not None:
            self.platform = platform
        if smart_groups is not None:
            self.smart_groups = smart_groups
        if manifest is not None:
            self.manifest = manifest
        if conditions is not None:
            self.conditions = conditions
        if total_assigned is not None:
            self.total_assigned = total_assigned
        if compliant is not None:
            self.compliant = compliant
        if in_progress is not None:
            self.in_progress = in_progress
        if failed is not None:
            self.failed = failed
        if rule_logic is not None:
            self.rule_logic = rule_logic
        if activation_date_time is not None:
            self.activation_date_time = activation_date_time
        if deactivation_date_time is not None:
            self.deactivation_date_time = deactivation_date_time
        if pause_resume is not None:
            self.pause_resume = pause_resume
        if deployment_mode is not None:
            self.deployment_mode = deployment_mode
        if device_policy_type_id is not None:
            self.device_policy_type_id = device_policy_type_id
        if device_policy_type is not None:
            self.device_policy_type = device_policy_type
        if activation_or_deactivation_type is not None:
            self.activation_or_deactivation_type = activation_or_deactivation_type
        if compliance_override_rule is not None:
            self.compliance_override_rule = compliance_override_rule
        if auto_retry is not None:
            self.auto_retry = auto_retry
        if device_reprocess is not None:
            self.device_reprocess = device_reprocess
        if device_policy_uuid is not None:
            self.device_policy_uuid = device_policy_uuid
        if is_expedited is not None:
            self.is_expedited = is_expedited
        if version is not None:
            self.version = version
        if product_e_tag is not None:
            self.product_e_tag = product_e_tag

    @property
    def id(self):
        """Gets the id of this ProductModel.  # noqa: E501

        Gets or sets product Identifier.  # noqa: E501

        :return: The id of this ProductModel.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductModel.

        Gets or sets product Identifier.  # noqa: E501

        :param id: The id of this ProductModel.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def platform_id(self):
        """Gets the platform_id of this ProductModel.  # noqa: E501

        Gets or sets the platform identifier.  # noqa: E501

        :return: The platform_id of this ProductModel.  # noqa: E501
        :rtype: int
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this ProductModel.

        Gets or sets the platform identifier.  # noqa: E501

        :param platform_id: The platform_id of this ProductModel.  # noqa: E501
        :type: int
        """

        self._platform_id = platform_id

    @property
    def name(self):
        """Gets the name of this ProductModel.  # noqa: E501

        Gets or sets product Name.  # noqa: E501

        :return: The name of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductModel.

        Gets or sets product Name.  # noqa: E501

        :param name: The name of this ProductModel.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'[^*:?\"<>|\\\/;,\\[\\]\\(\\)&]+', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/[^*:?\"<>|\\\/;,\\[\\]\\(\\)&]+/`")  # noqa: E501

        self._name = name

    @property
    def managed_by_organization_group_id(self):
        """Gets the managed_by_organization_group_id of this ProductModel.  # noqa: E501

        Gets or sets managedBy Root Organization Group Identifier.  # noqa: E501

        :return: The managed_by_organization_group_id of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_organization_group_id

    @managed_by_organization_group_id.setter
    def managed_by_organization_group_id(self, managed_by_organization_group_id):
        """Sets the managed_by_organization_group_id of this ProductModel.

        Gets or sets managedBy Root Organization Group Identifier.  # noqa: E501

        :param managed_by_organization_group_id: The managed_by_organization_group_id of this ProductModel.  # noqa: E501
        :type: str
        """

        self._managed_by_organization_group_id = managed_by_organization_group_id

    @property
    def description(self):
        """Gets the description of this ProductModel.  # noqa: E501

        Gets or sets product Description.  # noqa: E501

        :return: The description of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductModel.

        Gets or sets product Description.  # noqa: E501

        :param description: The description of this ProductModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def managed_by_organization_group_name(self):
        """Gets the managed_by_organization_group_name of this ProductModel.  # noqa: E501

        Gets or sets managedBy Root Organization Group Name.  # noqa: E501

        :return: The managed_by_organization_group_name of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_organization_group_name

    @managed_by_organization_group_name.setter
    def managed_by_organization_group_name(self, managed_by_organization_group_name):
        """Sets the managed_by_organization_group_name of this ProductModel.

        Gets or sets managedBy Root Organization Group Name.  # noqa: E501

        :param managed_by_organization_group_name: The managed_by_organization_group_name of this ProductModel.  # noqa: E501
        :type: str
        """

        self._managed_by_organization_group_name = managed_by_organization_group_name

    @property
    def active(self):
        """Gets the active of this ProductModel.  # noqa: E501

        Gets or sets a value indicating whether specifies whether the product is active or not, true -&gt; active, false -&gt; inactive.  # noqa: E501

        :return: The active of this ProductModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ProductModel.

        Gets or sets a value indicating whether specifies whether the product is active or not, true -&gt; active, false -&gt; inactive.  # noqa: E501

        :param active: The active of this ProductModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def platform(self):
        """Gets the platform of this ProductModel.  # noqa: E501

        Gets or sets platform name of the Product.  # noqa: E501

        :return: The platform of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ProductModel.

        Gets or sets platform name of the Product.  # noqa: E501

        :param platform: The platform of this ProductModel.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def smart_groups(self):
        """Gets the smart_groups of this ProductModel.  # noqa: E501

        Gets or sets smart group details which are assigned to current Product.  # noqa: E501

        :return: The smart_groups of this ProductModel.  # noqa: E501
        :rtype: list[ProductSmartGroup]
        """
        return self._smart_groups

    @smart_groups.setter
    def smart_groups(self, smart_groups):
        """Sets the smart_groups of this ProductModel.

        Gets or sets smart group details which are assigned to current Product.  # noqa: E501

        :param smart_groups: The smart_groups of this ProductModel.  # noqa: E501
        :type: list[ProductSmartGroup]
        """

        self._smart_groups = smart_groups

    @property
    def manifest(self):
        """Gets the manifest of this ProductModel.  # noqa: E501

        Gets or sets manifesr Resource.  # noqa: E501

        :return: The manifest of this ProductModel.  # noqa: E501
        :rtype: Manifest_
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this ProductModel.

        Gets or sets manifesr Resource.  # noqa: E501

        :param manifest: The manifest of this ProductModel.  # noqa: E501
        :type: Manifest_
        """

        self._manifest = manifest

    @property
    def conditions(self):
        """Gets the conditions of this ProductModel.  # noqa: E501

        Gets or sets device Policy Conditions that are associated with the current Product.  # noqa: E501

        :return: The conditions of this ProductModel.  # noqa: E501
        :rtype: list[ProductCondition1]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ProductModel.

        Gets or sets device Policy Conditions that are associated with the current Product.  # noqa: E501

        :param conditions: The conditions of this ProductModel.  # noqa: E501
        :type: list[ProductCondition1]
        """

        self._conditions = conditions

    @property
    def total_assigned(self):
        """Gets the total_assigned of this ProductModel.  # noqa: E501

        Gets or sets total number of devices which are assigned.  # noqa: E501

        :return: The total_assigned of this ProductModel.  # noqa: E501
        :rtype: int
        """
        return self._total_assigned

    @total_assigned.setter
    def total_assigned(self, total_assigned):
        """Sets the total_assigned of this ProductModel.

        Gets or sets total number of devices which are assigned.  # noqa: E501

        :param total_assigned: The total_assigned of this ProductModel.  # noqa: E501
        :type: int
        """

        self._total_assigned = total_assigned

    @property
    def compliant(self):
        """Gets the compliant of this ProductModel.  # noqa: E501

        Gets or sets number of devices which are compliant.  # noqa: E501

        :return: The compliant of this ProductModel.  # noqa: E501
        :rtype: int
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this ProductModel.

        Gets or sets number of devices which are compliant.  # noqa: E501

        :param compliant: The compliant of this ProductModel.  # noqa: E501
        :type: int
        """

        self._compliant = compliant

    @property
    def in_progress(self):
        """Gets the in_progress of this ProductModel.  # noqa: E501

        Gets or sets number of devices for which provisioning is in progress.  # noqa: E501

        :return: The in_progress of this ProductModel.  # noqa: E501
        :rtype: int
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this ProductModel.

        Gets or sets number of devices for which provisioning is in progress.  # noqa: E501

        :param in_progress: The in_progress of this ProductModel.  # noqa: E501
        :type: int
        """

        self._in_progress = in_progress

    @property
    def failed(self):
        """Gets the failed of this ProductModel.  # noqa: E501

        Gets or sets number of devices for which product provisioning got failed.  # noqa: E501

        :return: The failed of this ProductModel.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this ProductModel.

        Gets or sets number of devices for which product provisioning got failed.  # noqa: E501

        :param failed: The failed of this ProductModel.  # noqa: E501
        :type: int
        """

        self._failed = failed

    @property
    def rule_logic(self):
        """Gets the rule_logic of this ProductModel.  # noqa: E501

        Gets or sets product Rule.  # noqa: E501

        :return: The rule_logic of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._rule_logic

    @rule_logic.setter
    def rule_logic(self, rule_logic):
        """Sets the rule_logic of this ProductModel.

        Gets or sets product Rule.  # noqa: E501

        :param rule_logic: The rule_logic of this ProductModel.  # noqa: E501
        :type: str
        """

        self._rule_logic = rule_logic

    @property
    def activation_date_time(self):
        """Gets the activation_date_time of this ProductModel.  # noqa: E501

        Gets or sets product Activation time.  # noqa: E501

        :return: The activation_date_time of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._activation_date_time

    @activation_date_time.setter
    def activation_date_time(self, activation_date_time):
        """Sets the activation_date_time of this ProductModel.

        Gets or sets product Activation time.  # noqa: E501

        :param activation_date_time: The activation_date_time of this ProductModel.  # noqa: E501
        :type: str
        """

        self._activation_date_time = activation_date_time

    @property
    def deactivation_date_time(self):
        """Gets the deactivation_date_time of this ProductModel.  # noqa: E501

        Gets or sets product Deactivation time.  # noqa: E501

        :return: The deactivation_date_time of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._deactivation_date_time

    @deactivation_date_time.setter
    def deactivation_date_time(self, deactivation_date_time):
        """Sets the deactivation_date_time of this ProductModel.

        Gets or sets product Deactivation time.  # noqa: E501

        :param deactivation_date_time: The deactivation_date_time of this ProductModel.  # noqa: E501
        :type: str
        """

        self._deactivation_date_time = deactivation_date_time

    @property
    def pause_resume(self):
        """Gets the pause_resume of this ProductModel.  # noqa: E501

        Gets or sets a value indicating whether pause Resume.  # noqa: E501

        :return: The pause_resume of this ProductModel.  # noqa: E501
        :rtype: bool
        """
        return self._pause_resume

    @pause_resume.setter
    def pause_resume(self, pause_resume):
        """Sets the pause_resume of this ProductModel.

        Gets or sets a value indicating whether pause Resume.  # noqa: E501

        :param pause_resume: The pause_resume of this ProductModel.  # noqa: E501
        :type: bool
        """

        self._pause_resume = pause_resume

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this ProductModel.  # noqa: E501

        Gets or sets deployment Mode.  # noqa: E501

        :return: The deployment_mode of this ProductModel.  # noqa: E501
        :rtype: int
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this ProductModel.

        Gets or sets deployment Mode.  # noqa: E501

        :param deployment_mode: The deployment_mode of this ProductModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                deployment_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    @property
    def device_policy_type_id(self):
        """Gets the device_policy_type_id of this ProductModel.  # noqa: E501

        Gets or sets device Policy Type ID.  # noqa: E501

        :return: The device_policy_type_id of this ProductModel.  # noqa: E501
        :rtype: int
        """
        return self._device_policy_type_id

    @device_policy_type_id.setter
    def device_policy_type_id(self, device_policy_type_id):
        """Sets the device_policy_type_id of this ProductModel.

        Gets or sets device Policy Type ID.  # noqa: E501

        :param device_policy_type_id: The device_policy_type_id of this ProductModel.  # noqa: E501
        :type: int
        """

        self._device_policy_type_id = device_policy_type_id

    @property
    def device_policy_type(self):
        """Gets the device_policy_type of this ProductModel.  # noqa: E501

        Gets or sets device Policy Type Name.  # noqa: E501

        :return: The device_policy_type of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._device_policy_type

    @device_policy_type.setter
    def device_policy_type(self, device_policy_type):
        """Sets the device_policy_type of this ProductModel.

        Gets or sets device Policy Type Name.  # noqa: E501

        :param device_policy_type: The device_policy_type of this ProductModel.  # noqa: E501
        :type: str
        """

        self._device_policy_type = device_policy_type

    @property
    def activation_or_deactivation_type(self):
        """Gets the activation_or_deactivation_type of this ProductModel.  # noqa: E501

        Gets or sets activation or Deactivation type, like \"Auto\", \"Partial Auto\", \"Manual\" etc.  # noqa: E501

        :return: The activation_or_deactivation_type of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._activation_or_deactivation_type

    @activation_or_deactivation_type.setter
    def activation_or_deactivation_type(self, activation_or_deactivation_type):
        """Sets the activation_or_deactivation_type of this ProductModel.

        Gets or sets activation or Deactivation type, like \"Auto\", \"Partial Auto\", \"Manual\" etc.  # noqa: E501

        :param activation_or_deactivation_type: The activation_or_deactivation_type of this ProductModel.  # noqa: E501
        :type: str
        """

        self._activation_or_deactivation_type = activation_or_deactivation_type

    @property
    def compliance_override_rule(self):
        """Gets the compliance_override_rule of this ProductModel.  # noqa: E501

        Gets or sets compliance Override  Rule.  # noqa: E501

        :return: The compliance_override_rule of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._compliance_override_rule

    @compliance_override_rule.setter
    def compliance_override_rule(self, compliance_override_rule):
        """Sets the compliance_override_rule of this ProductModel.

        Gets or sets compliance Override  Rule.  # noqa: E501

        :param compliance_override_rule: The compliance_override_rule of this ProductModel.  # noqa: E501
        :type: str
        """

        self._compliance_override_rule = compliance_override_rule

    @property
    def auto_retry(self):
        """Gets the auto_retry of this ProductModel.  # noqa: E501

        Gets or sets a value indicating whether [automatic retry].  # noqa: E501

        :return: The auto_retry of this ProductModel.  # noqa: E501
        :rtype: bool
        """
        return self._auto_retry

    @auto_retry.setter
    def auto_retry(self, auto_retry):
        """Sets the auto_retry of this ProductModel.

        Gets or sets a value indicating whether [automatic retry].  # noqa: E501

        :param auto_retry: The auto_retry of this ProductModel.  # noqa: E501
        :type: bool
        """

        self._auto_retry = auto_retry

    @property
    def device_reprocess(self):
        """Gets the device_reprocess of this ProductModel.  # noqa: E501

        Gets or sets a value indicating whether device reprocess is enabled or not.  # noqa: E501

        :return: The device_reprocess of this ProductModel.  # noqa: E501
        :rtype: bool
        """
        return self._device_reprocess

    @device_reprocess.setter
    def device_reprocess(self, device_reprocess):
        """Sets the device_reprocess of this ProductModel.

        Gets or sets a value indicating whether device reprocess is enabled or not.  # noqa: E501

        :param device_reprocess: The device_reprocess of this ProductModel.  # noqa: E501
        :type: bool
        """

        self._device_reprocess = device_reprocess

    @property
    def device_policy_uuid(self):
        """Gets the device_policy_uuid of this ProductModel.  # noqa: E501

        Gets or sets the device policy uuid.  # noqa: E501

        :return: The device_policy_uuid of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._device_policy_uuid

    @device_policy_uuid.setter
    def device_policy_uuid(self, device_policy_uuid):
        """Sets the device_policy_uuid of this ProductModel.

        Gets or sets the device policy uuid.  # noqa: E501

        :param device_policy_uuid: The device_policy_uuid of this ProductModel.  # noqa: E501
        :type: str
        """

        self._device_policy_uuid = device_policy_uuid

    @property
    def is_expedited(self):
        """Gets the is_expedited of this ProductModel.  # noqa: E501

        Gets or sets a value indicating whether product expedited.  # noqa: E501

        :return: The is_expedited of this ProductModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_expedited

    @is_expedited.setter
    def is_expedited(self, is_expedited):
        """Sets the is_expedited of this ProductModel.

        Gets or sets a value indicating whether product expedited.  # noqa: E501

        :param is_expedited: The is_expedited of this ProductModel.  # noqa: E501
        :type: bool
        """

        self._is_expedited = is_expedited

    @property
    def version(self):
        """Gets the version of this ProductModel.  # noqa: E501

        Gets or sets the version of a product.  # noqa: E501

        :return: The version of this ProductModel.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ProductModel.

        Gets or sets the version of a product.  # noqa: E501

        :param version: The version of this ProductModel.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def product_e_tag(self):
        """Gets the product_e_tag of this ProductModel.  # noqa: E501

        Gets or sets the product ETag.  # noqa: E501

        :return: The product_e_tag of this ProductModel.  # noqa: E501
        :rtype: str
        """
        return self._product_e_tag

    @product_e_tag.setter
    def product_e_tag(self, product_e_tag):
        """Sets the product_e_tag of this ProductModel.

        Gets or sets the product ETag.  # noqa: E501

        :param product_e_tag: The product_e_tag of this ProductModel.  # noqa: E501
        :type: str
        """

        self._product_e_tag = product_e_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductModel):
            return True

        return self.to_dict() != other.to_dict()
