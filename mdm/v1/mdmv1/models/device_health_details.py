# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceHealthDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'EntityId_',
        'udid': 'str',
        'serial_number': 'str',
        'asset_number': 'str',
        'friendly_name': 'str',
        'organization_group_id': 'int',
        'username': 'str',
        'available_disk_space': 'int',
        'total_memory': 'int',
        'device_network_info': 'list[DeviceNetworkInfo]',
        'gps_coordinates': 'ProductGpsCoordinate_',
        'custom_attributes': 'list[ProductCustomAttribute]'
    }

    attribute_map = {
        'device_id': 'DeviceId',
        'udid': 'UDID',
        'serial_number': 'SerialNumber',
        'asset_number': 'AssetNumber',
        'friendly_name': 'FriendlyName',
        'organization_group_id': 'OrganizationGroupId',
        'username': 'Username',
        'available_disk_space': 'AvailableDiskSpace',
        'total_memory': 'TotalMemory',
        'device_network_info': 'DeviceNetworkInfo',
        'gps_coordinates': 'GPSCoordinates',
        'custom_attributes': 'CustomAttributes'
    }

    def __init__(self, device_id=None, udid=None, serial_number=None, asset_number=None, friendly_name=None, organization_group_id=None, username=None, available_disk_space=None, total_memory=None, device_network_info=None, gps_coordinates=None, custom_attributes=None, _configuration=None):  # noqa: E501
        """DeviceHealthDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_id = None
        self._udid = None
        self._serial_number = None
        self._asset_number = None
        self._friendly_name = None
        self._organization_group_id = None
        self._username = None
        self._available_disk_space = None
        self._total_memory = None
        self._device_network_info = None
        self._gps_coordinates = None
        self._custom_attributes = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if udid is not None:
            self.udid = udid
        if serial_number is not None:
            self.serial_number = serial_number
        if asset_number is not None:
            self.asset_number = asset_number
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if username is not None:
            self.username = username
        if available_disk_space is not None:
            self.available_disk_space = available_disk_space
        if total_memory is not None:
            self.total_memory = total_memory
        if device_network_info is not None:
            self.device_network_info = device_network_info
        if gps_coordinates is not None:
            self.gps_coordinates = gps_coordinates
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes

    @property
    def device_id(self):
        """Gets the device_id of this DeviceHealthDetails.  # noqa: E501

        Gets or sets device Identifier.  # noqa: E501

        :return: The device_id of this DeviceHealthDetails.  # noqa: E501
        :rtype: EntityId_
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceHealthDetails.

        Gets or sets device Identifier.  # noqa: E501

        :param device_id: The device_id of this DeviceHealthDetails.  # noqa: E501
        :type: EntityId_
        """

        self._device_id = device_id

    @property
    def udid(self):
        """Gets the udid of this DeviceHealthDetails.  # noqa: E501

        Gets or sets device UDID.  # noqa: E501

        :return: The udid of this DeviceHealthDetails.  # noqa: E501
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this DeviceHealthDetails.

        Gets or sets device UDID.  # noqa: E501

        :param udid: The udid of this DeviceHealthDetails.  # noqa: E501
        :type: str
        """

        self._udid = udid

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceHealthDetails.  # noqa: E501

        Gets or sets device Serial Name.  # noqa: E501

        :return: The serial_number of this DeviceHealthDetails.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceHealthDetails.

        Gets or sets device Serial Name.  # noqa: E501

        :param serial_number: The serial_number of this DeviceHealthDetails.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def asset_number(self):
        """Gets the asset_number of this DeviceHealthDetails.  # noqa: E501

        Gets or sets device AssetNumber.  # noqa: E501

        :return: The asset_number of this DeviceHealthDetails.  # noqa: E501
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this DeviceHealthDetails.

        Gets or sets device AssetNumber.  # noqa: E501

        :param asset_number: The asset_number of this DeviceHealthDetails.  # noqa: E501
        :type: str
        """

        self._asset_number = asset_number

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DeviceHealthDetails.  # noqa: E501

        Gets or sets device Friendly name.  # noqa: E501

        :return: The friendly_name of this DeviceHealthDetails.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DeviceHealthDetails.

        Gets or sets device Friendly name.  # noqa: E501

        :param friendly_name: The friendly_name of this DeviceHealthDetails.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this DeviceHealthDetails.  # noqa: E501

        Gets or sets id of the Organization Group at which current device is enrolled or registered.  # noqa: E501

        :return: The organization_group_id of this DeviceHealthDetails.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this DeviceHealthDetails.

        Gets or sets id of the Organization Group at which current device is enrolled or registered.  # noqa: E501

        :param organization_group_id: The organization_group_id of this DeviceHealthDetails.  # noqa: E501
        :type: int
        """

        self._organization_group_id = organization_group_id

    @property
    def username(self):
        """Gets the username of this DeviceHealthDetails.  # noqa: E501

        Gets or sets enrollemnt Username.  # noqa: E501

        :return: The username of this DeviceHealthDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DeviceHealthDetails.

        Gets or sets enrollemnt Username.  # noqa: E501

        :param username: The username of this DeviceHealthDetails.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def available_disk_space(self):
        """Gets the available_disk_space of this DeviceHealthDetails.  # noqa: E501

        Gets or sets available free disk space on Device (MB).  # noqa: E501

        :return: The available_disk_space of this DeviceHealthDetails.  # noqa: E501
        :rtype: int
        """
        return self._available_disk_space

    @available_disk_space.setter
    def available_disk_space(self, available_disk_space):
        """Sets the available_disk_space of this DeviceHealthDetails.

        Gets or sets available free disk space on Device (MB).  # noqa: E501

        :param available_disk_space: The available_disk_space of this DeviceHealthDetails.  # noqa: E501
        :type: int
        """

        self._available_disk_space = available_disk_space

    @property
    def total_memory(self):
        """Gets the total_memory of this DeviceHealthDetails.  # noqa: E501

        Gets or sets total memory on device (MB).  # noqa: E501

        :return: The total_memory of this DeviceHealthDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """Sets the total_memory of this DeviceHealthDetails.

        Gets or sets total memory on device (MB).  # noqa: E501

        :param total_memory: The total_memory of this DeviceHealthDetails.  # noqa: E501
        :type: int
        """

        self._total_memory = total_memory

    @property
    def device_network_info(self):
        """Gets the device_network_info of this DeviceHealthDetails.  # noqa: E501

        Gets or sets network information of the current device.  # noqa: E501

        :return: The device_network_info of this DeviceHealthDetails.  # noqa: E501
        :rtype: list[DeviceNetworkInfo]
        """
        return self._device_network_info

    @device_network_info.setter
    def device_network_info(self, device_network_info):
        """Sets the device_network_info of this DeviceHealthDetails.

        Gets or sets network information of the current device.  # noqa: E501

        :param device_network_info: The device_network_info of this DeviceHealthDetails.  # noqa: E501
        :type: list[DeviceNetworkInfo]
        """

        self._device_network_info = device_network_info

    @property
    def gps_coordinates(self):
        """Gets the gps_coordinates of this DeviceHealthDetails.  # noqa: E501

        Gets or sets last known GPS coordinate.  # noqa: E501

        :return: The gps_coordinates of this DeviceHealthDetails.  # noqa: E501
        :rtype: ProductGpsCoordinate_
        """
        return self._gps_coordinates

    @gps_coordinates.setter
    def gps_coordinates(self, gps_coordinates):
        """Sets the gps_coordinates of this DeviceHealthDetails.

        Gets or sets last known GPS coordinate.  # noqa: E501

        :param gps_coordinates: The gps_coordinates of this DeviceHealthDetails.  # noqa: E501
        :type: ProductGpsCoordinate_
        """

        self._gps_coordinates = gps_coordinates

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this DeviceHealthDetails.  # noqa: E501

        Gets or sets custom Attributes details that are assigned to current device.  # noqa: E501

        :return: The custom_attributes of this DeviceHealthDetails.  # noqa: E501
        :rtype: list[ProductCustomAttribute]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this DeviceHealthDetails.

        Gets or sets custom Attributes details that are assigned to current device.  # noqa: E501

        :param custom_attributes: The custom_attributes of this DeviceHealthDetails.  # noqa: E501
        :type: list[ProductCustomAttribute]
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceHealthDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceHealthDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceHealthDetails):
            return True

        return self.to_dict() != other.to_dict()
