# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceUpdateCountDeviceStatusV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'download_complete': 'int',
        'install_complete': 'int',
        'not_started': 'int',
        'idle': 'int',
        'downloading': 'int',
        'download_failed': 'int',
        'download_requires_computer': 'int',
        'download_insufficient_space': 'int',
        'download_insufficient_power': 'int',
        'download_insufficient_network': 'int',
        'installing': 'int',
        'install_insufficient_space': 'int',
        'install_insufficient_power': 'int',
        'install_phone_call_in_progress': 'int',
        'install_failed': 'int',
        'not_eligible': 'int'
    }

    attribute_map = {
        'download_complete': 'download_complete',
        'install_complete': 'install_complete',
        'not_started': 'not_started',
        'idle': 'idle',
        'downloading': 'downloading',
        'download_failed': 'download_failed',
        'download_requires_computer': 'download_requires_computer',
        'download_insufficient_space': 'download_insufficient_space',
        'download_insufficient_power': 'download_insufficient_power',
        'download_insufficient_network': 'download_insufficient_network',
        'installing': 'installing',
        'install_insufficient_space': 'install_insufficient_space',
        'install_insufficient_power': 'install_insufficient_power',
        'install_phone_call_in_progress': 'install_phone_call_in_progress',
        'install_failed': 'install_failed',
        'not_eligible': 'not_eligible'
    }

    def __init__(self, download_complete=None, install_complete=None, not_started=None, idle=None, downloading=None, download_failed=None, download_requires_computer=None, download_insufficient_space=None, download_insufficient_power=None, download_insufficient_network=None, installing=None, install_insufficient_space=None, install_insufficient_power=None, install_phone_call_in_progress=None, install_failed=None, not_eligible=None, _configuration=None):  # noqa: E501
        """DeviceUpdateCountDeviceStatusV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._download_complete = None
        self._install_complete = None
        self._not_started = None
        self._idle = None
        self._downloading = None
        self._download_failed = None
        self._download_requires_computer = None
        self._download_insufficient_space = None
        self._download_insufficient_power = None
        self._download_insufficient_network = None
        self._installing = None
        self._install_insufficient_space = None
        self._install_insufficient_power = None
        self._install_phone_call_in_progress = None
        self._install_failed = None
        self._not_eligible = None
        self.discriminator = None

        if download_complete is not None:
            self.download_complete = download_complete
        if install_complete is not None:
            self.install_complete = install_complete
        if not_started is not None:
            self.not_started = not_started
        if idle is not None:
            self.idle = idle
        if downloading is not None:
            self.downloading = downloading
        if download_failed is not None:
            self.download_failed = download_failed
        if download_requires_computer is not None:
            self.download_requires_computer = download_requires_computer
        if download_insufficient_space is not None:
            self.download_insufficient_space = download_insufficient_space
        if download_insufficient_power is not None:
            self.download_insufficient_power = download_insufficient_power
        if download_insufficient_network is not None:
            self.download_insufficient_network = download_insufficient_network
        if installing is not None:
            self.installing = installing
        if install_insufficient_space is not None:
            self.install_insufficient_space = install_insufficient_space
        if install_insufficient_power is not None:
            self.install_insufficient_power = install_insufficient_power
        if install_phone_call_in_progress is not None:
            self.install_phone_call_in_progress = install_phone_call_in_progress
        if install_failed is not None:
            self.install_failed = install_failed
        if not_eligible is not None:
            self.not_eligible = not_eligible

    @property
    def download_complete(self):
        """Gets the download_complete of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices that have completed the download of the update but are not yet on the specified version  # noqa: E501

        :return: The download_complete of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._download_complete

    @download_complete.setter
    def download_complete(self, download_complete):
        """Sets the download_complete of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices that have completed the download of the update but are not yet on the specified version  # noqa: E501

        :param download_complete: The download_complete of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._download_complete = download_complete

    @property
    def install_complete(self):
        """Gets the install_complete of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices that have completed installation and are on or above the specified version  # noqa: E501

        :return: The install_complete of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._install_complete

    @install_complete.setter
    def install_complete(self, install_complete):
        """Sets the install_complete of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices that have completed installation and are on or above the specified version  # noqa: E501

        :param install_complete: The install_complete of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._install_complete = install_complete

    @property
    def not_started(self):
        """Gets the not_started of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices that haven't started the download/install of the specified update  # noqa: E501

        :return: The not_started of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._not_started

    @not_started.setter
    def not_started(self, not_started):
        """Sets the not_started of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices that haven't started the download/install of the specified update  # noqa: E501

        :param not_started: The not_started of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._not_started = not_started

    @property
    def idle(self):
        """Gets the idle of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where no action is currently being taken on the update  # noqa: E501

        :return: The idle of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._idle

    @idle.setter
    def idle(self, idle):
        """Sets the idle of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where no action is currently being taken on the update  # noqa: E501

        :param idle: The idle of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._idle = idle

    @property
    def downloading(self):
        """Gets the downloading of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where the update is currently downloading  # noqa: E501

        :return: The downloading of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._downloading

    @downloading.setter
    def downloading(self, downloading):
        """Sets the downloading of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where the update is currently downloading  # noqa: E501

        :param downloading: The downloading of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._downloading = downloading

    @property
    def download_failed(self):
        """Gets the download_failed of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where the download has failed for some reason  # noqa: E501

        :return: The download_failed of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._download_failed

    @download_failed.setter
    def download_failed(self, download_failed):
        """Sets the download_failed of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where the download has failed for some reason  # noqa: E501

        :param download_failed: The download_failed of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._download_failed = download_failed

    @property
    def download_requires_computer(self):
        """Gets the download_requires_computer of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where download could not complete because the device must be connected to a computer to download the update (iOS only)  # noqa: E501

        :return: The download_requires_computer of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._download_requires_computer

    @download_requires_computer.setter
    def download_requires_computer(self, download_requires_computer):
        """Sets the download_requires_computer of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where download could not complete because the device must be connected to a computer to download the update (iOS only)  # noqa: E501

        :param download_requires_computer: The download_requires_computer of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._download_requires_computer = download_requires_computer

    @property
    def download_insufficient_space(self):
        """Gets the download_insufficient_space of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where download failed because there is not enough space to download the update  # noqa: E501

        :return: The download_insufficient_space of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._download_insufficient_space

    @download_insufficient_space.setter
    def download_insufficient_space(self, download_insufficient_space):
        """Sets the download_insufficient_space of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where download failed because there is not enough space to download the update  # noqa: E501

        :param download_insufficient_space: The download_insufficient_space of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._download_insufficient_space = download_insufficient_space

    @property
    def download_insufficient_power(self):
        """Gets the download_insufficient_power of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where download failed because there is not enough power to download the update  # noqa: E501

        :return: The download_insufficient_power of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._download_insufficient_power

    @download_insufficient_power.setter
    def download_insufficient_power(self, download_insufficient_power):
        """Sets the download_insufficient_power of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where download failed because there is not enough power to download the update  # noqa: E501

        :param download_insufficient_power: The download_insufficient_power of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._download_insufficient_power = download_insufficient_power

    @property
    def download_insufficient_network(self):
        """Gets the download_insufficient_network of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where download failed because there is insufficient network capacity to download the update  # noqa: E501

        :return: The download_insufficient_network of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._download_insufficient_network

    @download_insufficient_network.setter
    def download_insufficient_network(self, download_insufficient_network):
        """Sets the download_insufficient_network of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where download failed because there is insufficient network capacity to download the update  # noqa: E501

        :param download_insufficient_network: The download_insufficient_network of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._download_insufficient_network = download_insufficient_network

    @property
    def installing(self):
        """Gets the installing of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where the update is being installed  # noqa: E501

        :return: The installing of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._installing

    @installing.setter
    def installing(self, installing):
        """Sets the installing of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where the update is being installed  # noqa: E501

        :param installing: The installing of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._installing = installing

    @property
    def install_insufficient_space(self):
        """Gets the install_insufficient_space of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where there is not enough space to install the update  # noqa: E501

        :return: The install_insufficient_space of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._install_insufficient_space

    @install_insufficient_space.setter
    def install_insufficient_space(self, install_insufficient_space):
        """Sets the install_insufficient_space of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where there is not enough space to install the update  # noqa: E501

        :param install_insufficient_space: The install_insufficient_space of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._install_insufficient_space = install_insufficient_space

    @property
    def install_insufficient_power(self):
        """Gets the install_insufficient_power of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where there is not enough power to install the update  # noqa: E501

        :return: The install_insufficient_power of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._install_insufficient_power

    @install_insufficient_power.setter
    def install_insufficient_power(self, install_insufficient_power):
        """Sets the install_insufficient_power of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where there is not enough power to install the update  # noqa: E501

        :param install_insufficient_power: The install_insufficient_power of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._install_insufficient_power = install_insufficient_power

    @property
    def install_phone_call_in_progress(self):
        """Gets the install_phone_call_in_progress of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where installation has been rejected because a phone call is in progress  # noqa: E501

        :return: The install_phone_call_in_progress of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._install_phone_call_in_progress

    @install_phone_call_in_progress.setter
    def install_phone_call_in_progress(self, install_phone_call_in_progress):
        """Sets the install_phone_call_in_progress of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where installation has been rejected because a phone call is in progress  # noqa: E501

        :param install_phone_call_in_progress: The install_phone_call_in_progress of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._install_phone_call_in_progress = install_phone_call_in_progress

    @property
    def install_failed(self):
        """Gets the install_failed of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where installation has failed for an unspecified reason  # noqa: E501

        :return: The install_failed of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._install_failed

    @install_failed.setter
    def install_failed(self, install_failed):
        """Sets the install_failed of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where installation has failed for an unspecified reason  # noqa: E501

        :param install_failed: The install_failed of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._install_failed = install_failed

    @property
    def not_eligible(self):
        """Gets the not_eligible of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501

        The count of devices where they are not eligible to receive the update  # noqa: E501

        :return: The not_eligible of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._not_eligible

    @not_eligible.setter
    def not_eligible(self, not_eligible):
        """Sets the not_eligible of this DeviceUpdateCountDeviceStatusV1Model.

        The count of devices where they are not eligible to receive the update  # noqa: E501

        :param not_eligible: The not_eligible of this DeviceUpdateCountDeviceStatusV1Model.  # noqa: E501
        :type: int
        """

        self._not_eligible = not_eligible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceUpdateCountDeviceStatusV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceUpdateCountDeviceStatusV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceUpdateCountDeviceStatusV1Model):
            return True

        return self.to_dict() != other.to_dict()
