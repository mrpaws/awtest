# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class CompliancePolicyDetailsV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_policy_id': 'int',
        'name': 'str',
        'description': 'str',
        'is_active': 'bool',
        'root_location_group_name': 'str',
        'platform': 'str',
        'compliant_devices': 'int',
        'non_compliant_devices': 'int',
        'assigned_devices': 'int',
        'organization_group_uuid': 'str',
        'policy_type': 'str'
    }

    attribute_map = {
        'device_policy_id': 'devicePolicyId',
        'name': 'name',
        'description': 'description',
        'is_active': 'isActive',
        'root_location_group_name': 'rootLocationGroupName',
        'platform': 'platform',
        'compliant_devices': 'compliantDevices',
        'non_compliant_devices': 'nonCompliantDevices',
        'assigned_devices': 'assignedDevices',
        'organization_group_uuid': 'organizationGroupUuid',
        'policy_type': 'policyType'
    }

    def __init__(self, device_policy_id=None, name=None, description=None, is_active=None, root_location_group_name=None, platform=None, compliant_devices=None, non_compliant_devices=None, assigned_devices=None, organization_group_uuid=None, policy_type=None, _configuration=None):  # noqa: E501
        """CompliancePolicyDetailsV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_policy_id = None
        self._name = None
        self._description = None
        self._is_active = None
        self._root_location_group_name = None
        self._platform = None
        self._compliant_devices = None
        self._non_compliant_devices = None
        self._assigned_devices = None
        self._organization_group_uuid = None
        self._policy_type = None
        self.discriminator = None

        if device_policy_id is not None:
            self.device_policy_id = device_policy_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_active is not None:
            self.is_active = is_active
        if root_location_group_name is not None:
            self.root_location_group_name = root_location_group_name
        if platform is not None:
            self.platform = platform
        if compliant_devices is not None:
            self.compliant_devices = compliant_devices
        if non_compliant_devices is not None:
            self.non_compliant_devices = non_compliant_devices
        if assigned_devices is not None:
            self.assigned_devices = assigned_devices
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if policy_type is not None:
            self.policy_type = policy_type

    @property
    def device_policy_id(self):
        """Gets the device_policy_id of this CompliancePolicyDetailsV1Model.  # noqa: E501

        The Device Policy Id  # noqa: E501

        :return: The device_policy_id of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: int
        """
        return self._device_policy_id

    @device_policy_id.setter
    def device_policy_id(self, device_policy_id):
        """Sets the device_policy_id of this CompliancePolicyDetailsV1Model.

        The Device Policy Id  # noqa: E501

        :param device_policy_id: The device_policy_id of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: int
        """

        self._device_policy_id = device_policy_id

    @property
    def name(self):
        """Gets the name of this CompliancePolicyDetailsV1Model.  # noqa: E501

        The Compliance Policy Name.  # noqa: E501

        :return: The name of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompliancePolicyDetailsV1Model.

        The Compliance Policy Name.  # noqa: E501

        :param name: The name of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CompliancePolicyDetailsV1Model.  # noqa: E501

        Compliance Policy Description.  # noqa: E501

        :return: The description of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CompliancePolicyDetailsV1Model.

        Compliance Policy Description.  # noqa: E501

        :param description: The description of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_active(self):
        """Gets the is_active of this CompliancePolicyDetailsV1Model.  # noqa: E501

        The Compliance Policy Status.  # noqa: E501

        :return: The is_active of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CompliancePolicyDetailsV1Model.

        The Compliance Policy Status.  # noqa: E501

        :param is_active: The is_active of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def root_location_group_name(self):
        """Gets the root_location_group_name of this CompliancePolicyDetailsV1Model.  # noqa: E501

        The Compliance Policy Root [ManagedBy] OrganizationGroup Name.  # noqa: E501

        :return: The root_location_group_name of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._root_location_group_name

    @root_location_group_name.setter
    def root_location_group_name(self, root_location_group_name):
        """Sets the root_location_group_name of this CompliancePolicyDetailsV1Model.

        The Compliance Policy Root [ManagedBy] OrganizationGroup Name.  # noqa: E501

        :param root_location_group_name: The root_location_group_name of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._root_location_group_name = root_location_group_name

    @property
    def platform(self):
        """Gets the platform of this CompliancePolicyDetailsV1Model.  # noqa: E501

        The Compliance Policy Platform.  # noqa: E501

        :return: The platform of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CompliancePolicyDetailsV1Model.

        The Compliance Policy Platform.  # noqa: E501

        :param platform: The platform of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def compliant_devices(self):
        """Gets the compliant_devices of this CompliancePolicyDetailsV1Model.  # noqa: E501

        The Number of Compliant Devices.  # noqa: E501

        :return: The compliant_devices of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: int
        """
        return self._compliant_devices

    @compliant_devices.setter
    def compliant_devices(self, compliant_devices):
        """Sets the compliant_devices of this CompliancePolicyDetailsV1Model.

        The Number of Compliant Devices.  # noqa: E501

        :param compliant_devices: The compliant_devices of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: int
        """

        self._compliant_devices = compliant_devices

    @property
    def non_compliant_devices(self):
        """Gets the non_compliant_devices of this CompliancePolicyDetailsV1Model.  # noqa: E501

        The Number of Non-Compliant Devices.  # noqa: E501

        :return: The non_compliant_devices of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: int
        """
        return self._non_compliant_devices

    @non_compliant_devices.setter
    def non_compliant_devices(self, non_compliant_devices):
        """Sets the non_compliant_devices of this CompliancePolicyDetailsV1Model.

        The Number of Non-Compliant Devices.  # noqa: E501

        :param non_compliant_devices: The non_compliant_devices of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: int
        """

        self._non_compliant_devices = non_compliant_devices

    @property
    def assigned_devices(self):
        """Gets the assigned_devices of this CompliancePolicyDetailsV1Model.  # noqa: E501

        The Number of Devices to which current Policy is Assigned.  # noqa: E501

        :return: The assigned_devices of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: int
        """
        return self._assigned_devices

    @assigned_devices.setter
    def assigned_devices(self, assigned_devices):
        """Sets the assigned_devices of this CompliancePolicyDetailsV1Model.

        The Number of Devices to which current Policy is Assigned.  # noqa: E501

        :param assigned_devices: The assigned_devices of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: int
        """

        self._assigned_devices = assigned_devices

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this CompliancePolicyDetailsV1Model.  # noqa: E501

        Organization group uuid for the compliance policy.  # noqa: E501

        :return: The organization_group_uuid of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this CompliancePolicyDetailsV1Model.

        Organization group uuid for the compliance policy.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def policy_type(self):
        """Gets the policy_type of this CompliancePolicyDetailsV1Model.  # noqa: E501


        :return: The policy_type of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this CompliancePolicyDetailsV1Model.


        :param policy_type: The policy_type of this CompliancePolicyDetailsV1Model.  # noqa: E501
        :type: str
        """

        self._policy_type = policy_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompliancePolicyDetailsV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompliancePolicyDetailsV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompliancePolicyDetailsV1Model):
            return True

        return self.to_dict() != other.to_dict()
