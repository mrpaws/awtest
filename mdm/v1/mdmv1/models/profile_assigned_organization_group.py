# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ProfileAssignedOrganizationGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_id': 'int',
        'organization_group_id': 'int',
        'organization_group_name': 'str'
    }

    attribute_map = {
        'profile_id': 'ProfileId',
        'organization_group_id': 'OrganizationGroupId',
        'organization_group_name': 'OrganizationGroupName'
    }

    def __init__(self, profile_id=None, organization_group_id=None, organization_group_name=None, _configuration=None):  # noqa: E501
        """ProfileAssignedOrganizationGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._profile_id = None
        self._organization_group_id = None
        self._organization_group_name = None
        self.discriminator = None

        if profile_id is not None:
            self.profile_id = profile_id
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if organization_group_name is not None:
            self.organization_group_name = organization_group_name

    @property
    def profile_id(self):
        """Gets the profile_id of this ProfileAssignedOrganizationGroup.  # noqa: E501

        Gets or sets assigned Profile Id.  # noqa: E501

        :return: The profile_id of this ProfileAssignedOrganizationGroup.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this ProfileAssignedOrganizationGroup.

        Gets or sets assigned Profile Id.  # noqa: E501

        :param profile_id: The profile_id of this ProfileAssignedOrganizationGroup.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this ProfileAssignedOrganizationGroup.  # noqa: E501

        Gets or sets organization Group Id.  # noqa: E501

        :return: The organization_group_id of this ProfileAssignedOrganizationGroup.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this ProfileAssignedOrganizationGroup.

        Gets or sets organization Group Id.  # noqa: E501

        :param organization_group_id: The organization_group_id of this ProfileAssignedOrganizationGroup.  # noqa: E501
        :type: int
        """

        self._organization_group_id = organization_group_id

    @property
    def organization_group_name(self):
        """Gets the organization_group_name of this ProfileAssignedOrganizationGroup.  # noqa: E501

        Gets or sets organization Group name.  # noqa: E501

        :return: The organization_group_name of this ProfileAssignedOrganizationGroup.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_name

    @organization_group_name.setter
    def organization_group_name(self, organization_group_name):
        """Sets the organization_group_name of this ProfileAssignedOrganizationGroup.

        Gets or sets organization Group name.  # noqa: E501

        :param organization_group_name: The organization_group_name of this ProfileAssignedOrganizationGroup.  # noqa: E501
        :type: str
        """

        self._organization_group_name = organization_group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileAssignedOrganizationGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileAssignedOrganizationGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProfileAssignedOrganizationGroup):
            return True

        return self.to_dict() != other.to_dict()
