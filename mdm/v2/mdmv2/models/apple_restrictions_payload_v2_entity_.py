# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleRestrictionsPayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_installing_public_apps': 'bool',
        'allow_app_removal': 'bool',
        'allow_use_of_camera': 'bool',
        'allow_explicit_music_and_podcasts': 'bool',
        'allow_automatic_sync_while_roaming': 'bool',
        'allow_in_app_purchase': 'bool',
        'allow_use_of_safari': 'bool',
        'allow_screen_capture': 'bool',
        'allow_finger_print_for_unlock': 'bool',
        'allow_face_time': 'bool',
        'allow_voice_dialing': 'bool',
        'allow_use_of_you_tube': 'bool',
        'allow_use_ofi_tunes_music_store': 'bool',
        'force_encrypted_backups': 'bool',
        'rating_apps': 'int',
        'rating_movies': 'int',
        'ratings_region': 'str',
        'rating_tv_shows': 'int',
        'accept_cookies': 'str',
        'enable_autofill': 'bool',
        'enable_java_script': 'bool',
        'block_pop_ups': 'bool',
        'force_fraud_warning': 'bool',
        'enable_plugins': 'bool',
        'allow_adding_game_center_friends': 'bool',
        'allow_multiplayer_gaming': 'bool',
        'forcei_tunes_store_password_entry': 'bool',
        'allow_user_to_accept_untrusted_tls_certificates': 'bool',
        'allow_backup': 'bool',
        'allow_app_clips': 'bool',
        'allow_document_sync': 'bool',
        'allow_app_settings_sync': 'bool',
        'allow_photo_stream': 'bool',
        'allow_diagnostic_data_to_be_sent_to_apple': 'bool',
        'allow_siri': 'bool',
        'allow_siri_while_device_locked': 'bool',
        'enable_siri_profanity_filter': 'bool',
        'show_user_generated_content_in_siri': 'bool',
        'allow_use_of_imessage': 'bool',
        'allow_passbook_while_device_locked': 'bool',
        'allow_game_center': 'bool',
        'allow_use_of_ibookstore': 'bool',
        'i_books': 'str',
        'allow_shared_photo_stream': 'bool',
        'allow_manual_profile_installation': 'bool',
        'allow_opening_managed_app_documents_in_unmanaged_apps': 'bool',
        'allow_opening_un_managed_app_documents_in_managed_apps': 'bool',
        'limit_ad_tracking': 'bool',
        'allow_account_modification': 'bool',
        'allow_air_drop': 'bool',
        'allow_changes_to_find_my_friends': 'bool',
        'allow_keychain_sync': 'bool',
        'allow_over_the_air_pki_updates': 'bool',
        'allow_pairing_with_non_configurator_hosts': 'bool',
        'allow_changes_to_cellular_data_usage_for_apps': 'bool',
        'show_control_center_on_lock_screen': 'bool',
        'show_notifications_view_on_lock_screen': 'bool',
        'show_today_view_on_lock_screen': 'bool',
        'allowpasscodemodification': 'bool',
        'allow_touch_id_modification': 'bool',
        'allow_app_storeiconon_homescreen': 'bool',
        'show_apps': 'list[str]',
        'hide_apps': 'list[str]',
        'allowautomaticappdownloads': 'bool',
        'allowinternetresultsin_spotlight': 'bool',
        'allowconfiguring_restrictions': 'bool',
        'allow_erase_all_contentsand_settings': 'bool',
        'allowdevicenamemodification': 'bool',
        'allowwallpapermodification': 'bool',
        'requirepasscodeonfirst_air_playpairing': 'bool',
        'enforce_air_dropasanunmanageddropdestination': 'bool',
        'allow_apple_watchpairing': 'bool',
        'allowkeyboardshortcuts': 'bool',
        'allow_predictive_keyboard': 'bool',
        'allowautocorrectionforkeyboard': 'bool',
        'allowspellcheckforkeyboard': 'bool',
        'allowdefinitionlookupforkeyboard': 'bool',
        'allow_news': 'bool',
        'allow_podcasts': 'bool',
        'allowmanagedappstostoredata': 'bool',
        'allowbackingup_enterprise_books': 'bool',
        'allowsynchronizing_enterprise_booksnotesandhiglights': 'bool',
        'allowi_cloudphotolibrary': 'bool',
        'allowusertotrustunmanagedenterpriseapps': 'bool',
        'enforce_wrist_detectionon_apple_watch': 'bool',
        'allow_handoff': 'bool',
        'allow_bluetooth_settings_modification': 'bool',
        'allow_screen_observationby_classroom': 'bool',
        'allow_dictation': 'bool',
        'force_wi_fi_whitelisting': 'bool',
        'force_classroom_unprompted_screen_observation': 'bool',
        'force_classroom_request_permission_to_leave_classes': 'bool',
        'force_classroom_unprompted_app_and_device_lock': 'bool',
        'force_classroom_automatically_join_classes': 'bool',
        'allow_system_app_removal': 'bool',
        'allow_vpn_creation': 'bool',
        'allow_air_print': 'bool',
        'allow_managed_to_write_unmanaged_contacts': 'bool',
        'allow_unmanaged_to_read_managed_contacts': 'bool',
        'allow_air_print_credentials_storage': 'bool',
        'force_air_print_trusted_tls_requirement': 'bool',
        'allow_air_printi_beacon_discovery': 'bool',
        'enforced_software_update_delay': 'int',
        'allow_usb_restricted_mode': 'bool',
        'force_automatic_date_and_time': 'bool',
        'allow_password_auto_fill': 'bool',
        'allow_password_sharing': 'bool',
        'force_authentication_before_auto_fill': 'bool',
        'allow_esim_modification': 'bool',
        'allow_personal_hotspot_modification': 'bool',
        'allow_siri_server_logging': 'bool',
        'allow_continuous_path_keyboard': 'bool',
        'allow_find_my_device': 'bool',
        'allow_find_my_friends': 'bool',
        'allow_wi_fi_power_modification': 'bool',
        'allow_files_usb_drive_access': 'bool',
        'force_wi_fi_power_on': 'bool',
        'allow_files_network_drive_access': 'bool',
        'allow_shared_device_temporary_session': 'bool',
        'allow_deprecated_web_kit_tls': 'bool',
        'allow_proximity_setup_to_new_device': 'bool',
        'allow_password_proximity_requests': 'bool',
        'force_wi_fi_to_allowed_networks_only': 'bool'
    }

    attribute_map = {
        'allow_installing_public_apps': 'AllowInstallingPublicApps',
        'allow_app_removal': 'AllowAppRemoval',
        'allow_use_of_camera': 'AllowUseOfCamera',
        'allow_explicit_music_and_podcasts': 'AllowExplicitMusicAndPodcasts',
        'allow_automatic_sync_while_roaming': 'AllowAutomaticSyncWhileRoaming',
        'allow_in_app_purchase': 'AllowInAppPurchase',
        'allow_use_of_safari': 'AllowUseOfSafari',
        'allow_screen_capture': 'AllowScreenCapture',
        'allow_finger_print_for_unlock': 'AllowFingerPrintForUnlock',
        'allow_face_time': 'AllowFaceTime',
        'allow_voice_dialing': 'AllowVoiceDialing',
        'allow_use_of_you_tube': 'AllowUseOfYouTube',
        'allow_use_ofi_tunes_music_store': 'AllowUseOfiTunesMusicStore',
        'force_encrypted_backups': 'ForceEncryptedBackups',
        'rating_apps': 'RatingApps',
        'rating_movies': 'RatingMovies',
        'ratings_region': 'RatingsRegion',
        'rating_tv_shows': 'RatingTVShows',
        'accept_cookies': 'AcceptCookies',
        'enable_autofill': 'EnableAutofill',
        'enable_java_script': 'EnableJavaScript',
        'block_pop_ups': 'BlockPopUps',
        'force_fraud_warning': 'ForceFraudWarning',
        'enable_plugins': 'EnablePlugins',
        'allow_adding_game_center_friends': 'AllowAddingGameCenterFriends',
        'allow_multiplayer_gaming': 'AllowMultiplayerGaming',
        'forcei_tunes_store_password_entry': 'ForceiTunesStorePasswordEntry',
        'allow_user_to_accept_untrusted_tls_certificates': 'AllowUserToAcceptUntrustedTlsCertificates',
        'allow_backup': 'AllowBackup',
        'allow_app_clips': 'AllowAppClips',
        'allow_document_sync': 'AllowDocumentSync',
        'allow_app_settings_sync': 'AllowAppSettingsSync',
        'allow_photo_stream': 'AllowPhotoStream',
        'allow_diagnostic_data_to_be_sent_to_apple': 'AllowDiagnosticDataToBeSentToApple',
        'allow_siri': 'AllowSiri',
        'allow_siri_while_device_locked': 'AllowSiriWhileDeviceLocked',
        'enable_siri_profanity_filter': 'EnableSiriProfanityFilter',
        'show_user_generated_content_in_siri': 'ShowUserGeneratedContentInSiri',
        'allow_use_of_imessage': 'AllowUseOfImessage',
        'allow_passbook_while_device_locked': 'AllowPassbookWhileDeviceLocked',
        'allow_game_center': 'AllowGameCenter',
        'allow_use_of_ibookstore': 'AllowUseOfIbookstore',
        'i_books': 'IBooks',
        'allow_shared_photo_stream': 'AllowSharedPhotoStream',
        'allow_manual_profile_installation': 'AllowManualProfileInstallation',
        'allow_opening_managed_app_documents_in_unmanaged_apps': 'AllowOpeningManagedAppDocumentsInUnmanagedApps',
        'allow_opening_un_managed_app_documents_in_managed_apps': 'AllowOpeningUnManagedAppDocumentsInManagedApps',
        'limit_ad_tracking': 'LimitAdTracking',
        'allow_account_modification': 'AllowAccountModification',
        'allow_air_drop': 'AllowAirDrop',
        'allow_changes_to_find_my_friends': 'AllowChangesToFindMyFriends',
        'allow_keychain_sync': 'AllowKeychainSync',
        'allow_over_the_air_pki_updates': 'AllowOverTheAirPKIUpdates',
        'allow_pairing_with_non_configurator_hosts': 'AllowPairingWithNonConfiguratorHosts',
        'allow_changes_to_cellular_data_usage_for_apps': 'AllowChangesToCellularDataUsageForApps',
        'show_control_center_on_lock_screen': 'ShowControlCenterOnLockScreen',
        'show_notifications_view_on_lock_screen': 'ShowNotificationsViewOnLockScreen',
        'show_today_view_on_lock_screen': 'ShowTodayViewOnLockScreen',
        'allowpasscodemodification': 'Allowpasscodemodification',
        'allow_touch_id_modification': 'AllowTouchIdModification',
        'allow_app_storeiconon_homescreen': 'AllowAppStoreicononHomescreen',
        'show_apps': 'ShowApps',
        'hide_apps': 'HideApps',
        'allowautomaticappdownloads': 'Allowautomaticappdownloads',
        'allowinternetresultsin_spotlight': 'AllowinternetresultsinSpotlight',
        'allowconfiguring_restrictions': 'AllowconfiguringRestrictions',
        'allow_erase_all_contentsand_settings': 'AllowEraseAllContentsandSettings',
        'allowdevicenamemodification': 'Allowdevicenamemodification',
        'allowwallpapermodification': 'Allowwallpapermodification',
        'requirepasscodeonfirst_air_playpairing': 'RequirepasscodeonfirstAirPlaypairing',
        'enforce_air_dropasanunmanageddropdestination': 'EnforceAirDropasanunmanageddropdestination',
        'allow_apple_watchpairing': 'AllowAppleWatchpairing',
        'allowkeyboardshortcuts': 'Allowkeyboardshortcuts',
        'allow_predictive_keyboard': 'AllowPredictiveKeyboard',
        'allowautocorrectionforkeyboard': 'Allowautocorrectionforkeyboard',
        'allowspellcheckforkeyboard': 'Allowspellcheckforkeyboard',
        'allowdefinitionlookupforkeyboard': 'Allowdefinitionlookupforkeyboard',
        'allow_news': 'AllowNews',
        'allow_podcasts': 'AllowPodcasts',
        'allowmanagedappstostoredata': 'Allowmanagedappstostoredata',
        'allowbackingup_enterprise_books': 'AllowbackingupEnterpriseBooks',
        'allowsynchronizing_enterprise_booksnotesandhiglights': 'AllowsynchronizingEnterpriseBooksnotesandhiglights',
        'allowi_cloudphotolibrary': 'AllowiCloudphotolibrary',
        'allowusertotrustunmanagedenterpriseapps': 'Allowusertotrustunmanagedenterpriseapps',
        'enforce_wrist_detectionon_apple_watch': 'EnforceWristDetectiononAppleWatch',
        'allow_handoff': 'AllowHandoff',
        'allow_bluetooth_settings_modification': 'AllowBluetoothSettingsModification',
        'allow_screen_observationby_classroom': 'AllowScreenObservationbyClassroom',
        'allow_dictation': 'AllowDictation',
        'force_wi_fi_whitelisting': 'ForceWiFiWhitelisting',
        'force_classroom_unprompted_screen_observation': 'ForceClassroomUnpromptedScreenObservation',
        'force_classroom_request_permission_to_leave_classes': 'ForceClassroomRequestPermissionToLeaveClasses',
        'force_classroom_unprompted_app_and_device_lock': 'ForceClassroomUnpromptedAppAndDeviceLock',
        'force_classroom_automatically_join_classes': 'ForceClassroomAutomaticallyJoinClasses',
        'allow_system_app_removal': 'AllowSystemAppRemoval',
        'allow_vpn_creation': 'AllowVPNCreation',
        'allow_air_print': 'AllowAirPrint',
        'allow_managed_to_write_unmanaged_contacts': 'AllowManagedToWriteUnmanagedContacts',
        'allow_unmanaged_to_read_managed_contacts': 'AllowUnmanagedToReadManagedContacts',
        'allow_air_print_credentials_storage': 'AllowAirPrintCredentialsStorage',
        'force_air_print_trusted_tls_requirement': 'ForceAirPrintTrustedTLSRequirement',
        'allow_air_printi_beacon_discovery': 'AllowAirPrintiBeaconDiscovery',
        'enforced_software_update_delay': 'EnforcedSoftwareUpdateDelay',
        'allow_usb_restricted_mode': 'AllowUsbRestrictedMode',
        'force_automatic_date_and_time': 'ForceAutomaticDateAndTime',
        'allow_password_auto_fill': 'AllowPasswordAutoFill',
        'allow_password_sharing': 'AllowPasswordSharing',
        'force_authentication_before_auto_fill': 'ForceAuthenticationBeforeAutoFill',
        'allow_esim_modification': 'AllowEsimModification',
        'allow_personal_hotspot_modification': 'AllowPersonalHotspotModification',
        'allow_siri_server_logging': 'AllowSiriServerLogging',
        'allow_continuous_path_keyboard': 'AllowContinuousPathKeyboard',
        'allow_find_my_device': 'AllowFindMyDevice',
        'allow_find_my_friends': 'AllowFindMyFriends',
        'allow_wi_fi_power_modification': 'AllowWiFiPowerModification',
        'allow_files_usb_drive_access': 'AllowFilesUSBDriveAccess',
        'force_wi_fi_power_on': 'ForceWiFiPowerOn',
        'allow_files_network_drive_access': 'AllowFilesNetworkDriveAccess',
        'allow_shared_device_temporary_session': 'AllowSharedDeviceTemporarySession',
        'allow_deprecated_web_kit_tls': 'AllowDeprecatedWebKitTls',
        'allow_proximity_setup_to_new_device': 'AllowProximitySetupToNewDevice',
        'allow_password_proximity_requests': 'AllowPasswordProximityRequests',
        'force_wi_fi_to_allowed_networks_only': 'ForceWiFiToAllowedNetworksOnly'
    }

    def __init__(self, allow_installing_public_apps=None, allow_app_removal=None, allow_use_of_camera=None, allow_explicit_music_and_podcasts=None, allow_automatic_sync_while_roaming=None, allow_in_app_purchase=None, allow_use_of_safari=None, allow_screen_capture=None, allow_finger_print_for_unlock=None, allow_face_time=None, allow_voice_dialing=None, allow_use_of_you_tube=None, allow_use_ofi_tunes_music_store=None, force_encrypted_backups=None, rating_apps=None, rating_movies=None, ratings_region=None, rating_tv_shows=None, accept_cookies=None, enable_autofill=None, enable_java_script=None, block_pop_ups=None, force_fraud_warning=None, enable_plugins=None, allow_adding_game_center_friends=None, allow_multiplayer_gaming=None, forcei_tunes_store_password_entry=None, allow_user_to_accept_untrusted_tls_certificates=None, allow_backup=None, allow_app_clips=None, allow_document_sync=None, allow_app_settings_sync=None, allow_photo_stream=None, allow_diagnostic_data_to_be_sent_to_apple=None, allow_siri=None, allow_siri_while_device_locked=None, enable_siri_profanity_filter=None, show_user_generated_content_in_siri=None, allow_use_of_imessage=None, allow_passbook_while_device_locked=None, allow_game_center=None, allow_use_of_ibookstore=None, i_books=None, allow_shared_photo_stream=None, allow_manual_profile_installation=None, allow_opening_managed_app_documents_in_unmanaged_apps=None, allow_opening_un_managed_app_documents_in_managed_apps=None, limit_ad_tracking=None, allow_account_modification=None, allow_air_drop=None, allow_changes_to_find_my_friends=None, allow_keychain_sync=None, allow_over_the_air_pki_updates=None, allow_pairing_with_non_configurator_hosts=None, allow_changes_to_cellular_data_usage_for_apps=None, show_control_center_on_lock_screen=None, show_notifications_view_on_lock_screen=None, show_today_view_on_lock_screen=None, allowpasscodemodification=None, allow_touch_id_modification=None, allow_app_storeiconon_homescreen=None, show_apps=None, hide_apps=None, allowautomaticappdownloads=None, allowinternetresultsin_spotlight=None, allowconfiguring_restrictions=None, allow_erase_all_contentsand_settings=None, allowdevicenamemodification=None, allowwallpapermodification=None, requirepasscodeonfirst_air_playpairing=None, enforce_air_dropasanunmanageddropdestination=None, allow_apple_watchpairing=None, allowkeyboardshortcuts=None, allow_predictive_keyboard=None, allowautocorrectionforkeyboard=None, allowspellcheckforkeyboard=None, allowdefinitionlookupforkeyboard=None, allow_news=None, allow_podcasts=None, allowmanagedappstostoredata=None, allowbackingup_enterprise_books=None, allowsynchronizing_enterprise_booksnotesandhiglights=None, allowi_cloudphotolibrary=None, allowusertotrustunmanagedenterpriseapps=None, enforce_wrist_detectionon_apple_watch=None, allow_handoff=None, allow_bluetooth_settings_modification=None, allow_screen_observationby_classroom=None, allow_dictation=None, force_wi_fi_whitelisting=None, force_classroom_unprompted_screen_observation=None, force_classroom_request_permission_to_leave_classes=None, force_classroom_unprompted_app_and_device_lock=None, force_classroom_automatically_join_classes=None, allow_system_app_removal=None, allow_vpn_creation=None, allow_air_print=None, allow_managed_to_write_unmanaged_contacts=None, allow_unmanaged_to_read_managed_contacts=None, allow_air_print_credentials_storage=None, force_air_print_trusted_tls_requirement=None, allow_air_printi_beacon_discovery=None, enforced_software_update_delay=None, allow_usb_restricted_mode=None, force_automatic_date_and_time=None, allow_password_auto_fill=None, allow_password_sharing=None, force_authentication_before_auto_fill=None, allow_esim_modification=None, allow_personal_hotspot_modification=None, allow_siri_server_logging=None, allow_continuous_path_keyboard=None, allow_find_my_device=None, allow_find_my_friends=None, allow_wi_fi_power_modification=None, allow_files_usb_drive_access=None, force_wi_fi_power_on=None, allow_files_network_drive_access=None, allow_shared_device_temporary_session=None, allow_deprecated_web_kit_tls=None, allow_proximity_setup_to_new_device=None, allow_password_proximity_requests=None, force_wi_fi_to_allowed_networks_only=None, _configuration=None):  # noqa: E501
        """AppleRestrictionsPayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_installing_public_apps = None
        self._allow_app_removal = None
        self._allow_use_of_camera = None
        self._allow_explicit_music_and_podcasts = None
        self._allow_automatic_sync_while_roaming = None
        self._allow_in_app_purchase = None
        self._allow_use_of_safari = None
        self._allow_screen_capture = None
        self._allow_finger_print_for_unlock = None
        self._allow_face_time = None
        self._allow_voice_dialing = None
        self._allow_use_of_you_tube = None
        self._allow_use_ofi_tunes_music_store = None
        self._force_encrypted_backups = None
        self._rating_apps = None
        self._rating_movies = None
        self._ratings_region = None
        self._rating_tv_shows = None
        self._accept_cookies = None
        self._enable_autofill = None
        self._enable_java_script = None
        self._block_pop_ups = None
        self._force_fraud_warning = None
        self._enable_plugins = None
        self._allow_adding_game_center_friends = None
        self._allow_multiplayer_gaming = None
        self._forcei_tunes_store_password_entry = None
        self._allow_user_to_accept_untrusted_tls_certificates = None
        self._allow_backup = None
        self._allow_app_clips = None
        self._allow_document_sync = None
        self._allow_app_settings_sync = None
        self._allow_photo_stream = None
        self._allow_diagnostic_data_to_be_sent_to_apple = None
        self._allow_siri = None
        self._allow_siri_while_device_locked = None
        self._enable_siri_profanity_filter = None
        self._show_user_generated_content_in_siri = None
        self._allow_use_of_imessage = None
        self._allow_passbook_while_device_locked = None
        self._allow_game_center = None
        self._allow_use_of_ibookstore = None
        self._i_books = None
        self._allow_shared_photo_stream = None
        self._allow_manual_profile_installation = None
        self._allow_opening_managed_app_documents_in_unmanaged_apps = None
        self._allow_opening_un_managed_app_documents_in_managed_apps = None
        self._limit_ad_tracking = None
        self._allow_account_modification = None
        self._allow_air_drop = None
        self._allow_changes_to_find_my_friends = None
        self._allow_keychain_sync = None
        self._allow_over_the_air_pki_updates = None
        self._allow_pairing_with_non_configurator_hosts = None
        self._allow_changes_to_cellular_data_usage_for_apps = None
        self._show_control_center_on_lock_screen = None
        self._show_notifications_view_on_lock_screen = None
        self._show_today_view_on_lock_screen = None
        self._allowpasscodemodification = None
        self._allow_touch_id_modification = None
        self._allow_app_storeiconon_homescreen = None
        self._show_apps = None
        self._hide_apps = None
        self._allowautomaticappdownloads = None
        self._allowinternetresultsin_spotlight = None
        self._allowconfiguring_restrictions = None
        self._allow_erase_all_contentsand_settings = None
        self._allowdevicenamemodification = None
        self._allowwallpapermodification = None
        self._requirepasscodeonfirst_air_playpairing = None
        self._enforce_air_dropasanunmanageddropdestination = None
        self._allow_apple_watchpairing = None
        self._allowkeyboardshortcuts = None
        self._allow_predictive_keyboard = None
        self._allowautocorrectionforkeyboard = None
        self._allowspellcheckforkeyboard = None
        self._allowdefinitionlookupforkeyboard = None
        self._allow_news = None
        self._allow_podcasts = None
        self._allowmanagedappstostoredata = None
        self._allowbackingup_enterprise_books = None
        self._allowsynchronizing_enterprise_booksnotesandhiglights = None
        self._allowi_cloudphotolibrary = None
        self._allowusertotrustunmanagedenterpriseapps = None
        self._enforce_wrist_detectionon_apple_watch = None
        self._allow_handoff = None
        self._allow_bluetooth_settings_modification = None
        self._allow_screen_observationby_classroom = None
        self._allow_dictation = None
        self._force_wi_fi_whitelisting = None
        self._force_classroom_unprompted_screen_observation = None
        self._force_classroom_request_permission_to_leave_classes = None
        self._force_classroom_unprompted_app_and_device_lock = None
        self._force_classroom_automatically_join_classes = None
        self._allow_system_app_removal = None
        self._allow_vpn_creation = None
        self._allow_air_print = None
        self._allow_managed_to_write_unmanaged_contacts = None
        self._allow_unmanaged_to_read_managed_contacts = None
        self._allow_air_print_credentials_storage = None
        self._force_air_print_trusted_tls_requirement = None
        self._allow_air_printi_beacon_discovery = None
        self._enforced_software_update_delay = None
        self._allow_usb_restricted_mode = None
        self._force_automatic_date_and_time = None
        self._allow_password_auto_fill = None
        self._allow_password_sharing = None
        self._force_authentication_before_auto_fill = None
        self._allow_esim_modification = None
        self._allow_personal_hotspot_modification = None
        self._allow_siri_server_logging = None
        self._allow_continuous_path_keyboard = None
        self._allow_find_my_device = None
        self._allow_find_my_friends = None
        self._allow_wi_fi_power_modification = None
        self._allow_files_usb_drive_access = None
        self._force_wi_fi_power_on = None
        self._allow_files_network_drive_access = None
        self._allow_shared_device_temporary_session = None
        self._allow_deprecated_web_kit_tls = None
        self._allow_proximity_setup_to_new_device = None
        self._allow_password_proximity_requests = None
        self._force_wi_fi_to_allowed_networks_only = None
        self.discriminator = None

        if allow_installing_public_apps is not None:
            self.allow_installing_public_apps = allow_installing_public_apps
        if allow_app_removal is not None:
            self.allow_app_removal = allow_app_removal
        if allow_use_of_camera is not None:
            self.allow_use_of_camera = allow_use_of_camera
        if allow_explicit_music_and_podcasts is not None:
            self.allow_explicit_music_and_podcasts = allow_explicit_music_and_podcasts
        if allow_automatic_sync_while_roaming is not None:
            self.allow_automatic_sync_while_roaming = allow_automatic_sync_while_roaming
        if allow_in_app_purchase is not None:
            self.allow_in_app_purchase = allow_in_app_purchase
        if allow_use_of_safari is not None:
            self.allow_use_of_safari = allow_use_of_safari
        if allow_screen_capture is not None:
            self.allow_screen_capture = allow_screen_capture
        if allow_finger_print_for_unlock is not None:
            self.allow_finger_print_for_unlock = allow_finger_print_for_unlock
        if allow_face_time is not None:
            self.allow_face_time = allow_face_time
        if allow_voice_dialing is not None:
            self.allow_voice_dialing = allow_voice_dialing
        if allow_use_of_you_tube is not None:
            self.allow_use_of_you_tube = allow_use_of_you_tube
        if allow_use_ofi_tunes_music_store is not None:
            self.allow_use_ofi_tunes_music_store = allow_use_ofi_tunes_music_store
        if force_encrypted_backups is not None:
            self.force_encrypted_backups = force_encrypted_backups
        if rating_apps is not None:
            self.rating_apps = rating_apps
        if rating_movies is not None:
            self.rating_movies = rating_movies
        if ratings_region is not None:
            self.ratings_region = ratings_region
        if rating_tv_shows is not None:
            self.rating_tv_shows = rating_tv_shows
        if accept_cookies is not None:
            self.accept_cookies = accept_cookies
        if enable_autofill is not None:
            self.enable_autofill = enable_autofill
        if enable_java_script is not None:
            self.enable_java_script = enable_java_script
        if block_pop_ups is not None:
            self.block_pop_ups = block_pop_ups
        if force_fraud_warning is not None:
            self.force_fraud_warning = force_fraud_warning
        if enable_plugins is not None:
            self.enable_plugins = enable_plugins
        if allow_adding_game_center_friends is not None:
            self.allow_adding_game_center_friends = allow_adding_game_center_friends
        if allow_multiplayer_gaming is not None:
            self.allow_multiplayer_gaming = allow_multiplayer_gaming
        if forcei_tunes_store_password_entry is not None:
            self.forcei_tunes_store_password_entry = forcei_tunes_store_password_entry
        if allow_user_to_accept_untrusted_tls_certificates is not None:
            self.allow_user_to_accept_untrusted_tls_certificates = allow_user_to_accept_untrusted_tls_certificates
        if allow_backup is not None:
            self.allow_backup = allow_backup
        if allow_app_clips is not None:
            self.allow_app_clips = allow_app_clips
        if allow_document_sync is not None:
            self.allow_document_sync = allow_document_sync
        if allow_app_settings_sync is not None:
            self.allow_app_settings_sync = allow_app_settings_sync
        if allow_photo_stream is not None:
            self.allow_photo_stream = allow_photo_stream
        if allow_diagnostic_data_to_be_sent_to_apple is not None:
            self.allow_diagnostic_data_to_be_sent_to_apple = allow_diagnostic_data_to_be_sent_to_apple
        if allow_siri is not None:
            self.allow_siri = allow_siri
        if allow_siri_while_device_locked is not None:
            self.allow_siri_while_device_locked = allow_siri_while_device_locked
        if enable_siri_profanity_filter is not None:
            self.enable_siri_profanity_filter = enable_siri_profanity_filter
        if show_user_generated_content_in_siri is not None:
            self.show_user_generated_content_in_siri = show_user_generated_content_in_siri
        if allow_use_of_imessage is not None:
            self.allow_use_of_imessage = allow_use_of_imessage
        if allow_passbook_while_device_locked is not None:
            self.allow_passbook_while_device_locked = allow_passbook_while_device_locked
        if allow_game_center is not None:
            self.allow_game_center = allow_game_center
        if allow_use_of_ibookstore is not None:
            self.allow_use_of_ibookstore = allow_use_of_ibookstore
        if i_books is not None:
            self.i_books = i_books
        if allow_shared_photo_stream is not None:
            self.allow_shared_photo_stream = allow_shared_photo_stream
        if allow_manual_profile_installation is not None:
            self.allow_manual_profile_installation = allow_manual_profile_installation
        if allow_opening_managed_app_documents_in_unmanaged_apps is not None:
            self.allow_opening_managed_app_documents_in_unmanaged_apps = allow_opening_managed_app_documents_in_unmanaged_apps
        if allow_opening_un_managed_app_documents_in_managed_apps is not None:
            self.allow_opening_un_managed_app_documents_in_managed_apps = allow_opening_un_managed_app_documents_in_managed_apps
        if limit_ad_tracking is not None:
            self.limit_ad_tracking = limit_ad_tracking
        if allow_account_modification is not None:
            self.allow_account_modification = allow_account_modification
        if allow_air_drop is not None:
            self.allow_air_drop = allow_air_drop
        if allow_changes_to_find_my_friends is not None:
            self.allow_changes_to_find_my_friends = allow_changes_to_find_my_friends
        if allow_keychain_sync is not None:
            self.allow_keychain_sync = allow_keychain_sync
        if allow_over_the_air_pki_updates is not None:
            self.allow_over_the_air_pki_updates = allow_over_the_air_pki_updates
        if allow_pairing_with_non_configurator_hosts is not None:
            self.allow_pairing_with_non_configurator_hosts = allow_pairing_with_non_configurator_hosts
        if allow_changes_to_cellular_data_usage_for_apps is not None:
            self.allow_changes_to_cellular_data_usage_for_apps = allow_changes_to_cellular_data_usage_for_apps
        if show_control_center_on_lock_screen is not None:
            self.show_control_center_on_lock_screen = show_control_center_on_lock_screen
        if show_notifications_view_on_lock_screen is not None:
            self.show_notifications_view_on_lock_screen = show_notifications_view_on_lock_screen
        if show_today_view_on_lock_screen is not None:
            self.show_today_view_on_lock_screen = show_today_view_on_lock_screen
        if allowpasscodemodification is not None:
            self.allowpasscodemodification = allowpasscodemodification
        if allow_touch_id_modification is not None:
            self.allow_touch_id_modification = allow_touch_id_modification
        if allow_app_storeiconon_homescreen is not None:
            self.allow_app_storeiconon_homescreen = allow_app_storeiconon_homescreen
        if show_apps is not None:
            self.show_apps = show_apps
        if hide_apps is not None:
            self.hide_apps = hide_apps
        if allowautomaticappdownloads is not None:
            self.allowautomaticappdownloads = allowautomaticappdownloads
        if allowinternetresultsin_spotlight is not None:
            self.allowinternetresultsin_spotlight = allowinternetresultsin_spotlight
        if allowconfiguring_restrictions is not None:
            self.allowconfiguring_restrictions = allowconfiguring_restrictions
        if allow_erase_all_contentsand_settings is not None:
            self.allow_erase_all_contentsand_settings = allow_erase_all_contentsand_settings
        if allowdevicenamemodification is not None:
            self.allowdevicenamemodification = allowdevicenamemodification
        if allowwallpapermodification is not None:
            self.allowwallpapermodification = allowwallpapermodification
        if requirepasscodeonfirst_air_playpairing is not None:
            self.requirepasscodeonfirst_air_playpairing = requirepasscodeonfirst_air_playpairing
        if enforce_air_dropasanunmanageddropdestination is not None:
            self.enforce_air_dropasanunmanageddropdestination = enforce_air_dropasanunmanageddropdestination
        if allow_apple_watchpairing is not None:
            self.allow_apple_watchpairing = allow_apple_watchpairing
        if allowkeyboardshortcuts is not None:
            self.allowkeyboardshortcuts = allowkeyboardshortcuts
        if allow_predictive_keyboard is not None:
            self.allow_predictive_keyboard = allow_predictive_keyboard
        if allowautocorrectionforkeyboard is not None:
            self.allowautocorrectionforkeyboard = allowautocorrectionforkeyboard
        if allowspellcheckforkeyboard is not None:
            self.allowspellcheckforkeyboard = allowspellcheckforkeyboard
        if allowdefinitionlookupforkeyboard is not None:
            self.allowdefinitionlookupforkeyboard = allowdefinitionlookupforkeyboard
        if allow_news is not None:
            self.allow_news = allow_news
        if allow_podcasts is not None:
            self.allow_podcasts = allow_podcasts
        if allowmanagedappstostoredata is not None:
            self.allowmanagedappstostoredata = allowmanagedappstostoredata
        if allowbackingup_enterprise_books is not None:
            self.allowbackingup_enterprise_books = allowbackingup_enterprise_books
        if allowsynchronizing_enterprise_booksnotesandhiglights is not None:
            self.allowsynchronizing_enterprise_booksnotesandhiglights = allowsynchronizing_enterprise_booksnotesandhiglights
        if allowi_cloudphotolibrary is not None:
            self.allowi_cloudphotolibrary = allowi_cloudphotolibrary
        if allowusertotrustunmanagedenterpriseapps is not None:
            self.allowusertotrustunmanagedenterpriseapps = allowusertotrustunmanagedenterpriseapps
        if enforce_wrist_detectionon_apple_watch is not None:
            self.enforce_wrist_detectionon_apple_watch = enforce_wrist_detectionon_apple_watch
        if allow_handoff is not None:
            self.allow_handoff = allow_handoff
        if allow_bluetooth_settings_modification is not None:
            self.allow_bluetooth_settings_modification = allow_bluetooth_settings_modification
        if allow_screen_observationby_classroom is not None:
            self.allow_screen_observationby_classroom = allow_screen_observationby_classroom
        if allow_dictation is not None:
            self.allow_dictation = allow_dictation
        if force_wi_fi_whitelisting is not None:
            self.force_wi_fi_whitelisting = force_wi_fi_whitelisting
        if force_classroom_unprompted_screen_observation is not None:
            self.force_classroom_unprompted_screen_observation = force_classroom_unprompted_screen_observation
        if force_classroom_request_permission_to_leave_classes is not None:
            self.force_classroom_request_permission_to_leave_classes = force_classroom_request_permission_to_leave_classes
        if force_classroom_unprompted_app_and_device_lock is not None:
            self.force_classroom_unprompted_app_and_device_lock = force_classroom_unprompted_app_and_device_lock
        if force_classroom_automatically_join_classes is not None:
            self.force_classroom_automatically_join_classes = force_classroom_automatically_join_classes
        if allow_system_app_removal is not None:
            self.allow_system_app_removal = allow_system_app_removal
        if allow_vpn_creation is not None:
            self.allow_vpn_creation = allow_vpn_creation
        if allow_air_print is not None:
            self.allow_air_print = allow_air_print
        if allow_managed_to_write_unmanaged_contacts is not None:
            self.allow_managed_to_write_unmanaged_contacts = allow_managed_to_write_unmanaged_contacts
        if allow_unmanaged_to_read_managed_contacts is not None:
            self.allow_unmanaged_to_read_managed_contacts = allow_unmanaged_to_read_managed_contacts
        if allow_air_print_credentials_storage is not None:
            self.allow_air_print_credentials_storage = allow_air_print_credentials_storage
        if force_air_print_trusted_tls_requirement is not None:
            self.force_air_print_trusted_tls_requirement = force_air_print_trusted_tls_requirement
        if allow_air_printi_beacon_discovery is not None:
            self.allow_air_printi_beacon_discovery = allow_air_printi_beacon_discovery
        if enforced_software_update_delay is not None:
            self.enforced_software_update_delay = enforced_software_update_delay
        if allow_usb_restricted_mode is not None:
            self.allow_usb_restricted_mode = allow_usb_restricted_mode
        if force_automatic_date_and_time is not None:
            self.force_automatic_date_and_time = force_automatic_date_and_time
        if allow_password_auto_fill is not None:
            self.allow_password_auto_fill = allow_password_auto_fill
        if allow_password_sharing is not None:
            self.allow_password_sharing = allow_password_sharing
        if force_authentication_before_auto_fill is not None:
            self.force_authentication_before_auto_fill = force_authentication_before_auto_fill
        if allow_esim_modification is not None:
            self.allow_esim_modification = allow_esim_modification
        if allow_personal_hotspot_modification is not None:
            self.allow_personal_hotspot_modification = allow_personal_hotspot_modification
        if allow_siri_server_logging is not None:
            self.allow_siri_server_logging = allow_siri_server_logging
        if allow_continuous_path_keyboard is not None:
            self.allow_continuous_path_keyboard = allow_continuous_path_keyboard
        if allow_find_my_device is not None:
            self.allow_find_my_device = allow_find_my_device
        if allow_find_my_friends is not None:
            self.allow_find_my_friends = allow_find_my_friends
        if allow_wi_fi_power_modification is not None:
            self.allow_wi_fi_power_modification = allow_wi_fi_power_modification
        if allow_files_usb_drive_access is not None:
            self.allow_files_usb_drive_access = allow_files_usb_drive_access
        if force_wi_fi_power_on is not None:
            self.force_wi_fi_power_on = force_wi_fi_power_on
        if allow_files_network_drive_access is not None:
            self.allow_files_network_drive_access = allow_files_network_drive_access
        if allow_shared_device_temporary_session is not None:
            self.allow_shared_device_temporary_session = allow_shared_device_temporary_session
        if allow_deprecated_web_kit_tls is not None:
            self.allow_deprecated_web_kit_tls = allow_deprecated_web_kit_tls
        if allow_proximity_setup_to_new_device is not None:
            self.allow_proximity_setup_to_new_device = allow_proximity_setup_to_new_device
        if allow_password_proximity_requests is not None:
            self.allow_password_proximity_requests = allow_password_proximity_requests
        if force_wi_fi_to_allowed_networks_only is not None:
            self.force_wi_fi_to_allowed_networks_only = force_wi_fi_to_allowed_networks_only

    @property
    def allow_installing_public_apps(self):
        """Gets the allow_installing_public_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, the App Store is disabled and its icon is removed from the Home screen on supervised iOS.  # noqa: E501

        :return: The allow_installing_public_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_installing_public_apps

    @allow_installing_public_apps.setter
    def allow_installing_public_apps(self, allow_installing_public_apps):
        """Sets the allow_installing_public_apps of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, the App Store is disabled and its icon is removed from the Home screen on supervised iOS.  # noqa: E501

        :param allow_installing_public_apps: The allow_installing_public_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_installing_public_apps = allow_installing_public_apps

    @property
    def allow_app_removal(self):
        """Gets the allow_app_removal of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables removal of apps from supervised iOS device.  # noqa: E501

        :return: The allow_app_removal of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_app_removal

    @allow_app_removal.setter
    def allow_app_removal(self, allow_app_removal):
        """Sets the allow_app_removal of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables removal of apps from supervised iOS device.  # noqa: E501

        :param allow_app_removal: The allow_app_removal of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_app_removal = allow_app_removal

    @property
    def allow_use_of_camera(self):
        """Gets the allow_use_of_camera of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, the camera is completely disabled and its icon is removed from the Home screen.  # noqa: E501

        :return: The allow_use_of_camera of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_use_of_camera

    @allow_use_of_camera.setter
    def allow_use_of_camera(self, allow_use_of_camera):
        """Sets the allow_use_of_camera of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, the camera is completely disabled and its icon is removed from the Home screen.  # noqa: E501

        :param allow_use_of_camera: The allow_use_of_camera of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_use_of_camera = allow_use_of_camera

    @property
    def allow_explicit_music_and_podcasts(self):
        """Gets the allow_explicit_music_and_podcasts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, explicit music or video content purchased from the iTunes Store is hidden on supervised iOS.  # noqa: E501

        :return: The allow_explicit_music_and_podcasts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_explicit_music_and_podcasts

    @allow_explicit_music_and_podcasts.setter
    def allow_explicit_music_and_podcasts(self, allow_explicit_music_and_podcasts):
        """Sets the allow_explicit_music_and_podcasts of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, explicit music or video content purchased from the iTunes Store is hidden on supervised iOS.  # noqa: E501

        :param allow_explicit_music_and_podcasts: The allow_explicit_music_and_podcasts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_explicit_music_and_podcasts = allow_explicit_music_and_podcasts

    @property
    def allow_automatic_sync_while_roaming(self):
        """Gets the allow_automatic_sync_while_roaming of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables global background fetch activity when an iOS phone is roaming.  # noqa: E501

        :return: The allow_automatic_sync_while_roaming of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_automatic_sync_while_roaming

    @allow_automatic_sync_while_roaming.setter
    def allow_automatic_sync_while_roaming(self, allow_automatic_sync_while_roaming):
        """Sets the allow_automatic_sync_while_roaming of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables global background fetch activity when an iOS phone is roaming.  # noqa: E501

        :param allow_automatic_sync_while_roaming: The allow_automatic_sync_while_roaming of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_automatic_sync_while_roaming = allow_automatic_sync_while_roaming

    @property
    def allow_in_app_purchase(self):
        """Gets the allow_in_app_purchase of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, prohibits in-app purchasing.  # noqa: E501

        :return: The allow_in_app_purchase of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_in_app_purchase

    @allow_in_app_purchase.setter
    def allow_in_app_purchase(self, allow_in_app_purchase):
        """Sets the allow_in_app_purchase of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, prohibits in-app purchasing.  # noqa: E501

        :param allow_in_app_purchase: The allow_in_app_purchase of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_in_app_purchase = allow_in_app_purchase

    @property
    def allow_use_of_safari(self):
        """Gets the allow_use_of_safari of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, the Safari web browser application is disabled and its icon removed from the Home screen on supervised iOS.  # noqa: E501

        :return: The allow_use_of_safari of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_use_of_safari

    @allow_use_of_safari.setter
    def allow_use_of_safari(self, allow_use_of_safari):
        """Sets the allow_use_of_safari of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, the Safari web browser application is disabled and its icon removed from the Home screen on supervised iOS.  # noqa: E501

        :param allow_use_of_safari: The allow_use_of_safari of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_use_of_safari = allow_use_of_safari

    @property
    def allow_screen_capture(self):
        """Gets the allow_screen_capture of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, users can’t save a screenshot of the display and are prevented from capturing a screen recording.  # noqa: E501

        :return: The allow_screen_capture of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_screen_capture

    @allow_screen_capture.setter
    def allow_screen_capture(self, allow_screen_capture):
        """Sets the allow_screen_capture of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, users can’t save a screenshot of the display and are prevented from capturing a screen recording.  # noqa: E501

        :param allow_screen_capture: The allow_screen_capture of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_screen_capture = allow_screen_capture

    @property
    def allow_finger_print_for_unlock(self):
        """Gets the allow_finger_print_for_unlock of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, prevents Touch ID from unlocking a device on iOS 7+.  # noqa: E501

        :return: The allow_finger_print_for_unlock of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_finger_print_for_unlock

    @allow_finger_print_for_unlock.setter
    def allow_finger_print_for_unlock(self, allow_finger_print_for_unlock):
        """Sets the allow_finger_print_for_unlock of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if false, prevents Touch ID from unlocking a device on iOS 7+.  # noqa: E501

        :param allow_finger_print_for_unlock: The allow_finger_print_for_unlock of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_finger_print_for_unlock = allow_finger_print_for_unlock

    @property
    def allow_face_time(self):
        """Gets the allow_face_time of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables video conferencing on supervised iOS.  # noqa: E501

        :return: The allow_face_time of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_face_time

    @allow_face_time.setter
    def allow_face_time(self, allow_face_time):
        """Sets the allow_face_time of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables video conferencing on supervised iOS.  # noqa: E501

        :param allow_face_time: The allow_face_time of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_face_time = allow_face_time

    @property
    def allow_voice_dialing(self):
        """Gets the allow_voice_dialing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables voice dialing if the device is locked with a passcode.  # noqa: E501

        :return: The allow_voice_dialing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_voice_dialing

    @allow_voice_dialing.setter
    def allow_voice_dialing(self, allow_voice_dialing):
        """Sets the allow_voice_dialing of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables voice dialing if the device is locked with a passcode.  # noqa: E501

        :param allow_voice_dialing: The allow_voice_dialing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_voice_dialing = allow_voice_dialing

    @property
    def allow_use_of_you_tube(self):
        """Gets the allow_use_of_you_tube of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, the YouTube application is disabled and its icon is removed from the Home screen on iOS 6-.  # noqa: E501

        :return: The allow_use_of_you_tube of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_use_of_you_tube

    @allow_use_of_you_tube.setter
    def allow_use_of_you_tube(self, allow_use_of_you_tube):
        """Sets the allow_use_of_you_tube of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, the YouTube application is disabled and its icon is removed from the Home screen on iOS 6-.  # noqa: E501

        :param allow_use_of_you_tube: The allow_use_of_you_tube of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_use_of_you_tube = allow_use_of_you_tube

    @property
    def allow_use_ofi_tunes_music_store(self):
        """Gets the allow_use_ofi_tunes_music_store of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, the iTunes Music Store is disabled and its icon is removed from the Home screen on supervised iOS.  # noqa: E501

        :return: The allow_use_ofi_tunes_music_store of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_use_ofi_tunes_music_store

    @allow_use_ofi_tunes_music_store.setter
    def allow_use_ofi_tunes_music_store(self, allow_use_ofi_tunes_music_store):
        """Sets the allow_use_ofi_tunes_music_store of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, the iTunes Music Store is disabled and its icon is removed from the Home screen on supervised iOS.  # noqa: E501

        :param allow_use_ofi_tunes_music_store: The allow_use_ofi_tunes_music_store of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_use_ofi_tunes_music_store = allow_use_ofi_tunes_music_store

    @property
    def force_encrypted_backups(self):
        """Gets the force_encrypted_backups of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when true, encrypts all backups.  # noqa: E501

        :return: The force_encrypted_backups of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_encrypted_backups

    @force_encrypted_backups.setter
    def force_encrypted_backups(self, force_encrypted_backups):
        """Sets the force_encrypted_backups of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when true, encrypts all backups.  # noqa: E501

        :param force_encrypted_backups: The force_encrypted_backups of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_encrypted_backups = force_encrypted_backups

    @property
    def rating_apps(self):
        """Gets the rating_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets ratings to restrict apps. 0: Don't Allow Apps, 100: 4+, 200: 9+, 300: 12+. 600: 17+, 1000: Allow All Apps.  # noqa: E501

        :return: The rating_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._rating_apps

    @rating_apps.setter
    def rating_apps(self, rating_apps):
        """Sets the rating_apps of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets ratings to restrict apps. 0: Don't Allow Apps, 100: 4+, 200: 9+, 300: 12+. 600: 17+, 1000: Allow All Apps.  # noqa: E501

        :param rating_apps: The rating_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._rating_apps = rating_apps

    @property
    def rating_movies(self):
        """Gets the rating_movies of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets ratings to restrict movies. 0: Don't Allow Movies, 100: G, 200: PG, 300: PG-13. 400: R, 500: NC-17, 1000: Allow All Movies.  # noqa: E501

        :return: The rating_movies of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._rating_movies

    @rating_movies.setter
    def rating_movies(self, rating_movies):
        """Sets the rating_movies of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets ratings to restrict movies. 0: Don't Allow Movies, 100: G, 200: PG, 300: PG-13. 400: R, 500: NC-17, 1000: Allow All Movies.  # noqa: E501

        :param rating_movies: The rating_movies of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._rating_movies = rating_movies

    @property
    def ratings_region(self):
        """Gets the ratings_region of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets region to restrict the application for based on ratings.  # noqa: E501

        :return: The ratings_region of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._ratings_region

    @ratings_region.setter
    def ratings_region(self, ratings_region):
        """Sets the ratings_region of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets region to restrict the application for based on ratings.  # noqa: E501

        :param ratings_region: The ratings_region of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._ratings_region = ratings_region

    @property
    def rating_tv_shows(self):
        """Gets the rating_tv_shows of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets ratings to restrict TV shows. 0: Don't Allow TV Shows, 100: TV-Y, 200: TV-Y7, 300: TV-G, 400: TV-PG, 500: TV-14, 600: TV-MA, 1000: Allow All TV Shows.  # noqa: E501

        :return: The rating_tv_shows of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._rating_tv_shows

    @rating_tv_shows.setter
    def rating_tv_shows(self, rating_tv_shows):
        """Sets the rating_tv_shows of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets ratings to restrict TV shows. 0: Don't Allow TV Shows, 100: TV-Y, 200: TV-Y7, 300: TV-G, 400: TV-PG, 500: TV-14, 600: TV-MA, 1000: Allow All TV Shows.  # noqa: E501

        :param rating_tv_shows: The rating_tv_shows of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._rating_tv_shows = rating_tv_shows

    @property
    def accept_cookies(self):
        """Gets the accept_cookies of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets determines conditions under which the device will accept cookies. 0: Never, 1: Allow from current website only, 1.5: Allow from websites visited on iOS 8+, 2: Always.  # noqa: E501

        :return: The accept_cookies of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._accept_cookies

    @accept_cookies.setter
    def accept_cookies(self, accept_cookies):
        """Sets the accept_cookies of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets determines conditions under which the device will accept cookies. 0: Never, 1: Allow from current website only, 1.5: Allow from websites visited on iOS 8+, 2: Always.  # noqa: E501

        :param accept_cookies: The accept_cookies of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._accept_cookies = accept_cookies

    @property
    def enable_autofill(self):
        """Gets the enable_autofill of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, Safari auto-fill is disabled.  # noqa: E501

        :return: The enable_autofill of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_autofill

    @enable_autofill.setter
    def enable_autofill(self, enable_autofill):
        """Sets the enable_autofill of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, Safari auto-fill is disabled.  # noqa: E501

        :param enable_autofill: The enable_autofill of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_autofill = enable_autofill

    @property
    def enable_java_script(self):
        """Gets the enable_java_script of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, Safari will not execute JavaScript.  # noqa: E501

        :return: The enable_java_script of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_java_script

    @enable_java_script.setter
    def enable_java_script(self, enable_java_script):
        """Sets the enable_java_script of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, Safari will not execute JavaScript.  # noqa: E501

        :param enable_java_script: The enable_java_script of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_java_script = enable_java_script

    @property
    def block_pop_ups(self):
        """Gets the block_pop_ups of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when true, Safari will not allow pop-up tabs.  # noqa: E501

        :return: The block_pop_ups of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._block_pop_ups

    @block_pop_ups.setter
    def block_pop_ups(self, block_pop_ups):
        """Sets the block_pop_ups of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when true, Safari will not allow pop-up tabs.  # noqa: E501

        :param block_pop_ups: The block_pop_ups of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._block_pop_ups = block_pop_ups

    @property
    def force_fraud_warning(self):
        """Gets the force_fraud_warning of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when true, Safari fraud warning is enabled.  # noqa: E501

        :return: The force_fraud_warning of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_fraud_warning

    @force_fraud_warning.setter
    def force_fraud_warning(self, force_fraud_warning):
        """Sets the force_fraud_warning of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when true, Safari fraud warning is enabled.  # noqa: E501

        :param force_fraud_warning: The force_fraud_warning of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_fraud_warning = force_fraud_warning

    @property
    def enable_plugins(self):
        """Gets the enable_plugins of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, Safari plugins are disabled.  # noqa: E501

        :return: The enable_plugins of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_plugins

    @enable_plugins.setter
    def enable_plugins(self, enable_plugins):
        """Sets the enable_plugins of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, Safari plugins are disabled.  # noqa: E501

        :param enable_plugins: The enable_plugins of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_plugins = enable_plugins

    @property
    def allow_adding_game_center_friends(self):
        """Gets the allow_adding_game_center_friends of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, prohibits adding friends to Game Center on supervised iOS.  # noqa: E501

        :return: The allow_adding_game_center_friends of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_adding_game_center_friends

    @allow_adding_game_center_friends.setter
    def allow_adding_game_center_friends(self, allow_adding_game_center_friends):
        """Sets the allow_adding_game_center_friends of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, prohibits adding friends to Game Center on supervised iOS.  # noqa: E501

        :param allow_adding_game_center_friends: The allow_adding_game_center_friends of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_adding_game_center_friends = allow_adding_game_center_friends

    @property
    def allow_multiplayer_gaming(self):
        """Gets the allow_multiplayer_gaming of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, prohibits multiplayer gaming on supervised iOS.  # noqa: E501

        :return: The allow_multiplayer_gaming of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiplayer_gaming

    @allow_multiplayer_gaming.setter
    def allow_multiplayer_gaming(self, allow_multiplayer_gaming):
        """Sets the allow_multiplayer_gaming of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, prohibits multiplayer gaming on supervised iOS.  # noqa: E501

        :param allow_multiplayer_gaming: The allow_multiplayer_gaming of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_multiplayer_gaming = allow_multiplayer_gaming

    @property
    def forcei_tunes_store_password_entry(self):
        """Gets the forcei_tunes_store_password_entry of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when true, forces user to enter their iTunes password for each transaction on iOS 5+.  # noqa: E501

        :return: The forcei_tunes_store_password_entry of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._forcei_tunes_store_password_entry

    @forcei_tunes_store_password_entry.setter
    def forcei_tunes_store_password_entry(self, forcei_tunes_store_password_entry):
        """Sets the forcei_tunes_store_password_entry of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when true, forces user to enter their iTunes password for each transaction on iOS 5+.  # noqa: E501

        :param forcei_tunes_store_password_entry: The forcei_tunes_store_password_entry of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._forcei_tunes_store_password_entry = forcei_tunes_store_password_entry

    @property
    def allow_user_to_accept_untrusted_tls_certificates(self):
        """Gets the allow_user_to_accept_untrusted_tls_certificates of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, automatically rejects untrusted HTTPS certificates without prompting the user on iOS 5+.  # noqa: E501

        :return: The allow_user_to_accept_untrusted_tls_certificates of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_accept_untrusted_tls_certificates

    @allow_user_to_accept_untrusted_tls_certificates.setter
    def allow_user_to_accept_untrusted_tls_certificates(self, allow_user_to_accept_untrusted_tls_certificates):
        """Sets the allow_user_to_accept_untrusted_tls_certificates of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, automatically rejects untrusted HTTPS certificates without prompting the user on iOS 5+.  # noqa: E501

        :param allow_user_to_accept_untrusted_tls_certificates: The allow_user_to_accept_untrusted_tls_certificates of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_accept_untrusted_tls_certificates = allow_user_to_accept_untrusted_tls_certificates

    @property
    def allow_backup(self):
        """Gets the allow_backup of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables backing up the device to iCloud on iOS 5+.  # noqa: E501

        :return: The allow_backup of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_backup

    @allow_backup.setter
    def allow_backup(self, allow_backup):
        """Sets the allow_backup of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables backing up the device to iCloud on iOS 5+.  # noqa: E501

        :param allow_backup: The allow_backup of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_backup = allow_backup

    @property
    def allow_app_clips(self):
        """Gets the allow_app_clips of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables app clips on iOS 14+.  # noqa: E501

        :return: The allow_app_clips of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_app_clips

    @allow_app_clips.setter
    def allow_app_clips(self, allow_app_clips):
        """Sets the allow_app_clips of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables app clips on iOS 14+.  # noqa: E501

        :param allow_app_clips: The allow_app_clips of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_app_clips = allow_app_clips

    @property
    def allow_document_sync(self):
        """Gets the allow_document_sync of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables document to iCloud on supervised iOS 5+.  # noqa: E501

        :return: The allow_document_sync of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_document_sync

    @allow_document_sync.setter
    def allow_document_sync(self, allow_document_sync):
        """Sets the allow_document_sync of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables document to iCloud on supervised iOS 5+.  # noqa: E501

        :param allow_document_sync: The allow_document_sync of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_document_sync = allow_document_sync

    @property
    def allow_app_settings_sync(self):
        """Gets the allow_app_settings_sync of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables key-value syncing to iCloud.  # noqa: E501

        :return: The allow_app_settings_sync of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_app_settings_sync

    @allow_app_settings_sync.setter
    def allow_app_settings_sync(self, allow_app_settings_sync):
        """Sets the allow_app_settings_sync of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables key-value syncing to iCloud.  # noqa: E501

        :param allow_app_settings_sync: The allow_app_settings_sync of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_app_settings_sync = allow_app_settings_sync

    @property
    def allow_photo_stream(self):
        """Gets the allow_photo_stream of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables Photo Stream on iOS 5+.  # noqa: E501

        :return: The allow_photo_stream of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_photo_stream

    @allow_photo_stream.setter
    def allow_photo_stream(self, allow_photo_stream):
        """Sets the allow_photo_stream of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables Photo Stream on iOS 5+.  # noqa: E501

        :param allow_photo_stream: The allow_photo_stream of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_photo_stream = allow_photo_stream

    @property
    def allow_diagnostic_data_to_be_sent_to_apple(self):
        """Gets the allow_diagnostic_data_to_be_sent_to_apple of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, the diagnostic submission and app analytics settings in the Diagnostics and Usage pane in Settings cannot be modified on iOS 6+.  # noqa: E501

        :return: The allow_diagnostic_data_to_be_sent_to_apple of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_diagnostic_data_to_be_sent_to_apple

    @allow_diagnostic_data_to_be_sent_to_apple.setter
    def allow_diagnostic_data_to_be_sent_to_apple(self, allow_diagnostic_data_to_be_sent_to_apple):
        """Sets the allow_diagnostic_data_to_be_sent_to_apple of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, the diagnostic submission and app analytics settings in the Diagnostics and Usage pane in Settings cannot be modified on iOS 6+.  # noqa: E501

        :param allow_diagnostic_data_to_be_sent_to_apple: The allow_diagnostic_data_to_be_sent_to_apple of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_diagnostic_data_to_be_sent_to_apple = allow_diagnostic_data_to_be_sent_to_apple

    @property
    def allow_siri(self):
        """Gets the allow_siri of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables Siri.  # noqa: E501

        :return: The allow_siri of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_siri

    @allow_siri.setter
    def allow_siri(self, allow_siri):
        """Sets the allow_siri of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables Siri.  # noqa: E501

        :param allow_siri: The allow_siri of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_siri = allow_siri

    @property
    def allow_siri_while_device_locked(self):
        """Gets the allow_siri_while_device_locked of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, the user is unable to use Siri when the device is locked on iOS 5.1+.  # noqa: E501

        :return: The allow_siri_while_device_locked of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_siri_while_device_locked

    @allow_siri_while_device_locked.setter
    def allow_siri_while_device_locked(self, allow_siri_while_device_locked):
        """Sets the allow_siri_while_device_locked of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, the user is unable to use Siri when the device is locked on iOS 5.1+.  # noqa: E501

        :param allow_siri_while_device_locked: The allow_siri_while_device_locked of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_siri_while_device_locked = allow_siri_while_device_locked

    @property
    def enable_siri_profanity_filter(self):
        """Gets the enable_siri_profanity_filter of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when true, forces the use of the profanity filter assistant on supervised iOS.  # noqa: E501

        :return: The enable_siri_profanity_filter of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_siri_profanity_filter

    @enable_siri_profanity_filter.setter
    def enable_siri_profanity_filter(self, enable_siri_profanity_filter):
        """Sets the enable_siri_profanity_filter of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when true, forces the use of the profanity filter assistant on supervised iOS.  # noqa: E501

        :param enable_siri_profanity_filter: The enable_siri_profanity_filter of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_siri_profanity_filter = enable_siri_profanity_filter

    @property
    def show_user_generated_content_in_siri(self):
        """Gets the show_user_generated_content_in_siri of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, prevents Siri from querying user-generated content from the web on supervised iOS 7+.  # noqa: E501

        :return: The show_user_generated_content_in_siri of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._show_user_generated_content_in_siri

    @show_user_generated_content_in_siri.setter
    def show_user_generated_content_in_siri(self, show_user_generated_content_in_siri):
        """Sets the show_user_generated_content_in_siri of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, prevents Siri from querying user-generated content from the web on supervised iOS 7+.  # noqa: E501

        :param show_user_generated_content_in_siri: The show_user_generated_content_in_siri of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._show_user_generated_content_in_siri = show_user_generated_content_in_siri

    @property
    def allow_use_of_imessage(self):
        """Gets the allow_use_of_imessage of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, disables the use of the Messages app on supervised iOS 6+.  # noqa: E501

        :return: The allow_use_of_imessage of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_use_of_imessage

    @allow_use_of_imessage.setter
    def allow_use_of_imessage(self, allow_use_of_imessage):
        """Sets the allow_use_of_imessage of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, disables the use of the Messages app on supervised iOS 6+.  # noqa: E501

        :param allow_use_of_imessage: The allow_use_of_imessage of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_use_of_imessage = allow_use_of_imessage

    @property
    def allow_passbook_while_device_locked(self):
        """Gets the allow_passbook_while_device_locked of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, Passbook notifications will not be shown on the lock screen on iOS 6+.  # noqa: E501

        :return: The allow_passbook_while_device_locked of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_passbook_while_device_locked

    @allow_passbook_while_device_locked.setter
    def allow_passbook_while_device_locked(self, allow_passbook_while_device_locked):
        """Sets the allow_passbook_while_device_locked of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, Passbook notifications will not be shown on the lock screen on iOS 6+.  # noqa: E501

        :param allow_passbook_while_device_locked: The allow_passbook_while_device_locked of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_passbook_while_device_locked = allow_passbook_while_device_locked

    @property
    def allow_game_center(self):
        """Gets the allow_game_center of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, Game Center is disabled and its icon is removed from the Home screen on supervised iOS 6+.  # noqa: E501

        :return: The allow_game_center of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_game_center

    @allow_game_center.setter
    def allow_game_center(self, allow_game_center):
        """Sets the allow_game_center of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, Game Center is disabled and its icon is removed from the Home screen on supervised iOS 6+.  # noqa: E501

        :param allow_game_center: The allow_game_center of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_game_center = allow_game_center

    @property
    def allow_use_of_ibookstore(self):
        """Gets the allow_use_of_ibookstore of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, iBookstore will be disabled on supervised iOS 6+.  # noqa: E501

        :return: The allow_use_of_ibookstore of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_use_of_ibookstore

    @allow_use_of_ibookstore.setter
    def allow_use_of_ibookstore(self, allow_use_of_ibookstore):
        """Sets the allow_use_of_ibookstore of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, iBookstore will be disabled on supervised iOS 6+.  # noqa: E501

        :param allow_use_of_ibookstore: The allow_use_of_ibookstore of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_use_of_ibookstore = allow_use_of_ibookstore

    @property
    def i_books(self):
        """Gets the i_books of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets determines if the user will be able to download all types of media from iBookstore on supervised iOS 6+.  # noqa: E501

        :return: The i_books of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._i_books

    @i_books.setter
    def i_books(self, i_books):
        """Sets the i_books of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets determines if the user will be able to download all types of media from iBookstore on supervised iOS 6+.  # noqa: E501

        :param i_books: The i_books of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._i_books = i_books

    @property
    def allow_shared_photo_stream(self):
        """Gets the allow_shared_photo_stream of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, Shared Photo Stream will be disabled on iOS 6+.  # noqa: E501

        :return: The allow_shared_photo_stream of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_shared_photo_stream

    @allow_shared_photo_stream.setter
    def allow_shared_photo_stream(self, allow_shared_photo_stream):
        """Sets the allow_shared_photo_stream of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, Shared Photo Stream will be disabled on iOS 6+.  # noqa: E501

        :param allow_shared_photo_stream: The allow_shared_photo_stream of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_shared_photo_stream = allow_shared_photo_stream

    @property
    def allow_manual_profile_installation(self):
        """Gets the allow_manual_profile_installation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, the user is prohibited from installing configuration profiles and certificates interactively on supervised iOS 6+.  # noqa: E501

        :return: The allow_manual_profile_installation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_manual_profile_installation

    @allow_manual_profile_installation.setter
    def allow_manual_profile_installation(self, allow_manual_profile_installation):
        """Sets the allow_manual_profile_installation of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, the user is prohibited from installing configuration profiles and certificates interactively on supervised iOS 6+.  # noqa: E501

        :param allow_manual_profile_installation: The allow_manual_profile_installation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_manual_profile_installation = allow_manual_profile_installation

    @property
    def allow_opening_managed_app_documents_in_unmanaged_apps(self):
        """Gets the allow_opening_managed_app_documents_in_unmanaged_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, documents in managed apps and accounts only open in other managed apps and accounts on iOS.  # noqa: E501

        :return: The allow_opening_managed_app_documents_in_unmanaged_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_opening_managed_app_documents_in_unmanaged_apps

    @allow_opening_managed_app_documents_in_unmanaged_apps.setter
    def allow_opening_managed_app_documents_in_unmanaged_apps(self, allow_opening_managed_app_documents_in_unmanaged_apps):
        """Sets the allow_opening_managed_app_documents_in_unmanaged_apps of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if false, documents in managed apps and accounts only open in other managed apps and accounts on iOS.  # noqa: E501

        :param allow_opening_managed_app_documents_in_unmanaged_apps: The allow_opening_managed_app_documents_in_unmanaged_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_opening_managed_app_documents_in_unmanaged_apps = allow_opening_managed_app_documents_in_unmanaged_apps

    @property
    def allow_opening_un_managed_app_documents_in_managed_apps(self):
        """Gets the allow_opening_un_managed_app_documents_in_managed_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, documents in unmanaged apps and accounts will only open in other unmanaged apps and accounts on iOS 7+.  # noqa: E501

        :return: The allow_opening_un_managed_app_documents_in_managed_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_opening_un_managed_app_documents_in_managed_apps

    @allow_opening_un_managed_app_documents_in_managed_apps.setter
    def allow_opening_un_managed_app_documents_in_managed_apps(self, allow_opening_un_managed_app_documents_in_managed_apps):
        """Sets the allow_opening_un_managed_app_documents_in_managed_apps of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, documents in unmanaged apps and accounts will only open in other unmanaged apps and accounts on iOS 7+.  # noqa: E501

        :param allow_opening_un_managed_app_documents_in_managed_apps: The allow_opening_un_managed_app_documents_in_managed_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_opening_un_managed_app_documents_in_managed_apps = allow_opening_un_managed_app_documents_in_managed_apps

    @property
    def limit_ad_tracking(self):
        """Gets the limit_ad_tracking of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, limits ad tracking on iOS 7+.  # noqa: E501

        :return: The limit_ad_tracking of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._limit_ad_tracking

    @limit_ad_tracking.setter
    def limit_ad_tracking(self, limit_ad_tracking):
        """Sets the limit_ad_tracking of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if true, limits ad tracking on iOS 7+.  # noqa: E501

        :param limit_ad_tracking: The limit_ad_tracking of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._limit_ad_tracking = limit_ad_tracking

    @property
    def allow_account_modification(self):
        """Gets the allow_account_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, account modification is disabled on supervised iOS 7+.  # noqa: E501

        :return: The allow_account_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_account_modification

    @allow_account_modification.setter
    def allow_account_modification(self, allow_account_modification):
        """Sets the allow_account_modification of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, account modification is disabled on supervised iOS 7+.  # noqa: E501

        :param allow_account_modification: The allow_account_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_account_modification = allow_account_modification

    @property
    def allow_air_drop(self):
        """Gets the allow_air_drop of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, AirDrop is disabled on supervised iOS 7+.  # noqa: E501

        :return: The allow_air_drop of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_air_drop

    @allow_air_drop.setter
    def allow_air_drop(self, allow_air_drop):
        """Sets the allow_air_drop of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, AirDrop is disabled on supervised iOS 7+.  # noqa: E501

        :param allow_air_drop: The allow_air_drop of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_air_drop = allow_air_drop

    @property
    def allow_changes_to_find_my_friends(self):
        """Gets the allow_changes_to_find_my_friends of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, changes to Find My Friends are disabled on supervised iOS 7+.  # noqa: E501

        :return: The allow_changes_to_find_my_friends of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_changes_to_find_my_friends

    @allow_changes_to_find_my_friends.setter
    def allow_changes_to_find_my_friends(self, allow_changes_to_find_my_friends):
        """Sets the allow_changes_to_find_my_friends of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, changes to Find My Friends are disabled on supervised iOS 7+.  # noqa: E501

        :param allow_changes_to_find_my_friends: The allow_changes_to_find_my_friends of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_changes_to_find_my_friends = allow_changes_to_find_my_friends

    @property
    def allow_keychain_sync(self):
        """Gets the allow_keychain_sync of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, disables iCloud keychain synchronization on iOS 7+.  # noqa: E501

        :return: The allow_keychain_sync of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_keychain_sync

    @allow_keychain_sync.setter
    def allow_keychain_sync(self, allow_keychain_sync):
        """Sets the allow_keychain_sync of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if false, disables iCloud keychain synchronization on iOS 7+.  # noqa: E501

        :param allow_keychain_sync: The allow_keychain_sync of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_keychain_sync = allow_keychain_sync

    @property
    def allow_over_the_air_pki_updates(self):
        """Gets the allow_over_the_air_pki_updates of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, over-the-air PKI updates are disabled on iOS 7+.  # noqa: E501

        :return: The allow_over_the_air_pki_updates of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_over_the_air_pki_updates

    @allow_over_the_air_pki_updates.setter
    def allow_over_the_air_pki_updates(self, allow_over_the_air_pki_updates):
        """Sets the allow_over_the_air_pki_updates of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if false, over-the-air PKI updates are disabled on iOS 7+.  # noqa: E501

        :param allow_over_the_air_pki_updates: The allow_over_the_air_pki_updates of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_over_the_air_pki_updates = allow_over_the_air_pki_updates

    @property
    def allow_pairing_with_non_configurator_hosts(self):
        """Gets the allow_pairing_with_non_configurator_hosts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, host pairing is disabled with the exception of the supervision host on supervised iOS 7+.  # noqa: E501

        :return: The allow_pairing_with_non_configurator_hosts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_pairing_with_non_configurator_hosts

    @allow_pairing_with_non_configurator_hosts.setter
    def allow_pairing_with_non_configurator_hosts(self, allow_pairing_with_non_configurator_hosts):
        """Sets the allow_pairing_with_non_configurator_hosts of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, host pairing is disabled with the exception of the supervision host on supervised iOS 7+.  # noqa: E501

        :param allow_pairing_with_non_configurator_hosts: The allow_pairing_with_non_configurator_hosts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_pairing_with_non_configurator_hosts = allow_pairing_with_non_configurator_hosts

    @property
    def allow_changes_to_cellular_data_usage_for_apps(self):
        """Gets the allow_changes_to_cellular_data_usage_for_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, changes to cellular data usage for apps are disabled on supervised iOS 7+.  # noqa: E501

        :return: The allow_changes_to_cellular_data_usage_for_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_changes_to_cellular_data_usage_for_apps

    @allow_changes_to_cellular_data_usage_for_apps.setter
    def allow_changes_to_cellular_data_usage_for_apps(self, allow_changes_to_cellular_data_usage_for_apps):
        """Sets the allow_changes_to_cellular_data_usage_for_apps of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, changes to cellular data usage for apps are disabled on supervised iOS 7+.  # noqa: E501

        :param allow_changes_to_cellular_data_usage_for_apps: The allow_changes_to_cellular_data_usage_for_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_changes_to_cellular_data_usage_for_apps = allow_changes_to_cellular_data_usage_for_apps

    @property
    def show_control_center_on_lock_screen(self):
        """Gets the show_control_center_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, prevents Control Center from appearing on the Lock screen on iOS 7+.  # noqa: E501

        :return: The show_control_center_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._show_control_center_on_lock_screen

    @show_control_center_on_lock_screen.setter
    def show_control_center_on_lock_screen(self, show_control_center_on_lock_screen):
        """Sets the show_control_center_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if false, prevents Control Center from appearing on the Lock screen on iOS 7+.  # noqa: E501

        :param show_control_center_on_lock_screen: The show_control_center_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._show_control_center_on_lock_screen = show_control_center_on_lock_screen

    @property
    def show_notifications_view_on_lock_screen(self):
        """Gets the show_notifications_view_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, the Notifications view in Notification Center on the lock screen is disabled and users can’t receive notifications when the screen is locked on iOS 7+.  # noqa: E501

        :return: The show_notifications_view_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._show_notifications_view_on_lock_screen

    @show_notifications_view_on_lock_screen.setter
    def show_notifications_view_on_lock_screen(self, show_notifications_view_on_lock_screen):
        """Sets the show_notifications_view_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, the Notifications view in Notification Center on the lock screen is disabled and users can’t receive notifications when the screen is locked on iOS 7+.  # noqa: E501

        :param show_notifications_view_on_lock_screen: The show_notifications_view_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._show_notifications_view_on_lock_screen = show_notifications_view_on_lock_screen

    @property
    def show_today_view_on_lock_screen(self):
        """Gets the show_today_view_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, the Today view in Notification Center on the lock screen is disabled on iOS 7+.  # noqa: E501

        :return: The show_today_view_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._show_today_view_on_lock_screen

    @show_today_view_on_lock_screen.setter
    def show_today_view_on_lock_screen(self, show_today_view_on_lock_screen):
        """Sets the show_today_view_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, the Today view in Notification Center on the lock screen is disabled on iOS 7+.  # noqa: E501

        :param show_today_view_on_lock_screen: The show_today_view_on_lock_screen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._show_today_view_on_lock_screen = show_today_view_on_lock_screen

    @property
    def allowpasscodemodification(self):
        """Gets the allowpasscodemodification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, prevents the device passcode from being added, changed, or removed on supervised iOS 9+.  # noqa: E501

        :return: The allowpasscodemodification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowpasscodemodification

    @allowpasscodemodification.setter
    def allowpasscodemodification(self, allowpasscodemodification):
        """Sets the allowpasscodemodification of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, prevents the device passcode from being added, changed, or removed on supervised iOS 9+.  # noqa: E501

        :param allowpasscodemodification: The allowpasscodemodification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowpasscodemodification = allowpasscodemodification

    @property
    def allow_touch_id_modification(self):
        """Gets the allow_touch_id_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allows the user to modify Touch ID on supervised iOS.  # noqa: E501

        :return: The allow_touch_id_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_touch_id_modification

    @allow_touch_id_modification.setter
    def allow_touch_id_modification(self, allow_touch_id_modification):
        """Sets the allow_touch_id_modification of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allows the user to modify Touch ID on supervised iOS.  # noqa: E501

        :param allow_touch_id_modification: The allow_touch_id_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_touch_id_modification = allow_touch_id_modification

    @property
    def allow_app_storeiconon_homescreen(self):
        """Gets the allow_app_storeiconon_homescreen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether when false, the App Store is disabled and its icon is removed from the Home screen on supervised iOS 9+.  # noqa: E501

        :return: The allow_app_storeiconon_homescreen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_app_storeiconon_homescreen

    @allow_app_storeiconon_homescreen.setter
    def allow_app_storeiconon_homescreen(self, allow_app_storeiconon_homescreen):
        """Sets the allow_app_storeiconon_homescreen of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether when false, the App Store is disabled and its icon is removed from the Home screen on supervised iOS 9+.  # noqa: E501

        :param allow_app_storeiconon_homescreen: The allow_app_storeiconon_homescreen of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_app_storeiconon_homescreen = allow_app_storeiconon_homescreen

    @property
    def show_apps(self):
        """Gets the show_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets if present, allows only bundle IDs listed in the array from being shown or launchable on supervised iOS 9.3+.  # noqa: E501

        :return: The show_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: list[str]
        """
        return self._show_apps

    @show_apps.setter
    def show_apps(self, show_apps):
        """Sets the show_apps of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets if present, allows only bundle IDs listed in the array from being shown or launchable on supervised iOS 9.3+.  # noqa: E501

        :param show_apps: The show_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: list[str]
        """

        self._show_apps = show_apps

    @property
    def hide_apps(self):
        """Gets the hide_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets if present, prevents bundle IDs listed in the array from being shown or launchable on supervised iOS 9.3+.  # noqa: E501

        :return: The hide_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: list[str]
        """
        return self._hide_apps

    @hide_apps.setter
    def hide_apps(self, hide_apps):
        """Sets the hide_apps of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets if present, prevents bundle IDs listed in the array from being shown or launchable on supervised iOS 9.3+.  # noqa: E501

        :param hide_apps: The hide_apps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: list[str]
        """

        self._hide_apps = hide_apps

    @property
    def allowautomaticappdownloads(self):
        """Gets the allowautomaticappdownloads of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, prevents automatic downloading of apps purchased on other devices on supervised iOS 9+.  # noqa: E501

        :return: The allowautomaticappdownloads of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowautomaticappdownloads

    @allowautomaticappdownloads.setter
    def allowautomaticappdownloads(self, allowautomaticappdownloads):
        """Sets the allowautomaticappdownloads of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, prevents automatic downloading of apps purchased on other devices on supervised iOS 9+.  # noqa: E501

        :param allowautomaticappdownloads: The allowautomaticappdownloads of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowautomaticappdownloads = allowautomaticappdownloads

    @property
    def allowinternetresultsin_spotlight(self):
        """Gets the allowinternetresultsin_spotlight of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, Spotlight will not return Internet search results on supervised iOS.  # noqa: E501

        :return: The allowinternetresultsin_spotlight of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowinternetresultsin_spotlight

    @allowinternetresultsin_spotlight.setter
    def allowinternetresultsin_spotlight(self, allowinternetresultsin_spotlight):
        """Sets the allowinternetresultsin_spotlight of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, Spotlight will not return Internet search results on supervised iOS.  # noqa: E501

        :param allowinternetresultsin_spotlight: The allowinternetresultsin_spotlight of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowinternetresultsin_spotlight = allowinternetresultsin_spotlight

    @property
    def allowconfiguring_restrictions(self):
        """Gets the allowconfiguring_restrictions of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables the \"Enable Restrictions\" option in the Restrictions UI in Settings on supervised iOS.  # noqa: E501

        :return: The allowconfiguring_restrictions of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowconfiguring_restrictions

    @allowconfiguring_restrictions.setter
    def allowconfiguring_restrictions(self, allowconfiguring_restrictions):
        """Sets the allowconfiguring_restrictions of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables the \"Enable Restrictions\" option in the Restrictions UI in Settings on supervised iOS.  # noqa: E501

        :param allowconfiguring_restrictions: The allowconfiguring_restrictions of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowconfiguring_restrictions = allowconfiguring_restrictions

    @property
    def allow_erase_all_contentsand_settings(self):
        """Gets the allow_erase_all_contentsand_settings of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables the \"Erase All Content And Settings\" option in the Reset UI on supervised iOS.  # noqa: E501

        :return: The allow_erase_all_contentsand_settings of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_erase_all_contentsand_settings

    @allow_erase_all_contentsand_settings.setter
    def allow_erase_all_contentsand_settings(self, allow_erase_all_contentsand_settings):
        """Sets the allow_erase_all_contentsand_settings of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables the \"Erase All Content And Settings\" option in the Reset UI on supervised iOS.  # noqa: E501

        :param allow_erase_all_contentsand_settings: The allow_erase_all_contentsand_settings of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_erase_all_contentsand_settings = allow_erase_all_contentsand_settings

    @property
    def allowdevicenamemodification(self):
        """Gets the allowdevicenamemodification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, prevents device name from being changed on supervised iOS 9+.  # noqa: E501

        :return: The allowdevicenamemodification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowdevicenamemodification

    @allowdevicenamemodification.setter
    def allowdevicenamemodification(self, allowdevicenamemodification):
        """Sets the allowdevicenamemodification of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, prevents device name from being changed on supervised iOS 9+.  # noqa: E501

        :param allowdevicenamemodification: The allowdevicenamemodification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowdevicenamemodification = allowdevicenamemodification

    @property
    def allowwallpapermodification(self):
        """Gets the allowwallpapermodification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, prevents wallpaper from being changed on supervised iOS 9+.  # noqa: E501

        :return: The allowwallpapermodification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowwallpapermodification

    @allowwallpapermodification.setter
    def allowwallpapermodification(self, allowwallpapermodification):
        """Sets the allowwallpapermodification of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, prevents wallpaper from being changed on supervised iOS 9+.  # noqa: E501

        :param allowwallpapermodification: The allowwallpapermodification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowwallpapermodification = allowwallpapermodification

    @property
    def requirepasscodeonfirst_air_playpairing(self):
        """Gets the requirepasscodeonfirst_air_playpairing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, forces all devices receiving AirPlay requests from this device to use a pairing password on iOS 7.1+.  # noqa: E501

        :return: The requirepasscodeonfirst_air_playpairing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._requirepasscodeonfirst_air_playpairing

    @requirepasscodeonfirst_air_playpairing.setter
    def requirepasscodeonfirst_air_playpairing(self, requirepasscodeonfirst_air_playpairing):
        """Sets the requirepasscodeonfirst_air_playpairing of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to true, forces all devices receiving AirPlay requests from this device to use a pairing password on iOS 7.1+.  # noqa: E501

        :param requirepasscodeonfirst_air_playpairing: The requirepasscodeonfirst_air_playpairing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._requirepasscodeonfirst_air_playpairing = requirepasscodeonfirst_air_playpairing

    @property
    def enforce_air_dropasanunmanageddropdestination(self):
        """Gets the enforce_air_dropasanunmanageddropdestination of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, forces all devices receiving AirPlay requests from this device to use a pairing password on iOS 9+.  # noqa: E501

        :return: The enforce_air_dropasanunmanageddropdestination of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_air_dropasanunmanageddropdestination

    @enforce_air_dropasanunmanageddropdestination.setter
    def enforce_air_dropasanunmanageddropdestination(self, enforce_air_dropasanunmanageddropdestination):
        """Sets the enforce_air_dropasanunmanageddropdestination of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to true, forces all devices receiving AirPlay requests from this device to use a pairing password on iOS 9+.  # noqa: E501

        :param enforce_air_dropasanunmanageddropdestination: The enforce_air_dropasanunmanageddropdestination of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enforce_air_dropasanunmanageddropdestination = enforce_air_dropasanunmanageddropdestination

    @property
    def allow_apple_watchpairing(self):
        """Gets the allow_apple_watchpairing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables pairing with an Apple Watch on supervised iOS 9+.  # noqa: E501

        :return: The allow_apple_watchpairing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_apple_watchpairing

    @allow_apple_watchpairing.setter
    def allow_apple_watchpairing(self, allow_apple_watchpairing):
        """Sets the allow_apple_watchpairing of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables pairing with an Apple Watch on supervised iOS 9+.  # noqa: E501

        :param allow_apple_watchpairing: The allow_apple_watchpairing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_apple_watchpairing = allow_apple_watchpairing

    @property
    def allowkeyboardshortcuts(self):
        """Gets the allowkeyboardshortcuts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, keyboard shortcuts cannot be used on supervised iOS 9+.  # noqa: E501

        :return: The allowkeyboardshortcuts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowkeyboardshortcuts

    @allowkeyboardshortcuts.setter
    def allowkeyboardshortcuts(self, allowkeyboardshortcuts):
        """Sets the allowkeyboardshortcuts of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, keyboard shortcuts cannot be used on supervised iOS 9+.  # noqa: E501

        :param allowkeyboardshortcuts: The allowkeyboardshortcuts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowkeyboardshortcuts = allowkeyboardshortcuts

    @property
    def allow_predictive_keyboard(self):
        """Gets the allow_predictive_keyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables predictive keyboards on supervised iOS 8.1.3+.  # noqa: E501

        :return: The allow_predictive_keyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_predictive_keyboard

    @allow_predictive_keyboard.setter
    def allow_predictive_keyboard(self, allow_predictive_keyboard):
        """Sets the allow_predictive_keyboard of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables predictive keyboards on supervised iOS 8.1.3+.  # noqa: E501

        :param allow_predictive_keyboard: The allow_predictive_keyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_predictive_keyboard = allow_predictive_keyboard

    @property
    def allowautocorrectionforkeyboard(self):
        """Gets the allowautocorrectionforkeyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables keyboard auto-correction on supervised iOS 8.1.3+.  # noqa: E501

        :return: The allowautocorrectionforkeyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowautocorrectionforkeyboard

    @allowautocorrectionforkeyboard.setter
    def allowautocorrectionforkeyboard(self, allowautocorrectionforkeyboard):
        """Sets the allowautocorrectionforkeyboard of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables keyboard auto-correction on supervised iOS 8.1.3+.  # noqa: E501

        :param allowautocorrectionforkeyboard: The allowautocorrectionforkeyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowautocorrectionforkeyboard = allowautocorrectionforkeyboard

    @property
    def allowspellcheckforkeyboard(self):
        """Gets the allowspellcheckforkeyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables keyboard spell-check on supervised iOS 8.1.3+.  # noqa: E501

        :return: The allowspellcheckforkeyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowspellcheckforkeyboard

    @allowspellcheckforkeyboard.setter
    def allowspellcheckforkeyboard(self, allowspellcheckforkeyboard):
        """Sets the allowspellcheckforkeyboard of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables keyboard spell-check on supervised iOS 8.1.3+.  # noqa: E501

        :param allowspellcheckforkeyboard: The allowspellcheckforkeyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowspellcheckforkeyboard = allowspellcheckforkeyboard

    @property
    def allowdefinitionlookupforkeyboard(self):
        """Gets the allowdefinitionlookupforkeyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables definition lookup on supervised iOS 8.1.3+.  # noqa: E501

        :return: The allowdefinitionlookupforkeyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowdefinitionlookupforkeyboard

    @allowdefinitionlookupforkeyboard.setter
    def allowdefinitionlookupforkeyboard(self, allowdefinitionlookupforkeyboard):
        """Sets the allowdefinitionlookupforkeyboard of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables definition lookup on supervised iOS 8.1.3+.  # noqa: E501

        :param allowdefinitionlookupforkeyboard: The allowdefinitionlookupforkeyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowdefinitionlookupforkeyboard = allowdefinitionlookupforkeyboard

    @property
    def allow_news(self):
        """Gets the allow_news of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables News on supervised iOS 9+.  # noqa: E501

        :return: The allow_news of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_news

    @allow_news.setter
    def allow_news(self, allow_news):
        """Sets the allow_news of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables News on supervised iOS 9+.  # noqa: E501

        :param allow_news: The allow_news of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_news = allow_news

    @property
    def allow_podcasts(self):
        """Gets the allow_podcasts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables podcasts on supervised iOS 8+.  # noqa: E501

        :return: The allow_podcasts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_podcasts

    @allow_podcasts.setter
    def allow_podcasts(self, allow_podcasts):
        """Sets the allow_podcasts of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables podcasts on supervised iOS 8+.  # noqa: E501

        :param allow_podcasts: The allow_podcasts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_podcasts = allow_podcasts

    @property
    def allowmanagedappstostoredata(self):
        """Gets the allowmanagedappstostoredata of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, prevents managed applications from using iCloud sync.  # noqa: E501

        :return: The allowmanagedappstostoredata of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowmanagedappstostoredata

    @allowmanagedappstostoredata.setter
    def allowmanagedappstostoredata(self, allowmanagedappstostoredata):
        """Sets the allowmanagedappstostoredata of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, prevents managed applications from using iCloud sync.  # noqa: E501

        :param allowmanagedappstostoredata: The allowmanagedappstostoredata of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowmanagedappstostoredata = allowmanagedappstostoredata

    @property
    def allowbackingup_enterprise_books(self):
        """Gets the allowbackingup_enterprise_books of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, Enterprise books will not be backed up.  # noqa: E501

        :return: The allowbackingup_enterprise_books of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowbackingup_enterprise_books

    @allowbackingup_enterprise_books.setter
    def allowbackingup_enterprise_books(self, allowbackingup_enterprise_books):
        """Sets the allowbackingup_enterprise_books of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, Enterprise books will not be backed up.  # noqa: E501

        :param allowbackingup_enterprise_books: The allowbackingup_enterprise_books of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowbackingup_enterprise_books = allowbackingup_enterprise_books

    @property
    def allowsynchronizing_enterprise_booksnotesandhiglights(self):
        """Gets the allowsynchronizing_enterprise_booksnotesandhiglights of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, Enterprise books notes and highlights will not be synced.  # noqa: E501

        :return: The allowsynchronizing_enterprise_booksnotesandhiglights of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowsynchronizing_enterprise_booksnotesandhiglights

    @allowsynchronizing_enterprise_booksnotesandhiglights.setter
    def allowsynchronizing_enterprise_booksnotesandhiglights(self, allowsynchronizing_enterprise_booksnotesandhiglights):
        """Sets the allowsynchronizing_enterprise_booksnotesandhiglights of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, Enterprise books notes and highlights will not be synced.  # noqa: E501

        :param allowsynchronizing_enterprise_booksnotesandhiglights: The allowsynchronizing_enterprise_booksnotesandhiglights of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowsynchronizing_enterprise_booksnotesandhiglights = allowsynchronizing_enterprise_booksnotesandhiglights

    @property
    def allowi_cloudphotolibrary(self):
        """Gets the allowi_cloudphotolibrary of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables iCloud Photo Library on iOS 9+.  # noqa: E501

        :return: The allowi_cloudphotolibrary of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowi_cloudphotolibrary

    @allowi_cloudphotolibrary.setter
    def allowi_cloudphotolibrary(self, allowi_cloudphotolibrary):
        """Sets the allowi_cloudphotolibrary of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables iCloud Photo Library on iOS 9+.  # noqa: E501

        :param allowi_cloudphotolibrary: The allowi_cloudphotolibrary of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowi_cloudphotolibrary = allowi_cloudphotolibrary

    @property
    def allowusertotrustunmanagedenterpriseapps(self):
        """Gets the allowusertotrustunmanagedenterpriseapps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false removes the Trust Enterprise Developer button in Settings-&gt;General-&gt;Profiles and Device Management, preventing apps from being provisioned by universal provisioning profiles on iOS 9+.  # noqa: E501

        :return: The allowusertotrustunmanagedenterpriseapps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allowusertotrustunmanagedenterpriseapps

    @allowusertotrustunmanagedenterpriseapps.setter
    def allowusertotrustunmanagedenterpriseapps(self, allowusertotrustunmanagedenterpriseapps):
        """Sets the allowusertotrustunmanagedenterpriseapps of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false removes the Trust Enterprise Developer button in Settings-&gt;General-&gt;Profiles and Device Management, preventing apps from being provisioned by universal provisioning profiles on iOS 9+.  # noqa: E501

        :param allowusertotrustunmanagedenterpriseapps: The allowusertotrustunmanagedenterpriseapps of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allowusertotrustunmanagedenterpriseapps = allowusertotrustunmanagedenterpriseapps

    @property
    def enforce_wrist_detectionon_apple_watch(self):
        """Gets the enforce_wrist_detectionon_apple_watch of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, a paired Apple Watch will be forced to use Wrist Detection on iOS 8.2+.  # noqa: E501

        :return: The enforce_wrist_detectionon_apple_watch of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_wrist_detectionon_apple_watch

    @enforce_wrist_detectionon_apple_watch.setter
    def enforce_wrist_detectionon_apple_watch(self, enforce_wrist_detectionon_apple_watch):
        """Sets the enforce_wrist_detectionon_apple_watch of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to true, a paired Apple Watch will be forced to use Wrist Detection on iOS 8.2+.  # noqa: E501

        :param enforce_wrist_detectionon_apple_watch: The enforce_wrist_detectionon_apple_watch of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enforce_wrist_detectionon_apple_watch = enforce_wrist_detectionon_apple_watch

    @property
    def allow_handoff(self):
        """Gets the allow_handoff of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, Activity Continuation will be disabled.  # noqa: E501

        :return: The allow_handoff of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_handoff

    @allow_handoff.setter
    def allow_handoff(self, allow_handoff):
        """Sets the allow_handoff of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, Activity Continuation will be disabled.  # noqa: E501

        :param allow_handoff: The allow_handoff of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_handoff = allow_handoff

    @property
    def allow_bluetooth_settings_modification(self):
        """Gets the allow_bluetooth_settings_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, prevents modification of Bluetooth settings on supervised iOS 10+.  # noqa: E501

        :return: The allow_bluetooth_settings_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_bluetooth_settings_modification

    @allow_bluetooth_settings_modification.setter
    def allow_bluetooth_settings_modification(self, allow_bluetooth_settings_modification):
        """Sets the allow_bluetooth_settings_modification of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, prevents modification of Bluetooth settings on supervised iOS 10+.  # noqa: E501

        :param allow_bluetooth_settings_modification: The allow_bluetooth_settings_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_bluetooth_settings_modification = allow_bluetooth_settings_modification

    @property
    def allow_screen_observationby_classroom(self):
        """Gets the allow_screen_observationby_classroom of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if allowScreenShot is set to false, it also prevents the Classroom app from observing remote screens on supervised iOS 9.3+.  # noqa: E501

        :return: The allow_screen_observationby_classroom of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_screen_observationby_classroom

    @allow_screen_observationby_classroom.setter
    def allow_screen_observationby_classroom(self, allow_screen_observationby_classroom):
        """Sets the allow_screen_observationby_classroom of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if allowScreenShot is set to false, it also prevents the Classroom app from observing remote screens on supervised iOS 9.3+.  # noqa: E501

        :param allow_screen_observationby_classroom: The allow_screen_observationby_classroom of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_screen_observationby_classroom = allow_screen_observationby_classroom

    @property
    def allow_dictation(self):
        """Gets the allow_dictation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disallows dictation input on supervised iOS 10.3+.  # noqa: E501

        :return: The allow_dictation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_dictation

    @allow_dictation.setter
    def allow_dictation(self, allow_dictation):
        """Sets the allow_dictation of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disallows dictation input on supervised iOS 10.3+.  # noqa: E501

        :param allow_dictation: The allow_dictation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_dictation = allow_dictation

    @property
    def force_wi_fi_whitelisting(self):
        """Gets the force_wi_fi_whitelisting of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, the device can join Wi-Fi networks only if they were set up through a configuration profile on supervised iOS 10.3+.  # noqa: E501

        :return: The force_wi_fi_whitelisting of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_wi_fi_whitelisting

    @force_wi_fi_whitelisting.setter
    def force_wi_fi_whitelisting(self, force_wi_fi_whitelisting):
        """Sets the force_wi_fi_whitelisting of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to true, the device can join Wi-Fi networks only if they were set up through a configuration profile on supervised iOS 10.3+.  # noqa: E501

        :param force_wi_fi_whitelisting: The force_wi_fi_whitelisting of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_wi_fi_whitelisting = force_wi_fi_whitelisting

    @property
    def force_classroom_unprompted_screen_observation(self):
        """Gets the force_classroom_unprompted_screen_observation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, and ScreenObservationPermissionModificationAllowed is also true in the Education payload, a student enrolled in a managed course via the Classroom app will automatically give permission to that course's teacher’s requests to observe the student’s screen without prompting the student on supervised iOS 10.3+.  # noqa: E501

        :return: The force_classroom_unprompted_screen_observation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_classroom_unprompted_screen_observation

    @force_classroom_unprompted_screen_observation.setter
    def force_classroom_unprompted_screen_observation(self, force_classroom_unprompted_screen_observation):
        """Sets the force_classroom_unprompted_screen_observation of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to true, and ScreenObservationPermissionModificationAllowed is also true in the Education payload, a student enrolled in a managed course via the Classroom app will automatically give permission to that course's teacher’s requests to observe the student’s screen without prompting the student on supervised iOS 10.3+.  # noqa: E501

        :param force_classroom_unprompted_screen_observation: The force_classroom_unprompted_screen_observation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_classroom_unprompted_screen_observation = force_classroom_unprompted_screen_observation

    @property
    def force_classroom_request_permission_to_leave_classes(self):
        """Gets the force_classroom_request_permission_to_leave_classes of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether a student enrolled in an unmanaged course via Classroom should request permission from the teacher when attempting to leave the course or not on supervised iOS 11.3+.  # noqa: E501

        :return: The force_classroom_request_permission_to_leave_classes of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_classroom_request_permission_to_leave_classes

    @force_classroom_request_permission_to_leave_classes.setter
    def force_classroom_request_permission_to_leave_classes(self, force_classroom_request_permission_to_leave_classes):
        """Sets the force_classroom_request_permission_to_leave_classes of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether a student enrolled in an unmanaged course via Classroom should request permission from the teacher when attempting to leave the course or not on supervised iOS 11.3+.  # noqa: E501

        :param force_classroom_request_permission_to_leave_classes: The force_classroom_request_permission_to_leave_classes of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_classroom_request_permission_to_leave_classes = force_classroom_request_permission_to_leave_classes

    @property
    def force_classroom_unprompted_app_and_device_lock(self):
        """Gets the force_classroom_unprompted_app_and_device_lock of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, allows unprompted app and device lock in unmanaged classes on supervised iOS 11+.  # noqa: E501

        :return: The force_classroom_unprompted_app_and_device_lock of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_classroom_unprompted_app_and_device_lock

    @force_classroom_unprompted_app_and_device_lock.setter
    def force_classroom_unprompted_app_and_device_lock(self, force_classroom_unprompted_app_and_device_lock):
        """Sets the force_classroom_unprompted_app_and_device_lock of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to true, allows unprompted app and device lock in unmanaged classes on supervised iOS 11+.  # noqa: E501

        :param force_classroom_unprompted_app_and_device_lock: The force_classroom_unprompted_app_and_device_lock of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_classroom_unprompted_app_and_device_lock = force_classroom_unprompted_app_and_device_lock

    @property
    def force_classroom_automatically_join_classes(self):
        """Gets the force_classroom_automatically_join_classes of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, allows automatic joining of unmanaged classes on supervised iOS 11+.  # noqa: E501

        :return: The force_classroom_automatically_join_classes of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_classroom_automatically_join_classes

    @force_classroom_automatically_join_classes.setter
    def force_classroom_automatically_join_classes(self, force_classroom_automatically_join_classes):
        """Sets the force_classroom_automatically_join_classes of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to true, allows automatic joining of unmanaged classes on supervised iOS 11+.  # noqa: E501

        :param force_classroom_automatically_join_classes: The force_classroom_automatically_join_classes of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_classroom_automatically_join_classes = force_classroom_automatically_join_classes

    @property
    def allow_system_app_removal(self):
        """Gets the allow_system_app_removal of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables the removal of system apps from the device on supervised iOS 11+.  # noqa: E501

        :return: The allow_system_app_removal of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_system_app_removal

    @allow_system_app_removal.setter
    def allow_system_app_removal(self, allow_system_app_removal):
        """Sets the allow_system_app_removal of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables the removal of system apps from the device on supervised iOS 11+.  # noqa: E501

        :param allow_system_app_removal: The allow_system_app_removal of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_system_app_removal = allow_system_app_removal

    @property
    def allow_vpn_creation(self):
        """Gets the allow_vpn_creation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disallows the creation of VPN configurations on supervised iOS 11+.  # noqa: E501

        :return: The allow_vpn_creation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_vpn_creation

    @allow_vpn_creation.setter
    def allow_vpn_creation(self, allow_vpn_creation):
        """Sets the allow_vpn_creation of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disallows the creation of VPN configurations on supervised iOS 11+.  # noqa: E501

        :param allow_vpn_creation: The allow_vpn_creation of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_vpn_creation = allow_vpn_creation

    @property
    def allow_air_print(self):
        """Gets the allow_air_print of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disallows AirPrint on supervised iOS 11+.  # noqa: E501

        :return: The allow_air_print of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_air_print

    @allow_air_print.setter
    def allow_air_print(self, allow_air_print):
        """Sets the allow_air_print of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disallows AirPrint on supervised iOS 11+.  # noqa: E501

        :param allow_air_print: The allow_air_print of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_air_print = allow_air_print

    @property
    def allow_managed_to_write_unmanaged_contacts(self):
        """Gets the allow_managed_to_write_unmanaged_contacts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, this setting restricts managed apps from reading contacts in unmanaged contacts accounts. This takes effect even if managed apps are prevented from reading from unmanaged sources.  # noqa: E501

        :return: The allow_managed_to_write_unmanaged_contacts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_managed_to_write_unmanaged_contacts

    @allow_managed_to_write_unmanaged_contacts.setter
    def allow_managed_to_write_unmanaged_contacts(self, allow_managed_to_write_unmanaged_contacts):
        """Sets the allow_managed_to_write_unmanaged_contacts of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, this setting restricts managed apps from reading contacts in unmanaged contacts accounts. This takes effect even if managed apps are prevented from reading from unmanaged sources.  # noqa: E501

        :param allow_managed_to_write_unmanaged_contacts: The allow_managed_to_write_unmanaged_contacts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_managed_to_write_unmanaged_contacts = allow_managed_to_write_unmanaged_contacts

    @property
    def allow_unmanaged_to_read_managed_contacts(self):
        """Gets the allow_unmanaged_to_read_managed_contacts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, this setting restricts unmanaged apps from reading contacts in managed contacts accounts. This takes effect even if unmanaged apps are prevented from reading from managed sources.  # noqa: E501

        :return: The allow_unmanaged_to_read_managed_contacts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_unmanaged_to_read_managed_contacts

    @allow_unmanaged_to_read_managed_contacts.setter
    def allow_unmanaged_to_read_managed_contacts(self, allow_unmanaged_to_read_managed_contacts):
        """Sets the allow_unmanaged_to_read_managed_contacts of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, this setting restricts unmanaged apps from reading contacts in managed contacts accounts. This takes effect even if unmanaged apps are prevented from reading from managed sources.  # noqa: E501

        :param allow_unmanaged_to_read_managed_contacts: The allow_unmanaged_to_read_managed_contacts of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_unmanaged_to_read_managed_contacts = allow_unmanaged_to_read_managed_contacts

    @property
    def allow_air_print_credentials_storage(self):
        """Gets the allow_air_print_credentials_storage of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disallows keychain storage of username and password for Airprint on supervised iOS 11+.  # noqa: E501

        :return: The allow_air_print_credentials_storage of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_air_print_credentials_storage

    @allow_air_print_credentials_storage.setter
    def allow_air_print_credentials_storage(self, allow_air_print_credentials_storage):
        """Sets the allow_air_print_credentials_storage of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disallows keychain storage of username and password for Airprint on supervised iOS 11+.  # noqa: E501

        :param allow_air_print_credentials_storage: The allow_air_print_credentials_storage of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_air_print_credentials_storage = allow_air_print_credentials_storage

    @property
    def force_air_print_trusted_tls_requirement(self):
        """Gets the force_air_print_trusted_tls_requirement of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, requires trusted certificates for TLS printing communication on supervised iOS 11+.  # noqa: E501

        :return: The force_air_print_trusted_tls_requirement of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_air_print_trusted_tls_requirement

    @force_air_print_trusted_tls_requirement.setter
    def force_air_print_trusted_tls_requirement(self, force_air_print_trusted_tls_requirement):
        """Sets the force_air_print_trusted_tls_requirement of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to true, requires trusted certificates for TLS printing communication on supervised iOS 11+.  # noqa: E501

        :param force_air_print_trusted_tls_requirement: The force_air_print_trusted_tls_requirement of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_air_print_trusted_tls_requirement = force_air_print_trusted_tls_requirement

    @property
    def allow_air_printi_beacon_discovery(self):
        """Gets the allow_air_printi_beacon_discovery of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disables iBeacon discovery of AirPrint printers on supervised iOS 11+.  # noqa: E501

        :return: The allow_air_printi_beacon_discovery of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_air_printi_beacon_discovery

    @allow_air_printi_beacon_discovery.setter
    def allow_air_printi_beacon_discovery(self, allow_air_printi_beacon_discovery):
        """Sets the allow_air_printi_beacon_discovery of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disables iBeacon discovery of AirPrint printers on supervised iOS 11+.  # noqa: E501

        :param allow_air_printi_beacon_discovery: The allow_air_printi_beacon_discovery of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_air_printi_beacon_discovery = allow_air_printi_beacon_discovery

    @property
    def enforced_software_update_delay(self):
        """Gets the enforced_software_update_delay of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets this restriction allows the admin to set how many days a software update on the device will be delayed.  # noqa: E501

        :return: The enforced_software_update_delay of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._enforced_software_update_delay

    @enforced_software_update_delay.setter
    def enforced_software_update_delay(self, enforced_software_update_delay):
        """Sets the enforced_software_update_delay of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets this restriction allows the admin to set how many days a software update on the device will be delayed.  # noqa: E501

        :param enforced_software_update_delay: The enforced_software_update_delay of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._enforced_software_update_delay = enforced_software_update_delay

    @property
    def allow_usb_restricted_mode(self):
        """Gets the allow_usb_restricted_mode of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether USB restricted mode is allowed or not on supervised iOS 11.4+.  # noqa: E501

        :return: The allow_usb_restricted_mode of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_usb_restricted_mode

    @allow_usb_restricted_mode.setter
    def allow_usb_restricted_mode(self, allow_usb_restricted_mode):
        """Sets the allow_usb_restricted_mode of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether USB restricted mode is allowed or not on supervised iOS 11.4+.  # noqa: E501

        :param allow_usb_restricted_mode: The allow_usb_restricted_mode of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_usb_restricted_mode = allow_usb_restricted_mode

    @property
    def force_automatic_date_and_time(self):
        """Gets the force_automatic_date_and_time of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether date and time set automatically feature is allowed or not on supervised iOS 12.0+.  # noqa: E501

        :return: The force_automatic_date_and_time of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_automatic_date_and_time

    @force_automatic_date_and_time.setter
    def force_automatic_date_and_time(self, force_automatic_date_and_time):
        """Sets the force_automatic_date_and_time of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether date and time set automatically feature is allowed or not on supervised iOS 12.0+.  # noqa: E501

        :param force_automatic_date_and_time: The force_automatic_date_and_time of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_automatic_date_and_time = force_automatic_date_and_time

    @property
    def allow_password_auto_fill(self):
        """Gets the allow_password_auto_fill of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether to allow auto filling of passwords is allowed or not on supervised iOS 12.0+.  # noqa: E501

        :return: The allow_password_auto_fill of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_password_auto_fill

    @allow_password_auto_fill.setter
    def allow_password_auto_fill(self, allow_password_auto_fill):
        """Sets the allow_password_auto_fill of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether to allow auto filling of passwords is allowed or not on supervised iOS 12.0+.  # noqa: E501

        :param allow_password_auto_fill: The allow_password_auto_fill of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_password_auto_fill = allow_password_auto_fill

    @property
    def allow_password_sharing(self):
        """Gets the allow_password_sharing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allow sharing of Wi-Fi passwords is allowed or not on supervised iOS 12.0+.  # noqa: E501

        :return: The allow_password_sharing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_password_sharing

    @allow_password_sharing.setter
    def allow_password_sharing(self, allow_password_sharing):
        """Sets the allow_password_sharing of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether allow sharing of Wi-Fi passwords is allowed or not on supervised iOS 12.0+.  # noqa: E501

        :param allow_password_sharing: The allow_password_sharing of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_password_sharing = allow_password_sharing

    @property
    def force_authentication_before_auto_fill(self):
        """Gets the force_authentication_before_auto_fill of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether force authentication before autofill feature is allowed or not on supervised iOS 12.0+.  # noqa: E501

        :return: The force_authentication_before_auto_fill of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_authentication_before_auto_fill

    @force_authentication_before_auto_fill.setter
    def force_authentication_before_auto_fill(self, force_authentication_before_auto_fill):
        """Sets the force_authentication_before_auto_fill of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether force authentication before autofill feature is allowed or not on supervised iOS 12.0+.  # noqa: E501

        :param force_authentication_before_auto_fill: The force_authentication_before_auto_fill of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_authentication_before_auto_fill = force_authentication_before_auto_fill

    @property
    def allow_esim_modification(self):
        """Gets the allow_esim_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether eSIM modification is allowed or not on iOS 12.1+ iPhone XS or iPhone XS Max devices.  # noqa: E501

        :return: The allow_esim_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_esim_modification

    @allow_esim_modification.setter
    def allow_esim_modification(self, allow_esim_modification):
        """Sets the allow_esim_modification of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether eSIM modification is allowed or not on iOS 12.1+ iPhone XS or iPhone XS Max devices.  # noqa: E501

        :param allow_esim_modification: The allow_esim_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_esim_modification = allow_esim_modification

    @property
    def allow_personal_hotspot_modification(self):
        """Gets the allow_personal_hotspot_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether Personal Hotspot Modification is allowed or not on supervised iOS 12.2+  devices.  # noqa: E501

        :return: The allow_personal_hotspot_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_personal_hotspot_modification

    @allow_personal_hotspot_modification.setter
    def allow_personal_hotspot_modification(self, allow_personal_hotspot_modification):
        """Sets the allow_personal_hotspot_modification of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether Personal Hotspot Modification is allowed or not on supervised iOS 12.2+  devices.  # noqa: E501

        :param allow_personal_hotspot_modification: The allow_personal_hotspot_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_personal_hotspot_modification = allow_personal_hotspot_modification

    @property
    def allow_siri_server_logging(self):
        """Gets the allow_siri_server_logging of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether Siri Server logging is allowed or not on iOS 12.2+ devices.  # noqa: E501

        :return: The allow_siri_server_logging of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_siri_server_logging

    @allow_siri_server_logging.setter
    def allow_siri_server_logging(self, allow_siri_server_logging):
        """Sets the allow_siri_server_logging of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether Siri Server logging is allowed or not on iOS 12.2+ devices.  # noqa: E501

        :param allow_siri_server_logging: The allow_siri_server_logging of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_siri_server_logging = allow_siri_server_logging

    @property
    def allow_continuous_path_keyboard(self):
        """Gets the allow_continuous_path_keyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether continuous path keyboard is allowed. Requires a supervised device. Available in iOS 13 and later.  # noqa: E501

        :return: The allow_continuous_path_keyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_continuous_path_keyboard

    @allow_continuous_path_keyboard.setter
    def allow_continuous_path_keyboard(self, allow_continuous_path_keyboard):
        """Sets the allow_continuous_path_keyboard of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether continuous path keyboard is allowed. Requires a supervised device. Available in iOS 13 and later.  # noqa: E501

        :param allow_continuous_path_keyboard: The allow_continuous_path_keyboard of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_continuous_path_keyboard = allow_continuous_path_keyboard

    @property
    def allow_find_my_device(self):
        """Gets the allow_find_my_device of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether Find My Device in the Find My app is allowed. Requires a supervised device. Available in iOS 13 and later.  # noqa: E501

        :return: The allow_find_my_device of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_find_my_device

    @allow_find_my_device.setter
    def allow_find_my_device(self, allow_find_my_device):
        """Sets the allow_find_my_device of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether Find My Device in the Find My app is allowed. Requires a supervised device. Available in iOS 13 and later.  # noqa: E501

        :param allow_find_my_device: The allow_find_my_device of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_find_my_device = allow_find_my_device

    @property
    def allow_find_my_friends(self):
        """Gets the allow_find_my_friends of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether Find My Friends in the Find My app is allowed. Requires a supervised device. Available in iOS 13 and later.  # noqa: E501

        :return: The allow_find_my_friends of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_find_my_friends

    @allow_find_my_friends.setter
    def allow_find_my_friends(self, allow_find_my_friends):
        """Sets the allow_find_my_friends of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether Find My Friends in the Find My app is allowed. Requires a supervised device. Available in iOS 13 and later.  # noqa: E501

        :param allow_find_my_friends: The allow_find_my_friends of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_find_my_friends = allow_find_my_friends

    @property
    def allow_wi_fi_power_modification(self):
        """Gets the allow_wi_fi_power_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether modifying WiFi state is allowed. Requires a supervised device. Available in iOS 13 and later.  # noqa: E501

        :return: The allow_wi_fi_power_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wi_fi_power_modification

    @allow_wi_fi_power_modification.setter
    def allow_wi_fi_power_modification(self, allow_wi_fi_power_modification):
        """Sets the allow_wi_fi_power_modification of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether modifying WiFi state is allowed. Requires a supervised device. Available in iOS 13 and later.  # noqa: E501

        :param allow_wi_fi_power_modification: The allow_wi_fi_power_modification of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_wi_fi_power_modification = allow_wi_fi_power_modification

    @property
    def allow_files_usb_drive_access(self):
        """Gets the allow_files_usb_drive_access of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether acess to USB file drive is allowed or not on supervised iOS 13  devices.  # noqa: E501

        :return: The allow_files_usb_drive_access of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_files_usb_drive_access

    @allow_files_usb_drive_access.setter
    def allow_files_usb_drive_access(self, allow_files_usb_drive_access):
        """Sets the allow_files_usb_drive_access of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether acess to USB file drive is allowed or not on supervised iOS 13  devices.  # noqa: E501

        :param allow_files_usb_drive_access: The allow_files_usb_drive_access of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_files_usb_drive_access = allow_files_usb_drive_access

    @property
    def force_wi_fi_power_on(self):
        """Gets the force_wi_fi_power_on of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether WiFi Modificationin settings or control center is allowed. Requires a supervised device. Available in iOS 13.1 and later.  # noqa: E501

        :return: The force_wi_fi_power_on of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_wi_fi_power_on

    @force_wi_fi_power_on.setter
    def force_wi_fi_power_on(self, force_wi_fi_power_on):
        """Sets the force_wi_fi_power_on of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether WiFi Modificationin settings or control center is allowed. Requires a supervised device. Available in iOS 13.1 and later.  # noqa: E501

        :param force_wi_fi_power_on: The force_wi_fi_power_on of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_wi_fi_power_on = force_wi_fi_power_on

    @property
    def allow_files_network_drive_access(self):
        """Gets the allow_files_network_drive_access of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether acess to network drives in the file app is allowed or not on supervised iOS 13.1 devices.  # noqa: E501

        :return: The allow_files_network_drive_access of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_files_network_drive_access

    @allow_files_network_drive_access.setter
    def allow_files_network_drive_access(self, allow_files_network_drive_access):
        """Sets the allow_files_network_drive_access of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether acess to network drives in the file app is allowed or not on supervised iOS 13.1 devices.  # noqa: E501

        :param allow_files_network_drive_access: The allow_files_network_drive_access of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_files_network_drive_access = allow_files_network_drive_access

    @property
    def allow_shared_device_temporary_session(self):
        """Gets the allow_shared_device_temporary_session of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether starting a temporary session on a shared iPad on iOS 13.4 devices is allowed.  # noqa: E501

        :return: The allow_shared_device_temporary_session of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_shared_device_temporary_session

    @allow_shared_device_temporary_session.setter
    def allow_shared_device_temporary_session(self, allow_shared_device_temporary_session):
        """Sets the allow_shared_device_temporary_session of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether starting a temporary session on a shared iPad on iOS 13.4 devices is allowed.  # noqa: E501

        :param allow_shared_device_temporary_session: The allow_shared_device_temporary_session of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_shared_device_temporary_session = allow_shared_device_temporary_session

    @property
    def allow_deprecated_web_kit_tls(self):
        """Gets the allow_deprecated_web_kit_tls of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether the deprecated TLS 1.0/1.1 behavior in Safari is allowed. Available in iOS 13.4 and later.  # noqa: E501

        :return: The allow_deprecated_web_kit_tls of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_deprecated_web_kit_tls

    @allow_deprecated_web_kit_tls.setter
    def allow_deprecated_web_kit_tls(self, allow_deprecated_web_kit_tls):
        """Sets the allow_deprecated_web_kit_tls of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether the deprecated TLS 1.0/1.1 behavior in Safari is allowed. Available in iOS 13.4 and later.  # noqa: E501

        :param allow_deprecated_web_kit_tls: The allow_deprecated_web_kit_tls of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_deprecated_web_kit_tls = allow_deprecated_web_kit_tls

    @property
    def allow_proximity_setup_to_new_device(self):
        """Gets the allow_proximity_setup_to_new_device of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether users will see the prompt to set up new devices that are nearby. Requires a supervised device. Available in iOS 11 and later.  # noqa: E501

        :return: The allow_proximity_setup_to_new_device of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_proximity_setup_to_new_device

    @allow_proximity_setup_to_new_device.setter
    def allow_proximity_setup_to_new_device(self, allow_proximity_setup_to_new_device):
        """Sets the allow_proximity_setup_to_new_device of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether users will see the prompt to set up new devices that are nearby. Requires a supervised device. Available in iOS 11 and later.  # noqa: E501

        :param allow_proximity_setup_to_new_device: The allow_proximity_setup_to_new_device of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_proximity_setup_to_new_device = allow_proximity_setup_to_new_device

    @property
    def allow_password_proximity_requests(self):
        """Gets the allow_password_proximity_requests of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether requesting passwords from nearby devices is allowed. Requires a supervised device. Available in iOS 12 and later.  # noqa: E501

        :return: The allow_password_proximity_requests of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_password_proximity_requests

    @allow_password_proximity_requests.setter
    def allow_password_proximity_requests(self, allow_password_proximity_requests):
        """Sets the allow_password_proximity_requests of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether requesting passwords from nearby devices is allowed. Requires a supervised device. Available in iOS 12 and later.  # noqa: E501

        :param allow_password_proximity_requests: The allow_password_proximity_requests of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_password_proximity_requests = allow_password_proximity_requests

    @property
    def force_wi_fi_to_allowed_networks_only(self):
        """Gets the force_wi_fi_to_allowed_networks_only of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to true, the device can join Wi-Fi networks only if they were set up through a configuration profile on supervised iOS 10.3+.  # noqa: E501

        :return: The force_wi_fi_to_allowed_networks_only of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._force_wi_fi_to_allowed_networks_only

    @force_wi_fi_to_allowed_networks_only.setter
    def force_wi_fi_to_allowed_networks_only(self, force_wi_fi_to_allowed_networks_only):
        """Sets the force_wi_fi_to_allowed_networks_only of this AppleRestrictionsPayloadV2Entity_.

        Gets or sets a value indicating whether if set to true, the device can join Wi-Fi networks only if they were set up through a configuration profile on supervised iOS 10.3+.  # noqa: E501

        :param force_wi_fi_to_allowed_networks_only: The force_wi_fi_to_allowed_networks_only of this AppleRestrictionsPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._force_wi_fi_to_allowed_networks_only = force_wi_fi_to_allowed_networks_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleRestrictionsPayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleRestrictionsPayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleRestrictionsPayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
