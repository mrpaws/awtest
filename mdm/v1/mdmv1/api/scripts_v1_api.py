# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class ScriptsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def scripts_v1_create_script_async(self, organization_group_uuid, body, **kwargs):  # noqa: E501
        """New - CreateScriptAsync  # noqa: E501

        Create a script which includes script name, description, platform, script type, execution context, timeout, script data, script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_create_script_async(organization_group_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for the organization group(Required) (required)
        :param CreateScript body: Script request model. Includes script name, description, platform, script type, execution context, timeout, script data, script environment variables.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scripts_v1_create_script_async_with_http_info(organization_group_uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.scripts_v1_create_script_async_with_http_info(organization_group_uuid, body, **kwargs)  # noqa: E501
            return data

    def scripts_v1_create_script_async_with_http_info(self, organization_group_uuid, body, **kwargs):  # noqa: E501
        """New - CreateScriptAsync  # noqa: E501

        Create a script which includes script name, description, platform, script type, execution context, timeout, script data, script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_create_script_async_with_http_info(organization_group_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for the organization group(Required) (required)
        :param CreateScript body: Script request model. Includes script name, description, platform, script type, execution context, timeout, script data, script environment variables.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scripts_v1_create_script_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `scripts_v1_create_script_async`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `scripts_v1_create_script_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/scripts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scripts_v1_get_script_async(self, script_uuid, **kwargs):  # noqa: E501
        """New - GetScriptAsync  # noqa: E501

        Get a script which includes script name, description, display name, action type, category, organization group identifier, platform, script type, execution context, timeout, script data, script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_script_async(script_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :return: ScriptResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scripts_v1_get_script_async_with_http_info(script_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.scripts_v1_get_script_async_with_http_info(script_uuid, **kwargs)  # noqa: E501
            return data

    def scripts_v1_get_script_async_with_http_info(self, script_uuid, **kwargs):  # noqa: E501
        """New - GetScriptAsync  # noqa: E501

        Get a script which includes script name, description, display name, action type, category, organization group identifier, platform, script type, execution context, timeout, script data, script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_script_async_with_http_info(script_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :return: ScriptResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['script_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scripts_v1_get_script_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `scripts_v1_get_script_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scripts/{scriptUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScriptResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scripts_v1_get_script_configuration_async(self, device_uuid, script_uuid, config_bundle_uuid, **kwargs):  # noqa: E501
        """New - GetScriptConfigurationAsync  # noqa: E501

        An API to get configuration information for entitled script resource for the device. Configuration inludes the Trigger type, triggers events, trigger period along with looked up script variables)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_script_configuration_async(device_uuid, script_uuid, config_bundle_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: deviceUuid. (required)
        :param str script_uuid: uuid of the script.(Required) (required)
        :param str config_bundle_uuid: uuid of the configuration bundle.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scripts_v1_get_script_configuration_async_with_http_info(device_uuid, script_uuid, config_bundle_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.scripts_v1_get_script_configuration_async_with_http_info(device_uuid, script_uuid, config_bundle_uuid, **kwargs)  # noqa: E501
            return data

    def scripts_v1_get_script_configuration_async_with_http_info(self, device_uuid, script_uuid, config_bundle_uuid, **kwargs):  # noqa: E501
        """New - GetScriptConfigurationAsync  # noqa: E501

        An API to get configuration information for entitled script resource for the device. Configuration inludes the Trigger type, triggers events, trigger period along with looked up script variables)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_script_configuration_async_with_http_info(device_uuid, script_uuid, config_bundle_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: deviceUuid. (required)
        :param str script_uuid: uuid of the script.(Required) (required)
        :param str config_bundle_uuid: uuid of the configuration bundle.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_uuid', 'script_uuid', 'config_bundle_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scripts_v1_get_script_configuration_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_uuid' is set
        if self.api_client.client_side_validation and ('device_uuid' not in params or
                                                       params['device_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_uuid` when calling `scripts_v1_get_script_configuration_async`")  # noqa: E501
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `scripts_v1_get_script_configuration_async`")  # noqa: E501
        # verify the required parameter 'config_bundle_uuid' is set
        if self.api_client.client_side_validation and ('config_bundle_uuid' not in params or
                                                       params['config_bundle_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `config_bundle_uuid` when calling `scripts_v1_get_script_configuration_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_uuid' in params:
            path_params['deviceUuid'] = params['device_uuid']  # noqa: E501
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501
        if 'config_bundle_uuid' in params:
            path_params['configBundleUuid'] = params['config_bundle_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/{deviceUuid}/scripts/{scriptUuid}/config/{configBundleUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scripts_v1_get_script_definition_async_async(self, device_uuid, script_uuid, **kwargs):  # noqa: E501
        """New - GetScriptDefinitionAsync  # noqa: E501

        Device gateway API to get the Script definitions by device and script uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_script_definition_async_async(device_uuid, script_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: deviceUuid. (required)
        :param str script_uuid: uuid of the script.(Required) (required)
        :return: ScriptDefinitionsResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scripts_v1_get_script_definition_async_async_with_http_info(device_uuid, script_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.scripts_v1_get_script_definition_async_async_with_http_info(device_uuid, script_uuid, **kwargs)  # noqa: E501
            return data

    def scripts_v1_get_script_definition_async_async_with_http_info(self, device_uuid, script_uuid, **kwargs):  # noqa: E501
        """New - GetScriptDefinitionAsync  # noqa: E501

        Device gateway API to get the Script definitions by device and script uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_script_definition_async_async_with_http_info(device_uuid, script_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: deviceUuid. (required)
        :param str script_uuid: uuid of the script.(Required) (required)
        :return: ScriptDefinitionsResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_uuid', 'script_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scripts_v1_get_script_definition_async_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_uuid' is set
        if self.api_client.client_side_validation and ('device_uuid' not in params or
                                                       params['device_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_uuid` when calling `scripts_v1_get_script_definition_async_async`")  # noqa: E501
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `scripts_v1_get_script_definition_async_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_uuid' in params:
            path_params['deviceUuid'] = params['device_uuid']  # noqa: E501
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/{deviceUuid}/scripts/{scriptUuid}/definition', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScriptDefinitionsResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scripts_v1_get_script_samples_async(self, organization_group_uuid, body, **kwargs):  # noqa: E501
        """New - Get script samples.  # noqa: E501

        Get script samples which includes script execution details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_script_samples_async(organization_group_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for the organization group(Required) (required)
        :param ScriptSampleSearchRequestModel body: Script request model. Includes script name, description, platform, script type, execution context, timeout, script data, script environment variables.(Required) (required)
        :return: ScriptSampleSearchResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scripts_v1_get_script_samples_async_with_http_info(organization_group_uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.scripts_v1_get_script_samples_async_with_http_info(organization_group_uuid, body, **kwargs)  # noqa: E501
            return data

    def scripts_v1_get_script_samples_async_with_http_info(self, organization_group_uuid, body, **kwargs):  # noqa: E501
        """New - Get script samples.  # noqa: E501

        Get script samples which includes script execution details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_script_samples_async_with_http_info(organization_group_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for the organization group(Required) (required)
        :param ScriptSampleSearchRequestModel body: Script request model. Includes script name, description, platform, script type, execution context, timeout, script data, script environment variables.(Required) (required)
        :return: ScriptSampleSearchResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scripts_v1_get_script_samples_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `scripts_v1_get_script_samples_async`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `scripts_v1_get_script_samples_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/scripts/samples', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScriptSampleSearchResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scripts_v1_get_scripts_by_device_async(self, device_uuid, **kwargs):  # noqa: E501
        """New - GetScriptsByDeviceAsync  # noqa: E501

        Get the list of scripts which is available on the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_scripts_by_device_async(device_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: Unique identifier for the device.(Required) (required)
        :param str name: Filter records based on the script name. Partial names are accepted.
        :param object script_type: Filter records based on the script type. Accepted values are [POWERSHELL] when platform is [WIN_RT], [BASH] and [PYTHON] when platform is [APPLE_OSX].
        :param object platform: Filter records based on the platform. Default is None. Accepted values are [WIN_RT] and [APPLE_OSX].
        :param str category: Filter records based on the script category.Default is None. Accept values like [IT-UTILITIES] and etc.
        :param int page: Specific page number to get. 0 based index. Default is 0
        :param int page_size: Maximum records per page. Default 500
        :param object orderby: Name of the property used for sorting. Accepted values are [Name], [Platform], [ScriptType], [Category] and [ActionType]
        :param object sort_order: Whether the sort order is ascending or descending for specified orderby. The default property used for sorting is name. Accepted values are [Asc] and [Desc]. Default value is Asc.
        :return: SearchResult11
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scripts_v1_get_scripts_by_device_async_with_http_info(device_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.scripts_v1_get_scripts_by_device_async_with_http_info(device_uuid, **kwargs)  # noqa: E501
            return data

    def scripts_v1_get_scripts_by_device_async_with_http_info(self, device_uuid, **kwargs):  # noqa: E501
        """New - GetScriptsByDeviceAsync  # noqa: E501

        Get the list of scripts which is available on the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_scripts_by_device_async_with_http_info(device_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: Unique identifier for the device.(Required) (required)
        :param str name: Filter records based on the script name. Partial names are accepted.
        :param object script_type: Filter records based on the script type. Accepted values are [POWERSHELL] when platform is [WIN_RT], [BASH] and [PYTHON] when platform is [APPLE_OSX].
        :param object platform: Filter records based on the platform. Default is None. Accepted values are [WIN_RT] and [APPLE_OSX].
        :param str category: Filter records based on the script category.Default is None. Accept values like [IT-UTILITIES] and etc.
        :param int page: Specific page number to get. 0 based index. Default is 0
        :param int page_size: Maximum records per page. Default 500
        :param object orderby: Name of the property used for sorting. Accepted values are [Name], [Platform], [ScriptType], [Category] and [ActionType]
        :param object sort_order: Whether the sort order is ascending or descending for specified orderby. The default property used for sorting is name. Accepted values are [Asc] and [Desc]. Default value is Asc.
        :return: SearchResult11
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_uuid', 'name', 'script_type', 'platform', 'category', 'page', 'page_size', 'orderby', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scripts_v1_get_scripts_by_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_uuid' is set
        if self.api_client.client_side_validation and ('device_uuid' not in params or
                                                       params['device_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_uuid` when calling `scripts_v1_get_scripts_by_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_uuid' in params:
            path_params['deviceUuid'] = params['device_uuid']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'script_type' in params:
            query_params.append(('script_type', params['script_type']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceUuid}/scripts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult11',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scripts_v1_get_scripts_by_organization_group_async(self, organization_group_uuid, expand, **kwargs):  # noqa: E501
        """New - GetScriptsByOrganizationGroupAsync  # noqa: E501

        Returns a list of script(s) with scripts details for the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_scripts_by_organization_group_async(organization_group_uuid, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for the organization group(Required) (required)
        :param bool expand: Flag to specify to get metadata or complete definition of a script(Required) (required)
        :param str name: Filter records based on the script name. Partial names are accepted.
        :param object script_type: Filter records based on the script type. Accepted values are [POWERSHELL] when platform is [WIN_RT], [BASH] and [PYTHON] when platform is [APPLE_OSX].
        :param object platform: Filter records based on the platform. Default is None. Accepted values are [WIN_RT] and [APPLE_OSX].
        :param str category: Filter records based on the script category.Default is None. Accept values like [IT-UTILITIES] and etc.
        :param int page: Specific page number to get. 0 based index. Default is 0
        :param int page_size: Maximum records per page. Default 500
        :param object orderby: Name of the property used for sorting. Accepted values are [Name], [Platform], [ScriptType], [Category] and [ActionType]
        :param object sort_order: Whether the sort order is ascending or descending for specified orderby. The default property used for sorting is name. Accepted values are [Asc] and [Desc]. Default value is Asc.
        :return: SearchResult11
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scripts_v1_get_scripts_by_organization_group_async_with_http_info(organization_group_uuid, expand, **kwargs)  # noqa: E501
        else:
            (data) = self.scripts_v1_get_scripts_by_organization_group_async_with_http_info(organization_group_uuid, expand, **kwargs)  # noqa: E501
            return data

    def scripts_v1_get_scripts_by_organization_group_async_with_http_info(self, organization_group_uuid, expand, **kwargs):  # noqa: E501
        """New - GetScriptsByOrganizationGroupAsync  # noqa: E501

        Returns a list of script(s) with scripts details for the organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_get_scripts_by_organization_group_async_with_http_info(organization_group_uuid, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for the organization group(Required) (required)
        :param bool expand: Flag to specify to get metadata or complete definition of a script(Required) (required)
        :param str name: Filter records based on the script name. Partial names are accepted.
        :param object script_type: Filter records based on the script type. Accepted values are [POWERSHELL] when platform is [WIN_RT], [BASH] and [PYTHON] when platform is [APPLE_OSX].
        :param object platform: Filter records based on the platform. Default is None. Accepted values are [WIN_RT] and [APPLE_OSX].
        :param str category: Filter records based on the script category.Default is None. Accept values like [IT-UTILITIES] and etc.
        :param int page: Specific page number to get. 0 based index. Default is 0
        :param int page_size: Maximum records per page. Default 500
        :param object orderby: Name of the property used for sorting. Accepted values are [Name], [Platform], [ScriptType], [Category] and [ActionType]
        :param object sort_order: Whether the sort order is ascending or descending for specified orderby. The default property used for sorting is name. Accepted values are [Asc] and [Desc]. Default value is Asc.
        :return: SearchResult11
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'expand', 'name', 'script_type', 'platform', 'category', 'page', 'page_size', 'orderby', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scripts_v1_get_scripts_by_organization_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `scripts_v1_get_scripts_by_organization_group_async`")  # noqa: E501
        # verify the required parameter 'expand' is set
        if self.api_client.client_side_validation and ('expand' not in params or
                                                       params['expand'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `expand` when calling `scripts_v1_get_scripts_by_organization_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'script_type' in params:
            query_params.append(('script_type', params['script_type']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/scripts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult11',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scripts_v1_replace_script_definition_async(self, script_uuid, body, **kwargs):  # noqa: E501
        """New - ReplaceScriptDefinitionAsync  # noqa: E501

        Replace the script definition which includes description, display name, action type, category, execution context, timeout, script data, script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_replace_script_definition_async(script_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param UpdateScript body: Script update model. Includes script description, display name, action type, category, execution context, timeout, script data, script environment variables.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scripts_v1_replace_script_definition_async_with_http_info(script_uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.scripts_v1_replace_script_definition_async_with_http_info(script_uuid, body, **kwargs)  # noqa: E501
            return data

    def scripts_v1_replace_script_definition_async_with_http_info(self, script_uuid, body, **kwargs):  # noqa: E501
        """New - ReplaceScriptDefinitionAsync  # noqa: E501

        Replace the script definition which includes description, display name, action type, category, execution context, timeout, script data, script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_replace_script_definition_async_with_http_info(script_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str script_uuid: Uuid of the script.(Required) (required)
        :param UpdateScript body: Script update model. Includes script description, display name, action type, category, execution context, timeout, script data, script environment variables.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['script_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scripts_v1_replace_script_definition_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'script_uuid' is set
        if self.api_client.client_side_validation and ('script_uuid' not in params or
                                                       params['script_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid` when calling `scripts_v1_replace_script_definition_async`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `scripts_v1_replace_script_definition_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'script_uuid' in params:
            path_params['scriptUuid'] = params['script_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scripts/{scriptUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def scripts_v1_script_bulk_delete_async(self, organization_group_uuid, script_uuid_list, **kwargs):  # noqa: E501
        """New - ScriptBulkDelete  # noqa: E501

        This API is used to delete the list of script attribute and attribute details along with the associated assignments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_script_bulk_delete_async(organization_group_uuid, script_uuid_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for the organization group(Required) (required)
        :param list[str] script_uuid_list: (Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.scripts_v1_script_bulk_delete_async_with_http_info(organization_group_uuid, script_uuid_list, **kwargs)  # noqa: E501
        else:
            (data) = self.scripts_v1_script_bulk_delete_async_with_http_info(organization_group_uuid, script_uuid_list, **kwargs)  # noqa: E501
            return data

    def scripts_v1_script_bulk_delete_async_with_http_info(self, organization_group_uuid, script_uuid_list, **kwargs):  # noqa: E501
        """New - ScriptBulkDelete  # noqa: E501

        This API is used to delete the list of script attribute and attribute details along with the associated assignments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.scripts_v1_script_bulk_delete_async_with_http_info(organization_group_uuid, script_uuid_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for the organization group(Required) (required)
        :param list[str] script_uuid_list: (Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'script_uuid_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scripts_v1_script_bulk_delete_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `scripts_v1_script_bulk_delete_async`")  # noqa: E501
        # verify the required parameter 'script_uuid_list' is set
        if self.api_client.client_side_validation and ('script_uuid_list' not in params or
                                                       params['script_uuid_list'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `script_uuid_list` when calling `scripts_v1_script_bulk_delete_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'script_uuid_list' in params:
            body_params = params['script_uuid_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/scripts/bulkdelete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
