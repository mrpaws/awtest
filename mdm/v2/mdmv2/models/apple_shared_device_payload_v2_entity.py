# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleSharedDevicePayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'if_lost_return_to_message': 'str',
        'asset_tag_information': 'str'
    }

    attribute_map = {
        'if_lost_return_to_message': 'IfLostReturnToMessage',
        'asset_tag_information': 'AssetTagInformation'
    }

    def __init__(self, if_lost_return_to_message=None, asset_tag_information=None, _configuration=None):  # noqa: E501
        """AppleSharedDevicePayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._if_lost_return_to_message = None
        self._asset_tag_information = None
        self.discriminator = None

        if if_lost_return_to_message is not None:
            self.if_lost_return_to_message = if_lost_return_to_message
        if asset_tag_information is not None:
            self.asset_tag_information = asset_tag_information

    @property
    def if_lost_return_to_message(self):
        """Gets the if_lost_return_to_message of this AppleSharedDevicePayloadV2Entity.  # noqa: E501

        Gets or sets the text displayed on the login window and lock screen.  # noqa: E501

        :return: The if_lost_return_to_message of this AppleSharedDevicePayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._if_lost_return_to_message

    @if_lost_return_to_message.setter
    def if_lost_return_to_message(self, if_lost_return_to_message):
        """Sets the if_lost_return_to_message of this AppleSharedDevicePayloadV2Entity.

        Gets or sets the text displayed on the login window and lock screen.  # noqa: E501

        :param if_lost_return_to_message: The if_lost_return_to_message of this AppleSharedDevicePayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._if_lost_return_to_message = if_lost_return_to_message

    @property
    def asset_tag_information(self):
        """Gets the asset_tag_information of this AppleSharedDevicePayloadV2Entity.  # noqa: E501

        Gets or sets asset tag information for the device displayed on the login window and lock screen.  # noqa: E501

        :return: The asset_tag_information of this AppleSharedDevicePayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag_information

    @asset_tag_information.setter
    def asset_tag_information(self, asset_tag_information):
        """Sets the asset_tag_information of this AppleSharedDevicePayloadV2Entity.

        Gets or sets asset tag information for the device displayed on the login window and lock screen.  # noqa: E501

        :param asset_tag_information: The asset_tag_information of this AppleSharedDevicePayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._asset_tag_information = asset_tag_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleSharedDevicePayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleSharedDevicePayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleSharedDevicePayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
