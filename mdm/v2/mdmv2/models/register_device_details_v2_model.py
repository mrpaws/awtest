# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class RegisterDeviceDetailsV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_uuid': 'str',
        'friendly_name': 'str',
        'ownership_type': 'str',
        'platform_id': 'int',
        'model_id': 'int',
        'operating_system_id': 'int',
        'device_udid': 'str',
        'serial_number': 'str',
        'imei': 'str',
        'asset_number': 'str',
        'message_template_id': 'int',
        'sim': 'str',
        'to_email_address': 'str',
        'to_phone_number': 'str',
        'is_migration': 'bool',
        'message_type': 'int',
        'tags': 'list[TagV2Model]',
        'custom_attributes': 'list[CustomAttributeNameValueApplicationV2Model]'
    }

    attribute_map = {
        'user_uuid': 'user_uuid',
        'friendly_name': 'friendly_name',
        'ownership_type': 'ownership_type',
        'platform_id': 'platform_id',
        'model_id': 'model_id',
        'operating_system_id': 'operating_system_id',
        'device_udid': 'device_udid',
        'serial_number': 'serial_number',
        'imei': 'imei',
        'asset_number': 'asset_number',
        'message_template_id': 'message_template_id',
        'sim': 'sim',
        'to_email_address': 'to_email_address',
        'to_phone_number': 'to_phone_number',
        'is_migration': 'is_migration',
        'message_type': 'message_type',
        'tags': 'tags',
        'custom_attributes': 'custom_attributes'
    }

    def __init__(self, user_uuid=None, friendly_name=None, ownership_type=None, platform_id=None, model_id=None, operating_system_id=None, device_udid=None, serial_number=None, imei=None, asset_number=None, message_template_id=None, sim=None, to_email_address=None, to_phone_number=None, is_migration=None, message_type=None, tags=None, custom_attributes=None, _configuration=None):  # noqa: E501
        """RegisterDeviceDetailsV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_uuid = None
        self._friendly_name = None
        self._ownership_type = None
        self._platform_id = None
        self._model_id = None
        self._operating_system_id = None
        self._device_udid = None
        self._serial_number = None
        self._imei = None
        self._asset_number = None
        self._message_template_id = None
        self._sim = None
        self._to_email_address = None
        self._to_phone_number = None
        self._is_migration = None
        self._message_type = None
        self._tags = None
        self._custom_attributes = None
        self.discriminator = None

        self.user_uuid = user_uuid
        self.friendly_name = friendly_name
        if ownership_type is not None:
            self.ownership_type = ownership_type
        if platform_id is not None:
            self.platform_id = platform_id
        if model_id is not None:
            self.model_id = model_id
        if operating_system_id is not None:
            self.operating_system_id = operating_system_id
        if device_udid is not None:
            self.device_udid = device_udid
        if serial_number is not None:
            self.serial_number = serial_number
        if imei is not None:
            self.imei = imei
        if asset_number is not None:
            self.asset_number = asset_number
        if message_template_id is not None:
            self.message_template_id = message_template_id
        if sim is not None:
            self.sim = sim
        if to_email_address is not None:
            self.to_email_address = to_email_address
        if to_phone_number is not None:
            self.to_phone_number = to_phone_number
        if is_migration is not None:
            self.is_migration = is_migration
        if message_type is not None:
            self.message_type = message_type
        if tags is not None:
            self.tags = tags
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes

    @property
    def user_uuid(self):
        """Gets the user_uuid of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Enrollment user identifier  # noqa: E501

        :return: The user_uuid of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid):
        """Sets the user_uuid of this RegisterDeviceDetailsV2Model.

        Enrollment user identifier  # noqa: E501

        :param user_uuid: The user_uuid of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_uuid is None:
            raise ValueError("Invalid value for `user_uuid`, must not be `None`")  # noqa: E501

        self._user_uuid = user_uuid

    @property
    def friendly_name(self):
        """Gets the friendly_name of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Device friendly name  # noqa: E501

        :return: The friendly_name of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this RegisterDeviceDetailsV2Model.

        Device friendly name  # noqa: E501

        :param friendly_name: The friendly_name of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and friendly_name is None:
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")  # noqa: E501

        self._friendly_name = friendly_name

    @property
    def ownership_type(self):
        """Gets the ownership_type of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Device ownership type  # noqa: E501

        :return: The ownership_type of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._ownership_type

    @ownership_type.setter
    def ownership_type(self, ownership_type):
        """Sets the ownership_type of this RegisterDeviceDetailsV2Model.

        Device ownership type  # noqa: E501

        :param ownership_type: The ownership_type of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["CORPORATE_DEDICATED", "EMPLOYEE_OWNED", "CORPORATE_SHARED", "NONE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ownership_type not in allowed_values):
            raise ValueError(
                "Invalid value for `ownership_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ownership_type, allowed_values)
            )

        self._ownership_type = ownership_type

    @property
    def platform_id(self):
        """Gets the platform_id of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Device platform identifier  # noqa: E501

        :return: The platform_id of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: int
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id):
        """Sets the platform_id of this RegisterDeviceDetailsV2Model.

        Device platform identifier  # noqa: E501

        :param platform_id: The platform_id of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: int
        """

        self._platform_id = platform_id

    @property
    def model_id(self):
        """Gets the model_id of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Device model identifier  # noqa: E501

        :return: The model_id of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: int
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this RegisterDeviceDetailsV2Model.

        Device model identifier  # noqa: E501

        :param model_id: The model_id of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: int
        """

        self._model_id = model_id

    @property
    def operating_system_id(self):
        """Gets the operating_system_id of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Device operating system identifier  # noqa: E501

        :return: The operating_system_id of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: int
        """
        return self._operating_system_id

    @operating_system_id.setter
    def operating_system_id(self, operating_system_id):
        """Sets the operating_system_id of this RegisterDeviceDetailsV2Model.

        Device operating system identifier  # noqa: E501

        :param operating_system_id: The operating_system_id of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: int
        """

        self._operating_system_id = operating_system_id

    @property
    def device_udid(self):
        """Gets the device_udid of this RegisterDeviceDetailsV2Model.  # noqa: E501

        UDID of the device  # noqa: E501

        :return: The device_udid of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._device_udid

    @device_udid.setter
    def device_udid(self, device_udid):
        """Sets the device_udid of this RegisterDeviceDetailsV2Model.

        UDID of the device  # noqa: E501

        :param device_udid: The device_udid of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """

        self._device_udid = device_udid

    @property
    def serial_number(self):
        """Gets the serial_number of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Device serial number  # noqa: E501

        :return: The serial_number of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this RegisterDeviceDetailsV2Model.

        Device serial number  # noqa: E501

        :param serial_number: The serial_number of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def imei(self):
        """Gets the imei of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Device imei number  # noqa: E501

        :return: The imei of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this RegisterDeviceDetailsV2Model.

        Device imei number  # noqa: E501

        :param imei: The imei of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """

        self._imei = imei

    @property
    def asset_number(self):
        """Gets the asset_number of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Device asset number  # noqa: E501

        :return: The asset_number of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this RegisterDeviceDetailsV2Model.

        Device asset number  # noqa: E501

        :param asset_number: The asset_number of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """

        self._asset_number = asset_number

    @property
    def message_template_id(self):
        """Gets the message_template_id of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Message template identifier  # noqa: E501

        :return: The message_template_id of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: int
        """
        return self._message_template_id

    @message_template_id.setter
    def message_template_id(self, message_template_id):
        """Sets the message_template_id of this RegisterDeviceDetailsV2Model.

        Message template identifier  # noqa: E501

        :param message_template_id: The message_template_id of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: int
        """

        self._message_template_id = message_template_id

    @property
    def sim(self):
        """Gets the sim of this RegisterDeviceDetailsV2Model.  # noqa: E501

        SIM details  # noqa: E501

        :return: The sim of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._sim

    @sim.setter
    def sim(self, sim):
        """Sets the sim of this RegisterDeviceDetailsV2Model.

        SIM details  # noqa: E501

        :param sim: The sim of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """

        self._sim = sim

    @property
    def to_email_address(self):
        """Gets the to_email_address of this RegisterDeviceDetailsV2Model.  # noqa: E501

        User's email address  # noqa: E501

        :return: The to_email_address of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._to_email_address

    @to_email_address.setter
    def to_email_address(self, to_email_address):
        """Sets the to_email_address of this RegisterDeviceDetailsV2Model.

        User's email address  # noqa: E501

        :param to_email_address: The to_email_address of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """

        self._to_email_address = to_email_address

    @property
    def to_phone_number(self):
        """Gets the to_phone_number of this RegisterDeviceDetailsV2Model.  # noqa: E501

        User's phone number  # noqa: E501

        :return: The to_phone_number of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: str
        """
        return self._to_phone_number

    @to_phone_number.setter
    def to_phone_number(self, to_phone_number):
        """Sets the to_phone_number of this RegisterDeviceDetailsV2Model.

        User's phone number  # noqa: E501

        :param to_phone_number: The to_phone_number of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: str
        """

        self._to_phone_number = to_phone_number

    @property
    def is_migration(self):
        """Gets the is_migration of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Value indicating whether this instance is migration  # noqa: E501

        :return: The is_migration of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._is_migration

    @is_migration.setter
    def is_migration(self, is_migration):
        """Sets the is_migration of this RegisterDeviceDetailsV2Model.

        Value indicating whether this instance is migration  # noqa: E501

        :param is_migration: The is_migration of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: bool
        """

        self._is_migration = is_migration

    @property
    def message_type(self):
        """Gets the message_type of this RegisterDeviceDetailsV2Model.  # noqa: E501

        The message type for device enrollment as NONE, EMAIL, SMS, QRCODE  # noqa: E501

        :return: The message_type of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: int
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this RegisterDeviceDetailsV2Model.

        The message type for device enrollment as NONE, EMAIL, SMS, QRCODE  # noqa: E501

        :param message_type: The message_type of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, -1]  # noqa: E501
        if (self._configuration.client_side_validation and
                message_type not in allowed_values):
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def tags(self):
        """Gets the tags of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Tags for the device  # noqa: E501

        :return: The tags of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: list[TagV2Model]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RegisterDeviceDetailsV2Model.

        Tags for the device  # noqa: E501

        :param tags: The tags of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: list[TagV2Model]
        """

        self._tags = tags

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this RegisterDeviceDetailsV2Model.  # noqa: E501

        Custom attributes for the device  # noqa: E501

        :return: The custom_attributes of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :rtype: list[CustomAttributeNameValueApplicationV2Model]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this RegisterDeviceDetailsV2Model.

        Custom attributes for the device  # noqa: E501

        :param custom_attributes: The custom_attributes of this RegisterDeviceDetailsV2Model.  # noqa: E501
        :type: list[CustomAttributeNameValueApplicationV2Model]
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegisterDeviceDetailsV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterDeviceDetailsV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegisterDeviceDetailsV2Model):
            return True

        return self.to_dict() != other.to_dict()
