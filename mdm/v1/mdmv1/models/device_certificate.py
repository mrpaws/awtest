# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_sample_time': 'str',
        'last_sample_time': 'str',
        'is_identity': 'str',
        'device_id': 'EntityReference_',
        'certificate_loaded': 'int',
        'error': 'str',
        'name': 'str',
        'expires_on': 'str',
        'issued_by': 'str',
        'status': 'int',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'first_sample_time': 'FirstSampleTime',
        'last_sample_time': 'LastSampleTime',
        'is_identity': 'IsIdentity',
        'device_id': 'DeviceId',
        'certificate_loaded': 'CertificateLoaded',
        'error': 'Error',
        'name': 'Name',
        'expires_on': 'ExpiresOn',
        'issued_by': 'IssuedBy',
        'status': 'Status',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, first_sample_time=None, last_sample_time=None, is_identity=None, device_id=None, certificate_loaded=None, error=None, name=None, expires_on=None, issued_by=None, status=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceCertificate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._first_sample_time = None
        self._last_sample_time = None
        self._is_identity = None
        self._device_id = None
        self._certificate_loaded = None
        self._error = None
        self._name = None
        self._expires_on = None
        self._issued_by = None
        self._status = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if first_sample_time is not None:
            self.first_sample_time = first_sample_time
        if last_sample_time is not None:
            self.last_sample_time = last_sample_time
        if is_identity is not None:
            self.is_identity = is_identity
        if device_id is not None:
            self.device_id = device_id
        if certificate_loaded is not None:
            self.certificate_loaded = certificate_loaded
        if error is not None:
            self.error = error
        if name is not None:
            self.name = name
        if expires_on is not None:
            self.expires_on = expires_on
        if issued_by is not None:
            self.issued_by = issued_by
        if status is not None:
            self.status = status
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def first_sample_time(self):
        """Gets the first_sample_time of this DeviceCertificate.  # noqa: E501

        Gets or sets dateTime of first time sampling time.  # noqa: E501

        :return: The first_sample_time of this DeviceCertificate.  # noqa: E501
        :rtype: str
        """
        return self._first_sample_time

    @first_sample_time.setter
    def first_sample_time(self, first_sample_time):
        """Sets the first_sample_time of this DeviceCertificate.

        Gets or sets dateTime of first time sampling time.  # noqa: E501

        :param first_sample_time: The first_sample_time of this DeviceCertificate.  # noqa: E501
        :type: str
        """

        self._first_sample_time = first_sample_time

    @property
    def last_sample_time(self):
        """Gets the last_sample_time of this DeviceCertificate.  # noqa: E501

        Gets or sets dateTime of Last sampled time.  # noqa: E501

        :return: The last_sample_time of this DeviceCertificate.  # noqa: E501
        :rtype: str
        """
        return self._last_sample_time

    @last_sample_time.setter
    def last_sample_time(self, last_sample_time):
        """Sets the last_sample_time of this DeviceCertificate.

        Gets or sets dateTime of Last sampled time.  # noqa: E501

        :param last_sample_time: The last_sample_time of this DeviceCertificate.  # noqa: E501
        :type: str
        """

        self._last_sample_time = last_sample_time

    @property
    def is_identity(self):
        """Gets the is_identity of this DeviceCertificate.  # noqa: E501

        Gets or sets indicates if this is an identity certificate or not.  # noqa: E501

        :return: The is_identity of this DeviceCertificate.  # noqa: E501
        :rtype: str
        """
        return self._is_identity

    @is_identity.setter
    def is_identity(self, is_identity):
        """Sets the is_identity of this DeviceCertificate.

        Gets or sets indicates if this is an identity certificate or not.  # noqa: E501

        :param is_identity: The is_identity of this DeviceCertificate.  # noqa: E501
        :type: str
        """

        self._is_identity = is_identity

    @property
    def device_id(self):
        """Gets the device_id of this DeviceCertificate.  # noqa: E501

        Gets or sets the Device where this certificate is bound to.  # noqa: E501

        :return: The device_id of this DeviceCertificate.  # noqa: E501
        :rtype: EntityReference_
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceCertificate.

        Gets or sets the Device where this certificate is bound to.  # noqa: E501

        :param device_id: The device_id of this DeviceCertificate.  # noqa: E501
        :type: EntityReference_
        """

        self._device_id = device_id

    @property
    def certificate_loaded(self):
        """Gets the certificate_loaded of this DeviceCertificate.  # noqa: E501

        Gets or sets this tells whether the certificate is loaded or not.  # noqa: E501

        :return: The certificate_loaded of this DeviceCertificate.  # noqa: E501
        :rtype: int
        """
        return self._certificate_loaded

    @certificate_loaded.setter
    def certificate_loaded(self, certificate_loaded):
        """Sets the certificate_loaded of this DeviceCertificate.

        Gets or sets this tells whether the certificate is loaded or not.  # noqa: E501

        :param certificate_loaded: The certificate_loaded of this DeviceCertificate.  # noqa: E501
        :type: int
        """

        self._certificate_loaded = certificate_loaded

    @property
    def error(self):
        """Gets the error of this DeviceCertificate.  # noqa: E501

        Gets or sets error if any in the certificate.  # noqa: E501

        :return: The error of this DeviceCertificate.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DeviceCertificate.

        Gets or sets error if any in the certificate.  # noqa: E501

        :param error: The error of this DeviceCertificate.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def name(self):
        """Gets the name of this DeviceCertificate.  # noqa: E501

        Gets or sets name of the certificate.  # noqa: E501

        :return: The name of this DeviceCertificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceCertificate.

        Gets or sets name of the certificate.  # noqa: E501

        :param name: The name of this DeviceCertificate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def expires_on(self):
        """Gets the expires_on of this DeviceCertificate.  # noqa: E501

        Gets or sets expires On Date.  # noqa: E501

        :return: The expires_on of this DeviceCertificate.  # noqa: E501
        :rtype: str
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this DeviceCertificate.

        Gets or sets expires On Date.  # noqa: E501

        :param expires_on: The expires_on of this DeviceCertificate.  # noqa: E501
        :type: str
        """

        self._expires_on = expires_on

    @property
    def issued_by(self):
        """Gets the issued_by of this DeviceCertificate.  # noqa: E501

        Gets or sets issuer name of the certificate.  # noqa: E501

        :return: The issued_by of this DeviceCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by):
        """Sets the issued_by of this DeviceCertificate.

        Gets or sets issuer name of the certificate.  # noqa: E501

        :param issued_by: The issued_by of this DeviceCertificate.  # noqa: E501
        :type: str
        """

        self._issued_by = issued_by

    @property
    def status(self):
        """Gets the status of this DeviceCertificate.  # noqa: E501

        Gets or sets status of certificate.  # noqa: E501

        :return: The status of this DeviceCertificate.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceCertificate.

        Gets or sets status of certificate.  # noqa: E501

        :param status: The status of this DeviceCertificate.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def id(self):
        """Gets the id of this DeviceCertificate.  # noqa: E501


        :return: The id of this DeviceCertificate.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceCertificate.


        :param id: The id of this DeviceCertificate.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceCertificate.  # noqa: E501


        :return: The uuid of this DeviceCertificate.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceCertificate.


        :param uuid: The uuid of this DeviceCertificate.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCertificate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCertificate):
            return True

        return self.to_dict() != other.to_dict()
