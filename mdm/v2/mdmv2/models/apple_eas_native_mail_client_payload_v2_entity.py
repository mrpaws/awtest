# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleEASNativeMailClientPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'exchange_active_sync_host': 'str',
        'use_ssl': 'bool',
        'use_smime': 'bool',
        'smime_certificate_name': 'str',
        'smime_encryption_certificate_name': 'str',
        'smime_encryption_enabled': 'bool',
        'smime_signing_enabled': 'bool',
        'domain': 'str',
        'user_name': 'str',
        'email_address': 'str',
        'password': 'str',
        'payload_certificate_name': 'str',
        'past_days_of_mail_to_sync': 'int',
        'prevent_moving_messages': 'bool',
        'prevent_use_in_third_party_apps': 'bool',
        'disable_recent_contact_sync': 'bool',
        'default_calling_app': 'str',
        'smime_signing_user_overrideable': 'bool',
        'smime_signing_certificate_uuid_user_overrideable': 'bool',
        'smime_encrypt_by_default': 'bool',
        'smime_encrypt_by_default_user_overrideable': 'bool',
        'smime_encryption_certificate_uuid_user_overrideable': 'bool',
        'smime_enable_encryption_per_message_switch': 'bool',
        'enable_mail': 'bool',
        'enable_mail_user_overridable': 'bool',
        'enable_contacts': 'bool',
        'enable_contacts_user_overridable': 'bool',
        'enable_calendars': 'bool',
        'enable_calendars_user_overridable': 'bool',
        'enable_notes': 'bool',
        'enable_notes_user_overridable': 'bool',
        'enable_reminders': 'bool',
        'enable_reminders_user_overridable': 'bool',
        'o_auth': 'bool',
        'o_auth_sign_in_url': 'str',
        'o_auth_token_request_url': 'str',
        'override_previous_password': 'bool'
    }

    attribute_map = {
        'account_name': 'AccountName',
        'exchange_active_sync_host': 'ExchangeActiveSyncHost',
        'use_ssl': 'UseSSL',
        'use_smime': 'UseSMIME',
        'smime_certificate_name': 'SMIMECertificateName',
        'smime_encryption_certificate_name': 'SmimeEncryptionCertificateName',
        'smime_encryption_enabled': 'SMIMEEncryptionEnabled',
        'smime_signing_enabled': 'SMIMESigningEnabled',
        'domain': 'Domain',
        'user_name': 'UserName',
        'email_address': 'EmailAddress',
        'password': 'Password',
        'payload_certificate_name': 'PayloadCertificateName',
        'past_days_of_mail_to_sync': 'PastDaysOfMailToSync',
        'prevent_moving_messages': 'PreventMovingMessages',
        'prevent_use_in_third_party_apps': 'PreventUseInThirdPartyApps',
        'disable_recent_contact_sync': 'DisableRecentContactSync',
        'default_calling_app': 'DefaultCallingApp',
        'smime_signing_user_overrideable': 'SMIMESigningUserOverrideable',
        'smime_signing_certificate_uuid_user_overrideable': 'SMIMESigningCertificateUUIDUserOverrideable',
        'smime_encrypt_by_default': 'SMIMEEncryptByDefault',
        'smime_encrypt_by_default_user_overrideable': 'SMIMEEncryptByDefaultUserOverrideable',
        'smime_encryption_certificate_uuid_user_overrideable': 'SMIMEEncryptionCertificateUUIDUserOverrideable',
        'smime_enable_encryption_per_message_switch': 'SMIMEEnableEncryptionPerMessageSwitch',
        'enable_mail': 'EnableMail',
        'enable_mail_user_overridable': 'EnableMailUserOverridable',
        'enable_contacts': 'EnableContacts',
        'enable_contacts_user_overridable': 'EnableContactsUserOverridable',
        'enable_calendars': 'EnableCalendars',
        'enable_calendars_user_overridable': 'EnableCalendarsUserOverridable',
        'enable_notes': 'EnableNotes',
        'enable_notes_user_overridable': 'EnableNotesUserOverridable',
        'enable_reminders': 'EnableReminders',
        'enable_reminders_user_overridable': 'EnableRemindersUserOverridable',
        'o_auth': 'OAuth',
        'o_auth_sign_in_url': 'OAuthSignInURL',
        'o_auth_token_request_url': 'OAuthTokenRequestURL',
        'override_previous_password': 'OverridePreviousPassword'
    }

    def __init__(self, account_name=None, exchange_active_sync_host=None, use_ssl=None, use_smime=None, smime_certificate_name=None, smime_encryption_certificate_name=None, smime_encryption_enabled=None, smime_signing_enabled=None, domain=None, user_name=None, email_address=None, password=None, payload_certificate_name=None, past_days_of_mail_to_sync=None, prevent_moving_messages=None, prevent_use_in_third_party_apps=None, disable_recent_contact_sync=None, default_calling_app=None, smime_signing_user_overrideable=None, smime_signing_certificate_uuid_user_overrideable=None, smime_encrypt_by_default=None, smime_encrypt_by_default_user_overrideable=None, smime_encryption_certificate_uuid_user_overrideable=None, smime_enable_encryption_per_message_switch=None, enable_mail=None, enable_mail_user_overridable=None, enable_contacts=None, enable_contacts_user_overridable=None, enable_calendars=None, enable_calendars_user_overridable=None, enable_notes=None, enable_notes_user_overridable=None, enable_reminders=None, enable_reminders_user_overridable=None, o_auth=None, o_auth_sign_in_url=None, o_auth_token_request_url=None, override_previous_password=None, _configuration=None):  # noqa: E501
        """AppleEASNativeMailClientPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_name = None
        self._exchange_active_sync_host = None
        self._use_ssl = None
        self._use_smime = None
        self._smime_certificate_name = None
        self._smime_encryption_certificate_name = None
        self._smime_encryption_enabled = None
        self._smime_signing_enabled = None
        self._domain = None
        self._user_name = None
        self._email_address = None
        self._password = None
        self._payload_certificate_name = None
        self._past_days_of_mail_to_sync = None
        self._prevent_moving_messages = None
        self._prevent_use_in_third_party_apps = None
        self._disable_recent_contact_sync = None
        self._default_calling_app = None
        self._smime_signing_user_overrideable = None
        self._smime_signing_certificate_uuid_user_overrideable = None
        self._smime_encrypt_by_default = None
        self._smime_encrypt_by_default_user_overrideable = None
        self._smime_encryption_certificate_uuid_user_overrideable = None
        self._smime_enable_encryption_per_message_switch = None
        self._enable_mail = None
        self._enable_mail_user_overridable = None
        self._enable_contacts = None
        self._enable_contacts_user_overridable = None
        self._enable_calendars = None
        self._enable_calendars_user_overridable = None
        self._enable_notes = None
        self._enable_notes_user_overridable = None
        self._enable_reminders = None
        self._enable_reminders_user_overridable = None
        self._o_auth = None
        self._o_auth_sign_in_url = None
        self._o_auth_token_request_url = None
        self._override_previous_password = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if exchange_active_sync_host is not None:
            self.exchange_active_sync_host = exchange_active_sync_host
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if use_smime is not None:
            self.use_smime = use_smime
        if smime_certificate_name is not None:
            self.smime_certificate_name = smime_certificate_name
        if smime_encryption_certificate_name is not None:
            self.smime_encryption_certificate_name = smime_encryption_certificate_name
        if smime_encryption_enabled is not None:
            self.smime_encryption_enabled = smime_encryption_enabled
        if smime_signing_enabled is not None:
            self.smime_signing_enabled = smime_signing_enabled
        if domain is not None:
            self.domain = domain
        if user_name is not None:
            self.user_name = user_name
        if email_address is not None:
            self.email_address = email_address
        if password is not None:
            self.password = password
        if payload_certificate_name is not None:
            self.payload_certificate_name = payload_certificate_name
        if past_days_of_mail_to_sync is not None:
            self.past_days_of_mail_to_sync = past_days_of_mail_to_sync
        if prevent_moving_messages is not None:
            self.prevent_moving_messages = prevent_moving_messages
        if prevent_use_in_third_party_apps is not None:
            self.prevent_use_in_third_party_apps = prevent_use_in_third_party_apps
        if disable_recent_contact_sync is not None:
            self.disable_recent_contact_sync = disable_recent_contact_sync
        if default_calling_app is not None:
            self.default_calling_app = default_calling_app
        if smime_signing_user_overrideable is not None:
            self.smime_signing_user_overrideable = smime_signing_user_overrideable
        if smime_signing_certificate_uuid_user_overrideable is not None:
            self.smime_signing_certificate_uuid_user_overrideable = smime_signing_certificate_uuid_user_overrideable
        if smime_encrypt_by_default is not None:
            self.smime_encrypt_by_default = smime_encrypt_by_default
        if smime_encrypt_by_default_user_overrideable is not None:
            self.smime_encrypt_by_default_user_overrideable = smime_encrypt_by_default_user_overrideable
        if smime_encryption_certificate_uuid_user_overrideable is not None:
            self.smime_encryption_certificate_uuid_user_overrideable = smime_encryption_certificate_uuid_user_overrideable
        if smime_enable_encryption_per_message_switch is not None:
            self.smime_enable_encryption_per_message_switch = smime_enable_encryption_per_message_switch
        if enable_mail is not None:
            self.enable_mail = enable_mail
        if enable_mail_user_overridable is not None:
            self.enable_mail_user_overridable = enable_mail_user_overridable
        if enable_contacts is not None:
            self.enable_contacts = enable_contacts
        if enable_contacts_user_overridable is not None:
            self.enable_contacts_user_overridable = enable_contacts_user_overridable
        if enable_calendars is not None:
            self.enable_calendars = enable_calendars
        if enable_calendars_user_overridable is not None:
            self.enable_calendars_user_overridable = enable_calendars_user_overridable
        if enable_notes is not None:
            self.enable_notes = enable_notes
        if enable_notes_user_overridable is not None:
            self.enable_notes_user_overridable = enable_notes_user_overridable
        if enable_reminders is not None:
            self.enable_reminders = enable_reminders
        if enable_reminders_user_overridable is not None:
            self.enable_reminders_user_overridable = enable_reminders_user_overridable
        if o_auth is not None:
            self.o_auth = o_auth
        if o_auth_sign_in_url is not None:
            self.o_auth_sign_in_url = o_auth_sign_in_url
        if o_auth_token_request_url is not None:
            self.o_auth_token_request_url = o_auth_token_request_url
        if override_previous_password is not None:
            self.override_previous_password = override_previous_password

    @property
    def account_name(self):
        """Gets the account_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets name of the account.  # noqa: E501

        :return: The account_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets name of the account.  # noqa: E501

        :param account_name: The account_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def exchange_active_sync_host(self):
        """Gets the exchange_active_sync_host of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets specifies the Exchange server host name(or IP address).  # noqa: E501

        :return: The exchange_active_sync_host of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._exchange_active_sync_host

    @exchange_active_sync_host.setter
    def exchange_active_sync_host(self, exchange_active_sync_host):
        """Sets the exchange_active_sync_host of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets specifies the Exchange server host name(or IP address).  # noqa: E501

        :param exchange_active_sync_host: The exchange_active_sync_host of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._exchange_active_sync_host = exchange_active_sync_host

    @property
    def use_ssl(self):
        """Gets the use_ssl of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether specifies if all communication occurs through the secure socket layer.  # noqa: E501

        :return: The use_ssl of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether specifies if all communication occurs through the secure socket layer.  # noqa: E501

        :param use_ssl: The use_ssl of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def use_smime(self):
        """Gets the use_smime of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether specifies whether the user's S/MIME certificates would be stored to be used with S/MIME enabled profiles on iOS 5.0 through iOS 9.3.3.  # noqa: E501

        :return: The use_smime of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_smime

    @use_smime.setter
    def use_smime(self, use_smime):
        """Sets the use_smime of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether specifies whether the user's S/MIME certificates would be stored to be used with S/MIME enabled profiles on iOS 5.0 through iOS 9.3.3.  # noqa: E501

        :param use_smime: The use_smime of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_smime = use_smime

    @property
    def smime_certificate_name(self):
        """Gets the smime_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets s/MIME Certificate used to sign messages sent from this account.  # noqa: E501

        :return: The smime_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._smime_certificate_name

    @smime_certificate_name.setter
    def smime_certificate_name(self, smime_certificate_name):
        """Sets the smime_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets s/MIME Certificate used to sign messages sent from this account.  # noqa: E501

        :param smime_certificate_name: The smime_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._smime_certificate_name = smime_certificate_name

    @property
    def smime_encryption_certificate_name(self):
        """Gets the smime_encryption_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets s/MIME Certificate used to decrypt messages sent to this account.  # noqa: E501

        :return: The smime_encryption_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._smime_encryption_certificate_name

    @smime_encryption_certificate_name.setter
    def smime_encryption_certificate_name(self, smime_encryption_certificate_name):
        """Sets the smime_encryption_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets s/MIME Certificate used to decrypt messages sent to this account.  # noqa: E501

        :param smime_encryption_certificate_name: The smime_encryption_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._smime_encryption_certificate_name = smime_encryption_certificate_name

    @property
    def smime_encryption_enabled(self):
        """Gets the smime_encryption_enabled of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, S/MIME encryption is on by default for this account on iOS 10.3+.  # noqa: E501

        :return: The smime_encryption_enabled of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_encryption_enabled

    @smime_encryption_enabled.setter
    def smime_encryption_enabled(self, smime_encryption_enabled):
        """Sets the smime_encryption_enabled of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, S/MIME encryption is on by default for this account on iOS 10.3+.  # noqa: E501

        :param smime_encryption_enabled: The smime_encryption_enabled of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_encryption_enabled = smime_encryption_enabled

    @property
    def smime_signing_enabled(self):
        """Gets the smime_signing_enabled of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, S/MIME signing is enabled for this account on iOS 10.3+.  # noqa: E501

        :return: The smime_signing_enabled of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_signing_enabled

    @smime_signing_enabled.setter
    def smime_signing_enabled(self, smime_signing_enabled):
        """Sets the smime_signing_enabled of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, S/MIME signing is enabled for this account on iOS 10.3+.  # noqa: E501

        :param smime_signing_enabled: The smime_signing_enabled of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_signing_enabled = smime_signing_enabled

    @property
    def domain(self):
        """Gets the domain of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets user's email domain.  # noqa: E501

        :return: The domain of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets user's email domain.  # noqa: E501

        :param domain: The domain of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def user_name(self):
        """Gets the user_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets username for the account.  # noqa: E501

        :return: The user_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets username for the account.  # noqa: E501

        :param user_name: The user_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def email_address(self):
        """Gets the email_address of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets user's email address.  # noqa: E501

        :return: The email_address of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets user's email address.  # noqa: E501

        :param email_address: The email_address of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def password(self):
        """Gets the password of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets email account's password.  # noqa: E501

        :return: The password of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets email account's password.  # noqa: E501

        :param password: The password of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def payload_certificate_name(self):
        """Gets the payload_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets name of the Payload certificate.  # noqa: E501

        :return: The payload_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._payload_certificate_name

    @payload_certificate_name.setter
    def payload_certificate_name(self, payload_certificate_name):
        """Sets the payload_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets name of the Payload certificate.  # noqa: E501

        :param payload_certificate_name: The payload_certificate_name of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._payload_certificate_name = payload_certificate_name

    @property
    def past_days_of_mail_to_sync(self):
        """Gets the past_days_of_mail_to_sync of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets the number of days since synchronization.  # noqa: E501

        :return: The past_days_of_mail_to_sync of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._past_days_of_mail_to_sync

    @past_days_of_mail_to_sync.setter
    def past_days_of_mail_to_sync(self, past_days_of_mail_to_sync):
        """Sets the past_days_of_mail_to_sync of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets the number of days since synchronization.  # noqa: E501

        :param past_days_of_mail_to_sync: The past_days_of_mail_to_sync of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._past_days_of_mail_to_sync = past_days_of_mail_to_sync

    @property
    def prevent_moving_messages(self):
        """Gets the prevent_moving_messages of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, messages may not be moved out of this email account into another account. Also prevents forwarding or replying from a different account than the message was originated from on iOS 5+.  # noqa: E501

        :return: The prevent_moving_messages of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_moving_messages

    @prevent_moving_messages.setter
    def prevent_moving_messages(self, prevent_moving_messages):
        """Sets the prevent_moving_messages of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if true, messages may not be moved out of this email account into another account. Also prevents forwarding or replying from a different account than the message was originated from on iOS 5+.  # noqa: E501

        :param prevent_moving_messages: The prevent_moving_messages of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._prevent_moving_messages = prevent_moving_messages

    @property
    def prevent_use_in_third_party_apps(self):
        """Gets the prevent_use_in_third_party_apps of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, this account is not available for sending mail in any app other than the Apple Mail app.  # noqa: E501

        :return: The prevent_use_in_third_party_apps of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_use_in_third_party_apps

    @prevent_use_in_third_party_apps.setter
    def prevent_use_in_third_party_apps(self, prevent_use_in_third_party_apps):
        """Sets the prevent_use_in_third_party_apps of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if true, this account is not available for sending mail in any app other than the Apple Mail app.  # noqa: E501

        :param prevent_use_in_third_party_apps: The prevent_use_in_third_party_apps of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._prevent_use_in_third_party_apps = prevent_use_in_third_party_apps

    @property
    def disable_recent_contact_sync(self):
        """Gets the disable_recent_contact_sync of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if true, this account is excluded from address Recents syncing on iOS 6+.  # noqa: E501

        :return: The disable_recent_contact_sync of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._disable_recent_contact_sync

    @disable_recent_contact_sync.setter
    def disable_recent_contact_sync(self, disable_recent_contact_sync):
        """Sets the disable_recent_contact_sync of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if true, this account is excluded from address Recents syncing on iOS 6+.  # noqa: E501

        :param disable_recent_contact_sync: The disable_recent_contact_sync of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._disable_recent_contact_sync = disable_recent_contact_sync

    @property
    def default_calling_app(self):
        """Gets the default_calling_app of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets the audio call app that your Native EAS account will use to make calls when you select a phone number in an email message on iOS 10+.  # noqa: E501

        :return: The default_calling_app of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._default_calling_app

    @default_calling_app.setter
    def default_calling_app(self, default_calling_app):
        """Sets the default_calling_app of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets the audio call app that your Native EAS account will use to make calls when you select a phone number in an email message on iOS 10+.  # noqa: E501

        :param default_calling_app: The default_calling_app of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._default_calling_app = default_calling_app

    @property
    def smime_signing_user_overrideable(self):
        """Gets the smime_signing_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will allow users to toggle S/MIME signing in device email settings.  # noqa: E501

        :return: The smime_signing_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_signing_user_overrideable

    @smime_signing_user_overrideable.setter
    def smime_signing_user_overrideable(self, smime_signing_user_overrideable):
        """Sets the smime_signing_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will allow users to toggle S/MIME signing in device email settings.  # noqa: E501

        :param smime_signing_user_overrideable: The smime_signing_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_signing_user_overrideable = smime_signing_user_overrideable

    @property
    def smime_signing_certificate_uuid_user_overrideable(self):
        """Gets the smime_signing_certificate_uuid_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will allow user to choose S/MIME signing certificate on iOS 12.  # noqa: E501

        :return: The smime_signing_certificate_uuid_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_signing_certificate_uuid_user_overrideable

    @smime_signing_certificate_uuid_user_overrideable.setter
    def smime_signing_certificate_uuid_user_overrideable(self, smime_signing_certificate_uuid_user_overrideable):
        """Sets the smime_signing_certificate_uuid_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will allow user to choose S/MIME signing certificate on iOS 12.  # noqa: E501

        :param smime_signing_certificate_uuid_user_overrideable: The smime_signing_certificate_uuid_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_signing_certificate_uuid_user_overrideable = smime_signing_certificate_uuid_user_overrideable

    @property
    def smime_encrypt_by_default(self):
        """Gets the smime_encrypt_by_default of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will encrypt by default when S/MIME encryption is enabled for iOS 12.  # noqa: E501

        :return: The smime_encrypt_by_default of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_encrypt_by_default

    @smime_encrypt_by_default.setter
    def smime_encrypt_by_default(self, smime_encrypt_by_default):
        """Sets the smime_encrypt_by_default of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will encrypt by default when S/MIME encryption is enabled for iOS 12.  # noqa: E501

        :param smime_encrypt_by_default: The smime_encrypt_by_default of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_encrypt_by_default = smime_encrypt_by_default

    @property
    def smime_encrypt_by_default_user_overrideable(self):
        """Gets the smime_encrypt_by_default_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will allow user to toggle S/MIME encryption on iOS 12.  # noqa: E501

        :return: The smime_encrypt_by_default_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_encrypt_by_default_user_overrideable

    @smime_encrypt_by_default_user_overrideable.setter
    def smime_encrypt_by_default_user_overrideable(self, smime_encrypt_by_default_user_overrideable):
        """Sets the smime_encrypt_by_default_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will allow user to toggle S/MIME encryption on iOS 12.  # noqa: E501

        :param smime_encrypt_by_default_user_overrideable: The smime_encrypt_by_default_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_encrypt_by_default_user_overrideable = smime_encrypt_by_default_user_overrideable

    @property
    def smime_encryption_certificate_uuid_user_overrideable(self):
        """Gets the smime_encryption_certificate_uuid_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will allow user to choose S/MIME encryption certificate on iOS 12.  # noqa: E501

        :return: The smime_encryption_certificate_uuid_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_encryption_certificate_uuid_user_overrideable

    @smime_encryption_certificate_uuid_user_overrideable.setter
    def smime_encryption_certificate_uuid_user_overrideable(self, smime_encryption_certificate_uuid_user_overrideable):
        """Sets the smime_encryption_certificate_uuid_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will allow user to choose S/MIME encryption certificate on iOS 12.  # noqa: E501

        :param smime_encryption_certificate_uuid_user_overrideable: The smime_encryption_certificate_uuid_user_overrideable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_encryption_certificate_uuid_user_overrideable = smime_encryption_certificate_uuid_user_overrideable

    @property
    def smime_enable_encryption_per_message_switch(self):
        """Gets the smime_enable_encryption_per_message_switch of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether if set to true, this setting will enable S/MIME encryption on per-message switch on iOS 12.  # noqa: E501

        :return: The smime_enable_encryption_per_message_switch of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._smime_enable_encryption_per_message_switch

    @smime_enable_encryption_per_message_switch.setter
    def smime_enable_encryption_per_message_switch(self, smime_enable_encryption_per_message_switch):
        """Sets the smime_enable_encryption_per_message_switch of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether if set to true, this setting will enable S/MIME encryption on per-message switch on iOS 12.  # noqa: E501

        :param smime_enable_encryption_per_message_switch: The smime_enable_encryption_per_message_switch of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._smime_enable_encryption_per_message_switch = smime_enable_encryption_per_message_switch

    @property
    def enable_mail(self):
        """Gets the enable_mail of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Mail service for this account is enabled.  # noqa: E501

        :return: The enable_mail of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_mail

    @enable_mail.setter
    def enable_mail(self, enable_mail):
        """Sets the enable_mail of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Mail service for this account is enabled.  # noqa: E501

        :param enable_mail: The enable_mail of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_mail = enable_mail

    @property
    def enable_mail_user_overridable(self):
        """Gets the enable_mail_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Mail service for this account in Settings.  # noqa: E501

        :return: The enable_mail_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_mail_user_overridable

    @enable_mail_user_overridable.setter
    def enable_mail_user_overridable(self, enable_mail_user_overridable):
        """Sets the enable_mail_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Mail service for this account in Settings.  # noqa: E501

        :param enable_mail_user_overridable: The enable_mail_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_mail_user_overridable = enable_mail_user_overridable

    @property
    def enable_contacts(self):
        """Gets the enable_contacts of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Contacts service for this account is enabled.  # noqa: E501

        :return: The enable_contacts of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_contacts

    @enable_contacts.setter
    def enable_contacts(self, enable_contacts):
        """Sets the enable_contacts of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Contacts service for this account is enabled.  # noqa: E501

        :param enable_contacts: The enable_contacts of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_contacts = enable_contacts

    @property
    def enable_contacts_user_overridable(self):
        """Gets the enable_contacts_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Contacts service for this account in Settings.  # noqa: E501

        :return: The enable_contacts_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_contacts_user_overridable

    @enable_contacts_user_overridable.setter
    def enable_contacts_user_overridable(self, enable_contacts_user_overridable):
        """Sets the enable_contacts_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Contacts service for this account in Settings.  # noqa: E501

        :param enable_contacts_user_overridable: The enable_contacts_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_contacts_user_overridable = enable_contacts_user_overridable

    @property
    def enable_calendars(self):
        """Gets the enable_calendars of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Calendars service for this account is enabled.  # noqa: E501

        :return: The enable_calendars of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_calendars

    @enable_calendars.setter
    def enable_calendars(self, enable_calendars):
        """Sets the enable_calendars of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Calendars service for this account is enabled.  # noqa: E501

        :param enable_calendars: The enable_calendars of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_calendars = enable_calendars

    @property
    def enable_calendars_user_overridable(self):
        """Gets the enable_calendars_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Calendars service for this account in Settings.  # noqa: E501

        :return: The enable_calendars_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_calendars_user_overridable

    @enable_calendars_user_overridable.setter
    def enable_calendars_user_overridable(self, enable_calendars_user_overridable):
        """Sets the enable_calendars_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Calendars service for this account in Settings.  # noqa: E501

        :param enable_calendars_user_overridable: The enable_calendars_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_calendars_user_overridable = enable_calendars_user_overridable

    @property
    def enable_notes(self):
        """Gets the enable_notes of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Notes service for this account is enabled.  # noqa: E501

        :return: The enable_notes of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_notes

    @enable_notes.setter
    def enable_notes(self, enable_notes):
        """Sets the enable_notes of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Notes service for this account is enabled.  # noqa: E501

        :param enable_notes: The enable_notes of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_notes = enable_notes

    @property
    def enable_notes_user_overridable(self):
        """Gets the enable_notes_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Notes service for this account in Settings.  # noqa: E501

        :return: The enable_notes_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_notes_user_overridable

    @enable_notes_user_overridable.setter
    def enable_notes_user_overridable(self, enable_notes_user_overridable):
        """Sets the enable_notes_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Notes service for this account in Settings.  # noqa: E501

        :param enable_notes_user_overridable: The enable_notes_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_notes_user_overridable = enable_notes_user_overridable

    @property
    def enable_reminders(self):
        """Gets the enable_reminders of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Reminders service for this account is enabled.  # noqa: E501

        :return: The enable_reminders of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_reminders

    @enable_reminders.setter
    def enable_reminders(self, enable_reminders):
        """Sets the enable_reminders of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether the Reminders service for this account is enabled.  # noqa: E501

        :param enable_reminders: The enable_reminders of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_reminders = enable_reminders

    @property
    def enable_reminders_user_overridable(self):
        """Gets the enable_reminders_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Reminders service for this account in Settings.  # noqa: E501

        :return: The enable_reminders_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_reminders_user_overridable

    @enable_reminders_user_overridable.setter
    def enable_reminders_user_overridable(self, enable_reminders_user_overridable):
        """Sets the enable_reminders_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether to prevent the user from changing the state of the Reminders service for this account in Settings.  # noqa: E501

        :param enable_reminders_user_overridable: The enable_reminders_user_overridable of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_reminders_user_overridable = enable_reminders_user_overridable

    @property
    def o_auth(self):
        """Gets the o_auth of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether to use OAuth for exchange or not.  # noqa: E501

        :return: The o_auth of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._o_auth

    @o_auth.setter
    def o_auth(self, o_auth):
        """Sets the o_auth of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether to use OAuth for exchange or not.  # noqa: E501

        :param o_auth: The o_auth of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._o_auth = o_auth

    @property
    def o_auth_sign_in_url(self):
        """Gets the o_auth_sign_in_url of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value for the URL that this account should use for signing in via OAuth. When this URL is specified, auto-discovery is not used for this account so you must also specify a host.  # noqa: E501

        :return: The o_auth_sign_in_url of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._o_auth_sign_in_url

    @o_auth_sign_in_url.setter
    def o_auth_sign_in_url(self, o_auth_sign_in_url):
        """Sets the o_auth_sign_in_url of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value for the URL that this account should use for signing in via OAuth. When this URL is specified, auto-discovery is not used for this account so you must also specify a host.  # noqa: E501

        :param o_auth_sign_in_url: The o_auth_sign_in_url of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._o_auth_sign_in_url = o_auth_sign_in_url

    @property
    def o_auth_token_request_url(self):
        """Gets the o_auth_token_request_url of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value for the URL that this account should use for token requests via OAuth.  # noqa: E501

        :return: The o_auth_token_request_url of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._o_auth_token_request_url

    @o_auth_token_request_url.setter
    def o_auth_token_request_url(self, o_auth_token_request_url):
        """Sets the o_auth_token_request_url of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value for the URL that this account should use for token requests via OAuth.  # noqa: E501

        :param o_auth_token_request_url: The o_auth_token_request_url of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._o_auth_token_request_url = o_auth_token_request_url

    @property
    def override_previous_password(self):
        """Gets the override_previous_password of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether gets or sets a value which indicates whether overrides the previous user/EAS password with the new EAS password in the payload.  # noqa: E501

        :return: The override_previous_password of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._override_previous_password

    @override_previous_password.setter
    def override_previous_password(self, override_previous_password):
        """Sets the override_previous_password of this AppleEASNativeMailClientPayloadV2Entity.

        Gets or sets a value indicating whether gets or sets a value which indicates whether overrides the previous user/EAS password with the new EAS password in the payload.  # noqa: E501

        :param override_previous_password: The override_previous_password of this AppleEASNativeMailClientPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._override_previous_password = override_previous_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleEASNativeMailClientPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleEASNativeMailClientPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleEASNativeMailClientPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
