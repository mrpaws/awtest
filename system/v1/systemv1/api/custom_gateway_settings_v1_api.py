# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class CustomGatewaySettingsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def custom_gateway_settings_v1_edit_custom_gateway_settings(self, configuration_uuid, module_name, custom_gateway_setting, **kwargs):  # noqa: E501
        """New - Bulk Add or update or Delete  Custom Gateway Settings  # noqa: E501

        Bulk Add or update or Delete a set of Custom Gateway Settings linked to configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_gateway_settings_v1_edit_custom_gateway_settings(configuration_uuid, module_name, custom_gateway_setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration_uuid: configuration id(Required) (required)
        :param str module_name: module name ContentGateWay,Tunnel or MEM(Required) (required)
        :param list[CustomGatewaySettingV1] custom_gateway_setting: Custom Gateway Setting to be added(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.custom_gateway_settings_v1_edit_custom_gateway_settings_with_http_info(configuration_uuid, module_name, custom_gateway_setting, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_gateway_settings_v1_edit_custom_gateway_settings_with_http_info(configuration_uuid, module_name, custom_gateway_setting, **kwargs)  # noqa: E501
            return data

    def custom_gateway_settings_v1_edit_custom_gateway_settings_with_http_info(self, configuration_uuid, module_name, custom_gateway_setting, **kwargs):  # noqa: E501
        """New - Bulk Add or update or Delete  Custom Gateway Settings  # noqa: E501

        Bulk Add or update or Delete a set of Custom Gateway Settings linked to configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_gateway_settings_v1_edit_custom_gateway_settings_with_http_info(configuration_uuid, module_name, custom_gateway_setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration_uuid: configuration id(Required) (required)
        :param str module_name: module name ContentGateWay,Tunnel or MEM(Required) (required)
        :param list[CustomGatewaySettingV1] custom_gateway_setting: Custom Gateway Setting to be added(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configuration_uuid', 'module_name', 'custom_gateway_setting']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_gateway_settings_v1_edit_custom_gateway_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configuration_uuid' is set
        if self.api_client.client_side_validation and ('configuration_uuid' not in params or
                                                       params['configuration_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `configuration_uuid` when calling `custom_gateway_settings_v1_edit_custom_gateway_settings`")  # noqa: E501
        # verify the required parameter 'module_name' is set
        if self.api_client.client_side_validation and ('module_name' not in params or
                                                       params['module_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `module_name` when calling `custom_gateway_settings_v1_edit_custom_gateway_settings`")  # noqa: E501
        # verify the required parameter 'custom_gateway_setting' is set
        if self.api_client.client_side_validation and ('custom_gateway_setting' not in params or
                                                       params['custom_gateway_setting'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_gateway_setting` when calling `custom_gateway_settings_v1_edit_custom_gateway_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configuration_uuid' in params:
            path_params['configurationUuid'] = params['configuration_uuid']  # noqa: E501
        if 'module_name' in params:
            path_params['moduleName'] = params['module_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_gateway_setting' in params:
            body_params = params['custom_gateway_setting']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/custom-gateway-settings/{moduleName}/configuration/{configurationUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_gateway_settings_v1_get_custom_gateway_setting_key_details(self, key_uuid, **kwargs):  # noqa: E501
        """New - Gets Details of a Key  # noqa: E501

        Custom Gateway Setting keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_gateway_settings_v1_get_custom_gateway_setting_key_details(key_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_uuid: Custom Gateway Settings Key Guid(Required) (required)
        :return: CustomGatewaySettingKeyV1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.custom_gateway_settings_v1_get_custom_gateway_setting_key_details_with_http_info(key_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_gateway_settings_v1_get_custom_gateway_setting_key_details_with_http_info(key_uuid, **kwargs)  # noqa: E501
            return data

    def custom_gateway_settings_v1_get_custom_gateway_setting_key_details_with_http_info(self, key_uuid, **kwargs):  # noqa: E501
        """New - Gets Details of a Key  # noqa: E501

        Custom Gateway Setting keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_gateway_settings_v1_get_custom_gateway_setting_key_details_with_http_info(key_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_uuid: Custom Gateway Settings Key Guid(Required) (required)
        :return: CustomGatewaySettingKeyV1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_gateway_settings_v1_get_custom_gateway_setting_key_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key_uuid' is set
        if self.api_client.client_side_validation and ('key_uuid' not in params or
                                                       params['key_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `key_uuid` when calling `custom_gateway_settings_v1_get_custom_gateway_setting_key_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key_uuid' in params:
            path_params['keyUuid'] = params['key_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/custom-gateway-settings/keys/{keyUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomGatewaySettingKeyV1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_gateway_settings_v1_get_custom_gateway_setting_keys(self, module_name, **kwargs):  # noqa: E501
        """New - Gets All the predefined keys for the module with its validation details  # noqa: E501

        Custom Gateway Setting keys and its validation details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_gateway_settings_v1_get_custom_gateway_setting_keys(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: module name ContentGateWay,Tunnel or MEM(Required) (required)
        :return: list[CustomGatewaySettingKeyV1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.custom_gateway_settings_v1_get_custom_gateway_setting_keys_with_http_info(module_name, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_gateway_settings_v1_get_custom_gateway_setting_keys_with_http_info(module_name, **kwargs)  # noqa: E501
            return data

    def custom_gateway_settings_v1_get_custom_gateway_setting_keys_with_http_info(self, module_name, **kwargs):  # noqa: E501
        """New - Gets All the predefined keys for the module with its validation details  # noqa: E501

        Custom Gateway Setting keys and its validation details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_gateway_settings_v1_get_custom_gateway_setting_keys_with_http_info(module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str module_name: module name ContentGateWay,Tunnel or MEM(Required) (required)
        :return: list[CustomGatewaySettingKeyV1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['module_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_gateway_settings_v1_get_custom_gateway_setting_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'module_name' is set
        if self.api_client.client_side_validation and ('module_name' not in params or
                                                       params['module_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `module_name` when calling `custom_gateway_settings_v1_get_custom_gateway_setting_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'module_name' in params:
            path_params['moduleName'] = params['module_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/custom-gateway-settings/{moduleName}/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomGatewaySettingKeyV1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def custom_gateway_settings_v1_get_custom_gateway_settings(self, configuration_uuid, module_name, **kwargs):  # noqa: E501
        """New - Gets the Custom Gateway Settings for ContentGateway,Tunnel and MEM  # noqa: E501

        Custom Gateway Settings needed for interacting with ContentGateway,Tunnel and MEM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_gateway_settings_v1_get_custom_gateway_settings(configuration_uuid, module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration_uuid: configuration id of ContentGateway, Tunnel and MEM(Required) (required)
        :param str module_name: module name ContentGateway, Tunnel and MEM(Required) (required)
        :return: list[CustomGatewaySettingV1]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.custom_gateway_settings_v1_get_custom_gateway_settings_with_http_info(configuration_uuid, module_name, **kwargs)  # noqa: E501
        else:
            (data) = self.custom_gateway_settings_v1_get_custom_gateway_settings_with_http_info(configuration_uuid, module_name, **kwargs)  # noqa: E501
            return data

    def custom_gateway_settings_v1_get_custom_gateway_settings_with_http_info(self, configuration_uuid, module_name, **kwargs):  # noqa: E501
        """New - Gets the Custom Gateway Settings for ContentGateway,Tunnel and MEM  # noqa: E501

        Custom Gateway Settings needed for interacting with ContentGateway,Tunnel and MEM  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.custom_gateway_settings_v1_get_custom_gateway_settings_with_http_info(configuration_uuid, module_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration_uuid: configuration id of ContentGateway, Tunnel and MEM(Required) (required)
        :param str module_name: module name ContentGateway, Tunnel and MEM(Required) (required)
        :return: list[CustomGatewaySettingV1]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configuration_uuid', 'module_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_gateway_settings_v1_get_custom_gateway_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configuration_uuid' is set
        if self.api_client.client_side_validation and ('configuration_uuid' not in params or
                                                       params['configuration_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `configuration_uuid` when calling `custom_gateway_settings_v1_get_custom_gateway_settings`")  # noqa: E501
        # verify the required parameter 'module_name' is set
        if self.api_client.client_side_validation and ('module_name' not in params or
                                                       params['module_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `module_name` when calling `custom_gateway_settings_v1_get_custom_gateway_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configuration_uuid' in params:
            path_params['configurationUuid'] = params['configuration_uuid']  # noqa: E501
        if 'module_name' in params:
            path_params['moduleName'] = params['module_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/custom-gateway-settings/{moduleName}/configuration/{configurationUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomGatewaySettingV1]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
