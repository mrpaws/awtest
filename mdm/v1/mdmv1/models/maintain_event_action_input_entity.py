# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class MaintainEventActionInputEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maintain_general_input': 'MaintainGeneralAPIEntity_',
        'name': 'str',
        'description': 'str',
        'device_platform_id': 'int',
        'action_interval': 'int',
        'actions': 'list[MaintainEventActionAction]',
        'conditions': 'list[MaintainEventActionCondition]'
    }

    attribute_map = {
        'maintain_general_input': 'MaintainGeneralInput',
        'name': 'Name',
        'description': 'Description',
        'device_platform_id': 'DevicePlatformID',
        'action_interval': 'ActionInterval',
        'actions': 'Actions',
        'conditions': 'Conditions'
    }

    def __init__(self, maintain_general_input=None, name=None, description=None, device_platform_id=None, action_interval=None, actions=None, conditions=None, _configuration=None):  # noqa: E501
        """MaintainEventActionInputEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._maintain_general_input = None
        self._name = None
        self._description = None
        self._device_platform_id = None
        self._action_interval = None
        self._actions = None
        self._conditions = None
        self.discriminator = None

        if maintain_general_input is not None:
            self.maintain_general_input = maintain_general_input
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if device_platform_id is not None:
            self.device_platform_id = device_platform_id
        if action_interval is not None:
            self.action_interval = action_interval
        if actions is not None:
            self.actions = actions
        if conditions is not None:
            self.conditions = conditions

    @property
    def maintain_general_input(self):
        """Gets the maintain_general_input of this MaintainEventActionInputEntity.  # noqa: E501

        Gets or sets holds Organization Group ID and whether there is permission to insert to the Organization Group or not.  # noqa: E501

        :return: The maintain_general_input of this MaintainEventActionInputEntity.  # noqa: E501
        :rtype: MaintainGeneralAPIEntity_
        """
        return self._maintain_general_input

    @maintain_general_input.setter
    def maintain_general_input(self, maintain_general_input):
        """Sets the maintain_general_input of this MaintainEventActionInputEntity.

        Gets or sets holds Organization Group ID and whether there is permission to insert to the Organization Group or not.  # noqa: E501

        :param maintain_general_input: The maintain_general_input of this MaintainEventActionInputEntity.  # noqa: E501
        :type: MaintainGeneralAPIEntity_
        """

        self._maintain_general_input = maintain_general_input

    @property
    def name(self):
        """Gets the name of this MaintainEventActionInputEntity.  # noqa: E501

        Gets or sets name of the Event Action.  # noqa: E501

        :return: The name of this MaintainEventActionInputEntity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MaintainEventActionInputEntity.

        Gets or sets name of the Event Action.  # noqa: E501

        :param name: The name of this MaintainEventActionInputEntity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MaintainEventActionInputEntity.  # noqa: E501

        Gets or sets description of the Event Action.  # noqa: E501

        :return: The description of this MaintainEventActionInputEntity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MaintainEventActionInputEntity.

        Gets or sets description of the Event Action.  # noqa: E501

        :param description: The description of this MaintainEventActionInputEntity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_platform_id(self):
        """Gets the device_platform_id of this MaintainEventActionInputEntity.  # noqa: E501

        Gets or sets device platform for which Event Action will be created for.  # noqa: E501

        :return: The device_platform_id of this MaintainEventActionInputEntity.  # noqa: E501
        :rtype: int
        """
        return self._device_platform_id

    @device_platform_id.setter
    def device_platform_id(self, device_platform_id):
        """Sets the device_platform_id of this MaintainEventActionInputEntity.

        Gets or sets device platform for which Event Action will be created for.  # noqa: E501

        :param device_platform_id: The device_platform_id of this MaintainEventActionInputEntity.  # noqa: E501
        :type: int
        """

        self._device_platform_id = device_platform_id

    @property
    def action_interval(self):
        """Gets the action_interval of this MaintainEventActionInputEntity.  # noqa: E501

        Gets or sets action Interval for Event Action.  # noqa: E501

        :return: The action_interval of this MaintainEventActionInputEntity.  # noqa: E501
        :rtype: int
        """
        return self._action_interval

    @action_interval.setter
    def action_interval(self, action_interval):
        """Sets the action_interval of this MaintainEventActionInputEntity.

        Gets or sets action Interval for Event Action.  # noqa: E501

        :param action_interval: The action_interval of this MaintainEventActionInputEntity.  # noqa: E501
        :type: int
        """

        self._action_interval = action_interval

    @property
    def actions(self):
        """Gets the actions of this MaintainEventActionInputEntity.  # noqa: E501

        Gets or sets details of Actions to be excecuted in the Event Action.  # noqa: E501

        :return: The actions of this MaintainEventActionInputEntity.  # noqa: E501
        :rtype: list[MaintainEventActionAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this MaintainEventActionInputEntity.

        Gets or sets details of Actions to be excecuted in the Event Action.  # noqa: E501

        :param actions: The actions of this MaintainEventActionInputEntity.  # noqa: E501
        :type: list[MaintainEventActionAction]
        """

        self._actions = actions

    @property
    def conditions(self):
        """Gets the conditions of this MaintainEventActionInputEntity.  # noqa: E501

        Gets or sets details of Condtions in the Event Action.  # noqa: E501

        :return: The conditions of this MaintainEventActionInputEntity.  # noqa: E501
        :rtype: list[MaintainEventActionCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this MaintainEventActionInputEntity.

        Gets or sets details of Condtions in the Event Action.  # noqa: E501

        :param conditions: The conditions of this MaintainEventActionInputEntity.  # noqa: E501
        :type: list[MaintainEventActionCondition]
        """

        self._conditions = conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintainEventActionInputEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintainEventActionInputEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaintainEventActionInputEntity):
            return True

        return self.to_dict() != other.to_dict()
