# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ZebraRegistrationResponseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_code': 'str',
        'verification_uri_complete': 'str',
        'verification_uri': 'str',
        'expires_on': 'datetime'
    }

    attribute_map = {
        'user_code': 'user_code',
        'verification_uri_complete': 'verification_uri_complete',
        'verification_uri': 'verification_uri',
        'expires_on': 'expires_on'
    }

    def __init__(self, user_code=None, verification_uri_complete=None, verification_uri=None, expires_on=None, _configuration=None):  # noqa: E501
        """ZebraRegistrationResponseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_code = None
        self._verification_uri_complete = None
        self._verification_uri = None
        self._expires_on = None
        self.discriminator = None

        if user_code is not None:
            self.user_code = user_code
        if verification_uri_complete is not None:
            self.verification_uri_complete = verification_uri_complete
        if verification_uri is not None:
            self.verification_uri = verification_uri
        if expires_on is not None:
            self.expires_on = expires_on

    @property
    def user_code(self):
        """Gets the user_code of this ZebraRegistrationResponseV1Model.  # noqa: E501

        Gets or sets the end-user verification code.  # noqa: E501

        :return: The user_code of this ZebraRegistrationResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._user_code

    @user_code.setter
    def user_code(self, user_code):
        """Sets the user_code of this ZebraRegistrationResponseV1Model.

        Gets or sets the end-user verification code.  # noqa: E501

        :param user_code: The user_code of this ZebraRegistrationResponseV1Model.  # noqa: E501
        :type: str
        """

        self._user_code = user_code

    @property
    def verification_uri_complete(self):
        """Gets the verification_uri_complete of this ZebraRegistrationResponseV1Model.  # noqa: E501

         Gets or sets a verification URI that includes the user_code,  designed for non-textual transmission.  # noqa: E501

        :return: The verification_uri_complete of this ZebraRegistrationResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._verification_uri_complete

    @verification_uri_complete.setter
    def verification_uri_complete(self, verification_uri_complete):
        """Sets the verification_uri_complete of this ZebraRegistrationResponseV1Model.

         Gets or sets a verification URI that includes the user_code,  designed for non-textual transmission.  # noqa: E501

        :param verification_uri_complete: The verification_uri_complete of this ZebraRegistrationResponseV1Model.  # noqa: E501
        :type: str
        """

        self._verification_uri_complete = verification_uri_complete

    @property
    def verification_uri(self):
        """Gets the verification_uri of this ZebraRegistrationResponseV1Model.  # noqa: E501

         Gets or sets the end-user verification URI on the authorization server.  End users must manually type it into their user agent (web browser).  # noqa: E501

        :return: The verification_uri of this ZebraRegistrationResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._verification_uri

    @verification_uri.setter
    def verification_uri(self, verification_uri):
        """Sets the verification_uri of this ZebraRegistrationResponseV1Model.

         Gets or sets the end-user verification URI on the authorization server.  End users must manually type it into their user agent (web browser).  # noqa: E501

        :param verification_uri: The verification_uri of this ZebraRegistrationResponseV1Model.  # noqa: E501
        :type: str
        """

        self._verification_uri = verification_uri

    @property
    def expires_on(self):
        """Gets the expires_on of this ZebraRegistrationResponseV1Model.  # noqa: E501

        The expiration time of the DeviceCode and UserCode.  # noqa: E501

        :return: The expires_on of this ZebraRegistrationResponseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this ZebraRegistrationResponseV1Model.

        The expiration time of the DeviceCode and UserCode.  # noqa: E501

        :param expires_on: The expires_on of this ZebraRegistrationResponseV1Model.  # noqa: E501
        :type: datetime
        """

        self._expires_on = expires_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZebraRegistrationResponseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZebraRegistrationResponseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ZebraRegistrationResponseV1Model):
            return True

        return self.to_dict() != other.to_dict()
