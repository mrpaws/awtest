# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class WorkflowListItemResponseV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_uuid': 'str',
        'name': 'str',
        'description': 'str',
        'created_on': 'datetime',
        'version': 'str',
        'assignment_uuids': 'list[str]',
        'workflow_entities': 'list[WorkflowEntityTypeMap]',
        'created_by': 'str',
        'modified_on': 'datetime',
        'published_on': 'datetime',
        'organization_group_uuid': 'str',
        'device_type': 'int',
        'assignments': 'list[WorkflowAssignmentSmartGroupMapModel]',
        'implicit_workflow': 'bool',
        'catalog_display': 'CatalogDisplayInfo',
        'can_edit': 'bool',
        'can_delete': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'workflow_uuid': 'workflow_uuid',
        'name': 'name',
        'description': 'description',
        'created_on': 'created_on',
        'version': 'version',
        'assignment_uuids': 'assignment_uuids',
        'workflow_entities': 'workflow_entities',
        'created_by': 'created_by',
        'modified_on': 'modified_on',
        'published_on': 'published_on',
        'organization_group_uuid': 'organization_group_uuid',
        'device_type': 'device_type',
        'assignments': 'assignments',
        'implicit_workflow': 'implicit_workflow',
        'catalog_display': 'catalog_display',
        'can_edit': 'can_edit',
        'can_delete': 'can_delete',
        'type': 'type'
    }

    def __init__(self, workflow_uuid=None, name=None, description=None, created_on=None, version=None, assignment_uuids=None, workflow_entities=None, created_by=None, modified_on=None, published_on=None, organization_group_uuid=None, device_type=None, assignments=None, implicit_workflow=None, catalog_display=None, can_edit=None, can_delete=None, type=None, _configuration=None):  # noqa: E501
        """WorkflowListItemResponseV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._workflow_uuid = None
        self._name = None
        self._description = None
        self._created_on = None
        self._version = None
        self._assignment_uuids = None
        self._workflow_entities = None
        self._created_by = None
        self._modified_on = None
        self._published_on = None
        self._organization_group_uuid = None
        self._device_type = None
        self._assignments = None
        self._implicit_workflow = None
        self._catalog_display = None
        self._can_edit = None
        self._can_delete = None
        self._type = None
        self.discriminator = None

        if workflow_uuid is not None:
            self.workflow_uuid = workflow_uuid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if created_on is not None:
            self.created_on = created_on
        if version is not None:
            self.version = version
        if assignment_uuids is not None:
            self.assignment_uuids = assignment_uuids
        if workflow_entities is not None:
            self.workflow_entities = workflow_entities
        if created_by is not None:
            self.created_by = created_by
        if modified_on is not None:
            self.modified_on = modified_on
        if published_on is not None:
            self.published_on = published_on
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if device_type is not None:
            self.device_type = device_type
        if assignments is not None:
            self.assignments = assignments
        if implicit_workflow is not None:
            self.implicit_workflow = implicit_workflow
        if catalog_display is not None:
            self.catalog_display = catalog_display
        if can_edit is not None:
            self.can_edit = can_edit
        if can_delete is not None:
            self.can_delete = can_delete
        if type is not None:
            self.type = type

    @property
    def workflow_uuid(self):
        """Gets the workflow_uuid of this WorkflowListItemResponseV2Model.  # noqa: E501

        Identifier of the workflow.  # noqa: E501

        :return: The workflow_uuid of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._workflow_uuid

    @workflow_uuid.setter
    def workflow_uuid(self, workflow_uuid):
        """Sets the workflow_uuid of this WorkflowListItemResponseV2Model.

        Identifier of the workflow.  # noqa: E501

        :param workflow_uuid: The workflow_uuid of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: str
        """

        self._workflow_uuid = workflow_uuid

    @property
    def name(self):
        """Gets the name of this WorkflowListItemResponseV2Model.  # noqa: E501

        Name of the workflow.  # noqa: E501

        :return: The name of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowListItemResponseV2Model.

        Name of the workflow.  # noqa: E501

        :param name: The name of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this WorkflowListItemResponseV2Model.  # noqa: E501

        Description of the workflow.  # noqa: E501

        :return: The description of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowListItemResponseV2Model.

        Description of the workflow.  # noqa: E501

        :param description: The description of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_on(self):
        """Gets the created_on of this WorkflowListItemResponseV2Model.  # noqa: E501

        The date when the workflow was created.  # noqa: E501

        :return: The created_on of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this WorkflowListItemResponseV2Model.

        The date when the workflow was created.  # noqa: E501

        :param created_on: The created_on of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def version(self):
        """Gets the version of this WorkflowListItemResponseV2Model.  # noqa: E501

        Workflow version.  # noqa: E501

        :return: The version of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkflowListItemResponseV2Model.

        Workflow version.  # noqa: E501

        :param version: The version of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def assignment_uuids(self):
        """Gets the assignment_uuids of this WorkflowListItemResponseV2Model.  # noqa: E501

        The assignment UUIDs to which this workflow is assigned.  # noqa: E501

        :return: The assignment_uuids of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._assignment_uuids

    @assignment_uuids.setter
    def assignment_uuids(self, assignment_uuids):
        """Sets the assignment_uuids of this WorkflowListItemResponseV2Model.

        The assignment UUIDs to which this workflow is assigned.  # noqa: E501

        :param assignment_uuids: The assignment_uuids of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: list[str]
        """

        self._assignment_uuids = assignment_uuids

    @property
    def workflow_entities(self):
        """Gets the workflow_entities of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets a list of the uuid of the entities contained within the workflow.  # noqa: E501

        :return: The workflow_entities of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: list[WorkflowEntityTypeMap]
        """
        return self._workflow_entities

    @workflow_entities.setter
    def workflow_entities(self, workflow_entities):
        """Sets the workflow_entities of this WorkflowListItemResponseV2Model.

        Gets or sets a list of the uuid of the entities contained within the workflow.  # noqa: E501

        :param workflow_entities: The workflow_entities of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: list[WorkflowEntityTypeMap]
        """

        self._workflow_entities = workflow_entities

    @property
    def created_by(self):
        """Gets the created_by of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets the workflow created administrator uuid.  # noqa: E501

        :return: The created_by of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WorkflowListItemResponseV2Model.

        Gets or sets the workflow created administrator uuid.  # noqa: E501

        :param created_by: The created_by of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_on(self):
        """Gets the modified_on of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets the time the workflow was last modified.  # noqa: E501

        :return: The modified_on of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this WorkflowListItemResponseV2Model.

        Gets or sets the time the workflow was last modified.  # noqa: E501

        :param modified_on: The modified_on of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def published_on(self):
        """Gets the published_on of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets the time the workflow was last published.  # noqa: E501

        :return: The published_on of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._published_on

    @published_on.setter
    def published_on(self, published_on):
        """Sets the published_on of this WorkflowListItemResponseV2Model.

        Gets or sets the time the workflow was last published.  # noqa: E501

        :param published_on: The published_on of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: datetime
        """

        self._published_on = published_on

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets the Organization Group UUID of the workflows.  # noqa: E501

        :return: The organization_group_uuid of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this WorkflowListItemResponseV2Model.

        Gets or sets the Organization Group UUID of the workflows.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def device_type(self):
        """Gets the device_type of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets the device type that the workflow targets.  # noqa: E501

        :return: The device_type of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this WorkflowListItemResponseV2Model.

        Gets or sets the device type that the workflow targets.  # noqa: E501

        :param device_type: The device_type of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 100, 101, 102, 103, 104, 105, 200, 201]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_type not in allowed_values):
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def assignments(self):
        """Gets the assignments of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets a list of the assignment and smartgoups mappings.  # noqa: E501

        :return: The assignments of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: list[WorkflowAssignmentSmartGroupMapModel]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this WorkflowListItemResponseV2Model.

        Gets or sets a list of the assignment and smartgoups mappings.  # noqa: E501

        :param assignments: The assignments of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: list[WorkflowAssignmentSmartGroupMapModel]
        """

        self._assignments = assignments

    @property
    def implicit_workflow(self):
        """Gets the implicit_workflow of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets a value indicating whether the workflow was created on the fly during resource creation.  Intended for controlling the display of implicit workflows in console.  # noqa: E501

        :return: The implicit_workflow of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._implicit_workflow

    @implicit_workflow.setter
    def implicit_workflow(self, implicit_workflow):
        """Sets the implicit_workflow of this WorkflowListItemResponseV2Model.

        Gets or sets a value indicating whether the workflow was created on the fly during resource creation.  Intended for controlling the display of implicit workflows in console.  # noqa: E501

        :param implicit_workflow: The implicit_workflow of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: bool
        """

        self._implicit_workflow = implicit_workflow

    @property
    def catalog_display(self):
        """Gets the catalog_display of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets the catalog display information.  # noqa: E501

        :return: The catalog_display of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: CatalogDisplayInfo
        """
        return self._catalog_display

    @catalog_display.setter
    def catalog_display(self, catalog_display):
        """Sets the catalog_display of this WorkflowListItemResponseV2Model.

        Gets or sets the catalog display information.  # noqa: E501

        :param catalog_display: The catalog_display of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: CatalogDisplayInfo
        """

        self._catalog_display = catalog_display

    @property
    def can_edit(self):
        """Gets the can_edit of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets a bool indicating whether or not the user has edit permission on the workflow.  # noqa: E501

        :return: The can_edit of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this WorkflowListItemResponseV2Model.

        Gets or sets a bool indicating whether or not the user has edit permission on the workflow.  # noqa: E501

        :param can_edit: The can_edit of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def can_delete(self):
        """Gets the can_delete of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets a bool indicating whether or not the user has delete permission on the workflow.  # noqa: E501

        :return: The can_delete of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this WorkflowListItemResponseV2Model.

        Gets or sets a bool indicating whether or not the user has delete permission on the workflow.  # noqa: E501

        :param can_delete: The can_delete of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def type(self):
        """Gets the type of this WorkflowListItemResponseV2Model.  # noqa: E501

        Gets or sets workflow type.  # noqa: E501

        :return: The type of this WorkflowListItemResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkflowListItemResponseV2Model.

        Gets or sets workflow type.  # noqa: E501

        :param type: The type of this WorkflowListItemResponseV2Model.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowListItemResponseV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowListItemResponseV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowListItemResponseV2Model):
            return True

        return self.to_dict() != other.to_dict()
