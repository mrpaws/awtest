# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv2.configuration import Configuration


class LocationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_name': 'str',
        'display_name': 'str',
        'location_type': 'int',
        'is_active': 'int',
        'status': 'int',
        'timezone': 'int',
        'primary_location_group_id': 'int',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'internal_name': 'InternalName',
        'display_name': 'DisplayName',
        'location_type': 'LocationType',
        'is_active': 'IsActive',
        'status': 'Status',
        'timezone': 'Timezone',
        'primary_location_group_id': 'PrimaryLocationGroupId',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, internal_name=None, display_name=None, location_type=None, is_active=None, status=None, timezone=None, primary_location_group_id=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """LocationModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._internal_name = None
        self._display_name = None
        self._location_type = None
        self._is_active = None
        self._status = None
        self._timezone = None
        self._primary_location_group_id = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if internal_name is not None:
            self.internal_name = internal_name
        if display_name is not None:
            self.display_name = display_name
        if location_type is not None:
            self.location_type = location_type
        if is_active is not None:
            self.is_active = is_active
        if status is not None:
            self.status = status
        if timezone is not None:
            self.timezone = timezone
        if primary_location_group_id is not None:
            self.primary_location_group_id = primary_location_group_id
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def internal_name(self):
        """Gets the internal_name of this LocationModel.  # noqa: E501

        Gets or sets The location Internal name.  # noqa: E501

        :return: The internal_name of this LocationModel.  # noqa: E501
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this LocationModel.

        Gets or sets The location Internal name.  # noqa: E501

        :param internal_name: The internal_name of this LocationModel.  # noqa: E501
        :type: str
        """

        self._internal_name = internal_name

    @property
    def display_name(self):
        """Gets the display_name of this LocationModel.  # noqa: E501

        Gets or sets The location display name.  # noqa: E501

        :return: The display_name of this LocationModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LocationModel.

        Gets or sets The location display name.  # noqa: E501

        :param display_name: The display_name of this LocationModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def location_type(self):
        """Gets the location_type of this LocationModel.  # noqa: E501

        Gets or sets Location Type id like 17[Field], 16[Corporate office] etc..  # noqa: E501

        :return: The location_type of this LocationModel.  # noqa: E501
        :rtype: int
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this LocationModel.

        Gets or sets Location Type id like 17[Field], 16[Corporate office] etc..  # noqa: E501

        :param location_type: The location_type of this LocationModel.  # noqa: E501
        :type: int
        """

        self._location_type = location_type

    @property
    def is_active(self):
        """Gets the is_active of this LocationModel.  # noqa: E501

        Gets or sets Value is true if location is active else false.  # noqa: E501

        :return: The is_active of this LocationModel.  # noqa: E501
        :rtype: int
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this LocationModel.

        Gets or sets Value is true if location is active else false.  # noqa: E501

        :param is_active: The is_active of this LocationModel.  # noqa: E501
        :type: int
        """

        self._is_active = is_active

    @property
    def status(self):
        """Gets the status of this LocationModel.  # noqa: E501

        Gets or sets Status id of location like 100[Complete], 80[Installed].  # noqa: E501

        :return: The status of this LocationModel.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LocationModel.

        Gets or sets Status id of location like 100[Complete], 80[Installed].  # noqa: E501

        :param status: The status of this LocationModel.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def timezone(self):
        """Gets the timezone of this LocationModel.  # noqa: E501

        Gets or sets Timezone id of Location like 62[EST, GMT-5.00] etc..  # noqa: E501

        :return: The timezone of this LocationModel.  # noqa: E501
        :rtype: int
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this LocationModel.

        Gets or sets Timezone id of Location like 62[EST, GMT-5.00] etc..  # noqa: E501

        :param timezone: The timezone of this LocationModel.  # noqa: E501
        :type: int
        """

        self._timezone = timezone

    @property
    def primary_location_group_id(self):
        """Gets the primary_location_group_id of this LocationModel.  # noqa: E501

        Gets or sets Primary location group of location.  # noqa: E501

        :return: The primary_location_group_id of this LocationModel.  # noqa: E501
        :rtype: int
        """
        return self._primary_location_group_id

    @primary_location_group_id.setter
    def primary_location_group_id(self, primary_location_group_id):
        """Sets the primary_location_group_id of this LocationModel.

        Gets or sets Primary location group of location.  # noqa: E501

        :param primary_location_group_id: The primary_location_group_id of this LocationModel.  # noqa: E501
        :type: int
        """

        self._primary_location_group_id = primary_location_group_id

    @property
    def id(self):
        """Gets the id of this LocationModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this LocationModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocationModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this LocationModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this LocationModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this LocationModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this LocationModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this LocationModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocationModel):
            return True

        return self.to_dict() != other.to_dict()
