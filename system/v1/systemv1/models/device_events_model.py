# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class DeviceEventsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enrollment': 'bool',
        'unenrolled_enterprise_wipe': 'bool',
        'wipe': 'bool',
        'compromised_status_change': 'bool',
        'delete': 'bool',
        'compliance_status_change': 'bool',
        'check_out_check_in': 'bool',
        'device_attributes': 'DeviceAttributesModel'
    }

    attribute_map = {
        'enrollment': 'Enrollment',
        'unenrolled_enterprise_wipe': 'UnenrolledEnterpriseWipe',
        'wipe': 'Wipe',
        'compromised_status_change': 'CompromisedStatusChange',
        'delete': 'Delete',
        'compliance_status_change': 'ComplianceStatusChange',
        'check_out_check_in': 'CheckOutCheckIn',
        'device_attributes': 'DeviceAttributes'
    }

    def __init__(self, enrollment=None, unenrolled_enterprise_wipe=None, wipe=None, compromised_status_change=None, delete=None, compliance_status_change=None, check_out_check_in=None, device_attributes=None, _configuration=None):  # noqa: E501
        """DeviceEventsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enrollment = None
        self._unenrolled_enterprise_wipe = None
        self._wipe = None
        self._compromised_status_change = None
        self._delete = None
        self._compliance_status_change = None
        self._check_out_check_in = None
        self._device_attributes = None
        self.discriminator = None

        if enrollment is not None:
            self.enrollment = enrollment
        if unenrolled_enterprise_wipe is not None:
            self.unenrolled_enterprise_wipe = unenrolled_enterprise_wipe
        if wipe is not None:
            self.wipe = wipe
        if compromised_status_change is not None:
            self.compromised_status_change = compromised_status_change
        if delete is not None:
            self.delete = delete
        if compliance_status_change is not None:
            self.compliance_status_change = compliance_status_change
        if check_out_check_in is not None:
            self.check_out_check_in = check_out_check_in
        if device_attributes is not None:
            self.device_attributes = device_attributes

    @property
    def enrollment(self):
        """Gets the enrollment of this DeviceEventsModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered to set the enrollment status of a device.  # noqa: E501

        :return: The enrollment of this DeviceEventsModel.  # noqa: E501
        :rtype: bool
        """
        return self._enrollment

    @enrollment.setter
    def enrollment(self, enrollment):
        """Sets the enrollment of this DeviceEventsModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered to set the enrollment status of a device.  # noqa: E501

        :param enrollment: The enrollment of this DeviceEventsModel.  # noqa: E501
        :type: bool
        """

        self._enrollment = enrollment

    @property
    def unenrolled_enterprise_wipe(self):
        """Gets the unenrolled_enterprise_wipe of this DeviceEventsModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered to unenroll and perform an enterprise wipe on a device.  # noqa: E501

        :return: The unenrolled_enterprise_wipe of this DeviceEventsModel.  # noqa: E501
        :rtype: bool
        """
        return self._unenrolled_enterprise_wipe

    @unenrolled_enterprise_wipe.setter
    def unenrolled_enterprise_wipe(self, unenrolled_enterprise_wipe):
        """Sets the unenrolled_enterprise_wipe of this DeviceEventsModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered to unenroll and perform an enterprise wipe on a device.  # noqa: E501

        :param unenrolled_enterprise_wipe: The unenrolled_enterprise_wipe of this DeviceEventsModel.  # noqa: E501
        :type: bool
        """

        self._unenrolled_enterprise_wipe = unenrolled_enterprise_wipe

    @property
    def wipe(self):
        """Gets the wipe of this DeviceEventsModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered to wipe a device.  # noqa: E501

        :return: The wipe of this DeviceEventsModel.  # noqa: E501
        :rtype: bool
        """
        return self._wipe

    @wipe.setter
    def wipe(self, wipe):
        """Sets the wipe of this DeviceEventsModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered to wipe a device.  # noqa: E501

        :param wipe: The wipe of this DeviceEventsModel.  # noqa: E501
        :type: bool
        """

        self._wipe = wipe

    @property
    def compromised_status_change(self):
        """Gets the compromised_status_change of this DeviceEventsModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a change in the setting of a compromised device.  # noqa: E501

        :return: The compromised_status_change of this DeviceEventsModel.  # noqa: E501
        :rtype: bool
        """
        return self._compromised_status_change

    @compromised_status_change.setter
    def compromised_status_change(self, compromised_status_change):
        """Sets the compromised_status_change of this DeviceEventsModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a change in the setting of a compromised device.  # noqa: E501

        :param compromised_status_change: The compromised_status_change of this DeviceEventsModel.  # noqa: E501
        :type: bool
        """

        self._compromised_status_change = compromised_status_change

    @property
    def delete(self):
        """Gets the delete of this DeviceEventsModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a deletion of the device.  # noqa: E501

        :return: The delete of this DeviceEventsModel.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this DeviceEventsModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a deletion of the device.  # noqa: E501

        :param delete: The delete of this DeviceEventsModel.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def compliance_status_change(self):
        """Gets the compliance_status_change of this DeviceEventsModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has changed the compliance status for a device.  # noqa: E501

        :return: The compliance_status_change of this DeviceEventsModel.  # noqa: E501
        :rtype: bool
        """
        return self._compliance_status_change

    @compliance_status_change.setter
    def compliance_status_change(self, compliance_status_change):
        """Sets the compliance_status_change of this DeviceEventsModel.

        Gets or sets a value indicating whether indicates whether an outbound event has changed the compliance status for a device.  # noqa: E501

        :param compliance_status_change: The compliance_status_change of this DeviceEventsModel.  # noqa: E501
        :type: bool
        """

        self._compliance_status_change = compliance_status_change

    @property
    def check_out_check_in(self):
        """Gets the check_out_check_in of this DeviceEventsModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for device checked in and checked out by user.  # noqa: E501

        :return: The check_out_check_in of this DeviceEventsModel.  # noqa: E501
        :rtype: bool
        """
        return self._check_out_check_in

    @check_out_check_in.setter
    def check_out_check_in(self, check_out_check_in):
        """Sets the check_out_check_in of this DeviceEventsModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for device checked in and checked out by user.  # noqa: E501

        :param check_out_check_in: The check_out_check_in of this DeviceEventsModel.  # noqa: E501
        :type: bool
        """

        self._check_out_check_in = check_out_check_in

    @property
    def device_attributes(self):
        """Gets the device_attributes of this DeviceEventsModel.  # noqa: E501

        Gets or sets device attribute properties that have been changed. These properties are triggered by an outbound event call.  # noqa: E501

        :return: The device_attributes of this DeviceEventsModel.  # noqa: E501
        :rtype: DeviceAttributesModel
        """
        return self._device_attributes

    @device_attributes.setter
    def device_attributes(self, device_attributes):
        """Sets the device_attributes of this DeviceEventsModel.

        Gets or sets device attribute properties that have been changed. These properties are triggered by an outbound event call.  # noqa: E501

        :param device_attributes: The device_attributes of this DeviceEventsModel.  # noqa: E501
        :type: DeviceAttributesModel
        """

        self._device_attributes = device_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceEventsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceEventsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceEventsModel):
            return True

        return self.to_dict() != other.to_dict()
