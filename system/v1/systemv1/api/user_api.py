# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_activate_user(self, id, **kwargs):  # noqa: E501
        """Activate the enrollment user.  # noqa: E501

        Activate the enrollment user by enrollment user id.  The enrollment user will be activated once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_activate_user(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_activate_user_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_activate_user_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_activate_user_with_http_info(self, id, **kwargs):  # noqa: E501
        """Activate the enrollment user.  # noqa: E501

        Activate the enrollment user by enrollment user id.  The enrollment user will be activated once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_activate_user_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_activate_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_activate_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_add_user_async(self, user, **kwargs):  # noqa: E501
        """Create a new enrollment user.  # noqa: E501

        Create a new enrollment user with all provided information.  Validation will be performed based on the input data.  The enrollment user will be added to the system once the call is complete.  We have introduced v2 for this API, which includes enhancements, and recommend using v2 going forward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_add_user_async(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param User_ user: New enrollment user to be added (Required). (required)
        :return: EntityIdModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_add_user_async_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_add_user_async_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def user_add_user_async_with_http_info(self, user, **kwargs):  # noqa: E501
        """Create a new enrollment user.  # noqa: E501

        Create a new enrollment user with all provided information.  Validation will be performed based on the input data.  The enrollment user will be added to the system once the call is complete.  We have introduced v2 for this API, which includes enhancements, and recommend using v2 going forward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_add_user_async_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param User_ user: New enrollment user to be added (Required). (required)
        :return: EntityIdModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_add_user_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_add_user_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/adduser', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityIdModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_bulk_activate(self, bulk_input, **kwargs):  # noqa: E501
        """Activate a list of enrollment users.  # noqa: E501

        Activate a list of enrollment users. Enrollment user ids will be taken as input.  The list of enrollment users will be activated once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_bulk_activate(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: A list of enrollment user ids (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_bulk_activate_with_http_info(bulk_input, **kwargs)  # noqa: E501
        else:
            (data) = self.user_bulk_activate_with_http_info(bulk_input, **kwargs)  # noqa: E501
            return data

    def user_bulk_activate_with_http_info(self, bulk_input, **kwargs):  # noqa: E501
        """Activate a list of enrollment users.  # noqa: E501

        Activate a list of enrollment users. Enrollment user ids will be taken as input.  The list of enrollment users will be activated once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_bulk_activate_with_http_info(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: A list of enrollment user ids (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_bulk_activate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_input' is set
        if self.api_client.client_side_validation and ('bulk_input' not in params or
                                                       params['bulk_input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_input` when calling `user_bulk_activate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_bulk_de_activate_async(self, bulk_input, **kwargs):  # noqa: E501
        """Deactivate a list of enrollment users.  # noqa: E501

        Deactivate a list of enrollment users. Enrollment user ids will be taken as input.  The list of enrollment users will be deactivated once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_bulk_de_activate_async(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: A list of enrollment user ids (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_bulk_de_activate_async_with_http_info(bulk_input, **kwargs)  # noqa: E501
        else:
            (data) = self.user_bulk_de_activate_async_with_http_info(bulk_input, **kwargs)  # noqa: E501
            return data

    def user_bulk_de_activate_async_with_http_info(self, bulk_input, **kwargs):  # noqa: E501
        """Deactivate a list of enrollment users.  # noqa: E501

        Deactivate a list of enrollment users. Enrollment user ids will be taken as input.  The list of enrollment users will be deactivated once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_bulk_de_activate_async_with_http_info(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: A list of enrollment user ids (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_bulk_de_activate_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_input' is set
        if self.api_client.client_side_validation and ('bulk_input' not in params or
                                                       params['bulk_input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_input` when calling `user_bulk_de_activate_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_bulk_delete_async(self, bulk_input, **kwargs):  # noqa: E501
        """Delete a list of enrollment users.  # noqa: E501

        Delete a list of enrollment users. Enrollment user ids will be taken as input.  The list of enrollment users will be deleted once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_bulk_delete_async(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: A list of enrollment user ids (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_bulk_delete_async_with_http_info(bulk_input, **kwargs)  # noqa: E501
        else:
            (data) = self.user_bulk_delete_async_with_http_info(bulk_input, **kwargs)  # noqa: E501
            return data

    def user_bulk_delete_async_with_http_info(self, bulk_input, **kwargs):  # noqa: E501
        """Delete a list of enrollment users.  # noqa: E501

        Delete a list of enrollment users. Enrollment user ids will be taken as input.  The list of enrollment users will be deleted once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_bulk_delete_async_with_http_info(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: A list of enrollment user ids (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_bulk_delete_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_input' is set
        if self.api_client.client_side_validation and ('bulk_input' not in params or
                                                       params['bulk_input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_input` when calling `user_bulk_delete_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_change_location_group_async(self, id, target_lg, **kwargs):  # noqa: E501
        """Change the organization group of the enrollment user.  # noqa: E501

        Change the organization group of the enrollment user by enrollment user id.  The organization group will be changed once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_change_location_group_async(id, target_lg, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :param int target_lg: The new enrollment user organization group id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_change_location_group_async_with_http_info(id, target_lg, **kwargs)  # noqa: E501
        else:
            (data) = self.user_change_location_group_async_with_http_info(id, target_lg, **kwargs)  # noqa: E501
            return data

    def user_change_location_group_async_with_http_info(self, id, target_lg, **kwargs):  # noqa: E501
        """Change the organization group of the enrollment user.  # noqa: E501

        Change the organization group of the enrollment user by enrollment user id.  The organization group will be changed once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_change_location_group_async_with_http_info(id, target_lg, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :param int target_lg: The new enrollment user organization group id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'target_lg']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_change_location_group_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_change_location_group_async`")  # noqa: E501
        # verify the required parameter 'target_lg' is set
        if self.api_client.client_side_validation and ('target_lg' not in params or
                                                       params['target_lg'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_lg` when calling `user_change_location_group_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'target_lg' in params:
            query_params.append(('targetLG', params['target_lg']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/changelocationgroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_deactivate_user_async(self, id, **kwargs):  # noqa: E501
        """Deactivate the enrollment user.  # noqa: E501

        Deactivate the enrollment user by enrollment user id.  The enrollment user will be deactivated once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_deactivate_user_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_deactivate_user_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_deactivate_user_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_deactivate_user_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deactivate the enrollment user.  # noqa: E501

        Deactivate the enrollment user by enrollment user id.  The enrollment user will be deactivated once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_deactivate_user_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_deactivate_user_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_deactivate_user_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_delete_async(self, id, **kwargs):  # noqa: E501
        """Delete the enrollment user.  # noqa: E501

        Delete the enrollment user by enrollment user id.  The enrollment user will be deleted from system once the call is complete.  We have introduced v2 for this API, which includes enhancements, and recommend using v2 going forward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_delete_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_delete_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_delete_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete the enrollment user.  # noqa: E501

        Delete the enrollment user by enrollment user id.  The enrollment user will be deleted from system once the call is complete.  We have introduced v2 for this API, which includes enhancements, and recommend using v2 going forward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_delete_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_delete_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_delete_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get(self, id, **kwargs):  # noqa: E501
        """Get the enrollment user.  # noqa: E501

        Get the enrollment user information by enrollment user id.  The enrollment user information will be present once the call is complete.  We have introduced v2 for this API, which includes enhancements, and recommend using v2 going forward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :return: User_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def user_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the enrollment user.  # noqa: E501

        Get the enrollment user information by enrollment user id.  The enrollment user information will be present once the call is complete.  We have introduced v2 for this API, which includes enhancements, and recommend using v2 going forward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :return: User_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_0(self, **kwargs):  # noqa: E501
        """Get the enrollment user authentication result and attributes.  # noqa: E501

        Get the enrollment user authentication result and attributes by enrollment user credential and attributes flag.  Enrollment user credential will be used as the authorization header to get enrollment user information.  Attributes will be returned together with authentication result if attributes flag is set to true, otherwise only authentication result is returned.  The enrollment user authentication result and/or attributes will be present once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool attributes: Attributes flag indicating whether to return enrollment user attributes.
        :return: UserModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_0_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """Get the enrollment user authentication result and attributes.  # noqa: E501

        Get the enrollment user authentication result and attributes by enrollment user credential and attributes flag.  Enrollment user credential will be used as the authorization header to get enrollment user information.  Attributes will be returned together with authentication result if attributes flag is set to true, otherwise only authentication result is returned.  The enrollment user authentication result and/or attributes will be present once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool attributes: Attributes flag indicating whether to return enrollment user attributes.
        :return: UserModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_0" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_search_async(self, **kwargs):  # noqa: E501
        """Search for the enrollment users.  # noqa: E501

        Search for the enrollment users based on search criteria.  FirstName, LastName, Email, LocationGroupID, Role, UserName can be used to search the enrollment users.  Paging is supported together with page number and page size.  Sorting is supported together with order by and sort order.  Supported keywords for sorting are UserName, EmailAddress, FirstName, LastName, Name - Sorts by Organization Group Name, Active, EnrollmentUserID.  A list of enrollment users will be present once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_search_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firstname: The enrollment user first name to search for.
        :param str lastname: The enrollment user last name to search for.
        :param str email: The enrollment user email address to search for.
        :param int locationgroup_id: The enrollment user location group id to search for.
        :param str role: The enrollment user role to search for.
        :param str username: The enrollment user username to search for.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str orderby: The attribute sort based on.
        :param str sortorder: The sort order, ASC for ascending and DESC for descending.
        :param str status: The admin status. Allowed values are Active or Inactive. Defaults to all, if this attribute is not specified.
        :return: UserSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_search_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_search_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_search_async_with_http_info(self, **kwargs):  # noqa: E501
        """Search for the enrollment users.  # noqa: E501

        Search for the enrollment users based on search criteria.  FirstName, LastName, Email, LocationGroupID, Role, UserName can be used to search the enrollment users.  Paging is supported together with page number and page size.  Sorting is supported together with order by and sort order.  Supported keywords for sorting are UserName, EmailAddress, FirstName, LastName, Name - Sorts by Organization Group Name, Active, EnrollmentUserID.  A list of enrollment users will be present once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_search_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firstname: The enrollment user first name to search for.
        :param str lastname: The enrollment user last name to search for.
        :param str email: The enrollment user email address to search for.
        :param int locationgroup_id: The enrollment user location group id to search for.
        :param str role: The enrollment user role to search for.
        :param str username: The enrollment user username to search for.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str orderby: The attribute sort based on.
        :param str sortorder: The sort order, ASC for ascending and DESC for descending.
        :param str status: The admin status. Allowed values are Active or Inactive. Defaults to all, if this attribute is not specified.
        :return: UserSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firstname', 'lastname', 'email', 'locationgroup_id', 'role', 'username', 'page', 'pagesize', 'orderby', 'sortorder', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_search_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firstname' in params:
            query_params.append(('firstname', params['firstname']))  # noqa: E501
        if 'lastname' in params:
            query_params.append(('lastname', params['lastname']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'locationgroup_id' in params:
            query_params.append(('locationgroupId', params['locationgroup_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_update_user_async(self, id, user, **kwargs):  # noqa: E501
        """Update the enrollment user.  # noqa: E501

        Update the enrollment user with all provided information by enrollment user id.  Validation will be performed based on the input data.  The enrollment user will be updated in the system once the call is complete.  We have introduced v2 for this API, which includes enhancements, and recommend using v2 going forward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_update_user_async(id, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :param User_ user: The enrollment user to be updated (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_update_user_async_with_http_info(id, user, **kwargs)  # noqa: E501
        else:
            (data) = self.user_update_user_async_with_http_info(id, user, **kwargs)  # noqa: E501
            return data

    def user_update_user_async_with_http_info(self, id, user, **kwargs):  # noqa: E501
        """Update the enrollment user.  # noqa: E501

        Update the enrollment user with all provided information by enrollment user id.  Validation will be performed based on the input data.  The enrollment user will be updated in the system once the call is complete.  We have introduced v2 for this API, which includes enhancements, and recommend using v2 going forward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_update_user_async_with_http_info(id, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :param User_ user: The enrollment user to be updated (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_update_user_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_update_user_async`")  # noqa: E501
        # verify the required parameter 'user' is set
        if self.api_client.client_side_validation and ('user' not in params or
                                                       params['user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user` when calling `user_update_user_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_upload_smime_certificates_async(self, id, certificates, **kwargs):  # noqa: E501
        """Upload MIME Certificates for the enrollment user.  # noqa: E501

        Upload MIME certificates for the enrollment user by enrollment user id.  MIME certificates will be uploaded for the enrollment user once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_upload_smime_certificates_async(id, certificates, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :param SMIMECertificate certificates: The MIME certificate details (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_upload_smime_certificates_async_with_http_info(id, certificates, **kwargs)  # noqa: E501
        else:
            (data) = self.user_upload_smime_certificates_async_with_http_info(id, certificates, **kwargs)  # noqa: E501
            return data

    def user_upload_smime_certificates_async_with_http_info(self, id, certificates, **kwargs):  # noqa: E501
        """Upload MIME Certificates for the enrollment user.  # noqa: E501

        Upload MIME certificates for the enrollment user by enrollment user id.  MIME certificates will be uploaded for the enrollment user once the call is complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_upload_smime_certificates_async_with_http_info(id, certificates, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The enrollment user id (Required). (required)
        :param SMIMECertificate certificates: The MIME certificate details (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'certificates']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_upload_smime_certificates_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `user_upload_smime_certificates_async`")  # noqa: E501
        # verify the required parameter 'certificates' is set
        if self.api_client.client_side_validation and ('certificates' not in params or
                                                       params['certificates'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `certificates` when calling `user_upload_smime_certificates_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'certificates' in params:
            body_params = params['certificates']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{id}/uploadsmimecerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
