# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class AppRemovalProtectionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_on': 'datetime',
        'modified_on': 'datetime',
        'identifier': 'str',
        'source': 'int',
        'threshold_status': 'int',
        'threshold_id': 'int'
    }

    attribute_map = {
        'created_on': 'CreatedOn',
        'modified_on': 'ModifiedOn',
        'identifier': 'Identifier',
        'source': 'Source',
        'threshold_status': 'ThresholdStatus',
        'threshold_id': 'ThresholdId'
    }

    def __init__(self, created_on=None, modified_on=None, identifier=None, source=None, threshold_status=None, threshold_id=None, _configuration=None):  # noqa: E501
        """AppRemovalProtectionModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_on = None
        self._modified_on = None
        self._identifier = None
        self._source = None
        self._threshold_status = None
        self._threshold_id = None
        self.discriminator = None

        if created_on is not None:
            self.created_on = created_on
        if modified_on is not None:
            self.modified_on = modified_on
        if identifier is not None:
            self.identifier = identifier
        if source is not None:
            self.source = source
        if threshold_status is not None:
            self.threshold_status = threshold_status
        if threshold_id is not None:
            self.threshold_id = threshold_id

    @property
    def created_on(self):
        """Gets the created_on of this AppRemovalProtectionModel.  # noqa: E501

        Gets or sets date on which the record was created.  # noqa: E501

        :return: The created_on of this AppRemovalProtectionModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this AppRemovalProtectionModel.

        Gets or sets date on which the record was created.  # noqa: E501

        :param created_on: The created_on of this AppRemovalProtectionModel.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """Gets the modified_on of this AppRemovalProtectionModel.  # noqa: E501

        Gets or sets date on which the record was modified.  # noqa: E501

        :return: The modified_on of this AppRemovalProtectionModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this AppRemovalProtectionModel.

        Gets or sets date on which the record was modified.  # noqa: E501

        :param modified_on: The modified_on of this AppRemovalProtectionModel.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def identifier(self):
        """Gets the identifier of this AppRemovalProtectionModel.  # noqa: E501

        Gets or sets BundleId of the app for which command was queued.  # noqa: E501

        :return: The identifier of this AppRemovalProtectionModel.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AppRemovalProtectionModel.

        Gets or sets BundleId of the app for which command was queued.  # noqa: E501

        :param identifier: The identifier of this AppRemovalProtectionModel.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def source(self):
        """Gets the source of this AppRemovalProtectionModel.  # noqa: E501

        Gets or sets the source of command.  # noqa: E501

        :return: The source of this AppRemovalProtectionModel.  # noqa: E501
        :rtype: int
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AppRemovalProtectionModel.

        Gets or sets the source of command.  # noqa: E501

        :param source: The source of this AppRemovalProtectionModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, -1]  # noqa: E501
        if (self._configuration.client_side_validation and
                source not in allowed_values):
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def threshold_status(self):
        """Gets the threshold_status of this AppRemovalProtectionModel.  # noqa: E501

        Gets or sets the value of the ThresholdStatus in threshold table.  # noqa: E501

        :return: The threshold_status of this AppRemovalProtectionModel.  # noqa: E501
        :rtype: int
        """
        return self._threshold_status

    @threshold_status.setter
    def threshold_status(self, threshold_status):
        """Sets the threshold_status of this AppRemovalProtectionModel.

        Gets or sets the value of the ThresholdStatus in threshold table.  # noqa: E501

        :param threshold_status: The threshold_status of this AppRemovalProtectionModel.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                threshold_status not in allowed_values):
            raise ValueError(
                "Invalid value for `threshold_status` ({0}), must be one of {1}"  # noqa: E501
                .format(threshold_status, allowed_values)
            )

        self._threshold_status = threshold_status

    @property
    def threshold_id(self):
        """Gets the threshold_id of this AppRemovalProtectionModel.  # noqa: E501

        Gets or sets the ThresholdId for which command is queued.  # noqa: E501

        :return: The threshold_id of this AppRemovalProtectionModel.  # noqa: E501
        :rtype: int
        """
        return self._threshold_id

    @threshold_id.setter
    def threshold_id(self, threshold_id):
        """Sets the threshold_id of this AppRemovalProtectionModel.

        Gets or sets the ThresholdId for which command is queued.  # noqa: E501

        :param threshold_id: The threshold_id of this AppRemovalProtectionModel.  # noqa: E501
        :type: int
        """

        self._threshold_id = threshold_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppRemovalProtectionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppRemovalProtectionModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppRemovalProtectionModel):
            return True

        return self.to_dict() != other.to_dict()
