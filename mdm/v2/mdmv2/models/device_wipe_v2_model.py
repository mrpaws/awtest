# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class DeviceWipeV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disable_activation_key': 'bool',
        'disallow_proximity_setup': 'bool',
        'preserve_data_plan': 'bool',
        'wipe_type': 'str'
    }

    attribute_map = {
        'disable_activation_key': 'disableActivationKey',
        'disallow_proximity_setup': 'disallowProximitySetup',
        'preserve_data_plan': 'preserveDataPlan',
        'wipe_type': 'wipeType'
    }

    def __init__(self, disable_activation_key=None, disallow_proximity_setup=None, preserve_data_plan=None, wipe_type=None, _configuration=None):  # noqa: E501
        """DeviceWipeV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._disable_activation_key = None
        self._disallow_proximity_setup = None
        self._preserve_data_plan = None
        self._wipe_type = None
        self.discriminator = None

        if disable_activation_key is not None:
            self.disable_activation_key = disable_activation_key
        if disallow_proximity_setup is not None:
            self.disallow_proximity_setup = disallow_proximity_setup
        if preserve_data_plan is not None:
            self.preserve_data_plan = preserve_data_plan
        if wipe_type is not None:
            self.wipe_type = wipe_type

    @property
    def disable_activation_key(self):
        """Gets the disable_activation_key of this DeviceWipeV2Model.  # noqa: E501

        If set to true, and Activation Lock is enabled on a supervised iOS device, Activation lock will be cleared.  # noqa: E501

        :return: The disable_activation_key of this DeviceWipeV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._disable_activation_key

    @disable_activation_key.setter
    def disable_activation_key(self, disable_activation_key):
        """Sets the disable_activation_key of this DeviceWipeV2Model.

        If set to true, and Activation Lock is enabled on a supervised iOS device, Activation lock will be cleared.  # noqa: E501

        :param disable_activation_key: The disable_activation_key of this DeviceWipeV2Model.  # noqa: E501
        :type: bool
        """

        self._disable_activation_key = disable_activation_key

    @property
    def disallow_proximity_setup(self):
        """Gets the disallow_proximity_setup of this DeviceWipeV2Model.  # noqa: E501

        If set to true, the Proximity Setup screen will be skipped in the Setup Assistant on the next reboot of the device  # noqa: E501

        :return: The disallow_proximity_setup of this DeviceWipeV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._disallow_proximity_setup

    @disallow_proximity_setup.setter
    def disallow_proximity_setup(self, disallow_proximity_setup):
        """Sets the disallow_proximity_setup of this DeviceWipeV2Model.

        If set to true, the Proximity Setup screen will be skipped in the Setup Assistant on the next reboot of the device  # noqa: E501

        :param disallow_proximity_setup: The disallow_proximity_setup of this DeviceWipeV2Model.  # noqa: E501
        :type: bool
        """

        self._disallow_proximity_setup = disallow_proximity_setup

    @property
    def preserve_data_plan(self):
        """Gets the preserve_data_plan of this DeviceWipeV2Model.  # noqa: E501

        If set to true, and a data plan exists on the device, that data plan will be preserved after the device is erased  # noqa: E501

        :return: The preserve_data_plan of this DeviceWipeV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._preserve_data_plan

    @preserve_data_plan.setter
    def preserve_data_plan(self, preserve_data_plan):
        """Sets the preserve_data_plan of this DeviceWipeV2Model.

        If set to true, and a data plan exists on the device, that data plan will be preserved after the device is erased  # noqa: E501

        :param preserve_data_plan: The preserve_data_plan of this DeviceWipeV2Model.  # noqa: E501
        :type: bool
        """

        self._preserve_data_plan = preserve_data_plan

    @property
    def wipe_type(self):
        """Gets the wipe_type of this DeviceWipeV2Model.  # noqa: E501

        Type of wipe selected i.e. WIPE, WIPE_PERSIST_PROVISIONED_DATA, WIPE_PROTECTED, WIPE_PERSIST_USER_DATA  # noqa: E501

        :return: The wipe_type of this DeviceWipeV2Model.  # noqa: E501
        :rtype: str
        """
        return self._wipe_type

    @wipe_type.setter
    def wipe_type(self, wipe_type):
        """Sets the wipe_type of this DeviceWipeV2Model.

        Type of wipe selected i.e. WIPE, WIPE_PERSIST_PROVISIONED_DATA, WIPE_PROTECTED, WIPE_PERSIST_USER_DATA  # noqa: E501

        :param wipe_type: The wipe_type of this DeviceWipeV2Model.  # noqa: E501
        :type: str
        """

        self._wipe_type = wipe_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceWipeV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceWipeV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceWipeV2Model):
            return True

        return self.to_dict() != other.to_dict()
