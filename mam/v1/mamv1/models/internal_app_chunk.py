# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class InternalAppChunk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'str',
        'chunk_data': 'str',
        'chunk_sequence_number': 'int',
        'total_application_size': 'int',
        'chunk_size': 'int'
    }

    attribute_map = {
        'transaction_id': 'TransactionId',
        'chunk_data': 'ChunkData',
        'chunk_sequence_number': 'ChunkSequenceNumber',
        'total_application_size': 'TotalApplicationSize',
        'chunk_size': 'ChunkSize'
    }

    def __init__(self, transaction_id=None, chunk_data=None, chunk_sequence_number=None, total_application_size=None, chunk_size=None, _configuration=None):  # noqa: E501
        """InternalAppChunk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._transaction_id = None
        self._chunk_data = None
        self._chunk_sequence_number = None
        self._total_application_size = None
        self._chunk_size = None
        self.discriminator = None

        if transaction_id is not None:
            self.transaction_id = transaction_id
        if chunk_data is not None:
            self.chunk_data = chunk_data
        if chunk_sequence_number is not None:
            self.chunk_sequence_number = chunk_sequence_number
        if total_application_size is not None:
            self.total_application_size = total_application_size
        if chunk_size is not None:
            self.chunk_size = chunk_size

    @property
    def transaction_id(self):
        """Gets the transaction_id of this InternalAppChunk.  # noqa: E501

        Gets or sets transaction Identifier.  # noqa: E501

        :return: The transaction_id of this InternalAppChunk.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this InternalAppChunk.

        Gets or sets transaction Identifier.  # noqa: E501

        :param transaction_id: The transaction_id of this InternalAppChunk.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def chunk_data(self):
        """Gets the chunk_data of this InternalAppChunk.  # noqa: E501

        Gets or sets file content.  # noqa: E501

        :return: The chunk_data of this InternalAppChunk.  # noqa: E501
        :rtype: str
        """
        return self._chunk_data

    @chunk_data.setter
    def chunk_data(self, chunk_data):
        """Sets the chunk_data of this InternalAppChunk.

        Gets or sets file content.  # noqa: E501

        :param chunk_data: The chunk_data of this InternalAppChunk.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                chunk_data is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', chunk_data)):  # noqa: E501
            raise ValueError(r"Invalid value for `chunk_data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._chunk_data = chunk_data

    @property
    def chunk_sequence_number(self):
        """Gets the chunk_sequence_number of this InternalAppChunk.  # noqa: E501

        Gets or sets chunk Id for ordering the data.  # noqa: E501

        :return: The chunk_sequence_number of this InternalAppChunk.  # noqa: E501
        :rtype: int
        """
        return self._chunk_sequence_number

    @chunk_sequence_number.setter
    def chunk_sequence_number(self, chunk_sequence_number):
        """Sets the chunk_sequence_number of this InternalAppChunk.

        Gets or sets chunk Id for ordering the data.  # noqa: E501

        :param chunk_sequence_number: The chunk_sequence_number of this InternalAppChunk.  # noqa: E501
        :type: int
        """

        self._chunk_sequence_number = chunk_sequence_number

    @property
    def total_application_size(self):
        """Gets the total_application_size of this InternalAppChunk.  # noqa: E501

        Gets or sets total app size.  # noqa: E501

        :return: The total_application_size of this InternalAppChunk.  # noqa: E501
        :rtype: int
        """
        return self._total_application_size

    @total_application_size.setter
    def total_application_size(self, total_application_size):
        """Sets the total_application_size of this InternalAppChunk.

        Gets or sets total app size.  # noqa: E501

        :param total_application_size: The total_application_size of this InternalAppChunk.  # noqa: E501
        :type: int
        """

        self._total_application_size = total_application_size

    @property
    def chunk_size(self):
        """Gets the chunk_size of this InternalAppChunk.  # noqa: E501

        Gets or sets chunk Size.  # noqa: E501

        :return: The chunk_size of this InternalAppChunk.  # noqa: E501
        :rtype: int
        """
        return self._chunk_size

    @chunk_size.setter
    def chunk_size(self, chunk_size):
        """Sets the chunk_size of this InternalAppChunk.

        Gets or sets chunk Size.  # noqa: E501

        :param chunk_size: The chunk_size of this InternalAppChunk.  # noqa: E501
        :type: int
        """

        self._chunk_size = chunk_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InternalAppChunk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternalAppChunk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InternalAppChunk):
            return True

        return self.to_dict() != other.to_dict()
