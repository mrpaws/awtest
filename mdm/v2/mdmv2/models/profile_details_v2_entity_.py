# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class ProfileDetailsV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_id': 'int',
        'profile_name': 'str',
        'managed_by': 'str',
        'organization_group_id': 'int',
        'organization_group_uuid': 'str',
        'profile_status': 'str',
        'platform': 'str',
        'assignment_type': 'str',
        'assignment_smart_groups': 'list[ProfileSmartGroupV2Entity_]',
        'excluded_smart_groups': 'list[ProfileSmartGroupV2Entity_]',
        'profile_type': 'str',
        'profile_uuid': 'str',
        'context': 'int'
    }

    attribute_map = {
        'profile_id': 'ProfileId',
        'profile_name': 'ProfileName',
        'managed_by': 'ManagedBy',
        'organization_group_id': 'OrganizationGroupId',
        'organization_group_uuid': 'OrganizationGroupUuid',
        'profile_status': 'ProfileStatus',
        'platform': 'Platform',
        'assignment_type': 'AssignmentType',
        'assignment_smart_groups': 'AssignmentSmartGroups',
        'excluded_smart_groups': 'ExcludedSmartGroups',
        'profile_type': 'ProfileType',
        'profile_uuid': 'ProfileUuid',
        'context': 'Context'
    }

    def __init__(self, profile_id=None, profile_name=None, managed_by=None, organization_group_id=None, organization_group_uuid=None, profile_status=None, platform=None, assignment_type=None, assignment_smart_groups=None, excluded_smart_groups=None, profile_type=None, profile_uuid=None, context=None, _configuration=None):  # noqa: E501
        """ProfileDetailsV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._profile_id = None
        self._profile_name = None
        self._managed_by = None
        self._organization_group_id = None
        self._organization_group_uuid = None
        self._profile_status = None
        self._platform = None
        self._assignment_type = None
        self._assignment_smart_groups = None
        self._excluded_smart_groups = None
        self._profile_type = None
        self._profile_uuid = None
        self._context = None
        self.discriminator = None

        if profile_id is not None:
            self.profile_id = profile_id
        if profile_name is not None:
            self.profile_name = profile_name
        if managed_by is not None:
            self.managed_by = managed_by
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if profile_status is not None:
            self.profile_status = profile_status
        if platform is not None:
            self.platform = platform
        if assignment_type is not None:
            self.assignment_type = assignment_type
        if assignment_smart_groups is not None:
            self.assignment_smart_groups = assignment_smart_groups
        if excluded_smart_groups is not None:
            self.excluded_smart_groups = excluded_smart_groups
        if profile_type is not None:
            self.profile_type = profile_type
        if profile_uuid is not None:
            self.profile_uuid = profile_uuid
        if context is not None:
            self.context = context

    @property
    def profile_id(self):
        """Gets the profile_id of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets profile id.  # noqa: E501

        :return: The profile_id of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this ProfileDetailsV2Entity_.

        Gets or sets profile id.  # noqa: E501

        :param profile_id: The profile_id of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    @property
    def profile_name(self):
        """Gets the profile_name of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets name of the profile.  # noqa: E501

        :return: The profile_name of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this ProfileDetailsV2Entity_.

        Gets or sets name of the profile.  # noqa: E501

        :param profile_name: The profile_name of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def managed_by(self):
        """Gets the managed_by of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets profile's Organization Group name.  # noqa: E501

        :return: The managed_by of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this ProfileDetailsV2Entity_.

        Gets or sets profile's Organization Group name.  # noqa: E501

        :param managed_by: The managed_by of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: str
        """

        self._managed_by = managed_by

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets profile's Organization id.  # noqa: E501

        :return: The organization_group_id of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this ProfileDetailsV2Entity_.

        Gets or sets profile's Organization id.  # noqa: E501

        :param organization_group_id: The organization_group_id of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: int
        """

        self._organization_group_id = organization_group_id

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets globally unique identifier for Profile's Root Organization group.  # noqa: E501

        :return: The organization_group_uuid of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this ProfileDetailsV2Entity_.

        Gets or sets globally unique identifier for Profile's Root Organization group.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def profile_status(self):
        """Gets the profile_status of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets status of the Profile.  # noqa: E501

        :return: The profile_status of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._profile_status

    @profile_status.setter
    def profile_status(self, profile_status):
        """Sets the profile_status of this ProfileDetailsV2Entity_.

        Gets or sets status of the Profile.  # noqa: E501

        :param profile_status: The profile_status of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: str
        """

        self._profile_status = profile_status

    @property
    def platform(self):
        """Gets the platform of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets platform name of the profile.  # noqa: E501

        :return: The platform of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ProfileDetailsV2Entity_.

        Gets or sets platform name of the profile.  # noqa: E501

        :param platform: The platform of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def assignment_type(self):
        """Gets the assignment_type of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets profile's Assignment Type.  # noqa: E501

        :return: The assignment_type of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this ProfileDetailsV2Entity_.

        Gets or sets profile's Assignment Type.  # noqa: E501

        :param assignment_type: The assignment_type of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: str
        """

        self._assignment_type = assignment_type

    @property
    def assignment_smart_groups(self):
        """Gets the assignment_smart_groups of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets assignment Smart Groups.  # noqa: E501

        :return: The assignment_smart_groups of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: list[ProfileSmartGroupV2Entity_]
        """
        return self._assignment_smart_groups

    @assignment_smart_groups.setter
    def assignment_smart_groups(self, assignment_smart_groups):
        """Sets the assignment_smart_groups of this ProfileDetailsV2Entity_.

        Gets or sets assignment Smart Groups.  # noqa: E501

        :param assignment_smart_groups: The assignment_smart_groups of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: list[ProfileSmartGroupV2Entity_]
        """

        self._assignment_smart_groups = assignment_smart_groups

    @property
    def excluded_smart_groups(self):
        """Gets the excluded_smart_groups of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets excluded Smart Groups.  # noqa: E501

        :return: The excluded_smart_groups of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: list[ProfileSmartGroupV2Entity_]
        """
        return self._excluded_smart_groups

    @excluded_smart_groups.setter
    def excluded_smart_groups(self, excluded_smart_groups):
        """Sets the excluded_smart_groups of this ProfileDetailsV2Entity_.

        Gets or sets excluded Smart Groups.  # noqa: E501

        :param excluded_smart_groups: The excluded_smart_groups of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: list[ProfileSmartGroupV2Entity_]
        """

        self._excluded_smart_groups = excluded_smart_groups

    @property
    def profile_type(self):
        """Gets the profile_type of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets profile type.  # noqa: E501

        :return: The profile_type of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._profile_type

    @profile_type.setter
    def profile_type(self, profile_type):
        """Sets the profile_type of this ProfileDetailsV2Entity_.

        Gets or sets profile type.  # noqa: E501

        :param profile_type: The profile_type of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: str
        """

        self._profile_type = profile_type

    @property
    def profile_uuid(self):
        """Gets the profile_uuid of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets profile uuid.  # noqa: E501

        :return: The profile_uuid of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._profile_uuid

    @profile_uuid.setter
    def profile_uuid(self, profile_uuid):
        """Sets the profile_uuid of this ProfileDetailsV2Entity_.

        Gets or sets profile uuid.  # noqa: E501

        :param profile_uuid: The profile_uuid of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: str
        """

        self._profile_uuid = profile_uuid

    @property
    def context(self):
        """Gets the context of this ProfileDetailsV2Entity_.  # noqa: E501

        Gets or sets context of the Profile.  # noqa: E501

        :return: The context of this ProfileDetailsV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ProfileDetailsV2Entity_.

        Gets or sets context of the Profile.  # noqa: E501

        :param context: The context of this ProfileDetailsV2Entity_.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if (self._configuration.client_side_validation and
                context not in allowed_values):
            raise ValueError(
                "Invalid value for `context` ({0}), must be one of {1}"  # noqa: E501
                .format(context, allowed_values)
            )

        self._context = context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileDetailsV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileDetailsV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProfileDetailsV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
