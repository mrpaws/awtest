# coding: utf-8

"""
    MDM API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv3.configuration import Configuration


class DeviceExtendedV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'udid': 'str',
        'serial_number': 'str',
        'imei': 'str',
        'eas_ids': 'EasIds',
        'asset_number': 'str',
        'device_friendly_name': 'str',
        'device_reported_name': 'str',
        'organization_group_uuid': 'str',
        'organization_group_name': 'str',
        'enrollment_user_name': 'str',
        'enrollment_user_uuid': 'str',
        'enrollment_user_email_address': 'str',
        'ownership': 'int',
        'platform_name': 'str',
        'device_type': 'int',
        'model_identifier': 'str',
        'model': 'str',
        'operating_system': 'str',
        'last_seen': 'datetime',
        'enrollment_status': 'int',
        'compliance_status': 'int',
        'compromised_status': 'bool',
        'last_enrolled_on': 'datetime',
        'last_compliance_check_on': 'datetime',
        'last_compromised_check_on': 'datetime',
        'is_supervised': 'bool',
        'is_remote_management_enabled': 'str',
        'data_encryption_yn': 'str',
        'ac_line_status': 'int',
        'virtual_memory': 'int',
        'oem_info': 'str',
        'device_capacity': 'int',
        'available_device_capacity': 'int',
        'last_system_sample_time': 'datetime',
        'is_device_dnd_enabled': 'bool',
        'is_device_locator_enabled': 'bool',
        'is_cloud_backup_enabled': 'bool',
        'is_activation_lock_enabled': 'bool',
        'is_network_tethered': 'bool',
        'battery_level': 'str',
        'last_network_lan_sample_time': 'datetime',
        'last_bluetooth_sample_time': 'datetime',
        'managed_by': 'int',
        'data_protection_status': 'int',
        'processor_architecture': 'int',
        'os_build_version': 'str',
        'wifi_ssid': 'str',
        'device_cellular_network_info': 'list[DeviceCellularInfoModelV2]',
        'device_network_info': 'list[DeviceNetworkInfoV2]',
        'time_zone': 'str',
        'compliance_summary': 'DeviceComplianceSearchResultV2Model',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'udid': 'udid',
        'serial_number': 'serial_number',
        'imei': 'imei',
        'eas_ids': 'eas_ids',
        'asset_number': 'asset_number',
        'device_friendly_name': 'device_friendly_name',
        'device_reported_name': 'device_reported_name',
        'organization_group_uuid': 'organization_group_uuid',
        'organization_group_name': 'organization_group_name',
        'enrollment_user_name': 'enrollment_user_name',
        'enrollment_user_uuid': 'enrollment_user_uuid',
        'enrollment_user_email_address': 'enrollment_user_email_address',
        'ownership': 'ownership',
        'platform_name': 'platform_name',
        'device_type': 'device_type',
        'model_identifier': 'model_identifier',
        'model': 'model',
        'operating_system': 'operating_system',
        'last_seen': 'last_seen',
        'enrollment_status': 'enrollment_status',
        'compliance_status': 'compliance_status',
        'compromised_status': 'compromised_status',
        'last_enrolled_on': 'last_enrolled_on',
        'last_compliance_check_on': 'last_compliance_check_on',
        'last_compromised_check_on': 'last_compromised_check_on',
        'is_supervised': 'is_supervised',
        'is_remote_management_enabled': 'is_remote_management_enabled',
        'data_encryption_yn': 'data_encryption_yn',
        'ac_line_status': 'ac_line_status',
        'virtual_memory': 'virtual_memory',
        'oem_info': 'oem_info',
        'device_capacity': 'device_capacity',
        'available_device_capacity': 'available_device_capacity',
        'last_system_sample_time': 'last_system_sample_time',
        'is_device_dnd_enabled': 'is_device_dnd_enabled',
        'is_device_locator_enabled': 'is_device_locator_enabled',
        'is_cloud_backup_enabled': 'is_cloud_backup_enabled',
        'is_activation_lock_enabled': 'is_activation_lock_enabled',
        'is_network_tethered': 'is_network_tethered',
        'battery_level': 'battery_level',
        'last_network_lan_sample_time': 'last_network_lan_sample_time',
        'last_bluetooth_sample_time': 'last_bluetooth_sample_time',
        'managed_by': 'managed_by',
        'data_protection_status': 'data_protection_status',
        'processor_architecture': 'processor_architecture',
        'os_build_version': 'os_build_version',
        'wifi_ssid': 'wifi_ssid',
        'device_cellular_network_info': 'device_cellular_network_info',
        'device_network_info': 'device_network_info',
        'time_zone': 'time_zone',
        'compliance_summary': 'compliance_summary',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, udid=None, serial_number=None, imei=None, eas_ids=None, asset_number=None, device_friendly_name=None, device_reported_name=None, organization_group_uuid=None, organization_group_name=None, enrollment_user_name=None, enrollment_user_uuid=None, enrollment_user_email_address=None, ownership=None, platform_name=None, device_type=None, model_identifier=None, model=None, operating_system=None, last_seen=None, enrollment_status=None, compliance_status=None, compromised_status=None, last_enrolled_on=None, last_compliance_check_on=None, last_compromised_check_on=None, is_supervised=None, is_remote_management_enabled=None, data_encryption_yn=None, ac_line_status=None, virtual_memory=None, oem_info=None, device_capacity=None, available_device_capacity=None, last_system_sample_time=None, is_device_dnd_enabled=None, is_device_locator_enabled=None, is_cloud_backup_enabled=None, is_activation_lock_enabled=None, is_network_tethered=None, battery_level=None, last_network_lan_sample_time=None, last_bluetooth_sample_time=None, managed_by=None, data_protection_status=None, processor_architecture=None, os_build_version=None, wifi_ssid=None, device_cellular_network_info=None, device_network_info=None, time_zone=None, compliance_summary=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceExtendedV2 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._udid = None
        self._serial_number = None
        self._imei = None
        self._eas_ids = None
        self._asset_number = None
        self._device_friendly_name = None
        self._device_reported_name = None
        self._organization_group_uuid = None
        self._organization_group_name = None
        self._enrollment_user_name = None
        self._enrollment_user_uuid = None
        self._enrollment_user_email_address = None
        self._ownership = None
        self._platform_name = None
        self._device_type = None
        self._model_identifier = None
        self._model = None
        self._operating_system = None
        self._last_seen = None
        self._enrollment_status = None
        self._compliance_status = None
        self._compromised_status = None
        self._last_enrolled_on = None
        self._last_compliance_check_on = None
        self._last_compromised_check_on = None
        self._is_supervised = None
        self._is_remote_management_enabled = None
        self._data_encryption_yn = None
        self._ac_line_status = None
        self._virtual_memory = None
        self._oem_info = None
        self._device_capacity = None
        self._available_device_capacity = None
        self._last_system_sample_time = None
        self._is_device_dnd_enabled = None
        self._is_device_locator_enabled = None
        self._is_cloud_backup_enabled = None
        self._is_activation_lock_enabled = None
        self._is_network_tethered = None
        self._battery_level = None
        self._last_network_lan_sample_time = None
        self._last_bluetooth_sample_time = None
        self._managed_by = None
        self._data_protection_status = None
        self._processor_architecture = None
        self._os_build_version = None
        self._wifi_ssid = None
        self._device_cellular_network_info = None
        self._device_network_info = None
        self._time_zone = None
        self._compliance_summary = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if udid is not None:
            self.udid = udid
        if serial_number is not None:
            self.serial_number = serial_number
        if imei is not None:
            self.imei = imei
        if eas_ids is not None:
            self.eas_ids = eas_ids
        if asset_number is not None:
            self.asset_number = asset_number
        if device_friendly_name is not None:
            self.device_friendly_name = device_friendly_name
        if device_reported_name is not None:
            self.device_reported_name = device_reported_name
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if organization_group_name is not None:
            self.organization_group_name = organization_group_name
        if enrollment_user_name is not None:
            self.enrollment_user_name = enrollment_user_name
        if enrollment_user_uuid is not None:
            self.enrollment_user_uuid = enrollment_user_uuid
        if enrollment_user_email_address is not None:
            self.enrollment_user_email_address = enrollment_user_email_address
        if ownership is not None:
            self.ownership = ownership
        if platform_name is not None:
            self.platform_name = platform_name
        if device_type is not None:
            self.device_type = device_type
        if model_identifier is not None:
            self.model_identifier = model_identifier
        if model is not None:
            self.model = model
        if operating_system is not None:
            self.operating_system = operating_system
        if last_seen is not None:
            self.last_seen = last_seen
        if enrollment_status is not None:
            self.enrollment_status = enrollment_status
        if compliance_status is not None:
            self.compliance_status = compliance_status
        if compromised_status is not None:
            self.compromised_status = compromised_status
        if last_enrolled_on is not None:
            self.last_enrolled_on = last_enrolled_on
        if last_compliance_check_on is not None:
            self.last_compliance_check_on = last_compliance_check_on
        if last_compromised_check_on is not None:
            self.last_compromised_check_on = last_compromised_check_on
        if is_supervised is not None:
            self.is_supervised = is_supervised
        if is_remote_management_enabled is not None:
            self.is_remote_management_enabled = is_remote_management_enabled
        if data_encryption_yn is not None:
            self.data_encryption_yn = data_encryption_yn
        if ac_line_status is not None:
            self.ac_line_status = ac_line_status
        if virtual_memory is not None:
            self.virtual_memory = virtual_memory
        if oem_info is not None:
            self.oem_info = oem_info
        if device_capacity is not None:
            self.device_capacity = device_capacity
        if available_device_capacity is not None:
            self.available_device_capacity = available_device_capacity
        if last_system_sample_time is not None:
            self.last_system_sample_time = last_system_sample_time
        if is_device_dnd_enabled is not None:
            self.is_device_dnd_enabled = is_device_dnd_enabled
        if is_device_locator_enabled is not None:
            self.is_device_locator_enabled = is_device_locator_enabled
        if is_cloud_backup_enabled is not None:
            self.is_cloud_backup_enabled = is_cloud_backup_enabled
        if is_activation_lock_enabled is not None:
            self.is_activation_lock_enabled = is_activation_lock_enabled
        if is_network_tethered is not None:
            self.is_network_tethered = is_network_tethered
        if battery_level is not None:
            self.battery_level = battery_level
        if last_network_lan_sample_time is not None:
            self.last_network_lan_sample_time = last_network_lan_sample_time
        if last_bluetooth_sample_time is not None:
            self.last_bluetooth_sample_time = last_bluetooth_sample_time
        if managed_by is not None:
            self.managed_by = managed_by
        if data_protection_status is not None:
            self.data_protection_status = data_protection_status
        if processor_architecture is not None:
            self.processor_architecture = processor_architecture
        if os_build_version is not None:
            self.os_build_version = os_build_version
        if wifi_ssid is not None:
            self.wifi_ssid = wifi_ssid
        if device_cellular_network_info is not None:
            self.device_cellular_network_info = device_cellular_network_info
        if device_network_info is not None:
            self.device_network_info = device_network_info
        if time_zone is not None:
            self.time_zone = time_zone
        if compliance_summary is not None:
            self.compliance_summary = compliance_summary
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def udid(self):
        """Gets the udid of this DeviceExtendedV2.  # noqa: E501

        UDID of the device.  # noqa: E501

        :return: The udid of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this DeviceExtendedV2.

        UDID of the device.  # noqa: E501

        :param udid: The udid of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._udid = udid

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceExtendedV2.  # noqa: E501

        Serial number of the device.  # noqa: E501

        :return: The serial_number of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceExtendedV2.

        Serial number of the device.  # noqa: E501

        :param serial_number: The serial_number of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def imei(self):
        """Gets the imei of this DeviceExtendedV2.  # noqa: E501

        IMEI hardware identifier.  # noqa: E501

        :return: The imei of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this DeviceExtendedV2.

        IMEI hardware identifier.  # noqa: E501

        :param imei: The imei of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._imei = imei

    @property
    def eas_ids(self):
        """Gets the eas_ids of this DeviceExtendedV2.  # noqa: E501

        Unique identifiers for devices mail client.  # noqa: E501

        :return: The eas_ids of this DeviceExtendedV2.  # noqa: E501
        :rtype: EasIds
        """
        return self._eas_ids

    @eas_ids.setter
    def eas_ids(self, eas_ids):
        """Sets the eas_ids of this DeviceExtendedV2.

        Unique identifiers for devices mail client.  # noqa: E501

        :param eas_ids: The eas_ids of this DeviceExtendedV2.  # noqa: E501
        :type: EasIds
        """

        self._eas_ids = eas_ids

    @property
    def asset_number(self):
        """Gets the asset_number of this DeviceExtendedV2.  # noqa: E501

        Asset number of the device.  # noqa: E501

        :return: The asset_number of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this DeviceExtendedV2.

        Asset number of the device.  # noqa: E501

        :param asset_number: The asset_number of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._asset_number = asset_number

    @property
    def device_friendly_name(self):
        """Gets the device_friendly_name of this DeviceExtendedV2.  # noqa: E501

        Device friendly name.  # noqa: E501

        :return: The device_friendly_name of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._device_friendly_name

    @device_friendly_name.setter
    def device_friendly_name(self, device_friendly_name):
        """Sets the device_friendly_name of this DeviceExtendedV2.

        Device friendly name.  # noqa: E501

        :param device_friendly_name: The device_friendly_name of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._device_friendly_name = device_friendly_name

    @property
    def device_reported_name(self):
        """Gets the device_reported_name of this DeviceExtendedV2.  # noqa: E501

        Device reported name.  # noqa: E501

        :return: The device_reported_name of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._device_reported_name

    @device_reported_name.setter
    def device_reported_name(self, device_reported_name):
        """Sets the device_reported_name of this DeviceExtendedV2.

        Device reported name.  # noqa: E501

        :param device_reported_name: The device_reported_name of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._device_reported_name = device_reported_name

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this DeviceExtendedV2.  # noqa: E501

        UUID of the organization group.  # noqa: E501

        :return: The organization_group_uuid of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this DeviceExtendedV2.

        UUID of the organization group.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def organization_group_name(self):
        """Gets the organization_group_name of this DeviceExtendedV2.  # noqa: E501

        Organization group name the device is enrolled to.  # noqa: E501

        :return: The organization_group_name of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_name

    @organization_group_name.setter
    def organization_group_name(self, organization_group_name):
        """Sets the organization_group_name of this DeviceExtendedV2.

        Organization group name the device is enrolled to.  # noqa: E501

        :param organization_group_name: The organization_group_name of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._organization_group_name = organization_group_name

    @property
    def enrollment_user_name(self):
        """Gets the enrollment_user_name of this DeviceExtendedV2.  # noqa: E501

        Name of the user the device is enrolled under.  # noqa: E501

        :return: The enrollment_user_name of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_user_name

    @enrollment_user_name.setter
    def enrollment_user_name(self, enrollment_user_name):
        """Sets the enrollment_user_name of this DeviceExtendedV2.

        Name of the user the device is enrolled under.  # noqa: E501

        :param enrollment_user_name: The enrollment_user_name of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._enrollment_user_name = enrollment_user_name

    @property
    def enrollment_user_uuid(self):
        """Gets the enrollment_user_uuid of this DeviceExtendedV2.  # noqa: E501

        UUID of the user the device is enrolled under.  # noqa: E501

        :return: The enrollment_user_uuid of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_user_uuid

    @enrollment_user_uuid.setter
    def enrollment_user_uuid(self, enrollment_user_uuid):
        """Sets the enrollment_user_uuid of this DeviceExtendedV2.

        UUID of the user the device is enrolled under.  # noqa: E501

        :param enrollment_user_uuid: The enrollment_user_uuid of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._enrollment_user_uuid = enrollment_user_uuid

    @property
    def enrollment_user_email_address(self):
        """Gets the enrollment_user_email_address of this DeviceExtendedV2.  # noqa: E501

        E-mail address of the user the device is enrolled under.  # noqa: E501

        :return: The enrollment_user_email_address of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_user_email_address

    @enrollment_user_email_address.setter
    def enrollment_user_email_address(self, enrollment_user_email_address):
        """Sets the enrollment_user_email_address of this DeviceExtendedV2.

        E-mail address of the user the device is enrolled under.  # noqa: E501

        :param enrollment_user_email_address: The enrollment_user_email_address of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._enrollment_user_email_address = enrollment_user_email_address

    @property
    def ownership(self):
        """Gets the ownership of this DeviceExtendedV2.  # noqa: E501

        Ownership type of the device.  # noqa: E501

        :return: The ownership of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this DeviceExtendedV2.

        Ownership type of the device.  # noqa: E501

        :param ownership: The ownership of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                ownership not in allowed_values):
            raise ValueError(
                "Invalid value for `ownership` ({0}), must be one of {1}"  # noqa: E501
                .format(ownership, allowed_values)
            )

        self._ownership = ownership

    @property
    def platform_name(self):
        """Gets the platform_name of this DeviceExtendedV2.  # noqa: E501

        Name of the platform.  # noqa: E501

        :return: The platform_name of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this DeviceExtendedV2.

        Name of the platform.  # noqa: E501

        :param platform_name: The platform_name of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._platform_name = platform_name

    @property
    def device_type(self):
        """Gets the device_type of this DeviceExtendedV2.  # noqa: E501

        Type of the device.  # noqa: E501

        :return: The device_type of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceExtendedV2.

        Type of the device.  # noqa: E501

        :param device_type: The device_type of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 100, 101, 102, 103, 104, 105, 200, 201]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_type not in allowed_values):
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def model_identifier(self):
        """Gets the model_identifier of this DeviceExtendedV2.  # noqa: E501

        Device model identifier.  # noqa: E501

        :return: The model_identifier of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._model_identifier

    @model_identifier.setter
    def model_identifier(self, model_identifier):
        """Sets the model_identifier of this DeviceExtendedV2.

        Device model identifier.  # noqa: E501

        :param model_identifier: The model_identifier of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._model_identifier = model_identifier

    @property
    def model(self):
        """Gets the model of this DeviceExtendedV2.  # noqa: E501

        Model name of the device.  # noqa: E501

        :return: The model of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceExtendedV2.

        Model name of the device.  # noqa: E501

        :param model: The model of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def operating_system(self):
        """Gets the operating_system of this DeviceExtendedV2.  # noqa: E501

        Operating system of the device.  # noqa: E501

        :return: The operating_system of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this DeviceExtendedV2.

        Operating system of the device.  # noqa: E501

        :param operating_system: The operating_system of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def last_seen(self):
        """Gets the last_seen of this DeviceExtendedV2.  # noqa: E501

        Time the device last reported any status.  # noqa: E501

        :return: The last_seen of this DeviceExtendedV2.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this DeviceExtendedV2.

        Time the device last reported any status.  # noqa: E501

        :param last_seen: The last_seen of this DeviceExtendedV2.  # noqa: E501
        :type: datetime
        """

        self._last_seen = last_seen

    @property
    def enrollment_status(self):
        """Gets the enrollment_status of this DeviceExtendedV2.  # noqa: E501

        Enrollment status of the device.  # noqa: E501

        :return: The enrollment_status of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_status

    @enrollment_status.setter
    def enrollment_status(self, enrollment_status):
        """Sets the enrollment_status of this DeviceExtendedV2.

        Enrollment status of the device.  # noqa: E501

        :param enrollment_status: The enrollment_status of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16]  # noqa: E501
        if (self._configuration.client_side_validation and
                enrollment_status not in allowed_values):
            raise ValueError(
                "Invalid value for `enrollment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(enrollment_status, allowed_values)
            )

        self._enrollment_status = enrollment_status

    @property
    def compliance_status(self):
        """Gets the compliance_status of this DeviceExtendedV2.  # noqa: E501

        Compliance status of the device.  # noqa: E501

        :return: The compliance_status of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._compliance_status

    @compliance_status.setter
    def compliance_status(self, compliance_status):
        """Sets the compliance_status of this DeviceExtendedV2.

        Compliance status of the device.  # noqa: E501

        :param compliance_status: The compliance_status of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  # noqa: E501
        if (self._configuration.client_side_validation and
                compliance_status not in allowed_values):
            raise ValueError(
                "Invalid value for `compliance_status` ({0}), must be one of {1}"  # noqa: E501
                .format(compliance_status, allowed_values)
            )

        self._compliance_status = compliance_status

    @property
    def compromised_status(self):
        """Gets the compromised_status of this DeviceExtendedV2.  # noqa: E501

        Compromised status of the device.  # noqa: E501

        :return: The compromised_status of this DeviceExtendedV2.  # noqa: E501
        :rtype: bool
        """
        return self._compromised_status

    @compromised_status.setter
    def compromised_status(self, compromised_status):
        """Sets the compromised_status of this DeviceExtendedV2.

        Compromised status of the device.  # noqa: E501

        :param compromised_status: The compromised_status of this DeviceExtendedV2.  # noqa: E501
        :type: bool
        """

        self._compromised_status = compromised_status

    @property
    def last_enrolled_on(self):
        """Gets the last_enrolled_on of this DeviceExtendedV2.  # noqa: E501

        This gives the Date-Time of last enrollment date.  # noqa: E501

        :return: The last_enrolled_on of this DeviceExtendedV2.  # noqa: E501
        :rtype: datetime
        """
        return self._last_enrolled_on

    @last_enrolled_on.setter
    def last_enrolled_on(self, last_enrolled_on):
        """Sets the last_enrolled_on of this DeviceExtendedV2.

        This gives the Date-Time of last enrollment date.  # noqa: E501

        :param last_enrolled_on: The last_enrolled_on of this DeviceExtendedV2.  # noqa: E501
        :type: datetime
        """

        self._last_enrolled_on = last_enrolled_on

    @property
    def last_compliance_check_on(self):
        """Gets the last_compliance_check_on of this DeviceExtendedV2.  # noqa: E501

        This gives the Date-time of when the last compliance check was performed.  # noqa: E501

        :return: The last_compliance_check_on of this DeviceExtendedV2.  # noqa: E501
        :rtype: datetime
        """
        return self._last_compliance_check_on

    @last_compliance_check_on.setter
    def last_compliance_check_on(self, last_compliance_check_on):
        """Sets the last_compliance_check_on of this DeviceExtendedV2.

        This gives the Date-time of when the last compliance check was performed.  # noqa: E501

        :param last_compliance_check_on: The last_compliance_check_on of this DeviceExtendedV2.  # noqa: E501
        :type: datetime
        """

        self._last_compliance_check_on = last_compliance_check_on

    @property
    def last_compromised_check_on(self):
        """Gets the last_compromised_check_on of this DeviceExtendedV2.  # noqa: E501

        This gives the Date-time of when the last compromised data was received.  # noqa: E501

        :return: The last_compromised_check_on of this DeviceExtendedV2.  # noqa: E501
        :rtype: datetime
        """
        return self._last_compromised_check_on

    @last_compromised_check_on.setter
    def last_compromised_check_on(self, last_compromised_check_on):
        """Sets the last_compromised_check_on of this DeviceExtendedV2.

        This gives the Date-time of when the last compromised data was received.  # noqa: E501

        :param last_compromised_check_on: The last_compromised_check_on of this DeviceExtendedV2.  # noqa: E501
        :type: datetime
        """

        self._last_compromised_check_on = last_compromised_check_on

    @property
    def is_supervised(self):
        """Gets the is_supervised of this DeviceExtendedV2.  # noqa: E501

        Supervised status of the device.  # noqa: E501

        :return: The is_supervised of this DeviceExtendedV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_supervised

    @is_supervised.setter
    def is_supervised(self, is_supervised):
        """Sets the is_supervised of this DeviceExtendedV2.

        Supervised status of the device.  # noqa: E501

        :param is_supervised: The is_supervised of this DeviceExtendedV2.  # noqa: E501
        :type: bool
        """

        self._is_supervised = is_supervised

    @property
    def is_remote_management_enabled(self):
        """Gets the is_remote_management_enabled of this DeviceExtendedV2.  # noqa: E501

        Remote management enabled status of the device.  # noqa: E501

        :return: The is_remote_management_enabled of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._is_remote_management_enabled

    @is_remote_management_enabled.setter
    def is_remote_management_enabled(self, is_remote_management_enabled):
        """Sets the is_remote_management_enabled of this DeviceExtendedV2.

        Remote management enabled status of the device.  # noqa: E501

        :param is_remote_management_enabled: The is_remote_management_enabled of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._is_remote_management_enabled = is_remote_management_enabled

    @property
    def data_encryption_yn(self):
        """Gets the data_encryption_yn of this DeviceExtendedV2.  # noqa: E501

        Data encryption status of the device.  # noqa: E501

        :return: The data_encryption_yn of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._data_encryption_yn

    @data_encryption_yn.setter
    def data_encryption_yn(self, data_encryption_yn):
        """Sets the data_encryption_yn of this DeviceExtendedV2.

        Data encryption status of the device.  # noqa: E501

        :param data_encryption_yn: The data_encryption_yn of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._data_encryption_yn = data_encryption_yn

    @property
    def ac_line_status(self):
        """Gets the ac_line_status of this DeviceExtendedV2.  # noqa: E501

        AC line status of the device.  # noqa: E501

        :return: The ac_line_status of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._ac_line_status

    @ac_line_status.setter
    def ac_line_status(self, ac_line_status):
        """Sets the ac_line_status of this DeviceExtendedV2.

        AC line status of the device.  # noqa: E501

        :param ac_line_status: The ac_line_status of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """

        self._ac_line_status = ac_line_status

    @property
    def virtual_memory(self):
        """Gets the virtual_memory of this DeviceExtendedV2.  # noqa: E501

        Virtual memory of the device.  # noqa: E501

        :return: The virtual_memory of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._virtual_memory

    @virtual_memory.setter
    def virtual_memory(self, virtual_memory):
        """Sets the virtual_memory of this DeviceExtendedV2.

        Virtual memory of the device.  # noqa: E501

        :param virtual_memory: The virtual_memory of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """

        self._virtual_memory = virtual_memory

    @property
    def oem_info(self):
        """Gets the oem_info of this DeviceExtendedV2.  # noqa: E501

        Name of the device manufacturer.  # noqa: E501

        :return: The oem_info of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._oem_info

    @oem_info.setter
    def oem_info(self, oem_info):
        """Sets the oem_info of this DeviceExtendedV2.

        Name of the device manufacturer.  # noqa: E501

        :param oem_info: The oem_info of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._oem_info = oem_info

    @property
    def device_capacity(self):
        """Gets the device_capacity of this DeviceExtendedV2.  # noqa: E501

        Device capacity.  # noqa: E501

        :return: The device_capacity of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._device_capacity

    @device_capacity.setter
    def device_capacity(self, device_capacity):
        """Sets the device_capacity of this DeviceExtendedV2.

        Device capacity.  # noqa: E501

        :param device_capacity: The device_capacity of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """

        self._device_capacity = device_capacity

    @property
    def available_device_capacity(self):
        """Gets the available_device_capacity of this DeviceExtendedV2.  # noqa: E501

        Available device capacity.  # noqa: E501

        :return: The available_device_capacity of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._available_device_capacity

    @available_device_capacity.setter
    def available_device_capacity(self, available_device_capacity):
        """Sets the available_device_capacity of this DeviceExtendedV2.

        Available device capacity.  # noqa: E501

        :param available_device_capacity: The available_device_capacity of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """

        self._available_device_capacity = available_device_capacity

    @property
    def last_system_sample_time(self):
        """Gets the last_system_sample_time of this DeviceExtendedV2.  # noqa: E501

        Last System Sample time of the device.  # noqa: E501

        :return: The last_system_sample_time of this DeviceExtendedV2.  # noqa: E501
        :rtype: datetime
        """
        return self._last_system_sample_time

    @last_system_sample_time.setter
    def last_system_sample_time(self, last_system_sample_time):
        """Sets the last_system_sample_time of this DeviceExtendedV2.

        Last System Sample time of the device.  # noqa: E501

        :param last_system_sample_time: The last_system_sample_time of this DeviceExtendedV2.  # noqa: E501
        :type: datetime
        """

        self._last_system_sample_time = last_system_sample_time

    @property
    def is_device_dnd_enabled(self):
        """Gets the is_device_dnd_enabled of this DeviceExtendedV2.  # noqa: E501

        This gives information about whether the device is in do not disturb mode or not.  # noqa: E501

        :return: The is_device_dnd_enabled of this DeviceExtendedV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_device_dnd_enabled

    @is_device_dnd_enabled.setter
    def is_device_dnd_enabled(self, is_device_dnd_enabled):
        """Sets the is_device_dnd_enabled of this DeviceExtendedV2.

        This gives information about whether the device is in do not disturb mode or not.  # noqa: E501

        :param is_device_dnd_enabled: The is_device_dnd_enabled of this DeviceExtendedV2.  # noqa: E501
        :type: bool
        """

        self._is_device_dnd_enabled = is_device_dnd_enabled

    @property
    def is_device_locator_enabled(self):
        """Gets the is_device_locator_enabled of this DeviceExtendedV2.  # noqa: E501

        This gives information about whether the device locator is enabled or not.  # noqa: E501

        :return: The is_device_locator_enabled of this DeviceExtendedV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_device_locator_enabled

    @is_device_locator_enabled.setter
    def is_device_locator_enabled(self, is_device_locator_enabled):
        """Sets the is_device_locator_enabled of this DeviceExtendedV2.

        This gives information about whether the device locator is enabled or not.  # noqa: E501

        :param is_device_locator_enabled: The is_device_locator_enabled of this DeviceExtendedV2.  # noqa: E501
        :type: bool
        """

        self._is_device_locator_enabled = is_device_locator_enabled

    @property
    def is_cloud_backup_enabled(self):
        """Gets the is_cloud_backup_enabled of this DeviceExtendedV2.  # noqa: E501

        This gives information about whether the device cloud backup is enabled or not.  # noqa: E501

        :return: The is_cloud_backup_enabled of this DeviceExtendedV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_cloud_backup_enabled

    @is_cloud_backup_enabled.setter
    def is_cloud_backup_enabled(self, is_cloud_backup_enabled):
        """Sets the is_cloud_backup_enabled of this DeviceExtendedV2.

        This gives information about whether the device cloud backup is enabled or not.  # noqa: E501

        :param is_cloud_backup_enabled: The is_cloud_backup_enabled of this DeviceExtendedV2.  # noqa: E501
        :type: bool
        """

        self._is_cloud_backup_enabled = is_cloud_backup_enabled

    @property
    def is_activation_lock_enabled(self):
        """Gets the is_activation_lock_enabled of this DeviceExtendedV2.  # noqa: E501

        This gives information about whether the device activation lock is enabled or not.  # noqa: E501

        :return: The is_activation_lock_enabled of this DeviceExtendedV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_activation_lock_enabled

    @is_activation_lock_enabled.setter
    def is_activation_lock_enabled(self, is_activation_lock_enabled):
        """Sets the is_activation_lock_enabled of this DeviceExtendedV2.

        This gives information about whether the device activation lock is enabled or not.  # noqa: E501

        :param is_activation_lock_enabled: The is_activation_lock_enabled of this DeviceExtendedV2.  # noqa: E501
        :type: bool
        """

        self._is_activation_lock_enabled = is_activation_lock_enabled

    @property
    def is_network_tethered(self):
        """Gets the is_network_tethered of this DeviceExtendedV2.  # noqa: E501

        This gives information about whether the iOS device is network tethered or not.  # noqa: E501

        :return: The is_network_tethered of this DeviceExtendedV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_network_tethered

    @is_network_tethered.setter
    def is_network_tethered(self, is_network_tethered):
        """Sets the is_network_tethered of this DeviceExtendedV2.

        This gives information about whether the iOS device is network tethered or not.  # noqa: E501

        :param is_network_tethered: The is_network_tethered of this DeviceExtendedV2.  # noqa: E501
        :type: bool
        """

        self._is_network_tethered = is_network_tethered

    @property
    def battery_level(self):
        """Gets the battery_level of this DeviceExtendedV2.  # noqa: E501

        This gives information about the battery level of the iOS device.  # noqa: E501

        :return: The battery_level of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._battery_level

    @battery_level.setter
    def battery_level(self, battery_level):
        """Sets the battery_level of this DeviceExtendedV2.

        This gives information about the battery level of the iOS device.  # noqa: E501

        :param battery_level: The battery_level of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._battery_level = battery_level

    @property
    def last_network_lan_sample_time(self):
        """Gets the last_network_lan_sample_time of this DeviceExtendedV2.  # noqa: E501

        Last Network LAN Sample time of the device.  # noqa: E501

        :return: The last_network_lan_sample_time of this DeviceExtendedV2.  # noqa: E501
        :rtype: datetime
        """
        return self._last_network_lan_sample_time

    @last_network_lan_sample_time.setter
    def last_network_lan_sample_time(self, last_network_lan_sample_time):
        """Sets the last_network_lan_sample_time of this DeviceExtendedV2.

        Last Network LAN Sample time of the device.  # noqa: E501

        :param last_network_lan_sample_time: The last_network_lan_sample_time of this DeviceExtendedV2.  # noqa: E501
        :type: datetime
        """

        self._last_network_lan_sample_time = last_network_lan_sample_time

    @property
    def last_bluetooth_sample_time(self):
        """Gets the last_bluetooth_sample_time of this DeviceExtendedV2.  # noqa: E501

        Last Bluetooth Sample time of the device.  # noqa: E501

        :return: The last_bluetooth_sample_time of this DeviceExtendedV2.  # noqa: E501
        :rtype: datetime
        """
        return self._last_bluetooth_sample_time

    @last_bluetooth_sample_time.setter
    def last_bluetooth_sample_time(self, last_bluetooth_sample_time):
        """Sets the last_bluetooth_sample_time of this DeviceExtendedV2.

        Last Bluetooth Sample time of the device.  # noqa: E501

        :param last_bluetooth_sample_time: The last_bluetooth_sample_time of this DeviceExtendedV2.  # noqa: E501
        :type: datetime
        """

        self._last_bluetooth_sample_time = last_bluetooth_sample_time

    @property
    def managed_by(self):
        """Gets the managed_by of this DeviceExtendedV2.  # noqa: E501

        Device managed by.  # noqa: E501

        :return: The managed_by of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this DeviceExtendedV2.

        Device managed by.  # noqa: E501

        :param managed_by: The managed_by of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6]  # noqa: E501
        if (self._configuration.client_side_validation and
                managed_by not in allowed_values):
            raise ValueError(
                "Invalid value for `managed_by` ({0}), must be one of {1}"  # noqa: E501
                .format(managed_by, allowed_values)
            )

        self._managed_by = managed_by

    @property
    def data_protection_status(self):
        """Gets the data_protection_status of this DeviceExtendedV2.  # noqa: E501

        Data protection status of the user the device belongs to.  # noqa: E501

        :return: The data_protection_status of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._data_protection_status

    @data_protection_status.setter
    def data_protection_status(self, data_protection_status):
        """Sets the data_protection_status of this DeviceExtendedV2.

        Data protection status of the user the device belongs to.  # noqa: E501

        :param data_protection_status: The data_protection_status of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """

        self._data_protection_status = data_protection_status

    @property
    def processor_architecture(self):
        """Gets the processor_architecture of this DeviceExtendedV2.  # noqa: E501

        Information about the processor Architecture reported by the device.  # noqa: E501

        :return: The processor_architecture of this DeviceExtendedV2.  # noqa: E501
        :rtype: int
        """
        return self._processor_architecture

    @processor_architecture.setter
    def processor_architecture(self, processor_architecture):
        """Sets the processor_architecture of this DeviceExtendedV2.

        Information about the processor Architecture reported by the device.  # noqa: E501

        :param processor_architecture: The processor_architecture of this DeviceExtendedV2.  # noqa: E501
        :type: int
        """

        self._processor_architecture = processor_architecture

    @property
    def os_build_version(self):
        """Gets the os_build_version of this DeviceExtendedV2.  # noqa: E501

        OS build version of the device.  # noqa: E501

        :return: The os_build_version of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._os_build_version

    @os_build_version.setter
    def os_build_version(self, os_build_version):
        """Sets the os_build_version of this DeviceExtendedV2.

        OS build version of the device.  # noqa: E501

        :param os_build_version: The os_build_version of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._os_build_version = os_build_version

    @property
    def wifi_ssid(self):
        """Gets the wifi_ssid of this DeviceExtendedV2.  # noqa: E501

        WiFi SSID the device is connected to.  # noqa: E501

        :return: The wifi_ssid of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._wifi_ssid

    @wifi_ssid.setter
    def wifi_ssid(self, wifi_ssid):
        """Sets the wifi_ssid of this DeviceExtendedV2.

        WiFi SSID the device is connected to.  # noqa: E501

        :param wifi_ssid: The wifi_ssid of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._wifi_ssid = wifi_ssid

    @property
    def device_cellular_network_info(self):
        """Gets the device_cellular_network_info of this DeviceExtendedV2.  # noqa: E501

        Device cellular network information.  # noqa: E501

        :return: The device_cellular_network_info of this DeviceExtendedV2.  # noqa: E501
        :rtype: list[DeviceCellularInfoModelV2]
        """
        return self._device_cellular_network_info

    @device_cellular_network_info.setter
    def device_cellular_network_info(self, device_cellular_network_info):
        """Sets the device_cellular_network_info of this DeviceExtendedV2.

        Device cellular network information.  # noqa: E501

        :param device_cellular_network_info: The device_cellular_network_info of this DeviceExtendedV2.  # noqa: E501
        :type: list[DeviceCellularInfoModelV2]
        """

        self._device_cellular_network_info = device_cellular_network_info

    @property
    def device_network_info(self):
        """Gets the device_network_info of this DeviceExtendedV2.  # noqa: E501

        Network information of the device.  # noqa: E501

        :return: The device_network_info of this DeviceExtendedV2.  # noqa: E501
        :rtype: list[DeviceNetworkInfoV2]
        """
        return self._device_network_info

    @device_network_info.setter
    def device_network_info(self, device_network_info):
        """Sets the device_network_info of this DeviceExtendedV2.

        Network information of the device.  # noqa: E501

        :param device_network_info: The device_network_info of this DeviceExtendedV2.  # noqa: E501
        :type: list[DeviceNetworkInfoV2]
        """

        self._device_network_info = device_network_info

    @property
    def time_zone(self):
        """Gets the time_zone of this DeviceExtendedV2.  # noqa: E501

        Time Zone in Internet Assigned Numbers Authority (IANA) data base name format.  # noqa: E501

        :return: The time_zone of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this DeviceExtendedV2.

        Time Zone in Internet Assigned Numbers Authority (IANA) data base name format.  # noqa: E501

        :param time_zone: The time_zone of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def compliance_summary(self):
        """Gets the compliance_summary of this DeviceExtendedV2.  # noqa: E501

        The compliance details of a device including the overall compliance status and a list of MDM compliance policy information.  # noqa: E501

        :return: The compliance_summary of this DeviceExtendedV2.  # noqa: E501
        :rtype: DeviceComplianceSearchResultV2Model
        """
        return self._compliance_summary

    @compliance_summary.setter
    def compliance_summary(self, compliance_summary):
        """Sets the compliance_summary of this DeviceExtendedV2.

        The compliance details of a device including the overall compliance status and a list of MDM compliance policy information.  # noqa: E501

        :param compliance_summary: The compliance_summary of this DeviceExtendedV2.  # noqa: E501
        :type: DeviceComplianceSearchResultV2Model
        """

        self._compliance_summary = compliance_summary

    @property
    def id(self):
        """Gets the id of this DeviceExtendedV2.  # noqa: E501


        :return: The id of this DeviceExtendedV2.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceExtendedV2.


        :param id: The id of this DeviceExtendedV2.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceExtendedV2.  # noqa: E501


        :return: The uuid of this DeviceExtendedV2.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceExtendedV2.


        :param uuid: The uuid of this DeviceExtendedV2.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceExtendedV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceExtendedV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceExtendedV2):
            return True

        return self.to_dict() != other.to_dict()
