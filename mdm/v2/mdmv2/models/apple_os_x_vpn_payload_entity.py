# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXVpnPayloadEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_name': 'str',
        'connection_type': 'str',
        'server': 'str',
        'account': 'str',
        'encryption_level': 'int',
        'send_all_traffic': 'bool',
        'per_app_vpn': 'bool',
        'connect_automatically': 'bool',
        'enable_safari_domains': 'bool',
        'safari_domains': 'list[str]',
        'app_mapping': 'bool',
        'application_bundle_id': 'list[str]',
        'shared_secret': 'str',
        'machine_authentication': 'int',
        'group_name': 'str',
        'use_hybrid_authentication': 'bool',
        'prompt_for_password': 'bool',
        'identity_certificate': 'str',
        'include_user_pin': 'bool',
        'enable_vpnon_demand': 'bool',
        'web_logon': 'bool',
        'mdm_assigned_id': 'str',
        'mdm_device_unique_id': 'str',
        'mdm_device_wifi_mac_address': 'str',
        'mdm_device_serial_number': 'str',
        'provider_type': 'str',
        'vpn_on_demand': 'list[AppleOsXVpnOnDemandEntity]',
        'vpn_password': 'str',
        'proxy': 'str',
        'proxy_server': 'str',
        'port': 'int',
        'user_name': 'str',
        'password': 'str',
        'proxy_server_auto_config_url': 'str',
        'mail_domains': 'list[str]',
        'contacts_domains': 'list[str]',
        'calendar_domains': 'list[str]',
        'associated_domains': 'list[str]',
        'excluded_domains': 'list[str]',
        'provider_designated_requirement': 'str',
        'exclude_local_networks': 'bool',
        'include_all_networks': 'bool',
        'custom_datas': 'list[CustomData]',
        'user_authentication': 'str'
    }

    attribute_map = {
        'connection_name': 'ConnectionName',
        'connection_type': 'ConnectionType',
        'server': 'Server',
        'account': 'Account',
        'encryption_level': 'EncryptionLevel',
        'send_all_traffic': 'SendAllTraffic',
        'per_app_vpn': 'PerAppVpn',
        'connect_automatically': 'ConnectAutomatically',
        'enable_safari_domains': 'EnableSafariDomains',
        'safari_domains': 'SafariDomains',
        'app_mapping': 'AppMapping',
        'application_bundle_id': 'ApplicationBundleId',
        'shared_secret': 'SharedSecret',
        'machine_authentication': 'MachineAuthentication',
        'group_name': 'GroupName',
        'use_hybrid_authentication': 'UseHybridAuthentication',
        'prompt_for_password': 'PromptForPassword',
        'identity_certificate': 'IdentityCertificate',
        'include_user_pin': 'IncludeUserPIN',
        'enable_vpnon_demand': 'EnableVPNOnDemand',
        'web_logon': 'WebLogon',
        'mdm_assigned_id': 'MdmAssignedId',
        'mdm_device_unique_id': 'MdmDeviceUniqueId',
        'mdm_device_wifi_mac_address': 'MdmDeviceWifiMacAddress',
        'mdm_device_serial_number': 'MdmDeviceSerialNumber',
        'provider_type': 'ProviderType',
        'vpn_on_demand': 'VpnOnDemand',
        'vpn_password': 'VpnPassword',
        'proxy': 'Proxy',
        'proxy_server': 'ProxyServer',
        'port': 'Port',
        'user_name': 'UserName',
        'password': 'Password',
        'proxy_server_auto_config_url': 'ProxyServerAutoConfigURL',
        'mail_domains': 'MailDomains',
        'contacts_domains': 'ContactsDomains',
        'calendar_domains': 'CalendarDomains',
        'associated_domains': 'AssociatedDomains',
        'excluded_domains': 'ExcludedDomains',
        'provider_designated_requirement': 'ProviderDesignatedRequirement',
        'exclude_local_networks': 'ExcludeLocalNetworks',
        'include_all_networks': 'IncludeAllNetworks',
        'custom_datas': 'CustomDatas',
        'user_authentication': 'UserAuthentication'
    }

    def __init__(self, connection_name=None, connection_type=None, server=None, account=None, encryption_level=None, send_all_traffic=None, per_app_vpn=None, connect_automatically=None, enable_safari_domains=None, safari_domains=None, app_mapping=None, application_bundle_id=None, shared_secret=None, machine_authentication=None, group_name=None, use_hybrid_authentication=None, prompt_for_password=None, identity_certificate=None, include_user_pin=None, enable_vpnon_demand=None, web_logon=None, mdm_assigned_id=None, mdm_device_unique_id=None, mdm_device_wifi_mac_address=None, mdm_device_serial_number=None, provider_type=None, vpn_on_demand=None, vpn_password=None, proxy=None, proxy_server=None, port=None, user_name=None, password=None, proxy_server_auto_config_url=None, mail_domains=None, contacts_domains=None, calendar_domains=None, associated_domains=None, excluded_domains=None, provider_designated_requirement=None, exclude_local_networks=None, include_all_networks=None, custom_datas=None, user_authentication=None, _configuration=None):  # noqa: E501
        """AppleOsXVpnPayloadEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connection_name = None
        self._connection_type = None
        self._server = None
        self._account = None
        self._encryption_level = None
        self._send_all_traffic = None
        self._per_app_vpn = None
        self._connect_automatically = None
        self._enable_safari_domains = None
        self._safari_domains = None
        self._app_mapping = None
        self._application_bundle_id = None
        self._shared_secret = None
        self._machine_authentication = None
        self._group_name = None
        self._use_hybrid_authentication = None
        self._prompt_for_password = None
        self._identity_certificate = None
        self._include_user_pin = None
        self._enable_vpnon_demand = None
        self._web_logon = None
        self._mdm_assigned_id = None
        self._mdm_device_unique_id = None
        self._mdm_device_wifi_mac_address = None
        self._mdm_device_serial_number = None
        self._provider_type = None
        self._vpn_on_demand = None
        self._vpn_password = None
        self._proxy = None
        self._proxy_server = None
        self._port = None
        self._user_name = None
        self._password = None
        self._proxy_server_auto_config_url = None
        self._mail_domains = None
        self._contacts_domains = None
        self._calendar_domains = None
        self._associated_domains = None
        self._excluded_domains = None
        self._provider_designated_requirement = None
        self._exclude_local_networks = None
        self._include_all_networks = None
        self._custom_datas = None
        self._user_authentication = None
        self.discriminator = None

        if connection_name is not None:
            self.connection_name = connection_name
        if connection_type is not None:
            self.connection_type = connection_type
        if server is not None:
            self.server = server
        if account is not None:
            self.account = account
        if encryption_level is not None:
            self.encryption_level = encryption_level
        if send_all_traffic is not None:
            self.send_all_traffic = send_all_traffic
        if per_app_vpn is not None:
            self.per_app_vpn = per_app_vpn
        if connect_automatically is not None:
            self.connect_automatically = connect_automatically
        if enable_safari_domains is not None:
            self.enable_safari_domains = enable_safari_domains
        if safari_domains is not None:
            self.safari_domains = safari_domains
        if app_mapping is not None:
            self.app_mapping = app_mapping
        if application_bundle_id is not None:
            self.application_bundle_id = application_bundle_id
        if shared_secret is not None:
            self.shared_secret = shared_secret
        if machine_authentication is not None:
            self.machine_authentication = machine_authentication
        if group_name is not None:
            self.group_name = group_name
        if use_hybrid_authentication is not None:
            self.use_hybrid_authentication = use_hybrid_authentication
        if prompt_for_password is not None:
            self.prompt_for_password = prompt_for_password
        if identity_certificate is not None:
            self.identity_certificate = identity_certificate
        if include_user_pin is not None:
            self.include_user_pin = include_user_pin
        if enable_vpnon_demand is not None:
            self.enable_vpnon_demand = enable_vpnon_demand
        if web_logon is not None:
            self.web_logon = web_logon
        if mdm_assigned_id is not None:
            self.mdm_assigned_id = mdm_assigned_id
        if mdm_device_unique_id is not None:
            self.mdm_device_unique_id = mdm_device_unique_id
        if mdm_device_wifi_mac_address is not None:
            self.mdm_device_wifi_mac_address = mdm_device_wifi_mac_address
        if mdm_device_serial_number is not None:
            self.mdm_device_serial_number = mdm_device_serial_number
        if provider_type is not None:
            self.provider_type = provider_type
        if vpn_on_demand is not None:
            self.vpn_on_demand = vpn_on_demand
        if vpn_password is not None:
            self.vpn_password = vpn_password
        if proxy is not None:
            self.proxy = proxy
        if proxy_server is not None:
            self.proxy_server = proxy_server
        if port is not None:
            self.port = port
        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if proxy_server_auto_config_url is not None:
            self.proxy_server_auto_config_url = proxy_server_auto_config_url
        if mail_domains is not None:
            self.mail_domains = mail_domains
        if contacts_domains is not None:
            self.contacts_domains = contacts_domains
        if calendar_domains is not None:
            self.calendar_domains = calendar_domains
        if associated_domains is not None:
            self.associated_domains = associated_domains
        if excluded_domains is not None:
            self.excluded_domains = excluded_domains
        if provider_designated_requirement is not None:
            self.provider_designated_requirement = provider_designated_requirement
        if exclude_local_networks is not None:
            self.exclude_local_networks = exclude_local_networks
        if include_all_networks is not None:
            self.include_all_networks = include_all_networks
        if custom_datas is not None:
            self.custom_datas = custom_datas
        if user_authentication is not None:
            self.user_authentication = user_authentication

    @property
    def connection_name(self):
        """Gets the connection_name of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets description of the VPN connection displayed on the device.  # noqa: E501

        :return: The connection_name of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this AppleOsXVpnPayloadEntity.

        Gets or sets description of the VPN connection displayed on the device.  # noqa: E501

        :param connection_name: The connection_name of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                connection_name is not None and len(connection_name) > 255):
            raise ValueError("Invalid value for `connection_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                connection_name is not None and len(connection_name) < 0):
            raise ValueError("Invalid value for `connection_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._connection_name = connection_name

    @property
    def connection_type(self):
        """Gets the connection_type of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets determines the settings available in the payload for this type of VPN connection.  # noqa: E501

        :return: The connection_type of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this AppleOsXVpnPayloadEntity.

        Gets or sets determines the settings available in the payload for this type of VPN connection.  # noqa: E501

        :param connection_type: The connection_type of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                connection_type is not None and len(connection_type) > 255):
            raise ValueError("Invalid value for `connection_type`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                connection_type is not None and len(connection_type) < 0):
            raise ValueError("Invalid value for `connection_type`, length must be greater than or equal to `0`")  # noqa: E501

        self._connection_type = connection_type

    @property
    def server(self):
        """Gets the server of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets iP address or host name of VPN server.  # noqa: E501

        :return: The server of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this AppleOsXVpnPayloadEntity.

        Gets or sets iP address or host name of VPN server.  # noqa: E501

        :param server: The server of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                server is not None and len(server) > 255):
            raise ValueError("Invalid value for `server`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                server is not None and len(server) < 0):
            raise ValueError("Invalid value for `server`, length must be greater than or equal to `0`")  # noqa: E501

        self._server = server

    @property
    def account(self):
        """Gets the account of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets username used for authentication.  # noqa: E501

        :return: The account of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AppleOsXVpnPayloadEntity.

        Gets or sets username used for authentication.  # noqa: E501

        :param account: The account of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                account is not None and len(account) > 255):
            raise ValueError("Invalid value for `account`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account is not None and len(account) < 0):
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `0`")  # noqa: E501

        self._account = account

    @property
    def encryption_level(self):
        """Gets the encryption_level of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets level of data encryption applied to the connection. 1: None, 2: Automatic, 3: Maximum Bit.  # noqa: E501

        :return: The encryption_level of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: int
        """
        return self._encryption_level

    @encryption_level.setter
    def encryption_level(self, encryption_level):
        """Sets the encryption_level of this AppleOsXVpnPayloadEntity.

        Gets or sets level of data encryption applied to the connection. 1: None, 2: Automatic, 3: Maximum Bit.  # noqa: E501

        :param encryption_level: The encryption_level of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: int
        """

        self._encryption_level = encryption_level

    @property
    def send_all_traffic(self):
        """Gets the send_all_traffic of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, all network traffic is sent over VPN.  # noqa: E501

        :return: The send_all_traffic of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._send_all_traffic

    @send_all_traffic.setter
    def send_all_traffic(self, send_all_traffic):
        """Sets the send_all_traffic of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether if true, all network traffic is sent over VPN.  # noqa: E501

        :param send_all_traffic: The send_all_traffic of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._send_all_traffic = send_all_traffic

    @property
    def per_app_vpn(self):
        """Gets the per_app_vpn of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether per-app VPN that needed to be configured on the device.  # noqa: E501

        :return: The per_app_vpn of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._per_app_vpn

    @per_app_vpn.setter
    def per_app_vpn(self, per_app_vpn):
        """Sets the per_app_vpn of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether per-app VPN that needed to be configured on the device.  # noqa: E501

        :param per_app_vpn: The per_app_vpn of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._per_app_vpn = per_app_vpn

    @property
    def connect_automatically(self):
        """Gets the connect_automatically of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether enabled when PerAppVpn tag is set to true. Specifies if the VPN connection has to be made automatically.  # noqa: E501

        :return: The connect_automatically of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._connect_automatically

    @connect_automatically.setter
    def connect_automatically(self, connect_automatically):
        """Sets the connect_automatically of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether enabled when PerAppVpn tag is set to true. Specifies if the VPN connection has to be made automatically.  # noqa: E501

        :param connect_automatically: The connect_automatically of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._connect_automatically = connect_automatically

    @property
    def enable_safari_domains(self):
        """Gets the enable_safari_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, enables Safari Domains.  # noqa: E501

        :return: The enable_safari_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_safari_domains

    @enable_safari_domains.setter
    def enable_safari_domains(self, enable_safari_domains):
        """Sets the enable_safari_domains of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether if true, enables Safari Domains.  # noqa: E501

        :param enable_safari_domains: The enable_safari_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._enable_safari_domains = enable_safari_domains

    @property
    def safari_domains(self):
        """Gets the safari_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets domains that should trigger this VPN connection in Safari.  # noqa: E501

        :return: The safari_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._safari_domains

    @safari_domains.setter
    def safari_domains(self, safari_domains):
        """Sets the safari_domains of this AppleOsXVpnPayloadEntity.

        Gets or sets domains that should trigger this VPN connection in Safari.  # noqa: E501

        :param safari_domains: The safari_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._safari_domains = safari_domains

    @property
    def app_mapping(self):
        """Gets the app_mapping of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether if true, allows specific applications to open a secure VPN connection.  # noqa: E501

        :return: The app_mapping of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._app_mapping

    @app_mapping.setter
    def app_mapping(self, app_mapping):
        """Sets the app_mapping of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether if true, allows specific applications to open a secure VPN connection.  # noqa: E501

        :param app_mapping: The app_mapping of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._app_mapping = app_mapping

    @property
    def application_bundle_id(self):
        """Gets the application_bundle_id of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets app bundle IDs for applications allowed to open a secure VPN connection.  # noqa: E501

        :return: The application_bundle_id of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._application_bundle_id

    @application_bundle_id.setter
    def application_bundle_id(self, application_bundle_id):
        """Sets the application_bundle_id of this AppleOsXVpnPayloadEntity.

        Gets or sets app bundle IDs for applications allowed to open a secure VPN connection.  # noqa: E501

        :param application_bundle_id: The application_bundle_id of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._application_bundle_id = application_bundle_id

    @property
    def shared_secret(self):
        """Gets the shared_secret of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets the shared secret for this VPN account.  # noqa: E501

        :return: The shared_secret of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this AppleOsXVpnPayloadEntity.

        Gets or sets the shared secret for this VPN account.  # noqa: E501

        :param shared_secret: The shared_secret of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._shared_secret = shared_secret

    @property
    def machine_authentication(self):
        """Gets the machine_authentication of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets the authentication mode for IPSec. 1: Shared Secret, 2: Certificate.  # noqa: E501

        :return: The machine_authentication of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: int
        """
        return self._machine_authentication

    @machine_authentication.setter
    def machine_authentication(self, machine_authentication):
        """Sets the machine_authentication of this AppleOsXVpnPayloadEntity.

        Gets or sets the authentication mode for IPSec. 1: Shared Secret, 2: Certificate.  # noqa: E501

        :param machine_authentication: The machine_authentication of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: int
        """

        self._machine_authentication = machine_authentication

    @property
    def group_name(self):
        """Gets the group_name of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets the name of the group to use.  # noqa: E501

        :return: The group_name of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this AppleOsXVpnPayloadEntity.

        Gets or sets the name of the group to use.  # noqa: E501

        :param group_name: The group_name of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def use_hybrid_authentication(self):
        """Gets the use_hybrid_authentication of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether specifies if a combination of Secret, Name and Certificate need to be used for Authentication.  # noqa: E501

        :return: The use_hybrid_authentication of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._use_hybrid_authentication

    @use_hybrid_authentication.setter
    def use_hybrid_authentication(self, use_hybrid_authentication):
        """Sets the use_hybrid_authentication of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether specifies if a combination of Secret, Name and Certificate need to be used for Authentication.  # noqa: E501

        :param use_hybrid_authentication: The use_hybrid_authentication of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._use_hybrid_authentication = use_hybrid_authentication

    @property
    def prompt_for_password(self):
        """Gets the prompt_for_password of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether when true, the user is prompted to privide the password on the device.  # noqa: E501

        :return: The prompt_for_password of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._prompt_for_password

    @prompt_for_password.setter
    def prompt_for_password(self, prompt_for_password):
        """Sets the prompt_for_password of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether when true, the user is prompted to privide the password on the device.  # noqa: E501

        :param prompt_for_password: The prompt_for_password of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._prompt_for_password = prompt_for_password

    @property
    def identity_certificate(self):
        """Gets the identity_certificate of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets the crtificate name for IPSec.  # noqa: E501

        :return: The identity_certificate of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._identity_certificate

    @identity_certificate.setter
    def identity_certificate(self, identity_certificate):
        """Sets the identity_certificate of this AppleOsXVpnPayloadEntity.

        Gets or sets the crtificate name for IPSec.  # noqa: E501

        :param identity_certificate: The identity_certificate of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._identity_certificate = identity_certificate

    @property
    def include_user_pin(self):
        """Gets the include_user_pin of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether setting to true sends the device user's pin along with the authentication.  # noqa: E501

        :return: The include_user_pin of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._include_user_pin

    @include_user_pin.setter
    def include_user_pin(self, include_user_pin):
        """Sets the include_user_pin of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether setting to true sends the device user's pin along with the authentication.  # noqa: E501

        :param include_user_pin: The include_user_pin of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._include_user_pin = include_user_pin

    @property
    def enable_vpnon_demand(self):
        """Gets the enable_vpnon_demand of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether setting to true, enables VPN On-Demand feature for networks that user certificate based Authentication.  # noqa: E501

        :return: The enable_vpnon_demand of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_vpnon_demand

    @enable_vpnon_demand.setter
    def enable_vpnon_demand(self, enable_vpnon_demand):
        """Sets the enable_vpnon_demand of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether setting to true, enables VPN On-Demand feature for networks that user certificate based Authentication.  # noqa: E501

        :param enable_vpnon_demand: The enable_vpnon_demand of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._enable_vpnon_demand = enable_vpnon_demand

    @property
    def web_logon(self):
        """Gets the web_logon of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether gets or Sets WebLogOn for F5Access client.  # noqa: E501

        :return: The web_logon of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._web_logon

    @web_logon.setter
    def web_logon(self, web_logon):
        """Sets the web_logon of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether gets or Sets WebLogOn for F5Access client.  # noqa: E501

        :param web_logon: The web_logon of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._web_logon = web_logon

    @property
    def mdm_assigned_id(self):
        """Gets the mdm_assigned_id of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or Sets MDM Assigned ID.  # noqa: E501

        :return: The mdm_assigned_id of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._mdm_assigned_id

    @mdm_assigned_id.setter
    def mdm_assigned_id(self, mdm_assigned_id):
        """Sets the mdm_assigned_id of this AppleOsXVpnPayloadEntity.

        Gets or Sets MDM Assigned ID.  # noqa: E501

        :param mdm_assigned_id: The mdm_assigned_id of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._mdm_assigned_id = mdm_assigned_id

    @property
    def mdm_device_unique_id(self):
        """Gets the mdm_device_unique_id of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or Sets MDM Device UUID.  # noqa: E501

        :return: The mdm_device_unique_id of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._mdm_device_unique_id

    @mdm_device_unique_id.setter
    def mdm_device_unique_id(self, mdm_device_unique_id):
        """Sets the mdm_device_unique_id of this AppleOsXVpnPayloadEntity.

        Gets or Sets MDM Device UUID.  # noqa: E501

        :param mdm_device_unique_id: The mdm_device_unique_id of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._mdm_device_unique_id = mdm_device_unique_id

    @property
    def mdm_device_wifi_mac_address(self):
        """Gets the mdm_device_wifi_mac_address of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or Sets Device Wi-fi Mac Address.  # noqa: E501

        :return: The mdm_device_wifi_mac_address of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._mdm_device_wifi_mac_address

    @mdm_device_wifi_mac_address.setter
    def mdm_device_wifi_mac_address(self, mdm_device_wifi_mac_address):
        """Sets the mdm_device_wifi_mac_address of this AppleOsXVpnPayloadEntity.

        Gets or Sets Device Wi-fi Mac Address.  # noqa: E501

        :param mdm_device_wifi_mac_address: The mdm_device_wifi_mac_address of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._mdm_device_wifi_mac_address = mdm_device_wifi_mac_address

    @property
    def mdm_device_serial_number(self):
        """Gets the mdm_device_serial_number of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or Sets Device Serial number.  # noqa: E501

        :return: The mdm_device_serial_number of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._mdm_device_serial_number

    @mdm_device_serial_number.setter
    def mdm_device_serial_number(self, mdm_device_serial_number):
        """Sets the mdm_device_serial_number of this AppleOsXVpnPayloadEntity.

        Gets or Sets Device Serial number.  # noqa: E501

        :param mdm_device_serial_number: The mdm_device_serial_number of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._mdm_device_serial_number = mdm_device_serial_number

    @property
    def provider_type(self):
        """Gets the provider_type of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or Sets Provider type for F5 Access client.  # noqa: E501

        :return: The provider_type of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this AppleOsXVpnPayloadEntity.

        Gets or Sets Provider type for F5 Access client.  # noqa: E501

        :param provider_type: The provider_type of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._provider_type = provider_type

    @property
    def vpn_on_demand(self):
        """Gets the vpn_on_demand of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets list of the VPN On Demand Action Parameters.  # noqa: E501

        :return: The vpn_on_demand of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: list[AppleOsXVpnOnDemandEntity]
        """
        return self._vpn_on_demand

    @vpn_on_demand.setter
    def vpn_on_demand(self, vpn_on_demand):
        """Sets the vpn_on_demand of this AppleOsXVpnPayloadEntity.

        Gets or sets list of the VPN On Demand Action Parameters.  # noqa: E501

        :param vpn_on_demand: The vpn_on_demand of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: list[AppleOsXVpnOnDemandEntity]
        """

        self._vpn_on_demand = vpn_on_demand

    @property
    def vpn_password(self):
        """Gets the vpn_password of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets the password used for authentication.  # noqa: E501

        :return: The vpn_password of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._vpn_password

    @vpn_password.setter
    def vpn_password(self, vpn_password):
        """Sets the vpn_password of this AppleOsXVpnPayloadEntity.

        Gets or sets the password used for authentication.  # noqa: E501

        :param vpn_password: The vpn_password of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._vpn_password = vpn_password

    @property
    def proxy(self):
        """Gets the proxy of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets proxy types.  # noqa: E501

        :return: The proxy of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this AppleOsXVpnPayloadEntity.

        Gets or sets proxy types.  # noqa: E501

        :param proxy: The proxy of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._proxy = proxy

    @property
    def proxy_server(self):
        """Gets the proxy_server of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets the host name of the HTTP proxy.  # noqa: E501

        :return: The proxy_server of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_server

    @proxy_server.setter
    def proxy_server(self, proxy_server):
        """Sets the proxy_server of this AppleOsXVpnPayloadEntity.

        Gets or sets the host name of the HTTP proxy.  # noqa: E501

        :param proxy_server: The proxy_server of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                proxy_server is not None and len(proxy_server) > 255):
            raise ValueError("Invalid value for `proxy_server`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                proxy_server is not None and len(proxy_server) < 0):
            raise ValueError("Invalid value for `proxy_server`, length must be greater than or equal to `0`")  # noqa: E501

        self._proxy_server = proxy_server

    @property
    def port(self):
        """Gets the port of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets the port number of the HTTP proxy.  # noqa: E501

        :return: The port of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this AppleOsXVpnPayloadEntity.

        Gets or sets the port number of the HTTP proxy.  # noqa: E501

        :param port: The port of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def user_name(self):
        """Gets the user_name of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets the username used for authentication.  # noqa: E501

        :return: The user_name of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AppleOsXVpnPayloadEntity.

        Gets or sets the username used for authentication.  # noqa: E501

        :param user_name: The user_name of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_name is not None and len(user_name) > 255):
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                user_name is not None and len(user_name) < 0):
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets the password used for authentication.  # noqa: E501

        :return: The password of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AppleOsXVpnPayloadEntity.

        Gets or sets the password used for authentication.  # noqa: E501

        :param password: The password of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                password is not None and len(password) > 255):
            raise ValueError("Invalid value for `password`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                password is not None and len(password) < 0):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `0`")  # noqa: E501

        self._password = password

    @property
    def proxy_server_auto_config_url(self):
        """Gets the proxy_server_auto_config_url of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets uRL to the location of the proxy auto-configuration file.  # noqa: E501

        :return: The proxy_server_auto_config_url of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._proxy_server_auto_config_url

    @proxy_server_auto_config_url.setter
    def proxy_server_auto_config_url(self, proxy_server_auto_config_url):
        """Sets the proxy_server_auto_config_url of this AppleOsXVpnPayloadEntity.

        Gets or sets uRL to the location of the proxy auto-configuration file.  # noqa: E501

        :param proxy_server_auto_config_url: The proxy_server_auto_config_url of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                proxy_server_auto_config_url is not None and len(proxy_server_auto_config_url) > 255):
            raise ValueError("Invalid value for `proxy_server_auto_config_url`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                proxy_server_auto_config_url is not None and len(proxy_server_auto_config_url) < 0):
            raise ValueError("Invalid value for `proxy_server_auto_config_url`, length must be greater than or equal to `0`")  # noqa: E501

        self._proxy_server_auto_config_url = proxy_server_auto_config_url

    @property
    def mail_domains(self):
        """Gets the mail_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets list of mail domain names.  # noqa: E501

        :return: The mail_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._mail_domains

    @mail_domains.setter
    def mail_domains(self, mail_domains):
        """Sets the mail_domains of this AppleOsXVpnPayloadEntity.

        Gets or sets list of mail domain names.  # noqa: E501

        :param mail_domains: The mail_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._mail_domains = mail_domains

    @property
    def contacts_domains(self):
        """Gets the contacts_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets list of contacts domain names.  # noqa: E501

        :return: The contacts_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts_domains

    @contacts_domains.setter
    def contacts_domains(self, contacts_domains):
        """Sets the contacts_domains of this AppleOsXVpnPayloadEntity.

        Gets or sets list of contacts domain names.  # noqa: E501

        :param contacts_domains: The contacts_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._contacts_domains = contacts_domains

    @property
    def calendar_domains(self):
        """Gets the calendar_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets list of calendar domain names.  # noqa: E501

        :return: The calendar_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._calendar_domains

    @calendar_domains.setter
    def calendar_domains(self, calendar_domains):
        """Sets the calendar_domains of this AppleOsXVpnPayloadEntity.

        Gets or sets list of calendar domain names.  # noqa: E501

        :param calendar_domains: The calendar_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._calendar_domains = calendar_domains

    @property
    def associated_domains(self):
        """Gets the associated_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets list of associated domain names.  # noqa: E501

        :return: The associated_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._associated_domains

    @associated_domains.setter
    def associated_domains(self, associated_domains):
        """Sets the associated_domains of this AppleOsXVpnPayloadEntity.

        Gets or sets list of associated domain names.  # noqa: E501

        :param associated_domains: The associated_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._associated_domains = associated_domains

    @property
    def excluded_domains(self):
        """Gets the excluded_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets list of exclude domain names.  # noqa: E501

        :return: The excluded_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_domains

    @excluded_domains.setter
    def excluded_domains(self, excluded_domains):
        """Sets the excluded_domains of this AppleOsXVpnPayloadEntity.

        Gets or sets list of exclude domain names.  # noqa: E501

        :param excluded_domains: The excluded_domains of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: list[str]
        """

        self._excluded_domains = excluded_domains

    @property
    def provider_designated_requirement(self):
        """Gets the provider_designated_requirement of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets designated requirement for vpn profiler.  # noqa: E501

        :return: The provider_designated_requirement of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._provider_designated_requirement

    @provider_designated_requirement.setter
    def provider_designated_requirement(self, provider_designated_requirement):
        """Sets the provider_designated_requirement of this AppleOsXVpnPayloadEntity.

        Gets or sets designated requirement for vpn profiler.  # noqa: E501

        :param provider_designated_requirement: The provider_designated_requirement of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                provider_designated_requirement is not None and len(provider_designated_requirement) > 255):
            raise ValueError("Invalid value for `provider_designated_requirement`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                provider_designated_requirement is not None and len(provider_designated_requirement) < 0):
            raise ValueError("Invalid value for `provider_designated_requirement`, length must be greater than or equal to `0`")  # noqa: E501

        self._provider_designated_requirement = provider_designated_requirement

    @property
    def exclude_local_networks(self):
        """Gets the exclude_local_networks of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether routes all local network traffic outside VPN.  # noqa: E501

        :return: The exclude_local_networks of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_local_networks

    @exclude_local_networks.setter
    def exclude_local_networks(self, exclude_local_networks):
        """Sets the exclude_local_networks of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether routes all local network traffic outside VPN.  # noqa: E501

        :param exclude_local_networks: The exclude_local_networks of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._exclude_local_networks = exclude_local_networks

    @property
    def include_all_networks(self):
        """Gets the include_all_networks of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether routes all traffic through VPN.  # noqa: E501

        :return: The include_all_networks of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._include_all_networks

    @include_all_networks.setter
    def include_all_networks(self, include_all_networks):
        """Sets the include_all_networks of this AppleOsXVpnPayloadEntity.

        Gets or sets a value indicating whether routes all traffic through VPN.  # noqa: E501

        :param include_all_networks: The include_all_networks of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._include_all_networks = include_all_networks

    @property
    def custom_datas(self):
        """Gets the custom_datas of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets list of Custom Data.  # noqa: E501

        :return: The custom_datas of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: list[CustomData]
        """
        return self._custom_datas

    @custom_datas.setter
    def custom_datas(self, custom_datas):
        """Sets the custom_datas of this AppleOsXVpnPayloadEntity.

        Gets or sets list of Custom Data.  # noqa: E501

        :param custom_datas: The custom_datas of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: list[CustomData]
        """

        self._custom_datas = custom_datas

    @property
    def user_authentication(self):
        """Gets the user_authentication of this AppleOsXVpnPayloadEntity.  # noqa: E501

        Gets or sets authentication type for connection.  # noqa: E501

        :return: The user_authentication of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._user_authentication

    @user_authentication.setter
    def user_authentication(self, user_authentication):
        """Sets the user_authentication of this AppleOsXVpnPayloadEntity.

        Gets or sets authentication type for connection.  # noqa: E501

        :param user_authentication: The user_authentication of this AppleOsXVpnPayloadEntity.  # noqa: E501
        :type: str
        """

        self._user_authentication = user_authentication

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXVpnPayloadEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXVpnPayloadEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXVpnPayloadEntity):
            return True

        return self.to_dict() != other.to_dict()
