# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv1.api_client import ApiClient


class AndroidWorkAppsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def android_work_apps_v1_import(self, uuid, **kwargs):  # noqa: E501
        """New - Import approved Android Enterprise apps to AirWatch  # noqa: E501

        * Imports all the approved apps in admin Google account of the organization to AirWatch. This makes them available to be managed by AirWatch. Imported apps can be assigned to the smart groups to be made available to the users in the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.android_work_apps_v1_import(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Unique Identifier for the organization group(Required) (required)
        :return: list[AndroidWorkImportedAppV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.android_work_apps_v1_import_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.android_work_apps_v1_import_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def android_work_apps_v1_import_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Import approved Android Enterprise apps to AirWatch  # noqa: E501

        * Imports all the approved apps in admin Google account of the organization to AirWatch. This makes them available to be managed by AirWatch. Imported apps can be assigned to the smart groups to be made available to the users in the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.android_work_apps_v1_import_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Unique Identifier for the organization group(Required) (required)
        :return: list[AndroidWorkImportedAppV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method android_work_apps_v1_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `android_work_apps_v1_import`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}/androidwork/apps/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AndroidWorkImportedAppV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def android_work_apps_v1_patch(self, uuid, android_work_app_setting_v1_model, bundle_id, **kwargs):  # noqa: E501
        """New - Approve an app on admin Google account for the organization  # noqa: E501

        * Approves the input application on admin Google account for given organization group. This has the same effect of logging into Google Work PlayStore and approving a selected application for the organization. This does not add that application automatically to AirWatch. Call to 'import' API is needed for the same.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.android_work_apps_v1_patch(uuid, android_work_app_setting_v1_model, bundle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Unique Identifier for the organization group(Required) (required)
        :param AndroidWorkAppSettingV1ModelPatch android_work_app_setting_v1_model: JsonPatch containing operation type and the model. Only 'replace' operation is supported.(Required) (required)
        :param str bundle_id: Unique Identifier for the Android application on Google PlayStore(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.android_work_apps_v1_patch_with_http_info(uuid, android_work_app_setting_v1_model, bundle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.android_work_apps_v1_patch_with_http_info(uuid, android_work_app_setting_v1_model, bundle_id, **kwargs)  # noqa: E501
            return data

    def android_work_apps_v1_patch_with_http_info(self, uuid, android_work_app_setting_v1_model, bundle_id, **kwargs):  # noqa: E501
        """New - Approve an app on admin Google account for the organization  # noqa: E501

        * Approves the input application on admin Google account for given organization group. This has the same effect of logging into Google Work PlayStore and approving a selected application for the organization. This does not add that application automatically to AirWatch. Call to 'import' API is needed for the same.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.android_work_apps_v1_patch_with_http_info(uuid, android_work_app_setting_v1_model, bundle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Unique Identifier for the organization group(Required) (required)
        :param AndroidWorkAppSettingV1ModelPatch android_work_app_setting_v1_model: JsonPatch containing operation type and the model. Only 'replace' operation is supported.(Required) (required)
        :param str bundle_id: Unique Identifier for the Android application on Google PlayStore(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'android_work_app_setting_v1_model', 'bundle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method android_work_apps_v1_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `android_work_apps_v1_patch`")  # noqa: E501
        # verify the required parameter 'android_work_app_setting_v1_model' is set
        if self.api_client.client_side_validation and ('android_work_app_setting_v1_model' not in params or
                                                       params['android_work_app_setting_v1_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `android_work_app_setting_v1_model` when calling `android_work_apps_v1_patch`")  # noqa: E501
        # verify the required parameter 'bundle_id' is set
        if self.api_client.client_side_validation and ('bundle_id' not in params or
                                                       params['bundle_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle_id` when calling `android_work_apps_v1_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'bundle_id' in params:
            query_params.append(('bundleId', params['bundle_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'android_work_app_setting_v1_model' in params:
            body_params = params['android_work_app_setting_v1_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}/androidwork/apps', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
