# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ChromeOSConfigurationV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'domain': 'str',
        'service_account_email': 'str',
        'admin_email_address': 'str',
        'subject_name': 'str',
        'access_token': 'str',
        'refresh_token': 'str',
        'authorization_type': 'int',
        'enterprise_id': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'domain': 'domain',
        'service_account_email': 'serviceAccountEmail',
        'admin_email_address': 'adminEmailAddress',
        'subject_name': 'subjectName',
        'access_token': 'accessToken',
        'refresh_token': 'refreshToken',
        'authorization_type': 'authorizationType',
        'enterprise_id': 'enterpriseId'
    }

    def __init__(self, client_id=None, domain=None, service_account_email=None, admin_email_address=None, subject_name=None, access_token=None, refresh_token=None, authorization_type=None, enterprise_id=None, _configuration=None):  # noqa: E501
        """ChromeOSConfigurationV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_id = None
        self._domain = None
        self._service_account_email = None
        self._admin_email_address = None
        self._subject_name = None
        self._access_token = None
        self._refresh_token = None
        self._authorization_type = None
        self._enterprise_id = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if domain is not None:
            self.domain = domain
        if service_account_email is not None:
            self.service_account_email = service_account_email
        if admin_email_address is not None:
            self.admin_email_address = admin_email_address
        if subject_name is not None:
            self.subject_name = subject_name
        if access_token is not None:
            self.access_token = access_token
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if authorization_type is not None:
            self.authorization_type = authorization_type
        if enterprise_id is not None:
            self.enterprise_id = enterprise_id

    @property
    def client_id(self):
        """Gets the client_id of this ChromeOSConfigurationV1Model.  # noqa: E501

        Client Id of a Chromebook Admin  # noqa: E501

        :return: The client_id of this ChromeOSConfigurationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ChromeOSConfigurationV1Model.

        Client Id of a Chromebook Admin  # noqa: E501

        :param client_id: The client_id of this ChromeOSConfigurationV1Model.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def domain(self):
        """Gets the domain of this ChromeOSConfigurationV1Model.  # noqa: E501

        An Enterprise Domain Id for which configuration needs to be saved  # noqa: E501

        :return: The domain of this ChromeOSConfigurationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ChromeOSConfigurationV1Model.

        An Enterprise Domain Id for which configuration needs to be saved  # noqa: E501

        :param domain: The domain of this ChromeOSConfigurationV1Model.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def service_account_email(self):
        """Gets the service_account_email of this ChromeOSConfigurationV1Model.  # noqa: E501

        Service account email address  # noqa: E501

        :return: The service_account_email of this ChromeOSConfigurationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._service_account_email

    @service_account_email.setter
    def service_account_email(self, service_account_email):
        """Sets the service_account_email of this ChromeOSConfigurationV1Model.

        Service account email address  # noqa: E501

        :param service_account_email: The service_account_email of this ChromeOSConfigurationV1Model.  # noqa: E501
        :type: str
        """

        self._service_account_email = service_account_email

    @property
    def admin_email_address(self):
        """Gets the admin_email_address of this ChromeOSConfigurationV1Model.  # noqa: E501

        Admin account email address  # noqa: E501

        :return: The admin_email_address of this ChromeOSConfigurationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._admin_email_address

    @admin_email_address.setter
    def admin_email_address(self, admin_email_address):
        """Sets the admin_email_address of this ChromeOSConfigurationV1Model.

        Admin account email address  # noqa: E501

        :param admin_email_address: The admin_email_address of this ChromeOSConfigurationV1Model.  # noqa: E501
        :type: str
        """

        self._admin_email_address = admin_email_address

    @property
    def subject_name(self):
        """Gets the subject_name of this ChromeOSConfigurationV1Model.  # noqa: E501

        Certificate's Subject Name  # noqa: E501

        :return: The subject_name of this ChromeOSConfigurationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._subject_name

    @subject_name.setter
    def subject_name(self, subject_name):
        """Sets the subject_name of this ChromeOSConfigurationV1Model.

        Certificate's Subject Name  # noqa: E501

        :param subject_name: The subject_name of this ChromeOSConfigurationV1Model.  # noqa: E501
        :type: str
        """

        self._subject_name = subject_name

    @property
    def access_token(self):
        """Gets the access_token of this ChromeOSConfigurationV1Model.  # noqa: E501

        Token which authorizes access to the API  # noqa: E501

        :return: The access_token of this ChromeOSConfigurationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ChromeOSConfigurationV1Model.

        Token which authorizes access to the API  # noqa: E501

        :param access_token: The access_token of this ChromeOSConfigurationV1Model.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this ChromeOSConfigurationV1Model.  # noqa: E501

        Token used to refresh access token  # noqa: E501

        :return: The refresh_token of this ChromeOSConfigurationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this ChromeOSConfigurationV1Model.

        Token used to refresh access token  # noqa: E501

        :param refresh_token: The refresh_token of this ChromeOSConfigurationV1Model.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def authorization_type(self):
        """Gets the authorization_type of this ChromeOSConfigurationV1Model.  # noqa: E501

        Authorization type used for configuration setup  # noqa: E501

        :return: The authorization_type of this ChromeOSConfigurationV1Model.  # noqa: E501
        :rtype: int
        """
        return self._authorization_type

    @authorization_type.setter
    def authorization_type(self, authorization_type):
        """Sets the authorization_type of this ChromeOSConfigurationV1Model.

        Authorization type used for configuration setup  # noqa: E501

        :param authorization_type: The authorization_type of this ChromeOSConfigurationV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                authorization_type not in allowed_values):
            raise ValueError(
                "Invalid value for `authorization_type` ({0}), must be one of {1}"  # noqa: E501
                .format(authorization_type, allowed_values)
            )

        self._authorization_type = authorization_type

    @property
    def enterprise_id(self):
        """Gets the enterprise_id of this ChromeOSConfigurationV1Model.  # noqa: E501

        Enterprise ID for organization  # noqa: E501

        :return: The enterprise_id of this ChromeOSConfigurationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_id

    @enterprise_id.setter
    def enterprise_id(self, enterprise_id):
        """Sets the enterprise_id of this ChromeOSConfigurationV1Model.

        Enterprise ID for organization  # noqa: E501

        :param enterprise_id: The enterprise_id of this ChromeOSConfigurationV1Model.  # noqa: E501
        :type: str
        """

        self._enterprise_id = enterprise_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChromeOSConfigurationV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChromeOSConfigurationV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChromeOSConfigurationV1Model):
            return True

        return self.to_dict() != other.to_dict()
