# coding: utf-8

"""
    MDM API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv3.configuration import Configuration


class CommandsV3Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'set_recovery_lock': 'SetRecoveryLockCommandV3Model',
        'device_wipe': 'DeviceWipeCommandV3Model'
    }

    attribute_map = {
        'set_recovery_lock': 'set_recovery_lock',
        'device_wipe': 'device_wipe'
    }

    def __init__(self, set_recovery_lock=None, device_wipe=None, _configuration=None):  # noqa: E501
        """CommandsV3Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._set_recovery_lock = None
        self._device_wipe = None
        self.discriminator = None

        if set_recovery_lock is not None:
            self.set_recovery_lock = set_recovery_lock
        if device_wipe is not None:
            self.device_wipe = device_wipe

    @property
    def set_recovery_lock(self):
        """Gets the set_recovery_lock of this CommandsV3Model.  # noqa: E501

        The SetRecoveryLock command options. Must be specified for the request to be accepted for the SetRecoveryLock command. This command is applicable only for macOS 11.5+ and available with Apple Silicon.  # noqa: E501

        :return: The set_recovery_lock of this CommandsV3Model.  # noqa: E501
        :rtype: SetRecoveryLockCommandV3Model
        """
        return self._set_recovery_lock

    @set_recovery_lock.setter
    def set_recovery_lock(self, set_recovery_lock):
        """Sets the set_recovery_lock of this CommandsV3Model.

        The SetRecoveryLock command options. Must be specified for the request to be accepted for the SetRecoveryLock command. This command is applicable only for macOS 11.5+ and available with Apple Silicon.  # noqa: E501

        :param set_recovery_lock: The set_recovery_lock of this CommandsV3Model.  # noqa: E501
        :type: SetRecoveryLockCommandV3Model
        """

        self._set_recovery_lock = set_recovery_lock

    @property
    def device_wipe(self):
        """Gets the device_wipe of this CommandsV3Model.  # noqa: E501

        The DeviceWipe command options. This command is applicable only for macOS devices.  # noqa: E501

        :return: The device_wipe of this CommandsV3Model.  # noqa: E501
        :rtype: DeviceWipeCommandV3Model
        """
        return self._device_wipe

    @device_wipe.setter
    def device_wipe(self, device_wipe):
        """Sets the device_wipe of this CommandsV3Model.

        The DeviceWipe command options. This command is applicable only for macOS devices.  # noqa: E501

        :param device_wipe: The device_wipe of this CommandsV3Model.  # noqa: E501
        :type: DeviceWipeCommandV3Model
        """

        self._device_wipe = device_wipe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommandsV3Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommandsV3Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommandsV3Model):
            return True

        return self.to_dict() != other.to_dict()
