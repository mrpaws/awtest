# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class DeviceCustomAttributesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_custom_attributes_bulk_update_device_custom_attributes(self, devices, **kwargs):  # noqa: E501
        """New - Bulk update of device custom attributes.  # noqa: E501

        Device custom attributes of multiple devices are updated in a single call. This API will not add new custom attributes to device, but update existing custom attributes by assigning new values to them. Custom attributes for 500 devices can be updated at a time with this API. Device custom attributes can be updated using device uuid or serial number. Optionally user name can be used with serial number to uniquely identify the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_bulk_update_device_custom_attributes(devices, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeviceCustomAttributeRequestV1Model] devices: The list of devices to update custom attributes.(Required) (required)
        :return: CustomAttributesBulkUpdateResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_custom_attributes_bulk_update_device_custom_attributes_with_http_info(devices, **kwargs)  # noqa: E501
        else:
            (data) = self.device_custom_attributes_bulk_update_device_custom_attributes_with_http_info(devices, **kwargs)  # noqa: E501
            return data

    def device_custom_attributes_bulk_update_device_custom_attributes_with_http_info(self, devices, **kwargs):  # noqa: E501
        """New - Bulk update of device custom attributes.  # noqa: E501

        Device custom attributes of multiple devices are updated in a single call. This API will not add new custom attributes to device, but update existing custom attributes by assigning new values to them. Custom attributes for 500 devices can be updated at a time with this API. Device custom attributes can be updated using device uuid or serial number. Optionally user name can be used with serial number to uniquely identify the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_bulk_update_device_custom_attributes_with_http_info(devices, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[DeviceCustomAttributeRequestV1Model] devices: The list of devices to update custom attributes.(Required) (required)
        :return: CustomAttributesBulkUpdateResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['devices']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_custom_attributes_bulk_update_device_custom_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'devices' is set
        if self.api_client.client_side_validation and ('devices' not in params or
                                                       params['devices'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `devices` when calling `device_custom_attributes_bulk_update_device_custom_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'devices' in params:
            body_params = params['devices']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/customattributes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomAttributesBulkUpdateResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_custom_attributes_delete_custom_attributes_by_serial_nr(self, serialnumber, **kwargs):  # noqa: E501
        """Deletes the device custom attributes by serial number.  # noqa: E501

        Deletes the device custom attributes by serial number for the input Names and Application Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_delete_custom_attributes_by_serial_nr(serialnumber, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serialnumber (Required). (required)
        :param DeleteDeviceCustomAttributeListModel custom_attributes: Custom attribute list.
        :return: BulkResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_custom_attributes_delete_custom_attributes_by_serial_nr_with_http_info(serialnumber, **kwargs)  # noqa: E501
        else:
            (data) = self.device_custom_attributes_delete_custom_attributes_by_serial_nr_with_http_info(serialnumber, **kwargs)  # noqa: E501
            return data

    def device_custom_attributes_delete_custom_attributes_by_serial_nr_with_http_info(self, serialnumber, **kwargs):  # noqa: E501
        """Deletes the device custom attributes by serial number.  # noqa: E501

        Deletes the device custom attributes by serial number for the input Names and Application Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_delete_custom_attributes_by_serial_nr_with_http_info(serialnumber, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serialnumber (Required). (required)
        :param DeleteDeviceCustomAttributeListModel custom_attributes: Custom attribute list.
        :return: BulkResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serialnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_custom_attributes_delete_custom_attributes_by_serial_nr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serialnumber' is set
        if self.api_client.client_side_validation and ('serialnumber' not in params or
                                                       params['serialnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serialnumber` when calling `device_custom_attributes_delete_custom_attributes_by_serial_nr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serialnumber' in params:
            path_params['serialnumber'] = params['serialnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/serialnumber/{serialnumber}/customattributes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_custom_attributes_delete_custom_attributes_for_device_async(self, id, **kwargs):  # noqa: E501
        """Deletes the device custom attributes by device id.  # noqa: E501

        Deletes the device custom attributes by device id for the input Names and Application Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_delete_custom_attributes_for_device_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device Identifier (Required). (required)
        :param DeleteDeviceCustomAttributeListModel custom_attributes: Custom attribute list.
        :return: BulkResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_custom_attributes_delete_custom_attributes_for_device_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_custom_attributes_delete_custom_attributes_for_device_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def device_custom_attributes_delete_custom_attributes_for_device_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes the device custom attributes by device id.  # noqa: E501

        Deletes the device custom attributes by device id for the input Names and Application Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_delete_custom_attributes_for_device_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device Identifier (Required). (required)
        :param DeleteDeviceCustomAttributeListModel custom_attributes: Custom attribute list.
        :return: BulkResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_custom_attributes_delete_custom_attributes_for_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `device_custom_attributes_delete_custom_attributes_for_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/customattributes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_custom_attributes_device_custom_attribute_change_report(self, **kwargs):  # noqa: E501
        """Searches for changes made to device custom attributes.  # noqa: E501

        Searches for changes made to device custom attributes based on the input device id, custom attribute name, source, application group and other filtering attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_device_custom_attribute_change_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id to be searched, user's OG is considered if not sent.
        :param int deviceid: Device id to search.
        :param datetime startdate: Filters the custom attributes which are modified after this datetime.
        :param datetime enddate: Filters the custom attributes which are modified before this datetime.
        :param str applicationgroup: Application group to search.
        :param str customattributename: Custom attribute name to search.
        :param str source: Custom attribute source to search.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceCustomAttributeChangeReportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_custom_attributes_device_custom_attribute_change_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_custom_attributes_device_custom_attribute_change_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_custom_attributes_device_custom_attribute_change_report_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for changes made to device custom attributes.  # noqa: E501

        Searches for changes made to device custom attributes based on the input device id, custom attribute name, source, application group and other filtering attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_device_custom_attribute_change_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id to be searched, user's OG is considered if not sent.
        :param int deviceid: Device id to search.
        :param datetime startdate: Filters the custom attributes which are modified after this datetime.
        :param datetime enddate: Filters the custom attributes which are modified before this datetime.
        :param str applicationgroup: Application group to search.
        :param str customattributename: Custom attribute name to search.
        :param str source: Custom attribute source to search.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceCustomAttributeChangeReportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'deviceid', 'startdate', 'enddate', 'applicationgroup', 'customattributename', 'source', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_custom_attributes_device_custom_attribute_change_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'startdate' in params:
            query_params.append(('startdate', params['startdate']))  # noqa: E501
        if 'enddate' in params:
            query_params.append(('enddate', params['enddate']))  # noqa: E501
        if 'applicationgroup' in params:
            query_params.append(('applicationgroup', params['applicationgroup']))  # noqa: E501
        if 'customattributename' in params:
            query_params.append(('customattributename', params['customattributename']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/customattribute/changereport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceCustomAttributeChangeReportResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_custom_attributes_device_custom_attribute_search(self, **kwargs):  # noqa: E501
        """Searches for device custom attributes.  # noqa: E501

        Searches for device custom attributes based on the input Device ID, Custom Attribute Name, Source, Application Group and other filtering attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_device_custom_attribute_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id to be searched, user's OG is considered if not sent.
        :param int deviceid: Device id to search.
        :param str serialnumber: Device serial number to search.
        :param datetime modifiedfrom: Filters the custom attributes which are modified after this datetime.
        :param datetime modifiedtill: Filters the custom attributes which are modified before this datetime.
        :param str applicationgroup: Application group to search.
        :param str customattributename: Custom attribute name to search.
        :param str source: Custom attribute source to search.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceCustomAttributeSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_custom_attributes_device_custom_attribute_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.device_custom_attributes_device_custom_attribute_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def device_custom_attributes_device_custom_attribute_search_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for device custom attributes.  # noqa: E501

        Searches for device custom attributes based on the input Device ID, Custom Attribute Name, Source, Application Group and other filtering attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_device_custom_attribute_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: Organization group id to be searched, user's OG is considered if not sent.
        :param int deviceid: Device id to search.
        :param str serialnumber: Device serial number to search.
        :param datetime modifiedfrom: Filters the custom attributes which are modified after this datetime.
        :param datetime modifiedtill: Filters the custom attributes which are modified before this datetime.
        :param str applicationgroup: Application group to search.
        :param str customattributename: Custom attribute name to search.
        :param str source: Custom attribute source to search.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceCustomAttributeSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'deviceid', 'serialnumber', 'modifiedfrom', 'modifiedtill', 'applicationgroup', 'customattributename', 'source', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_custom_attributes_device_custom_attribute_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'serialnumber' in params:
            query_params.append(('serialnumber', params['serialnumber']))  # noqa: E501
        if 'modifiedfrom' in params:
            query_params.append(('modifiedfrom', params['modifiedfrom']))  # noqa: E501
        if 'modifiedtill' in params:
            query_params.append(('modifiedtill', params['modifiedtill']))  # noqa: E501
        if 'applicationgroup' in params:
            query_params.append(('applicationgroup', params['applicationgroup']))  # noqa: E501
        if 'customattributename' in params:
            query_params.append(('customattributename', params['customattributename']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/customattribute/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceCustomAttributeSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_custom_attributes_update_custom_attributes_async(self, id, custom_attributes, **kwargs):  # noqa: E501
        """Updates the device custom attribute value by device id.  # noqa: E501

        Updates the device custom attribute value by device id if already present for a device, else adds the same to the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_update_custom_attributes_async(id, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device Identifier (Required). (required)
        :param DeviceCustomAttributeListModel custom_attributes: Custom Attribute name and value pairs (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_custom_attributes_update_custom_attributes_async_with_http_info(id, custom_attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.device_custom_attributes_update_custom_attributes_async_with_http_info(id, custom_attributes, **kwargs)  # noqa: E501
            return data

    def device_custom_attributes_update_custom_attributes_async_with_http_info(self, id, custom_attributes, **kwargs):  # noqa: E501
        """Updates the device custom attribute value by device id.  # noqa: E501

        Updates the device custom attribute value by device id if already present for a device, else adds the same to the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_update_custom_attributes_async_with_http_info(id, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device Identifier (Required). (required)
        :param DeviceCustomAttributeListModel custom_attributes: Custom Attribute name and value pairs (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_custom_attributes_update_custom_attributes_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `device_custom_attributes_update_custom_attributes_async`")  # noqa: E501
        # verify the required parameter 'custom_attributes' is set
        if self.api_client.client_side_validation and ('custom_attributes' not in params or
                                                       params['custom_attributes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_attributes` when calling `device_custom_attributes_update_custom_attributes_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/customattributes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_custom_attributes_update_custom_attributes_by_asset_nr(self, assetnumber, custom_attributes, **kwargs):  # noqa: E501
        """Updates the device custom attribute value by asset number.  # noqa: E501

        Updates the device custom attribute value if already present for a device, else adds the same to the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_update_custom_attributes_by_asset_nr(assetnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device Assetnumber (Required). (required)
        :param DeviceCustomAttributeListModel custom_attributes: Custom Attribute name and value pairs (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_custom_attributes_update_custom_attributes_by_asset_nr_with_http_info(assetnumber, custom_attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.device_custom_attributes_update_custom_attributes_by_asset_nr_with_http_info(assetnumber, custom_attributes, **kwargs)  # noqa: E501
            return data

    def device_custom_attributes_update_custom_attributes_by_asset_nr_with_http_info(self, assetnumber, custom_attributes, **kwargs):  # noqa: E501
        """Updates the device custom attribute value by asset number.  # noqa: E501

        Updates the device custom attribute value if already present for a device, else adds the same to the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_update_custom_attributes_by_asset_nr_with_http_info(assetnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device Assetnumber (Required). (required)
        :param DeviceCustomAttributeListModel custom_attributes: Custom Attribute name and value pairs (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assetnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_custom_attributes_update_custom_attributes_by_asset_nr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assetnumber' is set
        if self.api_client.client_side_validation and ('assetnumber' not in params or
                                                       params['assetnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assetnumber` when calling `device_custom_attributes_update_custom_attributes_by_asset_nr`")  # noqa: E501
        # verify the required parameter 'custom_attributes' is set
        if self.api_client.client_side_validation and ('custom_attributes' not in params or
                                                       params['custom_attributes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_attributes` when calling `device_custom_attributes_update_custom_attributes_by_asset_nr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assetnumber' in params:
            path_params['assetnumber'] = params['assetnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/assetnumber/{assetnumber}/customattributes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_custom_attributes_update_custom_attributes_by_serial_nr(self, serialnumber, custom_attributes, **kwargs):  # noqa: E501
        """Updates the device custom attribute value by serial number.  # noqa: E501

        Updates the device custom attribute value if already present for a device, else adds the same to the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_update_custom_attributes_by_serial_nr(serialnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serialnumber (Required). (required)
        :param DeviceCustomAttributeListModel custom_attributes: Custom Attribute name and value pairs (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_custom_attributes_update_custom_attributes_by_serial_nr_with_http_info(serialnumber, custom_attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.device_custom_attributes_update_custom_attributes_by_serial_nr_with_http_info(serialnumber, custom_attributes, **kwargs)  # noqa: E501
            return data

    def device_custom_attributes_update_custom_attributes_by_serial_nr_with_http_info(self, serialnumber, custom_attributes, **kwargs):  # noqa: E501
        """Updates the device custom attribute value by serial number.  # noqa: E501

        Updates the device custom attribute value if already present for a device, else adds the same to the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_custom_attributes_update_custom_attributes_by_serial_nr_with_http_info(serialnumber, custom_attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: Device Serialnumber (Required). (required)
        :param DeviceCustomAttributeListModel custom_attributes: Custom Attribute name and value pairs (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serialnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_custom_attributes_update_custom_attributes_by_serial_nr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serialnumber' is set
        if self.api_client.client_side_validation and ('serialnumber' not in params or
                                                       params['serialnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serialnumber` when calling `device_custom_attributes_update_custom_attributes_by_serial_nr`")  # noqa: E501
        # verify the required parameter 'custom_attributes' is set
        if self.api_client.client_side_validation and ('custom_attributes' not in params or
                                                       params['custom_attributes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `custom_attributes` when calling `device_custom_attributes_update_custom_attributes_by_serial_nr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serialnumber' in params:
            path_params['serialnumber'] = params['serialnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/serialnumber/{serialnumber}/customattributes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
