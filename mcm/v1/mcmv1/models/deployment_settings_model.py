# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mcmv1.configuration import Configuration


class DeploymentSettingsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'download_while_roaming': 'bool',
        'download_method': 'str',
        'force_download': 'bool',
        'download_priority': 'str',
        'is_required': 'bool',
        'is_featured_content': 'bool',
        'effective_date': 'datetime',
        'expiration_date': 'datetime',
        'download_date': 'datetime',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'download_while_roaming': 'downloadWhileRoaming',
        'download_method': 'downloadMethod',
        'force_download': 'forceDownload',
        'download_priority': 'downloadPriority',
        'is_required': 'isRequired',
        'is_featured_content': 'isFeaturedContent',
        'effective_date': 'effectiveDate',
        'expiration_date': 'expirationDate',
        'download_date': 'downloadDate',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, download_while_roaming=None, download_method=None, force_download=None, download_priority=None, is_required=None, is_featured_content=None, effective_date=None, expiration_date=None, download_date=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeploymentSettingsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._download_while_roaming = None
        self._download_method = None
        self._force_download = None
        self._download_priority = None
        self._is_required = None
        self._is_featured_content = None
        self._effective_date = None
        self._expiration_date = None
        self._download_date = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if download_while_roaming is not None:
            self.download_while_roaming = download_while_roaming
        if download_method is not None:
            self.download_method = download_method
        if force_download is not None:
            self.force_download = force_download
        if download_priority is not None:
            self.download_priority = download_priority
        if is_required is not None:
            self.is_required = is_required
        if is_featured_content is not None:
            self.is_featured_content = is_featured_content
        if effective_date is not None:
            self.effective_date = effective_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if download_date is not None:
            self.download_date = download_date
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def download_while_roaming(self):
        """Gets the download_while_roaming of this DeploymentSettingsModel.  # noqa: E501

        Value indicates whether download while roaming is enabled.  # noqa: E501

        :return: The download_while_roaming of this DeploymentSettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._download_while_roaming

    @download_while_roaming.setter
    def download_while_roaming(self, download_while_roaming):
        """Sets the download_while_roaming of this DeploymentSettingsModel.

        Value indicates whether download while roaming is enabled.  # noqa: E501

        :param download_while_roaming: The download_while_roaming of this DeploymentSettingsModel.  # noqa: E501
        :type: bool
        """

        self._download_while_roaming = download_while_roaming

    @property
    def download_method(self):
        """Gets the download_method of this DeploymentSettingsModel.  # noqa: E501

        Download method for the file.  # noqa: E501

        :return: The download_method of this DeploymentSettingsModel.  # noqa: E501
        :rtype: str
        """
        return self._download_method

    @download_method.setter
    def download_method(self, download_method):
        """Sets the download_method of this DeploymentSettingsModel.

        Download method for the file.  # noqa: E501

        :param download_method: The download_method of this DeploymentSettingsModel.  # noqa: E501
        :type: str
        """

        self._download_method = download_method

    @property
    def force_download(self):
        """Gets the force_download of this DeploymentSettingsModel.  # noqa: E501

        Value indicates whether force download is enabled.  # noqa: E501

        :return: The force_download of this DeploymentSettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._force_download

    @force_download.setter
    def force_download(self, force_download):
        """Sets the force_download of this DeploymentSettingsModel.

        Value indicates whether force download is enabled.  # noqa: E501

        :param force_download: The force_download of this DeploymentSettingsModel.  # noqa: E501
        :type: bool
        """

        self._force_download = force_download

    @property
    def download_priority(self):
        """Gets the download_priority of this DeploymentSettingsModel.  # noqa: E501

        Download priority for the content.  # noqa: E501

        :return: The download_priority of this DeploymentSettingsModel.  # noqa: E501
        :rtype: str
        """
        return self._download_priority

    @download_priority.setter
    def download_priority(self, download_priority):
        """Sets the download_priority of this DeploymentSettingsModel.

        Download priority for the content.  # noqa: E501

        :param download_priority: The download_priority of this DeploymentSettingsModel.  # noqa: E501
        :type: str
        """

        self._download_priority = download_priority

    @property
    def is_required(self):
        """Gets the is_required of this DeploymentSettingsModel.  # noqa: E501

        Value indicates whether the content is required.  # noqa: E501

        :return: The is_required of this DeploymentSettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this DeploymentSettingsModel.

        Value indicates whether the content is required.  # noqa: E501

        :param is_required: The is_required of this DeploymentSettingsModel.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def is_featured_content(self):
        """Gets the is_featured_content of this DeploymentSettingsModel.  # noqa: E501

        Value indicates whether the content is featured.  # noqa: E501

        :return: The is_featured_content of this DeploymentSettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_featured_content

    @is_featured_content.setter
    def is_featured_content(self, is_featured_content):
        """Sets the is_featured_content of this DeploymentSettingsModel.

        Value indicates whether the content is featured.  # noqa: E501

        :param is_featured_content: The is_featured_content of this DeploymentSettingsModel.  # noqa: E501
        :type: bool
        """

        self._is_featured_content = is_featured_content

    @property
    def effective_date(self):
        """Gets the effective_date of this DeploymentSettingsModel.  # noqa: E501

        Effective date for the content.  # noqa: E501

        :return: The effective_date of this DeploymentSettingsModel.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this DeploymentSettingsModel.

        Effective date for the content.  # noqa: E501

        :param effective_date: The effective_date of this DeploymentSettingsModel.  # noqa: E501
        :type: datetime
        """

        self._effective_date = effective_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this DeploymentSettingsModel.  # noqa: E501

        Expiration date for the content.  # noqa: E501

        :return: The expiration_date of this DeploymentSettingsModel.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this DeploymentSettingsModel.

        Expiration date for the content.  # noqa: E501

        :param expiration_date: The expiration_date of this DeploymentSettingsModel.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def download_date(self):
        """Gets the download_date of this DeploymentSettingsModel.  # noqa: E501

        Download date for the content.  # noqa: E501

        :return: The download_date of this DeploymentSettingsModel.  # noqa: E501
        :rtype: datetime
        """
        return self._download_date

    @download_date.setter
    def download_date(self, download_date):
        """Sets the download_date of this DeploymentSettingsModel.

        Download date for the content.  # noqa: E501

        :param download_date: The download_date of this DeploymentSettingsModel.  # noqa: E501
        :type: datetime
        """

        self._download_date = download_date

    @property
    def id(self):
        """Gets the id of this DeploymentSettingsModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this DeploymentSettingsModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeploymentSettingsModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this DeploymentSettingsModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeploymentSettingsModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this DeploymentSettingsModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeploymentSettingsModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this DeploymentSettingsModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentSettingsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentSettingsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeploymentSettingsModel):
            return True

        return self.to_dict() != other.to_dict()
