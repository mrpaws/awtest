# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class DeviceSensorResponseLiteV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'organization_group_name': 'str',
        'organization_group_uuid': 'str',
        'platform': 'int',
        'query_type': 'int',
        'assignment_count': 'int',
        'query_response_type': 'int',
        'last_modified_by': 'str',
        'last_modified_on': 'datetime',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'organization_group_name': 'organization_group_name',
        'organization_group_uuid': 'organization_group_uuid',
        'platform': 'platform',
        'query_type': 'query_type',
        'assignment_count': 'assignment_count',
        'query_response_type': 'query_response_type',
        'last_modified_by': 'last_modified_by',
        'last_modified_on': 'last_modified_on',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, name=None, organization_group_name=None, organization_group_uuid=None, platform=None, query_type=None, assignment_count=None, query_response_type=None, last_modified_by=None, last_modified_on=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceSensorResponseLiteV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._organization_group_name = None
        self._organization_group_uuid = None
        self._platform = None
        self._query_type = None
        self._assignment_count = None
        self._query_response_type = None
        self._last_modified_by = None
        self._last_modified_on = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if organization_group_name is not None:
            self.organization_group_name = organization_group_name
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if platform is not None:
            self.platform = platform
        if query_type is not None:
            self.query_type = query_type
        if assignment_count is not None:
            self.assignment_count = assignment_count
        if query_response_type is not None:
            self.query_response_type = query_response_type
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def name(self):
        """Gets the name of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        Name of the device sensor.  # noqa: E501

        :return: The name of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceSensorResponseLiteV2Model.

        Name of the device sensor.  # noqa: E501

        :param name: The name of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization_group_name(self):
        """Gets the organization_group_name of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        Organization Group name the device sensor is managed by.  # noqa: E501

        :return: The organization_group_name of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_name

    @organization_group_name.setter
    def organization_group_name(self, organization_group_name):
        """Sets the organization_group_name of this DeviceSensorResponseLiteV2Model.

        Organization Group name the device sensor is managed by.  # noqa: E501

        :param organization_group_name: The organization_group_name of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: str
        """

        self._organization_group_name = organization_group_name

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        Identifier of the Organization Group.  # noqa: E501

        :return: The organization_group_uuid of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this DeviceSensorResponseLiteV2Model.

        Identifier of the Organization Group.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def platform(self):
        """Gets the platform of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        Platform for which the device sensor will be created.  # noqa: E501

        :return: The platform of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DeviceSensorResponseLiteV2Model.

        Platform for which the device sensor will be created.  # noqa: E501

        :param platform: The platform of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 21]  # noqa: E501
        if (self._configuration.client_side_validation and
                platform not in allowed_values):
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def query_type(self):
        """Gets the query_type of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        Query type of the script.  # noqa: E501

        :return: The query_type of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: int
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this DeviceSensorResponseLiteV2Model.

        Query type of the script.  # noqa: E501

        :param query_type: The query_type of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                query_type not in allowed_values):
            raise ValueError(
                "Invalid value for `query_type` ({0}), must be one of {1}"  # noqa: E501
                .format(query_type, allowed_values)
            )

        self._query_type = query_type

    @property
    def assignment_count(self):
        """Gets the assignment_count of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        The total count of assignment groups associated with the sensor.  # noqa: E501

        :return: The assignment_count of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: int
        """
        return self._assignment_count

    @assignment_count.setter
    def assignment_count(self, assignment_count):
        """Sets the assignment_count of this DeviceSensorResponseLiteV2Model.

        The total count of assignment groups associated with the sensor.  # noqa: E501

        :param assignment_count: The assignment_count of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: int
        """

        self._assignment_count = assignment_count

    @property
    def query_response_type(self):
        """Gets the query_response_type of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        Query response type of the script.  # noqa: E501

        :return: The query_response_type of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: int
        """
        return self._query_response_type

    @query_response_type.setter
    def query_response_type(self, query_response_type):
        """Sets the query_response_type of this DeviceSensorResponseLiteV2Model.

        Query response type of the script.  # noqa: E501

        :param query_response_type: The query_response_type of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                query_response_type not in allowed_values):
            raise ValueError(
                "Invalid value for `query_response_type` ({0}), must be one of {1}"  # noqa: E501
                .format(query_response_type, allowed_values)
            )

        self._query_response_type = query_response_type

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        The user that last modified the sensor or created it in case modifiedBy is not present.  # noqa: E501

        :return: The last_modified_by of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this DeviceSensorResponseLiteV2Model.

        The user that last modified the sensor or created it in case modifiedBy is not present.  # noqa: E501

        :param last_modified_by: The last_modified_by of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        The time stamp when the sensor was last modified or created in case modifiedOn is not present.  # noqa: E501

        :return: The last_modified_on of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this DeviceSensorResponseLiteV2Model.

        The time stamp when the sensor was last modified or created in case modifiedOn is not present.  # noqa: E501

        :param last_modified_on: The last_modified_on of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def id(self):
        """Gets the id of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceSensorResponseLiteV2Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceSensorResponseLiteV2Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceSensorResponseLiteV2Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this DeviceSensorResponseLiteV2Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceSensorResponseLiteV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSensorResponseLiteV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceSensorResponseLiteV2Model):
            return True

        return self.to_dict() != other.to_dict()
