# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class RerouteRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_target': 'str',
        'port_target': 'str',
        'ip_proxy': 'str',
        'port_proxy': 'int',
        'network_interface': 'str',
        'package_name': 'str'
    }

    attribute_map = {
        'host_target': 'HostTarget',
        'port_target': 'PortTarget',
        'ip_proxy': 'IpProxy',
        'port_proxy': 'PortProxy',
        'network_interface': 'NetworkInterface',
        'package_name': 'PackageName'
    }

    def __init__(self, host_target=None, port_target=None, ip_proxy=None, port_proxy=None, network_interface=None, package_name=None, _configuration=None):  # noqa: E501
        """RerouteRule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._host_target = None
        self._port_target = None
        self._ip_proxy = None
        self._port_proxy = None
        self._network_interface = None
        self._package_name = None
        self.discriminator = None

        if host_target is not None:
            self.host_target = host_target
        if port_target is not None:
            self.port_target = port_target
        if ip_proxy is not None:
            self.ip_proxy = ip_proxy
        if port_proxy is not None:
            self.port_proxy = port_proxy
        if network_interface is not None:
            self.network_interface = network_interface
        if package_name is not None:
            self.package_name = package_name

    @property
    def host_target(self):
        """Gets the host_target of this RerouteRule.  # noqa: E501

        Gets or sets RerouteHostTarget.  # noqa: E501

        :return: The host_target of this RerouteRule.  # noqa: E501
        :rtype: str
        """
        return self._host_target

    @host_target.setter
    def host_target(self, host_target):
        """Sets the host_target of this RerouteRule.

        Gets or sets RerouteHostTarget.  # noqa: E501

        :param host_target: The host_target of this RerouteRule.  # noqa: E501
        :type: str
        """

        self._host_target = host_target

    @property
    def port_target(self):
        """Gets the port_target of this RerouteRule.  # noqa: E501

        Gets or sets ReroutePortTarget.  # noqa: E501

        :return: The port_target of this RerouteRule.  # noqa: E501
        :rtype: str
        """
        return self._port_target

    @port_target.setter
    def port_target(self, port_target):
        """Sets the port_target of this RerouteRule.

        Gets or sets ReroutePortTarget.  # noqa: E501

        :param port_target: The port_target of this RerouteRule.  # noqa: E501
        :type: str
        """

        self._port_target = port_target

    @property
    def ip_proxy(self):
        """Gets the ip_proxy of this RerouteRule.  # noqa: E501

        Gets or sets RerouteIpProxy.  # noqa: E501

        :return: The ip_proxy of this RerouteRule.  # noqa: E501
        :rtype: str
        """
        return self._ip_proxy

    @ip_proxy.setter
    def ip_proxy(self, ip_proxy):
        """Sets the ip_proxy of this RerouteRule.

        Gets or sets RerouteIpProxy.  # noqa: E501

        :param ip_proxy: The ip_proxy of this RerouteRule.  # noqa: E501
        :type: str
        """

        self._ip_proxy = ip_proxy

    @property
    def port_proxy(self):
        """Gets the port_proxy of this RerouteRule.  # noqa: E501

        Gets or sets ReroutePortProxy.  # noqa: E501

        :return: The port_proxy of this RerouteRule.  # noqa: E501
        :rtype: int
        """
        return self._port_proxy

    @port_proxy.setter
    def port_proxy(self, port_proxy):
        """Sets the port_proxy of this RerouteRule.

        Gets or sets ReroutePortProxy.  # noqa: E501

        :param port_proxy: The port_proxy of this RerouteRule.  # noqa: E501
        :type: int
        """

        self._port_proxy = port_proxy

    @property
    def network_interface(self):
        """Gets the network_interface of this RerouteRule.  # noqa: E501

        Gets or sets RerouteNetworkInterface.  # noqa: E501

        :return: The network_interface of this RerouteRule.  # noqa: E501
        :rtype: str
        """
        return self._network_interface

    @network_interface.setter
    def network_interface(self, network_interface):
        """Sets the network_interface of this RerouteRule.

        Gets or sets RerouteNetworkInterface.  # noqa: E501

        :param network_interface: The network_interface of this RerouteRule.  # noqa: E501
        :type: str
        """

        self._network_interface = network_interface

    @property
    def package_name(self):
        """Gets the package_name of this RerouteRule.  # noqa: E501

        Gets or sets ReroutePackageName.  # noqa: E501

        :return: The package_name of this RerouteRule.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this RerouteRule.

        Gets or sets ReroutePackageName.  # noqa: E501

        :param package_name: The package_name of this RerouteRule.  # noqa: E501
        :type: str
        """

        self._package_name = package_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RerouteRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RerouteRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RerouteRule):
            return True

        return self.to_dict() != other.to_dict()
