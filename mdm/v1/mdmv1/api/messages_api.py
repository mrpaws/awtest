# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class MessagesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def messages_send_bulk_email_by_alternate_id_async(self, email_message, searchby, **kwargs):  # noqa: E501
        """Sends an email to the users of multiple devices.  # noqa: E501

        Sends an email to the users of multiple devices identified by their alternate ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_bulk_email_by_alternate_id_async(email_message, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailMessage email_message: Information about the email message to send and the recipient devices (Required). (required)
        :param str searchby: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_bulk_email_by_alternate_id_async_with_http_info(email_message, searchby, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_bulk_email_by_alternate_id_async_with_http_info(email_message, searchby, **kwargs)  # noqa: E501
            return data

    def messages_send_bulk_email_by_alternate_id_async_with_http_info(self, email_message, searchby, **kwargs):  # noqa: E501
        """Sends an email to the users of multiple devices.  # noqa: E501

        Sends an email to the users of multiple devices identified by their alternate ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_bulk_email_by_alternate_id_async_with_http_info(email_message, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailMessage email_message: Information about the email message to send and the recipient devices (Required). (required)
        :param str searchby: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email_message', 'searchby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_bulk_email_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email_message' is set
        if self.api_client.client_side_validation and ('email_message' not in params or
                                                       params['email_message'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `email_message` when calling `messages_send_bulk_email_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `messages_send_bulk_email_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email_message' in params:
            body_params = params['email_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/messages/bulkemail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_bulk_message_sms_by_alternate_id_async(self, sms_message, searchby, **kwargs):  # noqa: E501
        """Sends an SMS message to multiple devices.  # noqa: E501

        Sends an SMS message to multiple devices identified by their alternate ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_bulk_message_sms_by_alternate_id_async(sms_message, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmsMessage sms_message: Information about the SMS message and recipient devices (Required). (required)
        :param str searchby: The alternate id type of the devices [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_bulk_message_sms_by_alternate_id_async_with_http_info(sms_message, searchby, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_bulk_message_sms_by_alternate_id_async_with_http_info(sms_message, searchby, **kwargs)  # noqa: E501
            return data

    def messages_send_bulk_message_sms_by_alternate_id_async_with_http_info(self, sms_message, searchby, **kwargs):  # noqa: E501
        """Sends an SMS message to multiple devices.  # noqa: E501

        Sends an SMS message to multiple devices identified by their alternate ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_bulk_message_sms_by_alternate_id_async_with_http_info(sms_message, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmsMessage sms_message: Information about the SMS message and recipient devices (Required). (required)
        :param str searchby: The alternate id type of the devices [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sms_message', 'searchby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_bulk_message_sms_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sms_message' is set
        if self.api_client.client_side_validation and ('sms_message' not in params or
                                                       params['sms_message'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sms_message` when calling `messages_send_bulk_message_sms_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `messages_send_bulk_message_sms_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sms_message' in params:
            body_params = params['sms_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/messages/bulksms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_bulk_push_by_alternate_id_async(self, push_notification_message, search_by, **kwargs):  # noqa: E501
        """Sends a push message to multiple devices.  # noqa: E501

        Sends a push message to multiple devices identified by their alternate ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_bulk_push_by_alternate_id_async(push_notification_message, search_by, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PushNotificationMessage push_notification_message: Information about the push message to send and the recipient devices (Required). (required)
        :param str search_by: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_bulk_push_by_alternate_id_async_with_http_info(push_notification_message, search_by, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_bulk_push_by_alternate_id_async_with_http_info(push_notification_message, search_by, **kwargs)  # noqa: E501
            return data

    def messages_send_bulk_push_by_alternate_id_async_with_http_info(self, push_notification_message, search_by, **kwargs):  # noqa: E501
        """Sends a push message to multiple devices.  # noqa: E501

        Sends a push message to multiple devices identified by their alternate ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_bulk_push_by_alternate_id_async_with_http_info(push_notification_message, search_by, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PushNotificationMessage push_notification_message: Information about the push message to send and the recipient devices (Required). (required)
        :param str search_by: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['push_notification_message', 'search_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_bulk_push_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'push_notification_message' is set
        if self.api_client.client_side_validation and ('push_notification_message' not in params or
                                                       params['push_notification_message'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `push_notification_message` when calling `messages_send_bulk_push_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `messages_send_bulk_push_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'push_notification_message' in params:
            body_params = params['push_notification_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/messages/bulkpush', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_email_async(self, id, email, **kwargs):  # noqa: E501
        """Sends an email to the user of the device.  # noqa: E501

        Sends an email message to the user of the device specified by the device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_email_async(id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID of the recipient device (Required). (required)
        :param Email email: Information about the email message (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_email_async_with_http_info(id, email, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_email_async_with_http_info(id, email, **kwargs)  # noqa: E501
            return data

    def messages_send_email_async_with_http_info(self, id, email, **kwargs):  # noqa: E501
        """Sends an email to the user of the device.  # noqa: E501

        Sends an email message to the user of the device specified by the device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_email_async_with_http_info(id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID of the recipient device (Required). (required)
        :param Email email: Information about the email message (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_email_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `messages_send_email_async`")  # noqa: E501
        # verify the required parameter 'email' is set
        if self.api_client.client_side_validation and ('email' not in params or
                                                       params['email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `email` when calling `messages_send_email_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email' in params:
            body_params = params['email']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/messages/email', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_email_by_alternate_id_async(self, searchby, id, **kwargs):  # noqa: E501
        """Sends an email to the user of the device.  # noqa: E501

        Sends an email to the user of the device identified by alternate id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_email_by_alternate_id_async(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :param str id: The alternate id of the device (Required). (required)
        :param Email email: Information about the email message.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_email_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_email_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
            return data

    def messages_send_email_by_alternate_id_async_with_http_info(self, searchby, id, **kwargs):  # noqa: E501
        """Sends an email to the user of the device.  # noqa: E501

        Sends an email to the user of the device identified by alternate id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_email_by_alternate_id_async_with_http_info(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :param str id: The alternate id of the device (Required). (required)
        :param Email email: Information about the email message.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['searchby', 'id', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_email_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `messages_send_email_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `messages_send_email_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email' in params:
            body_params = params['email']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/messages/email', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_message_async(self, id, **kwargs):  # noqa: E501
        """Sends a message to the device.  # noqa: E501

        Sends a push notification to the device identified by device ID. If the device is not enrolled, an SMS message will be sent instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_message_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID of the recipient device (Required). (required)
        :param GenericMessage generic_message: Information about the message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_message_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_message_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def messages_send_message_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Sends a message to the device.  # noqa: E501

        Sends a push notification to the device identified by device ID. If the device is not enrolled, an SMS message will be sent instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_message_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID of the recipient device (Required). (required)
        :param GenericMessage generic_message: Information about the message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'generic_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_message_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `messages_send_message_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generic_message' in params:
            body_params = params['generic_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/messages/{id}/message', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_message_by_alternate_id_async(self, searchby, id, **kwargs):  # noqa: E501
        """Sends a message to the device.  # noqa: E501

        Sends a push notification to the device identified by alternate ID. If the device is not enrolled, an SMS message will be sent instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_message_by_alternate_id_async(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type to search by [DeviceId, Macaddress, Udid, Serialnumber] (Required). (required)
        :param str id: The alternate id of the device (Required). (required)
        :param GenericMessage generic_message: Information about the message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_message_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_message_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
            return data

    def messages_send_message_by_alternate_id_async_with_http_info(self, searchby, id, **kwargs):  # noqa: E501
        """Sends a message to the device.  # noqa: E501

        Sends a push notification to the device identified by alternate ID. If the device is not enrolled, an SMS message will be sent instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_message_by_alternate_id_async_with_http_info(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type to search by [DeviceId, Macaddress, Udid, Serialnumber] (Required). (required)
        :param str id: The alternate id of the device (Required). (required)
        :param GenericMessage generic_message: Information about the message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['searchby', 'id', 'generic_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_message_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `messages_send_message_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `messages_send_message_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generic_message' in params:
            body_params = params['generic_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/messages/message', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_push_async(self, id, push_message, **kwargs):  # noqa: E501
        """Sends a push message to the device.  # noqa: E501

        Sends a push message to the device specified by the device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_push_async(id, push_message, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID of the recipient device (Required). (required)
        :param PushMessage push_message: Information about the push message (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_push_async_with_http_info(id, push_message, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_push_async_with_http_info(id, push_message, **kwargs)  # noqa: E501
            return data

    def messages_send_push_async_with_http_info(self, id, push_message, **kwargs):  # noqa: E501
        """Sends a push message to the device.  # noqa: E501

        Sends a push message to the device specified by the device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_push_async_with_http_info(id, push_message, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID of the recipient device (Required). (required)
        :param PushMessage push_message: Information about the push message (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'push_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_push_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `messages_send_push_async`")  # noqa: E501
        # verify the required parameter 'push_message' is set
        if self.api_client.client_side_validation and ('push_message' not in params or
                                                       params['push_message'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `push_message` when calling `messages_send_push_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'push_message' in params:
            body_params = params['push_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/messages/push', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_push_by_alternate_id_async(self, searchby, id, **kwargs):  # noqa: E501
        """Sends a push message to the device.  # noqa: E501

        Sends a push notification message to the device identified by alternate id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_push_by_alternate_id_async(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :param str id: The alternate id of the device (Required). (required)
        :param PushMessage push_message: Information about the push message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_push_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_push_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
            return data

    def messages_send_push_by_alternate_id_async_with_http_info(self, searchby, id, **kwargs):  # noqa: E501
        """Sends a push message to the device.  # noqa: E501

        Sends a push notification message to the device identified by alternate id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_push_by_alternate_id_async_with_http_info(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :param str id: The alternate id of the device (Required). (required)
        :param PushMessage push_message: Information about the push message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['searchby', 'id', 'push_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_push_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `messages_send_push_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `messages_send_push_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'push_message' in params:
            body_params = params['push_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/messages/push', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_sms_async(self, id, sms, **kwargs):  # noqa: E501
        """Sends an SMS message to the device.  # noqa: E501

        Sends an SMS message to the device identified by the device ID in the URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_sms_async(id, sms, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID of the recipient device (Required). (required)
        :param Sms sms: Information about the SMS message (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_sms_async_with_http_info(id, sms, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_sms_async_with_http_info(id, sms, **kwargs)  # noqa: E501
            return data

    def messages_send_sms_async_with_http_info(self, id, sms, **kwargs):  # noqa: E501
        """Sends an SMS message to the device.  # noqa: E501

        Sends an SMS message to the device identified by the device ID in the URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_sms_async_with_http_info(id, sms, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The device ID of the recipient device (Required). (required)
        :param Sms sms: Information about the SMS message (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sms']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_sms_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `messages_send_sms_async`")  # noqa: E501
        # verify the required parameter 'sms' is set
        if self.api_client.client_side_validation and ('sms' not in params or
                                                       params['sms'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sms` when calling `messages_send_sms_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sms' in params:
            body_params = params['sms']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/messages/sms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def messages_send_sms_by_alternate_id_async(self, searchby, id, **kwargs):  # noqa: E501
        """Sends an SMS message to the device.  # noqa: E501

        Sends an SMS message to the device identified by alternate id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_sms_by_alternate_id_async(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :param str id: The alternate id of the device (Required). (required)
        :param Sms sms: Information about the SMS message.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.messages_send_sms_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
        else:
            (data) = self.messages_send_sms_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
            return data

    def messages_send_sms_by_alternate_id_async_with_http_info(self, searchby, id, **kwargs):  # noqa: E501
        """Sends an SMS message to the device.  # noqa: E501

        Sends an SMS message to the device identified by alternate id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.messages_send_sms_by_alternate_id_async_with_http_info(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber] (Required). (required)
        :param str id: The alternate id of the device (Required). (required)
        :param Sms sms: Information about the SMS message.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['searchby', 'id', 'sms']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method messages_send_sms_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `messages_send_sms_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `messages_send_sms_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sms' in params:
            body_params = params['sms']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/messages/sms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
