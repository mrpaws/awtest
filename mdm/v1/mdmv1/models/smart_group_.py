# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class SmartGroup_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'smart_group_id': 'int',
        'smart_group_uuid': 'str',
        'criteria_type': 'str',
        'managed_by_organization_group_id': 'str',
        'managed_by_organization_group_uuid': 'str',
        'managed_by_organization_group_name': 'str',
        'devices': 'int',
        'assignments': 'int',
        'exclusions': 'int',
        'organization_groups': 'list[SmartGroupOG]',
        'user_groups': 'list[SmartGroupUserGroup]',
        'tags': 'list[SmartGroupTag]',
        'ownerships': 'list[str]',
        'platforms': 'list[str]',
        'models': 'list[str]',
        'operating_systems': 'list[SmartGroupOperatingSystem]',
        'user_additions': 'list[SmartGroupUser]',
        'device_additions': 'list[SmartGroupDevice_]',
        'user_exclusions': 'list[SmartGroupUser]',
        'device_exclusions': 'list[SmartGroupDevice_]',
        'user_group_exclusions': 'list[SmartGroupUserGroup]',
        'management_types': 'list[str]',
        'enrollment_categories': 'list[str]',
        'oem_and_models': 'list[OEMAndModel]',
        'cpu_architectures': 'list[str]'
    }

    attribute_map = {
        'name': 'Name',
        'smart_group_id': 'SmartGroupID',
        'smart_group_uuid': 'SmartGroupUuid',
        'criteria_type': 'CriteriaType',
        'managed_by_organization_group_id': 'ManagedByOrganizationGroupId',
        'managed_by_organization_group_uuid': 'ManagedByOrganizationGroupUuid',
        'managed_by_organization_group_name': 'ManagedByOrganizationGroupName',
        'devices': 'Devices',
        'assignments': 'Assignments',
        'exclusions': 'Exclusions',
        'organization_groups': 'OrganizationGroups',
        'user_groups': 'UserGroups',
        'tags': 'Tags',
        'ownerships': 'Ownerships',
        'platforms': 'Platforms',
        'models': 'Models',
        'operating_systems': 'OperatingSystems',
        'user_additions': 'UserAdditions',
        'device_additions': 'DeviceAdditions',
        'user_exclusions': 'UserExclusions',
        'device_exclusions': 'DeviceExclusions',
        'user_group_exclusions': 'UserGroupExclusions',
        'management_types': 'ManagementTypes',
        'enrollment_categories': 'EnrollmentCategories',
        'oem_and_models': 'OEMAndModels',
        'cpu_architectures': 'CpuArchitectures'
    }

    def __init__(self, name=None, smart_group_id=None, smart_group_uuid=None, criteria_type=None, managed_by_organization_group_id=None, managed_by_organization_group_uuid=None, managed_by_organization_group_name=None, devices=None, assignments=None, exclusions=None, organization_groups=None, user_groups=None, tags=None, ownerships=None, platforms=None, models=None, operating_systems=None, user_additions=None, device_additions=None, user_exclusions=None, device_exclusions=None, user_group_exclusions=None, management_types=None, enrollment_categories=None, oem_and_models=None, cpu_architectures=None, _configuration=None):  # noqa: E501
        """SmartGroup_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._smart_group_id = None
        self._smart_group_uuid = None
        self._criteria_type = None
        self._managed_by_organization_group_id = None
        self._managed_by_organization_group_uuid = None
        self._managed_by_organization_group_name = None
        self._devices = None
        self._assignments = None
        self._exclusions = None
        self._organization_groups = None
        self._user_groups = None
        self._tags = None
        self._ownerships = None
        self._platforms = None
        self._models = None
        self._operating_systems = None
        self._user_additions = None
        self._device_additions = None
        self._user_exclusions = None
        self._device_exclusions = None
        self._user_group_exclusions = None
        self._management_types = None
        self._enrollment_categories = None
        self._oem_and_models = None
        self._cpu_architectures = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if smart_group_id is not None:
            self.smart_group_id = smart_group_id
        if smart_group_uuid is not None:
            self.smart_group_uuid = smart_group_uuid
        if criteria_type is not None:
            self.criteria_type = criteria_type
        if managed_by_organization_group_id is not None:
            self.managed_by_organization_group_id = managed_by_organization_group_id
        if managed_by_organization_group_uuid is not None:
            self.managed_by_organization_group_uuid = managed_by_organization_group_uuid
        if managed_by_organization_group_name is not None:
            self.managed_by_organization_group_name = managed_by_organization_group_name
        if devices is not None:
            self.devices = devices
        if assignments is not None:
            self.assignments = assignments
        if exclusions is not None:
            self.exclusions = exclusions
        if organization_groups is not None:
            self.organization_groups = organization_groups
        if user_groups is not None:
            self.user_groups = user_groups
        if tags is not None:
            self.tags = tags
        if ownerships is not None:
            self.ownerships = ownerships
        if platforms is not None:
            self.platforms = platforms
        if models is not None:
            self.models = models
        if operating_systems is not None:
            self.operating_systems = operating_systems
        if user_additions is not None:
            self.user_additions = user_additions
        if device_additions is not None:
            self.device_additions = device_additions
        if user_exclusions is not None:
            self.user_exclusions = user_exclusions
        if device_exclusions is not None:
            self.device_exclusions = device_exclusions
        if user_group_exclusions is not None:
            self.user_group_exclusions = user_group_exclusions
        if management_types is not None:
            self.management_types = management_types
        if enrollment_categories is not None:
            self.enrollment_categories = enrollment_categories
        if oem_and_models is not None:
            self.oem_and_models = oem_and_models
        if cpu_architectures is not None:
            self.cpu_architectures = cpu_architectures

    @property
    def name(self):
        """Gets the name of this SmartGroup_.  # noqa: E501

        Gets or sets smart Group Name.  # noqa: E501

        :return: The name of this SmartGroup_.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SmartGroup_.

        Gets or sets smart Group Name.  # noqa: E501

        :param name: The name of this SmartGroup_.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def smart_group_id(self):
        """Gets the smart_group_id of this SmartGroup_.  # noqa: E501

        Gets or sets smart Group Identifier.  # noqa: E501

        :return: The smart_group_id of this SmartGroup_.  # noqa: E501
        :rtype: int
        """
        return self._smart_group_id

    @smart_group_id.setter
    def smart_group_id(self, smart_group_id):
        """Sets the smart_group_id of this SmartGroup_.

        Gets or sets smart Group Identifier.  # noqa: E501

        :param smart_group_id: The smart_group_id of this SmartGroup_.  # noqa: E501
        :type: int
        """

        self._smart_group_id = smart_group_id

    @property
    def smart_group_uuid(self):
        """Gets the smart_group_uuid of this SmartGroup_.  # noqa: E501

        Gets or sets smart Group Identifier.  # noqa: E501

        :return: The smart_group_uuid of this SmartGroup_.  # noqa: E501
        :rtype: str
        """
        return self._smart_group_uuid

    @smart_group_uuid.setter
    def smart_group_uuid(self, smart_group_uuid):
        """Sets the smart_group_uuid of this SmartGroup_.

        Gets or sets smart Group Identifier.  # noqa: E501

        :param smart_group_uuid: The smart_group_uuid of this SmartGroup_.  # noqa: E501
        :type: str
        """

        self._smart_group_uuid = smart_group_uuid

    @property
    def criteria_type(self):
        """Gets the criteria_type of this SmartGroup_.  # noqa: E501

        Gets or sets smart Group Criteria Type (example: \"All\", \"UserDevice\").  # noqa: E501

        :return: The criteria_type of this SmartGroup_.  # noqa: E501
        :rtype: str
        """
        return self._criteria_type

    @criteria_type.setter
    def criteria_type(self, criteria_type):
        """Sets the criteria_type of this SmartGroup_.

        Gets or sets smart Group Criteria Type (example: \"All\", \"UserDevice\").  # noqa: E501

        :param criteria_type: The criteria_type of this SmartGroup_.  # noqa: E501
        :type: str
        """

        self._criteria_type = criteria_type

    @property
    def managed_by_organization_group_id(self):
        """Gets the managed_by_organization_group_id of this SmartGroup_.  # noqa: E501

        Gets or sets managedBy Organization Group Identifier.  # noqa: E501

        :return: The managed_by_organization_group_id of this SmartGroup_.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_organization_group_id

    @managed_by_organization_group_id.setter
    def managed_by_organization_group_id(self, managed_by_organization_group_id):
        """Sets the managed_by_organization_group_id of this SmartGroup_.

        Gets or sets managedBy Organization Group Identifier.  # noqa: E501

        :param managed_by_organization_group_id: The managed_by_organization_group_id of this SmartGroup_.  # noqa: E501
        :type: str
        """

        self._managed_by_organization_group_id = managed_by_organization_group_id

    @property
    def managed_by_organization_group_uuid(self):
        """Gets the managed_by_organization_group_uuid of this SmartGroup_.  # noqa: E501

        Gets or sets managedBy Organization Group Identifier.  # noqa: E501

        :return: The managed_by_organization_group_uuid of this SmartGroup_.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_organization_group_uuid

    @managed_by_organization_group_uuid.setter
    def managed_by_organization_group_uuid(self, managed_by_organization_group_uuid):
        """Sets the managed_by_organization_group_uuid of this SmartGroup_.

        Gets or sets managedBy Organization Group Identifier.  # noqa: E501

        :param managed_by_organization_group_uuid: The managed_by_organization_group_uuid of this SmartGroup_.  # noqa: E501
        :type: str
        """

        self._managed_by_organization_group_uuid = managed_by_organization_group_uuid

    @property
    def managed_by_organization_group_name(self):
        """Gets the managed_by_organization_group_name of this SmartGroup_.  # noqa: E501

        Gets or sets managedBy Organization Group Name.  # noqa: E501

        :return: The managed_by_organization_group_name of this SmartGroup_.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_organization_group_name

    @managed_by_organization_group_name.setter
    def managed_by_organization_group_name(self, managed_by_organization_group_name):
        """Sets the managed_by_organization_group_name of this SmartGroup_.

        Gets or sets managedBy Organization Group Name.  # noqa: E501

        :param managed_by_organization_group_name: The managed_by_organization_group_name of this SmartGroup_.  # noqa: E501
        :type: str
        """

        self._managed_by_organization_group_name = managed_by_organization_group_name

    @property
    def devices(self):
        """Gets the devices of this SmartGroup_.  # noqa: E501

        Gets or sets number of devices in Smart Group.  # noqa: E501

        :return: The devices of this SmartGroup_.  # noqa: E501
        :rtype: int
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this SmartGroup_.

        Gets or sets number of devices in Smart Group.  # noqa: E501

        :param devices: The devices of this SmartGroup_.  # noqa: E501
        :type: int
        """

        self._devices = devices

    @property
    def assignments(self):
        """Gets the assignments of this SmartGroup_.  # noqa: E501

        Gets or sets number of entities to which smart group is assigned.  # noqa: E501

        :return: The assignments of this SmartGroup_.  # noqa: E501
        :rtype: int
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this SmartGroup_.

        Gets or sets number of entities to which smart group is assigned.  # noqa: E501

        :param assignments: The assignments of this SmartGroup_.  # noqa: E501
        :type: int
        """

        self._assignments = assignments

    @property
    def exclusions(self):
        """Gets the exclusions of this SmartGroup_.  # noqa: E501

        Gets or sets number of entities from which the smart group is excluded.  # noqa: E501

        :return: The exclusions of this SmartGroup_.  # noqa: E501
        :rtype: int
        """
        return self._exclusions

    @exclusions.setter
    def exclusions(self, exclusions):
        """Sets the exclusions of this SmartGroup_.

        Gets or sets number of entities from which the smart group is excluded.  # noqa: E501

        :param exclusions: The exclusions of this SmartGroup_.  # noqa: E501
        :type: int
        """

        self._exclusions = exclusions

    @property
    def organization_groups(self):
        """Gets the organization_groups of this SmartGroup_.  # noqa: E501

        Gets or sets organizationGroups List.  # noqa: E501

        :return: The organization_groups of this SmartGroup_.  # noqa: E501
        :rtype: list[SmartGroupOG]
        """
        return self._organization_groups

    @organization_groups.setter
    def organization_groups(self, organization_groups):
        """Sets the organization_groups of this SmartGroup_.

        Gets or sets organizationGroups List.  # noqa: E501

        :param organization_groups: The organization_groups of this SmartGroup_.  # noqa: E501
        :type: list[SmartGroupOG]
        """

        self._organization_groups = organization_groups

    @property
    def user_groups(self):
        """Gets the user_groups of this SmartGroup_.  # noqa: E501

        Gets or sets userGroups List.  # noqa: E501

        :return: The user_groups of this SmartGroup_.  # noqa: E501
        :rtype: list[SmartGroupUserGroup]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this SmartGroup_.

        Gets or sets userGroups List.  # noqa: E501

        :param user_groups: The user_groups of this SmartGroup_.  # noqa: E501
        :type: list[SmartGroupUserGroup]
        """

        self._user_groups = user_groups

    @property
    def tags(self):
        """Gets the tags of this SmartGroup_.  # noqa: E501

        Gets or sets smartGroup Tags List.  # noqa: E501

        :return: The tags of this SmartGroup_.  # noqa: E501
        :rtype: list[SmartGroupTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SmartGroup_.

        Gets or sets smartGroup Tags List.  # noqa: E501

        :param tags: The tags of this SmartGroup_.  # noqa: E501
        :type: list[SmartGroupTag]
        """

        self._tags = tags

    @property
    def ownerships(self):
        """Gets the ownerships of this SmartGroup_.  # noqa: E501

        Gets or sets ownerships List (example : CorporateDedicated, CorporateShared, EmployeeOwned, AllOwnerships).  # noqa: E501

        :return: The ownerships of this SmartGroup_.  # noqa: E501
        :rtype: list[str]
        """
        return self._ownerships

    @ownerships.setter
    def ownerships(self, ownerships):
        """Sets the ownerships of this SmartGroup_.

        Gets or sets ownerships List (example : CorporateDedicated, CorporateShared, EmployeeOwned, AllOwnerships).  # noqa: E501

        :param ownerships: The ownerships of this SmartGroup_.  # noqa: E501
        :type: list[str]
        """

        self._ownerships = ownerships

    @property
    def platforms(self):
        """Gets the platforms of this SmartGroup_.  # noqa: E501

        Gets or sets platforms List (example : WindowsMobile, Apple, BlackBerry, Android, WindowsPhone, WindowsPc, AppleOsX, WindowsPhone8, WinRT, etc ).  # noqa: E501

        :return: The platforms of this SmartGroup_.  # noqa: E501
        :rtype: list[str]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this SmartGroup_.

        Gets or sets platforms List (example : WindowsMobile, Apple, BlackBerry, Android, WindowsPhone, WindowsPc, AppleOsX, WindowsPhone8, WinRT, etc ).  # noqa: E501

        :param platforms: The platforms of this SmartGroup_.  # noqa: E501
        :type: list[str]
        """

        self._platforms = platforms

    @property
    def models(self):
        """Gets the models of this SmartGroup_.  # noqa: E501

        Gets or sets models (example : iPad).  # noqa: E501

        :return: The models of this SmartGroup_.  # noqa: E501
        :rtype: list[str]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this SmartGroup_.

        Gets or sets models (example : iPad).  # noqa: E501

        :param models: The models of this SmartGroup_.  # noqa: E501
        :type: list[str]
        """

        self._models = models

    @property
    def operating_systems(self):
        """Gets the operating_systems of this SmartGroup_.  # noqa: E501

        Gets or sets operating Systems List.  # noqa: E501

        :return: The operating_systems of this SmartGroup_.  # noqa: E501
        :rtype: list[SmartGroupOperatingSystem]
        """
        return self._operating_systems

    @operating_systems.setter
    def operating_systems(self, operating_systems):
        """Sets the operating_systems of this SmartGroup_.

        Gets or sets operating Systems List.  # noqa: E501

        :param operating_systems: The operating_systems of this SmartGroup_.  # noqa: E501
        :type: list[SmartGroupOperatingSystem]
        """

        self._operating_systems = operating_systems

    @property
    def user_additions(self):
        """Gets the user_additions of this SmartGroup_.  # noqa: E501

        Gets or sets list of explicitly added users.  # noqa: E501

        :return: The user_additions of this SmartGroup_.  # noqa: E501
        :rtype: list[SmartGroupUser]
        """
        return self._user_additions

    @user_additions.setter
    def user_additions(self, user_additions):
        """Sets the user_additions of this SmartGroup_.

        Gets or sets list of explicitly added users.  # noqa: E501

        :param user_additions: The user_additions of this SmartGroup_.  # noqa: E501
        :type: list[SmartGroupUser]
        """

        self._user_additions = user_additions

    @property
    def device_additions(self):
        """Gets the device_additions of this SmartGroup_.  # noqa: E501

        Gets or sets list of explicitly added devices.  # noqa: E501

        :return: The device_additions of this SmartGroup_.  # noqa: E501
        :rtype: list[SmartGroupDevice_]
        """
        return self._device_additions

    @device_additions.setter
    def device_additions(self, device_additions):
        """Sets the device_additions of this SmartGroup_.

        Gets or sets list of explicitly added devices.  # noqa: E501

        :param device_additions: The device_additions of this SmartGroup_.  # noqa: E501
        :type: list[SmartGroupDevice_]
        """

        self._device_additions = device_additions

    @property
    def user_exclusions(self):
        """Gets the user_exclusions of this SmartGroup_.  # noqa: E501

        Gets or sets list of excluded users.  # noqa: E501

        :return: The user_exclusions of this SmartGroup_.  # noqa: E501
        :rtype: list[SmartGroupUser]
        """
        return self._user_exclusions

    @user_exclusions.setter
    def user_exclusions(self, user_exclusions):
        """Sets the user_exclusions of this SmartGroup_.

        Gets or sets list of excluded users.  # noqa: E501

        :param user_exclusions: The user_exclusions of this SmartGroup_.  # noqa: E501
        :type: list[SmartGroupUser]
        """

        self._user_exclusions = user_exclusions

    @property
    def device_exclusions(self):
        """Gets the device_exclusions of this SmartGroup_.  # noqa: E501

        Gets or sets list of excluded devices.  # noqa: E501

        :return: The device_exclusions of this SmartGroup_.  # noqa: E501
        :rtype: list[SmartGroupDevice_]
        """
        return self._device_exclusions

    @device_exclusions.setter
    def device_exclusions(self, device_exclusions):
        """Sets the device_exclusions of this SmartGroup_.

        Gets or sets list of excluded devices.  # noqa: E501

        :param device_exclusions: The device_exclusions of this SmartGroup_.  # noqa: E501
        :type: list[SmartGroupDevice_]
        """

        self._device_exclusions = device_exclusions

    @property
    def user_group_exclusions(self):
        """Gets the user_group_exclusions of this SmartGroup_.  # noqa: E501

        Gets or sets list of excluded user groups.  # noqa: E501

        :return: The user_group_exclusions of this SmartGroup_.  # noqa: E501
        :rtype: list[SmartGroupUserGroup]
        """
        return self._user_group_exclusions

    @user_group_exclusions.setter
    def user_group_exclusions(self, user_group_exclusions):
        """Sets the user_group_exclusions of this SmartGroup_.

        Gets or sets list of excluded user groups.  # noqa: E501

        :param user_group_exclusions: The user_group_exclusions of this SmartGroup_.  # noqa: E501
        :type: list[SmartGroupUserGroup]
        """

        self._user_group_exclusions = user_group_exclusions

    @property
    def management_types(self):
        """Gets the management_types of this SmartGroup_.  # noqa: E501

        Gets or sets management Type list (example : MdmEnrolled, ApplicationManaged).  # noqa: E501

        :return: The management_types of this SmartGroup_.  # noqa: E501
        :rtype: list[str]
        """
        return self._management_types

    @management_types.setter
    def management_types(self, management_types):
        """Sets the management_types of this SmartGroup_.

        Gets or sets management Type list (example : MdmEnrolled, ApplicationManaged).  # noqa: E501

        :param management_types: The management_types of this SmartGroup_.  # noqa: E501
        :type: list[str]
        """

        self._management_types = management_types

    @property
    def enrollment_categories(self):
        """Gets the enrollment_categories of this SmartGroup_.  # noqa: E501

        Gets or sets enrollment Category list (example :  DepEnrolled, Supervised, UserApprovedMdmEnrolled , SharedIpad, AndroidLegacy,  AndroidEnterprise, AadEnrolled).  # noqa: E501

        :return: The enrollment_categories of this SmartGroup_.  # noqa: E501
        :rtype: list[str]
        """
        return self._enrollment_categories

    @enrollment_categories.setter
    def enrollment_categories(self, enrollment_categories):
        """Sets the enrollment_categories of this SmartGroup_.

        Gets or sets enrollment Category list (example :  DepEnrolled, Supervised, UserApprovedMdmEnrolled , SharedIpad, AndroidLegacy,  AndroidEnterprise, AadEnrolled).  # noqa: E501

        :param enrollment_categories: The enrollment_categories of this SmartGroup_.  # noqa: E501
        :type: list[str]
        """

        self._enrollment_categories = enrollment_categories

    @property
    def oem_and_models(self):
        """Gets the oem_and_models of this SmartGroup_.  # noqa: E501

        Gets or sets device Manufacturer/OEM and Model.  # noqa: E501

        :return: The oem_and_models of this SmartGroup_.  # noqa: E501
        :rtype: list[OEMAndModel]
        """
        return self._oem_and_models

    @oem_and_models.setter
    def oem_and_models(self, oem_and_models):
        """Sets the oem_and_models of this SmartGroup_.

        Gets or sets device Manufacturer/OEM and Model.  # noqa: E501

        :param oem_and_models: The oem_and_models of this SmartGroup_.  # noqa: E501
        :type: list[OEMAndModel]
        """

        self._oem_and_models = oem_and_models

    @property
    def cpu_architectures(self):
        """Gets the cpu_architectures of this SmartGroup_.  # noqa: E501

        Gets or sets device cpu architectures.  # noqa: E501

        :return: The cpu_architectures of this SmartGroup_.  # noqa: E501
        :rtype: list[str]
        """
        return self._cpu_architectures

    @cpu_architectures.setter
    def cpu_architectures(self, cpu_architectures):
        """Sets the cpu_architectures of this SmartGroup_.

        Gets or sets device cpu architectures.  # noqa: E501

        :param cpu_architectures: The cpu_architectures of this SmartGroup_.  # noqa: E501
        :type: list[str]
        """

        self._cpu_architectures = cpu_architectures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartGroup_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartGroup_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmartGroup_):
            return True

        return self.to_dict() != other.to_dict()
