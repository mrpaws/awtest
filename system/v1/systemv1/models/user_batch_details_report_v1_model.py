# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class UserBatchDetailsReportV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_group_uuid': 'str',
        'sort_column': 'int',
        'sort_order': 'str',
        'report_format': 'str'
    }

    attribute_map = {
        'organization_group_uuid': 'organization_group_uuid',
        'sort_column': 'sort_column',
        'sort_order': 'sort_order',
        'report_format': 'report_format'
    }

    def __init__(self, organization_group_uuid=None, sort_column=None, sort_order=None, report_format=None, _configuration=None):  # noqa: E501
        """UserBatchDetailsReportV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._organization_group_uuid = None
        self._sort_column = None
        self._sort_order = None
        self._report_format = None
        self.discriminator = None

        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if sort_column is not None:
            self.sort_column = sort_column
        if sort_order is not None:
            self.sort_order = sort_order
        if report_format is not None:
            self.report_format = report_format

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this UserBatchDetailsReportV1Model.  # noqa: E501

        Organization Group UUID.  # noqa: E501

        :return: The organization_group_uuid of this UserBatchDetailsReportV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this UserBatchDetailsReportV1Model.

        Organization Group UUID.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this UserBatchDetailsReportV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def sort_column(self):
        """Gets the sort_column of this UserBatchDetailsReportV1Model.  # noqa: E501

        Column based on which we can provide the sorting.  # noqa: E501

        :return: The sort_column of this UserBatchDetailsReportV1Model.  # noqa: E501
        :rtype: int
        """
        return self._sort_column

    @sort_column.setter
    def sort_column(self, sort_column):
        """Sets the sort_column of this UserBatchDetailsReportV1Model.

        Column based on which we can provide the sorting.  # noqa: E501

        :param sort_column: The sort_column of this UserBatchDetailsReportV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                sort_column not in allowed_values):
            raise ValueError(
                "Invalid value for `sort_column` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_column, allowed_values)
            )

        self._sort_column = sort_column

    @property
    def sort_order(self):
        """Gets the sort_order of this UserBatchDetailsReportV1Model.  # noqa: E501

        The order based which on we can sort. Default value is ASC.  # noqa: E501

        :return: The sort_order of this UserBatchDetailsReportV1Model.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this UserBatchDetailsReportV1Model.

        The order based which on we can sort. Default value is ASC.  # noqa: E501

        :param sort_order: The sort_order of this UserBatchDetailsReportV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sort_order not in allowed_values):
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def report_format(self):
        """Gets the report_format of this UserBatchDetailsReportV1Model.  # noqa: E501

        The order based which on we can sort. Default value is ASC.  # noqa: E501

        :return: The report_format of this UserBatchDetailsReportV1Model.  # noqa: E501
        :rtype: str
        """
        return self._report_format

    @report_format.setter
    def report_format(self, report_format):
        """Sets the report_format of this UserBatchDetailsReportV1Model.

        The order based which on we can sort. Default value is ASC.  # noqa: E501

        :param report_format: The report_format of this UserBatchDetailsReportV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["XLSX", "CSV"]  # noqa: E501
        if (self._configuration.client_side_validation and
                report_format not in allowed_values):
            raise ValueError(
                "Invalid value for `report_format` ({0}), must be one of {1}"  # noqa: E501
                .format(report_format, allowed_values)
            )

        self._report_format = report_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserBatchDetailsReportV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserBatchDetailsReportV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserBatchDetailsReportV1Model):
            return True

        return self.to_dict() != other.to_dict()
