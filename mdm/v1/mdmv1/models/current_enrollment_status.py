# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class CurrentEnrollmentStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enrollment_status': 'int',
        'device_managed_by': 'int',
        'username': 'str',
        'domain': 'str',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'enrollment_status': 'EnrollmentStatus',
        'device_managed_by': 'DeviceManagedBy',
        'username': 'Username',
        'domain': 'Domain',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, enrollment_status=None, device_managed_by=None, username=None, domain=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """CurrentEnrollmentStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enrollment_status = None
        self._device_managed_by = None
        self._username = None
        self._domain = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if enrollment_status is not None:
            self.enrollment_status = enrollment_status
        if device_managed_by is not None:
            self.device_managed_by = device_managed_by
        if username is not None:
            self.username = username
        if domain is not None:
            self.domain = domain
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def enrollment_status(self):
        """Gets the enrollment_status of this CurrentEnrollmentStatus.  # noqa: E501

        Gets or sets gives Enrollment status of the device.  # noqa: E501

        :return: The enrollment_status of this CurrentEnrollmentStatus.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_status

    @enrollment_status.setter
    def enrollment_status(self, enrollment_status):
        """Sets the enrollment_status of this CurrentEnrollmentStatus.

        Gets or sets gives Enrollment status of the device.  # noqa: E501

        :param enrollment_status: The enrollment_status of this CurrentEnrollmentStatus.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  # noqa: E501
        if (self._configuration.client_side_validation and
                enrollment_status not in allowed_values):
            raise ValueError(
                "Invalid value for `enrollment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(enrollment_status, allowed_values)
            )

        self._enrollment_status = enrollment_status

    @property
    def device_managed_by(self):
        """Gets the device_managed_by of this CurrentEnrollmentStatus.  # noqa: E501

        Gets or sets device Managed by (Mdm-1, container-2).  # noqa: E501

        :return: The device_managed_by of this CurrentEnrollmentStatus.  # noqa: E501
        :rtype: int
        """
        return self._device_managed_by

    @device_managed_by.setter
    def device_managed_by(self, device_managed_by):
        """Sets the device_managed_by of this CurrentEnrollmentStatus.

        Gets or sets device Managed by (Mdm-1, container-2).  # noqa: E501

        :param device_managed_by: The device_managed_by of this CurrentEnrollmentStatus.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 998, 999]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_managed_by not in allowed_values):
            raise ValueError(
                "Invalid value for `device_managed_by` ({0}), must be one of {1}"  # noqa: E501
                .format(device_managed_by, allowed_values)
            )

        self._device_managed_by = device_managed_by

    @property
    def username(self):
        """Gets the username of this CurrentEnrollmentStatus.  # noqa: E501

        Gets or sets enrollment user's username.  # noqa: E501

        :return: The username of this CurrentEnrollmentStatus.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CurrentEnrollmentStatus.

        Gets or sets enrollment user's username.  # noqa: E501

        :param username: The username of this CurrentEnrollmentStatus.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def domain(self):
        """Gets the domain of this CurrentEnrollmentStatus.  # noqa: E501

        Gets or sets enrollment user's domain.  # noqa: E501

        :return: The domain of this CurrentEnrollmentStatus.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CurrentEnrollmentStatus.

        Gets or sets enrollment user's domain.  # noqa: E501

        :param domain: The domain of this CurrentEnrollmentStatus.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this CurrentEnrollmentStatus.  # noqa: E501


        :return: The id of this CurrentEnrollmentStatus.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurrentEnrollmentStatus.


        :param id: The id of this CurrentEnrollmentStatus.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this CurrentEnrollmentStatus.  # noqa: E501


        :return: The uuid of this CurrentEnrollmentStatus.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this CurrentEnrollmentStatus.


        :param uuid: The uuid of this CurrentEnrollmentStatus.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentEnrollmentStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentEnrollmentStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CurrentEnrollmentStatus):
            return True

        return self.to_dict() != other.to_dict()
