# coding: utf-8

"""
    MDM API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv3.configuration import Configuration


class DeviceRecoveryLockPasswordPolicyV3Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'length': 'int',
        'include_numbers': 'bool',
        'include_letters': 'bool',
        'include_special_characters': 'bool'
    }

    attribute_map = {
        'length': 'length',
        'include_numbers': 'include_numbers',
        'include_letters': 'include_letters',
        'include_special_characters': 'include_special_characters'
    }

    def __init__(self, length=None, include_numbers=None, include_letters=None, include_special_characters=None, _configuration=None):  # noqa: E501
        """DeviceRecoveryLockPasswordPolicyV3Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._length = None
        self._include_numbers = None
        self._include_letters = None
        self._include_special_characters = None
        self.discriminator = None

        if length is not None:
            self.length = length
        if include_numbers is not None:
            self.include_numbers = include_numbers
        if include_letters is not None:
            self.include_letters = include_letters
        if include_special_characters is not None:
            self.include_special_characters = include_special_characters

    @property
    def length(self):
        """Gets the length of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501

        The length of the password that will be generated. The minimum and the maximum length of the password are 8 and 64 respectively.  # noqa: E501

        :return: The length of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this DeviceRecoveryLockPasswordPolicyV3Model.

        The length of the password that will be generated. The minimum and the maximum length of the password are 8 and 64 respectively.  # noqa: E501

        :param length: The length of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                length is not None and length > 64):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                length is not None and length < 8):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `8`")  # noqa: E501

        self._length = length

    @property
    def include_numbers(self):
        """Gets the include_numbers of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501

        If true, the generated password can contain numbers.  # noqa: E501

        :return: The include_numbers of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._include_numbers

    @include_numbers.setter
    def include_numbers(self, include_numbers):
        """Sets the include_numbers of this DeviceRecoveryLockPasswordPolicyV3Model.

        If true, the generated password can contain numbers.  # noqa: E501

        :param include_numbers: The include_numbers of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501
        :type: bool
        """

        self._include_numbers = include_numbers

    @property
    def include_letters(self):
        """Gets the include_letters of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501

        If true, the generated password can contain letters.  # noqa: E501

        :return: The include_letters of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._include_letters

    @include_letters.setter
    def include_letters(self, include_letters):
        """Sets the include_letters of this DeviceRecoveryLockPasswordPolicyV3Model.

        If true, the generated password can contain letters.  # noqa: E501

        :param include_letters: The include_letters of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501
        :type: bool
        """

        self._include_letters = include_letters

    @property
    def include_special_characters(self):
        """Gets the include_special_characters of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501

        If true, the generated password can contain special characters.  # noqa: E501

        :return: The include_special_characters of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501
        :rtype: bool
        """
        return self._include_special_characters

    @include_special_characters.setter
    def include_special_characters(self, include_special_characters):
        """Sets the include_special_characters of this DeviceRecoveryLockPasswordPolicyV3Model.

        If true, the generated password can contain special characters.  # noqa: E501

        :param include_special_characters: The include_special_characters of this DeviceRecoveryLockPasswordPolicyV3Model.  # noqa: E501
        :type: bool
        """

        self._include_special_characters = include_special_characters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceRecoveryLockPasswordPolicyV3Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceRecoveryLockPasswordPolicyV3Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceRecoveryLockPasswordPolicyV3Model):
            return True

        return self.to_dict() != other.to_dict()
