# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv1.api_client import ApiClient


class AppGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def app_groups_add_applications_to_application_group(self, appgroupid, **kwargs):  # noqa: E501
        """Adds applications to the specified Application Group.  # noqa: E501

        Performs the mandatory params check and adds the List of applications supplied to the specified Application Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_add_applications_to_application_group(appgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appgroupid: Application Group Identifier. (Minimum value = 1) Example = 2. (required)
        :param BulkAppInput bulk_input: List of Applications to be added to the specified application group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_groups_add_applications_to_application_group_with_http_info(appgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.app_groups_add_applications_to_application_group_with_http_info(appgroupid, **kwargs)  # noqa: E501
            return data

    def app_groups_add_applications_to_application_group_with_http_info(self, appgroupid, **kwargs):  # noqa: E501
        """Adds applications to the specified Application Group.  # noqa: E501

        Performs the mandatory params check and adds the List of applications supplied to the specified Application Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_add_applications_to_application_group_with_http_info(appgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appgroupid: Application Group Identifier. (Minimum value = 1) Example = 2. (required)
        :param BulkAppInput bulk_input: List of Applications to be added to the specified application group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appgroupid', 'bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_groups_add_applications_to_application_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appgroupid' is set
        if self.api_client.client_side_validation and ('appgroupid' not in params or
                                                       params['appgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `appgroupid` when calling `app_groups_add_applications_to_application_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appgroupid' in params:
            path_params['appgroupid'] = params['appgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/appgroups/{appgroupid}/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_groups_application_group_search(self, **kwargs):  # noqa: E501
        """Searches for the Application Groups based on the query information provided.  # noqa: E501

        Takes in query parameters to perform a search on the available Application Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_application_group_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appgroupname: App Group name. Example = \"Apple MDM Applications\".
        :param str organizationgroupid: OrganizationGroup Id. Example = \"7\".
        :param str platform: The Application Platform. Example = \"Android\".
        :param str appgrouptype: Application group type [Whitelist, Blacklist, Required, MDMApplication].
        :param str orderby: Orderby column name. Example = \"ApplicationCount\".
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :param str page: Page number.Example = \"2\".
        :param str pagesize: Records per page.Example = \"10\".
        :return: ApplicationGroupSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_groups_application_group_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.app_groups_application_group_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def app_groups_application_group_search_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for the Application Groups based on the query information provided.  # noqa: E501

        Takes in query parameters to perform a search on the available Application Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_application_group_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appgroupname: App Group name. Example = \"Apple MDM Applications\".
        :param str organizationgroupid: OrganizationGroup Id. Example = \"7\".
        :param str platform: The Application Platform. Example = \"Android\".
        :param str appgrouptype: Application group type [Whitelist, Blacklist, Required, MDMApplication].
        :param str orderby: Orderby column name. Example = \"ApplicationCount\".
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :param str page: Page number.Example = \"2\".
        :param str pagesize: Records per page.Example = \"10\".
        :return: ApplicationGroupSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appgroupname', 'organizationgroupid', 'platform', 'appgrouptype', 'orderby', 'sortorder', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_groups_application_group_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'appgroupname' in params:
            query_params.append(('appgroupname', params['appgroupname']))  # noqa: E501
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'appgrouptype' in params:
            query_params.append(('appgrouptype', params['appgrouptype']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/appgroups/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationGroupSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_groups_bulk_delete_application_group(self, **kwargs):  # noqa: E501
        """Deletes Application Groups identified by Application Group Identifiers.  # noqa: E501

        Takes in atleast one App Group Id to perform deletion of the corresponding record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_bulk_delete_application_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of Application Group IDs.
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_groups_bulk_delete_application_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.app_groups_bulk_delete_application_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def app_groups_bulk_delete_application_group_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes Application Groups identified by Application Group Identifiers.  # noqa: E501

        Takes in atleast one App Group Id to perform deletion of the corresponding record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_bulk_delete_application_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: List of Application Group IDs.
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_groups_bulk_delete_application_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/appgroups', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_groups_create_application_group(self, **kwargs):  # noqa: E501
        """Creates an Application Group.  # noqa: E501

        Checks for the mandatory params in the input request body and creates an Application Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_create_application_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationGroup application_group: The Application Group details.
        :return: ApplicationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_groups_create_application_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.app_groups_create_application_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def app_groups_create_application_group_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an Application Group.  # noqa: E501

        Checks for the mandatory params in the input request body and creates an Application Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_create_application_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationGroup application_group: The Application Group details.
        :return: ApplicationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_groups_create_application_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application_group' in params:
            body_params = params['application_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/appgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_groups_delete_applications_from_application_group(self, appgroupid, **kwargs):  # noqa: E501
        """Deletes applications from the specified Application Group.  # noqa: E501

        Takes in a list of application groups, checks for the Application Group Type and performs deletion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_delete_applications_from_application_group(appgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appgroupid: Application Group Identifier. (Minimum value = 1) Example = 2. (required)
        :param BulkAppInput bulk_input: List of Applications to be deleted from the specified application group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_groups_delete_applications_from_application_group_with_http_info(appgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.app_groups_delete_applications_from_application_group_with_http_info(appgroupid, **kwargs)  # noqa: E501
            return data

    def app_groups_delete_applications_from_application_group_with_http_info(self, appgroupid, **kwargs):  # noqa: E501
        """Deletes applications from the specified Application Group.  # noqa: E501

        Takes in a list of application groups, checks for the Application Group Type and performs deletion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_delete_applications_from_application_group_with_http_info(appgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appgroupid: Application Group Identifier. (Minimum value = 1) Example = 2. (required)
        :param BulkAppInput bulk_input: List of Applications to be deleted from the specified application group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appgroupid', 'bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_groups_delete_applications_from_application_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appgroupid' is set
        if self.api_client.client_side_validation and ('appgroupid' not in params or
                                                       params['appgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `appgroupid` when calling `app_groups_delete_applications_from_application_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appgroupid' in params:
            path_params['appgroupid'] = params['appgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/appgroups/{appgroupid}/applications', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_groups_get_app_group_details(self, appgroupid, **kwargs):  # noqa: E501
        """Retrieves the Application group details based on the Application Group id.  # noqa: E501

        Checks if application group with passed in id exists and if its accessible and returns the application group record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_get_app_group_details(appgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appgroupid: Application Group Identifier. (Minimum value = 1) Example=2. (required)
        :return: ApplicationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_groups_get_app_group_details_with_http_info(appgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.app_groups_get_app_group_details_with_http_info(appgroupid, **kwargs)  # noqa: E501
            return data

    def app_groups_get_app_group_details_with_http_info(self, appgroupid, **kwargs):  # noqa: E501
        """Retrieves the Application group details based on the Application Group id.  # noqa: E501

        Checks if application group with passed in id exists and if its accessible and returns the application group record.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_get_app_group_details_with_http_info(appgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appgroupid: Application Group Identifier. (Minimum value = 1) Example=2. (required)
        :return: ApplicationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_groups_get_app_group_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appgroupid' is set
        if self.api_client.client_side_validation and ('appgroupid' not in params or
                                                       params['appgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `appgroupid` when calling `app_groups_get_app_group_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appgroupid' in params:
            path_params['appgroupid'] = params['appgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/appgroups/{appgroupid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def app_groups_update_application_group(self, appgroupid, **kwargs):  # noqa: E501
        """Updates the specified Application Group.  # noqa: E501

        Performs a check for the mandatory params present in the request body and updates the specified Application Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_update_application_group(appgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appgroupid: The Application Group Id. (Minimum value = 1) Example=2. (required)
        :param ApplicationGroup application_group: Updated Application Group details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.app_groups_update_application_group_with_http_info(appgroupid, **kwargs)  # noqa: E501
        else:
            (data) = self.app_groups_update_application_group_with_http_info(appgroupid, **kwargs)  # noqa: E501
            return data

    def app_groups_update_application_group_with_http_info(self, appgroupid, **kwargs):  # noqa: E501
        """Updates the specified Application Group.  # noqa: E501

        Performs a check for the mandatory params present in the request body and updates the specified Application Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.app_groups_update_application_group_with_http_info(appgroupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appgroupid: The Application Group Id. (Minimum value = 1) Example=2. (required)
        :param ApplicationGroup application_group: Updated Application Group details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appgroupid', 'application_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method app_groups_update_application_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appgroupid' is set
        if self.api_client.client_side_validation and ('appgroupid' not in params or
                                                       params['appgroupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `appgroupid` when calling `app_groups_update_application_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'appgroupid' in params:
            path_params['appgroupid'] = params['appgroupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application_group' in params:
            body_params = params['application_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/appgroups/{appgroupid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
