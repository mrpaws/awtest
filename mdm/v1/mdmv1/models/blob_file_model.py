# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class BlobFileModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blob_uuid': 'str',
        'transaction_id': 'str',
        'file_name': 'str',
        'download_path': 'str',
        'file_version': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'blob_uuid': 'BlobUuid',
        'transaction_id': 'TransactionId',
        'file_name': 'FileName',
        'download_path': 'DownloadPath',
        'file_version': 'FileVersion',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, blob_uuid=None, transaction_id=None, file_name=None, download_path=None, file_version=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """BlobFileModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._blob_uuid = None
        self._transaction_id = None
        self._file_name = None
        self._download_path = None
        self._file_version = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if blob_uuid is not None:
            self.blob_uuid = blob_uuid
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if file_name is not None:
            self.file_name = file_name
        if download_path is not None:
            self.download_path = download_path
        if file_version is not None:
            self.file_version = file_version
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def blob_uuid(self):
        """Gets the blob_uuid of this BlobFileModel.  # noqa: E501

        Gets or sets unique identifier for the blob.  # noqa: E501

        :return: The blob_uuid of this BlobFileModel.  # noqa: E501
        :rtype: str
        """
        return self._blob_uuid

    @blob_uuid.setter
    def blob_uuid(self, blob_uuid):
        """Sets the blob_uuid of this BlobFileModel.

        Gets or sets unique identifier for the blob.  # noqa: E501

        :param blob_uuid: The blob_uuid of this BlobFileModel.  # noqa: E501
        :type: str
        """

        self._blob_uuid = blob_uuid

    @property
    def transaction_id(self):
        """Gets the transaction_id of this BlobFileModel.  # noqa: E501

        Gets or sets transactionId of the uploaded chunk.  # noqa: E501

        :return: The transaction_id of this BlobFileModel.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this BlobFileModel.

        Gets or sets transactionId of the uploaded chunk.  # noqa: E501

        :param transaction_id: The transaction_id of this BlobFileModel.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def file_name(self):
        """Gets the file_name of this BlobFileModel.  # noqa: E501

        Gets or sets name of the Application file along with its extension.  # noqa: E501

        :return: The file_name of this BlobFileModel.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this BlobFileModel.

        Gets or sets name of the Application file along with its extension.  # noqa: E501

        :param file_name: The file_name of this BlobFileModel.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def download_path(self):
        """Gets the download_path of this BlobFileModel.  # noqa: E501

        Gets or sets destination path on the device where the file will be downloaded.  # noqa: E501

        :return: The download_path of this BlobFileModel.  # noqa: E501
        :rtype: str
        """
        return self._download_path

    @download_path.setter
    def download_path(self, download_path):
        """Sets the download_path of this BlobFileModel.

        Gets or sets destination path on the device where the file will be downloaded.  # noqa: E501

        :param download_path: The download_path of this BlobFileModel.  # noqa: E501
        :type: str
        """

        self._download_path = download_path

    @property
    def file_version(self):
        """Gets the file_version of this BlobFileModel.  # noqa: E501

        Gets or sets version of the Blob file.  # noqa: E501

        :return: The file_version of this BlobFileModel.  # noqa: E501
        :rtype: str
        """
        return self._file_version

    @file_version.setter
    def file_version(self, file_version):
        """Sets the file_version of this BlobFileModel.

        Gets or sets version of the Blob file.  # noqa: E501

        :param file_version: The file_version of this BlobFileModel.  # noqa: E501
        :type: str
        """

        self._file_version = file_version

    @property
    def id(self):
        """Gets the id of this BlobFileModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this BlobFileModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BlobFileModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this BlobFileModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this BlobFileModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this BlobFileModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this BlobFileModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this BlobFileModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlobFileModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlobFileModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BlobFileModel):
            return True

        return self.to_dict() != other.to_dict()
