# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class WorkflowStepStatusV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step_name': 'str',
        'status': 'int',
        'reason': 'str',
        'status_updated_on': 'datetime',
        'status_info': 'StatusInfo'
    }

    attribute_map = {
        'step_name': 'step_name',
        'status': 'status',
        'reason': 'reason',
        'status_updated_on': 'status_updated_on',
        'status_info': 'status_info'
    }

    def __init__(self, step_name=None, status=None, reason=None, status_updated_on=None, status_info=None, _configuration=None):  # noqa: E501
        """WorkflowStepStatusV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._step_name = None
        self._status = None
        self._reason = None
        self._status_updated_on = None
        self._status_info = None
        self.discriminator = None

        if step_name is not None:
            self.step_name = step_name
        if status is not None:
            self.status = status
        if reason is not None:
            self.reason = reason
        if status_updated_on is not None:
            self.status_updated_on = status_updated_on
        if status_info is not None:
            self.status_info = status_info

    @property
    def step_name(self):
        """Gets the step_name of this WorkflowStepStatusV1Model.  # noqa: E501


        :return: The step_name of this WorkflowStepStatusV1Model.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this WorkflowStepStatusV1Model.


        :param step_name: The step_name of this WorkflowStepStatusV1Model.  # noqa: E501
        :type: str
        """

        self._step_name = step_name

    @property
    def status(self):
        """Gets the status of this WorkflowStepStatusV1Model.  # noqa: E501


        :return: The status of this WorkflowStepStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowStepStatusV1Model.


        :param status: The status of this WorkflowStepStatusV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this WorkflowStepStatusV1Model.  # noqa: E501


        :return: The reason of this WorkflowStepStatusV1Model.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this WorkflowStepStatusV1Model.


        :param reason: The reason of this WorkflowStepStatusV1Model.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def status_updated_on(self):
        """Gets the status_updated_on of this WorkflowStepStatusV1Model.  # noqa: E501


        :return: The status_updated_on of this WorkflowStepStatusV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._status_updated_on

    @status_updated_on.setter
    def status_updated_on(self, status_updated_on):
        """Sets the status_updated_on of this WorkflowStepStatusV1Model.


        :param status_updated_on: The status_updated_on of this WorkflowStepStatusV1Model.  # noqa: E501
        :type: datetime
        """

        self._status_updated_on = status_updated_on

    @property
    def status_info(self):
        """Gets the status_info of this WorkflowStepStatusV1Model.  # noqa: E501


        :return: The status_info of this WorkflowStepStatusV1Model.  # noqa: E501
        :rtype: StatusInfo
        """
        return self._status_info

    @status_info.setter
    def status_info(self, status_info):
        """Sets the status_info of this WorkflowStepStatusV1Model.


        :param status_info: The status_info of this WorkflowStepStatusV1Model.  # noqa: E501
        :type: StatusInfo
        """

        self._status_info = status_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowStepStatusV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowStepStatusV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowStepStatusV1Model):
            return True

        return self.to_dict() != other.to_dict()
