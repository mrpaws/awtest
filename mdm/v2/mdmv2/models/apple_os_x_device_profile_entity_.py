# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXDeviceProfileEntity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'general': 'GeneralPayloadV2Entity',
        'passcode': 'AppleOsXPasscodePayloadEntity_',
        'email_list': 'list[AppleOsXEmailPayloadEntity]',
        'restrictions': 'AppleOsXRestrictionsPayloadEntity_',
        'vpn_list': 'list[AppleOsXVpnPayloadEntity]',
        'credentials_list': 'list[AppleOsXCredentialPayloadEntity]',
        'scep_list': 'list[AppleOsXScepPayloadEntity]',
        'network_list': 'list[AppleOsXNetworkPayloadEntity]',
        'eas_native_mailclient': 'AppleOsXEasNativeMailClientPayloadEntity_',
        'eas_microsoft_outlook': 'AppleOsXEasMicrosoftOutlookPayloadEntity_',
        'custom_settings_list': 'list[AppleOsXCustomSettingsPayloadEntity]',
        'disk_encryption': 'AppleOsXDiskEncryptionPayloadEntity_',
        'kernel_extension': 'MacOsKernelExtensionPayloadV2Entity_',
        'gate_keeper': 'MacOsGatekeeperPayloadV2Entity_',
        'privacy_preferences': 'MacOsPrivacyPreferencesPayloadV2Model',
        'web_clips_list': 'list[MacOsWebClipsPayloadV2Entity]',
        'smart_card': 'MacOsSmartCardPayloadV2Model_',
        'associated_domains': 'MacOsAssociatedDomainsPayloadV2Model_',
        'sso_extension_list': 'list[MacOsSsoExtensionPayloadV2Entity]',
        'system_extensions': 'MacOsSystemExtensionsPayloadV2Model_',
        'skip_setup_assistant': 'MacOsSetupAssistantPayloadEntity_'
    }

    attribute_map = {
        'general': 'General',
        'passcode': 'Passcode',
        'email_list': 'EmailList',
        'restrictions': 'Restrictions',
        'vpn_list': 'VpnList',
        'credentials_list': 'CredentialsList',
        'scep_list': 'ScepList',
        'network_list': 'NetworkList',
        'eas_native_mailclient': 'EasNativeMailclient',
        'eas_microsoft_outlook': 'EasMicrosoftOutlook',
        'custom_settings_list': 'CustomSettingsList',
        'disk_encryption': 'DiskEncryption',
        'kernel_extension': 'KernelExtension',
        'gate_keeper': 'GateKeeper',
        'privacy_preferences': 'PrivacyPreferences',
        'web_clips_list': 'WebClipsList',
        'smart_card': 'SmartCard',
        'associated_domains': 'AssociatedDomains',
        'sso_extension_list': 'SsoExtensionList',
        'system_extensions': 'SystemExtensions',
        'skip_setup_assistant': 'SkipSetupAssistant'
    }

    def __init__(self, general=None, passcode=None, email_list=None, restrictions=None, vpn_list=None, credentials_list=None, scep_list=None, network_list=None, eas_native_mailclient=None, eas_microsoft_outlook=None, custom_settings_list=None, disk_encryption=None, kernel_extension=None, gate_keeper=None, privacy_preferences=None, web_clips_list=None, smart_card=None, associated_domains=None, sso_extension_list=None, system_extensions=None, skip_setup_assistant=None, _configuration=None):  # noqa: E501
        """AppleOsXDeviceProfileEntity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._general = None
        self._passcode = None
        self._email_list = None
        self._restrictions = None
        self._vpn_list = None
        self._credentials_list = None
        self._scep_list = None
        self._network_list = None
        self._eas_native_mailclient = None
        self._eas_microsoft_outlook = None
        self._custom_settings_list = None
        self._disk_encryption = None
        self._kernel_extension = None
        self._gate_keeper = None
        self._privacy_preferences = None
        self._web_clips_list = None
        self._smart_card = None
        self._associated_domains = None
        self._sso_extension_list = None
        self._system_extensions = None
        self._skip_setup_assistant = None
        self.discriminator = None

        if general is not None:
            self.general = general
        if passcode is not None:
            self.passcode = passcode
        if email_list is not None:
            self.email_list = email_list
        if restrictions is not None:
            self.restrictions = restrictions
        if vpn_list is not None:
            self.vpn_list = vpn_list
        if credentials_list is not None:
            self.credentials_list = credentials_list
        if scep_list is not None:
            self.scep_list = scep_list
        if network_list is not None:
            self.network_list = network_list
        if eas_native_mailclient is not None:
            self.eas_native_mailclient = eas_native_mailclient
        if eas_microsoft_outlook is not None:
            self.eas_microsoft_outlook = eas_microsoft_outlook
        if custom_settings_list is not None:
            self.custom_settings_list = custom_settings_list
        if disk_encryption is not None:
            self.disk_encryption = disk_encryption
        if kernel_extension is not None:
            self.kernel_extension = kernel_extension
        if gate_keeper is not None:
            self.gate_keeper = gate_keeper
        if privacy_preferences is not None:
            self.privacy_preferences = privacy_preferences
        if web_clips_list is not None:
            self.web_clips_list = web_clips_list
        if smart_card is not None:
            self.smart_card = smart_card
        if associated_domains is not None:
            self.associated_domains = associated_domains
        if sso_extension_list is not None:
            self.sso_extension_list = sso_extension_list
        if system_extensions is not None:
            self.system_extensions = system_extensions
        if skip_setup_assistant is not None:
            self.skip_setup_assistant = skip_setup_assistant

    @property
    def general(self):
        """Gets the general of this AppleOsXDeviceProfileEntity_.  # noqa: E501


        :return: The general of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: GeneralPayloadV2Entity
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this AppleOsXDeviceProfileEntity_.


        :param general: The general of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: GeneralPayloadV2Entity
        """

        self._general = general

    @property
    def passcode(self):
        """Gets the passcode of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets passcode payload.  # noqa: E501

        :return: The passcode of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: AppleOsXPasscodePayloadEntity_
        """
        return self._passcode

    @passcode.setter
    def passcode(self, passcode):
        """Sets the passcode of this AppleOsXDeviceProfileEntity_.

        Gets or sets passcode payload.  # noqa: E501

        :param passcode: The passcode of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: AppleOsXPasscodePayloadEntity_
        """

        self._passcode = passcode

    @property
    def email_list(self):
        """Gets the email_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets list of Email payload.  # noqa: E501

        :return: The email_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: list[AppleOsXEmailPayloadEntity]
        """
        return self._email_list

    @email_list.setter
    def email_list(self, email_list):
        """Sets the email_list of this AppleOsXDeviceProfileEntity_.

        Gets or sets list of Email payload.  # noqa: E501

        :param email_list: The email_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: list[AppleOsXEmailPayloadEntity]
        """

        self._email_list = email_list

    @property
    def restrictions(self):
        """Gets the restrictions of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets Restrictions payload.  # noqa: E501

        :return: The restrictions of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: AppleOsXRestrictionsPayloadEntity_
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this AppleOsXDeviceProfileEntity_.

        Gets or sets Restrictions payload.  # noqa: E501

        :param restrictions: The restrictions of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: AppleOsXRestrictionsPayloadEntity_
        """

        self._restrictions = restrictions

    @property
    def vpn_list(self):
        """Gets the vpn_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets list of VPN payload.  # noqa: E501

        :return: The vpn_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: list[AppleOsXVpnPayloadEntity]
        """
        return self._vpn_list

    @vpn_list.setter
    def vpn_list(self, vpn_list):
        """Sets the vpn_list of this AppleOsXDeviceProfileEntity_.

        Gets or sets list of VPN payload.  # noqa: E501

        :param vpn_list: The vpn_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: list[AppleOsXVpnPayloadEntity]
        """

        self._vpn_list = vpn_list

    @property
    def credentials_list(self):
        """Gets the credentials_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets List of Credential payload.  # noqa: E501

        :return: The credentials_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: list[AppleOsXCredentialPayloadEntity]
        """
        return self._credentials_list

    @credentials_list.setter
    def credentials_list(self, credentials_list):
        """Sets the credentials_list of this AppleOsXDeviceProfileEntity_.

        Gets or sets List of Credential payload.  # noqa: E501

        :param credentials_list: The credentials_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: list[AppleOsXCredentialPayloadEntity]
        """

        self._credentials_list = credentials_list

    @property
    def scep_list(self):
        """Gets the scep_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets List of SCEP payload.  # noqa: E501

        :return: The scep_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: list[AppleOsXScepPayloadEntity]
        """
        return self._scep_list

    @scep_list.setter
    def scep_list(self, scep_list):
        """Sets the scep_list of this AppleOsXDeviceProfileEntity_.

        Gets or sets List of SCEP payload.  # noqa: E501

        :param scep_list: The scep_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: list[AppleOsXScepPayloadEntity]
        """

        self._scep_list = scep_list

    @property
    def network_list(self):
        """Gets the network_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets List of Network payload.  # noqa: E501

        :return: The network_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: list[AppleOsXNetworkPayloadEntity]
        """
        return self._network_list

    @network_list.setter
    def network_list(self, network_list):
        """Sets the network_list of this AppleOsXDeviceProfileEntity_.

        Gets or sets List of Network payload.  # noqa: E501

        :param network_list: The network_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: list[AppleOsXNetworkPayloadEntity]
        """

        self._network_list = network_list

    @property
    def eas_native_mailclient(self):
        """Gets the eas_native_mailclient of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets EAS Native Mail payload.  # noqa: E501

        :return: The eas_native_mailclient of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: AppleOsXEasNativeMailClientPayloadEntity_
        """
        return self._eas_native_mailclient

    @eas_native_mailclient.setter
    def eas_native_mailclient(self, eas_native_mailclient):
        """Sets the eas_native_mailclient of this AppleOsXDeviceProfileEntity_.

        Gets or sets EAS Native Mail payload.  # noqa: E501

        :param eas_native_mailclient: The eas_native_mailclient of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: AppleOsXEasNativeMailClientPayloadEntity_
        """

        self._eas_native_mailclient = eas_native_mailclient

    @property
    def eas_microsoft_outlook(self):
        """Gets the eas_microsoft_outlook of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets EAS Microsoft Outlook payload.  # noqa: E501

        :return: The eas_microsoft_outlook of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: AppleOsXEasMicrosoftOutlookPayloadEntity_
        """
        return self._eas_microsoft_outlook

    @eas_microsoft_outlook.setter
    def eas_microsoft_outlook(self, eas_microsoft_outlook):
        """Sets the eas_microsoft_outlook of this AppleOsXDeviceProfileEntity_.

        Gets or sets EAS Microsoft Outlook payload.  # noqa: E501

        :param eas_microsoft_outlook: The eas_microsoft_outlook of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: AppleOsXEasMicrosoftOutlookPayloadEntity_
        """

        self._eas_microsoft_outlook = eas_microsoft_outlook

    @property
    def custom_settings_list(self):
        """Gets the custom_settings_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets List of Custom Settings payload.  # noqa: E501

        :return: The custom_settings_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: list[AppleOsXCustomSettingsPayloadEntity]
        """
        return self._custom_settings_list

    @custom_settings_list.setter
    def custom_settings_list(self, custom_settings_list):
        """Sets the custom_settings_list of this AppleOsXDeviceProfileEntity_.

        Gets or sets List of Custom Settings payload.  # noqa: E501

        :param custom_settings_list: The custom_settings_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: list[AppleOsXCustomSettingsPayloadEntity]
        """

        self._custom_settings_list = custom_settings_list

    @property
    def disk_encryption(self):
        """Gets the disk_encryption of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets Disk Encryption payload.  # noqa: E501

        :return: The disk_encryption of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: AppleOsXDiskEncryptionPayloadEntity_
        """
        return self._disk_encryption

    @disk_encryption.setter
    def disk_encryption(self, disk_encryption):
        """Sets the disk_encryption of this AppleOsXDeviceProfileEntity_.

        Gets or sets Disk Encryption payload.  # noqa: E501

        :param disk_encryption: The disk_encryption of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: AppleOsXDiskEncryptionPayloadEntity_
        """

        self._disk_encryption = disk_encryption

    @property
    def kernel_extension(self):
        """Gets the kernel_extension of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets Kernel extension payload.  # noqa: E501

        :return: The kernel_extension of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: MacOsKernelExtensionPayloadV2Entity_
        """
        return self._kernel_extension

    @kernel_extension.setter
    def kernel_extension(self, kernel_extension):
        """Sets the kernel_extension of this AppleOsXDeviceProfileEntity_.

        Gets or sets Kernel extension payload.  # noqa: E501

        :param kernel_extension: The kernel_extension of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: MacOsKernelExtensionPayloadV2Entity_
        """

        self._kernel_extension = kernel_extension

    @property
    def gate_keeper(self):
        """Gets the gate_keeper of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets Gate keeper payload.  # noqa: E501

        :return: The gate_keeper of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: MacOsGatekeeperPayloadV2Entity_
        """
        return self._gate_keeper

    @gate_keeper.setter
    def gate_keeper(self, gate_keeper):
        """Sets the gate_keeper of this AppleOsXDeviceProfileEntity_.

        Gets or sets Gate keeper payload.  # noqa: E501

        :param gate_keeper: The gate_keeper of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: MacOsGatekeeperPayloadV2Entity_
        """

        self._gate_keeper = gate_keeper

    @property
    def privacy_preferences(self):
        """Gets the privacy_preferences of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets Privacy Preferences payload.  # noqa: E501

        :return: The privacy_preferences of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: MacOsPrivacyPreferencesPayloadV2Model
        """
        return self._privacy_preferences

    @privacy_preferences.setter
    def privacy_preferences(self, privacy_preferences):
        """Sets the privacy_preferences of this AppleOsXDeviceProfileEntity_.

        Gets or sets Privacy Preferences payload.  # noqa: E501

        :param privacy_preferences: The privacy_preferences of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: MacOsPrivacyPreferencesPayloadV2Model
        """

        self._privacy_preferences = privacy_preferences

    @property
    def web_clips_list(self):
        """Gets the web_clips_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets Web clips payload list.  # noqa: E501

        :return: The web_clips_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: list[MacOsWebClipsPayloadV2Entity]
        """
        return self._web_clips_list

    @web_clips_list.setter
    def web_clips_list(self, web_clips_list):
        """Sets the web_clips_list of this AppleOsXDeviceProfileEntity_.

        Gets or sets Web clips payload list.  # noqa: E501

        :param web_clips_list: The web_clips_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: list[MacOsWebClipsPayloadV2Entity]
        """

        self._web_clips_list = web_clips_list

    @property
    def smart_card(self):
        """Gets the smart_card of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets SmartCard payload.  # noqa: E501

        :return: The smart_card of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: MacOsSmartCardPayloadV2Model_
        """
        return self._smart_card

    @smart_card.setter
    def smart_card(self, smart_card):
        """Sets the smart_card of this AppleOsXDeviceProfileEntity_.

        Gets or sets SmartCard payload.  # noqa: E501

        :param smart_card: The smart_card of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: MacOsSmartCardPayloadV2Model_
        """

        self._smart_card = smart_card

    @property
    def associated_domains(self):
        """Gets the associated_domains of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets AssociatedDomains payload.  # noqa: E501

        :return: The associated_domains of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: MacOsAssociatedDomainsPayloadV2Model_
        """
        return self._associated_domains

    @associated_domains.setter
    def associated_domains(self, associated_domains):
        """Sets the associated_domains of this AppleOsXDeviceProfileEntity_.

        Gets or sets AssociatedDomains payload.  # noqa: E501

        :param associated_domains: The associated_domains of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: MacOsAssociatedDomainsPayloadV2Model_
        """

        self._associated_domains = associated_domains

    @property
    def sso_extension_list(self):
        """Gets the sso_extension_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets SSO Extension payload.  # noqa: E501

        :return: The sso_extension_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: list[MacOsSsoExtensionPayloadV2Entity]
        """
        return self._sso_extension_list

    @sso_extension_list.setter
    def sso_extension_list(self, sso_extension_list):
        """Sets the sso_extension_list of this AppleOsXDeviceProfileEntity_.

        Gets or sets SSO Extension payload.  # noqa: E501

        :param sso_extension_list: The sso_extension_list of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: list[MacOsSsoExtensionPayloadV2Entity]
        """

        self._sso_extension_list = sso_extension_list

    @property
    def system_extensions(self):
        """Gets the system_extensions of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets System Extensions payload.  # noqa: E501

        :return: The system_extensions of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: MacOsSystemExtensionsPayloadV2Model_
        """
        return self._system_extensions

    @system_extensions.setter
    def system_extensions(self, system_extensions):
        """Sets the system_extensions of this AppleOsXDeviceProfileEntity_.

        Gets or sets System Extensions payload.  # noqa: E501

        :param system_extensions: The system_extensions of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: MacOsSystemExtensionsPayloadV2Model_
        """

        self._system_extensions = system_extensions

    @property
    def skip_setup_assistant(self):
        """Gets the skip_setup_assistant of this AppleOsXDeviceProfileEntity_.  # noqa: E501

        Gets or sets Setup Assistant payload.  # noqa: E501

        :return: The skip_setup_assistant of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :rtype: MacOsSetupAssistantPayloadEntity_
        """
        return self._skip_setup_assistant

    @skip_setup_assistant.setter
    def skip_setup_assistant(self, skip_setup_assistant):
        """Sets the skip_setup_assistant of this AppleOsXDeviceProfileEntity_.

        Gets or sets Setup Assistant payload.  # noqa: E501

        :param skip_setup_assistant: The skip_setup_assistant of this AppleOsXDeviceProfileEntity_.  # noqa: E501
        :type: MacOsSetupAssistantPayloadEntity_
        """

        self._skip_setup_assistant = skip_setup_assistant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXDeviceProfileEntity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXDeviceProfileEntity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXDeviceProfileEntity_):
            return True

        return self.to_dict() != other.to_dict()
