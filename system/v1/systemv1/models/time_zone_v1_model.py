# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class TimeZoneV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone_code': 'str',
        'name': 'str',
        'utc_offset': 'int',
        'dst_offset': 'int',
        'standard_name': 'str',
        'alternate_name': 'str'
    }

    attribute_map = {
        'timezone_code': 'timezone_code',
        'name': 'name',
        'utc_offset': 'utc_offset',
        'dst_offset': 'dst_Offset',
        'standard_name': 'standard_name',
        'alternate_name': 'alternate_name'
    }

    def __init__(self, timezone_code=None, name=None, utc_offset=None, dst_offset=None, standard_name=None, alternate_name=None, _configuration=None):  # noqa: E501
        """TimeZoneV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._timezone_code = None
        self._name = None
        self._utc_offset = None
        self._dst_offset = None
        self._standard_name = None
        self._alternate_name = None
        self.discriminator = None

        if timezone_code is not None:
            self.timezone_code = timezone_code
        if name is not None:
            self.name = name
        if utc_offset is not None:
            self.utc_offset = utc_offset
        if dst_offset is not None:
            self.dst_offset = dst_offset
        if standard_name is not None:
            self.standard_name = standard_name
        if alternate_name is not None:
            self.alternate_name = alternate_name

    @property
    def timezone_code(self):
        """Gets the timezone_code of this TimeZoneV1Model.  # noqa: E501

        timezone code.  # noqa: E501

        :return: The timezone_code of this TimeZoneV1Model.  # noqa: E501
        :rtype: str
        """
        return self._timezone_code

    @timezone_code.setter
    def timezone_code(self, timezone_code):
        """Sets the timezone_code of this TimeZoneV1Model.

        timezone code.  # noqa: E501

        :param timezone_code: The timezone_code of this TimeZoneV1Model.  # noqa: E501
        :type: str
        """

        self._timezone_code = timezone_code

    @property
    def name(self):
        """Gets the name of this TimeZoneV1Model.  # noqa: E501

        timezone name.  # noqa: E501

        :return: The name of this TimeZoneV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimeZoneV1Model.

        timezone name.  # noqa: E501

        :param name: The name of this TimeZoneV1Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def utc_offset(self):
        """Gets the utc_offset of this TimeZoneV1Model.  # noqa: E501

        utc offset.  # noqa: E501

        :return: The utc_offset of this TimeZoneV1Model.  # noqa: E501
        :rtype: int
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this TimeZoneV1Model.

        utc offset.  # noqa: E501

        :param utc_offset: The utc_offset of this TimeZoneV1Model.  # noqa: E501
        :type: int
        """

        self._utc_offset = utc_offset

    @property
    def dst_offset(self):
        """Gets the dst_offset of this TimeZoneV1Model.  # noqa: E501

        dst offset.  # noqa: E501

        :return: The dst_offset of this TimeZoneV1Model.  # noqa: E501
        :rtype: int
        """
        return self._dst_offset

    @dst_offset.setter
    def dst_offset(self, dst_offset):
        """Sets the dst_offset of this TimeZoneV1Model.

        dst offset.  # noqa: E501

        :param dst_offset: The dst_offset of this TimeZoneV1Model.  # noqa: E501
        :type: int
        """

        self._dst_offset = dst_offset

    @property
    def standard_name(self):
        """Gets the standard_name of this TimeZoneV1Model.  # noqa: E501

        timezone standard name.  # noqa: E501

        :return: The standard_name of this TimeZoneV1Model.  # noqa: E501
        :rtype: str
        """
        return self._standard_name

    @standard_name.setter
    def standard_name(self, standard_name):
        """Sets the standard_name of this TimeZoneV1Model.

        timezone standard name.  # noqa: E501

        :param standard_name: The standard_name of this TimeZoneV1Model.  # noqa: E501
        :type: str
        """

        self._standard_name = standard_name

    @property
    def alternate_name(self):
        """Gets the alternate_name of this TimeZoneV1Model.  # noqa: E501

        timezone alternate name.  # noqa: E501

        :return: The alternate_name of this TimeZoneV1Model.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this TimeZoneV1Model.

        timezone alternate name.  # noqa: E501

        :param alternate_name: The alternate_name of this TimeZoneV1Model.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeZoneV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeZoneV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeZoneV1Model):
            return True

        return self.to_dict() != other.to_dict()
