# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv2.api_client import ApiClient


class CommandsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def commands_v2_bulk_execute_async(self, command_name, bulk_commands_model, **kwargs):  # noqa: E501
        """New - Executes command for multiple devices identified by device uuid  # noqa: E501

        Executes command for multiple devices identified by device uuid. Supported commands are Lock, SyncSensors (macOS only), and DeviceWipe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v2_bulk_execute_async(command_name, bulk_commands_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command_name: The command to execute [Lock, DeviceWipe, SyncSensors].(Required) (required)
        :param BulkCommandsV2Model bulk_commands_model: Model containing list of device uuids and Unlock PIN.              The **unlock_pin** is applicable only for the macOS devices and it is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using a 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.              The **sensor_name** is applicable only for macOS and Linux platform and it is required for the SyncSensors command.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v2_bulk_execute_async_with_http_info(command_name, bulk_commands_model, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v2_bulk_execute_async_with_http_info(command_name, bulk_commands_model, **kwargs)  # noqa: E501
            return data

    def commands_v2_bulk_execute_async_with_http_info(self, command_name, bulk_commands_model, **kwargs):  # noqa: E501
        """New - Executes command for multiple devices identified by device uuid  # noqa: E501

        Executes command for multiple devices identified by device uuid. Supported commands are Lock, SyncSensors (macOS only), and DeviceWipe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v2_bulk_execute_async_with_http_info(command_name, bulk_commands_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command_name: The command to execute [Lock, DeviceWipe, SyncSensors].(Required) (required)
        :param BulkCommandsV2Model bulk_commands_model: Model containing list of device uuids and Unlock PIN.              The **unlock_pin** is applicable only for the macOS devices and it is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using a 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.              The **sensor_name** is applicable only for macOS and Linux platform and it is required for the SyncSensors command.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command_name', 'bulk_commands_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v2_bulk_execute_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command_name' is set
        if self.api_client.client_side_validation and ('command_name' not in params or
                                                       params['command_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command_name` when calling `commands_v2_bulk_execute_async`")  # noqa: E501
        # verify the required parameter 'bulk_commands_model' is set
        if self.api_client.client_side_validation and ('bulk_commands_model' not in params or
                                                       params['bulk_commands_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_commands_model` when calling `commands_v2_bulk_execute_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'command_name' in params:
            path_params['commandName'] = params['command_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_commands_model' in params:
            body_params = params['bulk_commands_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/{commandName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v2_execute_async(self, device_uuid, command_name, commands_model, **kwargs):  # noqa: E501
        """New - Executes a command for device by device uuid  # noqa: E501

        Executes a command for device by device uuid. Supported commands are Lock, DeviceWipe, logout-user (iOS only), delete-user (iOS only), user-list (iOS only), SyncSensors (macOS only), suspend-bitlocker (Windows only), resume-bitlocker (Windows only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v2_execute_async(device_uuid, command_name, commands_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: Device Uuid.              Accepted format is **guid**              E.g. 0258902A-9E0C-4DC5-A997-9E079559F75E(Required) (required)
        :param str command_name: The command to execute [Lock, DeviceWipe, logout-user, delete-user, user-list, SyncSensors, suspend-bitlocker, resume-bitlocker].(Required) (required)
        :param CommandsV2Model commands_model: Model containing option values to the API.              The **unlock_pin** is applicable only for the macOS devices and it is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using a 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.              The **sensor_names** is applicable only for macOS and Linux platform and it is required for the SyncSensors command.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v2_execute_async_with_http_info(device_uuid, command_name, commands_model, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v2_execute_async_with_http_info(device_uuid, command_name, commands_model, **kwargs)  # noqa: E501
            return data

    def commands_v2_execute_async_with_http_info(self, device_uuid, command_name, commands_model, **kwargs):  # noqa: E501
        """New - Executes a command for device by device uuid  # noqa: E501

        Executes a command for device by device uuid. Supported commands are Lock, DeviceWipe, logout-user (iOS only), delete-user (iOS only), user-list (iOS only), SyncSensors (macOS only), suspend-bitlocker (Windows only), resume-bitlocker (Windows only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v2_execute_async_with_http_info(device_uuid, command_name, commands_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: Device Uuid.              Accepted format is **guid**              E.g. 0258902A-9E0C-4DC5-A997-9E079559F75E(Required) (required)
        :param str command_name: The command to execute [Lock, DeviceWipe, logout-user, delete-user, user-list, SyncSensors, suspend-bitlocker, resume-bitlocker].(Required) (required)
        :param CommandsV2Model commands_model: Model containing option values to the API.              The **unlock_pin** is applicable only for the macOS devices and it is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using a 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.              The **sensor_names** is applicable only for macOS and Linux platform and it is required for the SyncSensors command.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_uuid', 'command_name', 'commands_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v2_execute_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_uuid' is set
        if self.api_client.client_side_validation and ('device_uuid' not in params or
                                                       params['device_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_uuid` when calling `commands_v2_execute_async`")  # noqa: E501
        # verify the required parameter 'command_name' is set
        if self.api_client.client_side_validation and ('command_name' not in params or
                                                       params['command_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command_name` when calling `commands_v2_execute_async`")  # noqa: E501
        # verify the required parameter 'commands_model' is set
        if self.api_client.client_side_validation and ('commands_model' not in params or
                                                       params['commands_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `commands_model` when calling `commands_v2_execute_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_uuid' in params:
            path_params['deviceUuid'] = params['device_uuid']  # noqa: E501
        if 'command_name' in params:
            path_params['commandName'] = params['command_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'commands_model' in params:
            body_params = params['commands_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceUuid}/commands/{commandName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def commands_v2_execute_by_alternate_id_async(self, command_name, search_by, id, commands_model, **kwargs):  # noqa: E501
        """New - Executes a command for device by alternate ID  # noqa: E501

        Execute commands for specified device ID. Supported commands are ClearPasscode, DeviceWipe, Lock, SyncSensors (macOS only), enable-activation-lock (iOS and macOS only), logout-user (iOS only), delete-user (iOS only), user-list (iOS only), refresh-esim (iOS only), suspend-bitlocker (Windows only), resume-bitlocker (Windows only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v2_execute_by_alternate_id_async(command_name, search_by, id, commands_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command_name: The command to execute [ClearPasscode, DeviceWipe, Lock, SyncSensors, delete-user, enable-activation-lock, logout-user, refresh-esim, user-list, suspend-bitlocker, resume-bitlocker].(Required) (required)
        :param str search_by: Search by alternate ID type [MacAddress, Udid, SerialNumber, ImeiNumber, EasId].(Required) (required)
        :param str id: ID(Required) (required)
        :param CommandsV2Model commands_model: Model containing option values to the API.              The **unlock_pin** is applicable only for the macOS devices and it is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using a 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.              The **message** can be optionally provided for Lock which will be displayed on the device lock screen. Max allowed length is 256 chars.              The **sensor_names** is applicable only for macOS and Linux platform and it is required for the SyncSensors command.(Required) (required)
        :return: CommandsResponseV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.commands_v2_execute_by_alternate_id_async_with_http_info(command_name, search_by, id, commands_model, **kwargs)  # noqa: E501
        else:
            (data) = self.commands_v2_execute_by_alternate_id_async_with_http_info(command_name, search_by, id, commands_model, **kwargs)  # noqa: E501
            return data

    def commands_v2_execute_by_alternate_id_async_with_http_info(self, command_name, search_by, id, commands_model, **kwargs):  # noqa: E501
        """New - Executes a command for device by alternate ID  # noqa: E501

        Execute commands for specified device ID. Supported commands are ClearPasscode, DeviceWipe, Lock, SyncSensors (macOS only), enable-activation-lock (iOS and macOS only), logout-user (iOS only), delete-user (iOS only), user-list (iOS only), refresh-esim (iOS only), suspend-bitlocker (Windows only), resume-bitlocker (Windows only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commands_v2_execute_by_alternate_id_async_with_http_info(command_name, search_by, id, commands_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str command_name: The command to execute [ClearPasscode, DeviceWipe, Lock, SyncSensors, delete-user, enable-activation-lock, logout-user, refresh-esim, user-list, suspend-bitlocker, resume-bitlocker].(Required) (required)
        :param str search_by: Search by alternate ID type [MacAddress, Udid, SerialNumber, ImeiNumber, EasId].(Required) (required)
        :param str id: ID(Required) (required)
        :param CommandsV2Model commands_model: Model containing option values to the API.              The **unlock_pin** is applicable only for the macOS devices and it is required for Lock and DeviceWipe commands. Warning - This device cannot be unlocked remotely and can only be unlocked using a 6-digit pin entered. Write this PIN down and store it in a safe place. If you forget your PIN you must contact Apple to unlock your device.              The **message** can be optionally provided for Lock which will be displayed on the device lock screen. Max allowed length is 256 chars.              The **sensor_names** is applicable only for macOS and Linux platform and it is required for the SyncSensors command.(Required) (required)
        :return: CommandsResponseV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['command_name', 'search_by', 'id', 'commands_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commands_v2_execute_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'command_name' is set
        if self.api_client.client_side_validation and ('command_name' not in params or
                                                       params['command_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `command_name` when calling `commands_v2_execute_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `commands_v2_execute_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `commands_v2_execute_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'commands_model' is set
        if self.api_client.client_side_validation and ('commands_model' not in params or
                                                       params['commands_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `commands_model` when calling `commands_v2_execute_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'command_name' in params:
            path_params['commandName'] = params['command_name']  # noqa: E501
        if 'search_by' in params:
            path_params['searchBy'] = params['search_by']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'commands_model' in params:
            body_params = params['commands_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/commands/{commandName}/device/{searchBy}/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommandsResponseV2Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
