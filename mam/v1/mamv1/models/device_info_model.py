# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class DeviceInfoModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_sample_last_seen_date': 'datetime',
        'app_sample_last_seen': 'str',
        'is_device_up': 'bool',
        'assignment_status': 'str',
        'assigned_version': 'str',
        'installed_status': 'str',
        'installed_version': 'str',
        'last_action_taken': 'str',
        'latest_action_taken_date_time': 'datetime',
        'latest_action_taken_time': 'str',
        'latest_app_reason': 'str',
        'latest_app_reason_date_time': 'datetime',
        'latest_app_reason_time': 'str',
        'device_uuid': 'str',
        'application_uuid': 'str',
        'friendly_name': 'str',
        'management_type': 'str',
        'ownership_type': 'str',
        'enrollment_user_name': 'str',
        'enrollment_user_id': 'int',
        'device_id': 'int',
        'requires_approval': 'bool',
        'approval_received': 'bool',
        'assignment_type': 'int'
    }

    attribute_map = {
        'app_sample_last_seen_date': 'app_sample_last_seen_date',
        'app_sample_last_seen': 'app_sample_last_seen',
        'is_device_up': 'is_device_up',
        'assignment_status': 'assignment_status',
        'assigned_version': 'assigned_version',
        'installed_status': 'installed_status',
        'installed_version': 'installed_version',
        'last_action_taken': 'last_action_taken',
        'latest_action_taken_date_time': 'latest_action_taken_date_time',
        'latest_action_taken_time': 'latest_action_taken_time',
        'latest_app_reason': 'latest_app_reason',
        'latest_app_reason_date_time': 'latest_app_reason_date_time',
        'latest_app_reason_time': 'latest_app_reason_time',
        'device_uuid': 'device_uuid',
        'application_uuid': 'application_uuid',
        'friendly_name': 'friendly_name',
        'management_type': 'management_type',
        'ownership_type': 'ownership_type',
        'enrollment_user_name': 'enrollment_user_name',
        'enrollment_user_id': 'enrollment_user_id',
        'device_id': 'device_id',
        'requires_approval': 'requires_approval',
        'approval_received': 'approval_received',
        'assignment_type': 'assignment_type'
    }

    def __init__(self, app_sample_last_seen_date=None, app_sample_last_seen=None, is_device_up=None, assignment_status=None, assigned_version=None, installed_status=None, installed_version=None, last_action_taken=None, latest_action_taken_date_time=None, latest_action_taken_time=None, latest_app_reason=None, latest_app_reason_date_time=None, latest_app_reason_time=None, device_uuid=None, application_uuid=None, friendly_name=None, management_type=None, ownership_type=None, enrollment_user_name=None, enrollment_user_id=None, device_id=None, requires_approval=None, approval_received=None, assignment_type=None, _configuration=None):  # noqa: E501
        """DeviceInfoModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._app_sample_last_seen_date = None
        self._app_sample_last_seen = None
        self._is_device_up = None
        self._assignment_status = None
        self._assigned_version = None
        self._installed_status = None
        self._installed_version = None
        self._last_action_taken = None
        self._latest_action_taken_date_time = None
        self._latest_action_taken_time = None
        self._latest_app_reason = None
        self._latest_app_reason_date_time = None
        self._latest_app_reason_time = None
        self._device_uuid = None
        self._application_uuid = None
        self._friendly_name = None
        self._management_type = None
        self._ownership_type = None
        self._enrollment_user_name = None
        self._enrollment_user_id = None
        self._device_id = None
        self._requires_approval = None
        self._approval_received = None
        self._assignment_type = None
        self.discriminator = None

        if app_sample_last_seen_date is not None:
            self.app_sample_last_seen_date = app_sample_last_seen_date
        if app_sample_last_seen is not None:
            self.app_sample_last_seen = app_sample_last_seen
        if is_device_up is not None:
            self.is_device_up = is_device_up
        if assignment_status is not None:
            self.assignment_status = assignment_status
        if assigned_version is not None:
            self.assigned_version = assigned_version
        if installed_status is not None:
            self.installed_status = installed_status
        if installed_version is not None:
            self.installed_version = installed_version
        if last_action_taken is not None:
            self.last_action_taken = last_action_taken
        if latest_action_taken_date_time is not None:
            self.latest_action_taken_date_time = latest_action_taken_date_time
        if latest_action_taken_time is not None:
            self.latest_action_taken_time = latest_action_taken_time
        if latest_app_reason is not None:
            self.latest_app_reason = latest_app_reason
        if latest_app_reason_date_time is not None:
            self.latest_app_reason_date_time = latest_app_reason_date_time
        if latest_app_reason_time is not None:
            self.latest_app_reason_time = latest_app_reason_time
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if application_uuid is not None:
            self.application_uuid = application_uuid
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if management_type is not None:
            self.management_type = management_type
        if ownership_type is not None:
            self.ownership_type = ownership_type
        if enrollment_user_name is not None:
            self.enrollment_user_name = enrollment_user_name
        if enrollment_user_id is not None:
            self.enrollment_user_id = enrollment_user_id
        if device_id is not None:
            self.device_id = device_id
        if requires_approval is not None:
            self.requires_approval = requires_approval
        if approval_received is not None:
            self.approval_received = approval_received
        if assignment_type is not None:
            self.assignment_type = assignment_type

    @property
    def app_sample_last_seen_date(self):
        """Gets the app_sample_last_seen_date of this DeviceInfoModel.  # noqa: E501

        The last seen app sample time for the device in YYYY-MM-DDTHH:MM:SSZ format.  # noqa: E501

        :return: The app_sample_last_seen_date of this DeviceInfoModel.  # noqa: E501
        :rtype: datetime
        """
        return self._app_sample_last_seen_date

    @app_sample_last_seen_date.setter
    def app_sample_last_seen_date(self, app_sample_last_seen_date):
        """Sets the app_sample_last_seen_date of this DeviceInfoModel.

        The last seen app sample time for the device in YYYY-MM-DDTHH:MM:SSZ format.  # noqa: E501

        :param app_sample_last_seen_date: The app_sample_last_seen_date of this DeviceInfoModel.  # noqa: E501
        :type: datetime
        """

        self._app_sample_last_seen_date = app_sample_last_seen_date

    @property
    def app_sample_last_seen(self):
        """Gets the app_sample_last_seen of this DeviceInfoModel.  # noqa: E501

        The string representation of the time difference since the latest transient reason was reported by the device.  # noqa: E501

        :return: The app_sample_last_seen of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._app_sample_last_seen

    @app_sample_last_seen.setter
    def app_sample_last_seen(self, app_sample_last_seen):
        """Sets the app_sample_last_seen of this DeviceInfoModel.

        The string representation of the time difference since the latest transient reason was reported by the device.  # noqa: E501

        :param app_sample_last_seen: The app_sample_last_seen of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._app_sample_last_seen = app_sample_last_seen

    @property
    def is_device_up(self):
        """Gets the is_device_up of this DeviceInfoModel.  # noqa: E501

        Indicates if the device is active.  # noqa: E501

        :return: The is_device_up of this DeviceInfoModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_device_up

    @is_device_up.setter
    def is_device_up(self, is_device_up):
        """Sets the is_device_up of this DeviceInfoModel.

        Indicates if the device is active.  # noqa: E501

        :param is_device_up: The is_device_up of this DeviceInfoModel.  # noqa: E501
        :type: bool
        """

        self._is_device_up = is_device_up

    @property
    def assignment_status(self):
        """Gets the assignment_status of this DeviceInfoModel.  # noqa: E501

        Assignment status of the app. The possible values are [Assigned, NotAssigned]  # noqa: E501

        :return: The assignment_status of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._assignment_status

    @assignment_status.setter
    def assignment_status(self, assignment_status):
        """Sets the assignment_status of this DeviceInfoModel.

        Assignment status of the app. The possible values are [Assigned, NotAssigned]  # noqa: E501

        :param assignment_status: The assignment_status of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._assignment_status = assignment_status

    @property
    def assigned_version(self):
        """Gets the assigned_version of this DeviceInfoModel.  # noqa: E501

        The version of app assigned to the device  # noqa: E501

        :return: The assigned_version of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._assigned_version

    @assigned_version.setter
    def assigned_version(self, assigned_version):
        """Sets the assigned_version of this DeviceInfoModel.

        The version of app assigned to the device  # noqa: E501

        :param assigned_version: The assigned_version of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._assigned_version = assigned_version

    @property
    def installed_status(self):
        """Gets the installed_status of this DeviceInfoModel.  # noqa: E501

        Installation status of the app on the device. The possible values are [Installed, NotInstalled]  # noqa: E501

        :return: The installed_status of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._installed_status

    @installed_status.setter
    def installed_status(self, installed_status):
        """Sets the installed_status of this DeviceInfoModel.

        Installation status of the app on the device. The possible values are [Installed, NotInstalled]  # noqa: E501

        :param installed_status: The installed_status of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._installed_status = installed_status

    @property
    def installed_version(self):
        """Gets the installed_version of this DeviceInfoModel.  # noqa: E501

        The version of app installed on the device  # noqa: E501

        :return: The installed_version of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._installed_version

    @installed_version.setter
    def installed_version(self, installed_version):
        """Sets the installed_version of this DeviceInfoModel.

        The version of app installed on the device  # noqa: E501

        :param installed_version: The installed_version of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._installed_version = installed_version

    @property
    def last_action_taken(self):
        """Gets the last_action_taken of this DeviceInfoModel.  # noqa: E501

        The latest server side trigger for the application. The possible values are [Unknown, PendingRelease, InstallCommandReadyForDevice, InstallCommandDispatched, InstallCommandFailed, RemoveAppCommandInHeldState, PendingRemoval, RemoveCommandSuccessful, RemoveApplicationFailed, VppLicenseNotAvailable, RequestRejected, RequestError, PendingApproval, RequestExpired, ProvisioningCommandDeleted, UserDeferredInstall]  # noqa: E501

        :return: The last_action_taken of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._last_action_taken

    @last_action_taken.setter
    def last_action_taken(self, last_action_taken):
        """Sets the last_action_taken of this DeviceInfoModel.

        The latest server side trigger for the application. The possible values are [Unknown, PendingRelease, InstallCommandReadyForDevice, InstallCommandDispatched, InstallCommandFailed, RemoveAppCommandInHeldState, PendingRemoval, RemoveCommandSuccessful, RemoveApplicationFailed, VppLicenseNotAvailable, RequestRejected, RequestError, PendingApproval, RequestExpired, ProvisioningCommandDeleted, UserDeferredInstall]  # noqa: E501

        :param last_action_taken: The last_action_taken of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._last_action_taken = last_action_taken

    @property
    def latest_action_taken_date_time(self):
        """Gets the latest_action_taken_date_time of this DeviceInfoModel.  # noqa: E501

        The time of the latest server side trigger in YYYY-MM-DDTHH:MM:SSZ format.  # noqa: E501

        :return: The latest_action_taken_date_time of this DeviceInfoModel.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_action_taken_date_time

    @latest_action_taken_date_time.setter
    def latest_action_taken_date_time(self, latest_action_taken_date_time):
        """Sets the latest_action_taken_date_time of this DeviceInfoModel.

        The time of the latest server side trigger in YYYY-MM-DDTHH:MM:SSZ format.  # noqa: E501

        :param latest_action_taken_date_time: The latest_action_taken_date_time of this DeviceInfoModel.  # noqa: E501
        :type: datetime
        """

        self._latest_action_taken_date_time = latest_action_taken_date_time

    @property
    def latest_action_taken_time(self):
        """Gets the latest_action_taken_time of this DeviceInfoModel.  # noqa: E501

        The timestamp of the latest server side trigger in YYYY-MM-DDTHH:MM:SSZ format.  # noqa: E501

        :return: The latest_action_taken_time of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._latest_action_taken_time

    @latest_action_taken_time.setter
    def latest_action_taken_time(self, latest_action_taken_time):
        """Sets the latest_action_taken_time of this DeviceInfoModel.

        The timestamp of the latest server side trigger in YYYY-MM-DDTHH:MM:SSZ format.  # noqa: E501

        :param latest_action_taken_time: The latest_action_taken_time of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._latest_action_taken_time = latest_action_taken_time

    @property
    def latest_app_reason(self):
        """Gets the latest_app_reason of this DeviceInfoModel.  # noqa: E501

        The application reason reported by the device. The possible values are [NeedsRedemption, RedeemingCode, Prompting, Installing, Managed, MDMRemoval, RemovedByEmm, RemovedByUser, Rejected, Failed, Unknown, InstalledByUser, AwaitingInstallOnDevice, Updating, ManagementRejected, PromptingForManagement, DownloadInProgress, DownloadFailed, RemoveApplicationFailed, FinalDetectionFailed, DeviceEligibilityCheckFailed, ExecutionFailed, DependentAppValidationFailed, CheckingDeviceEligibility, ValidatingDependentApps, PendingReboot]  # noqa: E501

        :return: The latest_app_reason of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._latest_app_reason

    @latest_app_reason.setter
    def latest_app_reason(self, latest_app_reason):
        """Sets the latest_app_reason of this DeviceInfoModel.

        The application reason reported by the device. The possible values are [NeedsRedemption, RedeemingCode, Prompting, Installing, Managed, MDMRemoval, RemovedByEmm, RemovedByUser, Rejected, Failed, Unknown, InstalledByUser, AwaitingInstallOnDevice, Updating, ManagementRejected, PromptingForManagement, DownloadInProgress, DownloadFailed, RemoveApplicationFailed, FinalDetectionFailed, DeviceEligibilityCheckFailed, ExecutionFailed, DependentAppValidationFailed, CheckingDeviceEligibility, ValidatingDependentApps, PendingReboot]  # noqa: E501

        :param latest_app_reason: The latest_app_reason of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._latest_app_reason = latest_app_reason

    @property
    def latest_app_reason_date_time(self):
        """Gets the latest_app_reason_date_time of this DeviceInfoModel.  # noqa: E501

        The time at which the reason was reported by the device  # noqa: E501

        :return: The latest_app_reason_date_time of this DeviceInfoModel.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_app_reason_date_time

    @latest_app_reason_date_time.setter
    def latest_app_reason_date_time(self, latest_app_reason_date_time):
        """Sets the latest_app_reason_date_time of this DeviceInfoModel.

        The time at which the reason was reported by the device  # noqa: E501

        :param latest_app_reason_date_time: The latest_app_reason_date_time of this DeviceInfoModel.  # noqa: E501
        :type: datetime
        """

        self._latest_app_reason_date_time = latest_app_reason_date_time

    @property
    def latest_app_reason_time(self):
        """Gets the latest_app_reason_time of this DeviceInfoModel.  # noqa: E501

        The timestamp at which the reason was reported by the device  # noqa: E501

        :return: The latest_app_reason_time of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._latest_app_reason_time

    @latest_app_reason_time.setter
    def latest_app_reason_time(self, latest_app_reason_time):
        """Sets the latest_app_reason_time of this DeviceInfoModel.

        The timestamp at which the reason was reported by the device  # noqa: E501

        :param latest_app_reason_time: The latest_app_reason_time of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._latest_app_reason_time = latest_app_reason_time

    @property
    def device_uuid(self):
        """Gets the device_uuid of this DeviceInfoModel.  # noqa: E501

        The unique identifier of the device  # noqa: E501

        :return: The device_uuid of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this DeviceInfoModel.

        The unique identifier of the device  # noqa: E501

        :param device_uuid: The device_uuid of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def application_uuid(self):
        """Gets the application_uuid of this DeviceInfoModel.  # noqa: E501

        The unique identifier of the application assigned to the device  # noqa: E501

        :return: The application_uuid of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._application_uuid

    @application_uuid.setter
    def application_uuid(self, application_uuid):
        """Sets the application_uuid of this DeviceInfoModel.

        The unique identifier of the application assigned to the device  # noqa: E501

        :param application_uuid: The application_uuid of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._application_uuid = application_uuid

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DeviceInfoModel.  # noqa: E501

        The friendly name of the device  # noqa: E501

        :return: The friendly_name of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DeviceInfoModel.

        The friendly name of the device  # noqa: E501

        :param friendly_name: The friendly_name of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def management_type(self):
        """Gets the management_type of this DeviceInfoModel.  # noqa: E501

        The management type of the device.  # noqa: E501

        :return: The management_type of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._management_type

    @management_type.setter
    def management_type(self, management_type):
        """Sets the management_type of this DeviceInfoModel.

        The management type of the device.  # noqa: E501

        :param management_type: The management_type of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._management_type = management_type

    @property
    def ownership_type(self):
        """Gets the ownership_type of this DeviceInfoModel.  # noqa: E501

        The ownership type of the device  # noqa: E501

        :return: The ownership_type of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._ownership_type

    @ownership_type.setter
    def ownership_type(self, ownership_type):
        """Sets the ownership_type of this DeviceInfoModel.

        The ownership type of the device  # noqa: E501

        :param ownership_type: The ownership_type of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._ownership_type = ownership_type

    @property
    def enrollment_user_name(self):
        """Gets the enrollment_user_name of this DeviceInfoModel.  # noqa: E501

        Username (with domain if present) of the user to which the device is enrolled  # noqa: E501

        :return: The enrollment_user_name of this DeviceInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_user_name

    @enrollment_user_name.setter
    def enrollment_user_name(self, enrollment_user_name):
        """Sets the enrollment_user_name of this DeviceInfoModel.

        Username (with domain if present) of the user to which the device is enrolled  # noqa: E501

        :param enrollment_user_name: The enrollment_user_name of this DeviceInfoModel.  # noqa: E501
        :type: str
        """

        self._enrollment_user_name = enrollment_user_name

    @property
    def enrollment_user_id(self):
        """Gets the enrollment_user_id of this DeviceInfoModel.  # noqa: E501

        The unique identifier of the user to which the device is enrolled  # noqa: E501

        :return: The enrollment_user_id of this DeviceInfoModel.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_user_id

    @enrollment_user_id.setter
    def enrollment_user_id(self, enrollment_user_id):
        """Sets the enrollment_user_id of this DeviceInfoModel.

        The unique identifier of the user to which the device is enrolled  # noqa: E501

        :param enrollment_user_id: The enrollment_user_id of this DeviceInfoModel.  # noqa: E501
        :type: int
        """

        self._enrollment_user_id = enrollment_user_id

    @property
    def device_id(self):
        """Gets the device_id of this DeviceInfoModel.  # noqa: E501

        The unique identifier of the enrolled device  # noqa: E501

        :return: The device_id of this DeviceInfoModel.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceInfoModel.

        The unique identifier of the enrolled device  # noqa: E501

        :param device_id: The device_id of this DeviceInfoModel.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def requires_approval(self):
        """Gets the requires_approval of this DeviceInfoModel.  # noqa: E501

        Indicates if requires approval is enabled for the device  # noqa: E501

        :return: The requires_approval of this DeviceInfoModel.  # noqa: E501
        :rtype: bool
        """
        return self._requires_approval

    @requires_approval.setter
    def requires_approval(self, requires_approval):
        """Sets the requires_approval of this DeviceInfoModel.

        Indicates if requires approval is enabled for the device  # noqa: E501

        :param requires_approval: The requires_approval of this DeviceInfoModel.  # noqa: E501
        :type: bool
        """

        self._requires_approval = requires_approval

    @property
    def approval_received(self):
        """Gets the approval_received of this DeviceInfoModel.  # noqa: E501

        Indicates if approval is received for device if requires approval is true  # noqa: E501

        :return: The approval_received of this DeviceInfoModel.  # noqa: E501
        :rtype: bool
        """
        return self._approval_received

    @approval_received.setter
    def approval_received(self, approval_received):
        """Sets the approval_received of this DeviceInfoModel.

        Indicates if approval is received for device if requires approval is true  # noqa: E501

        :param approval_received: The approval_received of this DeviceInfoModel.  # noqa: E501
        :type: bool
        """

        self._approval_received = approval_received

    @property
    def assignment_type(self):
        """Gets the assignment_type of this DeviceInfoModel.  # noqa: E501

        Value indicating assignment type. The supported values- Default = 0, WorkFlowAssigned = 1, Both = 2, WorkflowDeleted = 3  # noqa: E501

        :return: The assignment_type of this DeviceInfoModel.  # noqa: E501
        :rtype: int
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this DeviceInfoModel.

        Value indicating assignment type. The supported values- Default = 0, WorkFlowAssigned = 1, Both = 2, WorkflowDeleted = 3  # noqa: E501

        :param assignment_type: The assignment_type of this DeviceInfoModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                assignment_type not in allowed_values):
            raise ValueError(
                "Invalid value for `assignment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignment_type, allowed_values)
            )

        self._assignment_type = assignment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceInfoModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInfoModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceInfoModel):
            return True

        return self.to_dict() != other.to_dict()
