# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class GetPlatformDetailsResponseV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_type': 'str',
        'platform_name': 'str',
        'model_name': 'str',
        'os_version': 'str'
    }

    attribute_map = {
        'device_type': 'deviceType',
        'platform_name': 'platformName',
        'model_name': 'modelName',
        'os_version': 'osVersion'
    }

    def __init__(self, device_type=None, platform_name=None, model_name=None, os_version=None, _configuration=None):  # noqa: E501
        """GetPlatformDetailsResponseV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_type = None
        self._platform_name = None
        self._model_name = None
        self._os_version = None
        self.discriminator = None

        if device_type is not None:
            self.device_type = device_type
        if platform_name is not None:
            self.platform_name = platform_name
        if model_name is not None:
            self.model_name = model_name
        if os_version is not None:
            self.os_version = os_version

    @property
    def device_type(self):
        """Gets the device_type of this GetPlatformDetailsResponseV2Model.  # noqa: E501

        Type of the device (e.g. Apple, Android, WindowsPc etc)  # noqa: E501

        :return: The device_type of this GetPlatformDetailsResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this GetPlatformDetailsResponseV2Model.

        Type of the device (e.g. Apple, Android, WindowsPc etc)  # noqa: E501

        :param device_type: The device_type of this GetPlatformDetailsResponseV2Model.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def platform_name(self):
        """Gets the platform_name of this GetPlatformDetailsResponseV2Model.  # noqa: E501

        Name of the platform  # noqa: E501

        :return: The platform_name of this GetPlatformDetailsResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this GetPlatformDetailsResponseV2Model.

        Name of the platform  # noqa: E501

        :param platform_name: The platform_name of this GetPlatformDetailsResponseV2Model.  # noqa: E501
        :type: str
        """

        self._platform_name = platform_name

    @property
    def model_name(self):
        """Gets the model_name of this GetPlatformDetailsResponseV2Model.  # noqa: E501

        Model of the device  # noqa: E501

        :return: The model_name of this GetPlatformDetailsResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this GetPlatformDetailsResponseV2Model.

        Model of the device  # noqa: E501

        :param model_name: The model_name of this GetPlatformDetailsResponseV2Model.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def os_version(self):
        """Gets the os_version of this GetPlatformDetailsResponseV2Model.  # noqa: E501

        Version of the operating system installed on the device  # noqa: E501

        :return: The os_version of this GetPlatformDetailsResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this GetPlatformDetailsResponseV2Model.

        Version of the operating system installed on the device  # noqa: E501

        :param os_version: The os_version of this GetPlatformDetailsResponseV2Model.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPlatformDetailsResponseV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPlatformDetailsResponseV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetPlatformDetailsResponseV2Model):
            return True

        return self.to_dict() != other.to_dict()
