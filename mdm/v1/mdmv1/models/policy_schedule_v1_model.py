# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class PolicyScheduleV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'installation_mode': 'int',
        'device_time_zone_offset': 'int',
        'duration': 'int',
        'start_time': 'str',
        'end_time': 'str',
        'auto_update_delay': 'int',
        'allow_user_to_postpone': 'bool',
        'postpone_duration': 'int',
        'postpone_message': 'str'
    }

    attribute_map = {
        'installation_mode': 'installation_mode',
        'device_time_zone_offset': 'device_time_zone_offset',
        'duration': 'duration',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'auto_update_delay': 'auto_update_delay',
        'allow_user_to_postpone': 'allow_user_to_postpone',
        'postpone_duration': 'postpone_duration',
        'postpone_message': 'postpone_message'
    }

    def __init__(self, installation_mode=None, device_time_zone_offset=None, duration=None, start_time=None, end_time=None, auto_update_delay=None, allow_user_to_postpone=None, postpone_duration=None, postpone_message=None, _configuration=None):  # noqa: E501
        """PolicyScheduleV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._installation_mode = None
        self._device_time_zone_offset = None
        self._duration = None
        self._start_time = None
        self._end_time = None
        self._auto_update_delay = None
        self._allow_user_to_postpone = None
        self._postpone_duration = None
        self._postpone_message = None
        self.discriminator = None

        if installation_mode is not None:
            self.installation_mode = installation_mode
        if device_time_zone_offset is not None:
            self.device_time_zone_offset = device_time_zone_offset
        if duration is not None:
            self.duration = duration
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if auto_update_delay is not None:
            self.auto_update_delay = auto_update_delay
        if allow_user_to_postpone is not None:
            self.allow_user_to_postpone = allow_user_to_postpone
        if postpone_duration is not None:
            self.postpone_duration = postpone_duration
        if postpone_message is not None:
            self.postpone_message = postpone_message

    @property
    def installation_mode(self):
        """Gets the installation_mode of this PolicyScheduleV1Model.  # noqa: E501

        The install mode for the update.  # noqa: E501

        :return: The installation_mode of this PolicyScheduleV1Model.  # noqa: E501
        :rtype: int
        """
        return self._installation_mode

    @installation_mode.setter
    def installation_mode(self, installation_mode):
        """Sets the installation_mode of this PolicyScheduleV1Model.

        The install mode for the update.  # noqa: E501

        :param installation_mode: The installation_mode of this PolicyScheduleV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                installation_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `installation_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(installation_mode, allowed_values)
            )

        self._installation_mode = installation_mode

    @property
    def device_time_zone_offset(self):
        """Gets the device_time_zone_offset of this PolicyScheduleV1Model.  # noqa: E501

        The UTC offset of the device's time zone.  # noqa: E501

        :return: The device_time_zone_offset of this PolicyScheduleV1Model.  # noqa: E501
        :rtype: int
        """
        return self._device_time_zone_offset

    @device_time_zone_offset.setter
    def device_time_zone_offset(self, device_time_zone_offset):
        """Sets the device_time_zone_offset of this PolicyScheduleV1Model.

        The UTC offset of the device's time zone.  # noqa: E501

        :param device_time_zone_offset: The device_time_zone_offset of this PolicyScheduleV1Model.  # noqa: E501
        :type: int
        """

        self._device_time_zone_offset = device_time_zone_offset

    @property
    def duration(self):
        """Gets the duration of this PolicyScheduleV1Model.  # noqa: E501

        The duration for which the update is valid.  # noqa: E501

        :return: The duration of this PolicyScheduleV1Model.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PolicyScheduleV1Model.

        The duration for which the update is valid.  # noqa: E501

        :param duration: The duration of this PolicyScheduleV1Model.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def start_time(self):
        """Gets the start_time of this PolicyScheduleV1Model.  # noqa: E501

        The start time for the update.  # noqa: E501

        :return: The start_time of this PolicyScheduleV1Model.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PolicyScheduleV1Model.

        The start time for the update.  # noqa: E501

        :param start_time: The start_time of this PolicyScheduleV1Model.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this PolicyScheduleV1Model.  # noqa: E501

        The end time for the update.  # noqa: E501

        :return: The end_time of this PolicyScheduleV1Model.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PolicyScheduleV1Model.

        The end time for the update.  # noqa: E501

        :param end_time: The end_time of this PolicyScheduleV1Model.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def auto_update_delay(self):
        """Gets the auto_update_delay of this PolicyScheduleV1Model.  # noqa: E501

        The auto update delay in days (must be in range 1-10).  # noqa: E501

        :return: The auto_update_delay of this PolicyScheduleV1Model.  # noqa: E501
        :rtype: int
        """
        return self._auto_update_delay

    @auto_update_delay.setter
    def auto_update_delay(self, auto_update_delay):
        """Sets the auto_update_delay of this PolicyScheduleV1Model.

        The auto update delay in days (must be in range 1-10).  # noqa: E501

        :param auto_update_delay: The auto_update_delay of this PolicyScheduleV1Model.  # noqa: E501
        :type: int
        """

        self._auto_update_delay = auto_update_delay

    @property
    def allow_user_to_postpone(self):
        """Gets the allow_user_to_postpone of this PolicyScheduleV1Model.  # noqa: E501

        Indicates whether user is allowed to postpone the update or not.  # noqa: E501

        :return: The allow_user_to_postpone of this PolicyScheduleV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_user_to_postpone

    @allow_user_to_postpone.setter
    def allow_user_to_postpone(self, allow_user_to_postpone):
        """Sets the allow_user_to_postpone of this PolicyScheduleV1Model.

        Indicates whether user is allowed to postpone the update or not.  # noqa: E501

        :param allow_user_to_postpone: The allow_user_to_postpone of this PolicyScheduleV1Model.  # noqa: E501
        :type: bool
        """

        self._allow_user_to_postpone = allow_user_to_postpone

    @property
    def postpone_duration(self):
        """Gets the postpone_duration of this PolicyScheduleV1Model.  # noqa: E501

        The postpone duration in hours (must be in range 1-24), to be considered only when allow_user_to_postpone is true.  # noqa: E501

        :return: The postpone_duration of this PolicyScheduleV1Model.  # noqa: E501
        :rtype: int
        """
        return self._postpone_duration

    @postpone_duration.setter
    def postpone_duration(self, postpone_duration):
        """Sets the postpone_duration of this PolicyScheduleV1Model.

        The postpone duration in hours (must be in range 1-24), to be considered only when allow_user_to_postpone is true.  # noqa: E501

        :param postpone_duration: The postpone_duration of this PolicyScheduleV1Model.  # noqa: E501
        :type: int
        """

        self._postpone_duration = postpone_duration

    @property
    def postpone_message(self):
        """Gets the postpone_message of this PolicyScheduleV1Model.  # noqa: E501

        The postpone message, to be considered only when allow_user_to_postpone is true.  # noqa: E501

        :return: The postpone_message of this PolicyScheduleV1Model.  # noqa: E501
        :rtype: str
        """
        return self._postpone_message

    @postpone_message.setter
    def postpone_message(self, postpone_message):
        """Sets the postpone_message of this PolicyScheduleV1Model.

        The postpone message, to be considered only when allow_user_to_postpone is true.  # noqa: E501

        :param postpone_message: The postpone_message of this PolicyScheduleV1Model.  # noqa: E501
        :type: str
        """

        self._postpone_message = postpone_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyScheduleV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyScheduleV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicyScheduleV1Model):
            return True

        return self.to_dict() != other.to_dict()
