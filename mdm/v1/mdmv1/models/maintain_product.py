# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class MaintainProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'product_id': 'int',
        'description': 'str',
        'platform': 'int',
        'applicability_rule': 'str',
        'pause_resume': 'bool',
        'product_type': 'int',
        'activation_date': 'str',
        'deactivation_date': 'str',
        'auto_retry': 'bool',
        'device_reprocess': 'bool',
        'deployment_mode': 'int',
        'dependencies': 'list[DevicePolicyDependencyEntity]',
        'down_load_conditions': 'list[MaintainProductCondition]',
        'install_conditions': 'list[MaintainProductCondition]',
        'smart_groups': 'list[MaintainProductSmartGroup]',
        'steps': 'list[MaintainProductStep]'
    }

    attribute_map = {
        'name': 'Name',
        'product_id': 'ProductID',
        'description': 'Description',
        'platform': 'Platform',
        'applicability_rule': 'ApplicabilityRule',
        'pause_resume': 'PauseResume',
        'product_type': 'ProductType',
        'activation_date': 'ActivationDate',
        'deactivation_date': 'DeactivationDate',
        'auto_retry': 'AutoRetry',
        'device_reprocess': 'DeviceReprocess',
        'deployment_mode': 'DeploymentMode',
        'dependencies': 'Dependencies',
        'down_load_conditions': 'DownLoadConditions',
        'install_conditions': 'InstallConditions',
        'smart_groups': 'SmartGroups',
        'steps': 'Steps'
    }

    def __init__(self, name=None, product_id=None, description=None, platform=None, applicability_rule=None, pause_resume=None, product_type=None, activation_date=None, deactivation_date=None, auto_retry=None, device_reprocess=None, deployment_mode=None, dependencies=None, down_load_conditions=None, install_conditions=None, smart_groups=None, steps=None, _configuration=None):  # noqa: E501
        """MaintainProduct - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._product_id = None
        self._description = None
        self._platform = None
        self._applicability_rule = None
        self._pause_resume = None
        self._product_type = None
        self._activation_date = None
        self._deactivation_date = None
        self._auto_retry = None
        self._device_reprocess = None
        self._deployment_mode = None
        self._dependencies = None
        self._down_load_conditions = None
        self._install_conditions = None
        self._smart_groups = None
        self._steps = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if product_id is not None:
            self.product_id = product_id
        if description is not None:
            self.description = description
        if platform is not None:
            self.platform = platform
        if applicability_rule is not None:
            self.applicability_rule = applicability_rule
        if pause_resume is not None:
            self.pause_resume = pause_resume
        if product_type is not None:
            self.product_type = product_type
        if activation_date is not None:
            self.activation_date = activation_date
        if deactivation_date is not None:
            self.deactivation_date = deactivation_date
        if auto_retry is not None:
            self.auto_retry = auto_retry
        if device_reprocess is not None:
            self.device_reprocess = device_reprocess
        if deployment_mode is not None:
            self.deployment_mode = deployment_mode
        if dependencies is not None:
            self.dependencies = dependencies
        if down_load_conditions is not None:
            self.down_load_conditions = down_load_conditions
        if install_conditions is not None:
            self.install_conditions = install_conditions
        if smart_groups is not None:
            self.smart_groups = smart_groups
        if steps is not None:
            self.steps = steps

    @property
    def name(self):
        """Gets the name of this MaintainProduct.  # noqa: E501

        Gets or sets name of the product.  # noqa: E501

        :return: The name of this MaintainProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MaintainProduct.

        Gets or sets name of the product.  # noqa: E501

        :param name: The name of this MaintainProduct.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_id(self):
        """Gets the product_id of this MaintainProduct.  # noqa: E501

        Gets or sets iD of the product.  # noqa: E501

        :return: The product_id of this MaintainProduct.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this MaintainProduct.

        Gets or sets iD of the product.  # noqa: E501

        :param product_id: The product_id of this MaintainProduct.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def description(self):
        """Gets the description of this MaintainProduct.  # noqa: E501

        Gets or sets description of the product.  # noqa: E501

        :return: The description of this MaintainProduct.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MaintainProduct.

        Gets or sets description of the product.  # noqa: E501

        :param description: The description of this MaintainProduct.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def platform(self):
        """Gets the platform of this MaintainProduct.  # noqa: E501

        Gets or sets platform ID in which product is deployed.  # noqa: E501

        :return: The platform of this MaintainProduct.  # noqa: E501
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this MaintainProduct.

        Gets or sets platform ID in which product is deployed.  # noqa: E501

        :param platform: The platform of this MaintainProduct.  # noqa: E501
        :type: int
        """

        self._platform = platform

    @property
    def applicability_rule(self):
        """Gets the applicability_rule of this MaintainProduct.  # noqa: E501

        Gets or sets assignment rules to filter out devices within a Smart Group.  # noqa: E501

        :return: The applicability_rule of this MaintainProduct.  # noqa: E501
        :rtype: str
        """
        return self._applicability_rule

    @applicability_rule.setter
    def applicability_rule(self, applicability_rule):
        """Sets the applicability_rule of this MaintainProduct.

        Gets or sets assignment rules to filter out devices within a Smart Group.  # noqa: E501

        :param applicability_rule: The applicability_rule of this MaintainProduct.  # noqa: E501
        :type: str
        """

        self._applicability_rule = applicability_rule

    @property
    def pause_resume(self):
        """Gets the pause_resume of this MaintainProduct.  # noqa: E501

        Gets or sets a value indicating whether whether the product is in Pause or resume state.  # noqa: E501

        :return: The pause_resume of this MaintainProduct.  # noqa: E501
        :rtype: bool
        """
        return self._pause_resume

    @pause_resume.setter
    def pause_resume(self, pause_resume):
        """Sets the pause_resume of this MaintainProduct.

        Gets or sets a value indicating whether whether the product is in Pause or resume state.  # noqa: E501

        :param pause_resume: The pause_resume of this MaintainProduct.  # noqa: E501
        :type: bool
        """

        self._pause_resume = pause_resume

    @property
    def product_type(self):
        """Gets the product_type of this MaintainProduct.  # noqa: E501

        Gets or sets the type of Product.  # noqa: E501

        :return: The product_type of this MaintainProduct.  # noqa: E501
        :rtype: int
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this MaintainProduct.

        Gets or sets the type of Product.  # noqa: E501

        :param product_type: The product_type of this MaintainProduct.  # noqa: E501
        :type: int
        """

        self._product_type = product_type

    @property
    def activation_date(self):
        """Gets the activation_date of this MaintainProduct.  # noqa: E501

        Gets or sets date of Activation.  # noqa: E501

        :return: The activation_date of this MaintainProduct.  # noqa: E501
        :rtype: str
        """
        return self._activation_date

    @activation_date.setter
    def activation_date(self, activation_date):
        """Sets the activation_date of this MaintainProduct.

        Gets or sets date of Activation.  # noqa: E501

        :param activation_date: The activation_date of this MaintainProduct.  # noqa: E501
        :type: str
        """

        self._activation_date = activation_date

    @property
    def deactivation_date(self):
        """Gets the deactivation_date of this MaintainProduct.  # noqa: E501

        Gets or sets date of Deactivation.  # noqa: E501

        :return: The deactivation_date of this MaintainProduct.  # noqa: E501
        :rtype: str
        """
        return self._deactivation_date

    @deactivation_date.setter
    def deactivation_date(self, deactivation_date):
        """Sets the deactivation_date of this MaintainProduct.

        Gets or sets date of Deactivation.  # noqa: E501

        :param deactivation_date: The deactivation_date of this MaintainProduct.  # noqa: E501
        :type: str
        """

        self._deactivation_date = deactivation_date

    @property
    def auto_retry(self):
        """Gets the auto_retry of this MaintainProduct.  # noqa: E501

        Gets or sets a value indicating whether [automatic retry].  # noqa: E501

        :return: The auto_retry of this MaintainProduct.  # noqa: E501
        :rtype: bool
        """
        return self._auto_retry

    @auto_retry.setter
    def auto_retry(self, auto_retry):
        """Sets the auto_retry of this MaintainProduct.

        Gets or sets a value indicating whether [automatic retry].  # noqa: E501

        :param auto_retry: The auto_retry of this MaintainProduct.  # noqa: E501
        :type: bool
        """

        self._auto_retry = auto_retry

    @property
    def device_reprocess(self):
        """Gets the device_reprocess of this MaintainProduct.  # noqa: E501

        Gets or sets a value indicating whether device reprocess for this product is applicable or not.  # noqa: E501

        :return: The device_reprocess of this MaintainProduct.  # noqa: E501
        :rtype: bool
        """
        return self._device_reprocess

    @device_reprocess.setter
    def device_reprocess(self, device_reprocess):
        """Sets the device_reprocess of this MaintainProduct.

        Gets or sets a value indicating whether device reprocess for this product is applicable or not.  # noqa: E501

        :param device_reprocess: The device_reprocess of this MaintainProduct.  # noqa: E501
        :type: bool
        """

        self._device_reprocess = device_reprocess

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this MaintainProduct.  # noqa: E501

        Gets or sets deployment Mode (Possible Values are RelayServerWithDeviceServicesBackup, RelayServerOnly).  # noqa: E501

        :return: The deployment_mode of this MaintainProduct.  # noqa: E501
        :rtype: int
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this MaintainProduct.

        Gets or sets deployment Mode (Possible Values are RelayServerWithDeviceServicesBackup, RelayServerOnly).  # noqa: E501

        :param deployment_mode: The deployment_mode of this MaintainProduct.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                deployment_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    @property
    def dependencies(self):
        """Gets the dependencies of this MaintainProduct.  # noqa: E501

        Gets the list of products in which the given product is dependent on.  # noqa: E501

        :return: The dependencies of this MaintainProduct.  # noqa: E501
        :rtype: list[DevicePolicyDependencyEntity]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this MaintainProduct.

        Gets the list of products in which the given product is dependent on.  # noqa: E501

        :param dependencies: The dependencies of this MaintainProduct.  # noqa: E501
        :type: list[DevicePolicyDependencyEntity]
        """

        self._dependencies = dependencies

    @property
    def down_load_conditions(self):
        """Gets the down_load_conditions of this MaintainProduct.  # noqa: E501

        Gets or sets list of conditions for download.  # noqa: E501

        :return: The down_load_conditions of this MaintainProduct.  # noqa: E501
        :rtype: list[MaintainProductCondition]
        """
        return self._down_load_conditions

    @down_load_conditions.setter
    def down_load_conditions(self, down_load_conditions):
        """Sets the down_load_conditions of this MaintainProduct.

        Gets or sets list of conditions for download.  # noqa: E501

        :param down_load_conditions: The down_load_conditions of this MaintainProduct.  # noqa: E501
        :type: list[MaintainProductCondition]
        """

        self._down_load_conditions = down_load_conditions

    @property
    def install_conditions(self):
        """Gets the install_conditions of this MaintainProduct.  # noqa: E501

        Gets or sets list of conditions for install.  # noqa: E501

        :return: The install_conditions of this MaintainProduct.  # noqa: E501
        :rtype: list[MaintainProductCondition]
        """
        return self._install_conditions

    @install_conditions.setter
    def install_conditions(self, install_conditions):
        """Sets the install_conditions of this MaintainProduct.

        Gets or sets list of conditions for install.  # noqa: E501

        :param install_conditions: The install_conditions of this MaintainProduct.  # noqa: E501
        :type: list[MaintainProductCondition]
        """

        self._install_conditions = install_conditions

    @property
    def smart_groups(self):
        """Gets the smart_groups of this MaintainProduct.  # noqa: E501

        Gets or sets details of the Smart Group to which Product belong.  # noqa: E501

        :return: The smart_groups of this MaintainProduct.  # noqa: E501
        :rtype: list[MaintainProductSmartGroup]
        """
        return self._smart_groups

    @smart_groups.setter
    def smart_groups(self, smart_groups):
        """Sets the smart_groups of this MaintainProduct.

        Gets or sets details of the Smart Group to which Product belong.  # noqa: E501

        :param smart_groups: The smart_groups of this MaintainProduct.  # noqa: E501
        :type: list[MaintainProductSmartGroup]
        """

        self._smart_groups = smart_groups

    @property
    def steps(self):
        """Gets the steps of this MaintainProduct.  # noqa: E501

        Gets or sets steps details of the product.  # noqa: E501

        :return: The steps of this MaintainProduct.  # noqa: E501
        :rtype: list[MaintainProductStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this MaintainProduct.

        Gets or sets steps details of the product.  # noqa: E501

        :param steps: The steps of this MaintainProduct.  # noqa: E501
        :type: list[MaintainProductStep]
        """

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintainProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintainProduct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MaintainProduct):
            return True

        return self.to_dict() != other.to_dict()
