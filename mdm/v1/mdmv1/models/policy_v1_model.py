# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class PolicyV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'oem_vendor': 'int',
        'update_source': 'int',
        'general_configuration': 'PolicyGeneralConfigurationV1Model',
        'schedule': 'PolicyScheduleV1Model'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'oem_vendor': 'oem_vendor',
        'update_source': 'update_source',
        'general_configuration': 'general_configuration',
        'schedule': 'schedule'
    }

    def __init__(self, name=None, description=None, oem_vendor=None, update_source=None, general_configuration=None, schedule=None, _configuration=None):  # noqa: E501
        """PolicyV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._oem_vendor = None
        self._update_source = None
        self._general_configuration = None
        self._schedule = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if oem_vendor is not None:
            self.oem_vendor = oem_vendor
        if update_source is not None:
            self.update_source = update_source
        if general_configuration is not None:
            self.general_configuration = general_configuration
        if schedule is not None:
            self.schedule = schedule

    @property
    def name(self):
        """Gets the name of this PolicyV1Model.  # noqa: E501

        The name of the policy (upto 100 characters).  # noqa: E501

        :return: The name of this PolicyV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyV1Model.

        The name of the policy (upto 100 characters).  # noqa: E501

        :param name: The name of this PolicyV1Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PolicyV1Model.  # noqa: E501

        The policy description.  # noqa: E501

        :return: The description of this PolicyV1Model.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyV1Model.

        The policy description.  # noqa: E501

        :param description: The description of this PolicyV1Model.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def oem_vendor(self):
        """Gets the oem_vendor of this PolicyV1Model.  # noqa: E501

        The device vendor.  # noqa: E501

        :return: The oem_vendor of this PolicyV1Model.  # noqa: E501
        :rtype: int
        """
        return self._oem_vendor

    @oem_vendor.setter
    def oem_vendor(self, oem_vendor):
        """Sets the oem_vendor of this PolicyV1Model.

        The device vendor.  # noqa: E501

        :param oem_vendor: The oem_vendor of this PolicyV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [1]  # noqa: E501
        if (self._configuration.client_side_validation and
                oem_vendor not in allowed_values):
            raise ValueError(
                "Invalid value for `oem_vendor` ({0}), must be one of {1}"  # noqa: E501
                .format(oem_vendor, allowed_values)
            )

        self._oem_vendor = oem_vendor

    @property
    def update_source(self):
        """Gets the update_source of this PolicyV1Model.  # noqa: E501

        The source of the update.  # noqa: E501

        :return: The update_source of this PolicyV1Model.  # noqa: E501
        :rtype: int
        """
        return self._update_source

    @update_source.setter
    def update_source(self, update_source):
        """Sets the update_source of this PolicyV1Model.

        The source of the update.  # noqa: E501

        :param update_source: The update_source of this PolicyV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [1]  # noqa: E501
        if (self._configuration.client_side_validation and
                update_source not in allowed_values):
            raise ValueError(
                "Invalid value for `update_source` ({0}), must be one of {1}"  # noqa: E501
                .format(update_source, allowed_values)
            )

        self._update_source = update_source

    @property
    def general_configuration(self):
        """Gets the general_configuration of this PolicyV1Model.  # noqa: E501

        The policy general configuration.  # noqa: E501

        :return: The general_configuration of this PolicyV1Model.  # noqa: E501
        :rtype: PolicyGeneralConfigurationV1Model
        """
        return self._general_configuration

    @general_configuration.setter
    def general_configuration(self, general_configuration):
        """Sets the general_configuration of this PolicyV1Model.

        The policy general configuration.  # noqa: E501

        :param general_configuration: The general_configuration of this PolicyV1Model.  # noqa: E501
        :type: PolicyGeneralConfigurationV1Model
        """

        self._general_configuration = general_configuration

    @property
    def schedule(self):
        """Gets the schedule of this PolicyV1Model.  # noqa: E501

        The policy schedule.  # noqa: E501

        :return: The schedule of this PolicyV1Model.  # noqa: E501
        :rtype: PolicyScheduleV1Model
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this PolicyV1Model.

        The policy schedule.  # noqa: E501

        :param schedule: The schedule of this PolicyV1Model.  # noqa: E501
        :type: PolicyScheduleV1Model
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicyV1Model):
            return True

        return self.to_dict() != other.to_dict()
