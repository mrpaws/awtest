# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ProtectorInformationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_protector_id': 'str',
        'key_protector_type': 'int',
        'recovery_key': 'str'
    }

    attribute_map = {
        'key_protector_id': 'key_protector_id',
        'key_protector_type': 'key_protector_type',
        'recovery_key': 'recovery_key'
    }

    def __init__(self, key_protector_id=None, key_protector_type=None, recovery_key=None, _configuration=None):  # noqa: E501
        """ProtectorInformationModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key_protector_id = None
        self._key_protector_type = None
        self._recovery_key = None
        self.discriminator = None

        if key_protector_id is not None:
            self.key_protector_id = key_protector_id
        if key_protector_type is not None:
            self.key_protector_type = key_protector_type
        if recovery_key is not None:
            self.recovery_key = recovery_key

    @property
    def key_protector_id(self):
        """Gets the key_protector_id of this ProtectorInformationModel.  # noqa: E501

        Gets or sets the Key Protector Id.  # noqa: E501

        :return: The key_protector_id of this ProtectorInformationModel.  # noqa: E501
        :rtype: str
        """
        return self._key_protector_id

    @key_protector_id.setter
    def key_protector_id(self, key_protector_id):
        """Sets the key_protector_id of this ProtectorInformationModel.

        Gets or sets the Key Protector Id.  # noqa: E501

        :param key_protector_id: The key_protector_id of this ProtectorInformationModel.  # noqa: E501
        :type: str
        """

        self._key_protector_id = key_protector_id

    @property
    def key_protector_type(self):
        """Gets the key_protector_type of this ProtectorInformationModel.  # noqa: E501

        Gets or sets the Key Protector Type.  # noqa: E501

        :return: The key_protector_type of this ProtectorInformationModel.  # noqa: E501
        :rtype: int
        """
        return self._key_protector_type

    @key_protector_type.setter
    def key_protector_type(self, key_protector_type):
        """Sets the key_protector_type of this ProtectorInformationModel.

        Gets or sets the Key Protector Type.  # noqa: E501

        :param key_protector_type: The key_protector_type of this ProtectorInformationModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                key_protector_type not in allowed_values):
            raise ValueError(
                "Invalid value for `key_protector_type` ({0}), must be one of {1}"  # noqa: E501
                .format(key_protector_type, allowed_values)
            )

        self._key_protector_type = key_protector_type

    @property
    def recovery_key(self):
        """Gets the recovery_key of this ProtectorInformationModel.  # noqa: E501

        Gets or sets the Recovery Key.  # noqa: E501

        :return: The recovery_key of this ProtectorInformationModel.  # noqa: E501
        :rtype: str
        """
        return self._recovery_key

    @recovery_key.setter
    def recovery_key(self, recovery_key):
        """Sets the recovery_key of this ProtectorInformationModel.

        Gets or sets the Recovery Key.  # noqa: E501

        :param recovery_key: The recovery_key of this ProtectorInformationModel.  # noqa: E501
        :type: str
        """

        self._recovery_key = recovery_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProtectorInformationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectorInformationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProtectorInformationModel):
            return True

        return self.to_dict() != other.to_dict()
