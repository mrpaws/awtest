# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class DeviceWipeResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_wipes': 'list[DeviceWipeModel]',
        'page': 'int',
        'page_size': 'int',
        'total_count': 'int'
    }

    attribute_map = {
        'device_wipes': 'device_wipes',
        'page': 'page',
        'page_size': 'page_size',
        'total_count': 'total_count'
    }

    def __init__(self, device_wipes=None, page=None, page_size=None, total_count=None, _configuration=None):  # noqa: E501
        """DeviceWipeResponseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_wipes = None
        self._page = None
        self._page_size = None
        self._total_count = None
        self.discriminator = None

        self.device_wipes = device_wipes
        self.page = page
        self.page_size = page_size
        self.total_count = total_count

    @property
    def device_wipes(self):
        """Gets the device_wipes of this DeviceWipeResponseModel.  # noqa: E501

        Model containing list of device wipe.  # noqa: E501

        :return: The device_wipes of this DeviceWipeResponseModel.  # noqa: E501
        :rtype: list[DeviceWipeModel]
        """
        return self._device_wipes

    @device_wipes.setter
    def device_wipes(self, device_wipes):
        """Sets the device_wipes of this DeviceWipeResponseModel.

        Model containing list of device wipe.  # noqa: E501

        :param device_wipes: The device_wipes of this DeviceWipeResponseModel.  # noqa: E501
        :type: list[DeviceWipeModel]
        """
        if self._configuration.client_side_validation and device_wipes is None:
            raise ValueError("Invalid value for `device_wipes`, must not be `None`")  # noqa: E501

        self._device_wipes = device_wipes

    @property
    def page(self):
        """Gets the page of this DeviceWipeResponseModel.  # noqa: E501

        The page number of the paginated results.  # noqa: E501

        :return: The page of this DeviceWipeResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this DeviceWipeResponseModel.

        The page number of the paginated results.  # noqa: E501

        :param page: The page of this DeviceWipeResponseModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this DeviceWipeResponseModel.  # noqa: E501

        The page size for the paginated results.  # noqa: E501

        :return: The page_size of this DeviceWipeResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this DeviceWipeResponseModel.

        The page size for the paginated results.  # noqa: E501

        :param page_size: The page_size of this DeviceWipeResponseModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def total_count(self):
        """Gets the total_count of this DeviceWipeResponseModel.  # noqa: E501

        The total number of records in the search results.  # noqa: E501

        :return: The total_count of this DeviceWipeResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this DeviceWipeResponseModel.

        The total number of records in the search results.  # noqa: E501

        :param total_count: The total_count of this DeviceWipeResponseModel.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceWipeResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceWipeResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceWipeResponseModel):
            return True

        return self.to_dict() != other.to_dict()
