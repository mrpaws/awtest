# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class WorkflowResponseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_uuid': 'str',
        'organization_group_uuid': 'str',
        'name': 'str',
        'description': 'str',
        'payload': 'WorkflowPayloadModel',
        'created_on': 'datetime',
        'created_by': 'str',
        'modified_on': 'datetime',
        'modified_by': 'str',
        'version': 'str',
        'device_type': 'int',
        'type': 'str',
        'structured_payload_version': 'int',
        'catalog_display': 'CatalogDisplayInfo',
        'implicit_workflow': 'bool',
        'published_on': 'datetime',
        'workflow_entities': 'list[WorkflowEntityTypeMap]',
        'change_log_description': 'str',
        'version_id': 'int'
    }

    attribute_map = {
        'workflow_uuid': 'workflow_uuid',
        'organization_group_uuid': 'organization_group_uuid',
        'name': 'name',
        'description': 'description',
        'payload': 'payload',
        'created_on': 'created_on',
        'created_by': 'created_by',
        'modified_on': 'modified_on',
        'modified_by': 'modified_by',
        'version': 'version',
        'device_type': 'device_type',
        'type': 'type',
        'structured_payload_version': 'structured_payload_version',
        'catalog_display': 'catalog_display',
        'implicit_workflow': 'implicit_workflow',
        'published_on': 'published_on',
        'workflow_entities': 'workflow_entities',
        'change_log_description': 'change_log_description',
        'version_id': 'version_id'
    }

    def __init__(self, workflow_uuid=None, organization_group_uuid=None, name=None, description=None, payload=None, created_on=None, created_by=None, modified_on=None, modified_by=None, version=None, device_type=None, type=None, structured_payload_version=None, catalog_display=None, implicit_workflow=None, published_on=None, workflow_entities=None, change_log_description=None, version_id=None, _configuration=None):  # noqa: E501
        """WorkflowResponseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._workflow_uuid = None
        self._organization_group_uuid = None
        self._name = None
        self._description = None
        self._payload = None
        self._created_on = None
        self._created_by = None
        self._modified_on = None
        self._modified_by = None
        self._version = None
        self._device_type = None
        self._type = None
        self._structured_payload_version = None
        self._catalog_display = None
        self._implicit_workflow = None
        self._published_on = None
        self._workflow_entities = None
        self._change_log_description = None
        self._version_id = None
        self.discriminator = None

        if workflow_uuid is not None:
            self.workflow_uuid = workflow_uuid
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if payload is not None:
            self.payload = payload
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if modified_on is not None:
            self.modified_on = modified_on
        if modified_by is not None:
            self.modified_by = modified_by
        if version is not None:
            self.version = version
        if device_type is not None:
            self.device_type = device_type
        if type is not None:
            self.type = type
        if structured_payload_version is not None:
            self.structured_payload_version = structured_payload_version
        if catalog_display is not None:
            self.catalog_display = catalog_display
        if implicit_workflow is not None:
            self.implicit_workflow = implicit_workflow
        if published_on is not None:
            self.published_on = published_on
        if workflow_entities is not None:
            self.workflow_entities = workflow_entities
        if change_log_description is not None:
            self.change_log_description = change_log_description
        if version_id is not None:
            self.version_id = version_id

    @property
    def workflow_uuid(self):
        """Gets the workflow_uuid of this WorkflowResponseV1Model.  # noqa: E501


        :return: The workflow_uuid of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._workflow_uuid

    @workflow_uuid.setter
    def workflow_uuid(self, workflow_uuid):
        """Sets the workflow_uuid of this WorkflowResponseV1Model.


        :param workflow_uuid: The workflow_uuid of this WorkflowResponseV1Model.  # noqa: E501
        :type: str
        """

        self._workflow_uuid = workflow_uuid

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this WorkflowResponseV1Model.  # noqa: E501


        :return: The organization_group_uuid of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this WorkflowResponseV1Model.


        :param organization_group_uuid: The organization_group_uuid of this WorkflowResponseV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def name(self):
        """Gets the name of this WorkflowResponseV1Model.  # noqa: E501


        :return: The name of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowResponseV1Model.


        :param name: The name of this WorkflowResponseV1Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this WorkflowResponseV1Model.  # noqa: E501


        :return: The description of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowResponseV1Model.


        :param description: The description of this WorkflowResponseV1Model.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def payload(self):
        """Gets the payload of this WorkflowResponseV1Model.  # noqa: E501


        :return: The payload of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: WorkflowPayloadModel
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this WorkflowResponseV1Model.


        :param payload: The payload of this WorkflowResponseV1Model.  # noqa: E501
        :type: WorkflowPayloadModel
        """

        self._payload = payload

    @property
    def created_on(self):
        """Gets the created_on of this WorkflowResponseV1Model.  # noqa: E501


        :return: The created_on of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this WorkflowResponseV1Model.


        :param created_on: The created_on of this WorkflowResponseV1Model.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this WorkflowResponseV1Model.  # noqa: E501


        :return: The created_by of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WorkflowResponseV1Model.


        :param created_by: The created_by of this WorkflowResponseV1Model.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified_on(self):
        """Gets the modified_on of this WorkflowResponseV1Model.  # noqa: E501


        :return: The modified_on of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this WorkflowResponseV1Model.


        :param modified_on: The modified_on of this WorkflowResponseV1Model.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def modified_by(self):
        """Gets the modified_by of this WorkflowResponseV1Model.  # noqa: E501


        :return: The modified_by of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this WorkflowResponseV1Model.


        :param modified_by: The modified_by of this WorkflowResponseV1Model.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def version(self):
        """Gets the version of this WorkflowResponseV1Model.  # noqa: E501


        :return: The version of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkflowResponseV1Model.


        :param version: The version of this WorkflowResponseV1Model.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def device_type(self):
        """Gets the device_type of this WorkflowResponseV1Model.  # noqa: E501


        :return: The device_type of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this WorkflowResponseV1Model.


        :param device_type: The device_type of this WorkflowResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 100, 101, 102, 103, 104, 105, 200, 201]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_type not in allowed_values):
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def type(self):
        """Gets the type of this WorkflowResponseV1Model.  # noqa: E501


        :return: The type of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WorkflowResponseV1Model.


        :param type: The type of this WorkflowResponseV1Model.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def structured_payload_version(self):
        """Gets the structured_payload_version of this WorkflowResponseV1Model.  # noqa: E501


        :return: The structured_payload_version of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._structured_payload_version

    @structured_payload_version.setter
    def structured_payload_version(self, structured_payload_version):
        """Sets the structured_payload_version of this WorkflowResponseV1Model.


        :param structured_payload_version: The structured_payload_version of this WorkflowResponseV1Model.  # noqa: E501
        :type: int
        """

        self._structured_payload_version = structured_payload_version

    @property
    def catalog_display(self):
        """Gets the catalog_display of this WorkflowResponseV1Model.  # noqa: E501


        :return: The catalog_display of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: CatalogDisplayInfo
        """
        return self._catalog_display

    @catalog_display.setter
    def catalog_display(self, catalog_display):
        """Sets the catalog_display of this WorkflowResponseV1Model.


        :param catalog_display: The catalog_display of this WorkflowResponseV1Model.  # noqa: E501
        :type: CatalogDisplayInfo
        """

        self._catalog_display = catalog_display

    @property
    def implicit_workflow(self):
        """Gets the implicit_workflow of this WorkflowResponseV1Model.  # noqa: E501


        :return: The implicit_workflow of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._implicit_workflow

    @implicit_workflow.setter
    def implicit_workflow(self, implicit_workflow):
        """Sets the implicit_workflow of this WorkflowResponseV1Model.


        :param implicit_workflow: The implicit_workflow of this WorkflowResponseV1Model.  # noqa: E501
        :type: bool
        """

        self._implicit_workflow = implicit_workflow

    @property
    def published_on(self):
        """Gets the published_on of this WorkflowResponseV1Model.  # noqa: E501


        :return: The published_on of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._published_on

    @published_on.setter
    def published_on(self, published_on):
        """Sets the published_on of this WorkflowResponseV1Model.


        :param published_on: The published_on of this WorkflowResponseV1Model.  # noqa: E501
        :type: datetime
        """

        self._published_on = published_on

    @property
    def workflow_entities(self):
        """Gets the workflow_entities of this WorkflowResponseV1Model.  # noqa: E501


        :return: The workflow_entities of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: list[WorkflowEntityTypeMap]
        """
        return self._workflow_entities

    @workflow_entities.setter
    def workflow_entities(self, workflow_entities):
        """Sets the workflow_entities of this WorkflowResponseV1Model.


        :param workflow_entities: The workflow_entities of this WorkflowResponseV1Model.  # noqa: E501
        :type: list[WorkflowEntityTypeMap]
        """

        self._workflow_entities = workflow_entities

    @property
    def change_log_description(self):
        """Gets the change_log_description of this WorkflowResponseV1Model.  # noqa: E501


        :return: The change_log_description of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._change_log_description

    @change_log_description.setter
    def change_log_description(self, change_log_description):
        """Sets the change_log_description of this WorkflowResponseV1Model.


        :param change_log_description: The change_log_description of this WorkflowResponseV1Model.  # noqa: E501
        :type: str
        """

        self._change_log_description = change_log_description

    @property
    def version_id(self):
        """Gets the version_id of this WorkflowResponseV1Model.  # noqa: E501


        :return: The version_id of this WorkflowResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this WorkflowResponseV1Model.


        :param version_id: The version_id of this WorkflowResponseV1Model.  # noqa: E501
        :type: int
        """

        self._version_id = version_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowResponseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowResponseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowResponseV1Model):
            return True

        return self.to_dict() != other.to_dict()
