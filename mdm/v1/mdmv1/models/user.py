# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_name': 'str',
        'password': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'status': 'bool',
        'email': 'str',
        'security_type': 'int',
        'contact_number': 'str',
        'display_name': 'str',
        'mobile_number': 'str',
        'message_type': 'int',
        'email_user_name': 'str',
        'group': 'str',
        'location_group_id': 'str',
        'organization_group_uuid': 'str',
        'role': 'str',
        'enrolled_devices_count': 'str',
        'message_template_id': 'str',
        'custom_attribute1': 'str',
        'custom_attribute2': 'str',
        'custom_attribute3': 'str',
        'custom_attribute4': 'str',
        'custom_attribute5': 'str',
        'external_id': 'str',
        'staging_mode': 'int',
        'device_staging_enabled': 'bool',
        'device_staging_type': 'int',
        'provisioning_sku': 'int',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'user_name': 'UserName',
        'password': 'Password',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'status': 'Status',
        'email': 'Email',
        'security_type': 'SecurityType',
        'contact_number': 'ContactNumber',
        'display_name': 'DisplayName',
        'mobile_number': 'MobileNumber',
        'message_type': 'MessageType',
        'email_user_name': 'EmailUserName',
        'group': 'Group',
        'location_group_id': 'LocationGroupId',
        'organization_group_uuid': 'OrganizationGroupUuid',
        'role': 'Role',
        'enrolled_devices_count': 'EnrolledDevicesCount',
        'message_template_id': 'MessageTemplateId',
        'custom_attribute1': 'CustomAttribute1',
        'custom_attribute2': 'CustomAttribute2',
        'custom_attribute3': 'CustomAttribute3',
        'custom_attribute4': 'CustomAttribute4',
        'custom_attribute5': 'CustomAttribute5',
        'external_id': 'ExternalId',
        'staging_mode': 'StagingMode',
        'device_staging_enabled': 'DeviceStagingEnabled',
        'device_staging_type': 'DeviceStagingType',
        'provisioning_sku': 'ProvisioningSku',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, user_name=None, password=None, first_name=None, last_name=None, status=None, email=None, security_type=None, contact_number=None, display_name=None, mobile_number=None, message_type=None, email_user_name=None, group=None, location_group_id=None, organization_group_uuid=None, role=None, enrolled_devices_count=None, message_template_id=None, custom_attribute1=None, custom_attribute2=None, custom_attribute3=None, custom_attribute4=None, custom_attribute5=None, external_id=None, staging_mode=None, device_staging_enabled=None, device_staging_type=None, provisioning_sku=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_name = None
        self._password = None
        self._first_name = None
        self._last_name = None
        self._status = None
        self._email = None
        self._security_type = None
        self._contact_number = None
        self._display_name = None
        self._mobile_number = None
        self._message_type = None
        self._email_user_name = None
        self._group = None
        self._location_group_id = None
        self._organization_group_uuid = None
        self._role = None
        self._enrolled_devices_count = None
        self._message_template_id = None
        self._custom_attribute1 = None
        self._custom_attribute2 = None
        self._custom_attribute3 = None
        self._custom_attribute4 = None
        self._custom_attribute5 = None
        self._external_id = None
        self._staging_mode = None
        self._device_staging_enabled = None
        self._device_staging_type = None
        self._provisioning_sku = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if user_name is not None:
            self.user_name = user_name
        if password is not None:
            self.password = password
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if status is not None:
            self.status = status
        if email is not None:
            self.email = email
        if security_type is not None:
            self.security_type = security_type
        if contact_number is not None:
            self.contact_number = contact_number
        if display_name is not None:
            self.display_name = display_name
        if mobile_number is not None:
            self.mobile_number = mobile_number
        if message_type is not None:
            self.message_type = message_type
        if email_user_name is not None:
            self.email_user_name = email_user_name
        if group is not None:
            self.group = group
        if location_group_id is not None:
            self.location_group_id = location_group_id
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if role is not None:
            self.role = role
        if enrolled_devices_count is not None:
            self.enrolled_devices_count = enrolled_devices_count
        if message_template_id is not None:
            self.message_template_id = message_template_id
        if custom_attribute1 is not None:
            self.custom_attribute1 = custom_attribute1
        if custom_attribute2 is not None:
            self.custom_attribute2 = custom_attribute2
        if custom_attribute3 is not None:
            self.custom_attribute3 = custom_attribute3
        if custom_attribute4 is not None:
            self.custom_attribute4 = custom_attribute4
        if custom_attribute5 is not None:
            self.custom_attribute5 = custom_attribute5
        if external_id is not None:
            self.external_id = external_id
        if staging_mode is not None:
            self.staging_mode = staging_mode
        if device_staging_enabled is not None:
            self.device_staging_enabled = device_staging_enabled
        if device_staging_type is not None:
            self.device_staging_type = device_staging_type
        if provisioning_sku is not None:
            self.provisioning_sku = provisioning_sku
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def user_name(self):
        """Gets the user_name of this User.  # noqa: E501

        Gets or sets the enrollment user username.  # noqa: E501

        :return: The user_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.

        Gets or sets the enrollment user username.  # noqa: E501

        :param user_name: The user_name of this User.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501

        Gets or sets the enrollment user password.  # noqa: E501

        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.

        Gets or sets the enrollment user password.  # noqa: E501

        :param password: The password of this User.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        Gets or sets the enrollment user first name.  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        Gets or sets the enrollment user first name.  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        Gets or sets the enrollment user last name.  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Gets or sets the enrollment user last name.  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501

        Gets or sets a value indicating whether the enrollment user status, true for active, false for inactive.  # noqa: E501

        :return: The status of this User.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        Gets or sets a value indicating whether the enrollment user status, true for active, false for inactive.  # noqa: E501

        :param status: The status of this User.  # noqa: E501
        :type: bool
        """

        self._status = status

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        Gets or sets the enrollment user email address.  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Gets or sets the enrollment user email address.  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def security_type(self):
        """Gets the security_type of this User.  # noqa: E501

        Gets or sets the enrollment user security type. Values can be: uninitialized, directory, basic, authenticationProxy, saml.  # noqa: E501

        :return: The security_type of this User.  # noqa: E501
        :rtype: int
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this User.

        Gets or sets the enrollment user security type. Values can be: uninitialized, directory, basic, authenticationProxy, saml.  # noqa: E501

        :param security_type: The security_type of this User.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5]  # noqa: E501
        if (self._configuration.client_side_validation and
                security_type not in allowed_values):
            raise ValueError(
                "Invalid value for `security_type` ({0}), must be one of {1}"  # noqa: E501
                .format(security_type, allowed_values)
            )

        self._security_type = security_type

    @property
    def contact_number(self):
        """Gets the contact_number of this User.  # noqa: E501

        Gets or sets the enrollment user contact number.  # noqa: E501

        :return: The contact_number of this User.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this User.

        Gets or sets the enrollment user contact number.  # noqa: E501

        :param contact_number: The contact_number of this User.  # noqa: E501
        :type: str
        """

        self._contact_number = contact_number

    @property
    def display_name(self):
        """Gets the display_name of this User.  # noqa: E501

        Gets or sets the enrollment user display name.  # noqa: E501

        :return: The display_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        Gets or sets the enrollment user display name.  # noqa: E501

        :param display_name: The display_name of this User.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def mobile_number(self):
        """Gets the mobile_number of this User.  # noqa: E501

        Gets or sets the enrollment user mobile number.  # noqa: E501

        :return: The mobile_number of this User.  # noqa: E501
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number):
        """Sets the mobile_number of this User.

        Gets or sets the enrollment user mobile number.  # noqa: E501

        :param mobile_number: The mobile_number of this User.  # noqa: E501
        :type: str
        """

        self._mobile_number = mobile_number

    @property
    def message_type(self):
        """Gets the message_type of this User.  # noqa: E501

        Gets or sets the enrollment user message type. Values can be: Email, SMS, QrCode.  # noqa: E501

        :return: The message_type of this User.  # noqa: E501
        :rtype: int
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this User.

        Gets or sets the enrollment user message type. Values can be: Email, SMS, QrCode.  # noqa: E501

        :param message_type: The message_type of this User.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, -1]  # noqa: E501
        if (self._configuration.client_side_validation and
                message_type not in allowed_values):
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def email_user_name(self):
        """Gets the email_user_name of this User.  # noqa: E501

        Gets or sets the enrollment user email username.  # noqa: E501

        :return: The email_user_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._email_user_name

    @email_user_name.setter
    def email_user_name(self, email_user_name):
        """Sets the email_user_name of this User.

        Gets or sets the enrollment user email username.  # noqa: E501

        :param email_user_name: The email_user_name of this User.  # noqa: E501
        :type: str
        """

        self._email_user_name = email_user_name

    @property
    def group(self):
        """Gets the group of this User.  # noqa: E501

        Gets or sets the enrollment user organization group name.  # noqa: E501

        :return: The group of this User.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this User.

        Gets or sets the enrollment user organization group name.  # noqa: E501

        :param group: The group of this User.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def location_group_id(self):
        """Gets the location_group_id of this User.  # noqa: E501

        Gets or sets the enrollment user organization group id.  # noqa: E501

        :return: The location_group_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this User.

        Gets or sets the enrollment user organization group id.  # noqa: E501

        :param location_group_id: The location_group_id of this User.  # noqa: E501
        :type: str
        """

        self._location_group_id = location_group_id

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this User.  # noqa: E501

        Gets or sets the enrollment user organization group uuid.  # noqa: E501

        :return: The organization_group_uuid of this User.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this User.

        Gets or sets the enrollment user organization group uuid.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this User.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def role(self):
        """Gets the role of this User.  # noqa: E501

        Gets or sets the enrollment user role name.  # noqa: E501

        :return: The role of this User.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.

        Gets or sets the enrollment user role name.  # noqa: E501

        :param role: The role of this User.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def enrolled_devices_count(self):
        """Gets the enrolled_devices_count of this User.  # noqa: E501

        Gets or sets the enrollment user enrolled device count.  # noqa: E501

        :return: The enrolled_devices_count of this User.  # noqa: E501
        :rtype: str
        """
        return self._enrolled_devices_count

    @enrolled_devices_count.setter
    def enrolled_devices_count(self, enrolled_devices_count):
        """Sets the enrolled_devices_count of this User.

        Gets or sets the enrollment user enrolled device count.  # noqa: E501

        :param enrolled_devices_count: The enrolled_devices_count of this User.  # noqa: E501
        :type: str
        """

        self._enrolled_devices_count = enrolled_devices_count

    @property
    def message_template_id(self):
        """Gets the message_template_id of this User.  # noqa: E501

        Gets or sets the enrollment user message template id.  # noqa: E501

        :return: The message_template_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._message_template_id

    @message_template_id.setter
    def message_template_id(self, message_template_id):
        """Sets the message_template_id of this User.

        Gets or sets the enrollment user message template id.  # noqa: E501

        :param message_template_id: The message_template_id of this User.  # noqa: E501
        :type: str
        """

        self._message_template_id = message_template_id

    @property
    def custom_attribute1(self):
        """Gets the custom_attribute1 of this User.  # noqa: E501

        Gets or sets the enrollment user custom attribute 1.  # noqa: E501

        :return: The custom_attribute1 of this User.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute1

    @custom_attribute1.setter
    def custom_attribute1(self, custom_attribute1):
        """Sets the custom_attribute1 of this User.

        Gets or sets the enrollment user custom attribute 1.  # noqa: E501

        :param custom_attribute1: The custom_attribute1 of this User.  # noqa: E501
        :type: str
        """

        self._custom_attribute1 = custom_attribute1

    @property
    def custom_attribute2(self):
        """Gets the custom_attribute2 of this User.  # noqa: E501

        Gets or sets the enrollment user custom attribute 2.  # noqa: E501

        :return: The custom_attribute2 of this User.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute2

    @custom_attribute2.setter
    def custom_attribute2(self, custom_attribute2):
        """Sets the custom_attribute2 of this User.

        Gets or sets the enrollment user custom attribute 2.  # noqa: E501

        :param custom_attribute2: The custom_attribute2 of this User.  # noqa: E501
        :type: str
        """

        self._custom_attribute2 = custom_attribute2

    @property
    def custom_attribute3(self):
        """Gets the custom_attribute3 of this User.  # noqa: E501

        Gets or sets the enrollment user custom attribute 3.  # noqa: E501

        :return: The custom_attribute3 of this User.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute3

    @custom_attribute3.setter
    def custom_attribute3(self, custom_attribute3):
        """Sets the custom_attribute3 of this User.

        Gets or sets the enrollment user custom attribute 3.  # noqa: E501

        :param custom_attribute3: The custom_attribute3 of this User.  # noqa: E501
        :type: str
        """

        self._custom_attribute3 = custom_attribute3

    @property
    def custom_attribute4(self):
        """Gets the custom_attribute4 of this User.  # noqa: E501

        Gets or sets the enrollment user custom attribute 4.  # noqa: E501

        :return: The custom_attribute4 of this User.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute4

    @custom_attribute4.setter
    def custom_attribute4(self, custom_attribute4):
        """Sets the custom_attribute4 of this User.

        Gets or sets the enrollment user custom attribute 4.  # noqa: E501

        :param custom_attribute4: The custom_attribute4 of this User.  # noqa: E501
        :type: str
        """

        self._custom_attribute4 = custom_attribute4

    @property
    def custom_attribute5(self):
        """Gets the custom_attribute5 of this User.  # noqa: E501

        Gets or sets the enrollment user custom attribute 5.  # noqa: E501

        :return: The custom_attribute5 of this User.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute5

    @custom_attribute5.setter
    def custom_attribute5(self, custom_attribute5):
        """Sets the custom_attribute5 of this User.

        Gets or sets the enrollment user custom attribute 5.  # noqa: E501

        :param custom_attribute5: The custom_attribute5 of this User.  # noqa: E501
        :type: str
        """

        self._custom_attribute5 = custom_attribute5

    @property
    def external_id(self):
        """Gets the external_id of this User.  # noqa: E501

        Gets or sets the enrollment user external id.  # noqa: E501

        :return: The external_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this User.

        Gets or sets the enrollment user external id.  # noqa: E501

        :param external_id: The external_id of this User.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def staging_mode(self):
        """Gets the staging_mode of this User.  # noqa: E501

        Gets or sets is this enrollment user allowed to stage device enrollment. Values can be: StagingDisabled,  SingleKnownUserStaging, SingleUnknownUserStaging, EndUser, MultipleUserStaging, KnownUserMultipleUser, UnknownUserMultipleUser.  # noqa: E501

        :return: The staging_mode of this User.  # noqa: E501
        :rtype: int
        """
        return self._staging_mode

    @staging_mode.setter
    def staging_mode(self, staging_mode):
        """Sets the staging_mode of this User.

        Gets or sets is this enrollment user allowed to stage device enrollment. Values can be: StagingDisabled,  SingleKnownUserStaging, SingleUnknownUserStaging, EndUser, MultipleUserStaging, KnownUserMultipleUser, UnknownUserMultipleUser.  # noqa: E501

        :param staging_mode: The staging_mode of this User.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6]  # noqa: E501
        if (self._configuration.client_side_validation and
                staging_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `staging_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(staging_mode, allowed_values)
            )

        self._staging_mode = staging_mode

    @property
    def device_staging_enabled(self):
        """Gets the device_staging_enabled of this User.  # noqa: E501

        Gets or sets a value indicating whether device Enrollment Staging Enabled.  # noqa: E501

        :return: The device_staging_enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._device_staging_enabled

    @device_staging_enabled.setter
    def device_staging_enabled(self, device_staging_enabled):
        """Sets the device_staging_enabled of this User.

        Gets or sets a value indicating whether device Enrollment Staging Enabled.  # noqa: E501

        :param device_staging_enabled: The device_staging_enabled of this User.  # noqa: E501
        :type: bool
        """

        self._device_staging_enabled = device_staging_enabled

    @property
    def device_staging_type(self):
        """Gets the device_staging_type of this User.  # noqa: E501

        Gets or sets device Staging type. Value can be:StagingDisabled, SingleUserStagingStandard, SingleUserStagingAdvanced , MultipleUserStaging, MultipleUserStagingSingleUserStandard, MultipleUserStagingSingleUserAdvanced.  # noqa: E501

        :return: The device_staging_type of this User.  # noqa: E501
        :rtype: int
        """
        return self._device_staging_type

    @device_staging_type.setter
    def device_staging_type(self, device_staging_type):
        """Sets the device_staging_type of this User.

        Gets or sets device Staging type. Value can be:StagingDisabled, SingleUserStagingStandard, SingleUserStagingAdvanced , MultipleUserStaging, MultipleUserStagingSingleUserStandard, MultipleUserStagingSingleUserAdvanced.  # noqa: E501

        :param device_staging_type: The device_staging_type of this User.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 2, 3, 241, 242, 243]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_staging_type not in allowed_values):
            raise ValueError(
                "Invalid value for `device_staging_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_staging_type, allowed_values)
            )

        self._device_staging_type = device_staging_type

    @property
    def provisioning_sku(self):
        """Gets the provisioning_sku of this User.  # noqa: E501

        Gets or sets provisioning Sku to indicate Persistence or ConnectedProvisioning  Values can be: PERSISTENCE, CONNECTEDPROVISIONING.  # noqa: E501

        :return: The provisioning_sku of this User.  # noqa: E501
        :rtype: int
        """
        return self._provisioning_sku

    @provisioning_sku.setter
    def provisioning_sku(self, provisioning_sku):
        """Sets the provisioning_sku of this User.

        Gets or sets provisioning Sku to indicate Persistence or ConnectedProvisioning  Values can be: PERSISTENCE, CONNECTEDPROVISIONING.  # noqa: E501

        :param provisioning_sku: The provisioning_sku of this User.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                provisioning_sku not in allowed_values):
            raise ValueError(
                "Invalid value for `provisioning_sku` ({0}), must be one of {1}"  # noqa: E501
                .format(provisioning_sku, allowed_values)
            )

        self._provisioning_sku = provisioning_sku

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this User.  # noqa: E501


        :return: The uuid of this User.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this User.


        :param uuid: The uuid of this User.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
