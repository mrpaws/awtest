# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class EnrollmentTokenRequestV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'registration_type': 'str',
        'device_whitelist_record': 'WhitelistDevice',
        'device_blacklist_record': 'BlacklistDevice',
        'device_registration_record': 'RegisterDeviceDetailsV2Model'
    }

    attribute_map = {
        'registration_type': 'registration_type',
        'device_whitelist_record': 'device_whitelist_record',
        'device_blacklist_record': 'device_blacklist_record',
        'device_registration_record': 'device_registration_record'
    }

    def __init__(self, registration_type=None, device_whitelist_record=None, device_blacklist_record=None, device_registration_record=None, _configuration=None):  # noqa: E501
        """EnrollmentTokenRequestV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._registration_type = None
        self._device_whitelist_record = None
        self._device_blacklist_record = None
        self._device_registration_record = None
        self.discriminator = None

        self.registration_type = registration_type
        if device_whitelist_record is not None:
            self.device_whitelist_record = device_whitelist_record
        if device_blacklist_record is not None:
            self.device_blacklist_record = device_blacklist_record
        if device_registration_record is not None:
            self.device_registration_record = device_registration_record

    @property
    def registration_type(self):
        """Gets the registration_type of this EnrollmentTokenRequestV2Model.  # noqa: E501

        Device Registration type  # noqa: E501

        :return: The registration_type of this EnrollmentTokenRequestV2Model.  # noqa: E501
        :rtype: str
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this EnrollmentTokenRequestV2Model.

        Device Registration type  # noqa: E501

        :param registration_type: The registration_type of this EnrollmentTokenRequestV2Model.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and registration_type is None:
            raise ValueError("Invalid value for `registration_type`, must not be `None`")  # noqa: E501
        allowed_values = ["NONE", "WHITELIST", "BLACKLIST", "REGISTER_DEVICE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                registration_type not in allowed_values):
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    @property
    def device_whitelist_record(self):
        """Gets the device_whitelist_record of this EnrollmentTokenRequestV2Model.  # noqa: E501

        Whitelisting a device  # noqa: E501

        :return: The device_whitelist_record of this EnrollmentTokenRequestV2Model.  # noqa: E501
        :rtype: WhitelistDevice
        """
        return self._device_whitelist_record

    @device_whitelist_record.setter
    def device_whitelist_record(self, device_whitelist_record):
        """Sets the device_whitelist_record of this EnrollmentTokenRequestV2Model.

        Whitelisting a device  # noqa: E501

        :param device_whitelist_record: The device_whitelist_record of this EnrollmentTokenRequestV2Model.  # noqa: E501
        :type: WhitelistDevice
        """

        self._device_whitelist_record = device_whitelist_record

    @property
    def device_blacklist_record(self):
        """Gets the device_blacklist_record of this EnrollmentTokenRequestV2Model.  # noqa: E501

        Blacklisting a device  # noqa: E501

        :return: The device_blacklist_record of this EnrollmentTokenRequestV2Model.  # noqa: E501
        :rtype: BlacklistDevice
        """
        return self._device_blacklist_record

    @device_blacklist_record.setter
    def device_blacklist_record(self, device_blacklist_record):
        """Sets the device_blacklist_record of this EnrollmentTokenRequestV2Model.

        Blacklisting a device  # noqa: E501

        :param device_blacklist_record: The device_blacklist_record of this EnrollmentTokenRequestV2Model.  # noqa: E501
        :type: BlacklistDevice
        """

        self._device_blacklist_record = device_blacklist_record

    @property
    def device_registration_record(self):
        """Gets the device_registration_record of this EnrollmentTokenRequestV2Model.  # noqa: E501

        Record for registering a device to a user  # noqa: E501

        :return: The device_registration_record of this EnrollmentTokenRequestV2Model.  # noqa: E501
        :rtype: RegisterDeviceDetailsV2Model
        """
        return self._device_registration_record

    @device_registration_record.setter
    def device_registration_record(self, device_registration_record):
        """Sets the device_registration_record of this EnrollmentTokenRequestV2Model.

        Record for registering a device to a user  # noqa: E501

        :param device_registration_record: The device_registration_record of this EnrollmentTokenRequestV2Model.  # noqa: E501
        :type: RegisterDeviceDetailsV2Model
        """

        self._device_registration_record = device_registration_record

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrollmentTokenRequestV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentTokenRequestV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentTokenRequestV2Model):
            return True

        return self.to_dict() != other.to_dict()
