# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkSamsungPasscodePayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'passcode_content': 'int',
        'min_length': 'int',
        'maximum_repeat_characters': 'str',
        'maximum_length_of_numeric_sequences': 'str',
        'enable_passcode_visibility': 'bool',
        'allow_fingerprint_unlock': 'bool',
        'require_sd_card_encryption': 'bool',
        'require_passcode': 'bool',
        'enable_iris_scanner_authentication': 'bool',
        'enable_face_unlock_authentication': 'bool',
        'enable_overlay': 'bool',
        'image_type': 'int',
        'overlay_type': 'int',
        'primary_image_path': 'int',
        'top_pos': 'int',
        'top_pos_end': 'int',
        'secondary_image_path': 'int',
        'bottom_pos': 'int',
        'bottom_pos_end': 'int',
        'enterprise_name': 'str',
        'enterprise_logo': 'int',
        'enterprise_address': 'str',
        'enterprise_phone': 'str',
        'alpha_level': 'float'
    }

    attribute_map = {
        'passcode_content': 'PasscodeContent',
        'min_length': 'MinLength',
        'maximum_repeat_characters': 'MaximumRepeatCharacters',
        'maximum_length_of_numeric_sequences': 'MaximumLengthOfNumericSequences',
        'enable_passcode_visibility': 'EnablePasscodeVisibility',
        'allow_fingerprint_unlock': 'AllowFingerprintUnlock',
        'require_sd_card_encryption': 'RequireSDCardEncryption',
        'require_passcode': 'RequirePasscode',
        'enable_iris_scanner_authentication': 'EnableIrisScannerAuthentication',
        'enable_face_unlock_authentication': 'EnableFaceUnlockAuthentication',
        'enable_overlay': 'EnableOverlay',
        'image_type': 'ImageType',
        'overlay_type': 'OverlayType',
        'primary_image_path': 'PrimaryImagePath',
        'top_pos': 'TopPos',
        'top_pos_end': 'TopPosEnd',
        'secondary_image_path': 'SecondaryImagePath',
        'bottom_pos': 'BottomPos',
        'bottom_pos_end': 'BottomPosEnd',
        'enterprise_name': 'EnterpriseName',
        'enterprise_logo': 'EnterpriseLogo',
        'enterprise_address': 'EnterpriseAddress',
        'enterprise_phone': 'EnterprisePhone',
        'alpha_level': 'AlphaLevel'
    }

    def __init__(self, passcode_content=None, min_length=None, maximum_repeat_characters=None, maximum_length_of_numeric_sequences=None, enable_passcode_visibility=None, allow_fingerprint_unlock=None, require_sd_card_encryption=None, require_passcode=None, enable_iris_scanner_authentication=None, enable_face_unlock_authentication=None, enable_overlay=None, image_type=None, overlay_type=None, primary_image_path=None, top_pos=None, top_pos_end=None, secondary_image_path=None, bottom_pos=None, bottom_pos_end=None, enterprise_name=None, enterprise_logo=None, enterprise_address=None, enterprise_phone=None, alpha_level=None, _configuration=None):  # noqa: E501
        """AndroidForWorkSamsungPasscodePayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._passcode_content = None
        self._min_length = None
        self._maximum_repeat_characters = None
        self._maximum_length_of_numeric_sequences = None
        self._enable_passcode_visibility = None
        self._allow_fingerprint_unlock = None
        self._require_sd_card_encryption = None
        self._require_passcode = None
        self._enable_iris_scanner_authentication = None
        self._enable_face_unlock_authentication = None
        self._enable_overlay = None
        self._image_type = None
        self._overlay_type = None
        self._primary_image_path = None
        self._top_pos = None
        self._top_pos_end = None
        self._secondary_image_path = None
        self._bottom_pos = None
        self._bottom_pos_end = None
        self._enterprise_name = None
        self._enterprise_logo = None
        self._enterprise_address = None
        self._enterprise_phone = None
        self._alpha_level = None
        self.discriminator = None

        if passcode_content is not None:
            self.passcode_content = passcode_content
        self.min_length = min_length
        if maximum_repeat_characters is not None:
            self.maximum_repeat_characters = maximum_repeat_characters
        if maximum_length_of_numeric_sequences is not None:
            self.maximum_length_of_numeric_sequences = maximum_length_of_numeric_sequences
        if enable_passcode_visibility is not None:
            self.enable_passcode_visibility = enable_passcode_visibility
        if allow_fingerprint_unlock is not None:
            self.allow_fingerprint_unlock = allow_fingerprint_unlock
        if require_sd_card_encryption is not None:
            self.require_sd_card_encryption = require_sd_card_encryption
        if require_passcode is not None:
            self.require_passcode = require_passcode
        if enable_iris_scanner_authentication is not None:
            self.enable_iris_scanner_authentication = enable_iris_scanner_authentication
        if enable_face_unlock_authentication is not None:
            self.enable_face_unlock_authentication = enable_face_unlock_authentication
        if enable_overlay is not None:
            self.enable_overlay = enable_overlay
        if image_type is not None:
            self.image_type = image_type
        if overlay_type is not None:
            self.overlay_type = overlay_type
        if primary_image_path is not None:
            self.primary_image_path = primary_image_path
        if top_pos is not None:
            self.top_pos = top_pos
        if top_pos_end is not None:
            self.top_pos_end = top_pos_end
        if secondary_image_path is not None:
            self.secondary_image_path = secondary_image_path
        if bottom_pos is not None:
            self.bottom_pos = bottom_pos
        if bottom_pos_end is not None:
            self.bottom_pos_end = bottom_pos_end
        if enterprise_name is not None:
            self.enterprise_name = enterprise_name
        if enterprise_logo is not None:
            self.enterprise_logo = enterprise_logo
        if enterprise_address is not None:
            self.enterprise_address = enterprise_address
        if enterprise_phone is not None:
            self.enterprise_phone = enterprise_phone
        if alpha_level is not None:
            self.alpha_level = alpha_level

    @property
    def passcode_content(self):
        """Gets the passcode_content of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets quality.  # noqa: E501

        :return: The passcode_content of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._passcode_content

    @passcode_content.setter
    def passcode_content(self, passcode_content):
        """Sets the passcode_content of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets quality.  # noqa: E501

        :param passcode_content: The passcode_content of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._passcode_content = passcode_content

    @property
    def min_length(self):
        """Gets the min_length of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets minLength.  # noqa: E501

        :return: The min_length of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets minLength.  # noqa: E501

        :param min_length: The min_length of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and min_length is None:
            raise ValueError("Invalid value for `min_length`, must not be `None`")  # noqa: E501

        self._min_length = min_length

    @property
    def maximum_repeat_characters(self):
        """Gets the maximum_repeat_characters of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets maxRepeatingCharacters.  # noqa: E501

        :return: The maximum_repeat_characters of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._maximum_repeat_characters

    @maximum_repeat_characters.setter
    def maximum_repeat_characters(self, maximum_repeat_characters):
        """Sets the maximum_repeat_characters of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets maxRepeatingCharacters.  # noqa: E501

        :param maximum_repeat_characters: The maximum_repeat_characters of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._maximum_repeat_characters = maximum_repeat_characters

    @property
    def maximum_length_of_numeric_sequences(self):
        """Gets the maximum_length_of_numeric_sequences of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets maxNumericSequences.  # noqa: E501

        :return: The maximum_length_of_numeric_sequences of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._maximum_length_of_numeric_sequences

    @maximum_length_of_numeric_sequences.setter
    def maximum_length_of_numeric_sequences(self, maximum_length_of_numeric_sequences):
        """Sets the maximum_length_of_numeric_sequences of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets maxNumericSequences.  # noqa: E501

        :param maximum_length_of_numeric_sequences: The maximum_length_of_numeric_sequences of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._maximum_length_of_numeric_sequences = maximum_length_of_numeric_sequences

    @property
    def enable_passcode_visibility(self):
        """Gets the enable_passcode_visibility of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether enablePasscodeVisibility.  # noqa: E501

        :return: The enable_passcode_visibility of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_passcode_visibility

    @enable_passcode_visibility.setter
    def enable_passcode_visibility(self, enable_passcode_visibility):
        """Sets the enable_passcode_visibility of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether enablePasscodeVisibility.  # noqa: E501

        :param enable_passcode_visibility: The enable_passcode_visibility of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_passcode_visibility = enable_passcode_visibility

    @property
    def allow_fingerprint_unlock(self):
        """Gets the allow_fingerprint_unlock of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether allowFingerprintUnlock.  # noqa: E501

        :return: The allow_fingerprint_unlock of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_fingerprint_unlock

    @allow_fingerprint_unlock.setter
    def allow_fingerprint_unlock(self, allow_fingerprint_unlock):
        """Sets the allow_fingerprint_unlock of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether allowFingerprintUnlock.  # noqa: E501

        :param allow_fingerprint_unlock: The allow_fingerprint_unlock of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_fingerprint_unlock = allow_fingerprint_unlock

    @property
    def require_sd_card_encryption(self):
        """Gets the require_sd_card_encryption of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether requireSDCardEncryption.  # noqa: E501

        :return: The require_sd_card_encryption of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._require_sd_card_encryption

    @require_sd_card_encryption.setter
    def require_sd_card_encryption(self, require_sd_card_encryption):
        """Sets the require_sd_card_encryption of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether requireSDCardEncryption.  # noqa: E501

        :param require_sd_card_encryption: The require_sd_card_encryption of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._require_sd_card_encryption = require_sd_card_encryption

    @property
    def require_passcode(self):
        """Gets the require_passcode of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether requirePasscode.  # noqa: E501

        :return: The require_passcode of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._require_passcode

    @require_passcode.setter
    def require_passcode(self, require_passcode):
        """Sets the require_passcode of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether requirePasscode.  # noqa: E501

        :param require_passcode: The require_passcode of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._require_passcode = require_passcode

    @property
    def enable_iris_scanner_authentication(self):
        """Gets the enable_iris_scanner_authentication of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether enableIrisScannerAuthentication.  # noqa: E501

        :return: The enable_iris_scanner_authentication of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_iris_scanner_authentication

    @enable_iris_scanner_authentication.setter
    def enable_iris_scanner_authentication(self, enable_iris_scanner_authentication):
        """Sets the enable_iris_scanner_authentication of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether enableIrisScannerAuthentication.  # noqa: E501

        :param enable_iris_scanner_authentication: The enable_iris_scanner_authentication of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_iris_scanner_authentication = enable_iris_scanner_authentication

    @property
    def enable_face_unlock_authentication(self):
        """Gets the enable_face_unlock_authentication of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether enableFaceUnlockAuthentication.  # noqa: E501

        :return: The enable_face_unlock_authentication of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_face_unlock_authentication

    @enable_face_unlock_authentication.setter
    def enable_face_unlock_authentication(self, enable_face_unlock_authentication):
        """Sets the enable_face_unlock_authentication of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether enableFaceUnlockAuthentication.  # noqa: E501

        :param enable_face_unlock_authentication: The enable_face_unlock_authentication of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_face_unlock_authentication = enable_face_unlock_authentication

    @property
    def enable_overlay(self):
        """Gets the enable_overlay of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether enableOverlay.  # noqa: E501

        :return: The enable_overlay of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_overlay

    @enable_overlay.setter
    def enable_overlay(self, enable_overlay):
        """Sets the enable_overlay of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets a value indicating whether enableOverlay.  # noqa: E501

        :param enable_overlay: The enable_overlay of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_overlay = enable_overlay

    @property
    def image_type(self):
        """Gets the image_type of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets imageType.  # noqa: E501

        :return: The image_type of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets imageType.  # noqa: E501

        :param image_type: The image_type of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._image_type = image_type

    @property
    def overlay_type(self):
        """Gets the overlay_type of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets overlayType.  # noqa: E501

        :return: The overlay_type of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._overlay_type

    @overlay_type.setter
    def overlay_type(self, overlay_type):
        """Sets the overlay_type of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets overlayType.  # noqa: E501

        :param overlay_type: The overlay_type of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._overlay_type = overlay_type

    @property
    def primary_image_path(self):
        """Gets the primary_image_path of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets primaryImagePath.  # noqa: E501

        :return: The primary_image_path of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._primary_image_path

    @primary_image_path.setter
    def primary_image_path(self, primary_image_path):
        """Sets the primary_image_path of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets primaryImagePath.  # noqa: E501

        :param primary_image_path: The primary_image_path of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._primary_image_path = primary_image_path

    @property
    def top_pos(self):
        """Gets the top_pos of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets topPos.  # noqa: E501

        :return: The top_pos of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._top_pos

    @top_pos.setter
    def top_pos(self, top_pos):
        """Sets the top_pos of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets topPos.  # noqa: E501

        :param top_pos: The top_pos of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._top_pos = top_pos

    @property
    def top_pos_end(self):
        """Gets the top_pos_end of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets topPosEnd.  # noqa: E501

        :return: The top_pos_end of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._top_pos_end

    @top_pos_end.setter
    def top_pos_end(self, top_pos_end):
        """Sets the top_pos_end of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets topPosEnd.  # noqa: E501

        :param top_pos_end: The top_pos_end of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._top_pos_end = top_pos_end

    @property
    def secondary_image_path(self):
        """Gets the secondary_image_path of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets secondaryImagePath.  # noqa: E501

        :return: The secondary_image_path of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._secondary_image_path

    @secondary_image_path.setter
    def secondary_image_path(self, secondary_image_path):
        """Sets the secondary_image_path of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets secondaryImagePath.  # noqa: E501

        :param secondary_image_path: The secondary_image_path of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._secondary_image_path = secondary_image_path

    @property
    def bottom_pos(self):
        """Gets the bottom_pos of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets bottomPos.  # noqa: E501

        :return: The bottom_pos of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._bottom_pos

    @bottom_pos.setter
    def bottom_pos(self, bottom_pos):
        """Sets the bottom_pos of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets bottomPos.  # noqa: E501

        :param bottom_pos: The bottom_pos of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._bottom_pos = bottom_pos

    @property
    def bottom_pos_end(self):
        """Gets the bottom_pos_end of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets bottomPosEnd.  # noqa: E501

        :return: The bottom_pos_end of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._bottom_pos_end

    @bottom_pos_end.setter
    def bottom_pos_end(self, bottom_pos_end):
        """Sets the bottom_pos_end of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets bottomPosEnd.  # noqa: E501

        :param bottom_pos_end: The bottom_pos_end of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._bottom_pos_end = bottom_pos_end

    @property
    def enterprise_name(self):
        """Gets the enterprise_name of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets enterpriseName.  # noqa: E501

        :return: The enterprise_name of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_name

    @enterprise_name.setter
    def enterprise_name(self, enterprise_name):
        """Sets the enterprise_name of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets enterpriseName.  # noqa: E501

        :param enterprise_name: The enterprise_name of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._enterprise_name = enterprise_name

    @property
    def enterprise_logo(self):
        """Gets the enterprise_logo of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets enterpriseLogo.  # noqa: E501

        :return: The enterprise_logo of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._enterprise_logo

    @enterprise_logo.setter
    def enterprise_logo(self, enterprise_logo):
        """Sets the enterprise_logo of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets enterpriseLogo.  # noqa: E501

        :param enterprise_logo: The enterprise_logo of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._enterprise_logo = enterprise_logo

    @property
    def enterprise_address(self):
        """Gets the enterprise_address of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets enterpriseLogo.  # noqa: E501

        :return: The enterprise_address of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_address

    @enterprise_address.setter
    def enterprise_address(self, enterprise_address):
        """Sets the enterprise_address of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets enterpriseLogo.  # noqa: E501

        :param enterprise_address: The enterprise_address of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._enterprise_address = enterprise_address

    @property
    def enterprise_phone(self):
        """Gets the enterprise_phone of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets enterprisePhone.  # noqa: E501

        :return: The enterprise_phone of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_phone

    @enterprise_phone.setter
    def enterprise_phone(self, enterprise_phone):
        """Sets the enterprise_phone of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets enterprisePhone.  # noqa: E501

        :param enterprise_phone: The enterprise_phone of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._enterprise_phone = enterprise_phone

    @property
    def alpha_level(self):
        """Gets the alpha_level of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501

        Gets or sets alphaLevel.  # noqa: E501

        :return: The alpha_level of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :rtype: float
        """
        return self._alpha_level

    @alpha_level.setter
    def alpha_level(self, alpha_level):
        """Sets the alpha_level of this AndroidForWorkSamsungPasscodePayloadV2Entity_.

        Gets or sets alphaLevel.  # noqa: E501

        :param alpha_level: The alpha_level of this AndroidForWorkSamsungPasscodePayloadV2Entity_.  # noqa: E501
        :type: float
        """

        self._alpha_level = alpha_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkSamsungPasscodePayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkSamsungPasscodePayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkSamsungPasscodePayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
