# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class EnrollmentTokenRequestV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_attribute': 'str',
        'registration_type': 'str',
        'ownership_type': 'str',
        'attribute_type': 'str'
    }

    attribute_map = {
        'device_attribute': 'device_attribute',
        'registration_type': 'registration_type',
        'ownership_type': 'ownership_type',
        'attribute_type': 'attribute_type'
    }

    def __init__(self, device_attribute=None, registration_type=None, ownership_type=None, attribute_type=None, _configuration=None):  # noqa: E501
        """EnrollmentTokenRequestV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_attribute = None
        self._registration_type = None
        self._ownership_type = None
        self._attribute_type = None
        self.discriminator = None

        self.device_attribute = device_attribute
        if registration_type is not None:
            self.registration_type = registration_type
        if ownership_type is not None:
            self.ownership_type = ownership_type
        if attribute_type is not None:
            self.attribute_type = attribute_type

    @property
    def device_attribute(self):
        """Gets the device_attribute of this EnrollmentTokenRequestV1Model.  # noqa: E501

        Device attribute value for corresponding attribute type  # noqa: E501

        :return: The device_attribute of this EnrollmentTokenRequestV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_attribute

    @device_attribute.setter
    def device_attribute(self, device_attribute):
        """Sets the device_attribute of this EnrollmentTokenRequestV1Model.

        Device attribute value for corresponding attribute type  # noqa: E501

        :param device_attribute: The device_attribute of this EnrollmentTokenRequestV1Model.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and device_attribute is None:
            raise ValueError("Invalid value for `device_attribute`, must not be `None`")  # noqa: E501

        self._device_attribute = device_attribute

    @property
    def registration_type(self):
        """Gets the registration_type of this EnrollmentTokenRequestV1Model.  # noqa: E501

        Device registration type  # noqa: E501

        :return: The registration_type of this EnrollmentTokenRequestV1Model.  # noqa: E501
        :rtype: str
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this EnrollmentTokenRequestV1Model.

        Device registration type  # noqa: E501

        :param registration_type: The registration_type of this EnrollmentTokenRequestV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "WHITELIST", "BLACKLIST", "REGISTER_DEVICE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                registration_type not in allowed_values):
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    @property
    def ownership_type(self):
        """Gets the ownership_type of this EnrollmentTokenRequestV1Model.  # noqa: E501

        Device ownership type  # noqa: E501

        :return: The ownership_type of this EnrollmentTokenRequestV1Model.  # noqa: E501
        :rtype: str
        """
        return self._ownership_type

    @ownership_type.setter
    def ownership_type(self, ownership_type):
        """Sets the ownership_type of this EnrollmentTokenRequestV1Model.

        Device ownership type  # noqa: E501

        :param ownership_type: The ownership_type of this EnrollmentTokenRequestV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["CORPORATE_DEDICATED", "EMPLOYEE_OWNED", "CORPORATE_SHARED", "NONE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ownership_type not in allowed_values):
            raise ValueError(
                "Invalid value for `ownership_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ownership_type, allowed_values)
            )

        self._ownership_type = ownership_type

    @property
    def attribute_type(self):
        """Gets the attribute_type of this EnrollmentTokenRequestV1Model.  # noqa: E501

        Device attribute type  # noqa: E501

        :return: The attribute_type of this EnrollmentTokenRequestV1Model.  # noqa: E501
        :rtype: str
        """
        return self._attribute_type

    @attribute_type.setter
    def attribute_type(self, attribute_type):
        """Sets the attribute_type of this EnrollmentTokenRequestV1Model.

        Device attribute type  # noqa: E501

        :param attribute_type: The attribute_type of this EnrollmentTokenRequestV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "IMEI", "SERIAL_NUMBER", "UDID"]  # noqa: E501
        if (self._configuration.client_side_validation and
                attribute_type not in allowed_values):
            raise ValueError(
                "Invalid value for `attribute_type` ({0}), must be one of {1}"  # noqa: E501
                .format(attribute_type, allowed_values)
            )

        self._attribute_type = attribute_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrollmentTokenRequestV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentTokenRequestV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentTokenRequestV1Model):
            return True

        return self.to_dict() != other.to_dict()
