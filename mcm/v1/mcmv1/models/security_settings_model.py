# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mcmv1.configuration import Configuration


class SecuritySettingsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_view_online': 'bool',
        'force_encryption': 'bool',
        'allow_open_in_email': 'bool',
        'allow_open_in_third_party_apps': 'bool',
        'allow_saving_to_other_repositories': 'bool',
        'enable_water_mark': 'bool',
        'allow_print': 'bool',
        'allow_edit': 'bool',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'allow_view_online': 'allowViewOnline',
        'force_encryption': 'forceEncryption',
        'allow_open_in_email': 'allowOpenInEmail',
        'allow_open_in_third_party_apps': 'allowOpenInThirdPartyApps',
        'allow_saving_to_other_repositories': 'allowSavingToOtherRepositories',
        'enable_water_mark': 'enableWaterMark',
        'allow_print': 'allowPrint',
        'allow_edit': 'allowEdit',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, allow_view_online=None, force_encryption=None, allow_open_in_email=None, allow_open_in_third_party_apps=None, allow_saving_to_other_repositories=None, enable_water_mark=None, allow_print=None, allow_edit=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """SecuritySettingsModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_view_online = None
        self._force_encryption = None
        self._allow_open_in_email = None
        self._allow_open_in_third_party_apps = None
        self._allow_saving_to_other_repositories = None
        self._enable_water_mark = None
        self._allow_print = None
        self._allow_edit = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if allow_view_online is not None:
            self.allow_view_online = allow_view_online
        if force_encryption is not None:
            self.force_encryption = force_encryption
        if allow_open_in_email is not None:
            self.allow_open_in_email = allow_open_in_email
        if allow_open_in_third_party_apps is not None:
            self.allow_open_in_third_party_apps = allow_open_in_third_party_apps
        if allow_saving_to_other_repositories is not None:
            self.allow_saving_to_other_repositories = allow_saving_to_other_repositories
        if enable_water_mark is not None:
            self.enable_water_mark = enable_water_mark
        if allow_print is not None:
            self.allow_print = allow_print
        if allow_edit is not None:
            self.allow_edit = allow_edit
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def allow_view_online(self):
        """Gets the allow_view_online of this SecuritySettingsModel.  # noqa: E501

        Value indicates whether content is view online only.  # noqa: E501

        :return: The allow_view_online of this SecuritySettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_view_online

    @allow_view_online.setter
    def allow_view_online(self, allow_view_online):
        """Sets the allow_view_online of this SecuritySettingsModel.

        Value indicates whether content is view online only.  # noqa: E501

        :param allow_view_online: The allow_view_online of this SecuritySettingsModel.  # noqa: E501
        :type: bool
        """

        self._allow_view_online = allow_view_online

    @property
    def force_encryption(self):
        """Gets the force_encryption of this SecuritySettingsModel.  # noqa: E501

        Value indicates whether forceEncryption is enabled.  # noqa: E501

        :return: The force_encryption of this SecuritySettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._force_encryption

    @force_encryption.setter
    def force_encryption(self, force_encryption):
        """Sets the force_encryption of this SecuritySettingsModel.

        Value indicates whether forceEncryption is enabled.  # noqa: E501

        :param force_encryption: The force_encryption of this SecuritySettingsModel.  # noqa: E501
        :type: bool
        """

        self._force_encryption = force_encryption

    @property
    def allow_open_in_email(self):
        """Gets the allow_open_in_email of this SecuritySettingsModel.  # noqa: E501

        Value indicates whether document opening in email is enabled.  # noqa: E501

        :return: The allow_open_in_email of this SecuritySettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_open_in_email

    @allow_open_in_email.setter
    def allow_open_in_email(self, allow_open_in_email):
        """Sets the allow_open_in_email of this SecuritySettingsModel.

        Value indicates whether document opening in email is enabled.  # noqa: E501

        :param allow_open_in_email: The allow_open_in_email of this SecuritySettingsModel.  # noqa: E501
        :type: bool
        """

        self._allow_open_in_email = allow_open_in_email

    @property
    def allow_open_in_third_party_apps(self):
        """Gets the allow_open_in_third_party_apps of this SecuritySettingsModel.  # noqa: E501

        value indicates whether opening document in third party apps is enabled.  # noqa: E501

        :return: The allow_open_in_third_party_apps of this SecuritySettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_open_in_third_party_apps

    @allow_open_in_third_party_apps.setter
    def allow_open_in_third_party_apps(self, allow_open_in_third_party_apps):
        """Sets the allow_open_in_third_party_apps of this SecuritySettingsModel.

        value indicates whether opening document in third party apps is enabled.  # noqa: E501

        :param allow_open_in_third_party_apps: The allow_open_in_third_party_apps of this SecuritySettingsModel.  # noqa: E501
        :type: bool
        """

        self._allow_open_in_third_party_apps = allow_open_in_third_party_apps

    @property
    def allow_saving_to_other_repositories(self):
        """Gets the allow_saving_to_other_repositories of this SecuritySettingsModel.  # noqa: E501

        Value indicates whether saving to other repositories is enabled.  # noqa: E501

        :return: The allow_saving_to_other_repositories of this SecuritySettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_saving_to_other_repositories

    @allow_saving_to_other_repositories.setter
    def allow_saving_to_other_repositories(self, allow_saving_to_other_repositories):
        """Sets the allow_saving_to_other_repositories of this SecuritySettingsModel.

        Value indicates whether saving to other repositories is enabled.  # noqa: E501

        :param allow_saving_to_other_repositories: The allow_saving_to_other_repositories of this SecuritySettingsModel.  # noqa: E501
        :type: bool
        """

        self._allow_saving_to_other_repositories = allow_saving_to_other_repositories

    @property
    def enable_water_mark(self):
        """Gets the enable_water_mark of this SecuritySettingsModel.  # noqa: E501

        Value indicates whether watermark is enabled.  # noqa: E501

        :return: The enable_water_mark of this SecuritySettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._enable_water_mark

    @enable_water_mark.setter
    def enable_water_mark(self, enable_water_mark):
        """Sets the enable_water_mark of this SecuritySettingsModel.

        Value indicates whether watermark is enabled.  # noqa: E501

        :param enable_water_mark: The enable_water_mark of this SecuritySettingsModel.  # noqa: E501
        :type: bool
        """

        self._enable_water_mark = enable_water_mark

    @property
    def allow_print(self):
        """Gets the allow_print of this SecuritySettingsModel.  # noqa: E501

        Value indicates whether printing the document is allowed.  # noqa: E501

        :return: The allow_print of this SecuritySettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_print

    @allow_print.setter
    def allow_print(self, allow_print):
        """Sets the allow_print of this SecuritySettingsModel.

        Value indicates whether printing the document is allowed.  # noqa: E501

        :param allow_print: The allow_print of this SecuritySettingsModel.  # noqa: E501
        :type: bool
        """

        self._allow_print = allow_print

    @property
    def allow_edit(self):
        """Gets the allow_edit of this SecuritySettingsModel.  # noqa: E501

        Value indicates whether edit document is allowed.  # noqa: E501

        :return: The allow_edit of this SecuritySettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._allow_edit

    @allow_edit.setter
    def allow_edit(self, allow_edit):
        """Sets the allow_edit of this SecuritySettingsModel.

        Value indicates whether edit document is allowed.  # noqa: E501

        :param allow_edit: The allow_edit of this SecuritySettingsModel.  # noqa: E501
        :type: bool
        """

        self._allow_edit = allow_edit

    @property
    def id(self):
        """Gets the id of this SecuritySettingsModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this SecuritySettingsModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SecuritySettingsModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this SecuritySettingsModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this SecuritySettingsModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this SecuritySettingsModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SecuritySettingsModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this SecuritySettingsModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecuritySettingsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecuritySettingsModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SecuritySettingsModel):
            return True

        return self.to_dict() != other.to_dict()
