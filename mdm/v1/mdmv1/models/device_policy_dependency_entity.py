# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DevicePolicyDependencyEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_policy_id': 'int',
        'dependent_device_policy_id': 'int',
        'sequence_number': 'int',
        'applicable': 'bool',
        'device_policy_uuid': 'str',
        'dependent_device_policy_uuid': 'str',
        'dependent_device_policy_version': 'int',
        'steps': 'list[DevicePolicyStepEntity]',
        'table_name': 'str',
        'id_field1': 'int',
        'id_field2': 'int'
    }

    attribute_map = {
        'device_policy_id': 'DevicePolicyID',
        'dependent_device_policy_id': 'DependentDevicePolicyID',
        'sequence_number': 'SequenceNumber',
        'applicable': 'Applicable',
        'device_policy_uuid': 'DevicePolicyUUID',
        'dependent_device_policy_uuid': 'DependentDevicePolicyUUID',
        'dependent_device_policy_version': 'DependentDevicePolicyVersion',
        'steps': 'Steps',
        'table_name': 'TableName',
        'id_field1': 'IDField1',
        'id_field2': 'IDField2'
    }

    def __init__(self, device_policy_id=None, dependent_device_policy_id=None, sequence_number=None, applicable=None, device_policy_uuid=None, dependent_device_policy_uuid=None, dependent_device_policy_version=None, steps=None, table_name=None, id_field1=None, id_field2=None, _configuration=None):  # noqa: E501
        """DevicePolicyDependencyEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_policy_id = None
        self._dependent_device_policy_id = None
        self._sequence_number = None
        self._applicable = None
        self._device_policy_uuid = None
        self._dependent_device_policy_uuid = None
        self._dependent_device_policy_version = None
        self._steps = None
        self._table_name = None
        self._id_field1 = None
        self._id_field2 = None
        self.discriminator = None

        if device_policy_id is not None:
            self.device_policy_id = device_policy_id
        if dependent_device_policy_id is not None:
            self.dependent_device_policy_id = dependent_device_policy_id
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if applicable is not None:
            self.applicable = applicable
        if device_policy_uuid is not None:
            self.device_policy_uuid = device_policy_uuid
        if dependent_device_policy_uuid is not None:
            self.dependent_device_policy_uuid = dependent_device_policy_uuid
        if dependent_device_policy_version is not None:
            self.dependent_device_policy_version = dependent_device_policy_version
        if steps is not None:
            self.steps = steps
        if table_name is not None:
            self.table_name = table_name
        if id_field1 is not None:
            self.id_field1 = id_field1
        if id_field2 is not None:
            self.id_field2 = id_field2

    @property
    def device_policy_id(self):
        """Gets the device_policy_id of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The device_policy_id of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: int
        """
        return self._device_policy_id

    @device_policy_id.setter
    def device_policy_id(self, device_policy_id):
        """Sets the device_policy_id of this DevicePolicyDependencyEntity.


        :param device_policy_id: The device_policy_id of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: int
        """

        self._device_policy_id = device_policy_id

    @property
    def dependent_device_policy_id(self):
        """Gets the dependent_device_policy_id of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The dependent_device_policy_id of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: int
        """
        return self._dependent_device_policy_id

    @dependent_device_policy_id.setter
    def dependent_device_policy_id(self, dependent_device_policy_id):
        """Sets the dependent_device_policy_id of this DevicePolicyDependencyEntity.


        :param dependent_device_policy_id: The dependent_device_policy_id of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: int
        """

        self._dependent_device_policy_id = dependent_device_policy_id

    @property
    def sequence_number(self):
        """Gets the sequence_number of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The sequence_number of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this DevicePolicyDependencyEntity.


        :param sequence_number: The sequence_number of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def applicable(self):
        """Gets the applicable of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The applicable of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: bool
        """
        return self._applicable

    @applicable.setter
    def applicable(self, applicable):
        """Sets the applicable of this DevicePolicyDependencyEntity.


        :param applicable: The applicable of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: bool
        """

        self._applicable = applicable

    @property
    def device_policy_uuid(self):
        """Gets the device_policy_uuid of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The device_policy_uuid of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: str
        """
        return self._device_policy_uuid

    @device_policy_uuid.setter
    def device_policy_uuid(self, device_policy_uuid):
        """Sets the device_policy_uuid of this DevicePolicyDependencyEntity.


        :param device_policy_uuid: The device_policy_uuid of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: str
        """

        self._device_policy_uuid = device_policy_uuid

    @property
    def dependent_device_policy_uuid(self):
        """Gets the dependent_device_policy_uuid of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The dependent_device_policy_uuid of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: str
        """
        return self._dependent_device_policy_uuid

    @dependent_device_policy_uuid.setter
    def dependent_device_policy_uuid(self, dependent_device_policy_uuid):
        """Sets the dependent_device_policy_uuid of this DevicePolicyDependencyEntity.


        :param dependent_device_policy_uuid: The dependent_device_policy_uuid of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: str
        """

        self._dependent_device_policy_uuid = dependent_device_policy_uuid

    @property
    def dependent_device_policy_version(self):
        """Gets the dependent_device_policy_version of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The dependent_device_policy_version of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: int
        """
        return self._dependent_device_policy_version

    @dependent_device_policy_version.setter
    def dependent_device_policy_version(self, dependent_device_policy_version):
        """Sets the dependent_device_policy_version of this DevicePolicyDependencyEntity.


        :param dependent_device_policy_version: The dependent_device_policy_version of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: int
        """

        self._dependent_device_policy_version = dependent_device_policy_version

    @property
    def steps(self):
        """Gets the steps of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The steps of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: list[DevicePolicyStepEntity]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this DevicePolicyDependencyEntity.


        :param steps: The steps of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: list[DevicePolicyStepEntity]
        """

        self._steps = steps

    @property
    def table_name(self):
        """Gets the table_name of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The table_name of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DevicePolicyDependencyEntity.


        :param table_name: The table_name of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def id_field1(self):
        """Gets the id_field1 of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The id_field1 of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: int
        """
        return self._id_field1

    @id_field1.setter
    def id_field1(self, id_field1):
        """Sets the id_field1 of this DevicePolicyDependencyEntity.


        :param id_field1: The id_field1 of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: int
        """

        self._id_field1 = id_field1

    @property
    def id_field2(self):
        """Gets the id_field2 of this DevicePolicyDependencyEntity.  # noqa: E501


        :return: The id_field2 of this DevicePolicyDependencyEntity.  # noqa: E501
        :rtype: int
        """
        return self._id_field2

    @id_field2.setter
    def id_field2(self, id_field2):
        """Sets the id_field2 of this DevicePolicyDependencyEntity.


        :param id_field2: The id_field2 of this DevicePolicyDependencyEntity.  # noqa: E501
        :type: int
        """

        self._id_field2 = id_field2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DevicePolicyDependencyEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DevicePolicyDependencyEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DevicePolicyDependencyEntity):
            return True

        return self.to_dict() != other.to_dict()
