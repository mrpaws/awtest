# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ScriptSampleModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'script_uuid': 'str',
        'device_uuid': 'str',
        'script_name': 'str',
        'device_name': 'str',
        'return_code': 'int',
        'status': 'int',
        'last_seen_at': 'datetime',
        'execution_time_millis': 'int',
        'last_executed_at': 'datetime'
    }

    attribute_map = {
        'script_uuid': 'script_uuid',
        'device_uuid': 'device_uuid',
        'script_name': 'script_name',
        'device_name': 'device_name',
        'return_code': 'return_code',
        'status': 'status',
        'last_seen_at': 'last_seen_at',
        'execution_time_millis': 'execution_time_millis',
        'last_executed_at': 'last_executed_at'
    }

    def __init__(self, script_uuid=None, device_uuid=None, script_name=None, device_name=None, return_code=None, status=None, last_seen_at=None, execution_time_millis=None, last_executed_at=None, _configuration=None):  # noqa: E501
        """ScriptSampleModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._script_uuid = None
        self._device_uuid = None
        self._script_name = None
        self._device_name = None
        self._return_code = None
        self._status = None
        self._last_seen_at = None
        self._execution_time_millis = None
        self._last_executed_at = None
        self.discriminator = None

        if script_uuid is not None:
            self.script_uuid = script_uuid
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if script_name is not None:
            self.script_name = script_name
        if device_name is not None:
            self.device_name = device_name
        if return_code is not None:
            self.return_code = return_code
        if status is not None:
            self.status = status
        if last_seen_at is not None:
            self.last_seen_at = last_seen_at
        if execution_time_millis is not None:
            self.execution_time_millis = execution_time_millis
        if last_executed_at is not None:
            self.last_executed_at = last_executed_at

    @property
    def script_uuid(self):
        """Gets the script_uuid of this ScriptSampleModel.  # noqa: E501

        Gets or sets unique identifier of Script in UEM system.  # noqa: E501

        :return: The script_uuid of this ScriptSampleModel.  # noqa: E501
        :rtype: str
        """
        return self._script_uuid

    @script_uuid.setter
    def script_uuid(self, script_uuid):
        """Sets the script_uuid of this ScriptSampleModel.

        Gets or sets unique identifier of Script in UEM system.  # noqa: E501

        :param script_uuid: The script_uuid of this ScriptSampleModel.  # noqa: E501
        :type: str
        """

        self._script_uuid = script_uuid

    @property
    def device_uuid(self):
        """Gets the device_uuid of this ScriptSampleModel.  # noqa: E501

        Gets or sets unique identifier of Device in UEM system.  # noqa: E501

        :return: The device_uuid of this ScriptSampleModel.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this ScriptSampleModel.

        Gets or sets unique identifier of Device in UEM system.  # noqa: E501

        :param device_uuid: The device_uuid of this ScriptSampleModel.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def script_name(self):
        """Gets the script_name of this ScriptSampleModel.  # noqa: E501

        Gets or sets the Script name.  # noqa: E501

        :return: The script_name of this ScriptSampleModel.  # noqa: E501
        :rtype: str
        """
        return self._script_name

    @script_name.setter
    def script_name(self, script_name):
        """Sets the script_name of this ScriptSampleModel.

        Gets or sets the Script name.  # noqa: E501

        :param script_name: The script_name of this ScriptSampleModel.  # noqa: E501
        :type: str
        """

        self._script_name = script_name

    @property
    def device_name(self):
        """Gets the device_name of this ScriptSampleModel.  # noqa: E501

        Gets or sets the Device name.  # noqa: E501

        :return: The device_name of this ScriptSampleModel.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ScriptSampleModel.

        Gets or sets the Device name.  # noqa: E501

        :param device_name: The device_name of this ScriptSampleModel.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def return_code(self):
        """Gets the return_code of this ScriptSampleModel.  # noqa: E501

        Gets or sets the script return code.  # noqa: E501

        :return: The return_code of this ScriptSampleModel.  # noqa: E501
        :rtype: int
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this ScriptSampleModel.

        Gets or sets the script return code.  # noqa: E501

        :param return_code: The return_code of this ScriptSampleModel.  # noqa: E501
        :type: int
        """

        self._return_code = return_code

    @property
    def status(self):
        """Gets the status of this ScriptSampleModel.  # noqa: E501

        Gets or sets the Script status value.  # noqa: E501

        :return: The status of this ScriptSampleModel.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScriptSampleModel.

        Gets or sets the Script status value.  # noqa: E501

        :param status: The status of this ScriptSampleModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this ScriptSampleModel.  # noqa: E501

        Gets or sets a timestamp specifying when the Device was last seen by UEM system.  # noqa: E501

        :return: The last_seen_at of this ScriptSampleModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this ScriptSampleModel.

        Gets or sets a timestamp specifying when the Device was last seen by UEM system.  # noqa: E501

        :param last_seen_at: The last_seen_at of this ScriptSampleModel.  # noqa: E501
        :type: datetime
        """

        self._last_seen_at = last_seen_at

    @property
    def execution_time_millis(self):
        """Gets the execution_time_millis of this ScriptSampleModel.  # noqa: E501

        Gets or sets the execution time taken by the script on the device in milli-seconds.  # noqa: E501

        :return: The execution_time_millis of this ScriptSampleModel.  # noqa: E501
        :rtype: int
        """
        return self._execution_time_millis

    @execution_time_millis.setter
    def execution_time_millis(self, execution_time_millis):
        """Sets the execution_time_millis of this ScriptSampleModel.

        Gets or sets the execution time taken by the script on the device in milli-seconds.  # noqa: E501

        :param execution_time_millis: The execution_time_millis of this ScriptSampleModel.  # noqa: E501
        :type: int
        """

        self._execution_time_millis = execution_time_millis

    @property
    def last_executed_at(self):
        """Gets the last_executed_at of this ScriptSampleModel.  # noqa: E501

        Gets or sets a timestamp specifying when the Script was last executed.  # noqa: E501

        :return: The last_executed_at of this ScriptSampleModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_executed_at

    @last_executed_at.setter
    def last_executed_at(self, last_executed_at):
        """Sets the last_executed_at of this ScriptSampleModel.

        Gets or sets a timestamp specifying when the Script was last executed.  # noqa: E501

        :param last_executed_at: The last_executed_at of this ScriptSampleModel.  # noqa: E501
        :type: datetime
        """

        self._last_executed_at = last_executed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScriptSampleModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScriptSampleModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScriptSampleModel):
            return True

        return self.to_dict() != other.to_dict()
