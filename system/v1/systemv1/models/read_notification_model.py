# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class ReadNotificationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'core_user_id': 'int',
        'created_on': 'datetime',
        'globalized_created_on': 'datetime',
        'organization_group_path': 'str',
        'params': 'list[object]',
        'action_label_key': 'str',
        'data': 'str',
        'organization_group_id': 'int',
        'title': 'str',
        'is_acknowledged': 'bool',
        'acknowledged_on': 'datetime',
        'type_id': 'int',
        'type_value': 'str',
        'category_id': 'int',
        'category_value': 'str',
        'resource_key': 'str',
        'resource_value': 'str',
        'priority': 'int',
        'message': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'core_user_id': 'CoreUserId',
        'created_on': 'CreatedOn',
        'globalized_created_on': 'GlobalizedCreatedOn',
        'organization_group_path': 'OrganizationGroupPath',
        'params': 'Params',
        'action_label_key': 'ActionLabelKey',
        'data': 'Data',
        'organization_group_id': 'OrganizationGroupId',
        'title': 'Title',
        'is_acknowledged': 'IsAcknowledged',
        'acknowledged_on': 'AcknowledgedOn',
        'type_id': 'TypeId',
        'type_value': 'TypeValue',
        'category_id': 'CategoryId',
        'category_value': 'CategoryValue',
        'resource_key': 'ResourceKey',
        'resource_value': 'ResourceValue',
        'priority': 'Priority',
        'message': 'Message',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, core_user_id=None, created_on=None, globalized_created_on=None, organization_group_path=None, params=None, action_label_key=None, data=None, organization_group_id=None, title=None, is_acknowledged=None, acknowledged_on=None, type_id=None, type_value=None, category_id=None, category_value=None, resource_key=None, resource_value=None, priority=None, message=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """ReadNotificationModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._core_user_id = None
        self._created_on = None
        self._globalized_created_on = None
        self._organization_group_path = None
        self._params = None
        self._action_label_key = None
        self._data = None
        self._organization_group_id = None
        self._title = None
        self._is_acknowledged = None
        self._acknowledged_on = None
        self._type_id = None
        self._type_value = None
        self._category_id = None
        self._category_value = None
        self._resource_key = None
        self._resource_value = None
        self._priority = None
        self._message = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if core_user_id is not None:
            self.core_user_id = core_user_id
        if created_on is not None:
            self.created_on = created_on
        if globalized_created_on is not None:
            self.globalized_created_on = globalized_created_on
        if organization_group_path is not None:
            self.organization_group_path = organization_group_path
        if params is not None:
            self.params = params
        if action_label_key is not None:
            self.action_label_key = action_label_key
        if data is not None:
            self.data = data
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if title is not None:
            self.title = title
        if is_acknowledged is not None:
            self.is_acknowledged = is_acknowledged
        if acknowledged_on is not None:
            self.acknowledged_on = acknowledged_on
        if type_id is not None:
            self.type_id = type_id
        if type_value is not None:
            self.type_value = type_value
        if category_id is not None:
            self.category_id = category_id
        if category_value is not None:
            self.category_value = category_value
        if resource_key is not None:
            self.resource_key = resource_key
        if resource_value is not None:
            self.resource_value = resource_value
        if priority is not None:
            self.priority = priority
        if message is not None:
            self.message = message
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def core_user_id(self):
        """Gets the core_user_id of this ReadNotificationModel.  # noqa: E501

        Gets or sets iD of the admin user assigned to the notification.  # noqa: E501

        :return: The core_user_id of this ReadNotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._core_user_id

    @core_user_id.setter
    def core_user_id(self, core_user_id):
        """Sets the core_user_id of this ReadNotificationModel.

        Gets or sets iD of the admin user assigned to the notification.  # noqa: E501

        :param core_user_id: The core_user_id of this ReadNotificationModel.  # noqa: E501
        :type: int
        """

        self._core_user_id = core_user_id

    @property
    def created_on(self):
        """Gets the created_on of this ReadNotificationModel.  # noqa: E501

        Gets or sets datetime when this notification was created.  # noqa: E501

        :return: The created_on of this ReadNotificationModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ReadNotificationModel.

        Gets or sets datetime when this notification was created.  # noqa: E501

        :param created_on: The created_on of this ReadNotificationModel.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def globalized_created_on(self):
        """Gets the globalized_created_on of this ReadNotificationModel.  # noqa: E501

        Gets or sets notification created datetime in admin's time zone.  # noqa: E501

        :return: The globalized_created_on of this ReadNotificationModel.  # noqa: E501
        :rtype: datetime
        """
        return self._globalized_created_on

    @globalized_created_on.setter
    def globalized_created_on(self, globalized_created_on):
        """Sets the globalized_created_on of this ReadNotificationModel.

        Gets or sets notification created datetime in admin's time zone.  # noqa: E501

        :param globalized_created_on: The globalized_created_on of this ReadNotificationModel.  # noqa: E501
        :type: datetime
        """

        self._globalized_created_on = globalized_created_on

    @property
    def organization_group_path(self):
        """Gets the organization_group_path of this ReadNotificationModel.  # noqa: E501

        Gets or sets organization Group Name.  # noqa: E501

        :return: The organization_group_path of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_path

    @organization_group_path.setter
    def organization_group_path(self, organization_group_path):
        """Sets the organization_group_path of this ReadNotificationModel.

        Gets or sets organization Group Name.  # noqa: E501

        :param organization_group_path: The organization_group_path of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._organization_group_path = organization_group_path

    @property
    def params(self):
        """Gets the params of this ReadNotificationModel.  # noqa: E501

        Gets or sets notification params to be used as format arguments into the message label key. Params values should be in globalized form.  # noqa: E501

        :return: The params of this ReadNotificationModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ReadNotificationModel.

        Gets or sets notification params to be used as format arguments into the message label key. Params values should be in globalized form.  # noqa: E501

        :param params: The params of this ReadNotificationModel.  # noqa: E501
        :type: list[object]
        """

        self._params = params

    @property
    def action_label_key(self):
        """Gets the action_label_key of this ReadNotificationModel.  # noqa: E501

        Gets or sets action Label Key for notification.  # noqa: E501

        :return: The action_label_key of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._action_label_key

    @action_label_key.setter
    def action_label_key(self, action_label_key):
        """Sets the action_label_key of this ReadNotificationModel.

        Gets or sets action Label Key for notification.  # noqa: E501

        :param action_label_key: The action_label_key of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._action_label_key = action_label_key

    @property
    def data(self):
        """Gets the data of this ReadNotificationModel.  # noqa: E501

        Gets or sets data for notification.  # noqa: E501

        :return: The data of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ReadNotificationModel.

        Gets or sets data for notification.  # noqa: E501

        :param data: The data of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this ReadNotificationModel.  # noqa: E501

        Gets or sets organization group ID where this notification was triggered.  # noqa: E501

        :return: The organization_group_id of this ReadNotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this ReadNotificationModel.

        Gets or sets organization group ID where this notification was triggered.  # noqa: E501

        :param organization_group_id: The organization_group_id of this ReadNotificationModel.  # noqa: E501
        :type: int
        """

        self._organization_group_id = organization_group_id

    @property
    def title(self):
        """Gets the title of this ReadNotificationModel.  # noqa: E501

        Gets or sets label key used as the notification title.  # noqa: E501

        :return: The title of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ReadNotificationModel.

        Gets or sets label key used as the notification title.  # noqa: E501

        :param title: The title of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def is_acknowledged(self):
        """Gets the is_acknowledged of this ReadNotificationModel.  # noqa: E501

        Gets or sets a value indicating whether notification acknowledgedment flag.  # noqa: E501

        :return: The is_acknowledged of this ReadNotificationModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_acknowledged

    @is_acknowledged.setter
    def is_acknowledged(self, is_acknowledged):
        """Sets the is_acknowledged of this ReadNotificationModel.

        Gets or sets a value indicating whether notification acknowledgedment flag.  # noqa: E501

        :param is_acknowledged: The is_acknowledged of this ReadNotificationModel.  # noqa: E501
        :type: bool
        """

        self._is_acknowledged = is_acknowledged

    @property
    def acknowledged_on(self):
        """Gets the acknowledged_on of this ReadNotificationModel.  # noqa: E501

        Gets or sets datetime when the notification was acknowledged.  # noqa: E501

        :return: The acknowledged_on of this ReadNotificationModel.  # noqa: E501
        :rtype: datetime
        """
        return self._acknowledged_on

    @acknowledged_on.setter
    def acknowledged_on(self, acknowledged_on):
        """Sets the acknowledged_on of this ReadNotificationModel.

        Gets or sets datetime when the notification was acknowledged.  # noqa: E501

        :param acknowledged_on: The acknowledged_on of this ReadNotificationModel.  # noqa: E501
        :type: datetime
        """

        self._acknowledged_on = acknowledged_on

    @property
    def type_id(self):
        """Gets the type_id of this ReadNotificationModel.  # noqa: E501

        Gets or sets notification type (1 = info, 2 = warning).  # noqa: E501

        :return: The type_id of this ReadNotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this ReadNotificationModel.

        Gets or sets notification type (1 = info, 2 = warning).  # noqa: E501

        :param type_id: The type_id of this ReadNotificationModel.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def type_value(self):
        """Gets the type_value of this ReadNotificationModel.  # noqa: E501

        Gets or sets notification type's globalized value.  # noqa: E501

        :return: The type_value of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._type_value

    @type_value.setter
    def type_value(self, type_value):
        """Sets the type_value of this ReadNotificationModel.

        Gets or sets notification type's globalized value.  # noqa: E501

        :param type_value: The type_value of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._type_value = type_value

    @property
    def category_id(self):
        """Gets the category_id of this ReadNotificationModel.  # noqa: E501

        Gets or sets notification category.  # noqa: E501

        :return: The category_id of this ReadNotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ReadNotificationModel.

        Gets or sets notification category.  # noqa: E501

        :param category_id: The category_id of this ReadNotificationModel.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def category_value(self):
        """Gets the category_value of this ReadNotificationModel.  # noqa: E501

        Gets or sets category's globalized value.  # noqa: E501

        :return: The category_value of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._category_value

    @category_value.setter
    def category_value(self, category_value):
        """Sets the category_value of this ReadNotificationModel.

        Gets or sets category's globalized value.  # noqa: E501

        :param category_value: The category_value of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._category_value = category_value

    @property
    def resource_key(self):
        """Gets the resource_key of this ReadNotificationModel.  # noqa: E501

        Gets or sets resource required to receive notifications for this category.  # noqa: E501

        :return: The resource_key of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this ReadNotificationModel.

        Gets or sets resource required to receive notifications for this category.  # noqa: E501

        :param resource_key: The resource_key of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._resource_key = resource_key

    @property
    def resource_value(self):
        """Gets the resource_value of this ReadNotificationModel.  # noqa: E501

        Gets or sets resource required to receive notifications for this category.  # noqa: E501

        :return: The resource_value of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._resource_value

    @resource_value.setter
    def resource_value(self, resource_value):
        """Sets the resource_value of this ReadNotificationModel.

        Gets or sets resource required to receive notifications for this category.  # noqa: E501

        :param resource_value: The resource_value of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._resource_value = resource_value

    @property
    def priority(self):
        """Gets the priority of this ReadNotificationModel.  # noqa: E501

        Gets or sets notification priority (1 = low, 2 = medium, 3 = high, 4 = critical).  # noqa: E501

        :return: The priority of this ReadNotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ReadNotificationModel.

        Gets or sets notification priority (1 = low, 2 = medium, 3 = high, 4 = critical).  # noqa: E501

        :param priority: The priority of this ReadNotificationModel.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def message(self):
        """Gets the message of this ReadNotificationModel.  # noqa: E501

        Gets or sets label key used as the notification message.  # noqa: E501

        :return: The message of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReadNotificationModel.

        Gets or sets label key used as the notification message.  # noqa: E501

        :param message: The message of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def id(self):
        """Gets the id of this ReadNotificationModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this ReadNotificationModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReadNotificationModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this ReadNotificationModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ReadNotificationModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this ReadNotificationModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ReadNotificationModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this ReadNotificationModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReadNotificationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReadNotificationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReadNotificationModel):
            return True

        return self.to_dict() != other.to_dict()
