# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class DevicesFilterCriteriaModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bundle_identifier': 'str',
        'organization_group_uuid': 'str',
        'app_organization_group_uuid': 'str',
        'device_type': 'str',
        'search_text': 'str',
        'assignment_type': 'str',
        'is_installed_version_equals_to_assigned_version': 'bool',
        'is_installed_version_not_equals_to_assigned_version': 'bool',
        'is_application_version_not_installed': 'bool',
        'applications_status': 'list[int]',
        'last_action_taken': 'list[int]',
        'smart_group_uuids': 'list[str]'
    }

    attribute_map = {
        'bundle_identifier': 'bundle_identifier',
        'organization_group_uuid': 'organization_group_uuid',
        'app_organization_group_uuid': 'app_organization_group_uuid',
        'device_type': 'device_type',
        'search_text': 'search_text',
        'assignment_type': 'assignment_type',
        'is_installed_version_equals_to_assigned_version': 'is_installed_version_equals_to_assigned_version',
        'is_installed_version_not_equals_to_assigned_version': 'is_installed_version_not_equals_to_assigned_version',
        'is_application_version_not_installed': 'is_application_version_not_installed',
        'applications_status': 'applications_status',
        'last_action_taken': 'last_action_taken',
        'smart_group_uuids': 'smart_group_uuids'
    }

    def __init__(self, bundle_identifier=None, organization_group_uuid=None, app_organization_group_uuid=None, device_type=None, search_text=None, assignment_type=None, is_installed_version_equals_to_assigned_version=None, is_installed_version_not_equals_to_assigned_version=None, is_application_version_not_installed=None, applications_status=None, last_action_taken=None, smart_group_uuids=None, _configuration=None):  # noqa: E501
        """DevicesFilterCriteriaModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bundle_identifier = None
        self._organization_group_uuid = None
        self._app_organization_group_uuid = None
        self._device_type = None
        self._search_text = None
        self._assignment_type = None
        self._is_installed_version_equals_to_assigned_version = None
        self._is_installed_version_not_equals_to_assigned_version = None
        self._is_application_version_not_installed = None
        self._applications_status = None
        self._last_action_taken = None
        self._smart_group_uuids = None
        self.discriminator = None

        if bundle_identifier is not None:
            self.bundle_identifier = bundle_identifier
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if app_organization_group_uuid is not None:
            self.app_organization_group_uuid = app_organization_group_uuid
        if device_type is not None:
            self.device_type = device_type
        if search_text is not None:
            self.search_text = search_text
        if assignment_type is not None:
            self.assignment_type = assignment_type
        if is_installed_version_equals_to_assigned_version is not None:
            self.is_installed_version_equals_to_assigned_version = is_installed_version_equals_to_assigned_version
        if is_installed_version_not_equals_to_assigned_version is not None:
            self.is_installed_version_not_equals_to_assigned_version = is_installed_version_not_equals_to_assigned_version
        if is_application_version_not_installed is not None:
            self.is_application_version_not_installed = is_application_version_not_installed
        if applications_status is not None:
            self.applications_status = applications_status
        if last_action_taken is not None:
            self.last_action_taken = last_action_taken
        if smart_group_uuids is not None:
            self.smart_group_uuids = smart_group_uuids

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this DevicesFilterCriteriaModel.  # noqa: E501

        The bundle identifier of an application  # noqa: E501

        :return: The bundle_identifier of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this DevicesFilterCriteriaModel.

        The bundle identifier of an application  # noqa: E501

        :param bundle_identifier: The bundle_identifier of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: str
        """

        self._bundle_identifier = bundle_identifier

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this DevicesFilterCriteriaModel.  # noqa: E501

        The Organization Group identifier where the device list needs to be fetched. If not set it will be defaulted to admin Organization Group identifier.  # noqa: E501

        :return: The organization_group_uuid of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this DevicesFilterCriteriaModel.

        The Organization Group identifier where the device list needs to be fetched. If not set it will be defaulted to admin Organization Group identifier.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def app_organization_group_uuid(self):
        """Gets the app_organization_group_uuid of this DevicesFilterCriteriaModel.  # noqa: E501

        The Organization Group identifier in which the app was created.  # noqa: E501

        :return: The app_organization_group_uuid of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: str
        """
        return self._app_organization_group_uuid

    @app_organization_group_uuid.setter
    def app_organization_group_uuid(self, app_organization_group_uuid):
        """Sets the app_organization_group_uuid of this DevicesFilterCriteriaModel.

        The Organization Group identifier in which the app was created.  # noqa: E501

        :param app_organization_group_uuid: The app_organization_group_uuid of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: str
        """

        self._app_organization_group_uuid = app_organization_group_uuid

    @property
    def device_type(self):
        """Gets the device_type of this DevicesFilterCriteriaModel.  # noqa: E501

        The platform of the application  # noqa: E501

        :return: The device_type of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DevicesFilterCriteriaModel.

        The platform of the application  # noqa: E501

        :param device_type: The device_type of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def search_text(self):
        """Gets the search_text of this DevicesFilterCriteriaModel.  # noqa: E501

        If provided, the records matching this text will be selected. The search will be applied on the following properties [username, phone number, Organization Group name, supported model, user domain, device model name]. The default value will be empty string.  # noqa: E501

        :return: The search_text of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this DevicesFilterCriteriaModel.

        If provided, the records matching this text will be selected. The search will be applied on the following properties [username, phone number, Organization Group name, supported model, user domain, device model name]. The default value will be empty string.  # noqa: E501

        :param search_text: The search_text of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def assignment_type(self):
        """Gets the assignment_type of this DevicesFilterCriteriaModel.  # noqa: E501

        Assignment status of an application to the device supported values. is \"ASSIGNED\"  # noqa: E501

        :return: The assignment_type of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this DevicesFilterCriteriaModel.

        Assignment status of an application to the device supported values. is \"ASSIGNED\"  # noqa: E501

        :param assignment_type: The assignment_type of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: str
        """

        self._assignment_type = assignment_type

    @property
    def is_installed_version_equals_to_assigned_version(self):
        """Gets the is_installed_version_equals_to_assigned_version of this DevicesFilterCriteriaModel.  # noqa: E501

        Flag to get the devices where install application versions are same as assigned application version.  # noqa: E501

        :return: The is_installed_version_equals_to_assigned_version of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_installed_version_equals_to_assigned_version

    @is_installed_version_equals_to_assigned_version.setter
    def is_installed_version_equals_to_assigned_version(self, is_installed_version_equals_to_assigned_version):
        """Sets the is_installed_version_equals_to_assigned_version of this DevicesFilterCriteriaModel.

        Flag to get the devices where install application versions are same as assigned application version.  # noqa: E501

        :param is_installed_version_equals_to_assigned_version: The is_installed_version_equals_to_assigned_version of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: bool
        """

        self._is_installed_version_equals_to_assigned_version = is_installed_version_equals_to_assigned_version

    @property
    def is_installed_version_not_equals_to_assigned_version(self):
        """Gets the is_installed_version_not_equals_to_assigned_version of this DevicesFilterCriteriaModel.  # noqa: E501

        Flag to get the devices where install application versions are different assigned application version.  # noqa: E501

        :return: The is_installed_version_not_equals_to_assigned_version of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_installed_version_not_equals_to_assigned_version

    @is_installed_version_not_equals_to_assigned_version.setter
    def is_installed_version_not_equals_to_assigned_version(self, is_installed_version_not_equals_to_assigned_version):
        """Sets the is_installed_version_not_equals_to_assigned_version of this DevicesFilterCriteriaModel.

        Flag to get the devices where install application versions are different assigned application version.  # noqa: E501

        :param is_installed_version_not_equals_to_assigned_version: The is_installed_version_not_equals_to_assigned_version of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: bool
        """

        self._is_installed_version_not_equals_to_assigned_version = is_installed_version_not_equals_to_assigned_version

    @property
    def is_application_version_not_installed(self):
        """Gets the is_application_version_not_installed of this DevicesFilterCriteriaModel.  # noqa: E501

        Flag to get the devices where application is not installed.  # noqa: E501

        :return: The is_application_version_not_installed of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_application_version_not_installed

    @is_application_version_not_installed.setter
    def is_application_version_not_installed(self, is_application_version_not_installed):
        """Sets the is_application_version_not_installed of this DevicesFilterCriteriaModel.

        Flag to get the devices where application is not installed.  # noqa: E501

        :param is_application_version_not_installed: The is_application_version_not_installed of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: bool
        """

        self._is_application_version_not_installed = is_application_version_not_installed

    @property
    def applications_status(self):
        """Gets the applications_status of this DevicesFilterCriteriaModel.  # noqa: E501

        List of device reported status. If nothing is passed, all the assigned devices will be returned based on the other filters. The possible values are [NeedsRedemption, Redeeming, Prompting, Installing, Managed, MDMRemoval, MDMRemoved, ManagedButUninstalled, UserRejected, Failed, Unknown, UserInstalledApp, AwaitingInstallOnDevice, Updating, ManagementRejected, PromptingForManagement, DownloadInProgress, DownloadFailed, RemoveApplicationFailed, FinalDetectionFailed, DeviceEligibilityCheckFailed, ExecutionFailed, DependentAppValidationFailed, CheckingDeviceEligibility, ValidatingDependentApps, PendingReboot]  # noqa: E501

        :return: The applications_status of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._applications_status

    @applications_status.setter
    def applications_status(self, applications_status):
        """Sets the applications_status of this DevicesFilterCriteriaModel.

        List of device reported status. If nothing is passed, all the assigned devices will be returned based on the other filters. The possible values are [NeedsRedemption, Redeeming, Prompting, Installing, Managed, MDMRemoval, MDMRemoved, ManagedButUninstalled, UserRejected, Failed, Unknown, UserInstalledApp, AwaitingInstallOnDevice, Updating, ManagementRejected, PromptingForManagement, DownloadInProgress, DownloadFailed, RemoveApplicationFailed, FinalDetectionFailed, DeviceEligibilityCheckFailed, ExecutionFailed, DependentAppValidationFailed, CheckingDeviceEligibility, ValidatingDependentApps, PendingReboot]  # noqa: E501

        :param applications_status: The applications_status of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(applications_status).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `applications_status` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(applications_status) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._applications_status = applications_status

    @property
    def last_action_taken(self):
        """Gets the last_action_taken of this DevicesFilterCriteriaModel.  # noqa: E501

        List of possible server side action. If nothing is passed, all the assigned devices will be returned based on the other filters. The possible values are [Unknown, PendingRelease, InstallCommandReadyForDevice, InstallCommandDispatched, InstallCommandFailed, RemoveAppCommandInHeldState, PendingRemoval, RemoveCommandSuccessful, RemoveApplicationFailed, VppLicenseNotAvailable, RequestRejected, RequestError, PendingApproval, RequestExpired, ProvisioningCommandDeleted, UserDeferredInstall]  # noqa: E501

        :return: The last_action_taken of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._last_action_taken

    @last_action_taken.setter
    def last_action_taken(self, last_action_taken):
        """Sets the last_action_taken of this DevicesFilterCriteriaModel.

        List of possible server side action. If nothing is passed, all the assigned devices will be returned based on the other filters. The possible values are [Unknown, PendingRelease, InstallCommandReadyForDevice, InstallCommandDispatched, InstallCommandFailed, RemoveAppCommandInHeldState, PendingRemoval, RemoveCommandSuccessful, RemoveApplicationFailed, VppLicenseNotAvailable, RequestRejected, RequestError, PendingApproval, RequestExpired, ProvisioningCommandDeleted, UserDeferredInstall]  # noqa: E501

        :param last_action_taken: The last_action_taken of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 999]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(last_action_taken).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `last_action_taken` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(last_action_taken) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._last_action_taken = last_action_taken

    @property
    def smart_group_uuids(self):
        """Gets the smart_group_uuids of this DevicesFilterCriteriaModel.  # noqa: E501

        List of smart group identifiers  # noqa: E501

        :return: The smart_group_uuids of this DevicesFilterCriteriaModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._smart_group_uuids

    @smart_group_uuids.setter
    def smart_group_uuids(self, smart_group_uuids):
        """Sets the smart_group_uuids of this DevicesFilterCriteriaModel.

        List of smart group identifiers  # noqa: E501

        :param smart_group_uuids: The smart_group_uuids of this DevicesFilterCriteriaModel.  # noqa: E501
        :type: list[str]
        """

        self._smart_group_uuids = smart_group_uuids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DevicesFilterCriteriaModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DevicesFilterCriteriaModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DevicesFilterCriteriaModel):
            return True

        return self.to_dict() != other.to_dict()
