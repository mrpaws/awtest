# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class WorkflowStatusV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'steps': 'list[WorkflowStepStatusV1Model]',
        'status_updated_on': 'datetime',
        'page': 'int',
        'page_size': 'int',
        'total_count': 'int',
        'device_uuid': 'str',
        'workflow_uuid': 'str',
        'version': 'str',
        'status': 'int',
        'name': 'str'
    }

    attribute_map = {
        'steps': 'steps',
        'status_updated_on': 'status_updated_on',
        'page': 'page',
        'page_size': 'page_size',
        'total_count': 'total_count',
        'device_uuid': 'device_uuid',
        'workflow_uuid': 'workflow_uuid',
        'version': 'version',
        'status': 'status',
        'name': 'name'
    }

    def __init__(self, steps=None, status_updated_on=None, page=None, page_size=None, total_count=None, device_uuid=None, workflow_uuid=None, version=None, status=None, name=None, _configuration=None):  # noqa: E501
        """WorkflowStatusV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._steps = None
        self._status_updated_on = None
        self._page = None
        self._page_size = None
        self._total_count = None
        self._device_uuid = None
        self._workflow_uuid = None
        self._version = None
        self._status = None
        self._name = None
        self.discriminator = None

        if steps is not None:
            self.steps = steps
        if status_updated_on is not None:
            self.status_updated_on = status_updated_on
        if page is not None:
            self.page = page
        if page_size is not None:
            self.page_size = page_size
        if total_count is not None:
            self.total_count = total_count
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if workflow_uuid is not None:
            self.workflow_uuid = workflow_uuid
        if version is not None:
            self.version = version
        if status is not None:
            self.status = status
        if name is not None:
            self.name = name

    @property
    def steps(self):
        """Gets the steps of this WorkflowStatusV1Model.  # noqa: E501


        :return: The steps of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: list[WorkflowStepStatusV1Model]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this WorkflowStatusV1Model.


        :param steps: The steps of this WorkflowStatusV1Model.  # noqa: E501
        :type: list[WorkflowStepStatusV1Model]
        """

        self._steps = steps

    @property
    def status_updated_on(self):
        """Gets the status_updated_on of this WorkflowStatusV1Model.  # noqa: E501


        :return: The status_updated_on of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._status_updated_on

    @status_updated_on.setter
    def status_updated_on(self, status_updated_on):
        """Sets the status_updated_on of this WorkflowStatusV1Model.


        :param status_updated_on: The status_updated_on of this WorkflowStatusV1Model.  # noqa: E501
        :type: datetime
        """

        self._status_updated_on = status_updated_on

    @property
    def page(self):
        """Gets the page of this WorkflowStatusV1Model.  # noqa: E501


        :return: The page of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this WorkflowStatusV1Model.


        :param page: The page of this WorkflowStatusV1Model.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this WorkflowStatusV1Model.  # noqa: E501


        :return: The page_size of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this WorkflowStatusV1Model.


        :param page_size: The page_size of this WorkflowStatusV1Model.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def total_count(self):
        """Gets the total_count of this WorkflowStatusV1Model.  # noqa: E501


        :return: The total_count of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this WorkflowStatusV1Model.


        :param total_count: The total_count of this WorkflowStatusV1Model.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def device_uuid(self):
        """Gets the device_uuid of this WorkflowStatusV1Model.  # noqa: E501


        :return: The device_uuid of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this WorkflowStatusV1Model.


        :param device_uuid: The device_uuid of this WorkflowStatusV1Model.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def workflow_uuid(self):
        """Gets the workflow_uuid of this WorkflowStatusV1Model.  # noqa: E501


        :return: The workflow_uuid of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: str
        """
        return self._workflow_uuid

    @workflow_uuid.setter
    def workflow_uuid(self, workflow_uuid):
        """Sets the workflow_uuid of this WorkflowStatusV1Model.


        :param workflow_uuid: The workflow_uuid of this WorkflowStatusV1Model.  # noqa: E501
        :type: str
        """

        self._workflow_uuid = workflow_uuid

    @property
    def version(self):
        """Gets the version of this WorkflowStatusV1Model.  # noqa: E501


        :return: The version of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkflowStatusV1Model.


        :param version: The version of this WorkflowStatusV1Model.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def status(self):
        """Gets the status of this WorkflowStatusV1Model.  # noqa: E501


        :return: The status of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowStatusV1Model.


        :param status: The status of this WorkflowStatusV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def name(self):
        """Gets the name of this WorkflowStatusV1Model.  # noqa: E501


        :return: The name of this WorkflowStatusV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowStatusV1Model.


        :param name: The name of this WorkflowStatusV1Model.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowStatusV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowStatusV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowStatusV1Model):
            return True

        return self.to_dict() != other.to_dict()
