# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class CertificatePinningHostEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_pinning_guid': 'str',
        'location_group_id': 'int',
        'host_name': 'str',
        'required': 'bool',
        'is_device_services': 'bool',
        'auto_discovery_synced': 'bool',
        'oem_provisioning_service_synced': 'bool',
        'pinned_certs': 'list[CertificatePinningCertEntity]'
    }

    attribute_map = {
        'cert_pinning_guid': 'CertPinningGuid',
        'location_group_id': 'LocationGroupId',
        'host_name': 'HostName',
        'required': 'Required',
        'is_device_services': 'IsDeviceServices',
        'auto_discovery_synced': 'AutoDiscoverySynced',
        'oem_provisioning_service_synced': 'OemProvisioningServiceSynced',
        'pinned_certs': 'PinnedCerts'
    }

    def __init__(self, cert_pinning_guid=None, location_group_id=None, host_name=None, required=None, is_device_services=None, auto_discovery_synced=None, oem_provisioning_service_synced=None, pinned_certs=None, _configuration=None):  # noqa: E501
        """CertificatePinningHostEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cert_pinning_guid = None
        self._location_group_id = None
        self._host_name = None
        self._required = None
        self._is_device_services = None
        self._auto_discovery_synced = None
        self._oem_provisioning_service_synced = None
        self._pinned_certs = None
        self.discriminator = None

        if cert_pinning_guid is not None:
            self.cert_pinning_guid = cert_pinning_guid
        if location_group_id is not None:
            self.location_group_id = location_group_id
        if host_name is not None:
            self.host_name = host_name
        if required is not None:
            self.required = required
        if is_device_services is not None:
            self.is_device_services = is_device_services
        if auto_discovery_synced is not None:
            self.auto_discovery_synced = auto_discovery_synced
        if oem_provisioning_service_synced is not None:
            self.oem_provisioning_service_synced = oem_provisioning_service_synced
        if pinned_certs is not None:
            self.pinned_certs = pinned_certs

    @property
    def cert_pinning_guid(self):
        """Gets the cert_pinning_guid of this CertificatePinningHostEntity.  # noqa: E501


        :return: The cert_pinning_guid of this CertificatePinningHostEntity.  # noqa: E501
        :rtype: str
        """
        return self._cert_pinning_guid

    @cert_pinning_guid.setter
    def cert_pinning_guid(self, cert_pinning_guid):
        """Sets the cert_pinning_guid of this CertificatePinningHostEntity.


        :param cert_pinning_guid: The cert_pinning_guid of this CertificatePinningHostEntity.  # noqa: E501
        :type: str
        """

        self._cert_pinning_guid = cert_pinning_guid

    @property
    def location_group_id(self):
        """Gets the location_group_id of this CertificatePinningHostEntity.  # noqa: E501


        :return: The location_group_id of this CertificatePinningHostEntity.  # noqa: E501
        :rtype: int
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this CertificatePinningHostEntity.


        :param location_group_id: The location_group_id of this CertificatePinningHostEntity.  # noqa: E501
        :type: int
        """

        self._location_group_id = location_group_id

    @property
    def host_name(self):
        """Gets the host_name of this CertificatePinningHostEntity.  # noqa: E501


        :return: The host_name of this CertificatePinningHostEntity.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this CertificatePinningHostEntity.


        :param host_name: The host_name of this CertificatePinningHostEntity.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def required(self):
        """Gets the required of this CertificatePinningHostEntity.  # noqa: E501


        :return: The required of this CertificatePinningHostEntity.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CertificatePinningHostEntity.


        :param required: The required of this CertificatePinningHostEntity.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def is_device_services(self):
        """Gets the is_device_services of this CertificatePinningHostEntity.  # noqa: E501


        :return: The is_device_services of this CertificatePinningHostEntity.  # noqa: E501
        :rtype: bool
        """
        return self._is_device_services

    @is_device_services.setter
    def is_device_services(self, is_device_services):
        """Sets the is_device_services of this CertificatePinningHostEntity.


        :param is_device_services: The is_device_services of this CertificatePinningHostEntity.  # noqa: E501
        :type: bool
        """

        self._is_device_services = is_device_services

    @property
    def auto_discovery_synced(self):
        """Gets the auto_discovery_synced of this CertificatePinningHostEntity.  # noqa: E501


        :return: The auto_discovery_synced of this CertificatePinningHostEntity.  # noqa: E501
        :rtype: bool
        """
        return self._auto_discovery_synced

    @auto_discovery_synced.setter
    def auto_discovery_synced(self, auto_discovery_synced):
        """Sets the auto_discovery_synced of this CertificatePinningHostEntity.


        :param auto_discovery_synced: The auto_discovery_synced of this CertificatePinningHostEntity.  # noqa: E501
        :type: bool
        """

        self._auto_discovery_synced = auto_discovery_synced

    @property
    def oem_provisioning_service_synced(self):
        """Gets the oem_provisioning_service_synced of this CertificatePinningHostEntity.  # noqa: E501


        :return: The oem_provisioning_service_synced of this CertificatePinningHostEntity.  # noqa: E501
        :rtype: bool
        """
        return self._oem_provisioning_service_synced

    @oem_provisioning_service_synced.setter
    def oem_provisioning_service_synced(self, oem_provisioning_service_synced):
        """Sets the oem_provisioning_service_synced of this CertificatePinningHostEntity.


        :param oem_provisioning_service_synced: The oem_provisioning_service_synced of this CertificatePinningHostEntity.  # noqa: E501
        :type: bool
        """

        self._oem_provisioning_service_synced = oem_provisioning_service_synced

    @property
    def pinned_certs(self):
        """Gets the pinned_certs of this CertificatePinningHostEntity.  # noqa: E501


        :return: The pinned_certs of this CertificatePinningHostEntity.  # noqa: E501
        :rtype: list[CertificatePinningCertEntity]
        """
        return self._pinned_certs

    @pinned_certs.setter
    def pinned_certs(self, pinned_certs):
        """Sets the pinned_certs of this CertificatePinningHostEntity.


        :param pinned_certs: The pinned_certs of this CertificatePinningHostEntity.  # noqa: E501
        :type: list[CertificatePinningCertEntity]
        """

        self._pinned_certs = pinned_certs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificatePinningHostEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificatePinningHostEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificatePinningHostEntity):
            return True

        return self.to_dict() != other.to_dict()
