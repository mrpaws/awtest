# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class SendApplicationConfigurationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'int',
        'device_type': 'int',
        'device_uuid': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'application_id': 'ApplicationId',
        'device_type': 'DeviceType',
        'device_uuid': 'deviceUuid',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, application_id=None, device_type=None, device_uuid=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """SendApplicationConfigurationModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application_id = None
        self._device_type = None
        self._device_uuid = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if application_id is not None:
            self.application_id = application_id
        if device_type is not None:
            self.device_type = device_type
        if device_uuid is not None:
            self.device_uuid = device_uuid
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def application_id(self):
        """Gets the application_id of this SendApplicationConfigurationModel.  # noqa: E501

        Gets or sets the ApplicationId (Required).  # noqa: E501

        :return: The application_id of this SendApplicationConfigurationModel.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this SendApplicationConfigurationModel.

        Gets or sets the ApplicationId (Required).  # noqa: E501

        :param application_id: The application_id of this SendApplicationConfigurationModel.  # noqa: E501
        :type: int
        """

        self._application_id = application_id

    @property
    def device_type(self):
        """Gets the device_type of this SendApplicationConfigurationModel.  # noqa: E501

        Gets or sets DeviceType (Required).  # noqa: E501

        :return: The device_type of this SendApplicationConfigurationModel.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this SendApplicationConfigurationModel.

        Gets or sets DeviceType (Required).  # noqa: E501

        :param device_type: The device_type of this SendApplicationConfigurationModel.  # noqa: E501
        :type: int
        """

        self._device_type = device_type

    @property
    def device_uuid(self):
        """Gets the device_uuid of this SendApplicationConfigurationModel.  # noqa: E501

        Gets or sets Device Unique Identifier (Required).  # noqa: E501

        :return: The device_uuid of this SendApplicationConfigurationModel.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this SendApplicationConfigurationModel.

        Gets or sets Device Unique Identifier (Required).  # noqa: E501

        :param device_uuid: The device_uuid of this SendApplicationConfigurationModel.  # noqa: E501
        :type: str
        """

        self._device_uuid = device_uuid

    @property
    def id(self):
        """Gets the id of this SendApplicationConfigurationModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this SendApplicationConfigurationModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SendApplicationConfigurationModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this SendApplicationConfigurationModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this SendApplicationConfigurationModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this SendApplicationConfigurationModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SendApplicationConfigurationModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this SendApplicationConfigurationModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendApplicationConfigurationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendApplicationConfigurationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SendApplicationConfigurationModel):
            return True

        return self.to_dict() != other.to_dict()
