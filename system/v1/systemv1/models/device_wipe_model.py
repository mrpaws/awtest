# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class DeviceWipeModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'device_uuid': 'str',
        'device_type': 'str',
        'event_date': 'datetime',
        'device_name': 'str',
        'status': 'str',
        'wipe_type': 'str',
        'last_seen': 'datetime',
        'device_up': 'bool',
        'organization_group_uuid': 'str',
        'organization_group': 'str',
        'user': 'str',
        'source': 'str',
        'ownership': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'device_uuid': 'device_uuid',
        'device_type': 'device_type',
        'event_date': 'event_date',
        'device_name': 'device_name',
        'status': 'status',
        'wipe_type': 'wipe_type',
        'last_seen': 'last_seen',
        'device_up': 'device_up',
        'organization_group_uuid': 'organization_group_uuid',
        'organization_group': 'organization_group',
        'user': 'user',
        'source': 'source',
        'ownership': 'ownership'
    }

    def __init__(self, uuid=None, device_uuid=None, device_type=None, event_date=None, device_name=None, status=None, wipe_type=None, last_seen=None, device_up=None, organization_group_uuid=None, organization_group=None, user=None, source=None, ownership=None, _configuration=None):  # noqa: E501
        """DeviceWipeModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uuid = None
        self._device_uuid = None
        self._device_type = None
        self._event_date = None
        self._device_name = None
        self._status = None
        self._wipe_type = None
        self._last_seen = None
        self._device_up = None
        self._organization_group_uuid = None
        self._organization_group = None
        self._user = None
        self._source = None
        self._ownership = None
        self.discriminator = None

        self.uuid = uuid
        self.device_uuid = device_uuid
        self.device_type = device_type
        self.event_date = event_date
        self.device_name = device_name
        self.status = status
        self.wipe_type = wipe_type
        self.last_seen = last_seen
        if device_up is not None:
            self.device_up = device_up
        self.organization_group_uuid = organization_group_uuid
        self.organization_group = organization_group
        if user is not None:
            self.user = user
        self.source = source
        self.ownership = ownership

    @property
    def uuid(self):
        """Gets the uuid of this DeviceWipeModel.  # noqa: E501

        The unique identifier of the server action uuid.  # noqa: E501

        :return: The uuid of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceWipeModel.

        The unique identifier of the server action uuid.  # noqa: E501

        :param uuid: The uuid of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def device_uuid(self):
        """Gets the device_uuid of this DeviceWipeModel.  # noqa: E501

        The unique identifier of the device that the wipe action was scheduled for.  # noqa: E501

        :return: The device_uuid of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._device_uuid

    @device_uuid.setter
    def device_uuid(self, device_uuid):
        """Sets the device_uuid of this DeviceWipeModel.

        The unique identifier of the device that the wipe action was scheduled for.  # noqa: E501

        :param device_uuid: The device_uuid of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and device_uuid is None:
            raise ValueError("Invalid value for `device_uuid`, must not be `None`")  # noqa: E501

        self._device_uuid = device_uuid

    @property
    def device_type(self):
        """Gets the device_type of this DeviceWipeModel.  # noqa: E501

        Type of the device.  # noqa: E501

        :return: The device_type of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceWipeModel.

        Type of the device.  # noqa: E501

        :param device_type: The device_type of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "WINDOWS_MOBILE", "APPLE", "ANDROID", "ATHENA", "MOTOROLA", "WINDOWS_PHONE", "WINDOWS_PC", "APPLE_OS_X", "WINDOWS_PHONE_8", "WIN_RT", "APPLE_TV", "QNX", "CHROME_BOOK", "CHROME_OS", "IOT_DEVICE", "IOT_GATEWAY", "LINUX", "MAX_TYPE_VALUE", "PROFILE_RESOURCE", "ZEBRA_PRINTER", "TOSHIBA_PRINTER", "AVERY_DENNISON_PRINTER", "DATA_MAX_O_NEIL_PRINTER", "EPSON", "PROFILE_POLICY", "IPC"]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_type not in allowed_values):
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def event_date(self):
        """Gets the event_date of this DeviceWipeModel.  # noqa: E501

        The time stamp of the device wipe event.  # noqa: E501

        :return: The event_date of this DeviceWipeModel.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this DeviceWipeModel.

        The time stamp of the device wipe event.  # noqa: E501

        :param event_date: The event_date of this DeviceWipeModel.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and event_date is None:
            raise ValueError("Invalid value for `event_date`, must not be `None`")  # noqa: E501

        self._event_date = event_date

    @property
    def device_name(self):
        """Gets the device_name of this DeviceWipeModel.  # noqa: E501

        The friendly name of the device that the wipe action was scheduled for.  # noqa: E501

        :return: The device_name of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this DeviceWipeModel.

        The friendly name of the device that the wipe action was scheduled for.  # noqa: E501

        :param device_name: The device_name of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")  # noqa: E501

        self._device_name = device_name

    @property
    def status(self):
        """Gets the status of this DeviceWipeModel.  # noqa: E501

        The status of the device wipe command.  # noqa: E501

        :return: The status of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceWipeModel.

        The status of the device wipe command.  # noqa: E501

        :param status: The status of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "APPROVED", "HELD", "QUEUED", "ABORTED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def wipe_type(self):
        """Gets the wipe_type of this DeviceWipeModel.  # noqa: E501

        The wipe action type.  # noqa: E501

        :return: The wipe_type of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._wipe_type

    @wipe_type.setter
    def wipe_type(self, wipe_type):
        """Sets the wipe_type of this DeviceWipeModel.

        The wipe action type.  # noqa: E501

        :param wipe_type: The wipe_type of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and wipe_type is None:
            raise ValueError("Invalid value for `wipe_type`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "DEVICE_WIPE", "ENTERPRISE_WIPE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                wipe_type not in allowed_values):
            raise ValueError(
                "Invalid value for `wipe_type` ({0}), must be one of {1}"  # noqa: E501
                .format(wipe_type, allowed_values)
            )

        self._wipe_type = wipe_type

    @property
    def last_seen(self):
        """Gets the last_seen of this DeviceWipeModel.  # noqa: E501

        The timestamp of when the device was last seen.  # noqa: E501

        :return: The last_seen of this DeviceWipeModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this DeviceWipeModel.

        The timestamp of when the device was last seen.  # noqa: E501

        :param last_seen: The last_seen of this DeviceWipeModel.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and last_seen is None:
            raise ValueError("Invalid value for `last_seen`, must not be `None`")  # noqa: E501

        self._last_seen = last_seen

    @property
    def device_up(self):
        """Gets the device_up of this DeviceWipeModel.  # noqa: E501

        A flag indicating whether the device has checked in within the device timeout period.  # noqa: E501

        :return: The device_up of this DeviceWipeModel.  # noqa: E501
        :rtype: bool
        """
        return self._device_up

    @device_up.setter
    def device_up(self, device_up):
        """Sets the device_up of this DeviceWipeModel.

        A flag indicating whether the device has checked in within the device timeout period.  # noqa: E501

        :param device_up: The device_up of this DeviceWipeModel.  # noqa: E501
        :type: bool
        """

        self._device_up = device_up

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this DeviceWipeModel.  # noqa: E501

        The unique identifier of the device's organization group.  # noqa: E501

        :return: The organization_group_uuid of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this DeviceWipeModel.

        The unique identifier of the device's organization group.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and organization_group_uuid is None:
            raise ValueError("Invalid value for `organization_group_uuid`, must not be `None`")  # noqa: E501

        self._organization_group_uuid = organization_group_uuid

    @property
    def organization_group(self):
        """Gets the organization_group of this DeviceWipeModel.  # noqa: E501

        The device's organization group.  # noqa: E501

        :return: The organization_group of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._organization_group

    @organization_group.setter
    def organization_group(self, organization_group):
        """Sets the organization_group of this DeviceWipeModel.

        The device's organization group.  # noqa: E501

        :param organization_group: The organization_group of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and organization_group is None:
            raise ValueError("Invalid value for `organization_group`, must not be `None`")  # noqa: E501

        self._organization_group = organization_group

    @property
    def user(self):
        """Gets the user of this DeviceWipeModel.  # noqa: E501

        The enrollment user of the device that the wipe action was scheduled for.  # noqa: E501

        :return: The user of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DeviceWipeModel.

        The enrollment user of the device that the wipe action was scheduled for.  # noqa: E501

        :param user: The user of this DeviceWipeModel.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def source(self):
        """Gets the source of this DeviceWipeModel.  # noqa: E501

        The source of the device wipe action.  # noqa: E501

        :return: The source of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DeviceWipeModel.

        The source of the device wipe action.  # noqa: E501

        :param source: The source of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "OTHER", "DEVICE_DENYLIST_ACTION", "COMPLIANCE", "USER_DISABLED", "ADMIN_ACTION", "ADMIN_BULK_ACTION", "SELF_SERVICE_PORTAL", "DEVICE_SYNC", "SMART_GROUP_EDIT", "BULK_API_ACTION", "DEVICE_UNENROLLMENT_REQUESTED", "ADMIN_ACTION_DELETE_DEVICE", "ADMIN_BULK_ACTION_DELETE_DEVICE", "BULK_ADMIN_API_ACTION_DELETE_DEVICE", "SINGLE_ADMIN_API_ACTION_DELETE_DEVICE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                source not in allowed_values):
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def ownership(self):
        """Gets the ownership of this DeviceWipeModel.  # noqa: E501

        The display name of the device ownership type.  # noqa: E501

        :return: The ownership of this DeviceWipeModel.  # noqa: E501
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this DeviceWipeModel.

        The display name of the device ownership type.  # noqa: E501

        :param ownership: The ownership of this DeviceWipeModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ownership is None:
            raise ValueError("Invalid value for `ownership`, must not be `None`")  # noqa: E501
        allowed_values = ["ANY", "UNKNOWN", "CORPORATE_DEDICATED", "EMPLOYEE_OWNED", "CORPORATE_SHARED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                ownership not in allowed_values):
            raise ValueError(
                "Invalid value for `ownership` ({0}), must be one of {1}"  # noqa: E501
                .format(ownership, allowed_values)
            )

        self._ownership = ownership

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceWipeModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceWipeModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceWipeModel):
            return True

        return self.to_dict() != other.to_dict()
