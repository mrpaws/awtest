# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv2.configuration import Configuration


class DeviceAttributesModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_number': 'bool',
        'friendly_name': 'bool',
        'organization_group': 'bool',
        'user_email_address': 'bool',
        'ownership': 'bool',
        'operating_system': 'bool',
        'phone_number': 'bool',
        'device_mcc': 'bool'
    }

    attribute_map = {
        'asset_number': 'AssetNumber',
        'friendly_name': 'FriendlyName',
        'organization_group': 'OrganizationGroup',
        'user_email_address': 'UserEmailAddress',
        'ownership': 'Ownership',
        'operating_system': 'OperatingSystem',
        'phone_number': 'PhoneNumber',
        'device_mcc': 'DeviceMCC'
    }

    def __init__(self, asset_number=None, friendly_name=None, organization_group=None, user_email_address=None, ownership=None, operating_system=None, phone_number=None, device_mcc=None, _configuration=None):  # noqa: E501
        """DeviceAttributesModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset_number = None
        self._friendly_name = None
        self._organization_group = None
        self._user_email_address = None
        self._ownership = None
        self._operating_system = None
        self._phone_number = None
        self._device_mcc = None
        self.discriminator = None

        if asset_number is not None:
            self.asset_number = asset_number
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if organization_group is not None:
            self.organization_group = organization_group
        if user_email_address is not None:
            self.user_email_address = user_email_address
        if ownership is not None:
            self.ownership = ownership
        if operating_system is not None:
            self.operating_system = operating_system
        if phone_number is not None:
            self.phone_number = phone_number
        if device_mcc is not None:
            self.device_mcc = device_mcc

    @property
    def asset_number(self):
        """Gets the asset_number of this DeviceAttributesModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device asset number.  # noqa: E501

        :return: The asset_number of this DeviceAttributesModel.  # noqa: E501
        :rtype: bool
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this DeviceAttributesModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device asset number.  # noqa: E501

        :param asset_number: The asset_number of this DeviceAttributesModel.  # noqa: E501
        :type: bool
        """

        self._asset_number = asset_number

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DeviceAttributesModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device friendly name.  # noqa: E501

        :return: The friendly_name of this DeviceAttributesModel.  # noqa: E501
        :rtype: bool
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DeviceAttributesModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device friendly name.  # noqa: E501

        :param friendly_name: The friendly_name of this DeviceAttributesModel.  # noqa: E501
        :type: bool
        """

        self._friendly_name = friendly_name

    @property
    def organization_group(self):
        """Gets the organization_group of this DeviceAttributesModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has triggered a changed organization group for a device.  # noqa: E501

        :return: The organization_group of this DeviceAttributesModel.  # noqa: E501
        :rtype: bool
        """
        return self._organization_group

    @organization_group.setter
    def organization_group(self, organization_group):
        """Sets the organization_group of this DeviceAttributesModel.

        Gets or sets a value indicating whether indicates whether an outbound event has triggered a changed organization group for a device.  # noqa: E501

        :param organization_group: The organization_group of this DeviceAttributesModel.  # noqa: E501
        :type: bool
        """

        self._organization_group = organization_group

    @property
    def user_email_address(self):
        """Gets the user_email_address of this DeviceAttributesModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a existing user email address.  # noqa: E501

        :return: The user_email_address of this DeviceAttributesModel.  # noqa: E501
        :rtype: bool
        """
        return self._user_email_address

    @user_email_address.setter
    def user_email_address(self, user_email_address):
        """Sets the user_email_address of this DeviceAttributesModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a existing user email address.  # noqa: E501

        :param user_email_address: The user_email_address of this DeviceAttributesModel.  # noqa: E501
        :type: bool
        """

        self._user_email_address = user_email_address

    @property
    def ownership(self):
        """Gets the ownership of this DeviceAttributesModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for ownership of a device.  # noqa: E501

        :return: The ownership of this DeviceAttributesModel.  # noqa: E501
        :rtype: bool
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this DeviceAttributesModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for ownership of a device.  # noqa: E501

        :param ownership: The ownership of this DeviceAttributesModel.  # noqa: E501
        :type: bool
        """

        self._ownership = ownership

    @property
    def operating_system(self):
        """Gets the operating_system of this DeviceAttributesModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device's operating system.  # noqa: E501

        :return: The operating_system of this DeviceAttributesModel.  # noqa: E501
        :rtype: bool
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this DeviceAttributesModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device's operating system.  # noqa: E501

        :param operating_system: The operating_system of this DeviceAttributesModel.  # noqa: E501
        :type: bool
        """

        self._operating_system = operating_system

    @property
    def phone_number(self):
        """Gets the phone_number of this DeviceAttributesModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device's phone number.  # noqa: E501

        :return: The phone_number of this DeviceAttributesModel.  # noqa: E501
        :rtype: bool
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this DeviceAttributesModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device's phone number.  # noqa: E501

        :param phone_number: The phone_number of this DeviceAttributesModel.  # noqa: E501
        :type: bool
        """

        self._phone_number = phone_number

    @property
    def device_mcc(self):
        """Gets the device_mcc of this DeviceAttributesModel.  # noqa: E501

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device's MCC.  # noqa: E501

        :return: The device_mcc of this DeviceAttributesModel.  # noqa: E501
        :rtype: bool
        """
        return self._device_mcc

    @device_mcc.setter
    def device_mcc(self, device_mcc):
        """Sets the device_mcc of this DeviceAttributesModel.

        Gets or sets a value indicating whether indicates whether an outbound event has been triggered for a device's MCC.  # noqa: E501

        :param device_mcc: The device_mcc of this DeviceAttributesModel.  # noqa: E501
        :type: bool
        """

        self._device_mcc = device_mcc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceAttributesModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceAttributesModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceAttributesModel):
            return True

        return self.to_dict() != other.to_dict()
