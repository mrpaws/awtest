# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ResourcePolicyV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_required': 'bool',
        'is_evm': 'bool',
        'retry_count': 'int',
        'retry_backoff': 'int',
        'timeout': 'int'
    }

    attribute_map = {
        'is_required': 'is_required',
        'is_evm': 'is_evm',
        'retry_count': 'retry_count',
        'retry_backoff': 'retry_backoff',
        'timeout': 'timeout'
    }

    def __init__(self, is_required=None, is_evm=None, retry_count=None, retry_backoff=None, timeout=None, _configuration=None):  # noqa: E501
        """ResourcePolicyV1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_required = None
        self._is_evm = None
        self._retry_count = None
        self._retry_backoff = None
        self._timeout = None
        self.discriminator = None

        if is_required is not None:
            self.is_required = is_required
        if is_evm is not None:
            self.is_evm = is_evm
        if retry_count is not None:
            self.retry_count = retry_count
        if retry_backoff is not None:
            self.retry_backoff = retry_backoff
        if timeout is not None:
            self.timeout = timeout

    @property
    def is_required(self):
        """Gets the is_required of this ResourcePolicyV1.  # noqa: E501


        :return: The is_required of this ResourcePolicyV1.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this ResourcePolicyV1.


        :param is_required: The is_required of this ResourcePolicyV1.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def is_evm(self):
        """Gets the is_evm of this ResourcePolicyV1.  # noqa: E501


        :return: The is_evm of this ResourcePolicyV1.  # noqa: E501
        :rtype: bool
        """
        return self._is_evm

    @is_evm.setter
    def is_evm(self, is_evm):
        """Sets the is_evm of this ResourcePolicyV1.


        :param is_evm: The is_evm of this ResourcePolicyV1.  # noqa: E501
        :type: bool
        """

        self._is_evm = is_evm

    @property
    def retry_count(self):
        """Gets the retry_count of this ResourcePolicyV1.  # noqa: E501


        :return: The retry_count of this ResourcePolicyV1.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this ResourcePolicyV1.


        :param retry_count: The retry_count of this ResourcePolicyV1.  # noqa: E501
        :type: int
        """

        self._retry_count = retry_count

    @property
    def retry_backoff(self):
        """Gets the retry_backoff of this ResourcePolicyV1.  # noqa: E501


        :return: The retry_backoff of this ResourcePolicyV1.  # noqa: E501
        :rtype: int
        """
        return self._retry_backoff

    @retry_backoff.setter
    def retry_backoff(self, retry_backoff):
        """Sets the retry_backoff of this ResourcePolicyV1.


        :param retry_backoff: The retry_backoff of this ResourcePolicyV1.  # noqa: E501
        :type: int
        """

        self._retry_backoff = retry_backoff

    @property
    def timeout(self):
        """Gets the timeout of this ResourcePolicyV1.  # noqa: E501


        :return: The timeout of this ResourcePolicyV1.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ResourcePolicyV1.


        :param timeout: The timeout of this ResourcePolicyV1.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourcePolicyV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourcePolicyV1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourcePolicyV1):
            return True

        return self.to_dict() != other.to_dict()
