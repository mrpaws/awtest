# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXRestrictionFunctionalityPayloadEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'i_cloud': 'AppleOsXRestrictionICloudPayloadEntity_',
        'spotlight': 'AppleOsXRestrictionSpotlightPayloadEntity_',
        'air_print': 'AppleOsXRestrictionAirPrintPayloadEntity_',
        'content_caching': 'AppleOsXRestrictionContentCachingPayloadEntity_',
        'passwords': 'AppleOsXRestrictionPasswordsPayloadEntity_'
    }

    attribute_map = {
        'i_cloud': 'ICloud',
        'spotlight': 'Spotlight',
        'air_print': 'AirPrint',
        'content_caching': 'ContentCaching',
        'passwords': 'Passwords'
    }

    def __init__(self, i_cloud=None, spotlight=None, air_print=None, content_caching=None, passwords=None, _configuration=None):  # noqa: E501
        """AppleOsXRestrictionFunctionalityPayloadEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._i_cloud = None
        self._spotlight = None
        self._air_print = None
        self._content_caching = None
        self._passwords = None
        self.discriminator = None

        if i_cloud is not None:
            self.i_cloud = i_cloud
        if spotlight is not None:
            self.spotlight = spotlight
        if air_print is not None:
            self.air_print = air_print
        if content_caching is not None:
            self.content_caching = content_caching
        if passwords is not None:
            self.passwords = passwords

    @property
    def i_cloud(self):
        """Gets the i_cloud of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501

        Gets or sets restriction iCloud payload.  # noqa: E501

        :return: The i_cloud of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionICloudPayloadEntity_
        """
        return self._i_cloud

    @i_cloud.setter
    def i_cloud(self, i_cloud):
        """Sets the i_cloud of this AppleOsXRestrictionFunctionalityPayloadEntity.

        Gets or sets restriction iCloud payload.  # noqa: E501

        :param i_cloud: The i_cloud of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionICloudPayloadEntity_
        """

        self._i_cloud = i_cloud

    @property
    def spotlight(self):
        """Gets the spotlight of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501

        Gets or sets restriction Spotlight payload.  # noqa: E501

        :return: The spotlight of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionSpotlightPayloadEntity_
        """
        return self._spotlight

    @spotlight.setter
    def spotlight(self, spotlight):
        """Sets the spotlight of this AppleOsXRestrictionFunctionalityPayloadEntity.

        Gets or sets restriction Spotlight payload.  # noqa: E501

        :param spotlight: The spotlight of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionSpotlightPayloadEntity_
        """

        self._spotlight = spotlight

    @property
    def air_print(self):
        """Gets the air_print of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501

        Gets or sets restriction AirPrint payload.  # noqa: E501

        :return: The air_print of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionAirPrintPayloadEntity_
        """
        return self._air_print

    @air_print.setter
    def air_print(self, air_print):
        """Sets the air_print of this AppleOsXRestrictionFunctionalityPayloadEntity.

        Gets or sets restriction AirPrint payload.  # noqa: E501

        :param air_print: The air_print of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionAirPrintPayloadEntity_
        """

        self._air_print = air_print

    @property
    def content_caching(self):
        """Gets the content_caching of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501

        Gets or sets restriction Content Caching payload.  # noqa: E501

        :return: The content_caching of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionContentCachingPayloadEntity_
        """
        return self._content_caching

    @content_caching.setter
    def content_caching(self, content_caching):
        """Sets the content_caching of this AppleOsXRestrictionFunctionalityPayloadEntity.

        Gets or sets restriction Content Caching payload.  # noqa: E501

        :param content_caching: The content_caching of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionContentCachingPayloadEntity_
        """

        self._content_caching = content_caching

    @property
    def passwords(self):
        """Gets the passwords of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501

        Gets or sets restriction passwords payload.  # noqa: E501

        :return: The passwords of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :rtype: AppleOsXRestrictionPasswordsPayloadEntity_
        """
        return self._passwords

    @passwords.setter
    def passwords(self, passwords):
        """Sets the passwords of this AppleOsXRestrictionFunctionalityPayloadEntity.

        Gets or sets restriction passwords payload.  # noqa: E501

        :param passwords: The passwords of this AppleOsXRestrictionFunctionalityPayloadEntity.  # noqa: E501
        :type: AppleOsXRestrictionPasswordsPayloadEntity_
        """

        self._passwords = passwords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXRestrictionFunctionalityPayloadEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXRestrictionFunctionalityPayloadEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXRestrictionFunctionalityPayloadEntity):
            return True

        return self.to_dict() != other.to_dict()
