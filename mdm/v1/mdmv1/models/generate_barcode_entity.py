# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class GenerateBarcodeEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'staging_profile_id': 'int',
        'organization_group_id': 'int',
        'universal_barcode': 'bool',
        'staging_relay_server_id': 'int',
        'wifi_profile_id': 'int',
        'encryption_passphrase_method': 'int',
        'passphrase': 'str',
        'barcode_format_pdf417': 'bool',
        'barcode_format_narrow_pdf417': 'bool',
        'barcode_format_linear': 'bool',
        'barcode_format_narrow_linear': 'bool'
    }

    attribute_map = {
        'staging_profile_id': 'StagingProfileID',
        'organization_group_id': 'OrganizationGroupID',
        'universal_barcode': 'UniversalBarcode',
        'staging_relay_server_id': 'StagingRelayServerID',
        'wifi_profile_id': 'WifiProfileID',
        'encryption_passphrase_method': 'EncryptionPassphraseMethod',
        'passphrase': 'Passphrase',
        'barcode_format_pdf417': 'BarcodeFormatPDF417',
        'barcode_format_narrow_pdf417': 'BarcodeFormatNarrowPDF417',
        'barcode_format_linear': 'BarcodeFormatLinear',
        'barcode_format_narrow_linear': 'BarcodeFormatNarrowLinear'
    }

    def __init__(self, staging_profile_id=None, organization_group_id=None, universal_barcode=None, staging_relay_server_id=None, wifi_profile_id=None, encryption_passphrase_method=None, passphrase=None, barcode_format_pdf417=None, barcode_format_narrow_pdf417=None, barcode_format_linear=None, barcode_format_narrow_linear=None, _configuration=None):  # noqa: E501
        """GenerateBarcodeEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._staging_profile_id = None
        self._organization_group_id = None
        self._universal_barcode = None
        self._staging_relay_server_id = None
        self._wifi_profile_id = None
        self._encryption_passphrase_method = None
        self._passphrase = None
        self._barcode_format_pdf417 = None
        self._barcode_format_narrow_pdf417 = None
        self._barcode_format_linear = None
        self._barcode_format_narrow_linear = None
        self.discriminator = None

        if staging_profile_id is not None:
            self.staging_profile_id = staging_profile_id
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if universal_barcode is not None:
            self.universal_barcode = universal_barcode
        if staging_relay_server_id is not None:
            self.staging_relay_server_id = staging_relay_server_id
        if wifi_profile_id is not None:
            self.wifi_profile_id = wifi_profile_id
        if encryption_passphrase_method is not None:
            self.encryption_passphrase_method = encryption_passphrase_method
        if passphrase is not None:
            self.passphrase = passphrase
        if barcode_format_pdf417 is not None:
            self.barcode_format_pdf417 = barcode_format_pdf417
        if barcode_format_narrow_pdf417 is not None:
            self.barcode_format_narrow_pdf417 = barcode_format_narrow_pdf417
        if barcode_format_linear is not None:
            self.barcode_format_linear = barcode_format_linear
        if barcode_format_narrow_linear is not None:
            self.barcode_format_narrow_linear = barcode_format_narrow_linear

    @property
    def staging_profile_id(self):
        """Gets the staging_profile_id of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets the identifier of the staging profile for which barcode has to be generated.  # noqa: E501

        :return: The staging_profile_id of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: int
        """
        return self._staging_profile_id

    @staging_profile_id.setter
    def staging_profile_id(self, staging_profile_id):
        """Sets the staging_profile_id of this GenerateBarcodeEntity.

        Gets or sets the identifier of the staging profile for which barcode has to be generated.  # noqa: E501

        :param staging_profile_id: The staging_profile_id of this GenerateBarcodeEntity.  # noqa: E501
        :type: int
        """

        self._staging_profile_id = staging_profile_id

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets organizationGroup under which the staging profile is being managed.  # noqa: E501

        :return: The organization_group_id of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this GenerateBarcodeEntity.

        Gets or sets organizationGroup under which the staging profile is being managed.  # noqa: E501

        :param organization_group_id: The organization_group_id of this GenerateBarcodeEntity.  # noqa: E501
        :type: int
        """

        self._organization_group_id = organization_group_id

    @property
    def universal_barcode(self):
        """Gets the universal_barcode of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets a value indicating whether whether the barcode can be used to enroll the device to any OG (Universal).  # noqa: E501

        :return: The universal_barcode of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: bool
        """
        return self._universal_barcode

    @universal_barcode.setter
    def universal_barcode(self, universal_barcode):
        """Sets the universal_barcode of this GenerateBarcodeEntity.

        Gets or sets a value indicating whether whether the barcode can be used to enroll the device to any OG (Universal).  # noqa: E501

        :param universal_barcode: The universal_barcode of this GenerateBarcodeEntity.  # noqa: E501
        :type: bool
        """

        self._universal_barcode = universal_barcode

    @property
    def staging_relay_server_id(self):
        """Gets the staging_relay_server_id of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets identifier of Relay Server where the files will be pushed.  # noqa: E501

        :return: The staging_relay_server_id of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: int
        """
        return self._staging_relay_server_id

    @staging_relay_server_id.setter
    def staging_relay_server_id(self, staging_relay_server_id):
        """Sets the staging_relay_server_id of this GenerateBarcodeEntity.

        Gets or sets identifier of Relay Server where the files will be pushed.  # noqa: E501

        :param staging_relay_server_id: The staging_relay_server_id of this GenerateBarcodeEntity.  # noqa: E501
        :type: int
        """

        self._staging_relay_server_id = staging_relay_server_id

    @property
    def wifi_profile_id(self):
        """Gets the wifi_profile_id of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets identifier of wifi profile for connection.  # noqa: E501

        :return: The wifi_profile_id of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: int
        """
        return self._wifi_profile_id

    @wifi_profile_id.setter
    def wifi_profile_id(self, wifi_profile_id):
        """Sets the wifi_profile_id of this GenerateBarcodeEntity.

        Gets or sets identifier of wifi profile for connection.  # noqa: E501

        :param wifi_profile_id: The wifi_profile_id of this GenerateBarcodeEntity.  # noqa: E501
        :type: int
        """

        self._wifi_profile_id = wifi_profile_id

    @property
    def encryption_passphrase_method(self):
        """Gets the encryption_passphrase_method of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets the type of encryption passphrase to be used for barcode generation. 1 - built-in, 2 - user defined.  # noqa: E501

        :return: The encryption_passphrase_method of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: int
        """
        return self._encryption_passphrase_method

    @encryption_passphrase_method.setter
    def encryption_passphrase_method(self, encryption_passphrase_method):
        """Sets the encryption_passphrase_method of this GenerateBarcodeEntity.

        Gets or sets the type of encryption passphrase to be used for barcode generation. 1 - built-in, 2 - user defined.  # noqa: E501

        :param encryption_passphrase_method: The encryption_passphrase_method of this GenerateBarcodeEntity.  # noqa: E501
        :type: int
        """

        self._encryption_passphrase_method = encryption_passphrase_method

    @property
    def passphrase(self):
        """Gets the passphrase of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets passcode validation on the device immediately after scanning the barcode (only for EncryptionPassphraseMethod - user-defined).  # noqa: E501

        :return: The passphrase of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this GenerateBarcodeEntity.

        Gets or sets passcode validation on the device immediately after scanning the barcode (only for EncryptionPassphraseMethod - user-defined).  # noqa: E501

        :param passphrase: The passphrase of this GenerateBarcodeEntity.  # noqa: E501
        :type: str
        """

        self._passphrase = passphrase

    @property
    def barcode_format_pdf417(self):
        """Gets the barcode_format_pdf417 of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets a value indicating whether whether the required format is PDF417.  # noqa: E501

        :return: The barcode_format_pdf417 of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: bool
        """
        return self._barcode_format_pdf417

    @barcode_format_pdf417.setter
    def barcode_format_pdf417(self, barcode_format_pdf417):
        """Sets the barcode_format_pdf417 of this GenerateBarcodeEntity.

        Gets or sets a value indicating whether whether the required format is PDF417.  # noqa: E501

        :param barcode_format_pdf417: The barcode_format_pdf417 of this GenerateBarcodeEntity.  # noqa: E501
        :type: bool
        """

        self._barcode_format_pdf417 = barcode_format_pdf417

    @property
    def barcode_format_narrow_pdf417(self):
        """Gets the barcode_format_narrow_pdf417 of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets a value indicating whether whether the required format is NarrowPDF417.  # noqa: E501

        :return: The barcode_format_narrow_pdf417 of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: bool
        """
        return self._barcode_format_narrow_pdf417

    @barcode_format_narrow_pdf417.setter
    def barcode_format_narrow_pdf417(self, barcode_format_narrow_pdf417):
        """Sets the barcode_format_narrow_pdf417 of this GenerateBarcodeEntity.

        Gets or sets a value indicating whether whether the required format is NarrowPDF417.  # noqa: E501

        :param barcode_format_narrow_pdf417: The barcode_format_narrow_pdf417 of this GenerateBarcodeEntity.  # noqa: E501
        :type: bool
        """

        self._barcode_format_narrow_pdf417 = barcode_format_narrow_pdf417

    @property
    def barcode_format_linear(self):
        """Gets the barcode_format_linear of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets a value indicating whether whether the required format is Linear.  # noqa: E501

        :return: The barcode_format_linear of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: bool
        """
        return self._barcode_format_linear

    @barcode_format_linear.setter
    def barcode_format_linear(self, barcode_format_linear):
        """Sets the barcode_format_linear of this GenerateBarcodeEntity.

        Gets or sets a value indicating whether whether the required format is Linear.  # noqa: E501

        :param barcode_format_linear: The barcode_format_linear of this GenerateBarcodeEntity.  # noqa: E501
        :type: bool
        """

        self._barcode_format_linear = barcode_format_linear

    @property
    def barcode_format_narrow_linear(self):
        """Gets the barcode_format_narrow_linear of this GenerateBarcodeEntity.  # noqa: E501

        Gets or sets a value indicating whether whether the required format is NarrowLinear.  # noqa: E501

        :return: The barcode_format_narrow_linear of this GenerateBarcodeEntity.  # noqa: E501
        :rtype: bool
        """
        return self._barcode_format_narrow_linear

    @barcode_format_narrow_linear.setter
    def barcode_format_narrow_linear(self, barcode_format_narrow_linear):
        """Sets the barcode_format_narrow_linear of this GenerateBarcodeEntity.

        Gets or sets a value indicating whether whether the required format is NarrowLinear.  # noqa: E501

        :param barcode_format_narrow_linear: The barcode_format_narrow_linear of this GenerateBarcodeEntity.  # noqa: E501
        :type: bool
        """

        self._barcode_format_narrow_linear = barcode_format_narrow_linear

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerateBarcodeEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateBarcodeEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateBarcodeEntity):
            return True

        return self.to_dict() != other.to_dict()
