# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class LoggedInUsersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'managed_apple_id': 'str',
        'is_active_user': 'bool',
        'has_data_to_sync': 'bool',
        'data_quota': 'float',
        'data_used': 'float',
        'sample_time': 'datetime',
        'last_logged_in_time': 'datetime',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'managed_apple_id': 'managedAppleId',
        'is_active_user': 'isActiveUser',
        'has_data_to_sync': 'hasDataToSync',
        'data_quota': 'dataQuota',
        'data_used': 'dataUsed',
        'sample_time': 'sampleTime',
        'last_logged_in_time': 'lastLoggedInTime',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, name=None, managed_apple_id=None, is_active_user=None, has_data_to_sync=None, data_quota=None, data_used=None, sample_time=None, last_logged_in_time=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """LoggedInUsersModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._managed_apple_id = None
        self._is_active_user = None
        self._has_data_to_sync = None
        self._data_quota = None
        self._data_used = None
        self._sample_time = None
        self._last_logged_in_time = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if managed_apple_id is not None:
            self.managed_apple_id = managed_apple_id
        if is_active_user is not None:
            self.is_active_user = is_active_user
        if has_data_to_sync is not None:
            self.has_data_to_sync = has_data_to_sync
        if data_quota is not None:
            self.data_quota = data_quota
        if data_used is not None:
            self.data_used = data_used
        if sample_time is not None:
            self.sample_time = sample_time
        if last_logged_in_time is not None:
            self.last_logged_in_time = last_logged_in_time
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def name(self):
        """Gets the name of this LoggedInUsersModel.  # noqa: E501

        Gets or sets the name of the logged in user.  # noqa: E501

        :return: The name of this LoggedInUsersModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoggedInUsersModel.

        Gets or sets the name of the logged in user.  # noqa: E501

        :param name: The name of this LoggedInUsersModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def managed_apple_id(self):
        """Gets the managed_apple_id of this LoggedInUsersModel.  # noqa: E501

        Gets or sets the apple id.  # noqa: E501

        :return: The managed_apple_id of this LoggedInUsersModel.  # noqa: E501
        :rtype: str
        """
        return self._managed_apple_id

    @managed_apple_id.setter
    def managed_apple_id(self, managed_apple_id):
        """Sets the managed_apple_id of this LoggedInUsersModel.

        Gets or sets the apple id.  # noqa: E501

        :param managed_apple_id: The managed_apple_id of this LoggedInUsersModel.  # noqa: E501
        :type: str
        """

        self._managed_apple_id = managed_apple_id

    @property
    def is_active_user(self):
        """Gets the is_active_user of this LoggedInUsersModel.  # noqa: E501

        Gets or sets a value indicating whether is active user.  # noqa: E501

        :return: The is_active_user of this LoggedInUsersModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_user

    @is_active_user.setter
    def is_active_user(self, is_active_user):
        """Sets the is_active_user of this LoggedInUsersModel.

        Gets or sets a value indicating whether is active user.  # noqa: E501

        :param is_active_user: The is_active_user of this LoggedInUsersModel.  # noqa: E501
        :type: bool
        """

        self._is_active_user = is_active_user

    @property
    def has_data_to_sync(self):
        """Gets the has_data_to_sync of this LoggedInUsersModel.  # noqa: E501

        Gets or sets a value indicating whether has data to sync.  # noqa: E501

        :return: The has_data_to_sync of this LoggedInUsersModel.  # noqa: E501
        :rtype: bool
        """
        return self._has_data_to_sync

    @has_data_to_sync.setter
    def has_data_to_sync(self, has_data_to_sync):
        """Sets the has_data_to_sync of this LoggedInUsersModel.

        Gets or sets a value indicating whether has data to sync.  # noqa: E501

        :param has_data_to_sync: The has_data_to_sync of this LoggedInUsersModel.  # noqa: E501
        :type: bool
        """

        self._has_data_to_sync = has_data_to_sync

    @property
    def data_quota(self):
        """Gets the data_quota of this LoggedInUsersModel.  # noqa: E501

        Gets or sets the data quota.  # noqa: E501

        :return: The data_quota of this LoggedInUsersModel.  # noqa: E501
        :rtype: float
        """
        return self._data_quota

    @data_quota.setter
    def data_quota(self, data_quota):
        """Sets the data_quota of this LoggedInUsersModel.

        Gets or sets the data quota.  # noqa: E501

        :param data_quota: The data_quota of this LoggedInUsersModel.  # noqa: E501
        :type: float
        """

        self._data_quota = data_quota

    @property
    def data_used(self):
        """Gets the data_used of this LoggedInUsersModel.  # noqa: E501

        Gets or sets the data used.  # noqa: E501

        :return: The data_used of this LoggedInUsersModel.  # noqa: E501
        :rtype: float
        """
        return self._data_used

    @data_used.setter
    def data_used(self, data_used):
        """Sets the data_used of this LoggedInUsersModel.

        Gets or sets the data used.  # noqa: E501

        :param data_used: The data_used of this LoggedInUsersModel.  # noqa: E501
        :type: float
        """

        self._data_used = data_used

    @property
    def sample_time(self):
        """Gets the sample_time of this LoggedInUsersModel.  # noqa: E501

        Gets or sets the sample time.  # noqa: E501

        :return: The sample_time of this LoggedInUsersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._sample_time

    @sample_time.setter
    def sample_time(self, sample_time):
        """Sets the sample_time of this LoggedInUsersModel.

        Gets or sets the sample time.  # noqa: E501

        :param sample_time: The sample_time of this LoggedInUsersModel.  # noqa: E501
        :type: datetime
        """

        self._sample_time = sample_time

    @property
    def last_logged_in_time(self):
        """Gets the last_logged_in_time of this LoggedInUsersModel.  # noqa: E501

        Gets or sets the last logged in time.  # noqa: E501

        :return: The last_logged_in_time of this LoggedInUsersModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_logged_in_time

    @last_logged_in_time.setter
    def last_logged_in_time(self, last_logged_in_time):
        """Sets the last_logged_in_time of this LoggedInUsersModel.

        Gets or sets the last logged in time.  # noqa: E501

        :param last_logged_in_time: The last_logged_in_time of this LoggedInUsersModel.  # noqa: E501
        :type: datetime
        """

        self._last_logged_in_time = last_logged_in_time

    @property
    def id(self):
        """Gets the id of this LoggedInUsersModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this LoggedInUsersModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoggedInUsersModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this LoggedInUsersModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this LoggedInUsersModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this LoggedInUsersModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this LoggedInUsersModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this LoggedInUsersModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoggedInUsersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoggedInUsersModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoggedInUsersModel):
            return True

        return self.to_dict() != other.to_dict()
