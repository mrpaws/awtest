# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidEASPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mail_client': 'int',
        'account_name': 'str',
        'exchange_active_sync_host': 'str',
        'ignore_ssl_errors': 'bool',
        'use_ssl': 'bool',
        'make_this_account_default_account': 'bool',
        'domain': 'str',
        'user': 'str',
        'email_address': 'str',
        'password': 'str',
        'identity_certificate': 'str',
        'past_days_of_mail_to_sync': 'int',
        'sync_interval': 'int',
        'past_days_of_calendar_to_sync': 'int',
        'sync_mail': 'bool',
        'allow_sync_calendar': 'bool',
        'allow_sync_contacts': 'bool',
        'allow_sync_tasks': 'bool',
        'enable_html_email': 'bool',
        'email_signature': 'str',
        'contacts_application': 'int',
        'calendar_application': 'int',
        'require_passcode': 'bool',
        'authentication_type': 'int',
        'passcode_complexity': 'int',
        'minimum_passcode_length': 'int',
        'minimum_number_of_complex_characters': 'int',
        'maximum_passcode_age': 'int',
        'passcode_history': 'int',
        'auto_lock_minutes': 'int',
        'auto_lock_when_device_locks': 'bool',
        'maximum_number_of_failed_attempts': 'int',
        'allow_copy_paste': 'bool',
        'allow_attachments': 'bool',
        'maximum_attachment_size_mb': 'str',
        'restrict_attachments_to_be_opened_in_following_apps': 'bool',
        'applications': 'list[AndroidApplicationV2Entity]',
        'restrict_domains': 'bool',
        'restriction_type': 'int',
        'domain_name': 'list[str]',
        'using_enterprise_license_key': 'bool',
        'maximum_email_truncation_size_kb': 'int',
        'require_manual_sync_when_roaming': 'bool',
        'require_device_encryption': 'bool',
        'require_sd_card_encryption': 'bool',
        'enable_signature_editing': 'bool',
        'samsung_sync_interval': 'int',
        'samsung_peak_days': 'int',
        'peak_start_time': 'str',
        'peak_end_time': 'str',
        'sync_schedule_peak': 'int',
        'sync_schedule_off_peak': 'int',
        'samsung_sender_name': 'str',
        'samsung_use_ssl': 'bool',
        'always_vibrate_on_email_notification': 'bool',
        'vibrate_on_notification_when_setting_is_set_to_silent': 'bool',
        'default_account': 'bool',
        'use_tls': 'bool',
        'enable_security_restrictions': 'bool',
        'disable_copying_data_to_phonebook': 'bool',
        'allow_sd_card': 'bool',
        'allow_widgets': 'bool',
        'allow_email_widget': 'bool',
        'allow_calendar_widget': 'bool',
        'allow_task_widget': 'bool',
        'allow_universal_widget': 'bool',
        'show_data_on_lock_screen_widgets': 'bool',
        'allow_speech_notifications': 'bool',
        'show_email_info_on_notification_bar': 'bool',
        'show_calendar_info_on_notification_bar': 'bool',
        'show_task_info_on_notification_bar': 'bool',
        'disable_data_backup': 'bool',
        'disable_settings_backup': 'bool',
        'htc_use_ssl': 'bool',
        'allow_sync_email': 'bool',
        'native_client_override': 'bool',
        'enable_attachment_encryption': 'bool',
        'attachment_restricted_app_list': 'str',
        'use_smime': 'bool',
        'smime_cert_payload_name': 'str',
        'require_smime_messages': 'bool',
        'require_signed_smime': 'bool',
        'allow_email_forwarding': 'bool',
        'allow_html_format': 'bool',
        'aw_email_client_max_email_age_filter': 'int',
        'aw_email_client_sync_interval': 'int',
        'white_list_black_list_domain_name': 'str',
        'suppress_application_pin': 'bool',
        'migration_host': 'str',
        'license_key': 'str',
        'allow_personal_and_work_contacts_combined': 'bool',
        'allow_import_export': 'bool',
        'show_corporate_contacts_details_on_incoming_calls': 'bool',
        'allow_personal_and_work_calendars_combined': 'bool',
        'sunday': 'bool',
        'monday': 'bool',
        'tuesday': 'bool',
        'wednesday': 'bool',
        'thursday': 'bool',
        'friday': 'bool',
        'saturday': 'bool'
    }

    attribute_map = {
        'mail_client': 'MailClient',
        'account_name': 'AccountName',
        'exchange_active_sync_host': 'ExchangeActiveSyncHost',
        'ignore_ssl_errors': 'IgnoreSSLErrors',
        'use_ssl': 'UseSSL',
        'make_this_account_default_account': 'MakeThisAccountDefaultAccount',
        'domain': 'Domain',
        'user': 'User',
        'email_address': 'EmailAddress',
        'password': 'Password',
        'identity_certificate': 'IdentityCertificate',
        'past_days_of_mail_to_sync': 'PastDaysOfMailToSync',
        'sync_interval': 'SyncInterval',
        'past_days_of_calendar_to_sync': 'PastDaysOfCalendarToSync',
        'sync_mail': 'SyncMail',
        'allow_sync_calendar': 'AllowSyncCalendar',
        'allow_sync_contacts': 'AllowSyncContacts',
        'allow_sync_tasks': 'AllowSyncTasks',
        'enable_html_email': 'EnableHTMLEmail',
        'email_signature': 'EmailSignature',
        'contacts_application': 'ContactsApplication',
        'calendar_application': 'CalendarApplication',
        'require_passcode': 'RequirePasscode',
        'authentication_type': 'AuthenticationType',
        'passcode_complexity': 'PasscodeComplexity',
        'minimum_passcode_length': 'MinimumPasscodeLength',
        'minimum_number_of_complex_characters': 'MinimumNumberOfComplexCharacters',
        'maximum_passcode_age': 'MaximumPasscodeAge',
        'passcode_history': 'PasscodeHistory',
        'auto_lock_minutes': 'AutoLockMinutes',
        'auto_lock_when_device_locks': 'AutoLockWhenDeviceLocks',
        'maximum_number_of_failed_attempts': 'MaximumNumberOfFailedAttempts',
        'allow_copy_paste': 'AllowCopyPaste',
        'allow_attachments': 'AllowAttachments',
        'maximum_attachment_size_mb': 'MaximumAttachmentSizeMb',
        'restrict_attachments_to_be_opened_in_following_apps': 'RestrictAttachmentsToBeOpenedInFollowingApps',
        'applications': 'Applications',
        'restrict_domains': 'RestrictDomains',
        'restriction_type': 'RestrictionType',
        'domain_name': 'DomainName',
        'using_enterprise_license_key': 'UsingEnterpriseLicenseKey',
        'maximum_email_truncation_size_kb': 'MaximumEmailTruncationSizeKb',
        'require_manual_sync_when_roaming': 'RequireManualSyncWhenRoaming',
        'require_device_encryption': 'RequireDeviceEncryption',
        'require_sd_card_encryption': 'RequireSDCardEncryption',
        'enable_signature_editing': 'EnableSignatureEditing',
        'samsung_sync_interval': 'SamsungSyncInterval',
        'samsung_peak_days': 'SamsungPeakDays',
        'peak_start_time': 'PeakStartTime',
        'peak_end_time': 'PeakEndTime',
        'sync_schedule_peak': 'SyncSchedulePeak',
        'sync_schedule_off_peak': 'SyncScheduleOffPeak',
        'samsung_sender_name': 'SamsungSenderName',
        'samsung_use_ssl': 'SamsungUseSSL',
        'always_vibrate_on_email_notification': 'AlwaysVibrateOnEmailNotification',
        'vibrate_on_notification_when_setting_is_set_to_silent': 'VibrateOnNotificationWhenSettingIsSetToSilent',
        'default_account': 'DefaultAccount',
        'use_tls': 'UseTLS',
        'enable_security_restrictions': 'EnableSecurityRestrictions',
        'disable_copying_data_to_phonebook': 'DisableCopyingDataToPhonebook',
        'allow_sd_card': 'AllowSDCard',
        'allow_widgets': 'AllowWidgets',
        'allow_email_widget': 'AllowEmailWidget',
        'allow_calendar_widget': 'AllowCalendarWidget',
        'allow_task_widget': 'AllowTaskWidget',
        'allow_universal_widget': 'AllowUniversalWidget',
        'show_data_on_lock_screen_widgets': 'ShowDataOnLockScreenWidgets',
        'allow_speech_notifications': 'AllowSpeechNotifications',
        'show_email_info_on_notification_bar': 'ShowEmailInfoOnNotificationBar',
        'show_calendar_info_on_notification_bar': 'ShowCalendarInfoOnNotificationBar',
        'show_task_info_on_notification_bar': 'ShowTaskInfoOnNotificationBar',
        'disable_data_backup': 'DisableDataBackup',
        'disable_settings_backup': 'DisableSettingsBackup',
        'htc_use_ssl': 'HTCUseSSL',
        'allow_sync_email': 'AllowSyncEmail',
        'native_client_override': 'NativeClientOverride',
        'enable_attachment_encryption': 'EnableAttachmentEncryption',
        'attachment_restricted_app_list': 'AttachmentRestrictedAppList',
        'use_smime': 'UseSMIME',
        'smime_cert_payload_name': 'SMIMECertPayloadName',
        'require_smime_messages': 'RequireSMIMEMessages',
        'require_signed_smime': 'RequireSignedSMIME',
        'allow_email_forwarding': 'AllowEmailForwarding',
        'allow_html_format': 'AllowHTMLFormat',
        'aw_email_client_max_email_age_filter': 'AwEmailClientMaxEmailAgeFilter',
        'aw_email_client_sync_interval': 'AwEmailClientSyncInterval',
        'white_list_black_list_domain_name': 'WhiteListBlackListDomainName',
        'suppress_application_pin': 'SuppressApplicationPIN',
        'migration_host': 'MigrationHost',
        'license_key': 'LicenseKey',
        'allow_personal_and_work_contacts_combined': 'AllowPersonalAndWorkContactsCombined',
        'allow_import_export': 'AllowImportExport',
        'show_corporate_contacts_details_on_incoming_calls': 'ShowCorporateContactsDetailsOnIncomingCalls',
        'allow_personal_and_work_calendars_combined': 'AllowPersonalAndWorkCalendarsCombined',
        'sunday': 'Sunday',
        'monday': 'Monday',
        'tuesday': 'Tuesday',
        'wednesday': 'Wednesday',
        'thursday': 'Thursday',
        'friday': 'Friday',
        'saturday': 'Saturday'
    }

    def __init__(self, mail_client=None, account_name=None, exchange_active_sync_host=None, ignore_ssl_errors=None, use_ssl=None, make_this_account_default_account=None, domain=None, user=None, email_address=None, password=None, identity_certificate=None, past_days_of_mail_to_sync=None, sync_interval=None, past_days_of_calendar_to_sync=None, sync_mail=None, allow_sync_calendar=None, allow_sync_contacts=None, allow_sync_tasks=None, enable_html_email=None, email_signature=None, contacts_application=None, calendar_application=None, require_passcode=None, authentication_type=None, passcode_complexity=None, minimum_passcode_length=None, minimum_number_of_complex_characters=None, maximum_passcode_age=None, passcode_history=None, auto_lock_minutes=None, auto_lock_when_device_locks=None, maximum_number_of_failed_attempts=None, allow_copy_paste=None, allow_attachments=None, maximum_attachment_size_mb=None, restrict_attachments_to_be_opened_in_following_apps=None, applications=None, restrict_domains=None, restriction_type=None, domain_name=None, using_enterprise_license_key=None, maximum_email_truncation_size_kb=None, require_manual_sync_when_roaming=None, require_device_encryption=None, require_sd_card_encryption=None, enable_signature_editing=None, samsung_sync_interval=None, samsung_peak_days=None, peak_start_time=None, peak_end_time=None, sync_schedule_peak=None, sync_schedule_off_peak=None, samsung_sender_name=None, samsung_use_ssl=None, always_vibrate_on_email_notification=None, vibrate_on_notification_when_setting_is_set_to_silent=None, default_account=None, use_tls=None, enable_security_restrictions=None, disable_copying_data_to_phonebook=None, allow_sd_card=None, allow_widgets=None, allow_email_widget=None, allow_calendar_widget=None, allow_task_widget=None, allow_universal_widget=None, show_data_on_lock_screen_widgets=None, allow_speech_notifications=None, show_email_info_on_notification_bar=None, show_calendar_info_on_notification_bar=None, show_task_info_on_notification_bar=None, disable_data_backup=None, disable_settings_backup=None, htc_use_ssl=None, allow_sync_email=None, native_client_override=None, enable_attachment_encryption=None, attachment_restricted_app_list=None, use_smime=None, smime_cert_payload_name=None, require_smime_messages=None, require_signed_smime=None, allow_email_forwarding=None, allow_html_format=None, aw_email_client_max_email_age_filter=None, aw_email_client_sync_interval=None, white_list_black_list_domain_name=None, suppress_application_pin=None, migration_host=None, license_key=None, allow_personal_and_work_contacts_combined=None, allow_import_export=None, show_corporate_contacts_details_on_incoming_calls=None, allow_personal_and_work_calendars_combined=None, sunday=None, monday=None, tuesday=None, wednesday=None, thursday=None, friday=None, saturday=None, _configuration=None):  # noqa: E501
        """AndroidEASPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mail_client = None
        self._account_name = None
        self._exchange_active_sync_host = None
        self._ignore_ssl_errors = None
        self._use_ssl = None
        self._make_this_account_default_account = None
        self._domain = None
        self._user = None
        self._email_address = None
        self._password = None
        self._identity_certificate = None
        self._past_days_of_mail_to_sync = None
        self._sync_interval = None
        self._past_days_of_calendar_to_sync = None
        self._sync_mail = None
        self._allow_sync_calendar = None
        self._allow_sync_contacts = None
        self._allow_sync_tasks = None
        self._enable_html_email = None
        self._email_signature = None
        self._contacts_application = None
        self._calendar_application = None
        self._require_passcode = None
        self._authentication_type = None
        self._passcode_complexity = None
        self._minimum_passcode_length = None
        self._minimum_number_of_complex_characters = None
        self._maximum_passcode_age = None
        self._passcode_history = None
        self._auto_lock_minutes = None
        self._auto_lock_when_device_locks = None
        self._maximum_number_of_failed_attempts = None
        self._allow_copy_paste = None
        self._allow_attachments = None
        self._maximum_attachment_size_mb = None
        self._restrict_attachments_to_be_opened_in_following_apps = None
        self._applications = None
        self._restrict_domains = None
        self._restriction_type = None
        self._domain_name = None
        self._using_enterprise_license_key = None
        self._maximum_email_truncation_size_kb = None
        self._require_manual_sync_when_roaming = None
        self._require_device_encryption = None
        self._require_sd_card_encryption = None
        self._enable_signature_editing = None
        self._samsung_sync_interval = None
        self._samsung_peak_days = None
        self._peak_start_time = None
        self._peak_end_time = None
        self._sync_schedule_peak = None
        self._sync_schedule_off_peak = None
        self._samsung_sender_name = None
        self._samsung_use_ssl = None
        self._always_vibrate_on_email_notification = None
        self._vibrate_on_notification_when_setting_is_set_to_silent = None
        self._default_account = None
        self._use_tls = None
        self._enable_security_restrictions = None
        self._disable_copying_data_to_phonebook = None
        self._allow_sd_card = None
        self._allow_widgets = None
        self._allow_email_widget = None
        self._allow_calendar_widget = None
        self._allow_task_widget = None
        self._allow_universal_widget = None
        self._show_data_on_lock_screen_widgets = None
        self._allow_speech_notifications = None
        self._show_email_info_on_notification_bar = None
        self._show_calendar_info_on_notification_bar = None
        self._show_task_info_on_notification_bar = None
        self._disable_data_backup = None
        self._disable_settings_backup = None
        self._htc_use_ssl = None
        self._allow_sync_email = None
        self._native_client_override = None
        self._enable_attachment_encryption = None
        self._attachment_restricted_app_list = None
        self._use_smime = None
        self._smime_cert_payload_name = None
        self._require_smime_messages = None
        self._require_signed_smime = None
        self._allow_email_forwarding = None
        self._allow_html_format = None
        self._aw_email_client_max_email_age_filter = None
        self._aw_email_client_sync_interval = None
        self._white_list_black_list_domain_name = None
        self._suppress_application_pin = None
        self._migration_host = None
        self._license_key = None
        self._allow_personal_and_work_contacts_combined = None
        self._allow_import_export = None
        self._show_corporate_contacts_details_on_incoming_calls = None
        self._allow_personal_and_work_calendars_combined = None
        self._sunday = None
        self._monday = None
        self._tuesday = None
        self._wednesday = None
        self._thursday = None
        self._friday = None
        self._saturday = None
        self.discriminator = None

        if mail_client is not None:
            self.mail_client = mail_client
        if account_name is not None:
            self.account_name = account_name
        if exchange_active_sync_host is not None:
            self.exchange_active_sync_host = exchange_active_sync_host
        if ignore_ssl_errors is not None:
            self.ignore_ssl_errors = ignore_ssl_errors
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if make_this_account_default_account is not None:
            self.make_this_account_default_account = make_this_account_default_account
        if domain is not None:
            self.domain = domain
        if user is not None:
            self.user = user
        if email_address is not None:
            self.email_address = email_address
        if password is not None:
            self.password = password
        if identity_certificate is not None:
            self.identity_certificate = identity_certificate
        if past_days_of_mail_to_sync is not None:
            self.past_days_of_mail_to_sync = past_days_of_mail_to_sync
        if sync_interval is not None:
            self.sync_interval = sync_interval
        if past_days_of_calendar_to_sync is not None:
            self.past_days_of_calendar_to_sync = past_days_of_calendar_to_sync
        if sync_mail is not None:
            self.sync_mail = sync_mail
        if allow_sync_calendar is not None:
            self.allow_sync_calendar = allow_sync_calendar
        if allow_sync_contacts is not None:
            self.allow_sync_contacts = allow_sync_contacts
        if allow_sync_tasks is not None:
            self.allow_sync_tasks = allow_sync_tasks
        if enable_html_email is not None:
            self.enable_html_email = enable_html_email
        if email_signature is not None:
            self.email_signature = email_signature
        if contacts_application is not None:
            self.contacts_application = contacts_application
        if calendar_application is not None:
            self.calendar_application = calendar_application
        if require_passcode is not None:
            self.require_passcode = require_passcode
        if authentication_type is not None:
            self.authentication_type = authentication_type
        if passcode_complexity is not None:
            self.passcode_complexity = passcode_complexity
        if minimum_passcode_length is not None:
            self.minimum_passcode_length = minimum_passcode_length
        if minimum_number_of_complex_characters is not None:
            self.minimum_number_of_complex_characters = minimum_number_of_complex_characters
        if maximum_passcode_age is not None:
            self.maximum_passcode_age = maximum_passcode_age
        if passcode_history is not None:
            self.passcode_history = passcode_history
        if auto_lock_minutes is not None:
            self.auto_lock_minutes = auto_lock_minutes
        if auto_lock_when_device_locks is not None:
            self.auto_lock_when_device_locks = auto_lock_when_device_locks
        if maximum_number_of_failed_attempts is not None:
            self.maximum_number_of_failed_attempts = maximum_number_of_failed_attempts
        if allow_copy_paste is not None:
            self.allow_copy_paste = allow_copy_paste
        if allow_attachments is not None:
            self.allow_attachments = allow_attachments
        if maximum_attachment_size_mb is not None:
            self.maximum_attachment_size_mb = maximum_attachment_size_mb
        if restrict_attachments_to_be_opened_in_following_apps is not None:
            self.restrict_attachments_to_be_opened_in_following_apps = restrict_attachments_to_be_opened_in_following_apps
        if applications is not None:
            self.applications = applications
        if restrict_domains is not None:
            self.restrict_domains = restrict_domains
        if restriction_type is not None:
            self.restriction_type = restriction_type
        if domain_name is not None:
            self.domain_name = domain_name
        if using_enterprise_license_key is not None:
            self.using_enterprise_license_key = using_enterprise_license_key
        if maximum_email_truncation_size_kb is not None:
            self.maximum_email_truncation_size_kb = maximum_email_truncation_size_kb
        if require_manual_sync_when_roaming is not None:
            self.require_manual_sync_when_roaming = require_manual_sync_when_roaming
        if require_device_encryption is not None:
            self.require_device_encryption = require_device_encryption
        if require_sd_card_encryption is not None:
            self.require_sd_card_encryption = require_sd_card_encryption
        if enable_signature_editing is not None:
            self.enable_signature_editing = enable_signature_editing
        if samsung_sync_interval is not None:
            self.samsung_sync_interval = samsung_sync_interval
        if samsung_peak_days is not None:
            self.samsung_peak_days = samsung_peak_days
        if peak_start_time is not None:
            self.peak_start_time = peak_start_time
        if peak_end_time is not None:
            self.peak_end_time = peak_end_time
        if sync_schedule_peak is not None:
            self.sync_schedule_peak = sync_schedule_peak
        if sync_schedule_off_peak is not None:
            self.sync_schedule_off_peak = sync_schedule_off_peak
        if samsung_sender_name is not None:
            self.samsung_sender_name = samsung_sender_name
        if samsung_use_ssl is not None:
            self.samsung_use_ssl = samsung_use_ssl
        if always_vibrate_on_email_notification is not None:
            self.always_vibrate_on_email_notification = always_vibrate_on_email_notification
        if vibrate_on_notification_when_setting_is_set_to_silent is not None:
            self.vibrate_on_notification_when_setting_is_set_to_silent = vibrate_on_notification_when_setting_is_set_to_silent
        if default_account is not None:
            self.default_account = default_account
        if use_tls is not None:
            self.use_tls = use_tls
        if enable_security_restrictions is not None:
            self.enable_security_restrictions = enable_security_restrictions
        if disable_copying_data_to_phonebook is not None:
            self.disable_copying_data_to_phonebook = disable_copying_data_to_phonebook
        if allow_sd_card is not None:
            self.allow_sd_card = allow_sd_card
        if allow_widgets is not None:
            self.allow_widgets = allow_widgets
        if allow_email_widget is not None:
            self.allow_email_widget = allow_email_widget
        if allow_calendar_widget is not None:
            self.allow_calendar_widget = allow_calendar_widget
        if allow_task_widget is not None:
            self.allow_task_widget = allow_task_widget
        if allow_universal_widget is not None:
            self.allow_universal_widget = allow_universal_widget
        if show_data_on_lock_screen_widgets is not None:
            self.show_data_on_lock_screen_widgets = show_data_on_lock_screen_widgets
        if allow_speech_notifications is not None:
            self.allow_speech_notifications = allow_speech_notifications
        if show_email_info_on_notification_bar is not None:
            self.show_email_info_on_notification_bar = show_email_info_on_notification_bar
        if show_calendar_info_on_notification_bar is not None:
            self.show_calendar_info_on_notification_bar = show_calendar_info_on_notification_bar
        if show_task_info_on_notification_bar is not None:
            self.show_task_info_on_notification_bar = show_task_info_on_notification_bar
        if disable_data_backup is not None:
            self.disable_data_backup = disable_data_backup
        if disable_settings_backup is not None:
            self.disable_settings_backup = disable_settings_backup
        if htc_use_ssl is not None:
            self.htc_use_ssl = htc_use_ssl
        if allow_sync_email is not None:
            self.allow_sync_email = allow_sync_email
        if native_client_override is not None:
            self.native_client_override = native_client_override
        if enable_attachment_encryption is not None:
            self.enable_attachment_encryption = enable_attachment_encryption
        if attachment_restricted_app_list is not None:
            self.attachment_restricted_app_list = attachment_restricted_app_list
        if use_smime is not None:
            self.use_smime = use_smime
        if smime_cert_payload_name is not None:
            self.smime_cert_payload_name = smime_cert_payload_name
        if require_smime_messages is not None:
            self.require_smime_messages = require_smime_messages
        if require_signed_smime is not None:
            self.require_signed_smime = require_signed_smime
        if allow_email_forwarding is not None:
            self.allow_email_forwarding = allow_email_forwarding
        if allow_html_format is not None:
            self.allow_html_format = allow_html_format
        if aw_email_client_max_email_age_filter is not None:
            self.aw_email_client_max_email_age_filter = aw_email_client_max_email_age_filter
        if aw_email_client_sync_interval is not None:
            self.aw_email_client_sync_interval = aw_email_client_sync_interval
        if white_list_black_list_domain_name is not None:
            self.white_list_black_list_domain_name = white_list_black_list_domain_name
        if suppress_application_pin is not None:
            self.suppress_application_pin = suppress_application_pin
        if migration_host is not None:
            self.migration_host = migration_host
        if license_key is not None:
            self.license_key = license_key
        if allow_personal_and_work_contacts_combined is not None:
            self.allow_personal_and_work_contacts_combined = allow_personal_and_work_contacts_combined
        if allow_import_export is not None:
            self.allow_import_export = allow_import_export
        if show_corporate_contacts_details_on_incoming_calls is not None:
            self.show_corporate_contacts_details_on_incoming_calls = show_corporate_contacts_details_on_incoming_calls
        if allow_personal_and_work_calendars_combined is not None:
            self.allow_personal_and_work_calendars_combined = allow_personal_and_work_calendars_combined
        if sunday is not None:
            self.sunday = sunday
        if monday is not None:
            self.monday = monday
        if tuesday is not None:
            self.tuesday = tuesday
        if wednesday is not None:
            self.wednesday = wednesday
        if thursday is not None:
            self.thursday = thursday
        if friday is not None:
            self.friday = friday
        if saturday is not None:
            self.saturday = saturday

    @property
    def mail_client(self):
        """Gets the mail_client of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the type of the mail client.  # noqa: E501

        :return: The mail_client of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._mail_client

    @mail_client.setter
    def mail_client(self, mail_client):
        """Sets the mail_client of this AndroidEASPayloadV2Entity.

        Gets or sets the type of the mail client.  # noqa: E501

        :param mail_client: The mail_client of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._mail_client = mail_client

    @property
    def account_name(self):
        """Gets the account_name of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the display name of the payload.  # noqa: E501

        :return: The account_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AndroidEASPayloadV2Entity.

        Gets or sets the display name of the payload.  # noqa: E501

        :param account_name: The account_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def exchange_active_sync_host(self):
        """Gets the exchange_active_sync_host of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the host.  # noqa: E501

        :return: The exchange_active_sync_host of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._exchange_active_sync_host

    @exchange_active_sync_host.setter
    def exchange_active_sync_host(self, exchange_active_sync_host):
        """Sets the exchange_active_sync_host of this AndroidEASPayloadV2Entity.

        Gets or sets the host.  # noqa: E501

        :param exchange_active_sync_host: The exchange_active_sync_host of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._exchange_active_sync_host = exchange_active_sync_host

    @property
    def ignore_ssl_errors(self):
        """Gets the ignore_ssl_errors of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is allowanyservercert.  # noqa: E501

        :return: The ignore_ssl_errors of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_ssl_errors

    @ignore_ssl_errors.setter
    def ignore_ssl_errors(self, ignore_ssl_errors):
        """Sets the ignore_ssl_errors of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is allowanyservercert.  # noqa: E501

        :param ignore_ssl_errors: The ignore_ssl_errors of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._ignore_ssl_errors = ignore_ssl_errors

    @property
    def use_ssl(self):
        """Gets the use_ssl of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [use SSL].  # noqa: E501

        :return: The use_ssl of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [use SSL].  # noqa: E501

        :param use_ssl: The use_ssl of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def make_this_account_default_account(self):
        """Gets the make_this_account_default_account of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [make this account default account].  # noqa: E501

        :return: The make_this_account_default_account of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._make_this_account_default_account

    @make_this_account_default_account.setter
    def make_this_account_default_account(self, make_this_account_default_account):
        """Sets the make_this_account_default_account of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [make this account default account].  # noqa: E501

        :param make_this_account_default_account: The make_this_account_default_account of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._make_this_account_default_account = make_this_account_default_account

    @property
    def domain(self):
        """Gets the domain of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the domain.  # noqa: E501

        :return: The domain of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AndroidEASPayloadV2Entity.

        Gets or sets the domain.  # noqa: E501

        :param domain: The domain of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def user(self):
        """Gets the user of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the user.  # noqa: E501

        :return: The user of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AndroidEASPayloadV2Entity.

        Gets or sets the name of the user.  # noqa: E501

        :param user: The user of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def email_address(self):
        """Gets the email_address of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the email address.  # noqa: E501

        :return: The email_address of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AndroidEASPayloadV2Entity.

        Gets or sets the email address.  # noqa: E501

        :param email_address: The email_address of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def password(self):
        """Gets the password of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the password.  # noqa: E501

        :return: The password of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AndroidEASPayloadV2Entity.

        Gets or sets the password.  # noqa: E501

        :param password: The password of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def identity_certificate(self):
        """Gets the identity_certificate of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the payload certificate.  # noqa: E501

        :return: The identity_certificate of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._identity_certificate

    @identity_certificate.setter
    def identity_certificate(self, identity_certificate):
        """Sets the identity_certificate of this AndroidEASPayloadV2Entity.

        Gets or sets the name of the payload certificate.  # noqa: E501

        :param identity_certificate: The identity_certificate of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._identity_certificate = identity_certificate

    @property
    def past_days_of_mail_to_sync(self):
        """Gets the past_days_of_mail_to_sync of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the maximum email age filter.  # noqa: E501

        :return: The past_days_of_mail_to_sync of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._past_days_of_mail_to_sync

    @past_days_of_mail_to_sync.setter
    def past_days_of_mail_to_sync(self, past_days_of_mail_to_sync):
        """Sets the past_days_of_mail_to_sync of this AndroidEASPayloadV2Entity.

        Gets or sets the maximum email age filter.  # noqa: E501

        :param past_days_of_mail_to_sync: The past_days_of_mail_to_sync of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._past_days_of_mail_to_sync = past_days_of_mail_to_sync

    @property
    def sync_interval(self):
        """Gets the sync_interval of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the synchronize interval.  # noqa: E501

        :return: The sync_interval of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._sync_interval

    @sync_interval.setter
    def sync_interval(self, sync_interval):
        """Sets the sync_interval of this AndroidEASPayloadV2Entity.

        Gets or sets the synchronize interval.  # noqa: E501

        :param sync_interval: The sync_interval of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._sync_interval = sync_interval

    @property
    def past_days_of_calendar_to_sync(self):
        """Gets the past_days_of_calendar_to_sync of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the maximum calendar age filter.  # noqa: E501

        :return: The past_days_of_calendar_to_sync of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._past_days_of_calendar_to_sync

    @past_days_of_calendar_to_sync.setter
    def past_days_of_calendar_to_sync(self, past_days_of_calendar_to_sync):
        """Sets the past_days_of_calendar_to_sync of this AndroidEASPayloadV2Entity.

        Gets or sets the maximum calendar age filter.  # noqa: E501

        :param past_days_of_calendar_to_sync: The past_days_of_calendar_to_sync of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._past_days_of_calendar_to_sync = past_days_of_calendar_to_sync

    @property
    def sync_mail(self):
        """Gets the sync_mail of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [synchronize mail].  # noqa: E501

        :return: The sync_mail of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._sync_mail

    @sync_mail.setter
    def sync_mail(self, sync_mail):
        """Sets the sync_mail of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [synchronize mail].  # noqa: E501

        :param sync_mail: The sync_mail of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._sync_mail = sync_mail

    @property
    def allow_sync_calendar(self):
        """Gets the allow_sync_calendar of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow synchronize calendar].  # noqa: E501

        :return: The allow_sync_calendar of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sync_calendar

    @allow_sync_calendar.setter
    def allow_sync_calendar(self, allow_sync_calendar):
        """Sets the allow_sync_calendar of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow synchronize calendar].  # noqa: E501

        :param allow_sync_calendar: The allow_sync_calendar of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_sync_calendar = allow_sync_calendar

    @property
    def allow_sync_contacts(self):
        """Gets the allow_sync_contacts of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow synchronize contacts].  # noqa: E501

        :return: The allow_sync_contacts of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sync_contacts

    @allow_sync_contacts.setter
    def allow_sync_contacts(self, allow_sync_contacts):
        """Sets the allow_sync_contacts of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow synchronize contacts].  # noqa: E501

        :param allow_sync_contacts: The allow_sync_contacts of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_sync_contacts = allow_sync_contacts

    @property
    def allow_sync_tasks(self):
        """Gets the allow_sync_tasks of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow synchronize tasks].  # noqa: E501

        :return: The allow_sync_tasks of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sync_tasks

    @allow_sync_tasks.setter
    def allow_sync_tasks(self, allow_sync_tasks):
        """Sets the allow_sync_tasks of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow synchronize tasks].  # noqa: E501

        :param allow_sync_tasks: The allow_sync_tasks of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_sync_tasks = allow_sync_tasks

    @property
    def enable_html_email(self):
        """Gets the enable_html_email of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enable HTML email].  # noqa: E501

        :return: The enable_html_email of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_html_email

    @enable_html_email.setter
    def enable_html_email(self, enable_html_email):
        """Sets the enable_html_email of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [enable HTML email].  # noqa: E501

        :param enable_html_email: The enable_html_email of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_html_email = enable_html_email

    @property
    def email_signature(self):
        """Gets the email_signature of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the email signature.  # noqa: E501

        :return: The email_signature of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._email_signature

    @email_signature.setter
    def email_signature(self, email_signature):
        """Sets the email_signature of this AndroidEASPayloadV2Entity.

        Gets or sets the email signature.  # noqa: E501

        :param email_signature: The email_signature of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._email_signature = email_signature

    @property
    def contacts_application(self):
        """Gets the contacts_application of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the contacts application type ex.  # noqa: E501

        :return: The contacts_application of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._contacts_application

    @contacts_application.setter
    def contacts_application(self, contacts_application):
        """Sets the contacts_application of this AndroidEASPayloadV2Entity.

        Gets or sets the contacts application type ex.  # noqa: E501

        :param contacts_application: The contacts_application of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._contacts_application = contacts_application

    @property
    def calendar_application(self):
        """Gets the calendar_application of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the calendar application type ex.  # noqa: E501

        :return: The calendar_application of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._calendar_application

    @calendar_application.setter
    def calendar_application(self, calendar_application):
        """Sets the calendar_application of this AndroidEASPayloadV2Entity.

        Gets or sets the calendar application type ex.  # noqa: E501

        :param calendar_application: The calendar_application of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._calendar_application = calendar_application

    @property
    def require_passcode(self):
        """Gets the require_passcode of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [require passcode].  # noqa: E501

        :return: The require_passcode of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._require_passcode

    @require_passcode.setter
    def require_passcode(self, require_passcode):
        """Sets the require_passcode of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [require passcode].  # noqa: E501

        :param require_passcode: The require_passcode of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._require_passcode = require_passcode

    @property
    def authentication_type(self):
        """Gets the authentication_type of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the type of the authentication.  # noqa: E501

        :return: The authentication_type of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this AndroidEASPayloadV2Entity.

        Gets or sets the type of the authentication.  # noqa: E501

        :param authentication_type: The authentication_type of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._authentication_type = authentication_type

    @property
    def passcode_complexity(self):
        """Gets the passcode_complexity of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the passcode complexity.  # noqa: E501

        :return: The passcode_complexity of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._passcode_complexity

    @passcode_complexity.setter
    def passcode_complexity(self, passcode_complexity):
        """Sets the passcode_complexity of this AndroidEASPayloadV2Entity.

        Gets or sets the passcode complexity.  # noqa: E501

        :param passcode_complexity: The passcode_complexity of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._passcode_complexity = passcode_complexity

    @property
    def minimum_passcode_length(self):
        """Gets the minimum_passcode_length of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the minimum length of the passcode.  # noqa: E501

        :return: The minimum_passcode_length of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._minimum_passcode_length

    @minimum_passcode_length.setter
    def minimum_passcode_length(self, minimum_passcode_length):
        """Sets the minimum_passcode_length of this AndroidEASPayloadV2Entity.

        Gets or sets the minimum length of the passcode.  # noqa: E501

        :param minimum_passcode_length: The minimum_passcode_length of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._minimum_passcode_length = minimum_passcode_length

    @property
    def minimum_number_of_complex_characters(self):
        """Gets the minimum_number_of_complex_characters of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the minimum complex characters.  # noqa: E501

        :return: The minimum_number_of_complex_characters of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_complex_characters

    @minimum_number_of_complex_characters.setter
    def minimum_number_of_complex_characters(self, minimum_number_of_complex_characters):
        """Sets the minimum_number_of_complex_characters of this AndroidEASPayloadV2Entity.

        Gets or sets the minimum complex characters.  # noqa: E501

        :param minimum_number_of_complex_characters: The minimum_number_of_complex_characters of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._minimum_number_of_complex_characters = minimum_number_of_complex_characters

    @property
    def maximum_passcode_age(self):
        """Gets the maximum_passcode_age of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the maximum passcode age.  # noqa: E501

        :return: The maximum_passcode_age of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._maximum_passcode_age

    @maximum_passcode_age.setter
    def maximum_passcode_age(self, maximum_passcode_age):
        """Sets the maximum_passcode_age of this AndroidEASPayloadV2Entity.

        Gets or sets the maximum passcode age.  # noqa: E501

        :param maximum_passcode_age: The maximum_passcode_age of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._maximum_passcode_age = maximum_passcode_age

    @property
    def passcode_history(self):
        """Gets the passcode_history of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the passcode history.  # noqa: E501

        :return: The passcode_history of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._passcode_history

    @passcode_history.setter
    def passcode_history(self, passcode_history):
        """Sets the passcode_history of this AndroidEASPayloadV2Entity.

        Gets or sets the passcode history.  # noqa: E501

        :param passcode_history: The passcode_history of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._passcode_history = passcode_history

    @property
    def auto_lock_minutes(self):
        """Gets the auto_lock_minutes of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the automatic lock minutes.  # noqa: E501

        :return: The auto_lock_minutes of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._auto_lock_minutes

    @auto_lock_minutes.setter
    def auto_lock_minutes(self, auto_lock_minutes):
        """Sets the auto_lock_minutes of this AndroidEASPayloadV2Entity.

        Gets or sets the automatic lock minutes.  # noqa: E501

        :param auto_lock_minutes: The auto_lock_minutes of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._auto_lock_minutes = auto_lock_minutes

    @property
    def auto_lock_when_device_locks(self):
        """Gets the auto_lock_when_device_locks of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [automatic lock device lock].  # noqa: E501

        :return: The auto_lock_when_device_locks of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._auto_lock_when_device_locks

    @auto_lock_when_device_locks.setter
    def auto_lock_when_device_locks(self, auto_lock_when_device_locks):
        """Sets the auto_lock_when_device_locks of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [automatic lock device lock].  # noqa: E501

        :param auto_lock_when_device_locks: The auto_lock_when_device_locks of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._auto_lock_when_device_locks = auto_lock_when_device_locks

    @property
    def maximum_number_of_failed_attempts(self):
        """Gets the maximum_number_of_failed_attempts of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the maximum failed attempts.  # noqa: E501

        :return: The maximum_number_of_failed_attempts of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._maximum_number_of_failed_attempts

    @maximum_number_of_failed_attempts.setter
    def maximum_number_of_failed_attempts(self, maximum_number_of_failed_attempts):
        """Sets the maximum_number_of_failed_attempts of this AndroidEASPayloadV2Entity.

        Gets or sets the maximum failed attempts.  # noqa: E501

        :param maximum_number_of_failed_attempts: The maximum_number_of_failed_attempts of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._maximum_number_of_failed_attempts = maximum_number_of_failed_attempts

    @property
    def allow_copy_paste(self):
        """Gets the allow_copy_paste of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enable copy paste bool].  # noqa: E501

        :return: The allow_copy_paste of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_copy_paste

    @allow_copy_paste.setter
    def allow_copy_paste(self, allow_copy_paste):
        """Sets the allow_copy_paste of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [enable copy paste bool].  # noqa: E501

        :param allow_copy_paste: The allow_copy_paste of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_copy_paste = allow_copy_paste

    @property
    def allow_attachments(self):
        """Gets the allow_attachments of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow attachments].  # noqa: E501

        :return: The allow_attachments of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_attachments

    @allow_attachments.setter
    def allow_attachments(self, allow_attachments):
        """Sets the allow_attachments of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow attachments].  # noqa: E501

        :param allow_attachments: The allow_attachments of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_attachments = allow_attachments

    @property
    def maximum_attachment_size_mb(self):
        """Gets the maximum_attachment_size_mb of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the maximum size of the attachment.  # noqa: E501

        :return: The maximum_attachment_size_mb of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._maximum_attachment_size_mb

    @maximum_attachment_size_mb.setter
    def maximum_attachment_size_mb(self, maximum_attachment_size_mb):
        """Sets the maximum_attachment_size_mb of this AndroidEASPayloadV2Entity.

        Gets or sets the maximum size of the attachment.  # noqa: E501

        :param maximum_attachment_size_mb: The maximum_attachment_size_mb of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._maximum_attachment_size_mb = maximum_attachment_size_mb

    @property
    def restrict_attachments_to_be_opened_in_following_apps(self):
        """Gets the restrict_attachments_to_be_opened_in_following_apps of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [restrict attachment in apps].  # noqa: E501

        :return: The restrict_attachments_to_be_opened_in_following_apps of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_attachments_to_be_opened_in_following_apps

    @restrict_attachments_to_be_opened_in_following_apps.setter
    def restrict_attachments_to_be_opened_in_following_apps(self, restrict_attachments_to_be_opened_in_following_apps):
        """Sets the restrict_attachments_to_be_opened_in_following_apps of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [restrict attachment in apps].  # noqa: E501

        :param restrict_attachments_to_be_opened_in_following_apps: The restrict_attachments_to_be_opened_in_following_apps of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._restrict_attachments_to_be_opened_in_following_apps = restrict_attachments_to_be_opened_in_following_apps

    @property
    def applications(self):
        """Gets the applications of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the applications.  # noqa: E501

        :return: The applications of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: list[AndroidApplicationV2Entity]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this AndroidEASPayloadV2Entity.

        Gets or sets the applications.  # noqa: E501

        :param applications: The applications of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: list[AndroidApplicationV2Entity]
        """

        self._applications = applications

    @property
    def restrict_domains(self):
        """Gets the restrict_domains of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [restrict domains].  # noqa: E501

        :return: The restrict_domains of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_domains

    @restrict_domains.setter
    def restrict_domains(self, restrict_domains):
        """Sets the restrict_domains of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [restrict domains].  # noqa: E501

        :param restrict_domains: The restrict_domains of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._restrict_domains = restrict_domains

    @property
    def restriction_type(self):
        """Gets the restriction_type of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the type of the restriction.  # noqa: E501

        :return: The restriction_type of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._restriction_type

    @restriction_type.setter
    def restriction_type(self, restriction_type):
        """Sets the restriction_type of this AndroidEASPayloadV2Entity.

        Gets or sets the type of the restriction.  # noqa: E501

        :param restriction_type: The restriction_type of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._restriction_type = restriction_type

    @property
    def domain_name(self):
        """Gets the domain_name of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the white list black list domain name list.  # noqa: E501

        :return: The domain_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this AndroidEASPayloadV2Entity.

        Gets or sets the white list black list domain name list.  # noqa: E501

        :param domain_name: The domain_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: list[str]
        """

        self._domain_name = domain_name

    @property
    def using_enterprise_license_key(self):
        """Gets the using_enterprise_license_key of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [using enterprise license key].  # noqa: E501

        :return: The using_enterprise_license_key of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._using_enterprise_license_key

    @using_enterprise_license_key.setter
    def using_enterprise_license_key(self, using_enterprise_license_key):
        """Sets the using_enterprise_license_key of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [using enterprise license key].  # noqa: E501

        :param using_enterprise_license_key: The using_enterprise_license_key of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._using_enterprise_license_key = using_enterprise_license_key

    @property
    def maximum_email_truncation_size_kb(self):
        """Gets the maximum_email_truncation_size_kb of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the maximum size of the email.  # noqa: E501

        :return: The maximum_email_truncation_size_kb of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._maximum_email_truncation_size_kb

    @maximum_email_truncation_size_kb.setter
    def maximum_email_truncation_size_kb(self, maximum_email_truncation_size_kb):
        """Sets the maximum_email_truncation_size_kb of this AndroidEASPayloadV2Entity.

        Gets or sets the maximum size of the email.  # noqa: E501

        :param maximum_email_truncation_size_kb: The maximum_email_truncation_size_kb of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._maximum_email_truncation_size_kb = maximum_email_truncation_size_kb

    @property
    def require_manual_sync_when_roaming(self):
        """Gets the require_manual_sync_when_roaming of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [require manual synchronize roaming].  # noqa: E501

        :return: The require_manual_sync_when_roaming of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._require_manual_sync_when_roaming

    @require_manual_sync_when_roaming.setter
    def require_manual_sync_when_roaming(self, require_manual_sync_when_roaming):
        """Sets the require_manual_sync_when_roaming of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [require manual synchronize roaming].  # noqa: E501

        :param require_manual_sync_when_roaming: The require_manual_sync_when_roaming of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._require_manual_sync_when_roaming = require_manual_sync_when_roaming

    @property
    def require_device_encryption(self):
        """Gets the require_device_encryption of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enable on device encryption].  # noqa: E501

        :return: The require_device_encryption of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._require_device_encryption

    @require_device_encryption.setter
    def require_device_encryption(self, require_device_encryption):
        """Sets the require_device_encryption of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [enable on device encryption].  # noqa: E501

        :param require_device_encryption: The require_device_encryption of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._require_device_encryption = require_device_encryption

    @property
    def require_sd_card_encryption(self):
        """Gets the require_sd_card_encryption of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enable sd card encryption].  # noqa: E501

        :return: The require_sd_card_encryption of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._require_sd_card_encryption

    @require_sd_card_encryption.setter
    def require_sd_card_encryption(self, require_sd_card_encryption):
        """Sets the require_sd_card_encryption of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [enable sd card encryption].  # noqa: E501

        :param require_sd_card_encryption: The require_sd_card_encryption of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._require_sd_card_encryption = require_sd_card_encryption

    @property
    def enable_signature_editing(self):
        """Gets the enable_signature_editing of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enable signature editing].  # noqa: E501

        :return: The enable_signature_editing of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_signature_editing

    @enable_signature_editing.setter
    def enable_signature_editing(self, enable_signature_editing):
        """Sets the enable_signature_editing of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [enable signature editing].  # noqa: E501

        :param enable_signature_editing: The enable_signature_editing of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_signature_editing = enable_signature_editing

    @property
    def samsung_sync_interval(self):
        """Gets the samsung_sync_interval of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the samsung synchronize interval.  # noqa: E501

        :return: The samsung_sync_interval of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._samsung_sync_interval

    @samsung_sync_interval.setter
    def samsung_sync_interval(self, samsung_sync_interval):
        """Sets the samsung_sync_interval of this AndroidEASPayloadV2Entity.

        Gets or sets the samsung synchronize interval.  # noqa: E501

        :param samsung_sync_interval: The samsung_sync_interval of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._samsung_sync_interval = samsung_sync_interval

    @property
    def samsung_peak_days(self):
        """Gets the samsung_peak_days of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the samsung peak days.  # noqa: E501

        :return: The samsung_peak_days of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._samsung_peak_days

    @samsung_peak_days.setter
    def samsung_peak_days(self, samsung_peak_days):
        """Sets the samsung_peak_days of this AndroidEASPayloadV2Entity.

        Gets or sets the samsung peak days.  # noqa: E501

        :param samsung_peak_days: The samsung_peak_days of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._samsung_peak_days = samsung_peak_days

    @property
    def peak_start_time(self):
        """Gets the peak_start_time of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the samsung peak start minute.  # noqa: E501

        :return: The peak_start_time of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._peak_start_time

    @peak_start_time.setter
    def peak_start_time(self, peak_start_time):
        """Sets the peak_start_time of this AndroidEASPayloadV2Entity.

        Gets or sets the samsung peak start minute.  # noqa: E501

        :param peak_start_time: The peak_start_time of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._peak_start_time = peak_start_time

    @property
    def peak_end_time(self):
        """Gets the peak_end_time of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the samsung peak end minute.  # noqa: E501

        :return: The peak_end_time of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._peak_end_time

    @peak_end_time.setter
    def peak_end_time(self, peak_end_time):
        """Sets the peak_end_time of this AndroidEASPayloadV2Entity.

        Gets or sets the samsung peak end minute.  # noqa: E501

        :param peak_end_time: The peak_end_time of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._peak_end_time = peak_end_time

    @property
    def sync_schedule_peak(self):
        """Gets the sync_schedule_peak of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the samsung peak synchronize schedule.  # noqa: E501

        :return: The sync_schedule_peak of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._sync_schedule_peak

    @sync_schedule_peak.setter
    def sync_schedule_peak(self, sync_schedule_peak):
        """Sets the sync_schedule_peak of this AndroidEASPayloadV2Entity.

        Gets or sets the samsung peak synchronize schedule.  # noqa: E501

        :param sync_schedule_peak: The sync_schedule_peak of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._sync_schedule_peak = sync_schedule_peak

    @property
    def sync_schedule_off_peak(self):
        """Gets the sync_schedule_off_peak of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the samsung off peak synchronize schedule.  # noqa: E501

        :return: The sync_schedule_off_peak of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._sync_schedule_off_peak

    @sync_schedule_off_peak.setter
    def sync_schedule_off_peak(self, sync_schedule_off_peak):
        """Sets the sync_schedule_off_peak of this AndroidEASPayloadV2Entity.

        Gets or sets the samsung off peak synchronize schedule.  # noqa: E501

        :param sync_schedule_off_peak: The sync_schedule_off_peak of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._sync_schedule_off_peak = sync_schedule_off_peak

    @property
    def samsung_sender_name(self):
        """Gets the samsung_sender_name of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the samsung sender.  # noqa: E501

        :return: The samsung_sender_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._samsung_sender_name

    @samsung_sender_name.setter
    def samsung_sender_name(self, samsung_sender_name):
        """Sets the samsung_sender_name of this AndroidEASPayloadV2Entity.

        Gets or sets the name of the samsung sender.  # noqa: E501

        :param samsung_sender_name: The samsung_sender_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._samsung_sender_name = samsung_sender_name

    @property
    def samsung_use_ssl(self):
        """Gets the samsung_use_ssl of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [samsung use SSL].  # noqa: E501

        :return: The samsung_use_ssl of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._samsung_use_ssl

    @samsung_use_ssl.setter
    def samsung_use_ssl(self, samsung_use_ssl):
        """Sets the samsung_use_ssl of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [samsung use SSL].  # noqa: E501

        :param samsung_use_ssl: The samsung_use_ssl of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._samsung_use_ssl = samsung_use_ssl

    @property
    def always_vibrate_on_email_notification(self):
        """Gets the always_vibrate_on_email_notification of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [samsung allow vibrate on notification].  # noqa: E501

        :return: The always_vibrate_on_email_notification of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._always_vibrate_on_email_notification

    @always_vibrate_on_email_notification.setter
    def always_vibrate_on_email_notification(self, always_vibrate_on_email_notification):
        """Sets the always_vibrate_on_email_notification of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [samsung allow vibrate on notification].  # noqa: E501

        :param always_vibrate_on_email_notification: The always_vibrate_on_email_notification of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._always_vibrate_on_email_notification = always_vibrate_on_email_notification

    @property
    def vibrate_on_notification_when_setting_is_set_to_silent(self):
        """Gets the vibrate_on_notification_when_setting_is_set_to_silent of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [samsung allow silent notification].  # noqa: E501

        :return: The vibrate_on_notification_when_setting_is_set_to_silent of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._vibrate_on_notification_when_setting_is_set_to_silent

    @vibrate_on_notification_when_setting_is_set_to_silent.setter
    def vibrate_on_notification_when_setting_is_set_to_silent(self, vibrate_on_notification_when_setting_is_set_to_silent):
        """Sets the vibrate_on_notification_when_setting_is_set_to_silent of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [samsung allow silent notification].  # noqa: E501

        :param vibrate_on_notification_when_setting_is_set_to_silent: The vibrate_on_notification_when_setting_is_set_to_silent of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._vibrate_on_notification_when_setting_is_set_to_silent = vibrate_on_notification_when_setting_is_set_to_silent

    @property
    def default_account(self):
        """Gets the default_account of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [samsung default account].  # noqa: E501

        :return: The default_account of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._default_account

    @default_account.setter
    def default_account(self, default_account):
        """Sets the default_account of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [samsung default account].  # noqa: E501

        :param default_account: The default_account of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._default_account = default_account

    @property
    def use_tls(self):
        """Gets the use_tls of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [samsung use TLS].  # noqa: E501

        :return: The use_tls of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_tls

    @use_tls.setter
    def use_tls(self, use_tls):
        """Sets the use_tls of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [samsung use TLS].  # noqa: E501

        :param use_tls: The use_tls of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_tls = use_tls

    @property
    def enable_security_restrictions(self):
        """Gets the enable_security_restrictions of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enable security restrictions].  # noqa: E501

        :return: The enable_security_restrictions of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_security_restrictions

    @enable_security_restrictions.setter
    def enable_security_restrictions(self, enable_security_restrictions):
        """Sets the enable_security_restrictions of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [enable security restrictions].  # noqa: E501

        :param enable_security_restrictions: The enable_security_restrictions of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_security_restrictions = enable_security_restrictions

    @property
    def disable_copying_data_to_phonebook(self):
        """Gets the disable_copying_data_to_phonebook of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [disable copy to phonebook].  # noqa: E501

        :return: The disable_copying_data_to_phonebook of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._disable_copying_data_to_phonebook

    @disable_copying_data_to_phonebook.setter
    def disable_copying_data_to_phonebook(self, disable_copying_data_to_phonebook):
        """Sets the disable_copying_data_to_phonebook of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [disable copy to phonebook].  # noqa: E501

        :param disable_copying_data_to_phonebook: The disable_copying_data_to_phonebook of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._disable_copying_data_to_phonebook = disable_copying_data_to_phonebook

    @property
    def allow_sd_card(self):
        """Gets the allow_sd_card of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow sd card].  # noqa: E501

        :return: The allow_sd_card of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sd_card

    @allow_sd_card.setter
    def allow_sd_card(self, allow_sd_card):
        """Sets the allow_sd_card of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow sd card].  # noqa: E501

        :param allow_sd_card: The allow_sd_card of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_sd_card = allow_sd_card

    @property
    def allow_widgets(self):
        """Gets the allow_widgets of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow widgets].  # noqa: E501

        :return: The allow_widgets of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_widgets

    @allow_widgets.setter
    def allow_widgets(self, allow_widgets):
        """Sets the allow_widgets of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow widgets].  # noqa: E501

        :param allow_widgets: The allow_widgets of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_widgets = allow_widgets

    @property
    def allow_email_widget(self):
        """Gets the allow_email_widget of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow email widget].  # noqa: E501

        :return: The allow_email_widget of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_email_widget

    @allow_email_widget.setter
    def allow_email_widget(self, allow_email_widget):
        """Sets the allow_email_widget of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow email widget].  # noqa: E501

        :param allow_email_widget: The allow_email_widget of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_email_widget = allow_email_widget

    @property
    def allow_calendar_widget(self):
        """Gets the allow_calendar_widget of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow calendar widget].  # noqa: E501

        :return: The allow_calendar_widget of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_calendar_widget

    @allow_calendar_widget.setter
    def allow_calendar_widget(self, allow_calendar_widget):
        """Sets the allow_calendar_widget of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow calendar widget].  # noqa: E501

        :param allow_calendar_widget: The allow_calendar_widget of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_calendar_widget = allow_calendar_widget

    @property
    def allow_task_widget(self):
        """Gets the allow_task_widget of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow task widget].  # noqa: E501

        :return: The allow_task_widget of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_task_widget

    @allow_task_widget.setter
    def allow_task_widget(self, allow_task_widget):
        """Sets the allow_task_widget of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow task widget].  # noqa: E501

        :param allow_task_widget: The allow_task_widget of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_task_widget = allow_task_widget

    @property
    def allow_universal_widget(self):
        """Gets the allow_universal_widget of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow universal widget].  # noqa: E501

        :return: The allow_universal_widget of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_universal_widget

    @allow_universal_widget.setter
    def allow_universal_widget(self, allow_universal_widget):
        """Sets the allow_universal_widget of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow universal widget].  # noqa: E501

        :param allow_universal_widget: The allow_universal_widget of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_universal_widget = allow_universal_widget

    @property
    def show_data_on_lock_screen_widgets(self):
        """Gets the show_data_on_lock_screen_widgets of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [show data lock screen].  # noqa: E501

        :return: The show_data_on_lock_screen_widgets of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._show_data_on_lock_screen_widgets

    @show_data_on_lock_screen_widgets.setter
    def show_data_on_lock_screen_widgets(self, show_data_on_lock_screen_widgets):
        """Sets the show_data_on_lock_screen_widgets of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [show data lock screen].  # noqa: E501

        :param show_data_on_lock_screen_widgets: The show_data_on_lock_screen_widgets of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._show_data_on_lock_screen_widgets = show_data_on_lock_screen_widgets

    @property
    def allow_speech_notifications(self):
        """Gets the allow_speech_notifications of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow speech].  # noqa: E501

        :return: The allow_speech_notifications of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_speech_notifications

    @allow_speech_notifications.setter
    def allow_speech_notifications(self, allow_speech_notifications):
        """Sets the allow_speech_notifications of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow speech].  # noqa: E501

        :param allow_speech_notifications: The allow_speech_notifications of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_speech_notifications = allow_speech_notifications

    @property
    def show_email_info_on_notification_bar(self):
        """Gets the show_email_info_on_notification_bar of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [show email information].  # noqa: E501

        :return: The show_email_info_on_notification_bar of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._show_email_info_on_notification_bar

    @show_email_info_on_notification_bar.setter
    def show_email_info_on_notification_bar(self, show_email_info_on_notification_bar):
        """Sets the show_email_info_on_notification_bar of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [show email information].  # noqa: E501

        :param show_email_info_on_notification_bar: The show_email_info_on_notification_bar of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._show_email_info_on_notification_bar = show_email_info_on_notification_bar

    @property
    def show_calendar_info_on_notification_bar(self):
        """Gets the show_calendar_info_on_notification_bar of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [show calendar information].  # noqa: E501

        :return: The show_calendar_info_on_notification_bar of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._show_calendar_info_on_notification_bar

    @show_calendar_info_on_notification_bar.setter
    def show_calendar_info_on_notification_bar(self, show_calendar_info_on_notification_bar):
        """Sets the show_calendar_info_on_notification_bar of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [show calendar information].  # noqa: E501

        :param show_calendar_info_on_notification_bar: The show_calendar_info_on_notification_bar of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._show_calendar_info_on_notification_bar = show_calendar_info_on_notification_bar

    @property
    def show_task_info_on_notification_bar(self):
        """Gets the show_task_info_on_notification_bar of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [show task information].  # noqa: E501

        :return: The show_task_info_on_notification_bar of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._show_task_info_on_notification_bar

    @show_task_info_on_notification_bar.setter
    def show_task_info_on_notification_bar(self, show_task_info_on_notification_bar):
        """Sets the show_task_info_on_notification_bar of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [show task information].  # noqa: E501

        :param show_task_info_on_notification_bar: The show_task_info_on_notification_bar of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._show_task_info_on_notification_bar = show_task_info_on_notification_bar

    @property
    def disable_data_backup(self):
        """Gets the disable_data_backup of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [disable data backup].  # noqa: E501

        :return: The disable_data_backup of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._disable_data_backup

    @disable_data_backup.setter
    def disable_data_backup(self, disable_data_backup):
        """Sets the disable_data_backup of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [disable data backup].  # noqa: E501

        :param disable_data_backup: The disable_data_backup of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._disable_data_backup = disable_data_backup

    @property
    def disable_settings_backup(self):
        """Gets the disable_settings_backup of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [disable settings backup].  # noqa: E501

        :return: The disable_settings_backup of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._disable_settings_backup

    @disable_settings_backup.setter
    def disable_settings_backup(self, disable_settings_backup):
        """Sets the disable_settings_backup of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [disable settings backup].  # noqa: E501

        :param disable_settings_backup: The disable_settings_backup of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._disable_settings_backup = disable_settings_backup

    @property
    def htc_use_ssl(self):
        """Gets the htc_use_ssl of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [HTC use SSL].  # noqa: E501

        :return: The htc_use_ssl of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._htc_use_ssl

    @htc_use_ssl.setter
    def htc_use_ssl(self, htc_use_ssl):
        """Sets the htc_use_ssl of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [HTC use SSL].  # noqa: E501

        :param htc_use_ssl: The htc_use_ssl of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._htc_use_ssl = htc_use_ssl

    @property
    def allow_sync_email(self):
        """Gets the allow_sync_email of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow synchronize email].  # noqa: E501

        :return: The allow_sync_email of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sync_email

    @allow_sync_email.setter
    def allow_sync_email(self, allow_sync_email):
        """Sets the allow_sync_email of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow synchronize email].  # noqa: E501

        :param allow_sync_email: The allow_sync_email of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_sync_email = allow_sync_email

    @property
    def native_client_override(self):
        """Gets the native_client_override of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [native client override].  # noqa: E501

        :return: The native_client_override of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._native_client_override

    @native_client_override.setter
    def native_client_override(self, native_client_override):
        """Sets the native_client_override of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [native client override].  # noqa: E501

        :param native_client_override: The native_client_override of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._native_client_override = native_client_override

    @property
    def enable_attachment_encryption(self):
        """Gets the enable_attachment_encryption of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [enable attachment encryption].  # noqa: E501

        :return: The enable_attachment_encryption of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_attachment_encryption

    @enable_attachment_encryption.setter
    def enable_attachment_encryption(self, enable_attachment_encryption):
        """Sets the enable_attachment_encryption of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [enable attachment encryption].  # noqa: E501

        :param enable_attachment_encryption: The enable_attachment_encryption of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_attachment_encryption = enable_attachment_encryption

    @property
    def attachment_restricted_app_list(self):
        """Gets the attachment_restricted_app_list of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the attachment restricted application list.  # noqa: E501

        :return: The attachment_restricted_app_list of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._attachment_restricted_app_list

    @attachment_restricted_app_list.setter
    def attachment_restricted_app_list(self, attachment_restricted_app_list):
        """Sets the attachment_restricted_app_list of this AndroidEASPayloadV2Entity.

        Gets or sets the attachment restricted application list.  # noqa: E501

        :param attachment_restricted_app_list: The attachment_restricted_app_list of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._attachment_restricted_app_list = attachment_restricted_app_list

    @property
    def use_smime(self):
        """Gets the use_smime of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow smime cert select].  # noqa: E501

        :return: The use_smime of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._use_smime

    @use_smime.setter
    def use_smime(self, use_smime):
        """Sets the use_smime of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow smime cert select].  # noqa: E501

        :param use_smime: The use_smime of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._use_smime = use_smime

    @property
    def smime_cert_payload_name(self):
        """Gets the smime_cert_payload_name of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the smime cert payload.  # noqa: E501

        :return: The smime_cert_payload_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._smime_cert_payload_name

    @smime_cert_payload_name.setter
    def smime_cert_payload_name(self, smime_cert_payload_name):
        """Sets the smime_cert_payload_name of this AndroidEASPayloadV2Entity.

        Gets or sets the name of the smime cert payload.  # noqa: E501

        :param smime_cert_payload_name: The smime_cert_payload_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._smime_cert_payload_name = smime_cert_payload_name

    @property
    def require_smime_messages(self):
        """Gets the require_smime_messages of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [require smime messages].  # noqa: E501

        :return: The require_smime_messages of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._require_smime_messages

    @require_smime_messages.setter
    def require_smime_messages(self, require_smime_messages):
        """Sets the require_smime_messages of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [require smime messages].  # noqa: E501

        :param require_smime_messages: The require_smime_messages of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._require_smime_messages = require_smime_messages

    @property
    def require_signed_smime(self):
        """Gets the require_signed_smime of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [require signed smime].  # noqa: E501

        :return: The require_signed_smime of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._require_signed_smime

    @require_signed_smime.setter
    def require_signed_smime(self, require_signed_smime):
        """Sets the require_signed_smime of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [require signed smime].  # noqa: E501

        :param require_signed_smime: The require_signed_smime of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._require_signed_smime = require_signed_smime

    @property
    def allow_email_forwarding(self):
        """Gets the allow_email_forwarding of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow email forwarding].  # noqa: E501

        :return: The allow_email_forwarding of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_email_forwarding

    @allow_email_forwarding.setter
    def allow_email_forwarding(self, allow_email_forwarding):
        """Sets the allow_email_forwarding of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow email forwarding].  # noqa: E501

        :param allow_email_forwarding: The allow_email_forwarding of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_email_forwarding = allow_email_forwarding

    @property
    def allow_html_format(self):
        """Gets the allow_html_format of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow HTML format].  # noqa: E501

        :return: The allow_html_format of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_html_format

    @allow_html_format.setter
    def allow_html_format(self, allow_html_format):
        """Sets the allow_html_format of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow HTML format].  # noqa: E501

        :param allow_html_format: The allow_html_format of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_html_format = allow_html_format

    @property
    def aw_email_client_max_email_age_filter(self):
        """Gets the aw_email_client_max_email_age_filter of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the aw email client maximum email age filter.  # noqa: E501

        :return: The aw_email_client_max_email_age_filter of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._aw_email_client_max_email_age_filter

    @aw_email_client_max_email_age_filter.setter
    def aw_email_client_max_email_age_filter(self, aw_email_client_max_email_age_filter):
        """Sets the aw_email_client_max_email_age_filter of this AndroidEASPayloadV2Entity.

        Gets or sets the aw email client maximum email age filter.  # noqa: E501

        :param aw_email_client_max_email_age_filter: The aw_email_client_max_email_age_filter of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._aw_email_client_max_email_age_filter = aw_email_client_max_email_age_filter

    @property
    def aw_email_client_sync_interval(self):
        """Gets the aw_email_client_sync_interval of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the aw email client synchronize interval.  # noqa: E501

        :return: The aw_email_client_sync_interval of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._aw_email_client_sync_interval

    @aw_email_client_sync_interval.setter
    def aw_email_client_sync_interval(self, aw_email_client_sync_interval):
        """Sets the aw_email_client_sync_interval of this AndroidEASPayloadV2Entity.

        Gets or sets the aw email client synchronize interval.  # noqa: E501

        :param aw_email_client_sync_interval: The aw_email_client_sync_interval of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._aw_email_client_sync_interval = aw_email_client_sync_interval

    @property
    def white_list_black_list_domain_name(self):
        """Gets the white_list_black_list_domain_name of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the white list black list domain.  # noqa: E501

        :return: The white_list_black_list_domain_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._white_list_black_list_domain_name

    @white_list_black_list_domain_name.setter
    def white_list_black_list_domain_name(self, white_list_black_list_domain_name):
        """Sets the white_list_black_list_domain_name of this AndroidEASPayloadV2Entity.

        Gets or sets the name of the white list black list domain.  # noqa: E501

        :param white_list_black_list_domain_name: The white_list_black_list_domain_name of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._white_list_black_list_domain_name = white_list_black_list_domain_name

    @property
    def suppress_application_pin(self):
        """Gets the suppress_application_pin of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [suppress application pin].  # noqa: E501

        :return: The suppress_application_pin of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_application_pin

    @suppress_application_pin.setter
    def suppress_application_pin(self, suppress_application_pin):
        """Sets the suppress_application_pin of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [suppress application pin].  # noqa: E501

        :param suppress_application_pin: The suppress_application_pin of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._suppress_application_pin = suppress_application_pin

    @property
    def migration_host(self):
        """Gets the migration_host of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the migration host.  # noqa: E501

        :return: The migration_host of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._migration_host

    @migration_host.setter
    def migration_host(self, migration_host):
        """Sets the migration_host of this AndroidEASPayloadV2Entity.

        Gets or sets the migration host.  # noqa: E501

        :param migration_host: The migration_host of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._migration_host = migration_host

    @property
    def license_key(self):
        """Gets the license_key of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets the license key.  # noqa: E501

        :return: The license_key of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key):
        """Sets the license_key of this AndroidEASPayloadV2Entity.

        Gets or sets the license key.  # noqa: E501

        :param license_key: The license_key of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._license_key = license_key

    @property
    def allow_personal_and_work_contacts_combined(self):
        """Gets the allow_personal_and_work_contacts_combined of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [contacts combined view].  # noqa: E501

        :return: The allow_personal_and_work_contacts_combined of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_personal_and_work_contacts_combined

    @allow_personal_and_work_contacts_combined.setter
    def allow_personal_and_work_contacts_combined(self, allow_personal_and_work_contacts_combined):
        """Sets the allow_personal_and_work_contacts_combined of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [contacts combined view].  # noqa: E501

        :param allow_personal_and_work_contacts_combined: The allow_personal_and_work_contacts_combined of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_personal_and_work_contacts_combined = allow_personal_and_work_contacts_combined

    @property
    def allow_import_export(self):
        """Gets the allow_import_export of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [allow import export].  # noqa: E501

        :return: The allow_import_export of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_import_export

    @allow_import_export.setter
    def allow_import_export(self, allow_import_export):
        """Sets the allow_import_export of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [allow import export].  # noqa: E501

        :param allow_import_export: The allow_import_export of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_import_export = allow_import_export

    @property
    def show_corporate_contacts_details_on_incoming_calls(self):
        """Gets the show_corporate_contacts_details_on_incoming_calls of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [show contacts in calls].  # noqa: E501

        :return: The show_corporate_contacts_details_on_incoming_calls of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._show_corporate_contacts_details_on_incoming_calls

    @show_corporate_contacts_details_on_incoming_calls.setter
    def show_corporate_contacts_details_on_incoming_calls(self, show_corporate_contacts_details_on_incoming_calls):
        """Sets the show_corporate_contacts_details_on_incoming_calls of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [show contacts in calls].  # noqa: E501

        :param show_corporate_contacts_details_on_incoming_calls: The show_corporate_contacts_details_on_incoming_calls of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._show_corporate_contacts_details_on_incoming_calls = show_corporate_contacts_details_on_incoming_calls

    @property
    def allow_personal_and_work_calendars_combined(self):
        """Gets the allow_personal_and_work_calendars_combined of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether [calendar combined view].  # noqa: E501

        :return: The allow_personal_and_work_calendars_combined of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_personal_and_work_calendars_combined

    @allow_personal_and_work_calendars_combined.setter
    def allow_personal_and_work_calendars_combined(self, allow_personal_and_work_calendars_combined):
        """Sets the allow_personal_and_work_calendars_combined of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether [calendar combined view].  # noqa: E501

        :param allow_personal_and_work_calendars_combined: The allow_personal_and_work_calendars_combined of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_personal_and_work_calendars_combined = allow_personal_and_work_calendars_combined

    @property
    def sunday(self):
        """Gets the sunday of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is sunday.  # noqa: E501

        :return: The sunday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is sunday.  # noqa: E501

        :param sunday: The sunday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._sunday = sunday

    @property
    def monday(self):
        """Gets the monday of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is monday.  # noqa: E501

        :return: The monday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """Sets the monday of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is monday.  # noqa: E501

        :param monday: The monday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._monday = monday

    @property
    def tuesday(self):
        """Gets the tuesday of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is tuesday.  # noqa: E501

        :return: The tuesday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._tuesday

    @tuesday.setter
    def tuesday(self, tuesday):
        """Sets the tuesday of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is tuesday.  # noqa: E501

        :param tuesday: The tuesday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._tuesday = tuesday

    @property
    def wednesday(self):
        """Gets the wednesday of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is wednesday.  # noqa: E501

        :return: The wednesday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """Sets the wednesday of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is wednesday.  # noqa: E501

        :param wednesday: The wednesday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._wednesday = wednesday

    @property
    def thursday(self):
        """Gets the thursday of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is thursday.  # noqa: E501

        :return: The thursday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """Sets the thursday of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is thursday.  # noqa: E501

        :param thursday: The thursday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._thursday = thursday

    @property
    def friday(self):
        """Gets the friday of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is friday.  # noqa: E501

        :return: The friday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """Sets the friday of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is friday.  # noqa: E501

        :param friday: The friday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._friday = friday

    @property
    def saturday(self):
        """Gets the saturday of this AndroidEASPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is saturday.  # noqa: E501

        :return: The saturday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this AndroidEASPayloadV2Entity.

        Gets or sets a value indicating whether this {AirWatch.ServiceModel.Profiles.V2.Resources.Android.AndroidEASPayloadV2Entity} is saturday.  # noqa: E501

        :param saturday: The saturday of this AndroidEASPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._saturday = saturday

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidEASPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidEASPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidEASPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
