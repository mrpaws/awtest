# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DriveInformationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drive_status': 'int',
        'volume_identifier': 'str',
        'drive_letter': 'str',
        'volume_name': 'str',
        'volume_type': 'int',
        'size_in_bytes': 'int',
        'bitlocker_version': 'str',
        'conversion_status': 'int',
        'percentage_encrypted': 'float',
        'encryption_method': 'int',
        'protection_status': 'bool',
        'number_reboots_remaining': 'int',
        'lock_status': 'bool',
        'identification_field': 'str',
        'auto_unlock': 'bool',
        'is_active': 'bool',
        'dell_ddpe_status': 'int',
        'suspended_status': 'int',
        'profile_unique_key': 'str',
        'links': 'dict(str, JsonHalLinkModel)'
    }

    attribute_map = {
        'drive_status': 'drive_status',
        'volume_identifier': 'volume_identifier',
        'drive_letter': 'drive_letter',
        'volume_name': 'volume_name',
        'volume_type': 'volume_type',
        'size_in_bytes': 'size_in_bytes',
        'bitlocker_version': 'bitlocker_version',
        'conversion_status': 'conversion_status',
        'percentage_encrypted': 'percentage_encrypted',
        'encryption_method': 'encryption_method',
        'protection_status': 'protection_status',
        'number_reboots_remaining': 'number_reboots_remaining',
        'lock_status': 'lock_status',
        'identification_field': 'identification_field',
        'auto_unlock': 'auto_unlock',
        'is_active': 'is_active',
        'dell_ddpe_status': 'dell_ddpe_status',
        'suspended_status': 'suspended_status',
        'profile_unique_key': 'profile_unique_key',
        'links': '_links'
    }

    def __init__(self, drive_status=None, volume_identifier=None, drive_letter=None, volume_name=None, volume_type=None, size_in_bytes=None, bitlocker_version=None, conversion_status=None, percentage_encrypted=None, encryption_method=None, protection_status=None, number_reboots_remaining=None, lock_status=None, identification_field=None, auto_unlock=None, is_active=None, dell_ddpe_status=None, suspended_status=None, profile_unique_key=None, links=None, _configuration=None):  # noqa: E501
        """DriveInformationModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._drive_status = None
        self._volume_identifier = None
        self._drive_letter = None
        self._volume_name = None
        self._volume_type = None
        self._size_in_bytes = None
        self._bitlocker_version = None
        self._conversion_status = None
        self._percentage_encrypted = None
        self._encryption_method = None
        self._protection_status = None
        self._number_reboots_remaining = None
        self._lock_status = None
        self._identification_field = None
        self._auto_unlock = None
        self._is_active = None
        self._dell_ddpe_status = None
        self._suspended_status = None
        self._profile_unique_key = None
        self._links = None
        self.discriminator = None

        if drive_status is not None:
            self.drive_status = drive_status
        if volume_identifier is not None:
            self.volume_identifier = volume_identifier
        if drive_letter is not None:
            self.drive_letter = drive_letter
        if volume_name is not None:
            self.volume_name = volume_name
        if volume_type is not None:
            self.volume_type = volume_type
        if size_in_bytes is not None:
            self.size_in_bytes = size_in_bytes
        if bitlocker_version is not None:
            self.bitlocker_version = bitlocker_version
        if conversion_status is not None:
            self.conversion_status = conversion_status
        if percentage_encrypted is not None:
            self.percentage_encrypted = percentage_encrypted
        if encryption_method is not None:
            self.encryption_method = encryption_method
        if protection_status is not None:
            self.protection_status = protection_status
        if number_reboots_remaining is not None:
            self.number_reboots_remaining = number_reboots_remaining
        if lock_status is not None:
            self.lock_status = lock_status
        if identification_field is not None:
            self.identification_field = identification_field
        if auto_unlock is not None:
            self.auto_unlock = auto_unlock
        if is_active is not None:
            self.is_active = is_active
        if dell_ddpe_status is not None:
            self.dell_ddpe_status = dell_ddpe_status
        if suspended_status is not None:
            self.suspended_status = suspended_status
        if profile_unique_key is not None:
            self.profile_unique_key = profile_unique_key
        if links is not None:
            self.links = links

    @property
    def drive_status(self):
        """Gets the drive_status of this DriveInformationModel.  # noqa: E501

        Gets or sets the Drive Status.  # noqa: E501

        :return: The drive_status of this DriveInformationModel.  # noqa: E501
        :rtype: int
        """
        return self._drive_status

    @drive_status.setter
    def drive_status(self, drive_status):
        """Sets the drive_status of this DriveInformationModel.

        Gets or sets the Drive Status.  # noqa: E501

        :param drive_status: The drive_status of this DriveInformationModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6]  # noqa: E501
        if (self._configuration.client_side_validation and
                drive_status not in allowed_values):
            raise ValueError(
                "Invalid value for `drive_status` ({0}), must be one of {1}"  # noqa: E501
                .format(drive_status, allowed_values)
            )

        self._drive_status = drive_status

    @property
    def volume_identifier(self):
        """Gets the volume_identifier of this DriveInformationModel.  # noqa: E501

        Gets or sets the Volume Identifier.  # noqa: E501

        :return: The volume_identifier of this DriveInformationModel.  # noqa: E501
        :rtype: str
        """
        return self._volume_identifier

    @volume_identifier.setter
    def volume_identifier(self, volume_identifier):
        """Sets the volume_identifier of this DriveInformationModel.

        Gets or sets the Volume Identifier.  # noqa: E501

        :param volume_identifier: The volume_identifier of this DriveInformationModel.  # noqa: E501
        :type: str
        """

        self._volume_identifier = volume_identifier

    @property
    def drive_letter(self):
        """Gets the drive_letter of this DriveInformationModel.  # noqa: E501

        Gets or sets the Drive Letter.  # noqa: E501

        :return: The drive_letter of this DriveInformationModel.  # noqa: E501
        :rtype: str
        """
        return self._drive_letter

    @drive_letter.setter
    def drive_letter(self, drive_letter):
        """Sets the drive_letter of this DriveInformationModel.

        Gets or sets the Drive Letter.  # noqa: E501

        :param drive_letter: The drive_letter of this DriveInformationModel.  # noqa: E501
        :type: str
        """

        self._drive_letter = drive_letter

    @property
    def volume_name(self):
        """Gets the volume_name of this DriveInformationModel.  # noqa: E501

        Gets or sets the Volume Name.  # noqa: E501

        :return: The volume_name of this DriveInformationModel.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this DriveInformationModel.

        Gets or sets the Volume Name.  # noqa: E501

        :param volume_name: The volume_name of this DriveInformationModel.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    @property
    def volume_type(self):
        """Gets the volume_type of this DriveInformationModel.  # noqa: E501

        Gets or sets the Volume Type.  # noqa: E501

        :return: The volume_type of this DriveInformationModel.  # noqa: E501
        :rtype: int
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this DriveInformationModel.

        Gets or sets the Volume Type.  # noqa: E501

        :param volume_type: The volume_type of this DriveInformationModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                volume_type not in allowed_values):
            raise ValueError(
                "Invalid value for `volume_type` ({0}), must be one of {1}"  # noqa: E501
                .format(volume_type, allowed_values)
            )

        self._volume_type = volume_type

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this DriveInformationModel.  # noqa: E501

        Gets or sets the Size in Bytes.  # noqa: E501

        :return: The size_in_bytes of this DriveInformationModel.  # noqa: E501
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this DriveInformationModel.

        Gets or sets the Size in Bytes.  # noqa: E501

        :param size_in_bytes: The size_in_bytes of this DriveInformationModel.  # noqa: E501
        :type: int
        """

        self._size_in_bytes = size_in_bytes

    @property
    def bitlocker_version(self):
        """Gets the bitlocker_version of this DriveInformationModel.  # noqa: E501

        Gets or sets the BitLocker version.  # noqa: E501

        :return: The bitlocker_version of this DriveInformationModel.  # noqa: E501
        :rtype: str
        """
        return self._bitlocker_version

    @bitlocker_version.setter
    def bitlocker_version(self, bitlocker_version):
        """Sets the bitlocker_version of this DriveInformationModel.

        Gets or sets the BitLocker version.  # noqa: E501

        :param bitlocker_version: The bitlocker_version of this DriveInformationModel.  # noqa: E501
        :type: str
        """

        self._bitlocker_version = bitlocker_version

    @property
    def conversion_status(self):
        """Gets the conversion_status of this DriveInformationModel.  # noqa: E501

        Gets or sets the Conversion Status.  # noqa: E501

        :return: The conversion_status of this DriveInformationModel.  # noqa: E501
        :rtype: int
        """
        return self._conversion_status

    @conversion_status.setter
    def conversion_status(self, conversion_status):
        """Sets the conversion_status of this DriveInformationModel.

        Gets or sets the Conversion Status.  # noqa: E501

        :param conversion_status: The conversion_status of this DriveInformationModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                conversion_status not in allowed_values):
            raise ValueError(
                "Invalid value for `conversion_status` ({0}), must be one of {1}"  # noqa: E501
                .format(conversion_status, allowed_values)
            )

        self._conversion_status = conversion_status

    @property
    def percentage_encrypted(self):
        """Gets the percentage_encrypted of this DriveInformationModel.  # noqa: E501

        Gets or sets the Percentage Encrypted.  # noqa: E501

        :return: The percentage_encrypted of this DriveInformationModel.  # noqa: E501
        :rtype: float
        """
        return self._percentage_encrypted

    @percentage_encrypted.setter
    def percentage_encrypted(self, percentage_encrypted):
        """Sets the percentage_encrypted of this DriveInformationModel.

        Gets or sets the Percentage Encrypted.  # noqa: E501

        :param percentage_encrypted: The percentage_encrypted of this DriveInformationModel.  # noqa: E501
        :type: float
        """

        self._percentage_encrypted = percentage_encrypted

    @property
    def encryption_method(self):
        """Gets the encryption_method of this DriveInformationModel.  # noqa: E501

        Gets or sets the Encryption Method.  # noqa: E501

        :return: The encryption_method of this DriveInformationModel.  # noqa: E501
        :rtype: int
        """
        return self._encryption_method

    @encryption_method.setter
    def encryption_method(self, encryption_method):
        """Sets the encryption_method of this DriveInformationModel.

        Gets or sets the Encryption Method.  # noqa: E501

        :param encryption_method: The encryption_method of this DriveInformationModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 3, 4, 6, 7]  # noqa: E501
        if (self._configuration.client_side_validation and
                encryption_method not in allowed_values):
            raise ValueError(
                "Invalid value for `encryption_method` ({0}), must be one of {1}"  # noqa: E501
                .format(encryption_method, allowed_values)
            )

        self._encryption_method = encryption_method

    @property
    def protection_status(self):
        """Gets the protection_status of this DriveInformationModel.  # noqa: E501

        Gets or sets a value indicating whether the Protection Status is enabled.  # noqa: E501

        :return: The protection_status of this DriveInformationModel.  # noqa: E501
        :rtype: bool
        """
        return self._protection_status

    @protection_status.setter
    def protection_status(self, protection_status):
        """Sets the protection_status of this DriveInformationModel.

        Gets or sets a value indicating whether the Protection Status is enabled.  # noqa: E501

        :param protection_status: The protection_status of this DriveInformationModel.  # noqa: E501
        :type: bool
        """

        self._protection_status = protection_status

    @property
    def number_reboots_remaining(self):
        """Gets the number_reboots_remaining of this DriveInformationModel.  # noqa: E501

        Gets or sets the Number of Reboots remaining.  # noqa: E501

        :return: The number_reboots_remaining of this DriveInformationModel.  # noqa: E501
        :rtype: int
        """
        return self._number_reboots_remaining

    @number_reboots_remaining.setter
    def number_reboots_remaining(self, number_reboots_remaining):
        """Sets the number_reboots_remaining of this DriveInformationModel.

        Gets or sets the Number of Reboots remaining.  # noqa: E501

        :param number_reboots_remaining: The number_reboots_remaining of this DriveInformationModel.  # noqa: E501
        :type: int
        """

        self._number_reboots_remaining = number_reboots_remaining

    @property
    def lock_status(self):
        """Gets the lock_status of this DriveInformationModel.  # noqa: E501

        Gets or sets a value indicating whether the Lock Status is enabled.  # noqa: E501

        :return: The lock_status of this DriveInformationModel.  # noqa: E501
        :rtype: bool
        """
        return self._lock_status

    @lock_status.setter
    def lock_status(self, lock_status):
        """Sets the lock_status of this DriveInformationModel.

        Gets or sets a value indicating whether the Lock Status is enabled.  # noqa: E501

        :param lock_status: The lock_status of this DriveInformationModel.  # noqa: E501
        :type: bool
        """

        self._lock_status = lock_status

    @property
    def identification_field(self):
        """Gets the identification_field of this DriveInformationModel.  # noqa: E501

        Gets or sets the Identification Field.  # noqa: E501

        :return: The identification_field of this DriveInformationModel.  # noqa: E501
        :rtype: str
        """
        return self._identification_field

    @identification_field.setter
    def identification_field(self, identification_field):
        """Sets the identification_field of this DriveInformationModel.

        Gets or sets the Identification Field.  # noqa: E501

        :param identification_field: The identification_field of this DriveInformationModel.  # noqa: E501
        :type: str
        """

        self._identification_field = identification_field

    @property
    def auto_unlock(self):
        """Gets the auto_unlock of this DriveInformationModel.  # noqa: E501

        Gets or sets a value indicating whether the Auto unlock is enabled.  # noqa: E501

        :return: The auto_unlock of this DriveInformationModel.  # noqa: E501
        :rtype: bool
        """
        return self._auto_unlock

    @auto_unlock.setter
    def auto_unlock(self, auto_unlock):
        """Sets the auto_unlock of this DriveInformationModel.

        Gets or sets a value indicating whether the Auto unlock is enabled.  # noqa: E501

        :param auto_unlock: The auto_unlock of this DriveInformationModel.  # noqa: E501
        :type: bool
        """

        self._auto_unlock = auto_unlock

    @property
    def is_active(self):
        """Gets the is_active of this DriveInformationModel.  # noqa: E501

        Gets or sets a value indicating whether drive is Active.  # noqa: E501

        :return: The is_active of this DriveInformationModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this DriveInformationModel.

        Gets or sets a value indicating whether drive is Active.  # noqa: E501

        :param is_active: The is_active of this DriveInformationModel.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def dell_ddpe_status(self):
        """Gets the dell_ddpe_status of this DriveInformationModel.  # noqa: E501

        Gets or sets the Dell DDPE status.  # noqa: E501

        :return: The dell_ddpe_status of this DriveInformationModel.  # noqa: E501
        :rtype: int
        """
        return self._dell_ddpe_status

    @dell_ddpe_status.setter
    def dell_ddpe_status(self, dell_ddpe_status):
        """Sets the dell_ddpe_status of this DriveInformationModel.

        Gets or sets the Dell DDPE status.  # noqa: E501

        :param dell_ddpe_status: The dell_ddpe_status of this DriveInformationModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                dell_ddpe_status not in allowed_values):
            raise ValueError(
                "Invalid value for `dell_ddpe_status` ({0}), must be one of {1}"  # noqa: E501
                .format(dell_ddpe_status, allowed_values)
            )

        self._dell_ddpe_status = dell_ddpe_status

    @property
    def suspended_status(self):
        """Gets the suspended_status of this DriveInformationModel.  # noqa: E501

        Gets or sets the Suspended Status.  # noqa: E501

        :return: The suspended_status of this DriveInformationModel.  # noqa: E501
        :rtype: int
        """
        return self._suspended_status

    @suspended_status.setter
    def suspended_status(self, suspended_status):
        """Sets the suspended_status of this DriveInformationModel.

        Gets or sets the Suspended Status.  # noqa: E501

        :param suspended_status: The suspended_status of this DriveInformationModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                suspended_status not in allowed_values):
            raise ValueError(
                "Invalid value for `suspended_status` ({0}), must be one of {1}"  # noqa: E501
                .format(suspended_status, allowed_values)
            )

        self._suspended_status = suspended_status

    @property
    def profile_unique_key(self):
        """Gets the profile_unique_key of this DriveInformationModel.  # noqa: E501

        Gets or sets the Profile Unique Key.  # noqa: E501

        :return: The profile_unique_key of this DriveInformationModel.  # noqa: E501
        :rtype: str
        """
        return self._profile_unique_key

    @profile_unique_key.setter
    def profile_unique_key(self, profile_unique_key):
        """Sets the profile_unique_key of this DriveInformationModel.

        Gets or sets the Profile Unique Key.  # noqa: E501

        :param profile_unique_key: The profile_unique_key of this DriveInformationModel.  # noqa: E501
        :type: str
        """

        self._profile_unique_key = profile_unique_key

    @property
    def links(self):
        """Gets the links of this DriveInformationModel.  # noqa: E501

        Gets a list of JSON HAL links.  # noqa: E501

        :return: The links of this DriveInformationModel.  # noqa: E501
        :rtype: dict(str, JsonHalLinkModel)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DriveInformationModel.

        Gets a list of JSON HAL links.  # noqa: E501

        :param links: The links of this DriveInformationModel.  # noqa: E501
        :type: dict(str, JsonHalLinkModel)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DriveInformationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriveInformationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DriveInformationModel):
            return True

        return self.to_dict() != other.to_dict()
