# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class OemUpdateSummaryV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summary_uuid': 'str',
        'message': 'str',
        'type': 'str',
        'process': 'str',
        'release': 'str',
        'name': 'str',
        'version': 'str',
        'criticality': 'str',
        'update_date': 'str',
        'update_type': 'str',
        'category': 'str',
        'framework': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'summary_uuid': 'summaryUuid',
        'message': 'message',
        'type': 'type',
        'process': 'process',
        'release': 'release',
        'name': 'name',
        'version': 'version',
        'criticality': 'criticality',
        'update_date': 'updateDate',
        'update_type': 'updateType',
        'category': 'category',
        'framework': 'framework',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, summary_uuid=None, message=None, type=None, process=None, release=None, name=None, version=None, criticality=None, update_date=None, update_type=None, category=None, framework=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """OemUpdateSummaryV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._summary_uuid = None
        self._message = None
        self._type = None
        self._process = None
        self._release = None
        self._name = None
        self._version = None
        self._criticality = None
        self._update_date = None
        self._update_type = None
        self._category = None
        self._framework = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if summary_uuid is not None:
            self.summary_uuid = summary_uuid
        if message is not None:
            self.message = message
        if type is not None:
            self.type = type
        if process is not None:
            self.process = process
        if release is not None:
            self.release = release
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if criticality is not None:
            self.criticality = criticality
        if update_date is not None:
            self.update_date = update_date
        if update_type is not None:
            self.update_type = update_type
        if category is not None:
            self.category = category
        if framework is not None:
            self.framework = framework
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def summary_uuid(self):
        """Gets the summary_uuid of this OemUpdateSummaryV1Model.  # noqa: E501

        Unique value identifies the OEM Update summary.  # noqa: E501

        :return: The summary_uuid of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._summary_uuid

    @summary_uuid.setter
    def summary_uuid(self, summary_uuid):
        """Sets the summary_uuid of this OemUpdateSummaryV1Model.

        Unique value identifies the OEM Update summary.  # noqa: E501

        :param summary_uuid: The summary_uuid of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._summary_uuid = summary_uuid

    @property
    def message(self):
        """Gets the message of this OemUpdateSummaryV1Model.  # noqa: E501

        Message received from the device.  # noqa: E501

        :return: The message of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OemUpdateSummaryV1Model.

        Message received from the device.  # noqa: E501

        :param message: The message of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this OemUpdateSummaryV1Model.  # noqa: E501

        Type of the update received from the device.  # noqa: E501

        :return: The type of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OemUpdateSummaryV1Model.

        Type of the update received from the device.  # noqa: E501

        :param type: The type of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def process(self):
        """Gets the process of this OemUpdateSummaryV1Model.  # noqa: E501

        Process of the update received from the update  # noqa: E501

        :return: The process of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this OemUpdateSummaryV1Model.

        Process of the update received from the update  # noqa: E501

        :param process: The process of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._process = process

    @property
    def release(self):
        """Gets the release of this OemUpdateSummaryV1Model.  # noqa: E501

        Release name of the software received from the device.  # noqa: E501

        :return: The release of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this OemUpdateSummaryV1Model.

        Release name of the software received from the device.  # noqa: E501

        :param release: The release of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._release = release

    @property
    def name(self):
        """Gets the name of this OemUpdateSummaryV1Model.  # noqa: E501

        Name of the update received from the device.  # noqa: E501

        :return: The name of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OemUpdateSummaryV1Model.

        Name of the update received from the device.  # noqa: E501

        :param name: The name of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this OemUpdateSummaryV1Model.  # noqa: E501

        Version of the software update received from the device.  # noqa: E501

        :return: The version of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OemUpdateSummaryV1Model.

        Version of the software update received from the device.  # noqa: E501

        :param version: The version of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def criticality(self):
        """Gets the criticality of this OemUpdateSummaryV1Model.  # noqa: E501

        Criticality of the update received from the device.  # noqa: E501

        :return: The criticality of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._criticality

    @criticality.setter
    def criticality(self, criticality):
        """Sets the criticality of this OemUpdateSummaryV1Model.

        Criticality of the update received from the device.  # noqa: E501

        :param criticality: The criticality of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._criticality = criticality

    @property
    def update_date(self):
        """Gets the update_date of this OemUpdateSummaryV1Model.  # noqa: E501

        Date actually oemupdate update is available for the given summary.  # noqa: E501

        :return: The update_date of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this OemUpdateSummaryV1Model.

        Date actually oemupdate update is available for the given summary.  # noqa: E501

        :param update_date: The update_date of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    @property
    def update_type(self):
        """Gets the update_type of this OemUpdateSummaryV1Model.  # noqa: E501

        Update type received from the device.  # noqa: E501

        :return: The update_type of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this OemUpdateSummaryV1Model.

        Update type received from the device.  # noqa: E501

        :param update_type: The update_type of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._update_type = update_type

    @property
    def category(self):
        """Gets the category of this OemUpdateSummaryV1Model.  # noqa: E501

        Category of the update received from the device.  # noqa: E501

        :return: The category of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this OemUpdateSummaryV1Model.

        Category of the update received from the device.  # noqa: E501

        :param category: The category of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def framework(self):
        """Gets the framework of this OemUpdateSummaryV1Model.  # noqa: E501

        Framework of the software received from the device.  # noqa: E501

        :return: The framework of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._framework

    @framework.setter
    def framework(self, framework):
        """Sets the framework of this OemUpdateSummaryV1Model.

        Framework of the software received from the device.  # noqa: E501

        :param framework: The framework of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._framework = framework

    @property
    def id(self):
        """Gets the id of this OemUpdateSummaryV1Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OemUpdateSummaryV1Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this OemUpdateSummaryV1Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this OemUpdateSummaryV1Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this OemUpdateSummaryV1Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this OemUpdateSummaryV1Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OemUpdateSummaryV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OemUpdateSummaryV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OemUpdateSummaryV1Model):
            return True

        return self.to_dict() != other.to_dict()
