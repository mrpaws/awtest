# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceSensorSmartGroupAssignmentResponseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_items': 'int',
        'accepted_items': 'int',
        'failed_items': 'int',
        'activity_id': 'str',
        'failed_sensors': 'list[DeviceSensorSmartGroupAssignmentFailedResponseV1Model]',
        'failed_smart_groups': 'list[DeviceSensorSmartGroupAssignmentFailedResponseV1Model]',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'total_items': 'total_items',
        'accepted_items': 'accepted_items',
        'failed_items': 'failed_items',
        'activity_id': 'activity_id',
        'failed_sensors': 'failed_sensors',
        'failed_smart_groups': 'failed_smart_groups',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, total_items=None, accepted_items=None, failed_items=None, activity_id=None, failed_sensors=None, failed_smart_groups=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """DeviceSensorSmartGroupAssignmentResponseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_items = None
        self._accepted_items = None
        self._failed_items = None
        self._activity_id = None
        self._failed_sensors = None
        self._failed_smart_groups = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if total_items is not None:
            self.total_items = total_items
        if accepted_items is not None:
            self.accepted_items = accepted_items
        if failed_items is not None:
            self.failed_items = failed_items
        if activity_id is not None:
            self.activity_id = activity_id
        if failed_sensors is not None:
            self.failed_sensors = failed_sensors
        if failed_smart_groups is not None:
            self.failed_smart_groups = failed_smart_groups
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def total_items(self):
        """Gets the total_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501

        Total number of items count sent for processing.  # noqa: E501

        :return: The total_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.

        Total number of items count sent for processing.  # noqa: E501

        :param total_items: The total_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :type: int
        """

        self._total_items = total_items

    @property
    def accepted_items(self):
        """Gets the accepted_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501

        Number of items accepted for processing.  # noqa: E501

        :return: The accepted_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._accepted_items

    @accepted_items.setter
    def accepted_items(self, accepted_items):
        """Sets the accepted_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.

        Number of items accepted for processing.  # noqa: E501

        :param accepted_items: The accepted_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :type: int
        """

        self._accepted_items = accepted_items

    @property
    def failed_items(self):
        """Gets the failed_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501

        Number of items not accepted for processing.  # noqa: E501

        :return: The failed_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._failed_items

    @failed_items.setter
    def failed_items(self, failed_items):
        """Sets the failed_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.

        Number of items not accepted for processing.  # noqa: E501

        :param failed_items: The failed_items of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :type: int
        """

        self._failed_items = failed_items

    @property
    def activity_id(self):
        """Gets the activity_id of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501

        The activity id associated with the response  # noqa: E501

        :return: The activity_id of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this DeviceSensorSmartGroupAssignmentResponseV1Model.

        The activity id associated with the response  # noqa: E501

        :param activity_id: The activity_id of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :type: str
        """

        self._activity_id = activity_id

    @property
    def failed_sensors(self):
        """Gets the failed_sensors of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501

        A list of failed sensors with error details.  # noqa: E501

        :return: The failed_sensors of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :rtype: list[DeviceSensorSmartGroupAssignmentFailedResponseV1Model]
        """
        return self._failed_sensors

    @failed_sensors.setter
    def failed_sensors(self, failed_sensors):
        """Sets the failed_sensors of this DeviceSensorSmartGroupAssignmentResponseV1Model.

        A list of failed sensors with error details.  # noqa: E501

        :param failed_sensors: The failed_sensors of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :type: list[DeviceSensorSmartGroupAssignmentFailedResponseV1Model]
        """

        self._failed_sensors = failed_sensors

    @property
    def failed_smart_groups(self):
        """Gets the failed_smart_groups of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501

        A list of failed smart groups with error details.  # noqa: E501

        :return: The failed_smart_groups of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :rtype: list[DeviceSensorSmartGroupAssignmentFailedResponseV1Model]
        """
        return self._failed_smart_groups

    @failed_smart_groups.setter
    def failed_smart_groups(self, failed_smart_groups):
        """Sets the failed_smart_groups of this DeviceSensorSmartGroupAssignmentResponseV1Model.

        A list of failed smart groups with error details.  # noqa: E501

        :param failed_smart_groups: The failed_smart_groups of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :type: list[DeviceSensorSmartGroupAssignmentFailedResponseV1Model]
        """

        self._failed_smart_groups = failed_smart_groups

    @property
    def id(self):
        """Gets the id of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceSensorSmartGroupAssignmentResponseV1Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceSensorSmartGroupAssignmentResponseV1Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this DeviceSensorSmartGroupAssignmentResponseV1Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceSensorSmartGroupAssignmentResponseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSensorSmartGroupAssignmentResponseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceSensorSmartGroupAssignmentResponseV1Model):
            return True

        return self.to_dict() != other.to_dict()
