# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv1.api_client import ApiClient


class AppsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apps_get_app_action_breakdown_counts(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the device count for the application actions  # noqa: E501

        Will return the device count per application last action taken for the application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_action_breakdown_counts(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid of the application.               Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param object organizationgroupuuid: The organization group identifier where the counts need to be fetched. Will be defaulted to admin organization group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :param str smartgroupuuids: Comma separated list of smart group uuids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. EF331D65-C005-4388-8E52-B1390AA171D9, EF331D65-C005-4388-8E52-B1390AA172D9
        :return: AppActionBreakDownModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_app_action_breakdown_counts_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_app_action_breakdown_counts_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def apps_get_app_action_breakdown_counts_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the device count for the application actions  # noqa: E501

        Will return the device count per application last action taken for the application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_action_breakdown_counts_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid of the application.               Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param object organizationgroupuuid: The organization group identifier where the counts need to be fetched. Will be defaulted to admin organization group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :param str smartgroupuuids: Comma separated list of smart group uuids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. EF331D65-C005-4388-8E52-B1390AA171D9, EF331D65-C005-4388-8E52-B1390AA172D9
        :return: AppActionBreakDownModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'organizationgroupuuid', 'smartgroupuuids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_app_action_breakdown_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `apps_get_app_action_breakdown_counts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'smartgroupuuids' in params:
            query_params.append(('smartgroupuuids', params['smartgroupuuids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{uuid}/actioncounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppActionBreakDownModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_app_config_template_async(self, application_uuid, **kwargs):  # noqa: E501
        """New - Get app config template for an application.  # noqa: E501

        Get list of app configs supported for an application based on the application uuid provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_config_template_async(application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.               Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param object organization_group_uuid: Current Organization Group identifier for which admin is trying to get the template and from where assigment of the given app will happen. Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073
        :return: list[AppConfigTemplateV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_app_config_template_async_with_http_info(application_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_app_config_template_async_with_http_info(application_uuid, **kwargs)  # noqa: E501
            return data

    def apps_get_app_config_template_async_with_http_info(self, application_uuid, **kwargs):  # noqa: E501
        """New - Get app config template for an application.  # noqa: E501

        Get list of app configs supported for an application based on the application uuid provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_config_template_async_with_http_info(application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.               Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param object organization_group_uuid: Current Organization Group identifier for which admin is trying to get the template and from where assigment of the given app will happen. Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073
        :return: list[AppConfigTemplateV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_uuid', 'organization_group_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_app_config_template_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in params or
                                                       params['application_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_uuid` when calling `apps_get_app_config_template_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in params:
            path_params['applicationUuid'] = params['application_uuid']  # noqa: E501

        query_params = []
        if 'organization_group_uuid' in params:
            query_params.append(('organization-group-uuid', params['organization_group_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/template;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{applicationUuid}/app-config-template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AppConfigTemplateV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_app_deployment_counts(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the deployment counts for an internal or public app  # noqa: E501

        Will return the following information for internal/public application in the provided Organization Group. 1. Total assigned devices count 2. Total installed devices count 3. Total side loaded devices count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_deployment_counts(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid of the application.               Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param object organizationgroupuuid: The Organization Group identifier in which the counts need to be fetched. Will be defaulted to admin Organization Group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :param str smartgroupuuids: Comma separated list of smart group uuids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. EF331D65-C005-4388-8E52-B1390AA171D9, EF331D65-C005-4388-8E52-B1390AA172D9
        :return: AppVersionLevelCountModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_app_deployment_counts_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_app_deployment_counts_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def apps_get_app_deployment_counts_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the deployment counts for an internal or public app  # noqa: E501

        Will return the following information for internal/public application in the provided Organization Group. 1. Total assigned devices count 2. Total installed devices count 3. Total side loaded devices count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_deployment_counts_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid of the application.               Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param object organizationgroupuuid: The Organization Group identifier in which the counts need to be fetched. Will be defaulted to admin Organization Group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :param str smartgroupuuids: Comma separated list of smart group uuids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. EF331D65-C005-4388-8E52-B1390AA171D9, EF331D65-C005-4388-8E52-B1390AA172D9
        :return: AppVersionLevelCountModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'organizationgroupuuid', 'smartgroupuuids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_app_deployment_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `apps_get_app_deployment_counts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'smartgroupuuids' in params:
            query_params.append(('smartgroupuuids', params['smartgroupuuids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{uuid}/deploymentcounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppVersionLevelCountModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_app_management_status(self, **kwargs):  # noqa: E501
        """Retrieves the application management status, i.e. the application bundle id passed is managedby AirWatch or not.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_management_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managementid: Management Id.
        :param str bundleid: Bundle Id.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_app_management_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_app_management_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def apps_get_app_management_status_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the application management status, i.e. the application bundle id passed is managedby AirWatch or not.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_management_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str managementid: Management Id.
        :param str bundleid: Bundle Id.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['managementid', 'bundleid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_app_management_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'managementid' in params:
            query_params.append(('managementid', params['managementid']))  # noqa: E501
        if 'bundleid' in params:
            query_params.append(('bundleid', params['bundleid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/managementstatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_app_reason_breakdown_counts(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the device count for the application reasons  # noqa: E501

        Will return the device count per application reason for the application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_reason_breakdown_counts(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid of the application.               Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param object organizationgroupuuid: The Organization Group identifier where the counts need to be fetched. Will be defaulted to admin Organization Group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :param str smartgroupuuids: Comma separated list of smart group uuids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. EF331D65-C005-4388-8E52-B1390AA171D9, EF331D65-C005-4388-8E52-B1390AA172D9
        :return: AppReasonBreakDownModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_app_reason_breakdown_counts_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_app_reason_breakdown_counts_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def apps_get_app_reason_breakdown_counts_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets the device count for the application reasons  # noqa: E501

        Will return the device count per application reason for the application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_reason_breakdown_counts_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid of the application.               Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param object organizationgroupuuid: The Organization Group identifier where the counts need to be fetched. Will be defaulted to admin Organization Group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :param str smartgroupuuids: Comma separated list of smart group uuids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. EF331D65-C005-4388-8E52-B1390AA171D9, EF331D65-C005-4388-8E52-B1390AA172D9
        :return: AppReasonBreakDownModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'organizationgroupuuid', 'smartgroupuuids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_app_reason_breakdown_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `apps_get_app_reason_breakdown_counts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'smartgroupuuids' in params:
            query_params.append(('smartgroupuuids', params['smartgroupuuids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{uuid}/reasoncounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppReasonBreakDownModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_app_removal_protection_logs(self, **kwargs):  # noqa: E501
        """Returns removal log events for an internal application, filtered by the App bundle identifier of the application and organization group.  # noqa: E501

        Search and retrieve removal logs for internal applications.              If the number of remove application commands queued in a set time interval is exceeded the commands are put in locked state              The API method returns the details of the commands that are put in locked state              The records returned take into consideration the filter criteria received in request query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_removal_protection_logs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: BundleId/PackageId.Example = \"com.test.testapp\".
        :param str organizationgroupid: OrganizationGroup Identifier. Example = \"890\".
        :param str status: The AppRemoval Log Threshold Status.Example = \"3\".
        :param str page: Page number.Example = \"2\".
        :param str pagesize: Records per page.Example = \"10\".
        :param str orderby: Orderby column name.Example = \"ThresholdId\".
        :return: AppRemovalProtectionLogSearchResultModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_app_removal_protection_logs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_app_removal_protection_logs_with_http_info(**kwargs)  # noqa: E501
            return data

    def apps_get_app_removal_protection_logs_with_http_info(self, **kwargs):  # noqa: E501
        """Returns removal log events for an internal application, filtered by the App bundle identifier of the application and organization group.  # noqa: E501

        Search and retrieve removal logs for internal applications.              If the number of remove application commands queued in a set time interval is exceeded the commands are put in locked state              The API method returns the details of the commands that are put in locked state              The records returned take into consideration the filter criteria received in request query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_app_removal_protection_logs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: BundleId/PackageId.Example = \"com.test.testapp\".
        :param str organizationgroupid: OrganizationGroup Identifier. Example = \"890\".
        :param str status: The AppRemoval Log Threshold Status.Example = \"3\".
        :param str page: Page number.Example = \"2\".
        :param str pagesize: Records per page.Example = \"10\".
        :param str orderby: Orderby column name.Example = \"ThresholdId\".
        :return: AppRemovalProtectionLogSearchResultModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundleid', 'organizationgroupid', 'status', 'page', 'pagesize', 'orderby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_app_removal_protection_logs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundleid' in params:
            query_params.append(('bundleid', params['bundleid']))  # noqa: E501
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/removallogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppRemovalProtectionLogSearchResultModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_assignment_rule_async(self, application_uuid, **kwargs):  # noqa: E501
        """New - Get assignment rule for an application.  # noqa: E501

        Get assignment rule which contains deployment parameters for assignments and smart group exclusions for an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_assignment_rule_async(application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.              Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :return: AppAssignmentRuleV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_assignment_rule_async_with_http_info(application_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_assignment_rule_async_with_http_info(application_uuid, **kwargs)  # noqa: E501
            return data

    def apps_get_assignment_rule_async_with_http_info(self, application_uuid, **kwargs):  # noqa: E501
        """New - Get assignment rule for an application.  # noqa: E501

        Get assignment rule which contains deployment parameters for assignments and smart group exclusions for an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_assignment_rule_async_with_http_info(application_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.              Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :return: AppAssignmentRuleV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_assignment_rule_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in params or
                                                       params['application_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_uuid` when calling `apps_get_assignment_rule_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in params:
            path_params['applicationUuid'] = params['application_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{applicationUuid}/assignment-rule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppAssignmentRuleV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_devices_assigned_or_installed_for_app_at_version_level(self, uuid, **kwargs):  # noqa: E501
        """New - Gets list of devices that have the specified internal or public application installed or assigned.  # noqa: E501

        This endpoint provides a list of devices that have the specified internal or public application installed or assigned at the version level. A list of all the assigned devices is returned by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_devices_assigned_or_installed_for_app_at_version_level(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid of the application.               Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param int page: Page number which will be fetched, 0 based index. Default 0.
        :param object organizationgroupuuid: The Organization Group identifier in which the counts need to be fetched. Will be defaulted to admin organization group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :param int pagesize: Maximum number of results to be returned in one page. Default 500.
        :param str searchtext: If provided, the records matching this text will be returned. The search will be applied on the following properties [name, installed_version, assigned_version]. The default value will be empty string.
        :param str sortorder: Whether the sort order is ascending or descending. The property used for sorting is name. Possible values [Asc, Desc]. Default value is Asc.
        :param str orderby: Name of the property used for sorting
        :param str smartgroupids: Comma separated list of smart group ids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. 10, 20
        :param bool isassigned: If provided, the list of devices on which the app is assigned is included in the returned result set. Default false.
        :param bool isnotassigned: If provided, the list of devices on which the app is sideloaded or marked for removal but not assigned is included in the returned result set. Default false.
        :param bool isexcluded: If provided, the list of devices on which the app is excluded is included in the returned result set. Default false.
        :param bool isinstalled: if provided, the list of devices on which the app is installed is included in the returned result set. Default false.
        :param bool isnotinstalled: if provided, the list of devices on which the app is not installed but assigned is included in the returned result set. Default false.
        :param object installationstatus: Comma separated list of managed application list reasons to which the devices assigned to the app belong. If no reason is passed, all the assigned devices will be returned based on the other filters.
        :param object lastactiontaken: Comma separated list of application deployment status to which the devices assigned to the app belong. If no deployment status is passed, all the assigned devices will be returned based on the other filters.
        :return: DevicesPagedSearchResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_devices_assigned_or_installed_for_app_at_version_level_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_devices_assigned_or_installed_for_app_at_version_level_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def apps_get_devices_assigned_or_installed_for_app_at_version_level_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets list of devices that have the specified internal or public application installed or assigned.  # noqa: E501

        This endpoint provides a list of devices that have the specified internal or public application installed or assigned at the version level. A list of all the assigned devices is returned by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_devices_assigned_or_installed_for_app_at_version_level_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The uuid of the application.               Accepted formats **guid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param int page: Page number which will be fetched, 0 based index. Default 0.
        :param object organizationgroupuuid: The Organization Group identifier in which the counts need to be fetched. Will be defaulted to admin organization group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :param int pagesize: Maximum number of results to be returned in one page. Default 500.
        :param str searchtext: If provided, the records matching this text will be returned. The search will be applied on the following properties [name, installed_version, assigned_version]. The default value will be empty string.
        :param str sortorder: Whether the sort order is ascending or descending. The property used for sorting is name. Possible values [Asc, Desc]. Default value is Asc.
        :param str orderby: Name of the property used for sorting
        :param str smartgroupids: Comma separated list of smart group ids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. 10, 20
        :param bool isassigned: If provided, the list of devices on which the app is assigned is included in the returned result set. Default false.
        :param bool isnotassigned: If provided, the list of devices on which the app is sideloaded or marked for removal but not assigned is included in the returned result set. Default false.
        :param bool isexcluded: If provided, the list of devices on which the app is excluded is included in the returned result set. Default false.
        :param bool isinstalled: if provided, the list of devices on which the app is installed is included in the returned result set. Default false.
        :param bool isnotinstalled: if provided, the list of devices on which the app is not installed but assigned is included in the returned result set. Default false.
        :param object installationstatus: Comma separated list of managed application list reasons to which the devices assigned to the app belong. If no reason is passed, all the assigned devices will be returned based on the other filters.
        :param object lastactiontaken: Comma separated list of application deployment status to which the devices assigned to the app belong. If no deployment status is passed, all the assigned devices will be returned based on the other filters.
        :return: DevicesPagedSearchResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'page', 'organizationgroupuuid', 'pagesize', 'searchtext', 'sortorder', 'orderby', 'smartgroupids', 'isassigned', 'isnotassigned', 'isexcluded', 'isinstalled', 'isnotinstalled', 'installationstatus', 'lastactiontaken']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_devices_assigned_or_installed_for_app_at_version_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `apps_get_devices_assigned_or_installed_for_app_at_version_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'searchtext' in params:
            query_params.append(('searchtext', params['searchtext']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'smartgroupids' in params:
            query_params.append(('smartgroupids', params['smartgroupids']))  # noqa: E501
        if 'isassigned' in params:
            query_params.append(('isassigned', params['isassigned']))  # noqa: E501
        if 'isnotassigned' in params:
            query_params.append(('isnotassigned', params['isnotassigned']))  # noqa: E501
        if 'isexcluded' in params:
            query_params.append(('isexcluded', params['isexcluded']))  # noqa: E501
        if 'isinstalled' in params:
            query_params.append(('isinstalled', params['isinstalled']))  # noqa: E501
        if 'isnotinstalled' in params:
            query_params.append(('isnotinstalled', params['isnotinstalled']))  # noqa: E501
        if 'installationstatus' in params:
            query_params.append(('installationstatus', params['installationstatus']))  # noqa: E501
        if 'lastactiontaken' in params:
            query_params.append(('lastactiontaken', params['lastactiontaken']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{uuid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DevicesPagedSearchResultsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_get_sdk_ananlytics(self, **kwargs):  # noqa: E501
        """Gets SDK analytics based on the query information provided.  # noqa: E501

        Returns SDK Analytic Events within a time range and filtered by provided query parameters including Unique Device Identifiers and Application Identifiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_sdk_ananlytics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: Bulk input containing multiple Device Attributes based on the search type.
        :param int organizationgroupid: OrganizationGroup Identifier.
        :param str applicationid: Application Identifier.
        :param str eventname: Event Name.
        :param datetime startdatetime: Sample Starttime.
        :param datetime enddatetime: Sample Endtime.
        :param str searchtype: Search by Device Identifier types (DeviceId, MacAddress, Udid, SerialNumber, and ImeiNumber)..
        :param int page: Page number.
        :param int pagesize: Records per page.
        :return: ApplicationEventSampleSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_get_sdk_ananlytics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apps_get_sdk_ananlytics_with_http_info(**kwargs)  # noqa: E501
            return data

    def apps_get_sdk_ananlytics_with_http_info(self, **kwargs):  # noqa: E501
        """Gets SDK analytics based on the query information provided.  # noqa: E501

        Returns SDK Analytic Events within a time range and filtered by provided query parameters including Unique Device Identifiers and Application Identifiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_get_sdk_ananlytics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: Bulk input containing multiple Device Attributes based on the search type.
        :param int organizationgroupid: OrganizationGroup Identifier.
        :param str applicationid: Application Identifier.
        :param str eventname: Event Name.
        :param datetime startdatetime: Sample Starttime.
        :param datetime enddatetime: Sample Endtime.
        :param str searchtype: Search by Device Identifier types (DeviceId, MacAddress, Udid, SerialNumber, and ImeiNumber)..
        :param int page: Page number.
        :param int pagesize: Records per page.
        :return: ApplicationEventSampleSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input', 'organizationgroupid', 'applicationid', 'eventname', 'startdatetime', 'enddatetime', 'searchtype', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get_sdk_ananlytics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'applicationid' in params:
            query_params.append(('applicationid', params['applicationid']))  # noqa: E501
        if 'eventname' in params:
            query_params.append(('eventname', params['eventname']))  # noqa: E501
        if 'startdatetime' in params:
            query_params.append(('startdatetime', params['startdatetime']))  # noqa: E501
        if 'enddatetime' in params:
            query_params.append(('enddatetime', params['enddatetime']))  # noqa: E501
        if 'searchtype' in params:
            query_params.append(('searchtype', params['searchtype']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/sdkanalytics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationEventSampleSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_search_apple_store_async(self, appname, **kwargs):  # noqa: E501
        """Searches in App stores for the applications with the specified search string and returns the details.  # noqa: E501

        Searches in the App store for applications that match a specified search string (Example: Boxer) and return the details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_search_apple_store_async(appname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appname: Application name to be searched. Example: Boxer. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_search_apple_store_async_with_http_info(appname, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_search_apple_store_async_with_http_info(appname, **kwargs)  # noqa: E501
            return data

    def apps_search_apple_store_async_with_http_info(self, appname, **kwargs):  # noqa: E501
        """Searches in App stores for the applications with the specified search string and returns the details.  # noqa: E501

        Searches in the App store for applications that match a specified search string (Example: Boxer) and return the details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_search_apple_store_async_with_http_info(appname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appname: Application name to be searched. Example: Boxer. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_search_apple_store_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appname' is set
        if self.api_client.client_side_validation and ('appname' not in params or
                                                       params['appname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `appname` when calling `apps_search_apple_store_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'appname' in params:
            query_params.append(('appname', params['appname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/applestore/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_search_async(self, **kwargs):  # noqa: E501
        """Search and retrieve details for both internal and external applications or books.  # noqa: E501

        Searches for an application or book, given filters including type, name, category and organization group id. Returns a list of applications or books that match the criteria with details of each application/book.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_search_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The Product Type - App or Book.
        :param str applicationtype: Type of the application. (Internal/Public).
        :param str applicationname: Application Name.
        :param str product_component_apps_only: Request query to include apps added under Products Staging and Provisioning.
        :param str category: The Application Category.
        :param str bundleid: BundleId/PackageId.
        :param str locationgroupid: LocationGroup Identifier.
        :param str model: Device Model.
        :param str status: Application Status.
        :param str platform: The Application Platform.
        :param str winapptype: The application sub type for windows platforms.
        :param bool include_apps_from_child_ogs: Flag to indicate if apps from child og's should be included or not.
        :param bool include_apps_from_parent_ogs:  Flag to indicate if apps from parent og's should be included or not.
        :param str app_command_target: Application command Targets for Windows Desktop/MacOs.
        :param bool distinct_applications_per_og: Flag to indicate if distinct applications at an OG should be returned by the API.              If two versions of an application have the same name, then the application with the greater version will be returned.
        :param bool exclude_assigned_or_installed_device_count: Flag to indicate if assigned or installed device counts for apps should be excluded or not.
        :param str page: Page number.
        :param str pagesize: Records per page.
        :param str orderby: Orderby column name.
        :return: ApplicationSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_search_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apps_search_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def apps_search_async_with_http_info(self, **kwargs):  # noqa: E501
        """Search and retrieve details for both internal and external applications or books.  # noqa: E501

        Searches for an application or book, given filters including type, name, category and organization group id. Returns a list of applications or books that match the criteria with details of each application/book.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_search_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The Product Type - App or Book.
        :param str applicationtype: Type of the application. (Internal/Public).
        :param str applicationname: Application Name.
        :param str product_component_apps_only: Request query to include apps added under Products Staging and Provisioning.
        :param str category: The Application Category.
        :param str bundleid: BundleId/PackageId.
        :param str locationgroupid: LocationGroup Identifier.
        :param str model: Device Model.
        :param str status: Application Status.
        :param str platform: The Application Platform.
        :param str winapptype: The application sub type for windows platforms.
        :param bool include_apps_from_child_ogs: Flag to indicate if apps from child og's should be included or not.
        :param bool include_apps_from_parent_ogs:  Flag to indicate if apps from parent og's should be included or not.
        :param str app_command_target: Application command Targets for Windows Desktop/MacOs.
        :param bool distinct_applications_per_og: Flag to indicate if distinct applications at an OG should be returned by the API.              If two versions of an application have the same name, then the application with the greater version will be returned.
        :param bool exclude_assigned_or_installed_device_count: Flag to indicate if assigned or installed device counts for apps should be excluded or not.
        :param str page: Page number.
        :param str pagesize: Records per page.
        :param str orderby: Orderby column name.
        :return: ApplicationSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'applicationtype', 'applicationname', 'product_component_apps_only', 'category', 'bundleid', 'locationgroupid', 'model', 'status', 'platform', 'winapptype', 'include_apps_from_child_ogs', 'include_apps_from_parent_ogs', 'app_command_target', 'distinct_applications_per_og', 'exclude_assigned_or_installed_device_count', 'page', 'pagesize', 'orderby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_search_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'applicationtype' in params:
            query_params.append(('applicationtype', params['applicationtype']))  # noqa: E501
        if 'applicationname' in params:
            query_params.append(('applicationname', params['applicationname']))  # noqa: E501
        if 'product_component_apps_only' in params:
            query_params.append(('productComponentAppsOnly', params['product_component_apps_only']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'bundleid' in params:
            query_params.append(('bundleid', params['bundleid']))  # noqa: E501
        if 'locationgroupid' in params:
            query_params.append(('locationgroupid', params['locationgroupid']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'winapptype' in params:
            query_params.append(('winapptype', params['winapptype']))  # noqa: E501
        if 'include_apps_from_child_ogs' in params:
            query_params.append(('includeAppsFromChildOgs', params['include_apps_from_child_ogs']))  # noqa: E501
        if 'include_apps_from_parent_ogs' in params:
            query_params.append(('IncludeAppsFromParentOgs', params['include_apps_from_parent_ogs']))  # noqa: E501
        if 'app_command_target' in params:
            query_params.append(('AppCommandTarget', params['app_command_target']))  # noqa: E501
        if 'distinct_applications_per_og' in params:
            query_params.append(('distinctApplicationsPerOg', params['distinct_applications_per_og']))  # noqa: E501
        if 'exclude_assigned_or_installed_device_count' in params:
            query_params.append(('excludeAssignedOrInstalledDeviceCount', params['exclude_assigned_or_installed_device_count']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_update_admin_action_taken_on_app_removal_protection_logs(self, **kwargs):  # noqa: E501
        """Sets the action (unlock or clear) executed after the threshold for the Removal Log events is reached.  # noqa: E501

        Updates the action taken on the threshold.              Either unlock/clear the threshold.              On unlock the commands are sent to the device              On clear the commands are purged from the queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update_admin_action_taken_on_app_removal_protection_logs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAppRemovalProtectionModel model: The body of the request.
        :param str organizationgroupid: LocationGroup Identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_update_admin_action_taken_on_app_removal_protection_logs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apps_update_admin_action_taken_on_app_removal_protection_logs_with_http_info(**kwargs)  # noqa: E501
            return data

    def apps_update_admin_action_taken_on_app_removal_protection_logs_with_http_info(self, **kwargs):  # noqa: E501
        """Sets the action (unlock or clear) executed after the threshold for the Removal Log events is reached.  # noqa: E501

        Updates the action taken on the threshold.              Either unlock/clear the threshold.              On unlock the commands are sent to the device              On clear the commands are purged from the queue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update_admin_action_taken_on_app_removal_protection_logs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAppRemovalProtectionModel model: The body of the request.
        :param str organizationgroupid: LocationGroup Identifier.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_update_admin_action_taken_on_app_removal_protection_logs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/removallogs', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_update_assignment_rule_async(self, application_uuid, assignment_rule, **kwargs):  # noqa: E501
        """New - Updates assignment rule for an application and publishes the application to the devices associated with assignment rule.  # noqa: E501

        Updates assignments with assignment policies and exclusions for an application. Publishes the application to the devices associated with the assignment rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update_assignment_rule_async(application_uuid, assignment_rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.               Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param AppAssignmentRuleV1Model assignment_rule: Assignment rule which contains list of assignments and exclusions for an application.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_update_assignment_rule_async_with_http_info(application_uuid, assignment_rule, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_update_assignment_rule_async_with_http_info(application_uuid, assignment_rule, **kwargs)  # noqa: E501
            return data

    def apps_update_assignment_rule_async_with_http_info(self, application_uuid, assignment_rule, **kwargs):  # noqa: E501
        """New - Updates assignment rule for an application and publishes the application to the devices associated with assignment rule.  # noqa: E501

        Updates assignments with assignment policies and exclusions for an application. Publishes the application to the devices associated with the assignment rule.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_update_assignment_rule_async_with_http_info(application_uuid, assignment_rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_uuid: Unique identifier for the application.               Accepted formats **uuid**              E.g. 3d958f38-246e-4854-a306-189d941ab073(Required) (required)
        :param AppAssignmentRuleV1Model assignment_rule: Assignment rule which contains list of assignments and exclusions for an application.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_uuid', 'assignment_rule']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_update_assignment_rule_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_uuid' is set
        if self.api_client.client_side_validation and ('application_uuid' not in params or
                                                       params['application_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_uuid` when calling `apps_update_assignment_rule_async`")  # noqa: E501
        # verify the required parameter 'assignment_rule' is set
        if self.api_client.client_side_validation and ('assignment_rule' not in params or
                                                       params['assignment_rule'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_rule` when calling `apps_update_assignment_rule_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_uuid' in params:
            path_params['applicationUuid'] = params['application_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assignment_rule' in params:
            body_params = params['assignment_rule']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/{applicationUuid}/assignment-rule', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def apps_windows_store_search_async(self, appname, platform, **kwargs):  # noqa: E501
        """Retrieves the details of the applications from the Windows App Store based on the search request.  # noqa: E501

        Searches in the Windows store for applications that match a specified search string (Example: Boxer) and return the details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_windows_store_search_async(appname, platform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appname: Application name to be searched. Example: Boxer. (Required). (required)
        :param str platform: Device Platform to search the Applications for. Example: WindowsMobile. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apps_windows_store_search_async_with_http_info(appname, platform, **kwargs)  # noqa: E501
        else:
            (data) = self.apps_windows_store_search_async_with_http_info(appname, platform, **kwargs)  # noqa: E501
            return data

    def apps_windows_store_search_async_with_http_info(self, appname, platform, **kwargs):  # noqa: E501
        """Retrieves the details of the applications from the Windows App Store based on the search request.  # noqa: E501

        Searches in the Windows store for applications that match a specified search string (Example: Boxer) and return the details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apps_windows_store_search_async_with_http_info(appname, platform, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str appname: Application name to be searched. Example: Boxer. (Required). (required)
        :param str platform: Device Platform to search the Applications for. Example: WindowsMobile. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appname', 'platform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_windows_store_search_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appname' is set
        if self.api_client.client_side_validation and ('appname' not in params or
                                                       params['appname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `appname` when calling `apps_windows_store_search_async`")  # noqa: E501
        # verify the required parameter 'platform' is set
        if self.api_client.client_side_validation and ('platform' not in params or
                                                       params['platform'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `platform` when calling `apps_windows_store_search_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'appname' in params:
            query_params.append(('appname', params['appname']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/windowsstore/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
