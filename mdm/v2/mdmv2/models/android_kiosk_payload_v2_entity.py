# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidKioskPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_passcode': 'str',
        'allow_airplane_mode': 'bool',
        'allow_all_tethering': 'bool',
        'allow_app_pinning': 'bool',
        'allow_back_key': 'bool',
        'allow_cellular_data': 'bool',
        'allow_custom_tray': 'bool',
        'allow_gps_location_services': 'bool',
        'allow_hardware_keys': 'bool',
        'allow_home_key': 'bool',
        'allow_icons': 'bool',
        'allow_launcher_settings': 'bool',
        'allow_mini_launch_bar': 'bool',
        'allow_multi_window': 'bool',
        'allow_navigation_bar': 'bool',
        'allow_notification_bar': 'bool',
        'allow_options_key': 'bool',
        'allow_power_off': 'bool',
        'allow_recent_tasks': 'bool',
        'allow_settings': 'bool',
        'allow_status_bar': 'bool',
        'allow_stay_awake': 'bool',
        'allow_task_manager': 'bool',
        'allow_tray_bluetooth': 'bool',
        'allow_tray_cellular_data': 'bool',
        'allow_tray_gps': 'bool',
        'allow_tray_wifi': 'bool',
        'allow_utilities': 'bool',
        'allow_volume_down_key': 'bool',
        'allow_volume_up_key': 'bool',
        'allow_widgets': 'bool',
        'application_setting': 'bool',
        'app_mode': 'int',
        'bluetooth_setting': 'bool',
        'contacts_view': 'bool',
        'display_setting': 'bool',
        'dock_setting': 'bool',
        'freeze_icons': 'bool',
        'grid_config_generic': 'str',
        'grid_config_large': 'str',
        'grid_config_medium_and_small': 'str',
        'grid_config_xlarge': 'str',
        'grid_layout': 'str',
        'group_id': 'str',
        'hide_action_bar': 'bool',
        'hot_seat_bar_settings': 'str',
        'icon_size': 'int',
        'language_setting': 'bool',
        'orientation': 'int',
        'persist_admin_passcode': 'bool',
        'phone_call': 'bool',
        'power_setting': 'bool',
        'screen_count': 'int',
        'screen_lock': 'bool',
        'section_layout': 'str',
        'section_name': 'str',
        'security_setting': 'bool',
        'show_agent_icon_on_home_screen': 'bool',
        'single_app_mode': 'bool',
        'sound_setting': 'bool',
        'status_bar_frequency': 'int',
        'storage_setting': 'bool',
        'template_mode_data': 'str',
        'title_bar_icon': 'int',
        'title_bar_icon_url': 'str',
        'title_bar_text': 'str',
        'user_name': 'str',
        'wallpaper_id': 'int',
        'wallpaper_type': 'int',
        'wall_paper_url': 'str',
        'wifi_setting': 'bool',
        'allowed_applications': 'list[ApplicationListEntity]',
        'allowed_widgets': 'list[ApplicationListEntity]'
    }

    attribute_map = {
        'admin_passcode': 'AdminPasscode',
        'allow_airplane_mode': 'AllowAirplaneMode',
        'allow_all_tethering': 'AllowAllTethering',
        'allow_app_pinning': 'AllowAppPinning',
        'allow_back_key': 'AllowBackKey',
        'allow_cellular_data': 'AllowCellularData',
        'allow_custom_tray': 'AllowCustomTray',
        'allow_gps_location_services': 'AllowGpsLocationServices',
        'allow_hardware_keys': 'AllowHardwareKeys',
        'allow_home_key': 'AllowHomeKey',
        'allow_icons': 'AllowIcons',
        'allow_launcher_settings': 'AllowLauncherSettings',
        'allow_mini_launch_bar': 'AllowMiniLaunchBar',
        'allow_multi_window': 'AllowMultiWindow',
        'allow_navigation_bar': 'AllowNavigationBar',
        'allow_notification_bar': 'AllowNotificationBar',
        'allow_options_key': 'AllowOptionsKey',
        'allow_power_off': 'AllowPowerOff',
        'allow_recent_tasks': 'AllowRecentTasks',
        'allow_settings': 'AllowSettings',
        'allow_status_bar': 'AllowStatusBar',
        'allow_stay_awake': 'AllowStayAwake',
        'allow_task_manager': 'AllowTaskManager',
        'allow_tray_bluetooth': 'AllowTrayBluetooth',
        'allow_tray_cellular_data': 'AllowTrayCellularData',
        'allow_tray_gps': 'AllowTrayGPS',
        'allow_tray_wifi': 'AllowTrayWifi',
        'allow_utilities': 'AllowUtilities',
        'allow_volume_down_key': 'AllowVolumeDownKey',
        'allow_volume_up_key': 'AllowVolumeUpKey',
        'allow_widgets': 'AllowWidgets',
        'application_setting': 'ApplicationSetting',
        'app_mode': 'AppMode',
        'bluetooth_setting': 'BluetoothSetting',
        'contacts_view': 'ContactsView',
        'display_setting': 'DisplaySetting',
        'dock_setting': 'DockSetting',
        'freeze_icons': 'FreezeIcons',
        'grid_config_generic': 'GridConfigGeneric',
        'grid_config_large': 'GridConfigLarge',
        'grid_config_medium_and_small': 'GridConfigMediumAndSmall',
        'grid_config_xlarge': 'GridConfigXlarge',
        'grid_layout': 'GridLayout',
        'group_id': 'GroupId',
        'hide_action_bar': 'HideActionBar',
        'hot_seat_bar_settings': 'HotSeatBarSettings',
        'icon_size': 'IconSize',
        'language_setting': 'LanguageSetting',
        'orientation': 'Orientation',
        'persist_admin_passcode': 'PersistAdminPasscode',
        'phone_call': 'PhoneCall',
        'power_setting': 'PowerSetting',
        'screen_count': 'ScreenCount',
        'screen_lock': 'ScreenLock',
        'section_layout': 'SectionLayout',
        'section_name': 'SectionName',
        'security_setting': 'SecuritySetting',
        'show_agent_icon_on_home_screen': 'ShowAgentIconOnHomeScreen',
        'single_app_mode': 'SingleAppMode',
        'sound_setting': 'SoundSetting',
        'status_bar_frequency': 'StatusBarFrequency',
        'storage_setting': 'StorageSetting',
        'template_mode_data': 'TemplateModeData',
        'title_bar_icon': 'TitleBarIcon',
        'title_bar_icon_url': 'TitleBarIconUrl',
        'title_bar_text': 'TitleBarText',
        'user_name': 'UserName',
        'wallpaper_id': 'WallpaperId',
        'wallpaper_type': 'WallpaperType',
        'wall_paper_url': 'WallPaperUrl',
        'wifi_setting': 'WifiSetting',
        'allowed_applications': 'AllowedApplications',
        'allowed_widgets': 'AllowedWidgets'
    }

    def __init__(self, admin_passcode=None, allow_airplane_mode=None, allow_all_tethering=None, allow_app_pinning=None, allow_back_key=None, allow_cellular_data=None, allow_custom_tray=None, allow_gps_location_services=None, allow_hardware_keys=None, allow_home_key=None, allow_icons=None, allow_launcher_settings=None, allow_mini_launch_bar=None, allow_multi_window=None, allow_navigation_bar=None, allow_notification_bar=None, allow_options_key=None, allow_power_off=None, allow_recent_tasks=None, allow_settings=None, allow_status_bar=None, allow_stay_awake=None, allow_task_manager=None, allow_tray_bluetooth=None, allow_tray_cellular_data=None, allow_tray_gps=None, allow_tray_wifi=None, allow_utilities=None, allow_volume_down_key=None, allow_volume_up_key=None, allow_widgets=None, application_setting=None, app_mode=None, bluetooth_setting=None, contacts_view=None, display_setting=None, dock_setting=None, freeze_icons=None, grid_config_generic=None, grid_config_large=None, grid_config_medium_and_small=None, grid_config_xlarge=None, grid_layout=None, group_id=None, hide_action_bar=None, hot_seat_bar_settings=None, icon_size=None, language_setting=None, orientation=None, persist_admin_passcode=None, phone_call=None, power_setting=None, screen_count=None, screen_lock=None, section_layout=None, section_name=None, security_setting=None, show_agent_icon_on_home_screen=None, single_app_mode=None, sound_setting=None, status_bar_frequency=None, storage_setting=None, template_mode_data=None, title_bar_icon=None, title_bar_icon_url=None, title_bar_text=None, user_name=None, wallpaper_id=None, wallpaper_type=None, wall_paper_url=None, wifi_setting=None, allowed_applications=None, allowed_widgets=None, _configuration=None):  # noqa: E501
        """AndroidKioskPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._admin_passcode = None
        self._allow_airplane_mode = None
        self._allow_all_tethering = None
        self._allow_app_pinning = None
        self._allow_back_key = None
        self._allow_cellular_data = None
        self._allow_custom_tray = None
        self._allow_gps_location_services = None
        self._allow_hardware_keys = None
        self._allow_home_key = None
        self._allow_icons = None
        self._allow_launcher_settings = None
        self._allow_mini_launch_bar = None
        self._allow_multi_window = None
        self._allow_navigation_bar = None
        self._allow_notification_bar = None
        self._allow_options_key = None
        self._allow_power_off = None
        self._allow_recent_tasks = None
        self._allow_settings = None
        self._allow_status_bar = None
        self._allow_stay_awake = None
        self._allow_task_manager = None
        self._allow_tray_bluetooth = None
        self._allow_tray_cellular_data = None
        self._allow_tray_gps = None
        self._allow_tray_wifi = None
        self._allow_utilities = None
        self._allow_volume_down_key = None
        self._allow_volume_up_key = None
        self._allow_widgets = None
        self._application_setting = None
        self._app_mode = None
        self._bluetooth_setting = None
        self._contacts_view = None
        self._display_setting = None
        self._dock_setting = None
        self._freeze_icons = None
        self._grid_config_generic = None
        self._grid_config_large = None
        self._grid_config_medium_and_small = None
        self._grid_config_xlarge = None
        self._grid_layout = None
        self._group_id = None
        self._hide_action_bar = None
        self._hot_seat_bar_settings = None
        self._icon_size = None
        self._language_setting = None
        self._orientation = None
        self._persist_admin_passcode = None
        self._phone_call = None
        self._power_setting = None
        self._screen_count = None
        self._screen_lock = None
        self._section_layout = None
        self._section_name = None
        self._security_setting = None
        self._show_agent_icon_on_home_screen = None
        self._single_app_mode = None
        self._sound_setting = None
        self._status_bar_frequency = None
        self._storage_setting = None
        self._template_mode_data = None
        self._title_bar_icon = None
        self._title_bar_icon_url = None
        self._title_bar_text = None
        self._user_name = None
        self._wallpaper_id = None
        self._wallpaper_type = None
        self._wall_paper_url = None
        self._wifi_setting = None
        self._allowed_applications = None
        self._allowed_widgets = None
        self.discriminator = None

        if admin_passcode is not None:
            self.admin_passcode = admin_passcode
        if allow_airplane_mode is not None:
            self.allow_airplane_mode = allow_airplane_mode
        if allow_all_tethering is not None:
            self.allow_all_tethering = allow_all_tethering
        if allow_app_pinning is not None:
            self.allow_app_pinning = allow_app_pinning
        if allow_back_key is not None:
            self.allow_back_key = allow_back_key
        if allow_cellular_data is not None:
            self.allow_cellular_data = allow_cellular_data
        if allow_custom_tray is not None:
            self.allow_custom_tray = allow_custom_tray
        if allow_gps_location_services is not None:
            self.allow_gps_location_services = allow_gps_location_services
        if allow_hardware_keys is not None:
            self.allow_hardware_keys = allow_hardware_keys
        if allow_home_key is not None:
            self.allow_home_key = allow_home_key
        if allow_icons is not None:
            self.allow_icons = allow_icons
        if allow_launcher_settings is not None:
            self.allow_launcher_settings = allow_launcher_settings
        if allow_mini_launch_bar is not None:
            self.allow_mini_launch_bar = allow_mini_launch_bar
        if allow_multi_window is not None:
            self.allow_multi_window = allow_multi_window
        if allow_navigation_bar is not None:
            self.allow_navigation_bar = allow_navigation_bar
        if allow_notification_bar is not None:
            self.allow_notification_bar = allow_notification_bar
        if allow_options_key is not None:
            self.allow_options_key = allow_options_key
        if allow_power_off is not None:
            self.allow_power_off = allow_power_off
        if allow_recent_tasks is not None:
            self.allow_recent_tasks = allow_recent_tasks
        if allow_settings is not None:
            self.allow_settings = allow_settings
        if allow_status_bar is not None:
            self.allow_status_bar = allow_status_bar
        if allow_stay_awake is not None:
            self.allow_stay_awake = allow_stay_awake
        if allow_task_manager is not None:
            self.allow_task_manager = allow_task_manager
        if allow_tray_bluetooth is not None:
            self.allow_tray_bluetooth = allow_tray_bluetooth
        if allow_tray_cellular_data is not None:
            self.allow_tray_cellular_data = allow_tray_cellular_data
        if allow_tray_gps is not None:
            self.allow_tray_gps = allow_tray_gps
        if allow_tray_wifi is not None:
            self.allow_tray_wifi = allow_tray_wifi
        if allow_utilities is not None:
            self.allow_utilities = allow_utilities
        if allow_volume_down_key is not None:
            self.allow_volume_down_key = allow_volume_down_key
        if allow_volume_up_key is not None:
            self.allow_volume_up_key = allow_volume_up_key
        if allow_widgets is not None:
            self.allow_widgets = allow_widgets
        if application_setting is not None:
            self.application_setting = application_setting
        if app_mode is not None:
            self.app_mode = app_mode
        if bluetooth_setting is not None:
            self.bluetooth_setting = bluetooth_setting
        if contacts_view is not None:
            self.contacts_view = contacts_view
        if display_setting is not None:
            self.display_setting = display_setting
        if dock_setting is not None:
            self.dock_setting = dock_setting
        if freeze_icons is not None:
            self.freeze_icons = freeze_icons
        if grid_config_generic is not None:
            self.grid_config_generic = grid_config_generic
        if grid_config_large is not None:
            self.grid_config_large = grid_config_large
        if grid_config_medium_and_small is not None:
            self.grid_config_medium_and_small = grid_config_medium_and_small
        if grid_config_xlarge is not None:
            self.grid_config_xlarge = grid_config_xlarge
        if grid_layout is not None:
            self.grid_layout = grid_layout
        if group_id is not None:
            self.group_id = group_id
        if hide_action_bar is not None:
            self.hide_action_bar = hide_action_bar
        if hot_seat_bar_settings is not None:
            self.hot_seat_bar_settings = hot_seat_bar_settings
        if icon_size is not None:
            self.icon_size = icon_size
        if language_setting is not None:
            self.language_setting = language_setting
        if orientation is not None:
            self.orientation = orientation
        if persist_admin_passcode is not None:
            self.persist_admin_passcode = persist_admin_passcode
        if phone_call is not None:
            self.phone_call = phone_call
        if power_setting is not None:
            self.power_setting = power_setting
        if screen_count is not None:
            self.screen_count = screen_count
        if screen_lock is not None:
            self.screen_lock = screen_lock
        if section_layout is not None:
            self.section_layout = section_layout
        if section_name is not None:
            self.section_name = section_name
        if security_setting is not None:
            self.security_setting = security_setting
        if show_agent_icon_on_home_screen is not None:
            self.show_agent_icon_on_home_screen = show_agent_icon_on_home_screen
        if single_app_mode is not None:
            self.single_app_mode = single_app_mode
        if sound_setting is not None:
            self.sound_setting = sound_setting
        if status_bar_frequency is not None:
            self.status_bar_frequency = status_bar_frequency
        if storage_setting is not None:
            self.storage_setting = storage_setting
        if template_mode_data is not None:
            self.template_mode_data = template_mode_data
        if title_bar_icon is not None:
            self.title_bar_icon = title_bar_icon
        if title_bar_icon_url is not None:
            self.title_bar_icon_url = title_bar_icon_url
        if title_bar_text is not None:
            self.title_bar_text = title_bar_text
        if user_name is not None:
            self.user_name = user_name
        if wallpaper_id is not None:
            self.wallpaper_id = wallpaper_id
        if wallpaper_type is not None:
            self.wallpaper_type = wallpaper_type
        if wall_paper_url is not None:
            self.wall_paper_url = wall_paper_url
        if wifi_setting is not None:
            self.wifi_setting = wifi_setting
        if allowed_applications is not None:
            self.allowed_applications = allowed_applications
        if allowed_widgets is not None:
            self.allowed_widgets = allowed_widgets

    @property
    def admin_passcode(self):
        """Gets the admin_passcode of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets adminPasscode.  # noqa: E501

        :return: The admin_passcode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._admin_passcode

    @admin_passcode.setter
    def admin_passcode(self, admin_passcode):
        """Sets the admin_passcode of this AndroidKioskPayloadV2Entity.

        Gets or sets adminPasscode.  # noqa: E501

        :param admin_passcode: The admin_passcode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._admin_passcode = admin_passcode

    @property
    def allow_airplane_mode(self):
        """Gets the allow_airplane_mode of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowAirplaneMode.  # noqa: E501

        :return: The allow_airplane_mode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_airplane_mode

    @allow_airplane_mode.setter
    def allow_airplane_mode(self, allow_airplane_mode):
        """Sets the allow_airplane_mode of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowAirplaneMode.  # noqa: E501

        :param allow_airplane_mode: The allow_airplane_mode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_airplane_mode = allow_airplane_mode

    @property
    def allow_all_tethering(self):
        """Gets the allow_all_tethering of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowAllTethering.  # noqa: E501

        :return: The allow_all_tethering of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_all_tethering

    @allow_all_tethering.setter
    def allow_all_tethering(self, allow_all_tethering):
        """Sets the allow_all_tethering of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowAllTethering.  # noqa: E501

        :param allow_all_tethering: The allow_all_tethering of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_all_tethering = allow_all_tethering

    @property
    def allow_app_pinning(self):
        """Gets the allow_app_pinning of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether AllowAppPinning.  # noqa: E501

        :return: The allow_app_pinning of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_app_pinning

    @allow_app_pinning.setter
    def allow_app_pinning(self, allow_app_pinning):
        """Sets the allow_app_pinning of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether AllowAppPinning.  # noqa: E501

        :param allow_app_pinning: The allow_app_pinning of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_app_pinning = allow_app_pinning

    @property
    def allow_back_key(self):
        """Gets the allow_back_key of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowBackKey.  # noqa: E501

        :return: The allow_back_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_back_key

    @allow_back_key.setter
    def allow_back_key(self, allow_back_key):
        """Sets the allow_back_key of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowBackKey.  # noqa: E501

        :param allow_back_key: The allow_back_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_back_key = allow_back_key

    @property
    def allow_cellular_data(self):
        """Gets the allow_cellular_data of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowCellularData.  # noqa: E501

        :return: The allow_cellular_data of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_cellular_data

    @allow_cellular_data.setter
    def allow_cellular_data(self, allow_cellular_data):
        """Sets the allow_cellular_data of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowCellularData.  # noqa: E501

        :param allow_cellular_data: The allow_cellular_data of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_cellular_data = allow_cellular_data

    @property
    def allow_custom_tray(self):
        """Gets the allow_custom_tray of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowCustomTray.  # noqa: E501

        :return: The allow_custom_tray of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_custom_tray

    @allow_custom_tray.setter
    def allow_custom_tray(self, allow_custom_tray):
        """Sets the allow_custom_tray of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowCustomTray.  # noqa: E501

        :param allow_custom_tray: The allow_custom_tray of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_custom_tray = allow_custom_tray

    @property
    def allow_gps_location_services(self):
        """Gets the allow_gps_location_services of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowGpsLocationServices.  # noqa: E501

        :return: The allow_gps_location_services of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_gps_location_services

    @allow_gps_location_services.setter
    def allow_gps_location_services(self, allow_gps_location_services):
        """Sets the allow_gps_location_services of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowGpsLocationServices.  # noqa: E501

        :param allow_gps_location_services: The allow_gps_location_services of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_gps_location_services = allow_gps_location_services

    @property
    def allow_hardware_keys(self):
        """Gets the allow_hardware_keys of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowHardwareKeys.  # noqa: E501

        :return: The allow_hardware_keys of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_hardware_keys

    @allow_hardware_keys.setter
    def allow_hardware_keys(self, allow_hardware_keys):
        """Sets the allow_hardware_keys of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowHardwareKeys.  # noqa: E501

        :param allow_hardware_keys: The allow_hardware_keys of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_hardware_keys = allow_hardware_keys

    @property
    def allow_home_key(self):
        """Gets the allow_home_key of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowHomeKey.  # noqa: E501

        :return: The allow_home_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_home_key

    @allow_home_key.setter
    def allow_home_key(self, allow_home_key):
        """Sets the allow_home_key of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowHomeKey.  # noqa: E501

        :param allow_home_key: The allow_home_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_home_key = allow_home_key

    @property
    def allow_icons(self):
        """Gets the allow_icons of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowIcons.  # noqa: E501

        :return: The allow_icons of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_icons

    @allow_icons.setter
    def allow_icons(self, allow_icons):
        """Sets the allow_icons of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowIcons.  # noqa: E501

        :param allow_icons: The allow_icons of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_icons = allow_icons

    @property
    def allow_launcher_settings(self):
        """Gets the allow_launcher_settings of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowLauncherSettings.  # noqa: E501

        :return: The allow_launcher_settings of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_launcher_settings

    @allow_launcher_settings.setter
    def allow_launcher_settings(self, allow_launcher_settings):
        """Sets the allow_launcher_settings of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowLauncherSettings.  # noqa: E501

        :param allow_launcher_settings: The allow_launcher_settings of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_launcher_settings = allow_launcher_settings

    @property
    def allow_mini_launch_bar(self):
        """Gets the allow_mini_launch_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowMiniLaunchBar.  # noqa: E501

        :return: The allow_mini_launch_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_mini_launch_bar

    @allow_mini_launch_bar.setter
    def allow_mini_launch_bar(self, allow_mini_launch_bar):
        """Sets the allow_mini_launch_bar of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowMiniLaunchBar.  # noqa: E501

        :param allow_mini_launch_bar: The allow_mini_launch_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_mini_launch_bar = allow_mini_launch_bar

    @property
    def allow_multi_window(self):
        """Gets the allow_multi_window of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether AllowMultiWindow.  # noqa: E501

        :return: The allow_multi_window of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multi_window

    @allow_multi_window.setter
    def allow_multi_window(self, allow_multi_window):
        """Sets the allow_multi_window of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether AllowMultiWindow.  # noqa: E501

        :param allow_multi_window: The allow_multi_window of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_multi_window = allow_multi_window

    @property
    def allow_navigation_bar(self):
        """Gets the allow_navigation_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowNavigationBar.  # noqa: E501

        :return: The allow_navigation_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_navigation_bar

    @allow_navigation_bar.setter
    def allow_navigation_bar(self, allow_navigation_bar):
        """Sets the allow_navigation_bar of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowNavigationBar.  # noqa: E501

        :param allow_navigation_bar: The allow_navigation_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_navigation_bar = allow_navigation_bar

    @property
    def allow_notification_bar(self):
        """Gets the allow_notification_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowNotificationBar.  # noqa: E501

        :return: The allow_notification_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_notification_bar

    @allow_notification_bar.setter
    def allow_notification_bar(self, allow_notification_bar):
        """Sets the allow_notification_bar of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowNotificationBar.  # noqa: E501

        :param allow_notification_bar: The allow_notification_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_notification_bar = allow_notification_bar

    @property
    def allow_options_key(self):
        """Gets the allow_options_key of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowOptionsKey.  # noqa: E501

        :return: The allow_options_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_options_key

    @allow_options_key.setter
    def allow_options_key(self, allow_options_key):
        """Sets the allow_options_key of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowOptionsKey.  # noqa: E501

        :param allow_options_key: The allow_options_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_options_key = allow_options_key

    @property
    def allow_power_off(self):
        """Gets the allow_power_off of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowPowerOff.  # noqa: E501

        :return: The allow_power_off of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_power_off

    @allow_power_off.setter
    def allow_power_off(self, allow_power_off):
        """Sets the allow_power_off of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowPowerOff.  # noqa: E501

        :param allow_power_off: The allow_power_off of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_power_off = allow_power_off

    @property
    def allow_recent_tasks(self):
        """Gets the allow_recent_tasks of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowRecentTasks.  # noqa: E501

        :return: The allow_recent_tasks of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_recent_tasks

    @allow_recent_tasks.setter
    def allow_recent_tasks(self, allow_recent_tasks):
        """Sets the allow_recent_tasks of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowRecentTasks.  # noqa: E501

        :param allow_recent_tasks: The allow_recent_tasks of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_recent_tasks = allow_recent_tasks

    @property
    def allow_settings(self):
        """Gets the allow_settings of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowSettings.  # noqa: E501

        :return: The allow_settings of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_settings

    @allow_settings.setter
    def allow_settings(self, allow_settings):
        """Sets the allow_settings of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowSettings.  # noqa: E501

        :param allow_settings: The allow_settings of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_settings = allow_settings

    @property
    def allow_status_bar(self):
        """Gets the allow_status_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowStatusBar.  # noqa: E501

        :return: The allow_status_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_status_bar

    @allow_status_bar.setter
    def allow_status_bar(self, allow_status_bar):
        """Sets the allow_status_bar of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowStatusBar.  # noqa: E501

        :param allow_status_bar: The allow_status_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_status_bar = allow_status_bar

    @property
    def allow_stay_awake(self):
        """Gets the allow_stay_awake of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowStayAwake.  # noqa: E501

        :return: The allow_stay_awake of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_stay_awake

    @allow_stay_awake.setter
    def allow_stay_awake(self, allow_stay_awake):
        """Sets the allow_stay_awake of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowStayAwake.  # noqa: E501

        :param allow_stay_awake: The allow_stay_awake of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_stay_awake = allow_stay_awake

    @property
    def allow_task_manager(self):
        """Gets the allow_task_manager of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowTaskManager.  # noqa: E501

        :return: The allow_task_manager of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_task_manager

    @allow_task_manager.setter
    def allow_task_manager(self, allow_task_manager):
        """Sets the allow_task_manager of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowTaskManager.  # noqa: E501

        :param allow_task_manager: The allow_task_manager of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_task_manager = allow_task_manager

    @property
    def allow_tray_bluetooth(self):
        """Gets the allow_tray_bluetooth of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowTrayBluetooth.  # noqa: E501

        :return: The allow_tray_bluetooth of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_tray_bluetooth

    @allow_tray_bluetooth.setter
    def allow_tray_bluetooth(self, allow_tray_bluetooth):
        """Sets the allow_tray_bluetooth of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowTrayBluetooth.  # noqa: E501

        :param allow_tray_bluetooth: The allow_tray_bluetooth of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_tray_bluetooth = allow_tray_bluetooth

    @property
    def allow_tray_cellular_data(self):
        """Gets the allow_tray_cellular_data of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowTrayCellularData.  # noqa: E501

        :return: The allow_tray_cellular_data of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_tray_cellular_data

    @allow_tray_cellular_data.setter
    def allow_tray_cellular_data(self, allow_tray_cellular_data):
        """Sets the allow_tray_cellular_data of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowTrayCellularData.  # noqa: E501

        :param allow_tray_cellular_data: The allow_tray_cellular_data of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_tray_cellular_data = allow_tray_cellular_data

    @property
    def allow_tray_gps(self):
        """Gets the allow_tray_gps of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowTrayGPS.  # noqa: E501

        :return: The allow_tray_gps of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_tray_gps

    @allow_tray_gps.setter
    def allow_tray_gps(self, allow_tray_gps):
        """Sets the allow_tray_gps of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowTrayGPS.  # noqa: E501

        :param allow_tray_gps: The allow_tray_gps of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_tray_gps = allow_tray_gps

    @property
    def allow_tray_wifi(self):
        """Gets the allow_tray_wifi of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowTrayWifi.  # noqa: E501

        :return: The allow_tray_wifi of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_tray_wifi

    @allow_tray_wifi.setter
    def allow_tray_wifi(self, allow_tray_wifi):
        """Sets the allow_tray_wifi of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowTrayWifi.  # noqa: E501

        :param allow_tray_wifi: The allow_tray_wifi of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_tray_wifi = allow_tray_wifi

    @property
    def allow_utilities(self):
        """Gets the allow_utilities of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowUtilities.  # noqa: E501

        :return: The allow_utilities of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_utilities

    @allow_utilities.setter
    def allow_utilities(self, allow_utilities):
        """Sets the allow_utilities of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowUtilities.  # noqa: E501

        :param allow_utilities: The allow_utilities of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_utilities = allow_utilities

    @property
    def allow_volume_down_key(self):
        """Gets the allow_volume_down_key of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowVolumeDownKey.  # noqa: E501

        :return: The allow_volume_down_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_volume_down_key

    @allow_volume_down_key.setter
    def allow_volume_down_key(self, allow_volume_down_key):
        """Sets the allow_volume_down_key of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowVolumeDownKey.  # noqa: E501

        :param allow_volume_down_key: The allow_volume_down_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_volume_down_key = allow_volume_down_key

    @property
    def allow_volume_up_key(self):
        """Gets the allow_volume_up_key of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowVolumeUpKey.  # noqa: E501

        :return: The allow_volume_up_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_volume_up_key

    @allow_volume_up_key.setter
    def allow_volume_up_key(self, allow_volume_up_key):
        """Sets the allow_volume_up_key of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowVolumeUpKey.  # noqa: E501

        :param allow_volume_up_key: The allow_volume_up_key of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_volume_up_key = allow_volume_up_key

    @property
    def allow_widgets(self):
        """Gets the allow_widgets of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether allowWidgets.  # noqa: E501

        :return: The allow_widgets of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_widgets

    @allow_widgets.setter
    def allow_widgets(self, allow_widgets):
        """Sets the allow_widgets of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether allowWidgets.  # noqa: E501

        :param allow_widgets: The allow_widgets of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_widgets = allow_widgets

    @property
    def application_setting(self):
        """Gets the application_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether applicationSetting.  # noqa: E501

        :return: The application_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._application_setting

    @application_setting.setter
    def application_setting(self, application_setting):
        """Sets the application_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether applicationSetting.  # noqa: E501

        :param application_setting: The application_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._application_setting = application_setting

    @property
    def app_mode(self):
        """Gets the app_mode of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets appMode.  # noqa: E501

        :return: The app_mode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._app_mode

    @app_mode.setter
    def app_mode(self, app_mode):
        """Sets the app_mode of this AndroidKioskPayloadV2Entity.

        Gets or sets appMode.  # noqa: E501

        :param app_mode: The app_mode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._app_mode = app_mode

    @property
    def bluetooth_setting(self):
        """Gets the bluetooth_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether bluetoothSetting.  # noqa: E501

        :return: The bluetooth_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._bluetooth_setting

    @bluetooth_setting.setter
    def bluetooth_setting(self, bluetooth_setting):
        """Sets the bluetooth_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether bluetoothSetting.  # noqa: E501

        :param bluetooth_setting: The bluetooth_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._bluetooth_setting = bluetooth_setting

    @property
    def contacts_view(self):
        """Gets the contacts_view of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether contactsView.  # noqa: E501

        :return: The contacts_view of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._contacts_view

    @contacts_view.setter
    def contacts_view(self, contacts_view):
        """Sets the contacts_view of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether contactsView.  # noqa: E501

        :param contacts_view: The contacts_view of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._contacts_view = contacts_view

    @property
    def display_setting(self):
        """Gets the display_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether displaySetting.  # noqa: E501

        :return: The display_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._display_setting

    @display_setting.setter
    def display_setting(self, display_setting):
        """Sets the display_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether displaySetting.  # noqa: E501

        :param display_setting: The display_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._display_setting = display_setting

    @property
    def dock_setting(self):
        """Gets the dock_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether dockSetting.  # noqa: E501

        :return: The dock_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._dock_setting

    @dock_setting.setter
    def dock_setting(self, dock_setting):
        """Sets the dock_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether dockSetting.  # noqa: E501

        :param dock_setting: The dock_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._dock_setting = dock_setting

    @property
    def freeze_icons(self):
        """Gets the freeze_icons of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether freezeIcons.  # noqa: E501

        :return: The freeze_icons of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._freeze_icons

    @freeze_icons.setter
    def freeze_icons(self, freeze_icons):
        """Sets the freeze_icons of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether freezeIcons.  # noqa: E501

        :param freeze_icons: The freeze_icons of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._freeze_icons = freeze_icons

    @property
    def grid_config_generic(self):
        """Gets the grid_config_generic of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets gridConfigGeneric.  # noqa: E501

        :return: The grid_config_generic of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._grid_config_generic

    @grid_config_generic.setter
    def grid_config_generic(self, grid_config_generic):
        """Sets the grid_config_generic of this AndroidKioskPayloadV2Entity.

        Gets or sets gridConfigGeneric.  # noqa: E501

        :param grid_config_generic: The grid_config_generic of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._grid_config_generic = grid_config_generic

    @property
    def grid_config_large(self):
        """Gets the grid_config_large of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets gridConfigLarge.  # noqa: E501

        :return: The grid_config_large of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._grid_config_large

    @grid_config_large.setter
    def grid_config_large(self, grid_config_large):
        """Sets the grid_config_large of this AndroidKioskPayloadV2Entity.

        Gets or sets gridConfigLarge.  # noqa: E501

        :param grid_config_large: The grid_config_large of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._grid_config_large = grid_config_large

    @property
    def grid_config_medium_and_small(self):
        """Gets the grid_config_medium_and_small of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets gridConfigMediumAndSmall.  # noqa: E501

        :return: The grid_config_medium_and_small of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._grid_config_medium_and_small

    @grid_config_medium_and_small.setter
    def grid_config_medium_and_small(self, grid_config_medium_and_small):
        """Sets the grid_config_medium_and_small of this AndroidKioskPayloadV2Entity.

        Gets or sets gridConfigMediumAndSmall.  # noqa: E501

        :param grid_config_medium_and_small: The grid_config_medium_and_small of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._grid_config_medium_and_small = grid_config_medium_and_small

    @property
    def grid_config_xlarge(self):
        """Gets the grid_config_xlarge of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets gridConfigXlarge.  # noqa: E501

        :return: The grid_config_xlarge of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._grid_config_xlarge

    @grid_config_xlarge.setter
    def grid_config_xlarge(self, grid_config_xlarge):
        """Sets the grid_config_xlarge of this AndroidKioskPayloadV2Entity.

        Gets or sets gridConfigXlarge.  # noqa: E501

        :param grid_config_xlarge: The grid_config_xlarge of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._grid_config_xlarge = grid_config_xlarge

    @property
    def grid_layout(self):
        """Gets the grid_layout of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets gridLayout.  # noqa: E501

        :return: The grid_layout of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._grid_layout

    @grid_layout.setter
    def grid_layout(self, grid_layout):
        """Sets the grid_layout of this AndroidKioskPayloadV2Entity.

        Gets or sets gridLayout.  # noqa: E501

        :param grid_layout: The grid_layout of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._grid_layout = grid_layout

    @property
    def group_id(self):
        """Gets the group_id of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets groupId.  # noqa: E501

        :return: The group_id of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AndroidKioskPayloadV2Entity.

        Gets or sets groupId.  # noqa: E501

        :param group_id: The group_id of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def hide_action_bar(self):
        """Gets the hide_action_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether HideActionBar.  # noqa: E501

        :return: The hide_action_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._hide_action_bar

    @hide_action_bar.setter
    def hide_action_bar(self, hide_action_bar):
        """Sets the hide_action_bar of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether HideActionBar.  # noqa: E501

        :param hide_action_bar: The hide_action_bar of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._hide_action_bar = hide_action_bar

    @property
    def hot_seat_bar_settings(self):
        """Gets the hot_seat_bar_settings of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets HotSeatBarSettings.  # noqa: E501

        :return: The hot_seat_bar_settings of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._hot_seat_bar_settings

    @hot_seat_bar_settings.setter
    def hot_seat_bar_settings(self, hot_seat_bar_settings):
        """Sets the hot_seat_bar_settings of this AndroidKioskPayloadV2Entity.

        Gets or sets HotSeatBarSettings.  # noqa: E501

        :param hot_seat_bar_settings: The hot_seat_bar_settings of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._hot_seat_bar_settings = hot_seat_bar_settings

    @property
    def icon_size(self):
        """Gets the icon_size of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets iconSize.  # noqa: E501

        :return: The icon_size of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._icon_size

    @icon_size.setter
    def icon_size(self, icon_size):
        """Sets the icon_size of this AndroidKioskPayloadV2Entity.

        Gets or sets iconSize.  # noqa: E501

        :param icon_size: The icon_size of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._icon_size = icon_size

    @property
    def language_setting(self):
        """Gets the language_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether languageSetting.  # noqa: E501

        :return: The language_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._language_setting

    @language_setting.setter
    def language_setting(self, language_setting):
        """Sets the language_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether languageSetting.  # noqa: E501

        :param language_setting: The language_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._language_setting = language_setting

    @property
    def orientation(self):
        """Gets the orientation of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets Orientation.  # noqa: E501

        :return: The orientation of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this AndroidKioskPayloadV2Entity.

        Gets or sets Orientation.  # noqa: E501

        :param orientation: The orientation of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._orientation = orientation

    @property
    def persist_admin_passcode(self):
        """Gets the persist_admin_passcode of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether persistAdminPasscode.  # noqa: E501

        :return: The persist_admin_passcode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._persist_admin_passcode

    @persist_admin_passcode.setter
    def persist_admin_passcode(self, persist_admin_passcode):
        """Sets the persist_admin_passcode of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether persistAdminPasscode.  # noqa: E501

        :param persist_admin_passcode: The persist_admin_passcode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._persist_admin_passcode = persist_admin_passcode

    @property
    def phone_call(self):
        """Gets the phone_call of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether phoneCall.  # noqa: E501

        :return: The phone_call of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._phone_call

    @phone_call.setter
    def phone_call(self, phone_call):
        """Sets the phone_call of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether phoneCall.  # noqa: E501

        :param phone_call: The phone_call of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._phone_call = phone_call

    @property
    def power_setting(self):
        """Gets the power_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether powerSetting.  # noqa: E501

        :return: The power_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._power_setting

    @power_setting.setter
    def power_setting(self, power_setting):
        """Sets the power_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether powerSetting.  # noqa: E501

        :param power_setting: The power_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._power_setting = power_setting

    @property
    def screen_count(self):
        """Gets the screen_count of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets screenCount.  # noqa: E501

        :return: The screen_count of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._screen_count

    @screen_count.setter
    def screen_count(self, screen_count):
        """Sets the screen_count of this AndroidKioskPayloadV2Entity.

        Gets or sets screenCount.  # noqa: E501

        :param screen_count: The screen_count of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._screen_count = screen_count

    @property
    def screen_lock(self):
        """Gets the screen_lock of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether screenLock.  # noqa: E501

        :return: The screen_lock of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._screen_lock

    @screen_lock.setter
    def screen_lock(self, screen_lock):
        """Sets the screen_lock of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether screenLock.  # noqa: E501

        :param screen_lock: The screen_lock of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._screen_lock = screen_lock

    @property
    def section_layout(self):
        """Gets the section_layout of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets sectionLayout.  # noqa: E501

        :return: The section_layout of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._section_layout

    @section_layout.setter
    def section_layout(self, section_layout):
        """Sets the section_layout of this AndroidKioskPayloadV2Entity.

        Gets or sets sectionLayout.  # noqa: E501

        :param section_layout: The section_layout of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._section_layout = section_layout

    @property
    def section_name(self):
        """Gets the section_name of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets sectionName.  # noqa: E501

        :return: The section_name of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._section_name

    @section_name.setter
    def section_name(self, section_name):
        """Sets the section_name of this AndroidKioskPayloadV2Entity.

        Gets or sets sectionName.  # noqa: E501

        :param section_name: The section_name of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._section_name = section_name

    @property
    def security_setting(self):
        """Gets the security_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether securitySetting.  # noqa: E501

        :return: The security_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._security_setting

    @security_setting.setter
    def security_setting(self, security_setting):
        """Sets the security_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether securitySetting.  # noqa: E501

        :param security_setting: The security_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._security_setting = security_setting

    @property
    def show_agent_icon_on_home_screen(self):
        """Gets the show_agent_icon_on_home_screen of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether showAgentIconOnHomeScreen.  # noqa: E501

        :return: The show_agent_icon_on_home_screen of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._show_agent_icon_on_home_screen

    @show_agent_icon_on_home_screen.setter
    def show_agent_icon_on_home_screen(self, show_agent_icon_on_home_screen):
        """Sets the show_agent_icon_on_home_screen of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether showAgentIconOnHomeScreen.  # noqa: E501

        :param show_agent_icon_on_home_screen: The show_agent_icon_on_home_screen of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._show_agent_icon_on_home_screen = show_agent_icon_on_home_screen

    @property
    def single_app_mode(self):
        """Gets the single_app_mode of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether singleAppMode.  # noqa: E501

        :return: The single_app_mode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._single_app_mode

    @single_app_mode.setter
    def single_app_mode(self, single_app_mode):
        """Sets the single_app_mode of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether singleAppMode.  # noqa: E501

        :param single_app_mode: The single_app_mode of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._single_app_mode = single_app_mode

    @property
    def sound_setting(self):
        """Gets the sound_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether soundSetting.  # noqa: E501

        :return: The sound_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._sound_setting

    @sound_setting.setter
    def sound_setting(self, sound_setting):
        """Sets the sound_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether soundSetting.  # noqa: E501

        :param sound_setting: The sound_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._sound_setting = sound_setting

    @property
    def status_bar_frequency(self):
        """Gets the status_bar_frequency of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets statusBarFrequency.  # noqa: E501

        :return: The status_bar_frequency of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._status_bar_frequency

    @status_bar_frequency.setter
    def status_bar_frequency(self, status_bar_frequency):
        """Sets the status_bar_frequency of this AndroidKioskPayloadV2Entity.

        Gets or sets statusBarFrequency.  # noqa: E501

        :param status_bar_frequency: The status_bar_frequency of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._status_bar_frequency = status_bar_frequency

    @property
    def storage_setting(self):
        """Gets the storage_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether storageSetting.  # noqa: E501

        :return: The storage_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._storage_setting

    @storage_setting.setter
    def storage_setting(self, storage_setting):
        """Sets the storage_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether storageSetting.  # noqa: E501

        :param storage_setting: The storage_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._storage_setting = storage_setting

    @property
    def template_mode_data(self):
        """Gets the template_mode_data of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets templateModeData.  # noqa: E501

        :return: The template_mode_data of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._template_mode_data

    @template_mode_data.setter
    def template_mode_data(self, template_mode_data):
        """Sets the template_mode_data of this AndroidKioskPayloadV2Entity.

        Gets or sets templateModeData.  # noqa: E501

        :param template_mode_data: The template_mode_data of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._template_mode_data = template_mode_data

    @property
    def title_bar_icon(self):
        """Gets the title_bar_icon of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets titleBarIcon.  # noqa: E501

        :return: The title_bar_icon of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._title_bar_icon

    @title_bar_icon.setter
    def title_bar_icon(self, title_bar_icon):
        """Sets the title_bar_icon of this AndroidKioskPayloadV2Entity.

        Gets or sets titleBarIcon.  # noqa: E501

        :param title_bar_icon: The title_bar_icon of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._title_bar_icon = title_bar_icon

    @property
    def title_bar_icon_url(self):
        """Gets the title_bar_icon_url of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets TitleBarIconUrl.  # noqa: E501

        :return: The title_bar_icon_url of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._title_bar_icon_url

    @title_bar_icon_url.setter
    def title_bar_icon_url(self, title_bar_icon_url):
        """Sets the title_bar_icon_url of this AndroidKioskPayloadV2Entity.

        Gets or sets TitleBarIconUrl.  # noqa: E501

        :param title_bar_icon_url: The title_bar_icon_url of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._title_bar_icon_url = title_bar_icon_url

    @property
    def title_bar_text(self):
        """Gets the title_bar_text of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets titleBarText.  # noqa: E501

        :return: The title_bar_text of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._title_bar_text

    @title_bar_text.setter
    def title_bar_text(self, title_bar_text):
        """Sets the title_bar_text of this AndroidKioskPayloadV2Entity.

        Gets or sets titleBarText.  # noqa: E501

        :param title_bar_text: The title_bar_text of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._title_bar_text = title_bar_text

    @property
    def user_name(self):
        """Gets the user_name of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets userName.  # noqa: E501

        :return: The user_name of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AndroidKioskPayloadV2Entity.

        Gets or sets userName.  # noqa: E501

        :param user_name: The user_name of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def wallpaper_id(self):
        """Gets the wallpaper_id of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets wallpaperId.  # noqa: E501

        :return: The wallpaper_id of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._wallpaper_id

    @wallpaper_id.setter
    def wallpaper_id(self, wallpaper_id):
        """Sets the wallpaper_id of this AndroidKioskPayloadV2Entity.

        Gets or sets wallpaperId.  # noqa: E501

        :param wallpaper_id: The wallpaper_id of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._wallpaper_id = wallpaper_id

    @property
    def wallpaper_type(self):
        """Gets the wallpaper_type of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets wallpaperType.  # noqa: E501

        :return: The wallpaper_type of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._wallpaper_type

    @wallpaper_type.setter
    def wallpaper_type(self, wallpaper_type):
        """Sets the wallpaper_type of this AndroidKioskPayloadV2Entity.

        Gets or sets wallpaperType.  # noqa: E501

        :param wallpaper_type: The wallpaper_type of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._wallpaper_type = wallpaper_type

    @property
    def wall_paper_url(self):
        """Gets the wall_paper_url of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets wallPaperUrl.  # noqa: E501

        :return: The wall_paper_url of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._wall_paper_url

    @wall_paper_url.setter
    def wall_paper_url(self, wall_paper_url):
        """Sets the wall_paper_url of this AndroidKioskPayloadV2Entity.

        Gets or sets wallPaperUrl.  # noqa: E501

        :param wall_paper_url: The wall_paper_url of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._wall_paper_url = wall_paper_url

    @property
    def wifi_setting(self):
        """Gets the wifi_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether wifiSetting.  # noqa: E501

        :return: The wifi_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._wifi_setting

    @wifi_setting.setter
    def wifi_setting(self, wifi_setting):
        """Sets the wifi_setting of this AndroidKioskPayloadV2Entity.

        Gets or sets a value indicating whether wifiSetting.  # noqa: E501

        :param wifi_setting: The wifi_setting of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._wifi_setting = wifi_setting

    @property
    def allowed_applications(self):
        """Gets the allowed_applications of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets allowedApplications.  # noqa: E501

        :return: The allowed_applications of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: list[ApplicationListEntity]
        """
        return self._allowed_applications

    @allowed_applications.setter
    def allowed_applications(self, allowed_applications):
        """Sets the allowed_applications of this AndroidKioskPayloadV2Entity.

        Gets or sets allowedApplications.  # noqa: E501

        :param allowed_applications: The allowed_applications of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: list[ApplicationListEntity]
        """

        self._allowed_applications = allowed_applications

    @property
    def allowed_widgets(self):
        """Gets the allowed_widgets of this AndroidKioskPayloadV2Entity.  # noqa: E501

        Gets or sets allowedWidgets.  # noqa: E501

        :return: The allowed_widgets of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :rtype: list[ApplicationListEntity]
        """
        return self._allowed_widgets

    @allowed_widgets.setter
    def allowed_widgets(self, allowed_widgets):
        """Sets the allowed_widgets of this AndroidKioskPayloadV2Entity.

        Gets or sets allowedWidgets.  # noqa: E501

        :param allowed_widgets: The allowed_widgets of this AndroidKioskPayloadV2Entity.  # noqa: E501
        :type: list[ApplicationListEntity]
        """

        self._allowed_widgets = allowed_widgets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidKioskPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidKioskPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidKioskPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
