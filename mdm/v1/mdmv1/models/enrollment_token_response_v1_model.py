# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class EnrollmentTokenResponseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_group_name': 'str',
        'friendly_name': 'str',
        'udid': 'str',
        'serial_number': 'str',
        'imei': 'str',
        'asset_number': 'str',
        'operating_system': 'str',
        'platform': 'int',
        'model_name': 'str',
        'enrollment_status': 'int',
        'status': 'int',
        'source': 'int',
        'type': 'int',
        'registration_date': 'datetime',
        'expiration_date': 'datetime',
        'user_name': 'str',
        'ownership_type': 'str',
        'tags': 'list[str]',
        'user_info': 'EnrollmentUserInfoV1Model',
        'message_type': 'int',
        'send_to': 'str',
        'dep_token': 'str',
        'profile_name': 'str',
        'profile_status': 'int',
        'profile_user_name': 'str',
        'auto_enrollment_sync_status': 'int',
        'qr_code_image_uri': 'str'
    }

    attribute_map = {
        'organization_group_name': 'organization_group_name',
        'friendly_name': 'friendly_name',
        'udid': 'udid',
        'serial_number': 'serial_number',
        'imei': 'imei',
        'asset_number': 'asset_number',
        'operating_system': 'operating_system',
        'platform': 'platform',
        'model_name': 'model_name',
        'enrollment_status': 'enrollment_status',
        'status': 'status',
        'source': 'source',
        'type': 'type',
        'registration_date': 'registration_date',
        'expiration_date': 'expiration_date',
        'user_name': 'user_name',
        'ownership_type': 'ownership_type',
        'tags': 'tags',
        'user_info': 'user_info',
        'message_type': 'message_type',
        'send_to': 'send_to',
        'dep_token': 'dep_token',
        'profile_name': 'profile_name',
        'profile_status': 'profile_status',
        'profile_user_name': 'profile_user_name',
        'auto_enrollment_sync_status': 'auto_enrollment_sync_status',
        'qr_code_image_uri': 'qr_code_image_uri'
    }

    def __init__(self, organization_group_name=None, friendly_name=None, udid=None, serial_number=None, imei=None, asset_number=None, operating_system=None, platform=None, model_name=None, enrollment_status=None, status=None, source=None, type=None, registration_date=None, expiration_date=None, user_name=None, ownership_type=None, tags=None, user_info=None, message_type=None, send_to=None, dep_token=None, profile_name=None, profile_status=None, profile_user_name=None, auto_enrollment_sync_status=None, qr_code_image_uri=None, _configuration=None):  # noqa: E501
        """EnrollmentTokenResponseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._organization_group_name = None
        self._friendly_name = None
        self._udid = None
        self._serial_number = None
        self._imei = None
        self._asset_number = None
        self._operating_system = None
        self._platform = None
        self._model_name = None
        self._enrollment_status = None
        self._status = None
        self._source = None
        self._type = None
        self._registration_date = None
        self._expiration_date = None
        self._user_name = None
        self._ownership_type = None
        self._tags = None
        self._user_info = None
        self._message_type = None
        self._send_to = None
        self._dep_token = None
        self._profile_name = None
        self._profile_status = None
        self._profile_user_name = None
        self._auto_enrollment_sync_status = None
        self._qr_code_image_uri = None
        self.discriminator = None

        if organization_group_name is not None:
            self.organization_group_name = organization_group_name
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if udid is not None:
            self.udid = udid
        if serial_number is not None:
            self.serial_number = serial_number
        if imei is not None:
            self.imei = imei
        if asset_number is not None:
            self.asset_number = asset_number
        if operating_system is not None:
            self.operating_system = operating_system
        if platform is not None:
            self.platform = platform
        if model_name is not None:
            self.model_name = model_name
        if enrollment_status is not None:
            self.enrollment_status = enrollment_status
        if status is not None:
            self.status = status
        if source is not None:
            self.source = source
        if type is not None:
            self.type = type
        if registration_date is not None:
            self.registration_date = registration_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if user_name is not None:
            self.user_name = user_name
        if ownership_type is not None:
            self.ownership_type = ownership_type
        if tags is not None:
            self.tags = tags
        if user_info is not None:
            self.user_info = user_info
        if message_type is not None:
            self.message_type = message_type
        if send_to is not None:
            self.send_to = send_to
        if dep_token is not None:
            self.dep_token = dep_token
        if profile_name is not None:
            self.profile_name = profile_name
        if profile_status is not None:
            self.profile_status = profile_status
        if profile_user_name is not None:
            self.profile_user_name = profile_user_name
        if auto_enrollment_sync_status is not None:
            self.auto_enrollment_sync_status = auto_enrollment_sync_status
        if qr_code_image_uri is not None:
            self.qr_code_image_uri = qr_code_image_uri

    @property
    def organization_group_name(self):
        """Gets the organization_group_name of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Organization group where the token is created.  # noqa: E501

        :return: The organization_group_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_name

    @organization_group_name.setter
    def organization_group_name(self, organization_group_name):
        """Sets the organization_group_name of this EnrollmentTokenResponseV1Model.

        Organization group where the token is created.  # noqa: E501

        :param organization_group_name: The organization_group_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_name = organization_group_name

    @property
    def friendly_name(self):
        """Gets the friendly_name of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Friendly name of the token.  # noqa: E501

        :return: The friendly_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this EnrollmentTokenResponseV1Model.

        Friendly name of the token.  # noqa: E501

        :param friendly_name: The friendly_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def udid(self):
        """Gets the udid of this EnrollmentTokenResponseV1Model.  # noqa: E501

        UDID of the device  # noqa: E501

        :return: The udid of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid):
        """Sets the udid of this EnrollmentTokenResponseV1Model.

        UDID of the device  # noqa: E501

        :param udid: The udid of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._udid = udid

    @property
    def serial_number(self):
        """Gets the serial_number of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Serial number of the device  # noqa: E501

        :return: The serial_number of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this EnrollmentTokenResponseV1Model.

        Serial number of the device  # noqa: E501

        :param serial_number: The serial_number of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def imei(self):
        """Gets the imei of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Device IMEI hardware identifier.  # noqa: E501

        :return: The imei of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this EnrollmentTokenResponseV1Model.

        Device IMEI hardware identifier.  # noqa: E501

        :param imei: The imei of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._imei = imei

    @property
    def asset_number(self):
        """Gets the asset_number of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Device asset number.  # noqa: E501

        :return: The asset_number of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._asset_number

    @asset_number.setter
    def asset_number(self, asset_number):
        """Sets the asset_number of this EnrollmentTokenResponseV1Model.

        Device asset number.  # noqa: E501

        :param asset_number: The asset_number of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._asset_number = asset_number

    @property
    def operating_system(self):
        """Gets the operating_system of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Operating system of the device.  # noqa: E501

        :return: The operating_system of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this EnrollmentTokenResponseV1Model.

        Operating system of the device.  # noqa: E501

        :param operating_system: The operating_system of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def platform(self):
        """Gets the platform of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Platform type of the device  # noqa: E501

        :return: The platform of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this EnrollmentTokenResponseV1Model.

        Platform type of the device  # noqa: E501

        :param platform: The platform of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 100, 101, 102, 103, 104, 105, 200, 201, 1000]  # noqa: E501
        if (self._configuration.client_side_validation and
                platform not in allowed_values):
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def model_name(self):
        """Gets the model_name of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Model of the device.  # noqa: E501

        :return: The model_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this EnrollmentTokenResponseV1Model.

        Model of the device.  # noqa: E501

        :param model_name: The model_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def enrollment_status(self):
        """Gets the enrollment_status of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Enrollment status of the device.  # noqa: E501

        :return: The enrollment_status of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_status

    @enrollment_status.setter
    def enrollment_status(self, enrollment_status):
        """Sets the enrollment_status of this EnrollmentTokenResponseV1Model.

        Enrollment status of the device.  # noqa: E501

        :param enrollment_status: The enrollment_status of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  # noqa: E501
        if (self._configuration.client_side_validation and
                enrollment_status not in allowed_values):
            raise ValueError(
                "Invalid value for `enrollment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(enrollment_status, allowed_values)
            )

        self._enrollment_status = enrollment_status

    @property
    def status(self):
        """Gets the status of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Enrollment token status.  # noqa: E501

        :return: The status of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnrollmentTokenResponseV1Model.

        Enrollment token status.  # noqa: E501

        :param status: The status of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def source(self):
        """Gets the source of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Enrollment token source.  # noqa: E501

        :return: The source of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EnrollmentTokenResponseV1Model.

        Enrollment token source.  # noqa: E501

        :param source: The source of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 7, 8, 9, 10]  # noqa: E501
        if (self._configuration.client_side_validation and
                source not in allowed_values):
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def type(self):
        """Gets the type of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Enrollment token type.  # noqa: E501

        :return: The type of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnrollmentTokenResponseV1Model.

        Enrollment token type.  # noqa: E501

        :param type: The type of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def registration_date(self):
        """Gets the registration_date of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Enrollment token registration date.  # noqa: E501

        :return: The registration_date of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this EnrollmentTokenResponseV1Model.

        Enrollment token registration date.  # noqa: E501

        :param registration_date: The registration_date of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: datetime
        """

        self._registration_date = registration_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Enrollment token expiration date.  # noqa: E501

        :return: The expiration_date of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this EnrollmentTokenResponseV1Model.

        Enrollment token expiration date.  # noqa: E501

        :param expiration_date: The expiration_date of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def user_name(self):
        """Gets the user_name of this EnrollmentTokenResponseV1Model.  # noqa: E501

        User name associated with the device.  # noqa: E501

        :return: The user_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this EnrollmentTokenResponseV1Model.

        User name associated with the device.  # noqa: E501

        :param user_name: The user_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def ownership_type(self):
        """Gets the ownership_type of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Ownership type of the device (CorporateDedicated, EmployeeOwned, CorporateShared).  # noqa: E501

        :return: The ownership_type of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._ownership_type

    @ownership_type.setter
    def ownership_type(self, ownership_type):
        """Sets the ownership_type of this EnrollmentTokenResponseV1Model.

        Ownership type of the device (CorporateDedicated, EmployeeOwned, CorporateShared).  # noqa: E501

        :param ownership_type: The ownership_type of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._ownership_type = ownership_type

    @property
    def tags(self):
        """Gets the tags of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Tags associated with the token.  # noqa: E501

        :return: The tags of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EnrollmentTokenResponseV1Model.

        Tags associated with the token.  # noqa: E501

        :param tags: The tags of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def user_info(self):
        """Gets the user_info of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Enrollment user information.  # noqa: E501

        :return: The user_info of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: EnrollmentUserInfoV1Model
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this EnrollmentTokenResponseV1Model.

        Enrollment user information.  # noqa: E501

        :param user_info: The user_info of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: EnrollmentUserInfoV1Model
        """

        self._user_info = user_info

    @property
    def message_type(self):
        """Gets the message_type of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Message Type like Email or SMS.  # noqa: E501

        :return: The message_type of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this EnrollmentTokenResponseV1Model.

        Message Type like Email or SMS.  # noqa: E501

        :param message_type: The message_type of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, -1]  # noqa: E501
        if (self._configuration.client_side_validation and
                message_type not in allowed_values):
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def send_to(self):
        """Gets the send_to of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Email/Phone number where the message template will be sent.  # noqa: E501

        :return: The send_to of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._send_to

    @send_to.setter
    def send_to(self, send_to):
        """Sets the send_to of this EnrollmentTokenResponseV1Model.

        Email/Phone number where the message template will be sent.  # noqa: E501

        :param send_to: The send_to of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._send_to = send_to

    @property
    def dep_token(self):
        """Gets the dep_token of this EnrollmentTokenResponseV1Model.  # noqa: E501

        DEP enrollment token.  # noqa: E501

        :return: The dep_token of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._dep_token

    @dep_token.setter
    def dep_token(self, dep_token):
        """Sets the dep_token of this EnrollmentTokenResponseV1Model.

        DEP enrollment token.  # noqa: E501

        :param dep_token: The dep_token of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._dep_token = dep_token

    @property
    def profile_name(self):
        """Gets the profile_name of this EnrollmentTokenResponseV1Model.  # noqa: E501

        DEP profile name.  # noqa: E501

        :return: The profile_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this EnrollmentTokenResponseV1Model.

        DEP profile name.  # noqa: E501

        :param profile_name: The profile_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def profile_status(self):
        """Gets the profile_status of this EnrollmentTokenResponseV1Model.  # noqa: E501

        DEP profile status  # noqa: E501

        :return: The profile_status of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._profile_status

    @profile_status.setter
    def profile_status(self, profile_status):
        """Sets the profile_status of this EnrollmentTokenResponseV1Model.

        DEP profile status  # noqa: E501

        :param profile_status: The profile_status of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                profile_status not in allowed_values):
            raise ValueError(
                "Invalid value for `profile_status` ({0}), must be one of {1}"  # noqa: E501
                .format(profile_status, allowed_values)
            )

        self._profile_status = profile_status

    @property
    def profile_user_name(self):
        """Gets the profile_user_name of this EnrollmentTokenResponseV1Model.  # noqa: E501

        User name associated with the profile.  # noqa: E501

        :return: The profile_user_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._profile_user_name

    @profile_user_name.setter
    def profile_user_name(self, profile_user_name):
        """Sets the profile_user_name of this EnrollmentTokenResponseV1Model.

        User name associated with the profile.  # noqa: E501

        :param profile_user_name: The profile_user_name of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._profile_user_name = profile_user_name

    @property
    def auto_enrollment_sync_status(self):
        """Gets the auto_enrollment_sync_status of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Sync status for auto enrollment mode.  # noqa: E501

        :return: The auto_enrollment_sync_status of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._auto_enrollment_sync_status

    @auto_enrollment_sync_status.setter
    def auto_enrollment_sync_status(self, auto_enrollment_sync_status):
        """Sets the auto_enrollment_sync_status of this EnrollmentTokenResponseV1Model.

        Sync status for auto enrollment mode.  # noqa: E501

        :param auto_enrollment_sync_status: The auto_enrollment_sync_status of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  # noqa: E501
        if (self._configuration.client_side_validation and
                auto_enrollment_sync_status not in allowed_values):
            raise ValueError(
                "Invalid value for `auto_enrollment_sync_status` ({0}), must be one of {1}"  # noqa: E501
                .format(auto_enrollment_sync_status, allowed_values)
            )

        self._auto_enrollment_sync_status = auto_enrollment_sync_status

    @property
    def qr_code_image_uri(self):
        """Gets the qr_code_image_uri of this EnrollmentTokenResponseV1Model.  # noqa: E501

        Data URI for the QR CODE image.  # noqa: E501

        :return: The qr_code_image_uri of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._qr_code_image_uri

    @qr_code_image_uri.setter
    def qr_code_image_uri(self, qr_code_image_uri):
        """Sets the qr_code_image_uri of this EnrollmentTokenResponseV1Model.

        Data URI for the QR CODE image.  # noqa: E501

        :param qr_code_image_uri: The qr_code_image_uri of this EnrollmentTokenResponseV1Model.  # noqa: E501
        :type: str
        """

        self._qr_code_image_uri = qr_code_image_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrollmentTokenResponseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentTokenResponseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentTokenResponseV1Model):
            return True

        return self.to_dict() != other.to_dict()
