# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class MsiDeploymentParamModel1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'command_line_arguments': 'str',
        'install_timeout_in_minutes': 'int',
        'retry_count': 'int',
        'retry_interval_in_minutes': 'int',
        'install_context': 'int'
    }

    attribute_map = {
        'command_line_arguments': 'CommandLineArguments',
        'install_timeout_in_minutes': 'InstallTimeoutInMinutes',
        'retry_count': 'RetryCount',
        'retry_interval_in_minutes': 'RetryIntervalInMinutes',
        'install_context': 'InstallContext'
    }

    def __init__(self, command_line_arguments=None, install_timeout_in_minutes=None, retry_count=None, retry_interval_in_minutes=None, install_context=None, _configuration=None):  # noqa: E501
        """MsiDeploymentParamModel1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._command_line_arguments = None
        self._install_timeout_in_minutes = None
        self._retry_count = None
        self._retry_interval_in_minutes = None
        self._install_context = None
        self.discriminator = None

        if command_line_arguments is not None:
            self.command_line_arguments = command_line_arguments
        if install_timeout_in_minutes is not None:
            self.install_timeout_in_minutes = install_timeout_in_minutes
        if retry_count is not None:
            self.retry_count = retry_count
        if retry_interval_in_minutes is not None:
            self.retry_interval_in_minutes = retry_interval_in_minutes
        if install_context is not None:
            self.install_context = install_context

    @property
    def command_line_arguments(self):
        """Gets the command_line_arguments of this MsiDeploymentParamModel1.  # noqa: E501

        Gets or sets command-line options to be used when calling MSIEXEC.exe.  # noqa: E501

        :return: The command_line_arguments of this MsiDeploymentParamModel1.  # noqa: E501
        :rtype: str
        """
        return self._command_line_arguments

    @command_line_arguments.setter
    def command_line_arguments(self, command_line_arguments):
        """Sets the command_line_arguments of this MsiDeploymentParamModel1.

        Gets or sets command-line options to be used when calling MSIEXEC.exe.  # noqa: E501

        :param command_line_arguments: The command_line_arguments of this MsiDeploymentParamModel1.  # noqa: E501
        :type: str
        """

        self._command_line_arguments = command_line_arguments

    @property
    def install_timeout_in_minutes(self):
        """Gets the install_timeout_in_minutes of this MsiDeploymentParamModel1.  # noqa: E501

        Gets or sets amount of time, in minutes that the installation process can run before the installer  considers the installation may have failed and no longer monitors the installation operation.Range 0-60.  # noqa: E501

        :return: The install_timeout_in_minutes of this MsiDeploymentParamModel1.  # noqa: E501
        :rtype: int
        """
        return self._install_timeout_in_minutes

    @install_timeout_in_minutes.setter
    def install_timeout_in_minutes(self, install_timeout_in_minutes):
        """Sets the install_timeout_in_minutes of this MsiDeploymentParamModel1.

        Gets or sets amount of time, in minutes that the installation process can run before the installer  considers the installation may have failed and no longer monitors the installation operation.Range 0-60.  # noqa: E501

        :param install_timeout_in_minutes: The install_timeout_in_minutes of this MsiDeploymentParamModel1.  # noqa: E501
        :type: int
        """

        self._install_timeout_in_minutes = install_timeout_in_minutes

    @property
    def retry_count(self):
        """Gets the retry_count of this MsiDeploymentParamModel1.  # noqa: E501

        Gets or sets the number of times the download and installation operation will be retried before the installation will be marked as failed. With a limit of ‘10' attempts.  # noqa: E501

        :return: The retry_count of this MsiDeploymentParamModel1.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this MsiDeploymentParamModel1.

        Gets or sets the number of times the download and installation operation will be retried before the installation will be marked as failed. With a limit of ‘10' attempts.  # noqa: E501

        :param retry_count: The retry_count of this MsiDeploymentParamModel1.  # noqa: E501
        :type: int
        """

        self._retry_count = retry_count

    @property
    def retry_interval_in_minutes(self):
        """Gets the retry_interval_in_minutes of this MsiDeploymentParamModel1.  # noqa: E501

        Gets or sets amount of time, in minutes between retry operations. Range 0-10.  # noqa: E501

        :return: The retry_interval_in_minutes of this MsiDeploymentParamModel1.  # noqa: E501
        :rtype: int
        """
        return self._retry_interval_in_minutes

    @retry_interval_in_minutes.setter
    def retry_interval_in_minutes(self, retry_interval_in_minutes):
        """Sets the retry_interval_in_minutes of this MsiDeploymentParamModel1.

        Gets or sets amount of time, in minutes between retry operations. Range 0-10.  # noqa: E501

        :param retry_interval_in_minutes: The retry_interval_in_minutes of this MsiDeploymentParamModel1.  # noqa: E501
        :type: int
        """

        self._retry_interval_in_minutes = retry_interval_in_minutes

    @property
    def install_context(self):
        """Gets the install_context of this MsiDeploymentParamModel1.  # noqa: E501

        Gets or sets the windows msi install context. Supported Values: Device = 1, User = 2.  # noqa: E501

        :return: The install_context of this MsiDeploymentParamModel1.  # noqa: E501
        :rtype: int
        """
        return self._install_context

    @install_context.setter
    def install_context(self, install_context):
        """Sets the install_context of this MsiDeploymentParamModel1.

        Gets or sets the windows msi install context. Supported Values: Device = 1, User = 2.  # noqa: E501

        :param install_context: The install_context of this MsiDeploymentParamModel1.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                install_context not in allowed_values):
            raise ValueError(
                "Invalid value for `install_context` ({0}), must be one of {1}"  # noqa: E501
                .format(install_context, allowed_values)
            )

        self._install_context = install_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MsiDeploymentParamModel1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MsiDeploymentParamModel1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MsiDeploymentParamModel1):
            return True

        return self.to_dict() != other.to_dict()
