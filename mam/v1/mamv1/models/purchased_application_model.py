# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class PurchasedApplicationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'managed_by': 'int',
        'orders': 'PurchasedAppOrdersModel_',
        'licenses': 'PurchasedAppOrdersModel_',
        'assignments': 'list[PurchasedAppAssignmentModel]',
        'deployment': 'PurchasedAppDeploymentModel_',
        'send_application_configuration': 'bool',
        'app_config_list': 'list[ApplicationConfigurationModel]',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'managed_by': 'ManagedBy',
        'orders': 'Orders',
        'licenses': 'Licenses',
        'assignments': 'Assignments',
        'deployment': 'Deployment',
        'send_application_configuration': 'SendApplicationConfiguration',
        'app_config_list': 'AppConfigList',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, managed_by=None, orders=None, licenses=None, assignments=None, deployment=None, send_application_configuration=None, app_config_list=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """PurchasedApplicationModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._managed_by = None
        self._orders = None
        self._licenses = None
        self._assignments = None
        self._deployment = None
        self._send_application_configuration = None
        self._app_config_list = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if managed_by is not None:
            self.managed_by = managed_by
        if orders is not None:
            self.orders = orders
        if licenses is not None:
            self.licenses = licenses
        if assignments is not None:
            self.assignments = assignments
        if deployment is not None:
            self.deployment = deployment
        if send_application_configuration is not None:
            self.send_application_configuration = send_application_configuration
        if app_config_list is not None:
            self.app_config_list = app_config_list
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def managed_by(self):
        """Gets the managed_by of this PurchasedApplicationModel.  # noqa: E501

        Gets or sets id of the organization group manages the app.  # noqa: E501

        :return: The managed_by of this PurchasedApplicationModel.  # noqa: E501
        :rtype: int
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this PurchasedApplicationModel.

        Gets or sets id of the organization group manages the app.  # noqa: E501

        :param managed_by: The managed_by of this PurchasedApplicationModel.  # noqa: E501
        :type: int
        """

        self._managed_by = managed_by

    @property
    def orders(self):
        """Gets the orders of this PurchasedApplicationModel.  # noqa: E501

        Gets or sets order Details [Applicable for PurchasedOnly Apps].  # noqa: E501

        :return: The orders of this PurchasedApplicationModel.  # noqa: E501
        :rtype: PurchasedAppOrdersModel_
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this PurchasedApplicationModel.

        Gets or sets order Details [Applicable for PurchasedOnly Apps].  # noqa: E501

        :param orders: The orders of this PurchasedApplicationModel.  # noqa: E501
        :type: PurchasedAppOrdersModel_
        """

        self._orders = orders

    @property
    def licenses(self):
        """Gets the licenses of this PurchasedApplicationModel.  # noqa: E501

        Gets or sets licenses Details [Applicable for LicensedOnly Apps].  # noqa: E501

        :return: The licenses of this PurchasedApplicationModel.  # noqa: E501
        :rtype: PurchasedAppOrdersModel_
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this PurchasedApplicationModel.

        Gets or sets licenses Details [Applicable for LicensedOnly Apps].  # noqa: E501

        :param licenses: The licenses of this PurchasedApplicationModel.  # noqa: E501
        :type: PurchasedAppOrdersModel_
        """

        self._licenses = licenses

    @property
    def assignments(self):
        """Gets the assignments of this PurchasedApplicationModel.  # noqa: E501

        Gets or sets assignment Details.  # noqa: E501

        :return: The assignments of this PurchasedApplicationModel.  # noqa: E501
        :rtype: list[PurchasedAppAssignmentModel]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this PurchasedApplicationModel.

        Gets or sets assignment Details.  # noqa: E501

        :param assignments: The assignments of this PurchasedApplicationModel.  # noqa: E501
        :type: list[PurchasedAppAssignmentModel]
        """

        self._assignments = assignments

    @property
    def deployment(self):
        """Gets the deployment of this PurchasedApplicationModel.  # noqa: E501

        Gets or sets deployment Details.  # noqa: E501

        :return: The deployment of this PurchasedApplicationModel.  # noqa: E501
        :rtype: PurchasedAppDeploymentModel_
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this PurchasedApplicationModel.

        Gets or sets deployment Details.  # noqa: E501

        :param deployment: The deployment of this PurchasedApplicationModel.  # noqa: E501
        :type: PurchasedAppDeploymentModel_
        """

        self._deployment = deployment

    @property
    def send_application_configuration(self):
        """Gets the send_application_configuration of this PurchasedApplicationModel.  # noqa: E501

        Gets or sets a value indicating whether whether send application configuration.  # noqa: E501

        :return: The send_application_configuration of this PurchasedApplicationModel.  # noqa: E501
        :rtype: bool
        """
        return self._send_application_configuration

    @send_application_configuration.setter
    def send_application_configuration(self, send_application_configuration):
        """Sets the send_application_configuration of this PurchasedApplicationModel.

        Gets or sets a value indicating whether whether send application configuration.  # noqa: E501

        :param send_application_configuration: The send_application_configuration of this PurchasedApplicationModel.  # noqa: E501
        :type: bool
        """

        self._send_application_configuration = send_application_configuration

    @property
    def app_config_list(self):
        """Gets the app_config_list of this PurchasedApplicationModel.  # noqa: E501

        Gets or sets app configuration details.  # noqa: E501

        :return: The app_config_list of this PurchasedApplicationModel.  # noqa: E501
        :rtype: list[ApplicationConfigurationModel]
        """
        return self._app_config_list

    @app_config_list.setter
    def app_config_list(self, app_config_list):
        """Sets the app_config_list of this PurchasedApplicationModel.

        Gets or sets app configuration details.  # noqa: E501

        :param app_config_list: The app_config_list of this PurchasedApplicationModel.  # noqa: E501
        :type: list[ApplicationConfigurationModel]
        """

        self._app_config_list = app_config_list

    @property
    def id(self):
        """Gets the id of this PurchasedApplicationModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this PurchasedApplicationModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PurchasedApplicationModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this PurchasedApplicationModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this PurchasedApplicationModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this PurchasedApplicationModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PurchasedApplicationModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this PurchasedApplicationModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchasedApplicationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchasedApplicationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PurchasedApplicationModel):
            return True

        return self.to_dict() != other.to_dict()
