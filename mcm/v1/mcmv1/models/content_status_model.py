# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mcmv1.configuration import Configuration


class ContentStatusModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_uuid': 'str',
        'name': 'str',
        'installed_device_count': 'int',
        'uninstalled_device_count': 'int',
        'assigned_device_count': 'int',
        'acknowledged_count': 'int',
        'viewed_count': 'int',
        'required': 'bool'
    }

    attribute_map = {
        'content_uuid': 'content_uuid',
        'name': 'name',
        'installed_device_count': 'installed_device_count',
        'uninstalled_device_count': 'uninstalled_device_count',
        'assigned_device_count': 'assigned_device_count',
        'acknowledged_count': 'acknowledged_count',
        'viewed_count': 'viewed_count',
        'required': 'required'
    }

    def __init__(self, content_uuid=None, name=None, installed_device_count=None, uninstalled_device_count=None, assigned_device_count=None, acknowledged_count=None, viewed_count=None, required=None, _configuration=None):  # noqa: E501
        """ContentStatusModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._content_uuid = None
        self._name = None
        self._installed_device_count = None
        self._uninstalled_device_count = None
        self._assigned_device_count = None
        self._acknowledged_count = None
        self._viewed_count = None
        self._required = None
        self.discriminator = None

        if content_uuid is not None:
            self.content_uuid = content_uuid
        if name is not None:
            self.name = name
        if installed_device_count is not None:
            self.installed_device_count = installed_device_count
        if uninstalled_device_count is not None:
            self.uninstalled_device_count = uninstalled_device_count
        if assigned_device_count is not None:
            self.assigned_device_count = assigned_device_count
        if acknowledged_count is not None:
            self.acknowledged_count = acknowledged_count
        if viewed_count is not None:
            self.viewed_count = viewed_count
        if required is not None:
            self.required = required

    @property
    def content_uuid(self):
        """Gets the content_uuid of this ContentStatusModel.  # noqa: E501

        Content UUID.  # noqa: E501

        :return: The content_uuid of this ContentStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._content_uuid

    @content_uuid.setter
    def content_uuid(self, content_uuid):
        """Sets the content_uuid of this ContentStatusModel.

        Content UUID.  # noqa: E501

        :param content_uuid: The content_uuid of this ContentStatusModel.  # noqa: E501
        :type: str
        """

        self._content_uuid = content_uuid

    @property
    def name(self):
        """Gets the name of this ContentStatusModel.  # noqa: E501

        Content name.  # noqa: E501

        :return: The name of this ContentStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentStatusModel.

        Content name.  # noqa: E501

        :param name: The name of this ContentStatusModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def installed_device_count(self):
        """Gets the installed_device_count of this ContentStatusModel.  # noqa: E501

        Installed device count.  # noqa: E501

        :return: The installed_device_count of this ContentStatusModel.  # noqa: E501
        :rtype: int
        """
        return self._installed_device_count

    @installed_device_count.setter
    def installed_device_count(self, installed_device_count):
        """Sets the installed_device_count of this ContentStatusModel.

        Installed device count.  # noqa: E501

        :param installed_device_count: The installed_device_count of this ContentStatusModel.  # noqa: E501
        :type: int
        """

        self._installed_device_count = installed_device_count

    @property
    def uninstalled_device_count(self):
        """Gets the uninstalled_device_count of this ContentStatusModel.  # noqa: E501

        Uninstalled device count.  # noqa: E501

        :return: The uninstalled_device_count of this ContentStatusModel.  # noqa: E501
        :rtype: int
        """
        return self._uninstalled_device_count

    @uninstalled_device_count.setter
    def uninstalled_device_count(self, uninstalled_device_count):
        """Sets the uninstalled_device_count of this ContentStatusModel.

        Uninstalled device count.  # noqa: E501

        :param uninstalled_device_count: The uninstalled_device_count of this ContentStatusModel.  # noqa: E501
        :type: int
        """

        self._uninstalled_device_count = uninstalled_device_count

    @property
    def assigned_device_count(self):
        """Gets the assigned_device_count of this ContentStatusModel.  # noqa: E501

        Assigned device count.  # noqa: E501

        :return: The assigned_device_count of this ContentStatusModel.  # noqa: E501
        :rtype: int
        """
        return self._assigned_device_count

    @assigned_device_count.setter
    def assigned_device_count(self, assigned_device_count):
        """Sets the assigned_device_count of this ContentStatusModel.

        Assigned device count.  # noqa: E501

        :param assigned_device_count: The assigned_device_count of this ContentStatusModel.  # noqa: E501
        :type: int
        """

        self._assigned_device_count = assigned_device_count

    @property
    def acknowledged_count(self):
        """Gets the acknowledged_count of this ContentStatusModel.  # noqa: E501

        Acknowledged count.  # noqa: E501

        :return: The acknowledged_count of this ContentStatusModel.  # noqa: E501
        :rtype: int
        """
        return self._acknowledged_count

    @acknowledged_count.setter
    def acknowledged_count(self, acknowledged_count):
        """Sets the acknowledged_count of this ContentStatusModel.

        Acknowledged count.  # noqa: E501

        :param acknowledged_count: The acknowledged_count of this ContentStatusModel.  # noqa: E501
        :type: int
        """

        self._acknowledged_count = acknowledged_count

    @property
    def viewed_count(self):
        """Gets the viewed_count of this ContentStatusModel.  # noqa: E501

        Viewed count.  # noqa: E501

        :return: The viewed_count of this ContentStatusModel.  # noqa: E501
        :rtype: int
        """
        return self._viewed_count

    @viewed_count.setter
    def viewed_count(self, viewed_count):
        """Sets the viewed_count of this ContentStatusModel.

        Viewed count.  # noqa: E501

        :param viewed_count: The viewed_count of this ContentStatusModel.  # noqa: E501
        :type: int
        """

        self._viewed_count = viewed_count

    @property
    def required(self):
        """Gets the required of this ContentStatusModel.  # noqa: E501

        Indicates whether content is required.  # noqa: E501

        :return: The required of this ContentStatusModel.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ContentStatusModel.

        Indicates whether content is required.  # noqa: E501

        :param required: The required of this ContentStatusModel.  # noqa: E501
        :type: bool
        """

        self._required = required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentStatusModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentStatusModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentStatusModel):
            return True

        return self.to_dict() != other.to_dict()
