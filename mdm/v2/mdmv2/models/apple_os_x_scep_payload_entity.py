# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleOsXScepPayloadEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential_source': 'str',
        'certificate_authority_id': 'int',
        'certificate_template_id': 'int',
        'name': 'str',
        'allow_export_from_key_chain': 'bool',
        'identity_preference': 'MacOsScepIdentityPreferencePayloadV2Model_'
    }

    attribute_map = {
        'credential_source': 'CredentialSource',
        'certificate_authority_id': 'CertificateAuthorityId',
        'certificate_template_id': 'CertificateTemplateId',
        'name': 'Name',
        'allow_export_from_key_chain': 'AllowExportFromKeyChain',
        'identity_preference': 'IdentityPreference'
    }

    def __init__(self, credential_source=None, certificate_authority_id=None, certificate_template_id=None, name=None, allow_export_from_key_chain=None, identity_preference=None, _configuration=None):  # noqa: E501
        """AppleOsXScepPayloadEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._credential_source = None
        self._certificate_authority_id = None
        self._certificate_template_id = None
        self._name = None
        self._allow_export_from_key_chain = None
        self._identity_preference = None
        self.discriminator = None

        if credential_source is not None:
            self.credential_source = credential_source
        if certificate_authority_id is not None:
            self.certificate_authority_id = certificate_authority_id
        if certificate_template_id is not None:
            self.certificate_template_id = certificate_template_id
        if name is not None:
            self.name = name
        if allow_export_from_key_chain is not None:
            self.allow_export_from_key_chain = allow_export_from_key_chain
        if identity_preference is not None:
            self.identity_preference = identity_preference

    @property
    def credential_source(self):
        """Gets the credential_source of this AppleOsXScepPayloadEntity.  # noqa: E501

        Gets or sets the source of the credentials.  # noqa: E501

        :return: The credential_source of this AppleOsXScepPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._credential_source

    @credential_source.setter
    def credential_source(self, credential_source):
        """Sets the credential_source of this AppleOsXScepPayloadEntity.

        Gets or sets the source of the credentials.  # noqa: E501

        :param credential_source: The credential_source of this AppleOsXScepPayloadEntity.  # noqa: E501
        :type: str
        """

        self._credential_source = credential_source

    @property
    def certificate_authority_id(self):
        """Gets the certificate_authority_id of this AppleOsXScepPayloadEntity.  # noqa: E501

        Gets or sets specifies the unique numeric identifier of the certificate authority.  # noqa: E501

        :return: The certificate_authority_id of this AppleOsXScepPayloadEntity.  # noqa: E501
        :rtype: int
        """
        return self._certificate_authority_id

    @certificate_authority_id.setter
    def certificate_authority_id(self, certificate_authority_id):
        """Sets the certificate_authority_id of this AppleOsXScepPayloadEntity.

        Gets or sets specifies the unique numeric identifier of the certificate authority.  # noqa: E501

        :param certificate_authority_id: The certificate_authority_id of this AppleOsXScepPayloadEntity.  # noqa: E501
        :type: int
        """

        self._certificate_authority_id = certificate_authority_id

    @property
    def certificate_template_id(self):
        """Gets the certificate_template_id of this AppleOsXScepPayloadEntity.  # noqa: E501

        Gets or sets specifies the numeric identifier of the certificate template.  # noqa: E501

        :return: The certificate_template_id of this AppleOsXScepPayloadEntity.  # noqa: E501
        :rtype: int
        """
        return self._certificate_template_id

    @certificate_template_id.setter
    def certificate_template_id(self, certificate_template_id):
        """Sets the certificate_template_id of this AppleOsXScepPayloadEntity.

        Gets or sets specifies the numeric identifier of the certificate template.  # noqa: E501

        :param certificate_template_id: The certificate_template_id of this AppleOsXScepPayloadEntity.  # noqa: E501
        :type: int
        """

        self._certificate_template_id = certificate_template_id

    @property
    def name(self):
        """Gets the name of this AppleOsXScepPayloadEntity.  # noqa: E501

        Gets or sets the name or description of the SCEP configuration.  # noqa: E501

        :return: The name of this AppleOsXScepPayloadEntity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppleOsXScepPayloadEntity.

        Gets or sets the name or description of the SCEP configuration.  # noqa: E501

        :param name: The name of this AppleOsXScepPayloadEntity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def allow_export_from_key_chain(self):
        """Gets the allow_export_from_key_chain of this AppleOsXScepPayloadEntity.  # noqa: E501

        Gets or sets a value indicating whether indicates if private key can be exported.  # noqa: E501

        :return: The allow_export_from_key_chain of this AppleOsXScepPayloadEntity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_export_from_key_chain

    @allow_export_from_key_chain.setter
    def allow_export_from_key_chain(self, allow_export_from_key_chain):
        """Sets the allow_export_from_key_chain of this AppleOsXScepPayloadEntity.

        Gets or sets a value indicating whether indicates if private key can be exported.  # noqa: E501

        :param allow_export_from_key_chain: The allow_export_from_key_chain of this AppleOsXScepPayloadEntity.  # noqa: E501
        :type: bool
        """

        self._allow_export_from_key_chain = allow_export_from_key_chain

    @property
    def identity_preference(self):
        """Gets the identity_preference of this AppleOsXScepPayloadEntity.  # noqa: E501

        Gets or sets identity Preference payload using this SCEP payoad.  # noqa: E501

        :return: The identity_preference of this AppleOsXScepPayloadEntity.  # noqa: E501
        :rtype: MacOsScepIdentityPreferencePayloadV2Model_
        """
        return self._identity_preference

    @identity_preference.setter
    def identity_preference(self, identity_preference):
        """Sets the identity_preference of this AppleOsXScepPayloadEntity.

        Gets or sets identity Preference payload using this SCEP payoad.  # noqa: E501

        :param identity_preference: The identity_preference of this AppleOsXScepPayloadEntity.  # noqa: E501
        :type: MacOsScepIdentityPreferencePayloadV2Model_
        """

        self._identity_preference = identity_preference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleOsXScepPayloadEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleOsXScepPayloadEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleOsXScepPayloadEntity):
            return True

        return self.to_dict() != other.to_dict()
