# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class SmartGroupsOperationsV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_groups': 'list[str]',
        'ownerships': 'list[int]',
        'platforms': 'list[int]',
        'tags': 'list[int]',
        'user_groups': 'list[str]',
        'users': 'list[str]',
        'devices': 'list[str]',
        'management_types': 'list[int]',
        'enrollment_categories': 'list[int]',
        'oem_and_models': 'list[OEMAndModels]',
        'cpu_architectures': 'list[str]'
    }

    attribute_map = {
        'organization_groups': 'organizationGroups',
        'ownerships': 'ownerships',
        'platforms': 'platforms',
        'tags': 'tags',
        'user_groups': 'userGroups',
        'users': 'users',
        'devices': 'devices',
        'management_types': 'managementTypes',
        'enrollment_categories': 'enrollmentCategories',
        'oem_and_models': 'OEMAndModels',
        'cpu_architectures': 'cpuArchitectures'
    }

    def __init__(self, organization_groups=None, ownerships=None, platforms=None, tags=None, user_groups=None, users=None, devices=None, management_types=None, enrollment_categories=None, oem_and_models=None, cpu_architectures=None, _configuration=None):  # noqa: E501
        """SmartGroupsOperationsV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._organization_groups = None
        self._ownerships = None
        self._platforms = None
        self._tags = None
        self._user_groups = None
        self._users = None
        self._devices = None
        self._management_types = None
        self._enrollment_categories = None
        self._oem_and_models = None
        self._cpu_architectures = None
        self.discriminator = None

        if organization_groups is not None:
            self.organization_groups = organization_groups
        if ownerships is not None:
            self.ownerships = ownerships
        if platforms is not None:
            self.platforms = platforms
        if tags is not None:
            self.tags = tags
        if user_groups is not None:
            self.user_groups = user_groups
        if users is not None:
            self.users = users
        if devices is not None:
            self.devices = devices
        if management_types is not None:
            self.management_types = management_types
        if enrollment_categories is not None:
            self.enrollment_categories = enrollment_categories
        if oem_and_models is not None:
            self.oem_and_models = oem_and_models
        if cpu_architectures is not None:
            self.cpu_architectures = cpu_architectures

    @property
    def organization_groups(self):
        """Gets the organization_groups of this SmartGroupsOperationsV2Model.  # noqa: E501

        List of organization groups added in Smart groups rule  # noqa: E501

        :return: The organization_groups of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._organization_groups

    @organization_groups.setter
    def organization_groups(self, organization_groups):
        """Sets the organization_groups of this SmartGroupsOperationsV2Model.

        List of organization groups added in Smart groups rule  # noqa: E501

        :param organization_groups: The organization_groups of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[str]
        """

        self._organization_groups = organization_groups

    @property
    def ownerships(self):
        """Gets the ownerships of this SmartGroupsOperationsV2Model.  # noqa: E501

        List of device ownerships added in Smart groups rule  # noqa: E501

        :return: The ownerships of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[int]
        """
        return self._ownerships

    @ownerships.setter
    def ownerships(self, ownerships):
        """Sets the ownerships of this SmartGroupsOperationsV2Model.

        List of device ownerships added in Smart groups rule  # noqa: E501

        :param ownerships: The ownerships of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(ownerships).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `ownerships` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ownerships) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ownerships = ownerships

    @property
    def platforms(self):
        """Gets the platforms of this SmartGroupsOperationsV2Model.  # noqa: E501

        List of platforms added in Smart groups rule  # noqa: E501

        :return: The platforms of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[int]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this SmartGroupsOperationsV2Model.

        List of platforms added in Smart groups rule  # noqa: E501

        :param platforms: The platforms of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(platforms).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `platforms` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(platforms) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._platforms = platforms

    @property
    def tags(self):
        """Gets the tags of this SmartGroupsOperationsV2Model.  # noqa: E501

        List of tags added in Smart groups rule  # noqa: E501

        :return: The tags of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[int]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SmartGroupsOperationsV2Model.

        List of tags added in Smart groups rule  # noqa: E501

        :param tags: The tags of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[int]
        """

        self._tags = tags

    @property
    def user_groups(self):
        """Gets the user_groups of this SmartGroupsOperationsV2Model.  # noqa: E501

        List of user groups added in Smart groups rule  # noqa: E501

        :return: The user_groups of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this SmartGroupsOperationsV2Model.

        List of user groups added in Smart groups rule  # noqa: E501

        :param user_groups: The user_groups of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[str]
        """

        self._user_groups = user_groups

    @property
    def users(self):
        """Gets the users of this SmartGroupsOperationsV2Model.  # noqa: E501

        List of users added in Smart groups rule  # noqa: E501

        :return: The users of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this SmartGroupsOperationsV2Model.

        List of users added in Smart groups rule  # noqa: E501

        :param users: The users of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    @property
    def devices(self):
        """Gets the devices of this SmartGroupsOperationsV2Model.  # noqa: E501

        List of devices added in Smart groups rule  # noqa: E501

        :return: The devices of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this SmartGroupsOperationsV2Model.

        List of devices added in Smart groups rule  # noqa: E501

        :param devices: The devices of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[str]
        """

        self._devices = devices

    @property
    def management_types(self):
        """Gets the management_types of this SmartGroupsOperationsV2Model.  # noqa: E501

        List of device management type added in Smart groups rule  # noqa: E501

        :return: The management_types of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[int]
        """
        return self._management_types

    @management_types.setter
    def management_types(self, management_types):
        """Sets the management_types of this SmartGroupsOperationsV2Model.

        List of device management type added in Smart groups rule  # noqa: E501

        :param management_types: The management_types of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(management_types).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `management_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(management_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._management_types = management_types

    @property
    def enrollment_categories(self):
        """Gets the enrollment_categories of this SmartGroupsOperationsV2Model.  # noqa: E501

        List of device enrollment category added in Smart groups rule  # noqa: E501

        :return: The enrollment_categories of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[int]
        """
        return self._enrollment_categories

    @enrollment_categories.setter
    def enrollment_categories(self, enrollment_categories):
        """Sets the enrollment_categories of this SmartGroupsOperationsV2Model.

        List of device enrollment category added in Smart groups rule  # noqa: E501

        :param enrollment_categories: The enrollment_categories of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(enrollment_categories).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `enrollment_categories` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(enrollment_categories) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._enrollment_categories = enrollment_categories

    @property
    def oem_and_models(self):
        """Gets the oem_and_models of this SmartGroupsOperationsV2Model.  # noqa: E501

        Contains list of device OEM and model criteria for smart group  # noqa: E501

        :return: The oem_and_models of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[OEMAndModels]
        """
        return self._oem_and_models

    @oem_and_models.setter
    def oem_and_models(self, oem_and_models):
        """Sets the oem_and_models of this SmartGroupsOperationsV2Model.

        Contains list of device OEM and model criteria for smart group  # noqa: E501

        :param oem_and_models: The oem_and_models of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[OEMAndModels]
        """

        self._oem_and_models = oem_and_models

    @property
    def cpu_architectures(self):
        """Gets the cpu_architectures of this SmartGroupsOperationsV2Model.  # noqa: E501

        Contains list of device CPU Architecture criteria for smart group  # noqa: E501

        :return: The cpu_architectures of this SmartGroupsOperationsV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._cpu_architectures

    @cpu_architectures.setter
    def cpu_architectures(self, cpu_architectures):
        """Sets the cpu_architectures of this SmartGroupsOperationsV2Model.

        Contains list of device CPU Architecture criteria for smart group  # noqa: E501

        :param cpu_architectures: The cpu_architectures of this SmartGroupsOperationsV2Model.  # noqa: E501
        :type: list[str]
        """

        self._cpu_architectures = cpu_architectures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartGroupsOperationsV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartGroupsOperationsV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SmartGroupsOperationsV2Model):
            return True

        return self.to_dict() != other.to_dict()
