# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkAppPasscodePayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_work_passcode_policy': 'bool',
        'afw_app_set_password_minimum_length': 'int',
        'afw_app_set_password_quality': 'int',
        'afw_app_set_password_history_length': 'int',
        'afw_app_passcode_change_alert': 'int',
        'afw_app_set_password_expiration_timeout': 'int',
        'afw_app_set_password_expiration_timeout_days': 'int',
        'afw_app_set_maximum_failed_passwords_for_wipe': 'int',
        'afw_app_set_maximum_time_to_lock': 'int',
        'afw_app_passcode_required_range': 'int',
        'afw_app_minimum_letters': 'int',
        'afw_app_minimum_lower_case': 'int',
        'afw_app_minimum_upper_case': 'int',
        'afw_app_minimum_non_letter': 'int',
        'afw_app_minimum_numeric': 'int',
        'afw_app_minimum_symbols': 'int',
        'allow_one_lock': 'bool',
        'allow_biometric_options': 'bool',
        'allow_fingerprint_sensor': 'bool',
        'allow_face_scanning': 'bool',
        'allow_iris_scanning': 'bool'
    }

    attribute_map = {
        'enable_work_passcode_policy': 'EnableWorkPasscodePolicy',
        'afw_app_set_password_minimum_length': 'AfwAppSetPasswordMinimumLength',
        'afw_app_set_password_quality': 'AfwAppSetPasswordQuality',
        'afw_app_set_password_history_length': 'AfwAppSetPasswordHistoryLength',
        'afw_app_passcode_change_alert': 'AfwAppPasscodeChangeAlert',
        'afw_app_set_password_expiration_timeout': 'AfwAppSetPasswordExpirationTimeout',
        'afw_app_set_password_expiration_timeout_days': 'AfwAppSetPasswordExpirationTimeoutDays',
        'afw_app_set_maximum_failed_passwords_for_wipe': 'AfwAppSetMaximumFailedPasswordsForWipe',
        'afw_app_set_maximum_time_to_lock': 'AfwAppSetMaximumTimeToLock',
        'afw_app_passcode_required_range': 'AfwAppPasscodeRequiredRange',
        'afw_app_minimum_letters': 'AfwAppMinimumLetters',
        'afw_app_minimum_lower_case': 'AfwAppMinimumLowerCase',
        'afw_app_minimum_upper_case': 'AfwAppMinimumUpperCase',
        'afw_app_minimum_non_letter': 'AfwAppMinimumNonLetter',
        'afw_app_minimum_numeric': 'AfwAppMinimumNumeric',
        'afw_app_minimum_symbols': 'AfwAppMinimumSymbols',
        'allow_one_lock': 'AllowOneLock',
        'allow_biometric_options': 'AllowBiometricOptions',
        'allow_fingerprint_sensor': 'AllowFingerprintSensor',
        'allow_face_scanning': 'AllowFaceScanning',
        'allow_iris_scanning': 'AllowIrisScanning'
    }

    def __init__(self, enable_work_passcode_policy=None, afw_app_set_password_minimum_length=None, afw_app_set_password_quality=None, afw_app_set_password_history_length=None, afw_app_passcode_change_alert=None, afw_app_set_password_expiration_timeout=None, afw_app_set_password_expiration_timeout_days=None, afw_app_set_maximum_failed_passwords_for_wipe=None, afw_app_set_maximum_time_to_lock=None, afw_app_passcode_required_range=None, afw_app_minimum_letters=None, afw_app_minimum_lower_case=None, afw_app_minimum_upper_case=None, afw_app_minimum_non_letter=None, afw_app_minimum_numeric=None, afw_app_minimum_symbols=None, allow_one_lock=None, allow_biometric_options=None, allow_fingerprint_sensor=None, allow_face_scanning=None, allow_iris_scanning=None, _configuration=None):  # noqa: E501
        """AndroidForWorkAppPasscodePayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enable_work_passcode_policy = None
        self._afw_app_set_password_minimum_length = None
        self._afw_app_set_password_quality = None
        self._afw_app_set_password_history_length = None
        self._afw_app_passcode_change_alert = None
        self._afw_app_set_password_expiration_timeout = None
        self._afw_app_set_password_expiration_timeout_days = None
        self._afw_app_set_maximum_failed_passwords_for_wipe = None
        self._afw_app_set_maximum_time_to_lock = None
        self._afw_app_passcode_required_range = None
        self._afw_app_minimum_letters = None
        self._afw_app_minimum_lower_case = None
        self._afw_app_minimum_upper_case = None
        self._afw_app_minimum_non_letter = None
        self._afw_app_minimum_numeric = None
        self._afw_app_minimum_symbols = None
        self._allow_one_lock = None
        self._allow_biometric_options = None
        self._allow_fingerprint_sensor = None
        self._allow_face_scanning = None
        self._allow_iris_scanning = None
        self.discriminator = None

        if enable_work_passcode_policy is not None:
            self.enable_work_passcode_policy = enable_work_passcode_policy
        if afw_app_set_password_minimum_length is not None:
            self.afw_app_set_password_minimum_length = afw_app_set_password_minimum_length
        if afw_app_set_password_quality is not None:
            self.afw_app_set_password_quality = afw_app_set_password_quality
        if afw_app_set_password_history_length is not None:
            self.afw_app_set_password_history_length = afw_app_set_password_history_length
        if afw_app_passcode_change_alert is not None:
            self.afw_app_passcode_change_alert = afw_app_passcode_change_alert
        if afw_app_set_password_expiration_timeout is not None:
            self.afw_app_set_password_expiration_timeout = afw_app_set_password_expiration_timeout
        if afw_app_set_password_expiration_timeout_days is not None:
            self.afw_app_set_password_expiration_timeout_days = afw_app_set_password_expiration_timeout_days
        if afw_app_set_maximum_failed_passwords_for_wipe is not None:
            self.afw_app_set_maximum_failed_passwords_for_wipe = afw_app_set_maximum_failed_passwords_for_wipe
        if afw_app_set_maximum_time_to_lock is not None:
            self.afw_app_set_maximum_time_to_lock = afw_app_set_maximum_time_to_lock
        if afw_app_passcode_required_range is not None:
            self.afw_app_passcode_required_range = afw_app_passcode_required_range
        if afw_app_minimum_letters is not None:
            self.afw_app_minimum_letters = afw_app_minimum_letters
        if afw_app_minimum_lower_case is not None:
            self.afw_app_minimum_lower_case = afw_app_minimum_lower_case
        if afw_app_minimum_upper_case is not None:
            self.afw_app_minimum_upper_case = afw_app_minimum_upper_case
        if afw_app_minimum_non_letter is not None:
            self.afw_app_minimum_non_letter = afw_app_minimum_non_letter
        if afw_app_minimum_numeric is not None:
            self.afw_app_minimum_numeric = afw_app_minimum_numeric
        if afw_app_minimum_symbols is not None:
            self.afw_app_minimum_symbols = afw_app_minimum_symbols
        if allow_one_lock is not None:
            self.allow_one_lock = allow_one_lock
        if allow_biometric_options is not None:
            self.allow_biometric_options = allow_biometric_options
        if allow_fingerprint_sensor is not None:
            self.allow_fingerprint_sensor = allow_fingerprint_sensor
        if allow_face_scanning is not None:
            self.allow_face_scanning = allow_face_scanning
        if allow_iris_scanning is not None:
            self.allow_iris_scanning = allow_iris_scanning

    @property
    def enable_work_passcode_policy(self):
        """Gets the enable_work_passcode_policy of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether enable work passcode policy.  # noqa: E501

        :return: The enable_work_passcode_policy of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_work_passcode_policy

    @enable_work_passcode_policy.setter
    def enable_work_passcode_policy(self, enable_work_passcode_policy):
        """Sets the enable_work_passcode_policy of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets a value indicating whether enable work passcode policy.  # noqa: E501

        :param enable_work_passcode_policy: The enable_work_passcode_policy of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._enable_work_passcode_policy = enable_work_passcode_policy

    @property
    def afw_app_set_password_minimum_length(self):
        """Gets the afw_app_set_password_minimum_length of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app set password minimum length.  # noqa: E501

        :return: The afw_app_set_password_minimum_length of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_set_password_minimum_length

    @afw_app_set_password_minimum_length.setter
    def afw_app_set_password_minimum_length(self, afw_app_set_password_minimum_length):
        """Sets the afw_app_set_password_minimum_length of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app set password minimum length.  # noqa: E501

        :param afw_app_set_password_minimum_length: The afw_app_set_password_minimum_length of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_set_password_minimum_length = afw_app_set_password_minimum_length

    @property
    def afw_app_set_password_quality(self):
        """Gets the afw_app_set_password_quality of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app set password quality.  # noqa: E501

        :return: The afw_app_set_password_quality of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_set_password_quality

    @afw_app_set_password_quality.setter
    def afw_app_set_password_quality(self, afw_app_set_password_quality):
        """Sets the afw_app_set_password_quality of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app set password quality.  # noqa: E501

        :param afw_app_set_password_quality: The afw_app_set_password_quality of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_set_password_quality = afw_app_set_password_quality

    @property
    def afw_app_set_password_history_length(self):
        """Gets the afw_app_set_password_history_length of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app set password history length.  # noqa: E501

        :return: The afw_app_set_password_history_length of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_set_password_history_length

    @afw_app_set_password_history_length.setter
    def afw_app_set_password_history_length(self, afw_app_set_password_history_length):
        """Sets the afw_app_set_password_history_length of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app set password history length.  # noqa: E501

        :param afw_app_set_password_history_length: The afw_app_set_password_history_length of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_set_password_history_length = afw_app_set_password_history_length

    @property
    def afw_app_passcode_change_alert(self):
        """Gets the afw_app_passcode_change_alert of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the Passcode change alert.  # noqa: E501

        :return: The afw_app_passcode_change_alert of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_passcode_change_alert

    @afw_app_passcode_change_alert.setter
    def afw_app_passcode_change_alert(self, afw_app_passcode_change_alert):
        """Sets the afw_app_passcode_change_alert of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the Passcode change alert.  # noqa: E501

        :param afw_app_passcode_change_alert: The afw_app_passcode_change_alert of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_passcode_change_alert = afw_app_passcode_change_alert

    @property
    def afw_app_set_password_expiration_timeout(self):
        """Gets the afw_app_set_password_expiration_timeout of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app set password expiration timeout.  # noqa: E501

        :return: The afw_app_set_password_expiration_timeout of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_set_password_expiration_timeout

    @afw_app_set_password_expiration_timeout.setter
    def afw_app_set_password_expiration_timeout(self, afw_app_set_password_expiration_timeout):
        """Sets the afw_app_set_password_expiration_timeout of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app set password expiration timeout.  # noqa: E501

        :param afw_app_set_password_expiration_timeout: The afw_app_set_password_expiration_timeout of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_set_password_expiration_timeout = afw_app_set_password_expiration_timeout

    @property
    def afw_app_set_password_expiration_timeout_days(self):
        """Gets the afw_app_set_password_expiration_timeout_days of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app set password expiration timeout in days.  # noqa: E501

        :return: The afw_app_set_password_expiration_timeout_days of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_set_password_expiration_timeout_days

    @afw_app_set_password_expiration_timeout_days.setter
    def afw_app_set_password_expiration_timeout_days(self, afw_app_set_password_expiration_timeout_days):
        """Sets the afw_app_set_password_expiration_timeout_days of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app set password expiration timeout in days.  # noqa: E501

        :param afw_app_set_password_expiration_timeout_days: The afw_app_set_password_expiration_timeout_days of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_set_password_expiration_timeout_days = afw_app_set_password_expiration_timeout_days

    @property
    def afw_app_set_maximum_failed_passwords_for_wipe(self):
        """Gets the afw_app_set_maximum_failed_passwords_for_wipe of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the set maximum failed passwords for wipe.  # noqa: E501

        :return: The afw_app_set_maximum_failed_passwords_for_wipe of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_set_maximum_failed_passwords_for_wipe

    @afw_app_set_maximum_failed_passwords_for_wipe.setter
    def afw_app_set_maximum_failed_passwords_for_wipe(self, afw_app_set_maximum_failed_passwords_for_wipe):
        """Sets the afw_app_set_maximum_failed_passwords_for_wipe of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the set maximum failed passwords for wipe.  # noqa: E501

        :param afw_app_set_maximum_failed_passwords_for_wipe: The afw_app_set_maximum_failed_passwords_for_wipe of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_set_maximum_failed_passwords_for_wipe = afw_app_set_maximum_failed_passwords_for_wipe

    @property
    def afw_app_set_maximum_time_to_lock(self):
        """Gets the afw_app_set_maximum_time_to_lock of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app set maximum time to lock.  # noqa: E501

        :return: The afw_app_set_maximum_time_to_lock of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_set_maximum_time_to_lock

    @afw_app_set_maximum_time_to_lock.setter
    def afw_app_set_maximum_time_to_lock(self, afw_app_set_maximum_time_to_lock):
        """Sets the afw_app_set_maximum_time_to_lock of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app set maximum time to lock.  # noqa: E501

        :param afw_app_set_maximum_time_to_lock: The afw_app_set_maximum_time_to_lock of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_set_maximum_time_to_lock = afw_app_set_maximum_time_to_lock

    @property
    def afw_app_passcode_required_range(self):
        """Gets the afw_app_passcode_required_range of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or Sets the passcode required time in mins before the strong passcode is required.  # noqa: E501

        :return: The afw_app_passcode_required_range of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_passcode_required_range

    @afw_app_passcode_required_range.setter
    def afw_app_passcode_required_range(self, afw_app_passcode_required_range):
        """Sets the afw_app_passcode_required_range of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or Sets the passcode required time in mins before the strong passcode is required.  # noqa: E501

        :param afw_app_passcode_required_range: The afw_app_passcode_required_range of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_passcode_required_range = afw_app_passcode_required_range

    @property
    def afw_app_minimum_letters(self):
        """Gets the afw_app_minimum_letters of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app minimum letters.  # noqa: E501

        :return: The afw_app_minimum_letters of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_minimum_letters

    @afw_app_minimum_letters.setter
    def afw_app_minimum_letters(self, afw_app_minimum_letters):
        """Sets the afw_app_minimum_letters of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app minimum letters.  # noqa: E501

        :param afw_app_minimum_letters: The afw_app_minimum_letters of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_minimum_letters = afw_app_minimum_letters

    @property
    def afw_app_minimum_lower_case(self):
        """Gets the afw_app_minimum_lower_case of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app minimum lower case.  # noqa: E501

        :return: The afw_app_minimum_lower_case of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_minimum_lower_case

    @afw_app_minimum_lower_case.setter
    def afw_app_minimum_lower_case(self, afw_app_minimum_lower_case):
        """Sets the afw_app_minimum_lower_case of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app minimum lower case.  # noqa: E501

        :param afw_app_minimum_lower_case: The afw_app_minimum_lower_case of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_minimum_lower_case = afw_app_minimum_lower_case

    @property
    def afw_app_minimum_upper_case(self):
        """Gets the afw_app_minimum_upper_case of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app minimum upper case.  # noqa: E501

        :return: The afw_app_minimum_upper_case of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_minimum_upper_case

    @afw_app_minimum_upper_case.setter
    def afw_app_minimum_upper_case(self, afw_app_minimum_upper_case):
        """Sets the afw_app_minimum_upper_case of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app minimum upper case.  # noqa: E501

        :param afw_app_minimum_upper_case: The afw_app_minimum_upper_case of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_minimum_upper_case = afw_app_minimum_upper_case

    @property
    def afw_app_minimum_non_letter(self):
        """Gets the afw_app_minimum_non_letter of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app minimum non letter.  # noqa: E501

        :return: The afw_app_minimum_non_letter of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_minimum_non_letter

    @afw_app_minimum_non_letter.setter
    def afw_app_minimum_non_letter(self, afw_app_minimum_non_letter):
        """Sets the afw_app_minimum_non_letter of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app minimum non letter.  # noqa: E501

        :param afw_app_minimum_non_letter: The afw_app_minimum_non_letter of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_minimum_non_letter = afw_app_minimum_non_letter

    @property
    def afw_app_minimum_numeric(self):
        """Gets the afw_app_minimum_numeric of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app minimum numeric.  # noqa: E501

        :return: The afw_app_minimum_numeric of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_minimum_numeric

    @afw_app_minimum_numeric.setter
    def afw_app_minimum_numeric(self, afw_app_minimum_numeric):
        """Sets the afw_app_minimum_numeric of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app minimum numeric.  # noqa: E501

        :param afw_app_minimum_numeric: The afw_app_minimum_numeric of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_minimum_numeric = afw_app_minimum_numeric

    @property
    def afw_app_minimum_symbols(self):
        """Gets the afw_app_minimum_symbols of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets the afw app minimum symbols.  # noqa: E501

        :return: The afw_app_minimum_symbols of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._afw_app_minimum_symbols

    @afw_app_minimum_symbols.setter
    def afw_app_minimum_symbols(self, afw_app_minimum_symbols):
        """Sets the afw_app_minimum_symbols of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets the afw app minimum symbols.  # noqa: E501

        :param afw_app_minimum_symbols: The afw_app_minimum_symbols of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._afw_app_minimum_symbols = afw_app_minimum_symbols

    @property
    def allow_one_lock(self):
        """Gets the allow_one_lock of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets OneLock.  # noqa: E501

        :return: The allow_one_lock of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_one_lock

    @allow_one_lock.setter
    def allow_one_lock(self, allow_one_lock):
        """Sets the allow_one_lock of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets OneLock.  # noqa: E501

        :param allow_one_lock: The allow_one_lock of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_one_lock = allow_one_lock

    @property
    def allow_biometric_options(self):
        """Gets the allow_biometric_options of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets Biometric Options.  # noqa: E501

        :return: The allow_biometric_options of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_biometric_options

    @allow_biometric_options.setter
    def allow_biometric_options(self, allow_biometric_options):
        """Sets the allow_biometric_options of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets Biometric Options.  # noqa: E501

        :param allow_biometric_options: The allow_biometric_options of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_biometric_options = allow_biometric_options

    @property
    def allow_fingerprint_sensor(self):
        """Gets the allow_fingerprint_sensor of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets finger print sensor.  # noqa: E501

        :return: The allow_fingerprint_sensor of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_fingerprint_sensor

    @allow_fingerprint_sensor.setter
    def allow_fingerprint_sensor(self, allow_fingerprint_sensor):
        """Sets the allow_fingerprint_sensor of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets finger print sensor.  # noqa: E501

        :param allow_fingerprint_sensor: The allow_fingerprint_sensor of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_fingerprint_sensor = allow_fingerprint_sensor

    @property
    def allow_face_scanning(self):
        """Gets the allow_face_scanning of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets face scanning options.  # noqa: E501

        :return: The allow_face_scanning of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_face_scanning

    @allow_face_scanning.setter
    def allow_face_scanning(self, allow_face_scanning):
        """Sets the allow_face_scanning of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets face scanning options.  # noqa: E501

        :param allow_face_scanning: The allow_face_scanning of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_face_scanning = allow_face_scanning

    @property
    def allow_iris_scanning(self):
        """Gets the allow_iris_scanning of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501

        Gets or sets Iris scanning.  # noqa: E501

        :return: The allow_iris_scanning of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._allow_iris_scanning

    @allow_iris_scanning.setter
    def allow_iris_scanning(self, allow_iris_scanning):
        """Sets the allow_iris_scanning of this AndroidForWorkAppPasscodePayloadV2Entity.

        Gets or sets Iris scanning.  # noqa: E501

        :param allow_iris_scanning: The allow_iris_scanning of this AndroidForWorkAppPasscodePayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._allow_iris_scanning = allow_iris_scanning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkAppPasscodePayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkAppPasscodePayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkAppPasscodePayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
