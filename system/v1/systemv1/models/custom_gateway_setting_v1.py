# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class CustomGatewaySettingV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_gateway_setting_id': 'int',
        'custom_gateway_setting_uuid': 'str',
        'key': 'str',
        'value_type': 'str',
        'value': 'str',
        'module': 'str',
        'gateway_configuration_id': 'int'
    }

    attribute_map = {
        'custom_gateway_setting_id': 'CustomGatewaySettingID',
        'custom_gateway_setting_uuid': 'CustomGatewaySettingUUID',
        'key': 'Key',
        'value_type': 'ValueType',
        'value': 'Value',
        'module': 'Module',
        'gateway_configuration_id': 'GatewayConfigurationID'
    }

    def __init__(self, custom_gateway_setting_id=None, custom_gateway_setting_uuid=None, key=None, value_type=None, value=None, module=None, gateway_configuration_id=None, _configuration=None):  # noqa: E501
        """CustomGatewaySettingV1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_gateway_setting_id = None
        self._custom_gateway_setting_uuid = None
        self._key = None
        self._value_type = None
        self._value = None
        self._module = None
        self._gateway_configuration_id = None
        self.discriminator = None

        if custom_gateway_setting_id is not None:
            self.custom_gateway_setting_id = custom_gateway_setting_id
        if custom_gateway_setting_uuid is not None:
            self.custom_gateway_setting_uuid = custom_gateway_setting_uuid
        self.key = key
        self.value_type = value_type
        self.value = value
        self.module = module
        if gateway_configuration_id is not None:
            self.gateway_configuration_id = gateway_configuration_id

    @property
    def custom_gateway_setting_id(self):
        """Gets the custom_gateway_setting_id of this CustomGatewaySettingV1.  # noqa: E501

        Custom Gateway settings ID  # noqa: E501

        :return: The custom_gateway_setting_id of this CustomGatewaySettingV1.  # noqa: E501
        :rtype: int
        """
        return self._custom_gateway_setting_id

    @custom_gateway_setting_id.setter
    def custom_gateway_setting_id(self, custom_gateway_setting_id):
        """Sets the custom_gateway_setting_id of this CustomGatewaySettingV1.

        Custom Gateway settings ID  # noqa: E501

        :param custom_gateway_setting_id: The custom_gateway_setting_id of this CustomGatewaySettingV1.  # noqa: E501
        :type: int
        """

        self._custom_gateway_setting_id = custom_gateway_setting_id

    @property
    def custom_gateway_setting_uuid(self):
        """Gets the custom_gateway_setting_uuid of this CustomGatewaySettingV1.  # noqa: E501

        Custom Gateway Settings unique Identifier  # noqa: E501

        :return: The custom_gateway_setting_uuid of this CustomGatewaySettingV1.  # noqa: E501
        :rtype: str
        """
        return self._custom_gateway_setting_uuid

    @custom_gateway_setting_uuid.setter
    def custom_gateway_setting_uuid(self, custom_gateway_setting_uuid):
        """Sets the custom_gateway_setting_uuid of this CustomGatewaySettingV1.

        Custom Gateway Settings unique Identifier  # noqa: E501

        :param custom_gateway_setting_uuid: The custom_gateway_setting_uuid of this CustomGatewaySettingV1.  # noqa: E501
        :type: str
        """

        self._custom_gateway_setting_uuid = custom_gateway_setting_uuid

    @property
    def key(self):
        """Gets the key of this CustomGatewaySettingV1.  # noqa: E501

        Custom Gateway Settings Key  # noqa: E501

        :return: The key of this CustomGatewaySettingV1.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CustomGatewaySettingV1.

        Custom Gateway Settings Key  # noqa: E501

        :param key: The key of this CustomGatewaySettingV1.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def value_type(self):
        """Gets the value_type of this CustomGatewaySettingV1.  # noqa: E501

        Data type of the value  # noqa: E501

        :return: The value_type of this CustomGatewaySettingV1.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this CustomGatewaySettingV1.

        Data type of the value  # noqa: E501

        :param value_type: The value_type of this CustomGatewaySettingV1.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value_type is None:
            raise ValueError("Invalid value for `value_type`, must not be `None`")  # noqa: E501
        allowed_values = ["INTEGER", "DECIMAL", "BOOLEAN", "NULL_VALUE", "STRING", "URL", "IP_ADDRESS", "PORT", "HOST_NAME"]  # noqa: E501
        if (self._configuration.client_side_validation and
                value_type not in allowed_values):
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"  # noqa: E501
                .format(value_type, allowed_values)
            )

        self._value_type = value_type

    @property
    def value(self):
        """Gets the value of this CustomGatewaySettingV1.  # noqa: E501

        Custom Gateway Settings value  # noqa: E501

        :return: The value of this CustomGatewaySettingV1.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomGatewaySettingV1.

        Custom Gateway Settings value  # noqa: E501

        :param value: The value of this CustomGatewaySettingV1.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def module(self):
        """Gets the module of this CustomGatewaySettingV1.  # noqa: E501

        Gateway module  # noqa: E501

        :return: The module of this CustomGatewaySettingV1.  # noqa: E501
        :rtype: str
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this CustomGatewaySettingV1.

        Gateway module  # noqa: E501

        :param module: The module of this CustomGatewaySettingV1.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and module is None:
            raise ValueError("Invalid value for `module`, must not be `None`")  # noqa: E501
        allowed_values = ["CONTENT_GATEWAY", "TUNNEL", "MEM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                module not in allowed_values):
            raise ValueError(
                "Invalid value for `module` ({0}), must be one of {1}"  # noqa: E501
                .format(module, allowed_values)
            )

        self._module = module

    @property
    def gateway_configuration_id(self):
        """Gets the gateway_configuration_id of this CustomGatewaySettingV1.  # noqa: E501

        Gateway configuration id  # noqa: E501

        :return: The gateway_configuration_id of this CustomGatewaySettingV1.  # noqa: E501
        :rtype: int
        """
        return self._gateway_configuration_id

    @gateway_configuration_id.setter
    def gateway_configuration_id(self, gateway_configuration_id):
        """Sets the gateway_configuration_id of this CustomGatewaySettingV1.

        Gateway configuration id  # noqa: E501

        :param gateway_configuration_id: The gateway_configuration_id of this CustomGatewaySettingV1.  # noqa: E501
        :type: int
        """

        self._gateway_configuration_id = gateway_configuration_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomGatewaySettingV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomGatewaySettingV1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomGatewaySettingV1):
            return True

        return self.to_dict() != other.to_dict()
