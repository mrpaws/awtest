# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeploymentV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'smart_group_count': 'int',
        'name': 'str',
        'uuid': 'str',
        'deployment_start_time': 'datetime',
        'deployment_type': 'str',
        'ranking': 'int'
    }

    attribute_map = {
        'smart_group_count': 'smart_group_count',
        'name': 'name',
        'uuid': 'uuid',
        'deployment_start_time': 'deployment_start_time',
        'deployment_type': 'deployment_type',
        'ranking': 'ranking'
    }

    def __init__(self, smart_group_count=None, name=None, uuid=None, deployment_start_time=None, deployment_type=None, ranking=None, _configuration=None):  # noqa: E501
        """DeploymentV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._smart_group_count = None
        self._name = None
        self._uuid = None
        self._deployment_start_time = None
        self._deployment_type = None
        self._ranking = None
        self.discriminator = None

        if smart_group_count is not None:
            self.smart_group_count = smart_group_count
        if name is not None:
            self.name = name
        if uuid is not None:
            self.uuid = uuid
        if deployment_start_time is not None:
            self.deployment_start_time = deployment_start_time
        if deployment_type is not None:
            self.deployment_type = deployment_type
        if ranking is not None:
            self.ranking = ranking

    @property
    def smart_group_count(self):
        """Gets the smart_group_count of this DeploymentV1Model.  # noqa: E501

        The total count of smart groups associated with the deployment.  # noqa: E501

        :return: The smart_group_count of this DeploymentV1Model.  # noqa: E501
        :rtype: int
        """
        return self._smart_group_count

    @smart_group_count.setter
    def smart_group_count(self, smart_group_count):
        """Sets the smart_group_count of this DeploymentV1Model.

        The total count of smart groups associated with the deployment.  # noqa: E501

        :param smart_group_count: The smart_group_count of this DeploymentV1Model.  # noqa: E501
        :type: int
        """

        self._smart_group_count = smart_group_count

    @property
    def name(self):
        """Gets the name of this DeploymentV1Model.  # noqa: E501

        The name of the deployment  # noqa: E501

        :return: The name of this DeploymentV1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentV1Model.

        The name of the deployment  # noqa: E501

        :param name: The name of this DeploymentV1Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this DeploymentV1Model.  # noqa: E501

        Deployment UUID  # noqa: E501

        :return: The uuid of this DeploymentV1Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeploymentV1Model.

        Deployment UUID  # noqa: E501

        :param uuid: The uuid of this DeploymentV1Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def deployment_start_time(self):
        """Gets the deployment_start_time of this DeploymentV1Model.  # noqa: E501

        The deployment start time.  # noqa: E501

        :return: The deployment_start_time of this DeploymentV1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._deployment_start_time

    @deployment_start_time.setter
    def deployment_start_time(self, deployment_start_time):
        """Sets the deployment_start_time of this DeploymentV1Model.

        The deployment start time.  # noqa: E501

        :param deployment_start_time: The deployment_start_time of this DeploymentV1Model.  # noqa: E501
        :type: datetime
        """

        self._deployment_start_time = deployment_start_time

    @property
    def deployment_type(self):
        """Gets the deployment_type of this DeploymentV1Model.  # noqa: E501

        The deployment type.  # noqa: E501

        :return: The deployment_type of this DeploymentV1Model.  # noqa: E501
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this DeploymentV1Model.

        The deployment type.  # noqa: E501

        :param deployment_type: The deployment_type of this DeploymentV1Model.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "DOWNLOAD_AND_INSTALL", "DOWNLOAD_ONLY", "INSTALL_ONLY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                deployment_type not in allowed_values):
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    @property
    def ranking(self):
        """Gets the ranking of this DeploymentV1Model.  # noqa: E501

        Ranking of the deployment. 1 specifies highest ranking.  # noqa: E501

        :return: The ranking of this DeploymentV1Model.  # noqa: E501
        :rtype: int
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this DeploymentV1Model.

        Ranking of the deployment. 1 specifies highest ranking.  # noqa: E501

        :param ranking: The ranking of this DeploymentV1Model.  # noqa: E501
        :type: int
        """

        self._ranking = ranking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymentV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymentV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeploymentV1Model):
            return True

        return self.to_dict() != other.to_dict()
