# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DeviceCustomAttributeChange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'friendly_name': 'str',
        'custom_attribute_changes': 'list[CustomAttributeChange]'
    }

    attribute_map = {
        'device_id': 'DeviceID',
        'friendly_name': 'FriendlyName',
        'custom_attribute_changes': 'CustomAttributeChanges'
    }

    def __init__(self, device_id=None, friendly_name=None, custom_attribute_changes=None, _configuration=None):  # noqa: E501
        """DeviceCustomAttributeChange - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_id = None
        self._friendly_name = None
        self._custom_attribute_changes = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if custom_attribute_changes is not None:
            self.custom_attribute_changes = custom_attribute_changes

    @property
    def device_id(self):
        """Gets the device_id of this DeviceCustomAttributeChange.  # noqa: E501

        Gets or sets device Id.  # noqa: E501

        :return: The device_id of this DeviceCustomAttributeChange.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceCustomAttributeChange.

        Gets or sets device Id.  # noqa: E501

        :param device_id: The device_id of this DeviceCustomAttributeChange.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DeviceCustomAttributeChange.  # noqa: E501

        Gets or sets friendlyName.  # noqa: E501

        :return: The friendly_name of this DeviceCustomAttributeChange.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DeviceCustomAttributeChange.

        Gets or sets friendlyName.  # noqa: E501

        :param friendly_name: The friendly_name of this DeviceCustomAttributeChange.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def custom_attribute_changes(self):
        """Gets the custom_attribute_changes of this DeviceCustomAttributeChange.  # noqa: E501

        Gets or sets list of Custom Attributes mapped to the Enrollment Token.  # noqa: E501

        :return: The custom_attribute_changes of this DeviceCustomAttributeChange.  # noqa: E501
        :rtype: list[CustomAttributeChange]
        """
        return self._custom_attribute_changes

    @custom_attribute_changes.setter
    def custom_attribute_changes(self, custom_attribute_changes):
        """Sets the custom_attribute_changes of this DeviceCustomAttributeChange.

        Gets or sets list of Custom Attributes mapped to the Enrollment Token.  # noqa: E501

        :param custom_attribute_changes: The custom_attribute_changes of this DeviceCustomAttributeChange.  # noqa: E501
        :type: list[CustomAttributeChange]
        """

        self._custom_attribute_changes = custom_attribute_changes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCustomAttributeChange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCustomAttributeChange):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCustomAttributeChange):
            return True

        return self.to_dict() != other.to_dict()
