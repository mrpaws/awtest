# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleEASAWMailClientPayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exchange_active_sync_host': 'str',
        'ignore_ssl_errors': 'bool',
        'use_smime': 'bool',
        'smime_certificate': 'str',
        'smime_encryption_certificate': 'str',
        'domain': 'str',
        'user': 'str',
        'email_address': 'str',
        'password': 'str',
        'payload_certificate': 'str',
        'enable_email': 'bool',
        'enable_calendar': 'bool',
        'enable_contacts': 'bool',
        'sync_interval': 'int',
        'email_notifications': 'int',
        'past_days_of_mail_to_sync': 'int',
        'past_days_of_calendar_to_sync': 'int',
        'email_size_in_kilobytes_default_is_unlimited': 'int',
        'enable_html_email': 'bool',
        'email_signature': 'str',
        'enable_signature_editing': 'bool',
        'require_passcode': 'bool',
        'type': 'int',
        'complexity': 'int',
        'allow_simple_passcode': 'bool',
        'minimum_length': 'int',
        'minimum_number_of_complex_characters': 'int',
        'maximum_age_days': 'int',
        'auto_lock': 'bool',
        'history': 'int',
        'grace_period': 'int',
        'maximum_number_of_failed_attempts': 'int',
        'disabe_copy_paste': 'bool',
        'disable_attachments': 'bool',
        'maximum_attachment_size_mb': 'int',
        'open_all_links_in_air_watch_browser': 'bool',
        'scl_only_attachments': 'bool',
        'restrict_attachments_to_be_opened_in_following_apps': 'bool',
        'applications': 'list[str]',
        'allow_printing': 'bool'
    }

    attribute_map = {
        'exchange_active_sync_host': 'ExchangeActiveSyncHost',
        'ignore_ssl_errors': 'IgnoreSSLErrors',
        'use_smime': 'UseSMIME',
        'smime_certificate': 'SMIMECertificate',
        'smime_encryption_certificate': 'SmimeEncryptionCertificate',
        'domain': 'Domain',
        'user': 'User',
        'email_address': 'EmailAddress',
        'password': 'Password',
        'payload_certificate': 'PayloadCertificate',
        'enable_email': 'EnableEmail',
        'enable_calendar': 'EnableCalendar',
        'enable_contacts': 'EnableContacts',
        'sync_interval': 'SyncInterval',
        'email_notifications': 'EmailNotifications',
        'past_days_of_mail_to_sync': 'PastDaysOfMailToSync',
        'past_days_of_calendar_to_sync': 'PastDaysOfCalendarToSync',
        'email_size_in_kilobytes_default_is_unlimited': 'EmailSizeInKilobytesDefaultIsUnlimited',
        'enable_html_email': 'EnableHtmlEmail',
        'email_signature': 'EmailSignature',
        'enable_signature_editing': 'EnableSignatureEditing',
        'require_passcode': 'RequirePasscode',
        'type': 'Type',
        'complexity': 'Complexity',
        'allow_simple_passcode': 'AllowSimplePasscode',
        'minimum_length': 'MinimumLength',
        'minimum_number_of_complex_characters': 'MinimumNumberOfComplexCharacters',
        'maximum_age_days': 'MaximumAgeDays',
        'auto_lock': 'AutoLock',
        'history': 'History',
        'grace_period': 'GracePeriod',
        'maximum_number_of_failed_attempts': 'MaximumNumberOfFailedAttempts',
        'disabe_copy_paste': 'DisabeCopyPaste',
        'disable_attachments': 'DisableAttachments',
        'maximum_attachment_size_mb': 'MaximumAttachmentSizeMB',
        'open_all_links_in_air_watch_browser': 'OpenAllLinksInAirWatchBrowser',
        'scl_only_attachments': 'SCLOnlyAttachments',
        'restrict_attachments_to_be_opened_in_following_apps': 'RestrictAttachmentsToBeOpenedInFollowingApps',
        'applications': 'Applications',
        'allow_printing': 'AllowPrinting'
    }

    def __init__(self, exchange_active_sync_host=None, ignore_ssl_errors=None, use_smime=None, smime_certificate=None, smime_encryption_certificate=None, domain=None, user=None, email_address=None, password=None, payload_certificate=None, enable_email=None, enable_calendar=None, enable_contacts=None, sync_interval=None, email_notifications=None, past_days_of_mail_to_sync=None, past_days_of_calendar_to_sync=None, email_size_in_kilobytes_default_is_unlimited=None, enable_html_email=None, email_signature=None, enable_signature_editing=None, require_passcode=None, type=None, complexity=None, allow_simple_passcode=None, minimum_length=None, minimum_number_of_complex_characters=None, maximum_age_days=None, auto_lock=None, history=None, grace_period=None, maximum_number_of_failed_attempts=None, disabe_copy_paste=None, disable_attachments=None, maximum_attachment_size_mb=None, open_all_links_in_air_watch_browser=None, scl_only_attachments=None, restrict_attachments_to_be_opened_in_following_apps=None, applications=None, allow_printing=None, _configuration=None):  # noqa: E501
        """AppleEASAWMailClientPayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._exchange_active_sync_host = None
        self._ignore_ssl_errors = None
        self._use_smime = None
        self._smime_certificate = None
        self._smime_encryption_certificate = None
        self._domain = None
        self._user = None
        self._email_address = None
        self._password = None
        self._payload_certificate = None
        self._enable_email = None
        self._enable_calendar = None
        self._enable_contacts = None
        self._sync_interval = None
        self._email_notifications = None
        self._past_days_of_mail_to_sync = None
        self._past_days_of_calendar_to_sync = None
        self._email_size_in_kilobytes_default_is_unlimited = None
        self._enable_html_email = None
        self._email_signature = None
        self._enable_signature_editing = None
        self._require_passcode = None
        self._type = None
        self._complexity = None
        self._allow_simple_passcode = None
        self._minimum_length = None
        self._minimum_number_of_complex_characters = None
        self._maximum_age_days = None
        self._auto_lock = None
        self._history = None
        self._grace_period = None
        self._maximum_number_of_failed_attempts = None
        self._disabe_copy_paste = None
        self._disable_attachments = None
        self._maximum_attachment_size_mb = None
        self._open_all_links_in_air_watch_browser = None
        self._scl_only_attachments = None
        self._restrict_attachments_to_be_opened_in_following_apps = None
        self._applications = None
        self._allow_printing = None
        self.discriminator = None

        if exchange_active_sync_host is not None:
            self.exchange_active_sync_host = exchange_active_sync_host
        if ignore_ssl_errors is not None:
            self.ignore_ssl_errors = ignore_ssl_errors
        if use_smime is not None:
            self.use_smime = use_smime
        if smime_certificate is not None:
            self.smime_certificate = smime_certificate
        if smime_encryption_certificate is not None:
            self.smime_encryption_certificate = smime_encryption_certificate
        if domain is not None:
            self.domain = domain
        if user is not None:
            self.user = user
        if email_address is not None:
            self.email_address = email_address
        if password is not None:
            self.password = password
        if payload_certificate is not None:
            self.payload_certificate = payload_certificate
        if enable_email is not None:
            self.enable_email = enable_email
        if enable_calendar is not None:
            self.enable_calendar = enable_calendar
        if enable_contacts is not None:
            self.enable_contacts = enable_contacts
        if sync_interval is not None:
            self.sync_interval = sync_interval
        if email_notifications is not None:
            self.email_notifications = email_notifications
        if past_days_of_mail_to_sync is not None:
            self.past_days_of_mail_to_sync = past_days_of_mail_to_sync
        if past_days_of_calendar_to_sync is not None:
            self.past_days_of_calendar_to_sync = past_days_of_calendar_to_sync
        if email_size_in_kilobytes_default_is_unlimited is not None:
            self.email_size_in_kilobytes_default_is_unlimited = email_size_in_kilobytes_default_is_unlimited
        if enable_html_email is not None:
            self.enable_html_email = enable_html_email
        if email_signature is not None:
            self.email_signature = email_signature
        if enable_signature_editing is not None:
            self.enable_signature_editing = enable_signature_editing
        if require_passcode is not None:
            self.require_passcode = require_passcode
        if type is not None:
            self.type = type
        if complexity is not None:
            self.complexity = complexity
        if allow_simple_passcode is not None:
            self.allow_simple_passcode = allow_simple_passcode
        if minimum_length is not None:
            self.minimum_length = minimum_length
        if minimum_number_of_complex_characters is not None:
            self.minimum_number_of_complex_characters = minimum_number_of_complex_characters
        if maximum_age_days is not None:
            self.maximum_age_days = maximum_age_days
        if auto_lock is not None:
            self.auto_lock = auto_lock
        if history is not None:
            self.history = history
        if grace_period is not None:
            self.grace_period = grace_period
        if maximum_number_of_failed_attempts is not None:
            self.maximum_number_of_failed_attempts = maximum_number_of_failed_attempts
        if disabe_copy_paste is not None:
            self.disabe_copy_paste = disabe_copy_paste
        if disable_attachments is not None:
            self.disable_attachments = disable_attachments
        if maximum_attachment_size_mb is not None:
            self.maximum_attachment_size_mb = maximum_attachment_size_mb
        if open_all_links_in_air_watch_browser is not None:
            self.open_all_links_in_air_watch_browser = open_all_links_in_air_watch_browser
        if scl_only_attachments is not None:
            self.scl_only_attachments = scl_only_attachments
        if restrict_attachments_to_be_opened_in_following_apps is not None:
            self.restrict_attachments_to_be_opened_in_following_apps = restrict_attachments_to_be_opened_in_following_apps
        if applications is not None:
            self.applications = applications
        if allow_printing is not None:
            self.allow_printing = allow_printing

    @property
    def exchange_active_sync_host(self):
        """Gets the exchange_active_sync_host of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets public host name for the Emailserver.  # noqa: E501

        :return: The exchange_active_sync_host of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._exchange_active_sync_host

    @exchange_active_sync_host.setter
    def exchange_active_sync_host(self, exchange_active_sync_host):
        """Sets the exchange_active_sync_host of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets public host name for the Emailserver.  # noqa: E501

        :param exchange_active_sync_host: The exchange_active_sync_host of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._exchange_active_sync_host = exchange_active_sync_host

    @property
    def ignore_ssl_errors(self):
        """Gets the ignore_ssl_errors of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether specifies if the device is allowed to ignore SSL errors for Agent Process.  # noqa: E501

        :return: The ignore_ssl_errors of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_ssl_errors

    @ignore_ssl_errors.setter
    def ignore_ssl_errors(self, ignore_ssl_errors):
        """Sets the ignore_ssl_errors of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether specifies if the device is allowed to ignore SSL errors for Agent Process.  # noqa: E501

        :param ignore_ssl_errors: The ignore_ssl_errors of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._ignore_ssl_errors = ignore_ssl_errors

    @property
    def use_smime(self):
        """Gets the use_smime of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, this account supports S/MIME.  # noqa: E501

        :return: The use_smime of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._use_smime

    @use_smime.setter
    def use_smime(self, use_smime):
        """Sets the use_smime of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether if true, this account supports S/MIME.  # noqa: E501

        :param use_smime: The use_smime of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._use_smime = use_smime

    @property
    def smime_certificate(self):
        """Gets the smime_certificate of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets s/MIME signing certificate to be used with the profile.  # noqa: E501

        :return: The smime_certificate of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._smime_certificate

    @smime_certificate.setter
    def smime_certificate(self, smime_certificate):
        """Sets the smime_certificate of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets s/MIME signing certificate to be used with the profile.  # noqa: E501

        :param smime_certificate: The smime_certificate of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._smime_certificate = smime_certificate

    @property
    def smime_encryption_certificate(self):
        """Gets the smime_encryption_certificate of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets s/MIME encryption certificate to be used with the profile.  # noqa: E501

        :return: The smime_encryption_certificate of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._smime_encryption_certificate

    @smime_encryption_certificate.setter
    def smime_encryption_certificate(self, smime_encryption_certificate):
        """Sets the smime_encryption_certificate of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets s/MIME encryption certificate to be used with the profile.  # noqa: E501

        :param smime_encryption_certificate: The smime_encryption_certificate of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._smime_encryption_certificate = smime_encryption_certificate

    @property
    def domain(self):
        """Gets the domain of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets user's email domain.  # noqa: E501

        :return: The domain of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets user's email domain.  # noqa: E501

        :param domain: The domain of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def user(self):
        """Gets the user of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets username for the account.  # noqa: E501

        :return: The user of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets username for the account.  # noqa: E501

        :param user: The user of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def email_address(self):
        """Gets the email_address of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets user's email address.  # noqa: E501

        :return: The email_address of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets user's email address.  # noqa: E501

        :param email_address: The email_address of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def password(self):
        """Gets the password of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets email account's password.  # noqa: E501

        :return: The password of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets email account's password.  # noqa: E501

        :param password: The password of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def payload_certificate(self):
        """Gets the payload_certificate of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets name of the Payload certificate.  # noqa: E501

        :return: The payload_certificate of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._payload_certificate

    @payload_certificate.setter
    def payload_certificate(self, payload_certificate):
        """Sets the payload_certificate of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets name of the Payload certificate.  # noqa: E501

        :param payload_certificate: The payload_certificate of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._payload_certificate = payload_certificate

    @property
    def enable_email(self):
        """Gets the enable_email of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, disables access to Email on the AW Email Client.  # noqa: E501

        :return: The enable_email of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_email

    @enable_email.setter
    def enable_email(self, enable_email):
        """Sets the enable_email of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether if false, disables access to Email on the AW Email Client.  # noqa: E501

        :param enable_email: The enable_email of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_email = enable_email

    @property
    def enable_calendar(self):
        """Gets the enable_calendar of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, disables access to calendar on the AW Email Client.  # noqa: E501

        :return: The enable_calendar of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_calendar

    @enable_calendar.setter
    def enable_calendar(self, enable_calendar):
        """Sets the enable_calendar of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether if false, disables access to calendar on the AW Email Client.  # noqa: E501

        :param enable_calendar: The enable_calendar of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_calendar = enable_calendar

    @property
    def enable_contacts(self):
        """Gets the enable_contacts of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, disables access to contacts on the AW Email Client.  # noqa: E501

        :return: The enable_contacts of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_contacts

    @enable_contacts.setter
    def enable_contacts(self, enable_contacts):
        """Sets the enable_contacts of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether if false, disables access to contacts on the AW Email Client.  # noqa: E501

        :param enable_contacts: The enable_contacts of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_contacts = enable_contacts

    @property
    def sync_interval(self):
        """Gets the sync_interval of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets frequency of mail synchronization. 0:Auto, 1: 15 mins, 2: 30 mins, 3: 1 hour, 4: 4 hours, 5: Manual.  # noqa: E501

        :return: The sync_interval of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._sync_interval

    @sync_interval.setter
    def sync_interval(self, sync_interval):
        """Sets the sync_interval of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets frequency of mail synchronization. 0:Auto, 1: 15 mins, 2: 30 mins, 3: 1 hour, 4: 4 hours, 5: Manual.  # noqa: E501

        :param sync_interval: The sync_interval of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._sync_interval = sync_interval

    @property
    def email_notifications(self):
        """Gets the email_notifications of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets email Notifications.  # noqa: E501

        :return: The email_notifications of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._email_notifications

    @email_notifications.setter
    def email_notifications(self, email_notifications):
        """Sets the email_notifications of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets email Notifications.  # noqa: E501

        :param email_notifications: The email_notifications of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._email_notifications = email_notifications

    @property
    def past_days_of_mail_to_sync(self):
        """Gets the past_days_of_mail_to_sync of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets number of days of mailsynchronization.  # noqa: E501

        :return: The past_days_of_mail_to_sync of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._past_days_of_mail_to_sync

    @past_days_of_mail_to_sync.setter
    def past_days_of_mail_to_sync(self, past_days_of_mail_to_sync):
        """Sets the past_days_of_mail_to_sync of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets number of days of mailsynchronization.  # noqa: E501

        :param past_days_of_mail_to_sync: The past_days_of_mail_to_sync of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._past_days_of_mail_to_sync = past_days_of_mail_to_sync

    @property
    def past_days_of_calendar_to_sync(self):
        """Gets the past_days_of_calendar_to_sync of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets number of days of calendar synchronization.  # noqa: E501

        :return: The past_days_of_calendar_to_sync of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._past_days_of_calendar_to_sync

    @past_days_of_calendar_to_sync.setter
    def past_days_of_calendar_to_sync(self, past_days_of_calendar_to_sync):
        """Sets the past_days_of_calendar_to_sync of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets number of days of calendar synchronization.  # noqa: E501

        :param past_days_of_calendar_to_sync: The past_days_of_calendar_to_sync of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._past_days_of_calendar_to_sync = past_days_of_calendar_to_sync

    @property
    def email_size_in_kilobytes_default_is_unlimited(self):
        """Gets the email_size_in_kilobytes_default_is_unlimited of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets maximum Emailsize allowed in KBs.  # noqa: E501

        :return: The email_size_in_kilobytes_default_is_unlimited of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._email_size_in_kilobytes_default_is_unlimited

    @email_size_in_kilobytes_default_is_unlimited.setter
    def email_size_in_kilobytes_default_is_unlimited(self, email_size_in_kilobytes_default_is_unlimited):
        """Sets the email_size_in_kilobytes_default_is_unlimited of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets maximum Emailsize allowed in KBs.  # noqa: E501

        :param email_size_in_kilobytes_default_is_unlimited: The email_size_in_kilobytes_default_is_unlimited of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._email_size_in_kilobytes_default_is_unlimited = email_size_in_kilobytes_default_is_unlimited

    @property
    def enable_html_email(self):
        """Gets the enable_html_email of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether specifies if HTML Email is enabled on the device.  # noqa: E501

        :return: The enable_html_email of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_html_email

    @enable_html_email.setter
    def enable_html_email(self, enable_html_email):
        """Sets the enable_html_email of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether specifies if HTML Email is enabled on the device.  # noqa: E501

        :param enable_html_email: The enable_html_email of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_html_email = enable_html_email

    @property
    def email_signature(self):
        """Gets the email_signature of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets signature for the Emails.  # noqa: E501

        :return: The email_signature of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._email_signature

    @email_signature.setter
    def email_signature(self, email_signature):
        """Sets the email_signature of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets signature for the Emails.  # noqa: E501

        :param email_signature: The email_signature of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._email_signature = email_signature

    @property
    def enable_signature_editing(self):
        """Gets the enable_signature_editing of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, disables editing of Email signature.  # noqa: E501

        :return: The enable_signature_editing of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_signature_editing

    @enable_signature_editing.setter
    def enable_signature_editing(self, enable_signature_editing):
        """Sets the enable_signature_editing of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether if false, disables editing of Email signature.  # noqa: E501

        :param enable_signature_editing: The enable_signature_editing of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_signature_editing = enable_signature_editing

    @property
    def require_passcode(self):
        """Gets the require_passcode of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether specifies if passcode is needed on the AW Email Client.  # noqa: E501

        :return: The require_passcode of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._require_passcode

    @require_passcode.setter
    def require_passcode(self, require_passcode):
        """Sets the require_passcode of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether specifies if passcode is needed on the AW Email Client.  # noqa: E501

        :param require_passcode: The require_passcode of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._require_passcode = require_passcode

    @property
    def type(self):
        """Gets the type of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets specifies if the Email client can be accessed using passcode alone or using a combination of Username and Password. 0: Disabled, 1: Passcode, 2: Username and Password.  # noqa: E501

        :return: The type of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets specifies if the Email client can be accessed using passcode alone or using a combination of Username and Password. 0: Disabled, 1: Passcode, 2: Username and Password.  # noqa: E501

        :param type: The type of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def complexity(self):
        """Gets the complexity of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets specifies if a simple or an Alphanumeric passcode will be used to access the email client.  # noqa: E501

        :return: The complexity of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity):
        """Sets the complexity of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets specifies if a simple or an Alphanumeric passcode will be used to access the email client.  # noqa: E501

        :param complexity: The complexity of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._complexity = complexity

    @property
    def allow_simple_passcode(self):
        """Gets the allow_simple_passcode of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether specifies if a simple passcode will be used to access the email client.  # noqa: E501

        :return: The allow_simple_passcode of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_simple_passcode

    @allow_simple_passcode.setter
    def allow_simple_passcode(self, allow_simple_passcode):
        """Sets the allow_simple_passcode of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether specifies if a simple passcode will be used to access the email client.  # noqa: E501

        :param allow_simple_passcode: The allow_simple_passcode of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_simple_passcode = allow_simple_passcode

    @property
    def minimum_length(self):
        """Gets the minimum_length of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets minimum length of the passcode.  # noqa: E501

        :return: The minimum_length of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._minimum_length

    @minimum_length.setter
    def minimum_length(self, minimum_length):
        """Sets the minimum_length of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets minimum length of the passcode.  # noqa: E501

        :param minimum_length: The minimum_length of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._minimum_length = minimum_length

    @property
    def minimum_number_of_complex_characters(self):
        """Gets the minimum_number_of_complex_characters of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets minimum number of complex characters necessary in the passcode.  # noqa: E501

        :return: The minimum_number_of_complex_characters of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_complex_characters

    @minimum_number_of_complex_characters.setter
    def minimum_number_of_complex_characters(self, minimum_number_of_complex_characters):
        """Sets the minimum_number_of_complex_characters of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets minimum number of complex characters necessary in the passcode.  # noqa: E501

        :param minimum_number_of_complex_characters: The minimum_number_of_complex_characters of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._minimum_number_of_complex_characters = minimum_number_of_complex_characters

    @property
    def maximum_age_days(self):
        """Gets the maximum_age_days of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets maximum days for the passcode before it is expired.  # noqa: E501

        :return: The maximum_age_days of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._maximum_age_days

    @maximum_age_days.setter
    def maximum_age_days(self, maximum_age_days):
        """Sets the maximum_age_days of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets maximum days for the passcode before it is expired.  # noqa: E501

        :param maximum_age_days: The maximum_age_days of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._maximum_age_days = maximum_age_days

    @property
    def auto_lock(self):
        """Gets the auto_lock of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if true, the Email client will be locked after the idle period.  # noqa: E501

        :return: The auto_lock of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._auto_lock

    @auto_lock.setter
    def auto_lock(self, auto_lock):
        """Sets the auto_lock of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether if true, the Email client will be locked after the idle period.  # noqa: E501

        :param auto_lock: The auto_lock of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._auto_lock = auto_lock

    @property
    def history(self):
        """Gets the history of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets when the user changes the passcode, it has to be unique within the last N entries in the history.  # noqa: E501

        :return: The history of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets when the user changes the passcode, it has to be unique within the last N entries in the history.  # noqa: E501

        :param history: The history of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._history = history

    @property
    def grace_period(self):
        """Gets the grace_period of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets the maximum grace period in minutes, to unlock the Client without entering a passcode.  # noqa: E501

        :return: The grace_period of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets the maximum grace period in minutes, to unlock the Client without entering a passcode.  # noqa: E501

        :param grace_period: The grace_period of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._grace_period = grace_period

    @property
    def maximum_number_of_failed_attempts(self):
        """Gets the maximum_number_of_failed_attempts of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets specifies the number of allowed failed attempts to enter the passcode at the device's lock screen.  # noqa: E501

        :return: The maximum_number_of_failed_attempts of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._maximum_number_of_failed_attempts

    @maximum_number_of_failed_attempts.setter
    def maximum_number_of_failed_attempts(self, maximum_number_of_failed_attempts):
        """Sets the maximum_number_of_failed_attempts of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets specifies the number of allowed failed attempts to enter the passcode at the device's lock screen.  # noqa: E501

        :param maximum_number_of_failed_attempts: The maximum_number_of_failed_attempts of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._maximum_number_of_failed_attempts = maximum_number_of_failed_attempts

    @property
    def disabe_copy_paste(self):
        """Gets the disabe_copy_paste of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether setting this field to true disables copying of Email content on the clipboard.  # noqa: E501

        :return: The disabe_copy_paste of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._disabe_copy_paste

    @disabe_copy_paste.setter
    def disabe_copy_paste(self, disabe_copy_paste):
        """Sets the disabe_copy_paste of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether setting this field to true disables copying of Email content on the clipboard.  # noqa: E501

        :param disabe_copy_paste: The disabe_copy_paste of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._disabe_copy_paste = disabe_copy_paste

    @property
    def disable_attachments(self):
        """Gets the disable_attachments of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether setting this field to true disables email attachments.  # noqa: E501

        :return: The disable_attachments of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._disable_attachments

    @disable_attachments.setter
    def disable_attachments(self, disable_attachments):
        """Sets the disable_attachments of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether setting this field to true disables email attachments.  # noqa: E501

        :param disable_attachments: The disable_attachments of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._disable_attachments = disable_attachments

    @property
    def maximum_attachment_size_mb(self):
        """Gets the maximum_attachment_size_mb of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets maximum size of an Email attachment in MB.  # noqa: E501

        :return: The maximum_attachment_size_mb of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._maximum_attachment_size_mb

    @maximum_attachment_size_mb.setter
    def maximum_attachment_size_mb(self, maximum_attachment_size_mb):
        """Sets the maximum_attachment_size_mb of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets maximum size of an Email attachment in MB.  # noqa: E501

        :param maximum_attachment_size_mb: The maximum_attachment_size_mb of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._maximum_attachment_size_mb = maximum_attachment_size_mb

    @property
    def open_all_links_in_air_watch_browser(self):
        """Gets the open_all_links_in_air_watch_browser of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether setting this field to true forces all links to be open in VMware Browser.  # noqa: E501

        :return: The open_all_links_in_air_watch_browser of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._open_all_links_in_air_watch_browser

    @open_all_links_in_air_watch_browser.setter
    def open_all_links_in_air_watch_browser(self, open_all_links_in_air_watch_browser):
        """Sets the open_all_links_in_air_watch_browser of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether setting this field to true forces all links to be open in VMware Browser.  # noqa: E501

        :param open_all_links_in_air_watch_browser: The open_all_links_in_air_watch_browser of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._open_all_links_in_air_watch_browser = open_all_links_in_air_watch_browser

    @property
    def scl_only_attachments(self):
        """Gets the scl_only_attachments of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether setting this field to true forces opening of mail attachments in the Secure Content locker.  # noqa: E501

        :return: The scl_only_attachments of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._scl_only_attachments

    @scl_only_attachments.setter
    def scl_only_attachments(self, scl_only_attachments):
        """Sets the scl_only_attachments of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether setting this field to true forces opening of mail attachments in the Secure Content locker.  # noqa: E501

        :param scl_only_attachments: The scl_only_attachments of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._scl_only_attachments = scl_only_attachments

    @property
    def restrict_attachments_to_be_opened_in_following_apps(self):
        """Gets the restrict_attachments_to_be_opened_in_following_apps of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether setting this value to true, allows attachments to be opened only in the application specified in the Application tag.  # noqa: E501

        :return: The restrict_attachments_to_be_opened_in_following_apps of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_attachments_to_be_opened_in_following_apps

    @restrict_attachments_to_be_opened_in_following_apps.setter
    def restrict_attachments_to_be_opened_in_following_apps(self, restrict_attachments_to_be_opened_in_following_apps):
        """Sets the restrict_attachments_to_be_opened_in_following_apps of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether setting this value to true, allows attachments to be opened only in the application specified in the Application tag.  # noqa: E501

        :param restrict_attachments_to_be_opened_in_following_apps: The restrict_attachments_to_be_opened_in_following_apps of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._restrict_attachments_to_be_opened_in_following_apps = restrict_attachments_to_be_opened_in_following_apps

    @property
    def applications(self):
        """Gets the applications of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets application's bundle IDs in which the email attachments are opened.  # noqa: E501

        :return: The applications of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: list[str]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets application's bundle IDs in which the email attachments are opened.  # noqa: E501

        :param applications: The applications of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: list[str]
        """

        self._applications = applications

    @property
    def allow_printing(self):
        """Gets the allow_printing of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether setting this field to false disables printing.  # noqa: E501

        :return: The allow_printing of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_printing

    @allow_printing.setter
    def allow_printing(self, allow_printing):
        """Sets the allow_printing of this AppleEASAWMailClientPayloadV2Entity_.

        Gets or sets a value indicating whether setting this field to false disables printing.  # noqa: E501

        :param allow_printing: The allow_printing of this AppleEASAWMailClientPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_printing = allow_printing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleEASAWMailClientPayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleEASAWMailClientPayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleEASAWMailClientPayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
