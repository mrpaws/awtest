# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class PolicyGeneralConfigurationV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_model': 'str',
        'smart_groups': 'list[str]',
        'update_type': 'int',
        'network_type': 'int',
        'allow_battery_controls': 'bool',
        'minimum_battery_limit': 'int',
        'require_device_to_be_on_charger': 'bool'
    }

    attribute_map = {
        'device_model': 'device_model',
        'smart_groups': 'smart_groups',
        'update_type': 'update_type',
        'network_type': 'network_type',
        'allow_battery_controls': 'allow_battery_controls',
        'minimum_battery_limit': 'minimum_battery_limit',
        'require_device_to_be_on_charger': 'require_device_to_be_on_charger'
    }

    def __init__(self, device_model=None, smart_groups=None, update_type=None, network_type=None, allow_battery_controls=None, minimum_battery_limit=None, require_device_to_be_on_charger=None, _configuration=None):  # noqa: E501
        """PolicyGeneralConfigurationV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_model = None
        self._smart_groups = None
        self._update_type = None
        self._network_type = None
        self._allow_battery_controls = None
        self._minimum_battery_limit = None
        self._require_device_to_be_on_charger = None
        self.discriminator = None

        if device_model is not None:
            self.device_model = device_model
        if smart_groups is not None:
            self.smart_groups = smart_groups
        if update_type is not None:
            self.update_type = update_type
        if network_type is not None:
            self.network_type = network_type
        if allow_battery_controls is not None:
            self.allow_battery_controls = allow_battery_controls
        if minimum_battery_limit is not None:
            self.minimum_battery_limit = minimum_battery_limit
        if require_device_to_be_on_charger is not None:
            self.require_device_to_be_on_charger = require_device_to_be_on_charger

    @property
    def device_model(self):
        """Gets the device_model of this PolicyGeneralConfigurationV1Model.  # noqa: E501

        The device model for the policy.  # noqa: E501

        :return: The device_model of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this PolicyGeneralConfigurationV1Model.

        The device model for the policy.  # noqa: E501

        :param device_model: The device_model of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :type: str
        """

        self._device_model = device_model

    @property
    def smart_groups(self):
        """Gets the smart_groups of this PolicyGeneralConfigurationV1Model.  # noqa: E501

        The smart groups applicable to the policy.  # noqa: E501

        :return: The smart_groups of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._smart_groups

    @smart_groups.setter
    def smart_groups(self, smart_groups):
        """Sets the smart_groups of this PolicyGeneralConfigurationV1Model.

        The smart groups applicable to the policy.  # noqa: E501

        :param smart_groups: The smart_groups of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :type: list[str]
        """

        self._smart_groups = smart_groups

    @property
    def update_type(self):
        """Gets the update_type of this PolicyGeneralConfigurationV1Model.  # noqa: E501

        The update type for the policy.  # noqa: E501

        :return: The update_type of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :rtype: int
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this PolicyGeneralConfigurationV1Model.

        The update type for the policy.  # noqa: E501

        :param update_type: The update_type of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                update_type not in allowed_values):
            raise ValueError(
                "Invalid value for `update_type` ({0}), must be one of {1}"  # noqa: E501
                .format(update_type, allowed_values)
            )

        self._update_type = update_type

    @property
    def network_type(self):
        """Gets the network_type of this PolicyGeneralConfigurationV1Model.  # noqa: E501

        The network type for the policy.  # noqa: E501

        :return: The network_type of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :rtype: int
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this PolicyGeneralConfigurationV1Model.

        The network type for the policy.  # noqa: E501

        :param network_type: The network_type of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                network_type not in allowed_values):
            raise ValueError(
                "Invalid value for `network_type` ({0}), must be one of {1}"  # noqa: E501
                .format(network_type, allowed_values)
            )

        self._network_type = network_type

    @property
    def allow_battery_controls(self):
        """Gets the allow_battery_controls of this PolicyGeneralConfigurationV1Model.  # noqa: E501

        Indicates whether battery controls are enabled or not.  # noqa: E501

        :return: The allow_battery_controls of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._allow_battery_controls

    @allow_battery_controls.setter
    def allow_battery_controls(self, allow_battery_controls):
        """Sets the allow_battery_controls of this PolicyGeneralConfigurationV1Model.

        Indicates whether battery controls are enabled or not.  # noqa: E501

        :param allow_battery_controls: The allow_battery_controls of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :type: bool
        """

        self._allow_battery_controls = allow_battery_controls

    @property
    def minimum_battery_limit(self):
        """Gets the minimum_battery_limit of this PolicyGeneralConfigurationV1Model.  # noqa: E501

        The minimum battery limit for the policy, to be considered only when allow_battery_controls is true.  # noqa: E501

        :return: The minimum_battery_limit of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :rtype: int
        """
        return self._minimum_battery_limit

    @minimum_battery_limit.setter
    def minimum_battery_limit(self, minimum_battery_limit):
        """Sets the minimum_battery_limit of this PolicyGeneralConfigurationV1Model.

        The minimum battery limit for the policy, to be considered only when allow_battery_controls is true.  # noqa: E501

        :param minimum_battery_limit: The minimum_battery_limit of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :type: int
        """

        self._minimum_battery_limit = minimum_battery_limit

    @property
    def require_device_to_be_on_charger(self):
        """Gets the require_device_to_be_on_charger of this PolicyGeneralConfigurationV1Model.  # noqa: E501

        Indicates whether device is required to be on charger or not.  # noqa: E501

        :return: The require_device_to_be_on_charger of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._require_device_to_be_on_charger

    @require_device_to_be_on_charger.setter
    def require_device_to_be_on_charger(self, require_device_to_be_on_charger):
        """Sets the require_device_to_be_on_charger of this PolicyGeneralConfigurationV1Model.

        Indicates whether device is required to be on charger or not.  # noqa: E501

        :param require_device_to_be_on_charger: The require_device_to_be_on_charger of this PolicyGeneralConfigurationV1Model.  # noqa: E501
        :type: bool
        """

        self._require_device_to_be_on_charger = require_device_to_be_on_charger

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyGeneralConfigurationV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyGeneralConfigurationV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PolicyGeneralConfigurationV1Model):
            return True

        return self.to_dict() != other.to_dict()
