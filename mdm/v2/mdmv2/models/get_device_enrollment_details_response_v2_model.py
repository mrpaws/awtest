# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class GetDeviceEnrollmentDetailsResponseV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enrollment_status': 'int',
        'compliant': 'bool',
        'enrollment_timestamp': 'datetime',
        'last_seen_timestamp': 'datetime',
        'ownership': 'int',
        'organization_group_id': 'str',
        'organization_group_name': 'str',
        'user_name': 'str',
        'user_email_address': 'str',
        'enrollment_user_uuid': 'str',
        'managed_by': 'int'
    }

    attribute_map = {
        'enrollment_status': 'enrollmentStatus',
        'compliant': 'compliant',
        'enrollment_timestamp': 'enrollmentTimestamp',
        'last_seen_timestamp': 'lastSeenTimestamp',
        'ownership': 'ownership',
        'organization_group_id': 'organizationGroupId',
        'organization_group_name': 'organizationGroupName',
        'user_name': 'userName',
        'user_email_address': 'userEmailAddress',
        'enrollment_user_uuid': 'enrollmentUserUuid',
        'managed_by': 'managedBy'
    }

    def __init__(self, enrollment_status=None, compliant=None, enrollment_timestamp=None, last_seen_timestamp=None, ownership=None, organization_group_id=None, organization_group_name=None, user_name=None, user_email_address=None, enrollment_user_uuid=None, managed_by=None, _configuration=None):  # noqa: E501
        """GetDeviceEnrollmentDetailsResponseV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enrollment_status = None
        self._compliant = None
        self._enrollment_timestamp = None
        self._last_seen_timestamp = None
        self._ownership = None
        self._organization_group_id = None
        self._organization_group_name = None
        self._user_name = None
        self._user_email_address = None
        self._enrollment_user_uuid = None
        self._managed_by = None
        self.discriminator = None

        if enrollment_status is not None:
            self.enrollment_status = enrollment_status
        if compliant is not None:
            self.compliant = compliant
        if enrollment_timestamp is not None:
            self.enrollment_timestamp = enrollment_timestamp
        if last_seen_timestamp is not None:
            self.last_seen_timestamp = last_seen_timestamp
        if ownership is not None:
            self.ownership = ownership
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if organization_group_name is not None:
            self.organization_group_name = organization_group_name
        if user_name is not None:
            self.user_name = user_name
        if user_email_address is not None:
            self.user_email_address = user_email_address
        if enrollment_user_uuid is not None:
            self.enrollment_user_uuid = enrollment_user_uuid
        if managed_by is not None:
            self.managed_by = managed_by

    @property
    def enrollment_status(self):
        """Gets the enrollment_status of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        Enrollment status of the device  # noqa: E501

        :return: The enrollment_status of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_status

    @enrollment_status.setter
    def enrollment_status(self, enrollment_status):
        """Sets the enrollment_status of this GetDeviceEnrollmentDetailsResponseV2Model.

        Enrollment status of the device  # noqa: E501

        :param enrollment_status: The enrollment_status of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]  # noqa: E501
        if (self._configuration.client_side_validation and
                enrollment_status not in allowed_values):
            raise ValueError(
                "Invalid value for `enrollment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(enrollment_status, allowed_values)
            )

        self._enrollment_status = enrollment_status

    @property
    def compliant(self):
        """Gets the compliant of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        Compliance status of the device  # noqa: E501

        :return: The compliant of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: bool
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this GetDeviceEnrollmentDetailsResponseV2Model.

        Compliance status of the device  # noqa: E501

        :param compliant: The compliant of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: bool
        """

        self._compliant = compliant

    @property
    def enrollment_timestamp(self):
        """Gets the enrollment_timestamp of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        Date-Time of last enrollment date  # noqa: E501

        :return: The enrollment_timestamp of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._enrollment_timestamp

    @enrollment_timestamp.setter
    def enrollment_timestamp(self, enrollment_timestamp):
        """Sets the enrollment_timestamp of this GetDeviceEnrollmentDetailsResponseV2Model.

        Date-Time of last enrollment date  # noqa: E501

        :param enrollment_timestamp: The enrollment_timestamp of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: datetime
        """

        self._enrollment_timestamp = enrollment_timestamp

    @property
    def last_seen_timestamp(self):
        """Gets the last_seen_timestamp of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        Time the device last reported any status  # noqa: E501

        :return: The last_seen_timestamp of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen_timestamp

    @last_seen_timestamp.setter
    def last_seen_timestamp(self, last_seen_timestamp):
        """Sets the last_seen_timestamp of this GetDeviceEnrollmentDetailsResponseV2Model.

        Time the device last reported any status  # noqa: E501

        :param last_seen_timestamp: The last_seen_timestamp of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: datetime
        """

        self._last_seen_timestamp = last_seen_timestamp

    @property
    def ownership(self):
        """Gets the ownership of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        Ownership type of the device  # noqa: E501

        :return: The ownership of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: int
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this GetDeviceEnrollmentDetailsResponseV2Model.

        Ownership type of the device  # noqa: E501

        :param ownership: The ownership of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                ownership not in allowed_values):
            raise ValueError(
                "Invalid value for `ownership` ({0}), must be one of {1}"  # noqa: E501
                .format(ownership, allowed_values)
            )

        self._ownership = ownership

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        Id of the organization group  # noqa: E501

        :return: The organization_group_id of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this GetDeviceEnrollmentDetailsResponseV2Model.

        Id of the organization group  # noqa: E501

        :param organization_group_id: The organization_group_id of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: str
        """

        self._organization_group_id = organization_group_id

    @property
    def organization_group_name(self):
        """Gets the organization_group_name of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        Organization group name where the device is enrolled  # noqa: E501

        :return: The organization_group_name of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_name

    @organization_group_name.setter
    def organization_group_name(self, organization_group_name):
        """Sets the organization_group_name of this GetDeviceEnrollmentDetailsResponseV2Model.

        Organization group name where the device is enrolled  # noqa: E501

        :param organization_group_name: The organization_group_name of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: str
        """

        self._organization_group_name = organization_group_name

    @property
    def user_name(self):
        """Gets the user_name of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        User name of the device  # noqa: E501

        :return: The user_name of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this GetDeviceEnrollmentDetailsResponseV2Model.

        User name of the device  # noqa: E501

        :param user_name: The user_name of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_email_address(self):
        """Gets the user_email_address of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        User's email address of the device  # noqa: E501

        :return: The user_email_address of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._user_email_address

    @user_email_address.setter
    def user_email_address(self, user_email_address):
        """Sets the user_email_address of this GetDeviceEnrollmentDetailsResponseV2Model.

        User's email address of the device  # noqa: E501

        :param user_email_address: The user_email_address of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: str
        """

        self._user_email_address = user_email_address

    @property
    def enrollment_user_uuid(self):
        """Gets the enrollment_user_uuid of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        Enrollment user uuid of device  # noqa: E501

        :return: The enrollment_user_uuid of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_user_uuid

    @enrollment_user_uuid.setter
    def enrollment_user_uuid(self, enrollment_user_uuid):
        """Sets the enrollment_user_uuid of this GetDeviceEnrollmentDetailsResponseV2Model.

        Enrollment user uuid of device  # noqa: E501

        :param enrollment_user_uuid: The enrollment_user_uuid of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: str
        """

        self._enrollment_user_uuid = enrollment_user_uuid

    @property
    def managed_by(self):
        """Gets the managed_by of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501

        Device managed by  # noqa: E501

        :return: The managed_by of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :rtype: int
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this GetDeviceEnrollmentDetailsResponseV2Model.

        Device managed by  # noqa: E501

        :param managed_by: The managed_by of this GetDeviceEnrollmentDetailsResponseV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 998, 999]  # noqa: E501
        if (self._configuration.client_side_validation and
                managed_by not in allowed_values):
            raise ValueError(
                "Invalid value for `managed_by` ({0}), must be one of {1}"  # noqa: E501
                .format(managed_by, allowed_values)
            )

        self._managed_by = managed_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetDeviceEnrollmentDetailsResponseV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetDeviceEnrollmentDetailsResponseV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetDeviceEnrollmentDetailsResponseV2Model):
            return True

        return self.to_dict() != other.to_dict()
