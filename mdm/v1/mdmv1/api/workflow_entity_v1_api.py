# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class WorkflowEntityV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def workflow_entity_v1_get_workflows_for_entity_async(self, entitytype, entity_uuid, **kwargs):  # noqa: E501
        """New - Retrieves a paginated result of the workflows assigned to this entity.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_entity_v1_get_workflows_for_entity_async(entitytype, entity_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int entitytype: The type of the entity.(Required) (required)
        :param str entity_uuid: The identifier of the entity for which we are searching for the workflows assigned.(Required) (required)
        :param str orderby: Order the results by this attribute
        :param int page: The specific page number to get
        :param int page_size: Maximum records per page
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified
        :param bool via_freestyle: The optional query parameter via_freestyle will fetch the workflows created via Freestyle. Setting this optional parameter to true, will fetch only the workflows created via Freestyle only. Setting the optional parameter to false, will fetch implicitly created workflows from other sources such as Scripts. Not passing this optional parameter will fetch all available workflows.
        :return: list[WorkflowEntitySearchListResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_entity_v1_get_workflows_for_entity_async_with_http_info(entitytype, entity_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_entity_v1_get_workflows_for_entity_async_with_http_info(entitytype, entity_uuid, **kwargs)  # noqa: E501
            return data

    def workflow_entity_v1_get_workflows_for_entity_async_with_http_info(self, entitytype, entity_uuid, **kwargs):  # noqa: E501
        """New - Retrieves a paginated result of the workflows assigned to this entity.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_entity_v1_get_workflows_for_entity_async_with_http_info(entitytype, entity_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int entitytype: The type of the entity.(Required) (required)
        :param str entity_uuid: The identifier of the entity for which we are searching for the workflows assigned.(Required) (required)
        :param str orderby: Order the results by this attribute
        :param int page: The specific page number to get
        :param int page_size: Maximum records per page
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified
        :param bool via_freestyle: The optional query parameter via_freestyle will fetch the workflows created via Freestyle. Setting this optional parameter to true, will fetch only the workflows created via Freestyle only. Setting the optional parameter to false, will fetch implicitly created workflows from other sources such as Scripts. Not passing this optional parameter will fetch all available workflows.
        :return: list[WorkflowEntitySearchListResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entitytype', 'entity_uuid', 'orderby', 'page', 'page_size', 'sortorder', 'via_freestyle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_entity_v1_get_workflows_for_entity_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entitytype' is set
        if self.api_client.client_side_validation and ('entitytype' not in params or
                                                       params['entitytype'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `entitytype` when calling `workflow_entity_v1_get_workflows_for_entity_async`")  # noqa: E501
        # verify the required parameter 'entity_uuid' is set
        if self.api_client.client_side_validation and ('entity_uuid' not in params or
                                                       params['entity_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `entity_uuid` when calling `workflow_entity_v1_get_workflows_for_entity_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entitytype' in params:
            path_params['entitytype'] = params['entitytype']  # noqa: E501
        if 'entity_uuid' in params:
            path_params['entityUuid'] = params['entity_uuid']  # noqa: E501

        query_params = []
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'via_freestyle' in params:
            query_params.append(('via_freestyle', params['via_freestyle']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{entitytype}/search/{entityUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkflowEntitySearchListResponseV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
