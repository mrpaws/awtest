# coding: utf-8

"""
    MCM API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mcmv1.configuration import Configuration


class AwContentVersionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_version_id': 'str',
        'version': 'str',
        'notes': 'str',
        'size': 'int',
        'hash': 'str',
        'sha256_hash': 'str',
        'author': 'str',
        'subject': 'str',
        'keywords': 'str',
        'download_link': 'str',
        'hash_algorithm': 'str',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'content_version_id': 'contentVersionId',
        'version': 'version',
        'notes': 'notes',
        'size': 'size',
        'hash': 'hash',
        'sha256_hash': 'sha256Hash',
        'author': 'author',
        'subject': 'subject',
        'keywords': 'keywords',
        'download_link': 'downloadLink',
        'hash_algorithm': 'hashAlgorithm',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, content_version_id=None, version=None, notes=None, size=None, hash=None, sha256_hash=None, author=None, subject=None, keywords=None, download_link=None, hash_algorithm=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """AwContentVersionModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._content_version_id = None
        self._version = None
        self._notes = None
        self._size = None
        self._hash = None
        self._sha256_hash = None
        self._author = None
        self._subject = None
        self._keywords = None
        self._download_link = None
        self._hash_algorithm = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if content_version_id is not None:
            self.content_version_id = content_version_id
        if version is not None:
            self.version = version
        if notes is not None:
            self.notes = notes
        if size is not None:
            self.size = size
        if hash is not None:
            self.hash = hash
        if sha256_hash is not None:
            self.sha256_hash = sha256_hash
        if author is not None:
            self.author = author
        if subject is not None:
            self.subject = subject
        if keywords is not None:
            self.keywords = keywords
        if download_link is not None:
            self.download_link = download_link
        if hash_algorithm is not None:
            self.hash_algorithm = hash_algorithm
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def content_version_id(self):
        """Gets the content_version_id of this AwContentVersionModel.  # noqa: E501

        Unique Identifier for the file version  # noqa: E501

        :return: The content_version_id of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._content_version_id

    @content_version_id.setter
    def content_version_id(self, content_version_id):
        """Sets the content_version_id of this AwContentVersionModel.

        Unique Identifier for the file version  # noqa: E501

        :param content_version_id: The content_version_id of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._content_version_id = content_version_id

    @property
    def version(self):
        """Gets the version of this AwContentVersionModel.  # noqa: E501

        Version of the file  # noqa: E501

        :return: The version of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AwContentVersionModel.

        Version of the file  # noqa: E501

        :param version: The version of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def notes(self):
        """Gets the notes of this AwContentVersionModel.  # noqa: E501

        The notes for version  # noqa: E501

        :return: The notes of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AwContentVersionModel.

        The notes for version  # noqa: E501

        :param notes: The notes of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def size(self):
        """Gets the size of this AwContentVersionModel.  # noqa: E501

        The size in bytes of the content version.  # noqa: E501

        :return: The size of this AwContentVersionModel.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AwContentVersionModel.

        The size in bytes of the content version.  # noqa: E501

        :param size: The size of this AwContentVersionModel.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def hash(self):
        """Gets the hash of this AwContentVersionModel.  # noqa: E501

        The computed hash for the content version.  # noqa: E501

        :return: The hash of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this AwContentVersionModel.

        The computed hash for the content version.  # noqa: E501

        :param hash: The hash of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def sha256_hash(self):
        """Gets the sha256_hash of this AwContentVersionModel.  # noqa: E501

        The computed Sha256 hash for the content version.  # noqa: E501

        :return: The sha256_hash of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._sha256_hash

    @sha256_hash.setter
    def sha256_hash(self, sha256_hash):
        """Sets the sha256_hash of this AwContentVersionModel.

        The computed Sha256 hash for the content version.  # noqa: E501

        :param sha256_hash: The sha256_hash of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._sha256_hash = sha256_hash

    @property
    def author(self):
        """Gets the author of this AwContentVersionModel.  # noqa: E501

        The author of the content version.  # noqa: E501

        :return: The author of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this AwContentVersionModel.

        The author of the content version.  # noqa: E501

        :param author: The author of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def subject(self):
        """Gets the subject of this AwContentVersionModel.  # noqa: E501

        The subject for the content version.  # noqa: E501

        :return: The subject of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this AwContentVersionModel.

        The subject for the content version.  # noqa: E501

        :param subject: The subject of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def keywords(self):
        """Gets the keywords of this AwContentVersionModel.  # noqa: E501

        Keywords for the content version.  # noqa: E501

        :return: The keywords of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this AwContentVersionModel.

        Keywords for the content version.  # noqa: E501

        :param keywords: The keywords of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def download_link(self):
        """Gets the download_link of this AwContentVersionModel.  # noqa: E501

        Download link for the content version.  # noqa: E501

        :return: The download_link of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._download_link

    @download_link.setter
    def download_link(self, download_link):
        """Sets the download_link of this AwContentVersionModel.

        Download link for the content version.  # noqa: E501

        :param download_link: The download_link of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._download_link = download_link

    @property
    def hash_algorithm(self):
        """Gets the hash_algorithm of this AwContentVersionModel.  # noqa: E501

        The algorithm used to compute the hash.  # noqa: E501

        :return: The hash_algorithm of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._hash_algorithm

    @hash_algorithm.setter
    def hash_algorithm(self, hash_algorithm):
        """Sets the hash_algorithm of this AwContentVersionModel.

        The algorithm used to compute the hash.  # noqa: E501

        :param hash_algorithm: The hash_algorithm of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._hash_algorithm = hash_algorithm

    @property
    def id(self):
        """Gets the id of this AwContentVersionModel.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this AwContentVersionModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AwContentVersionModel.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this AwContentVersionModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this AwContentVersionModel.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this AwContentVersionModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AwContentVersionModel.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this AwContentVersionModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AwContentVersionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwContentVersionModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwContentVersionModel):
            return True

        return self.to_dict() != other.to_dict()
