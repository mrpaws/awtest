# coding: utf-8

"""
    MDM API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv3.configuration import Configuration


class ProfileV3Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payloads': 'list[BasePayloadV3Entity]',
        'add_version': 'bool',
        'allow_removal': 'str',
        'assigned_schedule': 'list[int]',
        'assigned_smart_groups': 'list[str]',
        'assignment_type': 'str',
        'deployment': 'str',
        'description': 'str',
        'excluded_smart_groups': 'list[str]',
        'expiration_date': 'datetime',
        'is_active': 'bool',
        'managed_organization_group_uuid': 'str',
        'name': 'str',
        'platform': 'str',
        'profile_context': 'str',
        'profile_uuid': 'str',
        'removal_authorization_password': 'str',
        'version': 'int'
    }

    attribute_map = {
        'payloads': 'payloads',
        'add_version': 'add_version',
        'allow_removal': 'allow_removal',
        'assigned_schedule': 'assigned_schedule',
        'assigned_smart_groups': 'assigned_smart_groups',
        'assignment_type': 'assignment_type',
        'deployment': 'deployment',
        'description': 'description',
        'excluded_smart_groups': 'excluded_smart_groups',
        'expiration_date': 'expiration_date',
        'is_active': 'is_active',
        'managed_organization_group_uuid': 'managed_organization_group_uuid',
        'name': 'name',
        'platform': 'platform',
        'profile_context': 'profile_context',
        'profile_uuid': 'profile_uuid',
        'removal_authorization_password': 'removal_authorization_password',
        'version': 'version'
    }

    def __init__(self, payloads=None, add_version=None, allow_removal=None, assigned_schedule=None, assigned_smart_groups=None, assignment_type=None, deployment=None, description=None, excluded_smart_groups=None, expiration_date=None, is_active=None, managed_organization_group_uuid=None, name=None, platform=None, profile_context=None, profile_uuid=None, removal_authorization_password=None, version=None, _configuration=None):  # noqa: E501
        """ProfileV3Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._payloads = None
        self._add_version = None
        self._allow_removal = None
        self._assigned_schedule = None
        self._assigned_smart_groups = None
        self._assignment_type = None
        self._deployment = None
        self._description = None
        self._excluded_smart_groups = None
        self._expiration_date = None
        self._is_active = None
        self._managed_organization_group_uuid = None
        self._name = None
        self._platform = None
        self._profile_context = None
        self._profile_uuid = None
        self._removal_authorization_password = None
        self._version = None
        self.discriminator = None

        if payloads is not None:
            self.payloads = payloads
        if add_version is not None:
            self.add_version = add_version
        if allow_removal is not None:
            self.allow_removal = allow_removal
        if assigned_schedule is not None:
            self.assigned_schedule = assigned_schedule
        if assigned_smart_groups is not None:
            self.assigned_smart_groups = assigned_smart_groups
        if assignment_type is not None:
            self.assignment_type = assignment_type
        if deployment is not None:
            self.deployment = deployment
        if description is not None:
            self.description = description
        if excluded_smart_groups is not None:
            self.excluded_smart_groups = excluded_smart_groups
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if is_active is not None:
            self.is_active = is_active
        if managed_organization_group_uuid is not None:
            self.managed_organization_group_uuid = managed_organization_group_uuid
        if name is not None:
            self.name = name
        if platform is not None:
            self.platform = platform
        if profile_context is not None:
            self.profile_context = profile_context
        if profile_uuid is not None:
            self.profile_uuid = profile_uuid
        if removal_authorization_password is not None:
            self.removal_authorization_password = removal_authorization_password
        if version is not None:
            self.version = version

    @property
    def payloads(self):
        """Gets the payloads of this ProfileV3Entity.  # noqa: E501

        Gets or sets different types for profile payloads.  # noqa: E501

        :return: The payloads of this ProfileV3Entity.  # noqa: E501
        :rtype: list[BasePayloadV3Entity]
        """
        return self._payloads

    @payloads.setter
    def payloads(self, payloads):
        """Sets the payloads of this ProfileV3Entity.

        Gets or sets different types for profile payloads.  # noqa: E501

        :param payloads: The payloads of this ProfileV3Entity.  # noqa: E501
        :type: list[BasePayloadV3Entity]
        """

        self._payloads = payloads

    @property
    def add_version(self):
        """Gets the add_version of this ProfileV3Entity.  # noqa: E501

        Gets or sets flag to indicate whether to add a new version during update operation.  # noqa: E501

        :return: The add_version of this ProfileV3Entity.  # noqa: E501
        :rtype: bool
        """
        return self._add_version

    @add_version.setter
    def add_version(self, add_version):
        """Sets the add_version of this ProfileV3Entity.

        Gets or sets flag to indicate whether to add a new version during update operation.  # noqa: E501

        :param add_version: The add_version of this ProfileV3Entity.  # noqa: E501
        :type: bool
        """

        self._add_version = add_version

    @property
    def allow_removal(self):
        """Gets the allow_removal of this ProfileV3Entity.  # noqa: E501

        Gets or sets allow removal type (Always, WithAuthorization, Never).  # noqa: E501

        :return: The allow_removal of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._allow_removal

    @allow_removal.setter
    def allow_removal(self, allow_removal):
        """Sets the allow_removal of this ProfileV3Entity.

        Gets or sets allow removal type (Always, WithAuthorization, Never).  # noqa: E501

        :param allow_removal: The allow_removal of this ProfileV3Entity.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALWAYS", "WITH_AUTHORIZATION", "NEVER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                allow_removal not in allowed_values):
            raise ValueError(
                "Invalid value for `allow_removal` ({0}), must be one of {1}"  # noqa: E501
                .format(allow_removal, allowed_values)
            )

        self._allow_removal = allow_removal

    @property
    def assigned_schedule(self):
        """Gets the assigned_schedule of this ProfileV3Entity.  # noqa: E501

        Gets or sets assigned time schedule ids.  # noqa: E501

        :return: The assigned_schedule of this ProfileV3Entity.  # noqa: E501
        :rtype: list[int]
        """
        return self._assigned_schedule

    @assigned_schedule.setter
    def assigned_schedule(self, assigned_schedule):
        """Sets the assigned_schedule of this ProfileV3Entity.

        Gets or sets assigned time schedule ids.  # noqa: E501

        :param assigned_schedule: The assigned_schedule of this ProfileV3Entity.  # noqa: E501
        :type: list[int]
        """

        self._assigned_schedule = assigned_schedule

    @property
    def assigned_smart_groups(self):
        """Gets the assigned_smart_groups of this ProfileV3Entity.  # noqa: E501

        Gets or Sets AssignedSmartGroups.  # noqa: E501

        :return: The assigned_smart_groups of this ProfileV3Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_smart_groups

    @assigned_smart_groups.setter
    def assigned_smart_groups(self, assigned_smart_groups):
        """Sets the assigned_smart_groups of this ProfileV3Entity.

        Gets or Sets AssignedSmartGroups.  # noqa: E501

        :param assigned_smart_groups: The assigned_smart_groups of this ProfileV3Entity.  # noqa: E501
        :type: list[str]
        """

        self._assigned_smart_groups = assigned_smart_groups

    @property
    def assignment_type(self):
        """Gets the assignment_type of this ProfileV3Entity.  # noqa: E501

        Gets or sets assignment type (Auto, Optional, Compliance).  # noqa: E501

        :return: The assignment_type of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this ProfileV3Entity.

        Gets or sets assignment type (Auto, Optional, Compliance).  # noqa: E501

        :param assignment_type: The assignment_type of this ProfileV3Entity.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTO", "OPTIONAL", "INTERACTIVE", "COMPLIANCE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                assignment_type not in allowed_values):
            raise ValueError(
                "Invalid value for `assignment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignment_type, allowed_values)
            )

        self._assignment_type = assignment_type

    @property
    def deployment(self):
        """Gets the deployment of this ProfileV3Entity.  # noqa: E501

        Gets or sets is managed or not.  # noqa: E501

        :return: The deployment of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this ProfileV3Entity.

        Gets or sets is managed or not.  # noqa: E501

        :param deployment: The deployment of this ProfileV3Entity.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGED", "MANUAL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                deployment not in allowed_values):
            raise ValueError(
                "Invalid value for `deployment` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment, allowed_values)
            )

        self._deployment = deployment

    @property
    def description(self):
        """Gets the description of this ProfileV3Entity.  # noqa: E501

        Gets or sets brief description of the profile.  # noqa: E501

        :return: The description of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProfileV3Entity.

        Gets or sets brief description of the profile.  # noqa: E501

        :param description: The description of this ProfileV3Entity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def excluded_smart_groups(self):
        """Gets the excluded_smart_groups of this ProfileV3Entity.  # noqa: E501

        Gets or sets excluded smart groups.  # noqa: E501

        :return: The excluded_smart_groups of this ProfileV3Entity.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_smart_groups

    @excluded_smart_groups.setter
    def excluded_smart_groups(self, excluded_smart_groups):
        """Sets the excluded_smart_groups of this ProfileV3Entity.

        Gets or sets excluded smart groups.  # noqa: E501

        :param excluded_smart_groups: The excluded_smart_groups of this ProfileV3Entity.  # noqa: E501
        :type: list[str]
        """

        self._excluded_smart_groups = excluded_smart_groups

    @property
    def expiration_date(self):
        """Gets the expiration_date of this ProfileV3Entity.  # noqa: E501

        Gets or sets expiration date of the profile.  # noqa: E501

        :return: The expiration_date of this ProfileV3Entity.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this ProfileV3Entity.

        Gets or sets expiration date of the profile.  # noqa: E501

        :param expiration_date: The expiration_date of this ProfileV3Entity.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def is_active(self):
        """Gets the is_active of this ProfileV3Entity.  # noqa: E501

        Gets or sets is active or not.  # noqa: E501

        :return: The is_active of this ProfileV3Entity.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ProfileV3Entity.

        Gets or sets is active or not.  # noqa: E501

        :param is_active: The is_active of this ProfileV3Entity.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def managed_organization_group_uuid(self):
        """Gets the managed_organization_group_uuid of this ProfileV3Entity.  # noqa: E501

        Gets or sets managed organization group uuid.  # noqa: E501

        :return: The managed_organization_group_uuid of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._managed_organization_group_uuid

    @managed_organization_group_uuid.setter
    def managed_organization_group_uuid(self, managed_organization_group_uuid):
        """Sets the managed_organization_group_uuid of this ProfileV3Entity.

        Gets or sets managed organization group uuid.  # noqa: E501

        :param managed_organization_group_uuid: The managed_organization_group_uuid of this ProfileV3Entity.  # noqa: E501
        :type: str
        """

        self._managed_organization_group_uuid = managed_organization_group_uuid

    @property
    def name(self):
        """Gets the name of this ProfileV3Entity.  # noqa: E501

        Gets or sets profile name.  # noqa: E501

        :return: The name of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProfileV3Entity.

        Gets or sets profile name.  # noqa: E501

        :param name: The name of this ProfileV3Entity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this ProfileV3Entity.  # noqa: E501

        Gets or sets platform for profile.  # noqa: E501

        :return: The platform of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ProfileV3Entity.

        Gets or sets platform for profile.  # noqa: E501

        :param platform: The platform of this ProfileV3Entity.  # noqa: E501
        :type: str
        """
        allowed_values = ["ANDROID", "MAC", "IOS", "TVOS", "CHROMEOS", "LINUX", "WINDOWS7", "WINDOWSDESKTOP", "WINDOWSPHONE", "WINDOWSRUGGED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                platform not in allowed_values):
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def profile_context(self):
        """Gets the profile_context of this ProfileV3Entity.  # noqa: E501

        Gets or sets context of profile (Device, User).  # noqa: E501

        :return: The profile_context of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._profile_context

    @profile_context.setter
    def profile_context(self, profile_context):
        """Sets the profile_context of this ProfileV3Entity.

        Gets or sets context of profile (Device, User).  # noqa: E501

        :param profile_context: The profile_context of this ProfileV3Entity.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEVICE", "USER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                profile_context not in allowed_values):
            raise ValueError(
                "Invalid value for `profile_context` ({0}), must be one of {1}"  # noqa: E501
                .format(profile_context, allowed_values)
            )

        self._profile_context = profile_context

    @property
    def profile_uuid(self):
        """Gets the profile_uuid of this ProfileV3Entity.  # noqa: E501

        Gets or sets unique identifier for profile.  # noqa: E501

        :return: The profile_uuid of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._profile_uuid

    @profile_uuid.setter
    def profile_uuid(self, profile_uuid):
        """Sets the profile_uuid of this ProfileV3Entity.

        Gets or sets unique identifier for profile.  # noqa: E501

        :param profile_uuid: The profile_uuid of this ProfileV3Entity.  # noqa: E501
        :type: str
        """

        self._profile_uuid = profile_uuid

    @property
    def removal_authorization_password(self):
        """Gets the removal_authorization_password of this ProfileV3Entity.  # noqa: E501

        Gets or sets password is required, when allow_removal is WITH_AUTHORIZATION.  # noqa: E501

        :return: The removal_authorization_password of this ProfileV3Entity.  # noqa: E501
        :rtype: str
        """
        return self._removal_authorization_password

    @removal_authorization_password.setter
    def removal_authorization_password(self, removal_authorization_password):
        """Sets the removal_authorization_password of this ProfileV3Entity.

        Gets or sets password is required, when allow_removal is WITH_AUTHORIZATION.  # noqa: E501

        :param removal_authorization_password: The removal_authorization_password of this ProfileV3Entity.  # noqa: E501
        :type: str
        """

        self._removal_authorization_password = removal_authorization_password

    @property
    def version(self):
        """Gets the version of this ProfileV3Entity.  # noqa: E501

        Gets or sets profile version.  # noqa: E501

        :return: The version of this ProfileV3Entity.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ProfileV3Entity.

        Gets or sets profile version.  # noqa: E501

        :param version: The version of this ProfileV3Entity.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileV3Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileV3Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProfileV3Entity):
            return True

        return self.to_dict() != other.to_dict()
