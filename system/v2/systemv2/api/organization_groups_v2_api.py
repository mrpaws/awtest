# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv2.api_client import ApiClient


class OrganizationGroupsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def organization_groups_v2_delete_organization_group(self, uuid, **kwargs):  # noqa: E501
        """New - Deletes the specified organization group.  # noqa: E501

        Delete organization group by given UUID. It return Forbidden if user want to delete current organization group. It returns bad request,if organization group cannot be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_v2_delete_organization_group(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for an organization group on which operation is to be executed.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_v2_delete_organization_group_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_v2_delete_organization_group_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def organization_groups_v2_delete_organization_group_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Deletes the specified organization group.  # noqa: E501

        Delete organization group by given UUID. It return Forbidden if user want to delete current organization group. It returns bad request,if organization group cannot be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_v2_delete_organization_group_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for an organization group on which operation is to be executed.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_v2_delete_organization_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `organization_groups_v2_delete_organization_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_v2_get_organization_group(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves information about the specified organization group.  # noqa: E501

        Retrieves organization group by UUID. If Organization goup is not found, it will throw 404 error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_v2_get_organization_group(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for an organization group on which operation is to be executed.(Required) (required)
        :return: OrganizationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_v2_get_organization_group_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_v2_get_organization_group_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def organization_groups_v2_get_organization_group_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves information about the specified organization group.  # noqa: E501

        Retrieves organization group by UUID. If Organization goup is not found, it will throw 404 error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_v2_get_organization_group_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for an organization group on which operation is to be executed.(Required) (required)
        :return: OrganizationGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_v2_get_organization_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `organization_groups_v2_get_organization_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_v2_update_organization_group(self, uuid, organization_group, **kwargs):  # noqa: E501
        """New - Updates the metadata of the specified organization group.  # noqa: E501

        Update the metadata of organization group specified by UUID. It return bad request if organization group name too long or group id too long.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_v2_update_organization_group(uuid, organization_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for an organization group on which operation is to be executed.(Required) (required)
        :param OrganizationGroup organization_group: model containing OG details(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_v2_update_organization_group_with_http_info(uuid, organization_group, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_v2_update_organization_group_with_http_info(uuid, organization_group, **kwargs)  # noqa: E501
            return data

    def organization_groups_v2_update_organization_group_with_http_info(self, uuid, organization_group, **kwargs):  # noqa: E501
        """New - Updates the metadata of the specified organization group.  # noqa: E501

        Update the metadata of organization group specified by UUID. It return bad request if organization group name too long or group id too long.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_v2_update_organization_group_with_http_info(uuid, organization_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for an organization group on which operation is to be executed.(Required) (required)
        :param OrganizationGroup organization_group: model containing OG details(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'organization_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_v2_update_organization_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `organization_groups_v2_update_organization_group`")  # noqa: E501
        # verify the required parameter 'organization_group' is set
        if self.api_client.client_side_validation and ('organization_group' not in params or
                                                       params['organization_group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group` when calling `organization_groups_v2_update_organization_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'organization_group' in params:
            body_params = params['organization_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
