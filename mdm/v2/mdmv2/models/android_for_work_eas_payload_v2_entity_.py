# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkEASPayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mail_client': 'int',
        'host': 'str',
        'use_ssl': 'bool',
        'enable_validation_on_ssl_certificates': 'bool',
        'use_smime': 'bool',
        's_mime_signing_certificate_name': 'str',
        's_mime_encryption_certificate_name': 'str',
        'domain': 'str',
        'user_name': 'str',
        'email_address': 'str',
        'password': 'str',
        'login_certificate_name': 'str',
        'email_signature_default': 'str',
        'email_max_attachment_size_mb': 'int',
        'work_managed_settings': 'AndroidForWorkEASWorkManageSettings_',
        'air_watch_inbox_settings': 'AndroidForWorkEASAirWatchInboxSettings_'
    }

    attribute_map = {
        'mail_client': 'MailClient',
        'host': 'Host',
        'use_ssl': 'UseSSL',
        'enable_validation_on_ssl_certificates': 'EnableValidationOnSSLCertificates',
        'use_smime': 'UseSMIME',
        's_mime_signing_certificate_name': 'SMimeSigningCertificateName',
        's_mime_encryption_certificate_name': 'SMimeEncryptionCertificateName',
        'domain': 'Domain',
        'user_name': 'UserName',
        'email_address': 'EmailAddress',
        'password': 'Password',
        'login_certificate_name': 'LoginCertificateName',
        'email_signature_default': 'EmailSignatureDefault',
        'email_max_attachment_size_mb': 'EmailMaxAttachmentSizeMB',
        'work_managed_settings': 'WorkManagedSettings',
        'air_watch_inbox_settings': 'AirWatchInboxSettings'
    }

    def __init__(self, mail_client=None, host=None, use_ssl=None, enable_validation_on_ssl_certificates=None, use_smime=None, s_mime_signing_certificate_name=None, s_mime_encryption_certificate_name=None, domain=None, user_name=None, email_address=None, password=None, login_certificate_name=None, email_signature_default=None, email_max_attachment_size_mb=None, work_managed_settings=None, air_watch_inbox_settings=None, _configuration=None):  # noqa: E501
        """AndroidForWorkEASPayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mail_client = None
        self._host = None
        self._use_ssl = None
        self._enable_validation_on_ssl_certificates = None
        self._use_smime = None
        self._s_mime_signing_certificate_name = None
        self._s_mime_encryption_certificate_name = None
        self._domain = None
        self._user_name = None
        self._email_address = None
        self._password = None
        self._login_certificate_name = None
        self._email_signature_default = None
        self._email_max_attachment_size_mb = None
        self._work_managed_settings = None
        self._air_watch_inbox_settings = None
        self.discriminator = None

        if mail_client is not None:
            self.mail_client = mail_client
        self.host = host
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if enable_validation_on_ssl_certificates is not None:
            self.enable_validation_on_ssl_certificates = enable_validation_on_ssl_certificates
        if use_smime is not None:
            self.use_smime = use_smime
        if s_mime_signing_certificate_name is not None:
            self.s_mime_signing_certificate_name = s_mime_signing_certificate_name
        if s_mime_encryption_certificate_name is not None:
            self.s_mime_encryption_certificate_name = s_mime_encryption_certificate_name
        if domain is not None:
            self.domain = domain
        if user_name is not None:
            self.user_name = user_name
        if email_address is not None:
            self.email_address = email_address
        if password is not None:
            self.password = password
        if login_certificate_name is not None:
            self.login_certificate_name = login_certificate_name
        if email_signature_default is not None:
            self.email_signature_default = email_signature_default
        if email_max_attachment_size_mb is not None:
            self.email_max_attachment_size_mb = email_max_attachment_size_mb
        if work_managed_settings is not None:
            self.work_managed_settings = work_managed_settings
        if air_watch_inbox_settings is not None:
            self.air_watch_inbox_settings = air_watch_inbox_settings

    @property
    def mail_client(self):
        """Gets the mail_client of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the type of the mail client.  # noqa: E501

        :return: The mail_client of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._mail_client

    @mail_client.setter
    def mail_client(self, mail_client):
        """Sets the mail_client of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the type of the mail client.  # noqa: E501

        :param mail_client: The mail_client of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._mail_client = mail_client

    @property
    def host(self):
        """Gets the host of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the host.  # noqa: E501

        :return: The host of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the host.  # noqa: E501

        :param host: The host of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def use_ssl(self):
        """Gets the use_ssl of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether [use SSL].  # noqa: E501

        :return: The use_ssl of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets a value indicating whether [use SSL].  # noqa: E501

        :param use_ssl: The use_ssl of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def enable_validation_on_ssl_certificates(self):
        """Gets the enable_validation_on_ssl_certificates of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the trust all certificates.  # noqa: E501

        :return: The enable_validation_on_ssl_certificates of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_validation_on_ssl_certificates

    @enable_validation_on_ssl_certificates.setter
    def enable_validation_on_ssl_certificates(self, enable_validation_on_ssl_certificates):
        """Sets the enable_validation_on_ssl_certificates of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the trust all certificates.  # noqa: E501

        :param enable_validation_on_ssl_certificates: The enable_validation_on_ssl_certificates of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_validation_on_ssl_certificates = enable_validation_on_ssl_certificates

    @property
    def use_smime(self):
        """Gets the use_smime of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the smime enabled.  # noqa: E501

        :return: The use_smime of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._use_smime

    @use_smime.setter
    def use_smime(self, use_smime):
        """Sets the use_smime of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the smime enabled.  # noqa: E501

        :param use_smime: The use_smime of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._use_smime = use_smime

    @property
    def s_mime_signing_certificate_name(self):
        """Gets the s_mime_signing_certificate_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the name of the s MIME signing certificate.  # noqa: E501

        :return: The s_mime_signing_certificate_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._s_mime_signing_certificate_name

    @s_mime_signing_certificate_name.setter
    def s_mime_signing_certificate_name(self, s_mime_signing_certificate_name):
        """Sets the s_mime_signing_certificate_name of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the name of the s MIME signing certificate.  # noqa: E501

        :param s_mime_signing_certificate_name: The s_mime_signing_certificate_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._s_mime_signing_certificate_name = s_mime_signing_certificate_name

    @property
    def s_mime_encryption_certificate_name(self):
        """Gets the s_mime_encryption_certificate_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the name of the s MIME encryption certificate.  # noqa: E501

        :return: The s_mime_encryption_certificate_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._s_mime_encryption_certificate_name

    @s_mime_encryption_certificate_name.setter
    def s_mime_encryption_certificate_name(self, s_mime_encryption_certificate_name):
        """Sets the s_mime_encryption_certificate_name of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the name of the s MIME encryption certificate.  # noqa: E501

        :param s_mime_encryption_certificate_name: The s_mime_encryption_certificate_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._s_mime_encryption_certificate_name = s_mime_encryption_certificate_name

    @property
    def domain(self):
        """Gets the domain of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the domain.  # noqa: E501

        :return: The domain of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the domain.  # noqa: E501

        :param domain: The domain of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def user_name(self):
        """Gets the user_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the name of the user.  # noqa: E501

        :return: The user_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the name of the user.  # noqa: E501

        :param user_name: The user_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def email_address(self):
        """Gets the email_address of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the email address.  # noqa: E501

        :return: The email_address of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the email address.  # noqa: E501

        :param email_address: The email_address of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def password(self):
        """Gets the password of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the password.  # noqa: E501

        :return: The password of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the password.  # noqa: E501

        :param password: The password of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def login_certificate_name(self):
        """Gets the login_certificate_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the name of the login certificate.  # noqa: E501

        :return: The login_certificate_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._login_certificate_name

    @login_certificate_name.setter
    def login_certificate_name(self, login_certificate_name):
        """Sets the login_certificate_name of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the name of the login certificate.  # noqa: E501

        :param login_certificate_name: The login_certificate_name of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: str
        """

        self._login_certificate_name = login_certificate_name

    @property
    def email_signature_default(self):
        """Gets the email_signature_default of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the email signature default.  # noqa: E501

        :return: The email_signature_default of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: str
        """
        return self._email_signature_default

    @email_signature_default.setter
    def email_signature_default(self, email_signature_default):
        """Sets the email_signature_default of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the email signature default.  # noqa: E501

        :param email_signature_default: The email_signature_default of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                email_signature_default is not None and len(email_signature_default) > 255):
            raise ValueError("Invalid value for `email_signature_default`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                email_signature_default is not None and len(email_signature_default) < 0):
            raise ValueError("Invalid value for `email_signature_default`, length must be greater than or equal to `0`")  # noqa: E501

        self._email_signature_default = email_signature_default

    @property
    def email_max_attachment_size_mb(self):
        """Gets the email_max_attachment_size_mb of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the email maximum attachment size mb.  # noqa: E501

        :return: The email_max_attachment_size_mb of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._email_max_attachment_size_mb

    @email_max_attachment_size_mb.setter
    def email_max_attachment_size_mb(self, email_max_attachment_size_mb):
        """Sets the email_max_attachment_size_mb of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the email maximum attachment size mb.  # noqa: E501

        :param email_max_attachment_size_mb: The email_max_attachment_size_mb of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._email_max_attachment_size_mb = email_max_attachment_size_mb

    @property
    def work_managed_settings(self):
        """Gets the work_managed_settings of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the work managed settings.  # noqa: E501

        :return: The work_managed_settings of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: AndroidForWorkEASWorkManageSettings_
        """
        return self._work_managed_settings

    @work_managed_settings.setter
    def work_managed_settings(self, work_managed_settings):
        """Sets the work_managed_settings of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the work managed settings.  # noqa: E501

        :param work_managed_settings: The work_managed_settings of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: AndroidForWorkEASWorkManageSettings_
        """

        self._work_managed_settings = work_managed_settings

    @property
    def air_watch_inbox_settings(self):
        """Gets the air_watch_inbox_settings of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501

        Gets or sets the air watch inbox settings.  # noqa: E501

        :return: The air_watch_inbox_settings of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :rtype: AndroidForWorkEASAirWatchInboxSettings_
        """
        return self._air_watch_inbox_settings

    @air_watch_inbox_settings.setter
    def air_watch_inbox_settings(self, air_watch_inbox_settings):
        """Sets the air_watch_inbox_settings of this AndroidForWorkEASPayloadV2Entity_.

        Gets or sets the air watch inbox settings.  # noqa: E501

        :param air_watch_inbox_settings: The air_watch_inbox_settings of this AndroidForWorkEASPayloadV2Entity_.  # noqa: E501
        :type: AndroidForWorkEASAirWatchInboxSettings_
        """

        self._air_watch_inbox_settings = air_watch_inbox_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkEASPayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkEASPayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkEASPayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
