# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class DevicePolicyStepEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application': 'DeviceInventoryEntity',
        'profile': 'DeviceInventoryEntity',
        'provisioning_product': 'DeviceInventoryEntity',
        'event_action': 'DeviceInventoryEntity',
        'vpn_profile': 'DeviceInventoryEntity',
        'afwvpn_profile': 'DeviceInventoryEntity',
        'device_policy_step_id': 'int',
        'device_policy_id': 'int',
        'execution_task_type_id': 'int',
        'sequence_number': 'int',
        'device_profile_id': 'int',
        'application_id': 'int',
        'provisioning_product_id': 'int',
        'persist': 'bool',
        'event_action_id': 'int',
        'vpn_access': 'bool',
        'vpn_profile_id': 'int',
        'afwvpn_profile_id': 'int',
        'file_action_name': 'str',
        'event_action_name': 'str',
        'profile_name': 'str',
        'application_bundle_id': 'str',
        'application_package_version': 'str',
        'device_profile_version_id': 'int',
        'application_version_hash': 'str',
        'provisioning_product_version': 'int',
        'provisioning_product_name': 'str',
        'application_build_package_version': 'str',
        'event_action_version': 'int',
        'application_version_string': 'str',
        'unique_application_identifier': 'str',
        'profile_unique_key': 'str',
        'profile_version': 'int',
        'file_action_base_file_name': 'str',
        'table_name': 'str',
        'id_field': 'int'
    }

    attribute_map = {
        'application': 'Application',
        'profile': 'Profile',
        'provisioning_product': 'ProvisioningProduct',
        'event_action': 'EventAction',
        'vpn_profile': 'VPNProfile',
        'afwvpn_profile': 'AFWVPNProfile',
        'device_policy_step_id': 'DevicePolicyStepID',
        'device_policy_id': 'DevicePolicyID',
        'execution_task_type_id': 'ExecutionTaskTypeID',
        'sequence_number': 'SequenceNumber',
        'device_profile_id': 'DeviceProfileID',
        'application_id': 'ApplicationID',
        'provisioning_product_id': 'ProvisioningProductID',
        'persist': 'Persist',
        'event_action_id': 'EventActionID',
        'vpn_access': 'VPNAccess',
        'vpn_profile_id': 'VPNProfileID',
        'afwvpn_profile_id': 'AFWVPNProfileID',
        'file_action_name': 'FileActionName',
        'event_action_name': 'EventActionName',
        'profile_name': 'ProfileName',
        'application_bundle_id': 'ApplicationBundleID',
        'application_package_version': 'ApplicationPackageVersion',
        'device_profile_version_id': 'DeviceProfileVersionID',
        'application_version_hash': 'ApplicationVersionHash',
        'provisioning_product_version': 'ProvisioningProductVersion',
        'provisioning_product_name': 'ProvisioningProductName',
        'application_build_package_version': 'ApplicationBuildPackageVersion',
        'event_action_version': 'EventActionVersion',
        'application_version_string': 'ApplicationVersionString',
        'unique_application_identifier': 'UniqueApplicationIdentifier',
        'profile_unique_key': 'ProfileUniqueKey',
        'profile_version': 'ProfileVersion',
        'file_action_base_file_name': 'FileActionBaseFileName',
        'table_name': 'TableName',
        'id_field': 'IDField'
    }

    def __init__(self, application=None, profile=None, provisioning_product=None, event_action=None, vpn_profile=None, afwvpn_profile=None, device_policy_step_id=None, device_policy_id=None, execution_task_type_id=None, sequence_number=None, device_profile_id=None, application_id=None, provisioning_product_id=None, persist=None, event_action_id=None, vpn_access=None, vpn_profile_id=None, afwvpn_profile_id=None, file_action_name=None, event_action_name=None, profile_name=None, application_bundle_id=None, application_package_version=None, device_profile_version_id=None, application_version_hash=None, provisioning_product_version=None, provisioning_product_name=None, application_build_package_version=None, event_action_version=None, application_version_string=None, unique_application_identifier=None, profile_unique_key=None, profile_version=None, file_action_base_file_name=None, table_name=None, id_field=None, _configuration=None):  # noqa: E501
        """DevicePolicyStepEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application = None
        self._profile = None
        self._provisioning_product = None
        self._event_action = None
        self._vpn_profile = None
        self._afwvpn_profile = None
        self._device_policy_step_id = None
        self._device_policy_id = None
        self._execution_task_type_id = None
        self._sequence_number = None
        self._device_profile_id = None
        self._application_id = None
        self._provisioning_product_id = None
        self._persist = None
        self._event_action_id = None
        self._vpn_access = None
        self._vpn_profile_id = None
        self._afwvpn_profile_id = None
        self._file_action_name = None
        self._event_action_name = None
        self._profile_name = None
        self._application_bundle_id = None
        self._application_package_version = None
        self._device_profile_version_id = None
        self._application_version_hash = None
        self._provisioning_product_version = None
        self._provisioning_product_name = None
        self._application_build_package_version = None
        self._event_action_version = None
        self._application_version_string = None
        self._unique_application_identifier = None
        self._profile_unique_key = None
        self._profile_version = None
        self._file_action_base_file_name = None
        self._table_name = None
        self._id_field = None
        self.discriminator = None

        if application is not None:
            self.application = application
        if profile is not None:
            self.profile = profile
        if provisioning_product is not None:
            self.provisioning_product = provisioning_product
        if event_action is not None:
            self.event_action = event_action
        if vpn_profile is not None:
            self.vpn_profile = vpn_profile
        if afwvpn_profile is not None:
            self.afwvpn_profile = afwvpn_profile
        if device_policy_step_id is not None:
            self.device_policy_step_id = device_policy_step_id
        if device_policy_id is not None:
            self.device_policy_id = device_policy_id
        if execution_task_type_id is not None:
            self.execution_task_type_id = execution_task_type_id
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if device_profile_id is not None:
            self.device_profile_id = device_profile_id
        if application_id is not None:
            self.application_id = application_id
        if provisioning_product_id is not None:
            self.provisioning_product_id = provisioning_product_id
        if persist is not None:
            self.persist = persist
        if event_action_id is not None:
            self.event_action_id = event_action_id
        if vpn_access is not None:
            self.vpn_access = vpn_access
        if vpn_profile_id is not None:
            self.vpn_profile_id = vpn_profile_id
        if afwvpn_profile_id is not None:
            self.afwvpn_profile_id = afwvpn_profile_id
        if file_action_name is not None:
            self.file_action_name = file_action_name
        if event_action_name is not None:
            self.event_action_name = event_action_name
        if profile_name is not None:
            self.profile_name = profile_name
        if application_bundle_id is not None:
            self.application_bundle_id = application_bundle_id
        if application_package_version is not None:
            self.application_package_version = application_package_version
        if device_profile_version_id is not None:
            self.device_profile_version_id = device_profile_version_id
        if application_version_hash is not None:
            self.application_version_hash = application_version_hash
        if provisioning_product_version is not None:
            self.provisioning_product_version = provisioning_product_version
        if provisioning_product_name is not None:
            self.provisioning_product_name = provisioning_product_name
        if application_build_package_version is not None:
            self.application_build_package_version = application_build_package_version
        if event_action_version is not None:
            self.event_action_version = event_action_version
        if application_version_string is not None:
            self.application_version_string = application_version_string
        if unique_application_identifier is not None:
            self.unique_application_identifier = unique_application_identifier
        if profile_unique_key is not None:
            self.profile_unique_key = profile_unique_key
        if profile_version is not None:
            self.profile_version = profile_version
        if file_action_base_file_name is not None:
            self.file_action_base_file_name = file_action_base_file_name
        if table_name is not None:
            self.table_name = table_name
        if id_field is not None:
            self.id_field = id_field

    @property
    def application(self):
        """Gets the application of this DevicePolicyStepEntity.  # noqa: E501


        :return: The application of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: DeviceInventoryEntity
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this DevicePolicyStepEntity.


        :param application: The application of this DevicePolicyStepEntity.  # noqa: E501
        :type: DeviceInventoryEntity
        """

        self._application = application

    @property
    def profile(self):
        """Gets the profile of this DevicePolicyStepEntity.  # noqa: E501


        :return: The profile of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: DeviceInventoryEntity
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this DevicePolicyStepEntity.


        :param profile: The profile of this DevicePolicyStepEntity.  # noqa: E501
        :type: DeviceInventoryEntity
        """

        self._profile = profile

    @property
    def provisioning_product(self):
        """Gets the provisioning_product of this DevicePolicyStepEntity.  # noqa: E501


        :return: The provisioning_product of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: DeviceInventoryEntity
        """
        return self._provisioning_product

    @provisioning_product.setter
    def provisioning_product(self, provisioning_product):
        """Sets the provisioning_product of this DevicePolicyStepEntity.


        :param provisioning_product: The provisioning_product of this DevicePolicyStepEntity.  # noqa: E501
        :type: DeviceInventoryEntity
        """

        self._provisioning_product = provisioning_product

    @property
    def event_action(self):
        """Gets the event_action of this DevicePolicyStepEntity.  # noqa: E501


        :return: The event_action of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: DeviceInventoryEntity
        """
        return self._event_action

    @event_action.setter
    def event_action(self, event_action):
        """Sets the event_action of this DevicePolicyStepEntity.


        :param event_action: The event_action of this DevicePolicyStepEntity.  # noqa: E501
        :type: DeviceInventoryEntity
        """

        self._event_action = event_action

    @property
    def vpn_profile(self):
        """Gets the vpn_profile of this DevicePolicyStepEntity.  # noqa: E501


        :return: The vpn_profile of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: DeviceInventoryEntity
        """
        return self._vpn_profile

    @vpn_profile.setter
    def vpn_profile(self, vpn_profile):
        """Sets the vpn_profile of this DevicePolicyStepEntity.


        :param vpn_profile: The vpn_profile of this DevicePolicyStepEntity.  # noqa: E501
        :type: DeviceInventoryEntity
        """

        self._vpn_profile = vpn_profile

    @property
    def afwvpn_profile(self):
        """Gets the afwvpn_profile of this DevicePolicyStepEntity.  # noqa: E501


        :return: The afwvpn_profile of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: DeviceInventoryEntity
        """
        return self._afwvpn_profile

    @afwvpn_profile.setter
    def afwvpn_profile(self, afwvpn_profile):
        """Sets the afwvpn_profile of this DevicePolicyStepEntity.


        :param afwvpn_profile: The afwvpn_profile of this DevicePolicyStepEntity.  # noqa: E501
        :type: DeviceInventoryEntity
        """

        self._afwvpn_profile = afwvpn_profile

    @property
    def device_policy_step_id(self):
        """Gets the device_policy_step_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The device_policy_step_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._device_policy_step_id

    @device_policy_step_id.setter
    def device_policy_step_id(self, device_policy_step_id):
        """Sets the device_policy_step_id of this DevicePolicyStepEntity.


        :param device_policy_step_id: The device_policy_step_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._device_policy_step_id = device_policy_step_id

    @property
    def device_policy_id(self):
        """Gets the device_policy_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The device_policy_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._device_policy_id

    @device_policy_id.setter
    def device_policy_id(self, device_policy_id):
        """Sets the device_policy_id of this DevicePolicyStepEntity.


        :param device_policy_id: The device_policy_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._device_policy_id = device_policy_id

    @property
    def execution_task_type_id(self):
        """Gets the execution_task_type_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The execution_task_type_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._execution_task_type_id

    @execution_task_type_id.setter
    def execution_task_type_id(self, execution_task_type_id):
        """Sets the execution_task_type_id of this DevicePolicyStepEntity.


        :param execution_task_type_id: The execution_task_type_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._execution_task_type_id = execution_task_type_id

    @property
    def sequence_number(self):
        """Gets the sequence_number of this DevicePolicyStepEntity.  # noqa: E501


        :return: The sequence_number of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this DevicePolicyStepEntity.


        :param sequence_number: The sequence_number of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def device_profile_id(self):
        """Gets the device_profile_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The device_profile_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._device_profile_id

    @device_profile_id.setter
    def device_profile_id(self, device_profile_id):
        """Sets the device_profile_id of this DevicePolicyStepEntity.


        :param device_profile_id: The device_profile_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._device_profile_id = device_profile_id

    @property
    def application_id(self):
        """Gets the application_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The application_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this DevicePolicyStepEntity.


        :param application_id: The application_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._application_id = application_id

    @property
    def provisioning_product_id(self):
        """Gets the provisioning_product_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The provisioning_product_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._provisioning_product_id

    @provisioning_product_id.setter
    def provisioning_product_id(self, provisioning_product_id):
        """Sets the provisioning_product_id of this DevicePolicyStepEntity.


        :param provisioning_product_id: The provisioning_product_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._provisioning_product_id = provisioning_product_id

    @property
    def persist(self):
        """Gets the persist of this DevicePolicyStepEntity.  # noqa: E501


        :return: The persist of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: bool
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this DevicePolicyStepEntity.


        :param persist: The persist of this DevicePolicyStepEntity.  # noqa: E501
        :type: bool
        """

        self._persist = persist

    @property
    def event_action_id(self):
        """Gets the event_action_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The event_action_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._event_action_id

    @event_action_id.setter
    def event_action_id(self, event_action_id):
        """Sets the event_action_id of this DevicePolicyStepEntity.


        :param event_action_id: The event_action_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._event_action_id = event_action_id

    @property
    def vpn_access(self):
        """Gets the vpn_access of this DevicePolicyStepEntity.  # noqa: E501


        :return: The vpn_access of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: bool
        """
        return self._vpn_access

    @vpn_access.setter
    def vpn_access(self, vpn_access):
        """Sets the vpn_access of this DevicePolicyStepEntity.


        :param vpn_access: The vpn_access of this DevicePolicyStepEntity.  # noqa: E501
        :type: bool
        """

        self._vpn_access = vpn_access

    @property
    def vpn_profile_id(self):
        """Gets the vpn_profile_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The vpn_profile_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._vpn_profile_id

    @vpn_profile_id.setter
    def vpn_profile_id(self, vpn_profile_id):
        """Sets the vpn_profile_id of this DevicePolicyStepEntity.


        :param vpn_profile_id: The vpn_profile_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._vpn_profile_id = vpn_profile_id

    @property
    def afwvpn_profile_id(self):
        """Gets the afwvpn_profile_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The afwvpn_profile_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._afwvpn_profile_id

    @afwvpn_profile_id.setter
    def afwvpn_profile_id(self, afwvpn_profile_id):
        """Sets the afwvpn_profile_id of this DevicePolicyStepEntity.


        :param afwvpn_profile_id: The afwvpn_profile_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._afwvpn_profile_id = afwvpn_profile_id

    @property
    def file_action_name(self):
        """Gets the file_action_name of this DevicePolicyStepEntity.  # noqa: E501


        :return: The file_action_name of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._file_action_name

    @file_action_name.setter
    def file_action_name(self, file_action_name):
        """Sets the file_action_name of this DevicePolicyStepEntity.


        :param file_action_name: The file_action_name of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._file_action_name = file_action_name

    @property
    def event_action_name(self):
        """Gets the event_action_name of this DevicePolicyStepEntity.  # noqa: E501


        :return: The event_action_name of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._event_action_name

    @event_action_name.setter
    def event_action_name(self, event_action_name):
        """Sets the event_action_name of this DevicePolicyStepEntity.


        :param event_action_name: The event_action_name of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._event_action_name = event_action_name

    @property
    def profile_name(self):
        """Gets the profile_name of this DevicePolicyStepEntity.  # noqa: E501


        :return: The profile_name of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this DevicePolicyStepEntity.


        :param profile_name: The profile_name of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def application_bundle_id(self):
        """Gets the application_bundle_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The application_bundle_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_bundle_id

    @application_bundle_id.setter
    def application_bundle_id(self, application_bundle_id):
        """Sets the application_bundle_id of this DevicePolicyStepEntity.


        :param application_bundle_id: The application_bundle_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._application_bundle_id = application_bundle_id

    @property
    def application_package_version(self):
        """Gets the application_package_version of this DevicePolicyStepEntity.  # noqa: E501


        :return: The application_package_version of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_package_version

    @application_package_version.setter
    def application_package_version(self, application_package_version):
        """Sets the application_package_version of this DevicePolicyStepEntity.


        :param application_package_version: The application_package_version of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._application_package_version = application_package_version

    @property
    def device_profile_version_id(self):
        """Gets the device_profile_version_id of this DevicePolicyStepEntity.  # noqa: E501


        :return: The device_profile_version_id of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._device_profile_version_id

    @device_profile_version_id.setter
    def device_profile_version_id(self, device_profile_version_id):
        """Sets the device_profile_version_id of this DevicePolicyStepEntity.


        :param device_profile_version_id: The device_profile_version_id of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._device_profile_version_id = device_profile_version_id

    @property
    def application_version_hash(self):
        """Gets the application_version_hash of this DevicePolicyStepEntity.  # noqa: E501


        :return: The application_version_hash of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_version_hash

    @application_version_hash.setter
    def application_version_hash(self, application_version_hash):
        """Sets the application_version_hash of this DevicePolicyStepEntity.


        :param application_version_hash: The application_version_hash of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._application_version_hash = application_version_hash

    @property
    def provisioning_product_version(self):
        """Gets the provisioning_product_version of this DevicePolicyStepEntity.  # noqa: E501


        :return: The provisioning_product_version of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._provisioning_product_version

    @provisioning_product_version.setter
    def provisioning_product_version(self, provisioning_product_version):
        """Sets the provisioning_product_version of this DevicePolicyStepEntity.


        :param provisioning_product_version: The provisioning_product_version of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._provisioning_product_version = provisioning_product_version

    @property
    def provisioning_product_name(self):
        """Gets the provisioning_product_name of this DevicePolicyStepEntity.  # noqa: E501


        :return: The provisioning_product_name of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._provisioning_product_name

    @provisioning_product_name.setter
    def provisioning_product_name(self, provisioning_product_name):
        """Sets the provisioning_product_name of this DevicePolicyStepEntity.


        :param provisioning_product_name: The provisioning_product_name of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._provisioning_product_name = provisioning_product_name

    @property
    def application_build_package_version(self):
        """Gets the application_build_package_version of this DevicePolicyStepEntity.  # noqa: E501


        :return: The application_build_package_version of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_build_package_version

    @application_build_package_version.setter
    def application_build_package_version(self, application_build_package_version):
        """Sets the application_build_package_version of this DevicePolicyStepEntity.


        :param application_build_package_version: The application_build_package_version of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._application_build_package_version = application_build_package_version

    @property
    def event_action_version(self):
        """Gets the event_action_version of this DevicePolicyStepEntity.  # noqa: E501


        :return: The event_action_version of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._event_action_version

    @event_action_version.setter
    def event_action_version(self, event_action_version):
        """Sets the event_action_version of this DevicePolicyStepEntity.


        :param event_action_version: The event_action_version of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._event_action_version = event_action_version

    @property
    def application_version_string(self):
        """Gets the application_version_string of this DevicePolicyStepEntity.  # noqa: E501


        :return: The application_version_string of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_version_string

    @application_version_string.setter
    def application_version_string(self, application_version_string):
        """Sets the application_version_string of this DevicePolicyStepEntity.


        :param application_version_string: The application_version_string of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._application_version_string = application_version_string

    @property
    def unique_application_identifier(self):
        """Gets the unique_application_identifier of this DevicePolicyStepEntity.  # noqa: E501


        :return: The unique_application_identifier of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._unique_application_identifier

    @unique_application_identifier.setter
    def unique_application_identifier(self, unique_application_identifier):
        """Sets the unique_application_identifier of this DevicePolicyStepEntity.


        :param unique_application_identifier: The unique_application_identifier of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._unique_application_identifier = unique_application_identifier

    @property
    def profile_unique_key(self):
        """Gets the profile_unique_key of this DevicePolicyStepEntity.  # noqa: E501


        :return: The profile_unique_key of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._profile_unique_key

    @profile_unique_key.setter
    def profile_unique_key(self, profile_unique_key):
        """Sets the profile_unique_key of this DevicePolicyStepEntity.


        :param profile_unique_key: The profile_unique_key of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._profile_unique_key = profile_unique_key

    @property
    def profile_version(self):
        """Gets the profile_version of this DevicePolicyStepEntity.  # noqa: E501


        :return: The profile_version of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._profile_version

    @profile_version.setter
    def profile_version(self, profile_version):
        """Sets the profile_version of this DevicePolicyStepEntity.


        :param profile_version: The profile_version of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._profile_version = profile_version

    @property
    def file_action_base_file_name(self):
        """Gets the file_action_base_file_name of this DevicePolicyStepEntity.  # noqa: E501


        :return: The file_action_base_file_name of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._file_action_base_file_name

    @file_action_base_file_name.setter
    def file_action_base_file_name(self, file_action_base_file_name):
        """Sets the file_action_base_file_name of this DevicePolicyStepEntity.


        :param file_action_base_file_name: The file_action_base_file_name of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._file_action_base_file_name = file_action_base_file_name

    @property
    def table_name(self):
        """Gets the table_name of this DevicePolicyStepEntity.  # noqa: E501


        :return: The table_name of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DevicePolicyStepEntity.


        :param table_name: The table_name of this DevicePolicyStepEntity.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def id_field(self):
        """Gets the id_field of this DevicePolicyStepEntity.  # noqa: E501


        :return: The id_field of this DevicePolicyStepEntity.  # noqa: E501
        :rtype: int
        """
        return self._id_field

    @id_field.setter
    def id_field(self, id_field):
        """Sets the id_field of this DevicePolicyStepEntity.


        :param id_field: The id_field of this DevicePolicyStepEntity.  # noqa: E501
        :type: int
        """

        self._id_field = id_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DevicePolicyStepEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DevicePolicyStepEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DevicePolicyStepEntity):
            return True

        return self.to_dict() != other.to_dict()
