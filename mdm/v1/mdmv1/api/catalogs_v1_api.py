# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class CatalogsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def catalogs_v1_get_all_policies_async(self, os_version_uuid, **kwargs):  # noqa: E501
        """New - Search policies in the Policy catalog of a specific version  # noqa: E501

        Returns all or matching policies from the requested catalog version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalogs_v1_get_all_policies_async(os_version_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str os_version_uuid: The operating system version identifier(Required) (required)
        :param str q: The search text
        :param str language: The language code (Default en-US)
        :param object offset: The number of records to skip (Default 0).
        :param object limit: The maximum number of rows to return (Default 10)
        :return: GetAllPoliciesResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.catalogs_v1_get_all_policies_async_with_http_info(os_version_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.catalogs_v1_get_all_policies_async_with_http_info(os_version_uuid, **kwargs)  # noqa: E501
            return data

    def catalogs_v1_get_all_policies_async_with_http_info(self, os_version_uuid, **kwargs):  # noqa: E501
        """New - Search policies in the Policy catalog of a specific version  # noqa: E501

        Returns all or matching policies from the requested catalog version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalogs_v1_get_all_policies_async_with_http_info(os_version_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str os_version_uuid: The operating system version identifier(Required) (required)
        :param str q: The search text
        :param str language: The language code (Default en-US)
        :param object offset: The number of records to skip (Default 0).
        :param object limit: The maximum number of rows to return (Default 10)
        :return: GetAllPoliciesResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_version_uuid', 'q', 'language', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_v1_get_all_policies_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_version_uuid' is set
        if self.api_client.client_side_validation and ('os_version_uuid' not in params or
                                                       params['os_version_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `os_version_uuid` when calling `catalogs_v1_get_all_policies_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_version_uuid' in params:
            path_params['osVersionUUID'] = params['os_version_uuid']  # noqa: E501

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/baselines/catalogs/{osVersionUUID}/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllPoliciesResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def catalogs_v1_get_policy_async(self, policy_uuid, **kwargs):  # noqa: E501
        """New - Fetch a policy with it's options  # noqa: E501

        Returns a policy with it's options localized for a selected language  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalogs_v1_get_policy_async(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The policy identifier(Required) (required)
        :param str language: The language code (Default en-US)
        :return: PolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.catalogs_v1_get_policy_async_with_http_info(policy_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.catalogs_v1_get_policy_async_with_http_info(policy_uuid, **kwargs)  # noqa: E501
            return data

    def catalogs_v1_get_policy_async_with_http_info(self, policy_uuid, **kwargs):  # noqa: E501
        """New - Fetch a policy with it's options  # noqa: E501

        Returns a policy with it's options localized for a selected language  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalogs_v1_get_policy_async_with_http_info(policy_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str policy_uuid: The policy identifier(Required) (required)
        :param str language: The language code (Default en-US)
        :return: PolicyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_uuid', 'language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_v1_get_policy_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_uuid' is set
        if self.api_client.client_side_validation and ('policy_uuid' not in params or
                                                       params['policy_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `policy_uuid` when calling `catalogs_v1_get_policy_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_uuid' in params:
            path_params['policyUUID'] = params['policy_uuid']  # noqa: E501

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/baselines/catalogs/policies/{policyUUID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def catalogs_v1_get_policy_catalog_async(self, os_version_uuid, **kwargs):  # noqa: E501
        """New - Fetch policy catalog for the given operating system version.  # noqa: E501

        Returns the policy catalog for the given operating system version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalogs_v1_get_policy_catalog_async(os_version_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str os_version_uuid: The operating system version identifier(Required) (required)
        :param str language: The language code (Default en-US)
        :return: PolicyCatalogModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.catalogs_v1_get_policy_catalog_async_with_http_info(os_version_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.catalogs_v1_get_policy_catalog_async_with_http_info(os_version_uuid, **kwargs)  # noqa: E501
            return data

    def catalogs_v1_get_policy_catalog_async_with_http_info(self, os_version_uuid, **kwargs):  # noqa: E501
        """New - Fetch policy catalog for the given operating system version.  # noqa: E501

        Returns the policy catalog for the given operating system version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.catalogs_v1_get_policy_catalog_async_with_http_info(os_version_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str os_version_uuid: The operating system version identifier(Required) (required)
        :param str language: The language code (Default en-US)
        :return: PolicyCatalogModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os_version_uuid', 'language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalogs_v1_get_policy_catalog_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os_version_uuid' is set
        if self.api_client.client_side_validation and ('os_version_uuid' not in params or
                                                       params['os_version_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `os_version_uuid` when calling `catalogs_v1_get_policy_catalog_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'os_version_uuid' in params:
            path_params['osVersionUUID'] = params['os_version_uuid']  # noqa: E501

        query_params = []
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/baselines/catalogs/{osVersionUUID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyCatalogModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
