# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv2.api_client import ApiClient


class EnrollmentRestrictionPolicyV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def enrollment_restriction_policy_v2_get_enrollment_restriction_policies(self, **kwargs):  # noqa: E501
        """New - Gets Enrollment Restriction Policies accessible to admin  # noqa: E501

        Fetch Enrollment Restriction Policies accessible to admin. We only return the following properties- name, uuid, organization group uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_restriction_policy_v2_get_enrollment_restriction_policies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EnrollmentRestrictionsPoliciesResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_restriction_policy_v2_get_enrollment_restriction_policies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_restriction_policy_v2_get_enrollment_restriction_policies_with_http_info(**kwargs)  # noqa: E501
            return data

    def enrollment_restriction_policy_v2_get_enrollment_restriction_policies_with_http_info(self, **kwargs):  # noqa: E501
        """New - Gets Enrollment Restriction Policies accessible to admin  # noqa: E501

        Fetch Enrollment Restriction Policies accessible to admin. We only return the following properties- name, uuid, organization group uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_restriction_policy_v2_get_enrollment_restriction_policies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EnrollmentRestrictionsPoliciesResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_restriction_policy_v2_get_enrollment_restriction_policies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/enrollment/restriction-policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentRestrictionsPoliciesResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_restriction_policy_v2_get_enrollment_restriction_policy_details_by_uuid(self, uuid, **kwargs):  # noqa: E501
        """New - Gets Enrollment Restriction Policy details based on uuid.  # noqa: E501

        Fetch details for an Enrollment Restriction policy which includes name, uuid, ogname and User group assignments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_restriction_policy_v2_get_enrollment_restriction_policy_details_by_uuid(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an enrollment restriction policy (required)
        :return: EnrollmentRestrictionsPolicyResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_restriction_policy_v2_get_enrollment_restriction_policy_details_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_restriction_policy_v2_get_enrollment_restriction_policy_details_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def enrollment_restriction_policy_v2_get_enrollment_restriction_policy_details_by_uuid_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Gets Enrollment Restriction Policy details based on uuid.  # noqa: E501

        Fetch details for an Enrollment Restriction policy which includes name, uuid, ogname and User group assignments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_restriction_policy_v2_get_enrollment_restriction_policy_details_by_uuid_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier of an enrollment restriction policy (required)
        :return: EnrollmentRestrictionsPolicyResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_restriction_policy_v2_get_enrollment_restriction_policy_details_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `enrollment_restriction_policy_v2_get_enrollment_restriction_policy_details_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/enrollment/restriction-policies/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentRestrictionsPolicyResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_restriction_policy_v2_update(self, enrollment_restriction_policy_uuid, organization_group_uuid, usergroups, **kwargs):  # noqa: E501
        """New - Assigns a list of usergroups to Enrollment Restriction policy  # noqa: E501

        Assigns a list of usergroups to Enrollment Restriction policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_restriction_policy_v2_update(enrollment_restriction_policy_uuid, organization_group_uuid, usergroups, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enrollment_restriction_policy_uuid: Identifier of an enrollment restriction policy(Required) (required)
        :param str organization_group_uuid: Identifier of an enrollment organization group(Required) (required)
        :param UserGroupsListModel usergroups: List of User Groups(Required) (required)
        :return: AssignUserGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_restriction_policy_v2_update_with_http_info(enrollment_restriction_policy_uuid, organization_group_uuid, usergroups, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_restriction_policy_v2_update_with_http_info(enrollment_restriction_policy_uuid, organization_group_uuid, usergroups, **kwargs)  # noqa: E501
            return data

    def enrollment_restriction_policy_v2_update_with_http_info(self, enrollment_restriction_policy_uuid, organization_group_uuid, usergroups, **kwargs):  # noqa: E501
        """New - Assigns a list of usergroups to Enrollment Restriction policy  # noqa: E501

        Assigns a list of usergroups to Enrollment Restriction policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_restriction_policy_v2_update_with_http_info(enrollment_restriction_policy_uuid, organization_group_uuid, usergroups, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enrollment_restriction_policy_uuid: Identifier of an enrollment restriction policy(Required) (required)
        :param str organization_group_uuid: Identifier of an enrollment organization group(Required) (required)
        :param UserGroupsListModel usergroups: List of User Groups(Required) (required)
        :return: AssignUserGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrollment_restriction_policy_uuid', 'organization_group_uuid', 'usergroups']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_restriction_policy_v2_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrollment_restriction_policy_uuid' is set
        if self.api_client.client_side_validation and ('enrollment_restriction_policy_uuid' not in params or
                                                       params['enrollment_restriction_policy_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `enrollment_restriction_policy_uuid` when calling `enrollment_restriction_policy_v2_update`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `enrollment_restriction_policy_v2_update`")  # noqa: E501
        # verify the required parameter 'usergroups' is set
        if self.api_client.client_side_validation and ('usergroups' not in params or
                                                       params['usergroups'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `usergroups` when calling `enrollment_restriction_policy_v2_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'enrollment_restriction_policy_uuid' in params:
            path_params['enrollmentRestrictionPolicyUuid'] = params['enrollment_restriction_policy_uuid']  # noqa: E501
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'usergroups' in params:
            body_params = params['usergroups']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/enrollment/restriction-policies/{enrollmentRestrictionPolicyUuid}/organization-group/{organizationGroupUuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignUserGroupsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
