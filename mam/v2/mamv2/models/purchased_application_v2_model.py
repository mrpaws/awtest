# coding: utf-8

"""
    MAM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv2.configuration import Configuration


class PurchasedApplicationV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'organization_group_uuid': 'str',
        'name': 'str',
        'identifier': 'str',
        'adam_id': 'str',
        'vpp_app_eligibility': 'int',
        'product_type': 'int',
        'categories': 'list[str]',
        'licenses_summary': 'LicensesSummaryV2Model',
        'assignments': 'list[VppAssignmentV2Model]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'organization_group_uuid': 'organization_group_uuid',
        'name': 'name',
        'identifier': 'identifier',
        'adam_id': 'adam_id',
        'vpp_app_eligibility': 'vpp_app_eligibility',
        'product_type': 'product_type',
        'categories': 'categories',
        'licenses_summary': 'licenses_summary',
        'assignments': 'assignments'
    }

    def __init__(self, uuid=None, organization_group_uuid=None, name=None, identifier=None, adam_id=None, vpp_app_eligibility=None, product_type=None, categories=None, licenses_summary=None, assignments=None, _configuration=None):  # noqa: E501
        """PurchasedApplicationV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uuid = None
        self._organization_group_uuid = None
        self._name = None
        self._identifier = None
        self._adam_id = None
        self._vpp_app_eligibility = None
        self._product_type = None
        self._categories = None
        self._licenses_summary = None
        self._assignments = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if name is not None:
            self.name = name
        if identifier is not None:
            self.identifier = identifier
        if adam_id is not None:
            self.adam_id = adam_id
        if vpp_app_eligibility is not None:
            self.vpp_app_eligibility = vpp_app_eligibility
        if product_type is not None:
            self.product_type = product_type
        if categories is not None:
            self.categories = categories
        if licenses_summary is not None:
            self.licenses_summary = licenses_summary
        if assignments is not None:
            self.assignments = assignments

    @property
    def uuid(self):
        """Gets the uuid of this PurchasedApplicationV2Model.  # noqa: E501

        Application's UUID.  # noqa: E501

        :return: The uuid of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PurchasedApplicationV2Model.

        Application's UUID.  # noqa: E501

        :param uuid: The uuid of this PurchasedApplicationV2Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this PurchasedApplicationV2Model.  # noqa: E501

        Application's organization group UUID.  # noqa: E501

        :return: The organization_group_uuid of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this PurchasedApplicationV2Model.

        Application's organization group UUID.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this PurchasedApplicationV2Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def name(self):
        """Gets the name of this PurchasedApplicationV2Model.  # noqa: E501

        Application's name.  # noqa: E501

        :return: The name of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PurchasedApplicationV2Model.

        Application's name.  # noqa: E501

        :param name: The name of this PurchasedApplicationV2Model.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def identifier(self):
        """Gets the identifier of this PurchasedApplicationV2Model.  # noqa: E501

        Application's identifier.  # noqa: E501

        :return: The identifier of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PurchasedApplicationV2Model.

        Application's identifier.  # noqa: E501

        :param identifier: The identifier of this PurchasedApplicationV2Model.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def adam_id(self):
        """Gets the adam_id of this PurchasedApplicationV2Model.  # noqa: E501

        Application's iTunes Store Identifier.  # noqa: E501

        :return: The adam_id of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: str
        """
        return self._adam_id

    @adam_id.setter
    def adam_id(self, adam_id):
        """Sets the adam_id of this PurchasedApplicationV2Model.

        Application's iTunes Store Identifier.  # noqa: E501

        :param adam_id: The adam_id of this PurchasedApplicationV2Model.  # noqa: E501
        :type: str
        """

        self._adam_id = adam_id

    @property
    def vpp_app_eligibility(self):
        """Gets the vpp_app_eligibility of this PurchasedApplicationV2Model.  # noqa: E501

        Type of licensing that the application is eligbile for.  # noqa: E501

        :return: The vpp_app_eligibility of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: int
        """
        return self._vpp_app_eligibility

    @vpp_app_eligibility.setter
    def vpp_app_eligibility(self, vpp_app_eligibility):
        """Sets the vpp_app_eligibility of this PurchasedApplicationV2Model.

        Type of licensing that the application is eligbile for.  # noqa: E501

        :param vpp_app_eligibility: The vpp_app_eligibility of this PurchasedApplicationV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                vpp_app_eligibility not in allowed_values):
            raise ValueError(
                "Invalid value for `vpp_app_eligibility` ({0}), must be one of {1}"  # noqa: E501
                .format(vpp_app_eligibility, allowed_values)
            )

        self._vpp_app_eligibility = vpp_app_eligibility

    @property
    def product_type(self):
        """Gets the product_type of this PurchasedApplicationV2Model.  # noqa: E501

        Product type.  # noqa: E501

        :return: The product_type of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: int
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this PurchasedApplicationV2Model.

        Product type.  # noqa: E501

        :param product_type: The product_type of this PurchasedApplicationV2Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                product_type not in allowed_values):
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"  # noqa: E501
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def categories(self):
        """Gets the categories of this PurchasedApplicationV2Model.  # noqa: E501

        Application's categories.  # noqa: E501

        :return: The categories of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this PurchasedApplicationV2Model.

        Application's categories.  # noqa: E501

        :param categories: The categories of this PurchasedApplicationV2Model.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def licenses_summary(self):
        """Gets the licenses_summary of this PurchasedApplicationV2Model.  # noqa: E501

        Licenses summary of the purchased application.  # noqa: E501

        :return: The licenses_summary of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: LicensesSummaryV2Model
        """
        return self._licenses_summary

    @licenses_summary.setter
    def licenses_summary(self, licenses_summary):
        """Sets the licenses_summary of this PurchasedApplicationV2Model.

        Licenses summary of the purchased application.  # noqa: E501

        :param licenses_summary: The licenses_summary of this PurchasedApplicationV2Model.  # noqa: E501
        :type: LicensesSummaryV2Model
        """

        self._licenses_summary = licenses_summary

    @property
    def assignments(self):
        """Gets the assignments of this PurchasedApplicationV2Model.  # noqa: E501

        Application's assignments.  # noqa: E501

        :return: The assignments of this PurchasedApplicationV2Model.  # noqa: E501
        :rtype: list[VppAssignmentV2Model]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this PurchasedApplicationV2Model.

        Application's assignments.  # noqa: E501

        :param assignments: The assignments of this PurchasedApplicationV2Model.  # noqa: E501
        :type: list[VppAssignmentV2Model]
        """

        self._assignments = assignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchasedApplicationV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchasedApplicationV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PurchasedApplicationV2Model):
            return True

        return self.to_dict() != other.to_dict()
