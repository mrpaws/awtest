# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ProductDownloadAndInstallDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'int',
        'friendly_name': 'str',
        'serial_number': 'str',
        'product_name': 'str',
        'compliance_state': 'str',
        'job_statistics': 'list[JobStatistics]'
    }

    attribute_map = {
        'device_id': 'DeviceID',
        'friendly_name': 'FriendlyName',
        'serial_number': 'SerialNumber',
        'product_name': 'ProductName',
        'compliance_state': 'ComplianceState',
        'job_statistics': 'JobStatistics'
    }

    def __init__(self, device_id=None, friendly_name=None, serial_number=None, product_name=None, compliance_state=None, job_statistics=None, _configuration=None):  # noqa: E501
        """ProductDownloadAndInstallDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_id = None
        self._friendly_name = None
        self._serial_number = None
        self._product_name = None
        self._compliance_state = None
        self._job_statistics = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if serial_number is not None:
            self.serial_number = serial_number
        if product_name is not None:
            self.product_name = product_name
        if compliance_state is not None:
            self.compliance_state = compliance_state
        if job_statistics is not None:
            self.job_statistics = job_statistics

    @property
    def device_id(self):
        """Gets the device_id of this ProductDownloadAndInstallDetails.  # noqa: E501

        Gets or sets device Identifier.  # noqa: E501

        :return: The device_id of this ProductDownloadAndInstallDetails.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ProductDownloadAndInstallDetails.

        Gets or sets device Identifier.  # noqa: E501

        :param device_id: The device_id of this ProductDownloadAndInstallDetails.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ProductDownloadAndInstallDetails.  # noqa: E501

        Gets or sets friendly name given to the device.  # noqa: E501

        :return: The friendly_name of this ProductDownloadAndInstallDetails.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ProductDownloadAndInstallDetails.

        Gets or sets friendly name given to the device.  # noqa: E501

        :param friendly_name: The friendly_name of this ProductDownloadAndInstallDetails.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def serial_number(self):
        """Gets the serial_number of this ProductDownloadAndInstallDetails.  # noqa: E501

        Gets or sets serial number of the device.  # noqa: E501

        :return: The serial_number of this ProductDownloadAndInstallDetails.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ProductDownloadAndInstallDetails.

        Gets or sets serial number of the device.  # noqa: E501

        :param serial_number: The serial_number of this ProductDownloadAndInstallDetails.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def product_name(self):
        """Gets the product_name of this ProductDownloadAndInstallDetails.  # noqa: E501

        Gets or sets name of the device.  # noqa: E501

        :return: The product_name of this ProductDownloadAndInstallDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ProductDownloadAndInstallDetails.

        Gets or sets name of the device.  # noqa: E501

        :param product_name: The product_name of this ProductDownloadAndInstallDetails.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def compliance_state(self):
        """Gets the compliance_state of this ProductDownloadAndInstallDetails.  # noqa: E501

        Gets or sets compliance State of the device.  # noqa: E501

        :return: The compliance_state of this ProductDownloadAndInstallDetails.  # noqa: E501
        :rtype: str
        """
        return self._compliance_state

    @compliance_state.setter
    def compliance_state(self, compliance_state):
        """Sets the compliance_state of this ProductDownloadAndInstallDetails.

        Gets or sets compliance State of the device.  # noqa: E501

        :param compliance_state: The compliance_state of this ProductDownloadAndInstallDetails.  # noqa: E501
        :type: str
        """

        self._compliance_state = compliance_state

    @property
    def job_statistics(self):
        """Gets the job_statistics of this ProductDownloadAndInstallDetails.  # noqa: E501

        Gets or sets details of Job Statistics.  # noqa: E501

        :return: The job_statistics of this ProductDownloadAndInstallDetails.  # noqa: E501
        :rtype: list[JobStatistics]
        """
        return self._job_statistics

    @job_statistics.setter
    def job_statistics(self, job_statistics):
        """Sets the job_statistics of this ProductDownloadAndInstallDetails.

        Gets or sets details of Job Statistics.  # noqa: E501

        :param job_statistics: The job_statistics of this ProductDownloadAndInstallDetails.  # noqa: E501
        :type: list[JobStatistics]
        """

        self._job_statistics = job_statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductDownloadAndInstallDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductDownloadAndInstallDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductDownloadAndInstallDetails):
            return True

        return self.to_dict() != other.to_dict()
