# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class WorkflowV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def workflow_v1_create_assignment_async(self, workflow_uuid, data, **kwargs):  # noqa: E501
        """New - Create a new assignment corresponding to the workflow.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_create_assignment_async(workflow_uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the Workflow.(Required) (required)
        :param AssignmentV1Model data: The post data(Required) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_create_assignment_async_with_http_info(workflow_uuid, data, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_create_assignment_async_with_http_info(workflow_uuid, data, **kwargs)  # noqa: E501
            return data

    def workflow_v1_create_assignment_async_with_http_info(self, workflow_uuid, data, **kwargs):  # noqa: E501
        """New - Create a new assignment corresponding to the workflow.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_create_assignment_async_with_http_info(workflow_uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the Workflow.(Required) (required)
        :param AssignmentV1Model data: The post data(Required) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_create_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_create_assignment_async`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `workflow_v1_create_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}/assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_create_workflow_async(self, data, **kwargs):  # noqa: E501
        """New - Create a new workflow.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_create_workflow_async(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkflowV1Model data: The post data(Required) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_create_workflow_async_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_create_workflow_async_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def workflow_v1_create_workflow_async_with_http_info(self, data, **kwargs):  # noqa: E501
        """New - Create a new workflow.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_create_workflow_async_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkflowV1Model data: The post data(Required) (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_create_workflow_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `workflow_v1_create_workflow_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_delete_assignment_async(self, workflow_uuid, assignment_uuid, **kwargs):  # noqa: E501
        """New - Deletes an existing workflow assignment at this Organization Group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_delete_assignment_async(workflow_uuid, assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param str assignment_uuid: Uuid of the assignment.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_delete_assignment_async_with_http_info(workflow_uuid, assignment_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_delete_assignment_async_with_http_info(workflow_uuid, assignment_uuid, **kwargs)  # noqa: E501
            return data

    def workflow_v1_delete_assignment_async_with_http_info(self, workflow_uuid, assignment_uuid, **kwargs):  # noqa: E501
        """New - Deletes an existing workflow assignment at this Organization Group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_delete_assignment_async_with_http_info(workflow_uuid, assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param str assignment_uuid: Uuid of the assignment.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid', 'assignment_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_delete_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_delete_assignment_async`")  # noqa: E501
        # verify the required parameter 'assignment_uuid' is set
        if self.api_client.client_side_validation and ('assignment_uuid' not in params or
                                                       params['assignment_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_uuid` when calling `workflow_v1_delete_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501
        if 'assignment_uuid' in params:
            path_params['assignmentUuid'] = params['assignment_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}/assignments/{assignmentUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_delete_workflow_async(self, workflow_uuid, **kwargs):  # noqa: E501
        """New - Delete a workflow.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_delete_workflow_async(workflow_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_delete_workflow_async_with_http_info(workflow_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_delete_workflow_async_with_http_info(workflow_uuid, **kwargs)  # noqa: E501
            return data

    def workflow_v1_delete_workflow_async_with_http_info(self, workflow_uuid, **kwargs):  # noqa: E501
        """New - Delete a workflow.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_delete_workflow_async_with_http_info(workflow_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_delete_workflow_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_delete_workflow_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_get_all_assignments_async(self, workflow_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get all assignments corresponding to the workflow identifier.  # noqa: E501

        Used for searching and filtering. Returns a paginated result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_all_assignments_async(workflow_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the Workflow.(Required) (required)
        :param object organization_group_uuid: Uuid of the Organization Group.(Required) (required)
        :param str search: The text to search for in the name of the assignments.
        :param str orderby: Order the results by this attribute
        :param int page: The specific page number to get
        :param int page_size: Maximum records per page
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified
        :return: AssignmentListResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_get_all_assignments_async_with_http_info(workflow_uuid, organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_get_all_assignments_async_with_http_info(workflow_uuid, organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def workflow_v1_get_all_assignments_async_with_http_info(self, workflow_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get all assignments corresponding to the workflow identifier.  # noqa: E501

        Used for searching and filtering. Returns a paginated result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_all_assignments_async_with_http_info(workflow_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the Workflow.(Required) (required)
        :param object organization_group_uuid: Uuid of the Organization Group.(Required) (required)
        :param str search: The text to search for in the name of the assignments.
        :param str orderby: Order the results by this attribute
        :param int page: The specific page number to get
        :param int page_size: Maximum records per page
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified
        :return: AssignmentListResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid', 'organization_group_uuid', 'search', 'orderby', 'page', 'page_size', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_get_all_assignments_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_get_all_assignments_async`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `workflow_v1_get_all_assignments_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501

        query_params = []
        if 'organization_group_uuid' in params:
            query_params.append(('organization_group_uuid', params['organization_group_uuid']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentListResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_get_all_devices_for_workflow_async(self, workflow_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get all devices for a given workflow.  # noqa: E501

        Used for searching and filtering. Returns a paginated result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_all_devices_for_workflow_async(workflow_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param object organization_group_uuid: Uuid of the Organization Group.(Required) (required)
        :param str search: The text to search for in the name and description for workflows.
        :param str orderby: Order the results by this attribute
        :param int page: The specific page number to get
        :param int page_size: Maximum records per page
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified
        :return: DeviceListResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_get_all_devices_for_workflow_async_with_http_info(workflow_uuid, organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_get_all_devices_for_workflow_async_with_http_info(workflow_uuid, organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def workflow_v1_get_all_devices_for_workflow_async_with_http_info(self, workflow_uuid, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get all devices for a given workflow.  # noqa: E501

        Used for searching and filtering. Returns a paginated result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_all_devices_for_workflow_async_with_http_info(workflow_uuid, organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param object organization_group_uuid: Uuid of the Organization Group.(Required) (required)
        :param str search: The text to search for in the name and description for workflows.
        :param str orderby: Order the results by this attribute
        :param int page: The specific page number to get
        :param int page_size: Maximum records per page
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified
        :return: DeviceListResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid', 'organization_group_uuid', 'search', 'orderby', 'page', 'page_size', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_get_all_devices_for_workflow_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_get_all_devices_for_workflow_async`")  # noqa: E501
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `workflow_v1_get_all_devices_for_workflow_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501

        query_params = []
        if 'organization_group_uuid' in params:
            query_params.append(('organization_group_uuid', params['organization_group_uuid']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceListResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_get_all_workflows_async(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get all workflows at this Organization Group.  # noqa: E501

        Used for searching and filtering. Returns a paginated result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_all_workflows_async(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object organization_group_uuid: UUID of the Organization Group.(Required) (required)
        :param str search: The text to search for in the name and description for workflows.
        :param str orderby: Order the results by this attribute
        :param int page: The specific page number to get
        :param int page_size: Maximum records per page
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified
        :return: WorkflowListResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_get_all_workflows_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_get_all_workflows_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def workflow_v1_get_all_workflows_async_with_http_info(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Get all workflows at this Organization Group.  # noqa: E501

        Used for searching and filtering. Returns a paginated result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_all_workflows_async_with_http_info(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object organization_group_uuid: UUID of the Organization Group.(Required) (required)
        :param str search: The text to search for in the name and description for workflows.
        :param str orderby: Order the results by this attribute
        :param int page: The specific page number to get
        :param int page_size: Maximum records per page
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified
        :return: WorkflowListResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'search', 'orderby', 'page', 'page_size', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_get_all_workflows_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `workflow_v1_get_all_workflows_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organization_group_uuid' in params:
            query_params.append(('organization_group_uuid', params['organization_group_uuid']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowListResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_get_assignment_by_id_async(self, workflow_uuid, assignment_uuid, **kwargs):  # noqa: E501
        """New - Get the assignment at this Organization Group corresponding to the workflow uuid and assignment uuid.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_assignment_by_id_async(workflow_uuid, assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param str assignment_uuid: Uuid of the Assignment.(Required) (required)
        :return: AssignmentResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_get_assignment_by_id_async_with_http_info(workflow_uuid, assignment_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_get_assignment_by_id_async_with_http_info(workflow_uuid, assignment_uuid, **kwargs)  # noqa: E501
            return data

    def workflow_v1_get_assignment_by_id_async_with_http_info(self, workflow_uuid, assignment_uuid, **kwargs):  # noqa: E501
        """New - Get the assignment at this Organization Group corresponding to the workflow uuid and assignment uuid.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_assignment_by_id_async_with_http_info(workflow_uuid, assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param str assignment_uuid: Uuid of the Assignment.(Required) (required)
        :return: AssignmentResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid', 'assignment_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_get_assignment_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_get_assignment_by_id_async`")  # noqa: E501
        # verify the required parameter 'assignment_uuid' is set
        if self.api_client.client_side_validation and ('assignment_uuid' not in params or
                                                       params['assignment_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_uuid` when calling `workflow_v1_get_assignment_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501
        if 'assignment_uuid' in params:
            path_params['assignmentUuid'] = params['assignment_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}/assignments/{assignmentUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_get_workflow_by_id_async(self, workflow_uuid, **kwargs):  # noqa: E501
        """New - Get the workflow corresponding to the workflow uuid.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_workflow_by_id_async(workflow_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :return: WorkflowResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_get_workflow_by_id_async_with_http_info(workflow_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_get_workflow_by_id_async_with_http_info(workflow_uuid, **kwargs)  # noqa: E501
            return data

    def workflow_v1_get_workflow_by_id_async_with_http_info(self, workflow_uuid, **kwargs):  # noqa: E501
        """New - Get the workflow corresponding to the workflow uuid.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_get_workflow_by_id_async_with_http_info(workflow_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :return: WorkflowResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_get_workflow_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_get_workflow_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_preview_publish_device_count_async(self, data, **kwargs):  # noqa: E501
        """New - Obtain the expected count of affected devices for a workflow publish.  # noqa: E501

        The device count is used to check the applicability of faster DSM delivery for workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_preview_publish_device_count_async(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PreviewPublishDeviceCountV1Model data: The data used to obtain the expected count of affected devices for a workflow publish.(Required) (required)
        :return: PreviewPublishDeviceCountResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_preview_publish_device_count_async_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_preview_publish_device_count_async_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def workflow_v1_preview_publish_device_count_async_with_http_info(self, data, **kwargs):  # noqa: E501
        """New - Obtain the expected count of affected devices for a workflow publish.  # noqa: E501

        The device count is used to check the applicability of faster DSM delivery for workflows.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_preview_publish_device_count_async_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PreviewPublishDeviceCountV1Model data: The data used to obtain the expected count of affected devices for a workflow publish.(Required) (required)
        :return: PreviewPublishDeviceCountResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_preview_publish_device_count_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `workflow_v1_preview_publish_device_count_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/previewpublishdevicecount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreviewPublishDeviceCountResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_update_assignment_async(self, workflow_uuid, assignment_uuid, data, **kwargs):  # noqa: E501
        """New - Updates an existing assignment for this workflow at this Organization Group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_update_assignment_async(workflow_uuid, assignment_uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param str assignment_uuid: Uuid of the assignment.(Required) (required)
        :param AssignmentV1Model data: The form data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_update_assignment_async_with_http_info(workflow_uuid, assignment_uuid, data, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_update_assignment_async_with_http_info(workflow_uuid, assignment_uuid, data, **kwargs)  # noqa: E501
            return data

    def workflow_v1_update_assignment_async_with_http_info(self, workflow_uuid, assignment_uuid, data, **kwargs):  # noqa: E501
        """New - Updates an existing assignment for this workflow at this Organization Group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_update_assignment_async_with_http_info(workflow_uuid, assignment_uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param str assignment_uuid: Uuid of the assignment.(Required) (required)
        :param AssignmentV1Model data: The form data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid', 'assignment_uuid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_update_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_update_assignment_async`")  # noqa: E501
        # verify the required parameter 'assignment_uuid' is set
        if self.api_client.client_side_validation and ('assignment_uuid' not in params or
                                                       params['assignment_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_uuid` when calling `workflow_v1_update_assignment_async`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `workflow_v1_update_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501
        if 'assignment_uuid' in params:
            path_params['assignmentUuid'] = params['assignment_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}/assignments/{assignmentUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_update_assignment_priorities_async(self, workflow_uuid, assignment_priorities, **kwargs):  # noqa: E501
        """New - Arrange assignments in the order or priorities.  # noqa: E501

        Priority of the assignment should be updated in bulk. No two assignments should have the same priority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_update_assignment_priorities_async(workflow_uuid, assignment_priorities, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param list[WorkflowAssignmentPrioritiesV1Model] assignment_priorities: The list of assignments and their priorities(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_update_assignment_priorities_async_with_http_info(workflow_uuid, assignment_priorities, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_update_assignment_priorities_async_with_http_info(workflow_uuid, assignment_priorities, **kwargs)  # noqa: E501
            return data

    def workflow_v1_update_assignment_priorities_async_with_http_info(self, workflow_uuid, assignment_priorities, **kwargs):  # noqa: E501
        """New - Arrange assignments in the order or priorities.  # noqa: E501

        Priority of the assignment should be updated in bulk. No two assignments should have the same priority.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_update_assignment_priorities_async_with_http_info(workflow_uuid, assignment_priorities, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param list[WorkflowAssignmentPrioritiesV1Model] assignment_priorities: The list of assignments and their priorities(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid', 'assignment_priorities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_update_assignment_priorities_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_update_assignment_priorities_async`")  # noqa: E501
        # verify the required parameter 'assignment_priorities' is set
        if self.api_client.client_side_validation and ('assignment_priorities' not in params or
                                                       params['assignment_priorities'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_priorities` when calling `workflow_v1_update_assignment_priorities_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assignment_priorities' in params:
            body_params = params['assignment_priorities']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}/assignments/arrange', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workflow_v1_update_workflow_async(self, workflow_uuid, data, **kwargs):  # noqa: E501
        """New - Update a workflow.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_update_workflow_async(workflow_uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param WorkflowV1Model data: The form data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workflow_v1_update_workflow_async_with_http_info(workflow_uuid, data, **kwargs)  # noqa: E501
        else:
            (data) = self.workflow_v1_update_workflow_async_with_http_info(workflow_uuid, data, **kwargs)  # noqa: E501
            return data

    def workflow_v1_update_workflow_async_with_http_info(self, workflow_uuid, data, **kwargs):  # noqa: E501
        """New - Update a workflow.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workflow_v1_update_workflow_async_with_http_info(workflow_uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_uuid: Uuid of the workflow.(Required) (required)
        :param WorkflowV1Model data: The form data(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_uuid', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workflow_v1_update_workflow_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_uuid' is set
        if self.api_client.client_side_validation and ('workflow_uuid' not in params or
                                                       params['workflow_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `workflow_uuid` when calling `workflow_v1_update_workflow_async`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `workflow_v1_update_workflow_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_uuid' in params:
            path_params['workflowUuid'] = params['workflow_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflowUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
