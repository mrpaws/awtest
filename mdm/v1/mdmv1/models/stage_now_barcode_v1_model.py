# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class StageNowBarcodeV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'staging_profile_id': 'int',
        'organization_group_uuid': 'str',
        'organization_group_id': 'int',
        'universal_barcode': 'bool',
        'device_owner_mode': 'bool',
        'staging_relay_server_id': 'int',
        'wifi_profile_id': 'int',
        'barcode_instructions': 'str'
    }

    attribute_map = {
        'staging_profile_id': 'stagingProfileId',
        'organization_group_uuid': 'organizationGroupUuid',
        'organization_group_id': 'organizationGroupId',
        'universal_barcode': 'universalBarcode',
        'device_owner_mode': 'deviceOwnerMode',
        'staging_relay_server_id': 'stagingRelayServerId',
        'wifi_profile_id': 'wifiProfileId',
        'barcode_instructions': 'barcodeInstructions'
    }

    def __init__(self, staging_profile_id=None, organization_group_uuid=None, organization_group_id=None, universal_barcode=None, device_owner_mode=None, staging_relay_server_id=None, wifi_profile_id=None, barcode_instructions=None, _configuration=None):  # noqa: E501
        """StageNowBarcodeV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._staging_profile_id = None
        self._organization_group_uuid = None
        self._organization_group_id = None
        self._universal_barcode = None
        self._device_owner_mode = None
        self._staging_relay_server_id = None
        self._wifi_profile_id = None
        self._barcode_instructions = None
        self.discriminator = None

        self.staging_profile_id = staging_profile_id
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if organization_group_id is not None:
            self.organization_group_id = organization_group_id
        if universal_barcode is not None:
            self.universal_barcode = universal_barcode
        if device_owner_mode is not None:
            self.device_owner_mode = device_owner_mode
        self.staging_relay_server_id = staging_relay_server_id
        if wifi_profile_id is not None:
            self.wifi_profile_id = wifi_profile_id
        if barcode_instructions is not None:
            self.barcode_instructions = barcode_instructions

    @property
    def staging_profile_id(self):
        """Gets the staging_profile_id of this StageNowBarcodeV1Model.  # noqa: E501

        Staging Definition Id  # noqa: E501

        :return: The staging_profile_id of this StageNowBarcodeV1Model.  # noqa: E501
        :rtype: int
        """
        return self._staging_profile_id

    @staging_profile_id.setter
    def staging_profile_id(self, staging_profile_id):
        """Sets the staging_profile_id of this StageNowBarcodeV1Model.

        Staging Definition Id  # noqa: E501

        :param staging_profile_id: The staging_profile_id of this StageNowBarcodeV1Model.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and staging_profile_id is None:
            raise ValueError("Invalid value for `staging_profile_id`, must not be `None`")  # noqa: E501

        self._staging_profile_id = staging_profile_id

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this StageNowBarcodeV1Model.  # noqa: E501

        Organizational Group Uuid.  # noqa: E501

        :return: The organization_group_uuid of this StageNowBarcodeV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this StageNowBarcodeV1Model.

        Organizational Group Uuid.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this StageNowBarcodeV1Model.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def organization_group_id(self):
        """Gets the organization_group_id of this StageNowBarcodeV1Model.  # noqa: E501

        Organizational Group Id. Needed only if OrganizationGroupUuid is not set.  # noqa: E501

        :return: The organization_group_id of this StageNowBarcodeV1Model.  # noqa: E501
        :rtype: int
        """
        return self._organization_group_id

    @organization_group_id.setter
    def organization_group_id(self, organization_group_id):
        """Sets the organization_group_id of this StageNowBarcodeV1Model.

        Organizational Group Id. Needed only if OrganizationGroupUuid is not set.  # noqa: E501

        :param organization_group_id: The organization_group_id of this StageNowBarcodeV1Model.  # noqa: E501
        :type: int
        """

        self._organization_group_id = organization_group_id

    @property
    def universal_barcode(self):
        """Gets the universal_barcode of this StageNowBarcodeV1Model.  # noqa: E501

        Whether to use universal barcode  # noqa: E501

        :return: The universal_barcode of this StageNowBarcodeV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._universal_barcode

    @universal_barcode.setter
    def universal_barcode(self, universal_barcode):
        """Sets the universal_barcode of this StageNowBarcodeV1Model.

        Whether to use universal barcode  # noqa: E501

        :param universal_barcode: The universal_barcode of this StageNowBarcodeV1Model.  # noqa: E501
        :type: bool
        """

        self._universal_barcode = universal_barcode

    @property
    def device_owner_mode(self):
        """Gets the device_owner_mode of this StageNowBarcodeV1Model.  # noqa: E501

        Whether a Device Owner mode barcode is generated. Used only when generating an Universal barcode or in an 'Android for Work' Organization group with enrollment restrictions set to 'Exempt smart groups from Android(Legacy)'  # noqa: E501

        :return: The device_owner_mode of this StageNowBarcodeV1Model.  # noqa: E501
        :rtype: bool
        """
        return self._device_owner_mode

    @device_owner_mode.setter
    def device_owner_mode(self, device_owner_mode):
        """Sets the device_owner_mode of this StageNowBarcodeV1Model.

        Whether a Device Owner mode barcode is generated. Used only when generating an Universal barcode or in an 'Android for Work' Organization group with enrollment restrictions set to 'Exempt smart groups from Android(Legacy)'  # noqa: E501

        :param device_owner_mode: The device_owner_mode of this StageNowBarcodeV1Model.  # noqa: E501
        :type: bool
        """

        self._device_owner_mode = device_owner_mode

    @property
    def staging_relay_server_id(self):
        """Gets the staging_relay_server_id of this StageNowBarcodeV1Model.  # noqa: E501

        Id of Relay Server that will contain the staging files  # noqa: E501

        :return: The staging_relay_server_id of this StageNowBarcodeV1Model.  # noqa: E501
        :rtype: int
        """
        return self._staging_relay_server_id

    @staging_relay_server_id.setter
    def staging_relay_server_id(self, staging_relay_server_id):
        """Sets the staging_relay_server_id of this StageNowBarcodeV1Model.

        Id of Relay Server that will contain the staging files  # noqa: E501

        :param staging_relay_server_id: The staging_relay_server_id of this StageNowBarcodeV1Model.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and staging_relay_server_id is None:
            raise ValueError("Invalid value for `staging_relay_server_id`, must not be `None`")  # noqa: E501

        self._staging_relay_server_id = staging_relay_server_id

    @property
    def wifi_profile_id(self):
        """Gets the wifi_profile_id of this StageNowBarcodeV1Model.  # noqa: E501

        Staging Profile used for WiFi while staging  # noqa: E501

        :return: The wifi_profile_id of this StageNowBarcodeV1Model.  # noqa: E501
        :rtype: int
        """
        return self._wifi_profile_id

    @wifi_profile_id.setter
    def wifi_profile_id(self, wifi_profile_id):
        """Sets the wifi_profile_id of this StageNowBarcodeV1Model.

        Staging Profile used for WiFi while staging  # noqa: E501

        :param wifi_profile_id: The wifi_profile_id of this StageNowBarcodeV1Model.  # noqa: E501
        :type: int
        """

        self._wifi_profile_id = wifi_profile_id

    @property
    def barcode_instructions(self):
        """Gets the barcode_instructions of this StageNowBarcodeV1Model.  # noqa: E501

        Comment or instructions included on barcode page  # noqa: E501

        :return: The barcode_instructions of this StageNowBarcodeV1Model.  # noqa: E501
        :rtype: str
        """
        return self._barcode_instructions

    @barcode_instructions.setter
    def barcode_instructions(self, barcode_instructions):
        """Sets the barcode_instructions of this StageNowBarcodeV1Model.

        Comment or instructions included on barcode page  # noqa: E501

        :param barcode_instructions: The barcode_instructions of this StageNowBarcodeV1Model.  # noqa: E501
        :type: str
        """

        self._barcode_instructions = barcode_instructions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StageNowBarcodeV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StageNowBarcodeV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StageNowBarcodeV1Model):
            return True

        return self.to_dict() != other.to_dict()
