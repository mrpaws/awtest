# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv2.configuration import Configuration


class UsersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_uuid': 'str',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'security_type': 'int',
        'organization_group_uuid': 'str',
        'organization_group_name': 'str'
    }

    attribute_map = {
        'user_uuid': 'user_uuid',
        'user_name': 'user_name',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'security_type': 'security_type',
        'organization_group_uuid': 'organization_group_uuid',
        'organization_group_name': 'organization_group_name'
    }

    def __init__(self, user_uuid=None, user_name=None, first_name=None, last_name=None, security_type=None, organization_group_uuid=None, organization_group_name=None, _configuration=None):  # noqa: E501
        """UsersModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_uuid = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._security_type = None
        self._organization_group_uuid = None
        self._organization_group_name = None
        self.discriminator = None

        if user_uuid is not None:
            self.user_uuid = user_uuid
        if user_name is not None:
            self.user_name = user_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if security_type is not None:
            self.security_type = security_type
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if organization_group_name is not None:
            self.organization_group_name = organization_group_name

    @property
    def user_uuid(self):
        """Gets the user_uuid of this UsersModel.  # noqa: E501

        User unique identifier.  # noqa: E501

        :return: The user_uuid of this UsersModel.  # noqa: E501
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid):
        """Sets the user_uuid of this UsersModel.

        User unique identifier.  # noqa: E501

        :param user_uuid: The user_uuid of this UsersModel.  # noqa: E501
        :type: str
        """

        self._user_uuid = user_uuid

    @property
    def user_name(self):
        """Gets the user_name of this UsersModel.  # noqa: E501

        User name.  # noqa: E501

        :return: The user_name of this UsersModel.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UsersModel.

        User name.  # noqa: E501

        :param user_name: The user_name of this UsersModel.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this UsersModel.  # noqa: E501

        First name.  # noqa: E501

        :return: The first_name of this UsersModel.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UsersModel.

        First name.  # noqa: E501

        :param first_name: The first_name of this UsersModel.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UsersModel.  # noqa: E501

        Last name.  # noqa: E501

        :return: The last_name of this UsersModel.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UsersModel.

        Last name.  # noqa: E501

        :param last_name: The last_name of this UsersModel.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def security_type(self):
        """Gets the security_type of this UsersModel.  # noqa: E501

          # noqa: E501

        :return: The security_type of this UsersModel.  # noqa: E501
        :rtype: int
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this UsersModel.

          # noqa: E501

        :param security_type: The security_type of this UsersModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                security_type not in allowed_values):
            raise ValueError(
                "Invalid value for `security_type` ({0}), must be one of {1}"  # noqa: E501
                .format(security_type, allowed_values)
            )

        self._security_type = security_type

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this UsersModel.  # noqa: E501

        Organization group unique identifier.  # noqa: E501

        :return: The organization_group_uuid of this UsersModel.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this UsersModel.

        Organization group unique identifier.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this UsersModel.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def organization_group_name(self):
        """Gets the organization_group_name of this UsersModel.  # noqa: E501

        Organization group name.  # noqa: E501

        :return: The organization_group_name of this UsersModel.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_name

    @organization_group_name.setter
    def organization_group_name(self, organization_group_name):
        """Sets the organization_group_name of this UsersModel.

        Organization group name.  # noqa: E501

        :param organization_group_name: The organization_group_name of this UsersModel.  # noqa: E501
        :type: str
        """

        self._organization_group_name = organization_group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsersModel):
            return True

        return self.to_dict() != other.to_dict()
