# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv2.api_client import ApiClient


class DeviceSensorsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_sensors_v2_add_device_sensor_assignment_async(self, sensor_uuid, device_sensor_assignment_request, **kwargs):  # noqa: E501
        """New - Adds an assignment to device sensor.  # noqa: E501

        Adds an assignment to device sensor. Assignment information includes assigned smart groups and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_add_device_sensor_assignment_async(sensor_uuid, device_sensor_assignment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :param DeviceSensorAssignmentRequestV1Model device_sensor_assignment_request: Device sensor assignment request model. Includes smart group uuids, triggers, and assignment group name.(Required) (required)
        :return: BaseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_add_device_sensor_assignment_async_with_http_info(sensor_uuid, device_sensor_assignment_request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_add_device_sensor_assignment_async_with_http_info(sensor_uuid, device_sensor_assignment_request, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_add_device_sensor_assignment_async_with_http_info(self, sensor_uuid, device_sensor_assignment_request, **kwargs):  # noqa: E501
        """New - Adds an assignment to device sensor.  # noqa: E501

        Adds an assignment to device sensor. Assignment information includes assigned smart groups and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_add_device_sensor_assignment_async_with_http_info(sensor_uuid, device_sensor_assignment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :param DeviceSensorAssignmentRequestV1Model device_sensor_assignment_request: Device sensor assignment request model. Includes smart group uuids, triggers, and assignment group name.(Required) (required)
        :return: BaseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_uuid', 'device_sensor_assignment_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_add_device_sensor_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_uuid' is set
        if self.api_client.client_side_validation and ('sensor_uuid' not in params or
                                                       params['sensor_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sensor_uuid` when calling `device_sensors_v2_add_device_sensor_assignment_async`")  # noqa: E501
        # verify the required parameter 'device_sensor_assignment_request' is set
        if self.api_client.client_side_validation and ('device_sensor_assignment_request' not in params or
                                                       params['device_sensor_assignment_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_sensor_assignment_request` when calling `device_sensors_v2_add_device_sensor_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_uuid' in params:
            path_params['sensorUuid'] = params['sensor_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_sensor_assignment_request' in params:
            body_params = params['device_sensor_assignment_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors/{sensorUuid}/assignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async(self, sensor_uuid, update_assignment_ranking, action, **kwargs):  # noqa: E501
        """New - Bulk update device sensor assignments based on custom action  # noqa: E501

        Bulk update device sensor assignments for a specific device sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async(sensor_uuid, update_assignment_ranking, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :param list[DeviceSensorAssignmentRankingV1Model] update_assignment_ranking: Contains a list of device sensor assignment rankings.(Required) (required)
        :param str action: Custom action on device sensor assignments. Possible values [update-ranking] update-ranking will update all the rankings provided for device assignments belonging to a specific device sensor.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async_with_http_info(sensor_uuid, update_assignment_ranking, action, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async_with_http_info(sensor_uuid, update_assignment_ranking, action, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async_with_http_info(self, sensor_uuid, update_assignment_ranking, action, **kwargs):  # noqa: E501
        """New - Bulk update device sensor assignments based on custom action  # noqa: E501

        Bulk update device sensor assignments for a specific device sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async_with_http_info(sensor_uuid, update_assignment_ranking, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :param list[DeviceSensorAssignmentRankingV1Model] update_assignment_ranking: Contains a list of device sensor assignment rankings.(Required) (required)
        :param str action: Custom action on device sensor assignments. Possible values [update-ranking] update-ranking will update all the rankings provided for device assignments belonging to a specific device sensor.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_uuid', 'update_assignment_ranking', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_uuid' is set
        if self.api_client.client_side_validation and ('sensor_uuid' not in params or
                                                       params['sensor_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sensor_uuid` when calling `device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async`")  # noqa: E501
        # verify the required parameter 'update_assignment_ranking' is set
        if self.api_client.client_side_validation and ('update_assignment_ranking' not in params or
                                                       params['update_assignment_ranking'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_assignment_ranking` when calling `device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in params or
                                                       params['action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action` when calling `device_sensors_v2_bulk_update_device_sensor_assignment_rankings_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_uuid' in params:
            path_params['sensorUuid'] = params['sensor_uuid']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_assignment_ranking' in params:
            body_params = params['update_assignment_ranking']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors/{sensorUuid}/assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sensors_v2_create_device_sensor_async(self, device_sensor_request, **kwargs):  # noqa: E501
        """New - Create a device sensor.  # noqa: E501

        Create a device sensor which includes sensor name, description, organization group identifier, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_create_device_sensor_async(device_sensor_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSensorRequestV2Model device_sensor_request: Device sensor request model. Includes sensor name, description, organization group identifier, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.(Required) (required)
        :return: BaseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_create_device_sensor_async_with_http_info(device_sensor_request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_create_device_sensor_async_with_http_info(device_sensor_request, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_create_device_sensor_async_with_http_info(self, device_sensor_request, **kwargs):  # noqa: E501
        """New - Create a device sensor.  # noqa: E501

        Create a device sensor which includes sensor name, description, organization group identifier, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_create_device_sensor_async_with_http_info(device_sensor_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceSensorRequestV2Model device_sensor_request: Device sensor request model. Includes sensor name, description, organization group identifier, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.(Required) (required)
        :return: BaseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_sensor_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_create_device_sensor_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_sensor_request' is set
        if self.api_client.client_side_validation and ('device_sensor_request' not in params or
                                                       params['device_sensor_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_sensor_request` when calling `device_sensors_v2_create_device_sensor_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_sensor_request' in params:
            body_params = params['device_sensor_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sensors_v2_delete_device_sensor_assignment_async(self, assignment_uuid, **kwargs):  # noqa: E501
        """New - Deletes the device sensor assignment.  # noqa: E501

        Deletes a single device sensor assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_delete_device_sensor_assignment_async(assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_uuid: Uuid of the device sensor assignment.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_delete_device_sensor_assignment_async_with_http_info(assignment_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_delete_device_sensor_assignment_async_with_http_info(assignment_uuid, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_delete_device_sensor_assignment_async_with_http_info(self, assignment_uuid, **kwargs):  # noqa: E501
        """New - Deletes the device sensor assignment.  # noqa: E501

        Deletes a single device sensor assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_delete_device_sensor_assignment_async_with_http_info(assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_uuid: Uuid of the device sensor assignment.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_delete_device_sensor_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_uuid' is set
        if self.api_client.client_side_validation and ('assignment_uuid' not in params or
                                                       params['assignment_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_uuid` when calling `device_sensors_v2_delete_device_sensor_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_uuid' in params:
            path_params['assignmentUuid'] = params['assignment_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors/assignments/{assignmentUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sensors_v2_get_device_sensor_assignment_async(self, assignment_uuid, **kwargs):  # noqa: E501
        """New - Gets the device sensor assignment information.  # noqa: E501

        Gets device sensor assignment information which includes assigned smart groups and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_get_device_sensor_assignment_async(assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_uuid: Uuid of the device sensor assignment.(Required) (required)
        :return: DeviceSensorAssignmentResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_get_device_sensor_assignment_async_with_http_info(assignment_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_get_device_sensor_assignment_async_with_http_info(assignment_uuid, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_get_device_sensor_assignment_async_with_http_info(self, assignment_uuid, **kwargs):  # noqa: E501
        """New - Gets the device sensor assignment information.  # noqa: E501

        Gets device sensor assignment information which includes assigned smart groups and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_get_device_sensor_assignment_async_with_http_info(assignment_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_uuid: Uuid of the device sensor assignment.(Required) (required)
        :return: DeviceSensorAssignmentResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_get_device_sensor_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_uuid' is set
        if self.api_client.client_side_validation and ('assignment_uuid' not in params or
                                                       params['assignment_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_uuid` when calling `device_sensors_v2_get_device_sensor_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_uuid' in params:
            path_params['assignmentUuid'] = params['assignment_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors/assignments/{assignmentUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSensorAssignmentResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sensors_v2_get_device_sensor_assignments_async(self, sensor_uuid, **kwargs):  # noqa: E501
        """New - Gets the list of device sensor assignments.  # noqa: E501

        Get a list of device sensor assignments information which includes assigned smart groups and triggers for each assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_get_device_sensor_assignments_async(sensor_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :return: list[DeviceSensorAssignmentResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_get_device_sensor_assignments_async_with_http_info(sensor_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_get_device_sensor_assignments_async_with_http_info(sensor_uuid, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_get_device_sensor_assignments_async_with_http_info(self, sensor_uuid, **kwargs):  # noqa: E501
        """New - Gets the list of device sensor assignments.  # noqa: E501

        Get a list of device sensor assignments information which includes assigned smart groups and triggers for each assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_get_device_sensor_assignments_async_with_http_info(sensor_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :return: list[DeviceSensorAssignmentResponseV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_get_device_sensor_assignments_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_uuid' is set
        if self.api_client.client_side_validation and ('sensor_uuid' not in params or
                                                       params['sensor_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sensor_uuid` when calling `device_sensors_v2_get_device_sensor_assignments_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_uuid' in params:
            path_params['sensorUuid'] = params['sensor_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors/{sensorUuid}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceSensorAssignmentResponseV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sensors_v2_get_device_sensor_async(self, sensor_uuid, **kwargs):  # noqa: E501
        """New - Gets the device sensor information.  # noqa: E501

        Get a device sensor which includes sensor name, description, organization group identifier, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_get_device_sensor_async(sensor_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :return: DeviceSensorResponseV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_get_device_sensor_async_with_http_info(sensor_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_get_device_sensor_async_with_http_info(sensor_uuid, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_get_device_sensor_async_with_http_info(self, sensor_uuid, **kwargs):  # noqa: E501
        """New - Gets the device sensor information.  # noqa: E501

        Get a device sensor which includes sensor name, description, organization group identifier, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_get_device_sensor_async_with_http_info(sensor_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :return: DeviceSensorResponseV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_get_device_sensor_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_uuid' is set
        if self.api_client.client_side_validation and ('sensor_uuid' not in params or
                                                       params['sensor_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sensor_uuid` when calling `device_sensors_v2_get_device_sensor_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_uuid' in params:
            path_params['sensorUuid'] = params['sensor_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors/{sensorUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSensorResponseV2Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sensors_v2_get_device_sensors_async(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the list of all the device sensors for the Organization Group.  # noqa: E501

        Returns a list of device sensor(s) with sensor details for the Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_get_device_sensors_async(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Identifier of the Organization Group(Required) (required)
        :param str name: Filter records based on the sensor name. Partial names are accepted.
        :param str query_type: Filter records based on the query type. Default is None. Accepted values are [POWERSHELL],[BASH] and [PYTHON].
        :param str platform: Filter records based on the platform. Default is None. Accepted values are [WIN_RT] and [APPLE_OSX].
        :param int page: Specific page number to get. 0 based index. Default is 0
        :param int page_size: Maximum records per page. Default 500
        :param str orderby: Name of the property used for sorting. Default is None. Accepted values are [Name], [Platform] and [QueryType]
        :param str sort_order: Indicates whether the sort order is ascending or descending. The property used for sorting is name. Accepted values are [Asc] and [Desc]. Default value is Asc.
        :return: DeviceSensorListResponseV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_get_device_sensors_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_get_device_sensors_async_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_get_device_sensors_async_with_http_info(self, organization_group_uuid, **kwargs):  # noqa: E501
        """New - Gets the list of all the device sensors for the Organization Group.  # noqa: E501

        Returns a list of device sensor(s) with sensor details for the Organization Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_get_device_sensors_async_with_http_info(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Identifier of the Organization Group(Required) (required)
        :param str name: Filter records based on the sensor name. Partial names are accepted.
        :param str query_type: Filter records based on the query type. Default is None. Accepted values are [POWERSHELL],[BASH] and [PYTHON].
        :param str platform: Filter records based on the platform. Default is None. Accepted values are [WIN_RT] and [APPLE_OSX].
        :param int page: Specific page number to get. 0 based index. Default is 0
        :param int page_size: Maximum records per page. Default 500
        :param str orderby: Name of the property used for sorting. Default is None. Accepted values are [Name], [Platform] and [QueryType]
        :param str sort_order: Indicates whether the sort order is ascending or descending. The property used for sorting is name. Accepted values are [Asc] and [Desc]. Default value is Asc.
        :return: DeviceSensorListResponseV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'name', 'query_type', 'platform', 'page', 'page_size', 'orderby', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_get_device_sensors_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `device_sensors_v2_get_device_sensors_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'query_type' in params:
            query_params.append(('query_type', params['query_type']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors/list/{organizationGroupUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSensorListResponseV2Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sensors_v2_update_device_sensor_assignment_async(self, assignment_uuid, device_sensor_assignment_request, **kwargs):  # noqa: E501
        """New - Update the device sensor assignment information.  # noqa: E501

        Update the device sensor assignment information which includes smartgroup ids and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_update_device_sensor_assignment_async(assignment_uuid, device_sensor_assignment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_uuid: Uuid of the device sensor assignment.(Required) (required)
        :param DeviceSensorAssignmentRequestV1Model device_sensor_assignment_request: Device sensor assignment request model. Includes smart group uuids, triggers, and assignment group name.(Required) (required)
        :return: BaseExceptionModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_update_device_sensor_assignment_async_with_http_info(assignment_uuid, device_sensor_assignment_request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_update_device_sensor_assignment_async_with_http_info(assignment_uuid, device_sensor_assignment_request, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_update_device_sensor_assignment_async_with_http_info(self, assignment_uuid, device_sensor_assignment_request, **kwargs):  # noqa: E501
        """New - Update the device sensor assignment information.  # noqa: E501

        Update the device sensor assignment information which includes smartgroup ids and triggers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_update_device_sensor_assignment_async_with_http_info(assignment_uuid, device_sensor_assignment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_uuid: Uuid of the device sensor assignment.(Required) (required)
        :param DeviceSensorAssignmentRequestV1Model device_sensor_assignment_request: Device sensor assignment request model. Includes smart group uuids, triggers, and assignment group name.(Required) (required)
        :return: BaseExceptionModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_uuid', 'device_sensor_assignment_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_update_device_sensor_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_uuid' is set
        if self.api_client.client_side_validation and ('assignment_uuid' not in params or
                                                       params['assignment_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_uuid` when calling `device_sensors_v2_update_device_sensor_assignment_async`")  # noqa: E501
        # verify the required parameter 'device_sensor_assignment_request' is set
        if self.api_client.client_side_validation and ('device_sensor_assignment_request' not in params or
                                                       params['device_sensor_assignment_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_sensor_assignment_request` when calling `device_sensors_v2_update_device_sensor_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_uuid' in params:
            path_params['assignmentUuid'] = params['assignment_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_sensor_assignment_request' in params:
            body_params = params['device_sensor_assignment_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors/assignments/{assignmentUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseExceptionModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sensors_v2_update_device_sensor_async(self, sensor_uuid, device_sensor_request, **kwargs):  # noqa: E501
        """New - Update the device sensor.  # noqa: E501

        Update the device sensor which includes description, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_update_device_sensor_async(sensor_uuid, device_sensor_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :param DeviceSensorUpdateV2Model device_sensor_request: Device sensor update model. Includes sensor description, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sensors_v2_update_device_sensor_async_with_http_info(sensor_uuid, device_sensor_request, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sensors_v2_update_device_sensor_async_with_http_info(sensor_uuid, device_sensor_request, **kwargs)  # noqa: E501
            return data

    def device_sensors_v2_update_device_sensor_async_with_http_info(self, sensor_uuid, device_sensor_request, **kwargs):  # noqa: E501
        """New - Update the device sensor.  # noqa: E501

        Update the device sensor which includes description, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sensors_v2_update_device_sensor_async_with_http_info(sensor_uuid, device_sensor_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sensor_uuid: Uuid of the device sensor.(Required) (required)
        :param DeviceSensorUpdateV2Model device_sensor_request: Device sensor update model. Includes sensor description, platform, query type, execution context, timeout, script data, script blob identifier, and script environment variables.(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor_uuid', 'device_sensor_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sensors_v2_update_device_sensor_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor_uuid' is set
        if self.api_client.client_side_validation and ('sensor_uuid' not in params or
                                                       params['sensor_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sensor_uuid` when calling `device_sensors_v2_update_device_sensor_async`")  # noqa: E501
        # verify the required parameter 'device_sensor_request' is set
        if self.api_client.client_side_validation and ('device_sensor_request' not in params or
                                                       params['device_sensor_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_sensor_request` when calling `device_sensors_v2_update_device_sensor_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sensor_uuid' in params:
            path_params['sensorUuid'] = params['sensor_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_sensor_request' in params:
            body_params = params['device_sensor_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devicesensors/{sensorUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
