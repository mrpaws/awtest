# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv2.api_client import ApiClient


class DevicesV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def devices_v2_check_out_device_to_user_async(self, id, enrollmentuserid, **kwargs):  # noqa: E501
        """New - Check In and Check Out the device to the Multi-Staging enrollment User. The checkout action is supported only for MacOS and iOS devices.  # noqa: E501

        Check In and Check Out the device to the Multi-Staging enrollment User. This API returns a 400 - BadRequest if device is not enrolled to Multi-Staging enrollment User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_check_out_device_to_user_async(id, enrollmentuserid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device Identifier.(Required). (required)
        :param int enrollmentuserid: Enrollment User Identifier.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_v2_check_out_device_to_user_async_with_http_info(id, enrollmentuserid, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_v2_check_out_device_to_user_async_with_http_info(id, enrollmentuserid, **kwargs)  # noqa: E501
            return data

    def devices_v2_check_out_device_to_user_async_with_http_info(self, id, enrollmentuserid, **kwargs):  # noqa: E501
        """New - Check In and Check Out the device to the Multi-Staging enrollment User. The checkout action is supported only for MacOS and iOS devices.  # noqa: E501

        Check In and Check Out the device to the Multi-Staging enrollment User. This API returns a 400 - BadRequest if device is not enrolled to Multi-Staging enrollment User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_check_out_device_to_user_async_with_http_info(id, enrollmentuserid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device Identifier.(Required). (required)
        :param int enrollmentuserid: Enrollment User Identifier.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'enrollmentuserid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_check_out_device_to_user_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `devices_v2_check_out_device_to_user_async`")  # noqa: E501
        # verify the required parameter 'enrollmentuserid' is set
        if self.api_client.client_side_validation and ('enrollmentuserid' not in params or
                                                       params['enrollmentuserid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `enrollmentuserid` when calling `devices_v2_check_out_device_to_user_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'enrollmentuserid' in params:
            path_params['enrollmentuserid'] = params['enrollmentuserid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/enrollmentuser/{enrollmentuserid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_v2_get_by_uuid_async(self, uuid, **kwargs):  # noqa: E501
        """New - Get basic details about the device  # noqa: E501

        Get basic information about the device based on the unique identifier passed in the path. The response contains hypermedia links, which can be followed to get more information about the device. The API returns a 404 - NotFound if the device is not available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_get_by_uuid_async(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Device identifier(Required). (required)
        :return: GetDeviceResponseV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_v2_get_by_uuid_async_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_v2_get_by_uuid_async_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def devices_v2_get_by_uuid_async_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Get basic details about the device  # noqa: E501

        Get basic information about the device based on the unique identifier passed in the path. The response contains hypermedia links, which can be followed to get more information about the device. The API returns a 404 - NotFound if the device is not available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_get_by_uuid_async_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Device identifier(Required). (required)
        :return: GetDeviceResponseV2Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_get_by_uuid_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `devices_v2_get_by_uuid_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDeviceResponseV2Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_v2_get_device_installs_async(self, uuid, install_id, **kwargs):  # noqa: E501
        """New - Retrieve application install status for an AFW device  # noqa: E501

        Retrieve application install status for an AFW device. The API returns a 404 - NotFound if the device is not available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_get_device_installs_async(uuid, install_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for a device. Ex. 827BE1C5AEC05C378C61C44103E9D3FCB2EC354D(Required). (required)
        :param str install_id: Bundle id(Required) (required)
        :return: AndroidWorkInstallResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_v2_get_device_installs_async_with_http_info(uuid, install_id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_v2_get_device_installs_async_with_http_info(uuid, install_id, **kwargs)  # noqa: E501
            return data

    def devices_v2_get_device_installs_async_with_http_info(self, uuid, install_id, **kwargs):  # noqa: E501
        """New - Retrieve application install status for an AFW device  # noqa: E501

        Retrieve application install status for an AFW device. The API returns a 404 - NotFound if the device is not available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_get_device_installs_async_with_http_info(uuid, install_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for a device. Ex. 827BE1C5AEC05C378C61C44103E9D3FCB2EC354D(Required). (required)
        :param str install_id: Bundle id(Required) (required)
        :return: AndroidWorkInstallResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'install_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_get_device_installs_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `devices_v2_get_device_installs_async`")  # noqa: E501
        # verify the required parameter 'install_id' is set
        if self.api_client.client_side_validation and ('install_id' not in params or
                                                       params['install_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `install_id` when calling `devices_v2_get_device_installs_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'install_id' in params:
            query_params.append(('installId', params['install_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{uuid}/installs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AndroidWorkInstallResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_v2_get_os_updates_by_uuid_async(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves available OS updates for a device  # noqa: E501

        Retrieves a list of all available OS and software updates for the device specified by the device UDID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_get_os_updates_by_uuid_async(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for a device. Ex. 153B4D9D-24DC-416B-91F9-94253D623611(Required). (required)
        :return: OSUpdateResultModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_v2_get_os_updates_by_uuid_async_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_v2_get_os_updates_by_uuid_async_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def devices_v2_get_os_updates_by_uuid_async_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves available OS updates for a device  # noqa: E501

        Retrieves a list of all available OS and software updates for the device specified by the device UDID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_get_os_updates_by_uuid_async_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for a device. Ex. 153B4D9D-24DC-416B-91F9-94253D623611(Required). (required)
        :return: OSUpdateResultModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_get_os_updates_by_uuid_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `devices_v2_get_os_updates_by_uuid_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{uuid}/osupdate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OSUpdateResultModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_v2_search_async(self, **kwargs):  # noqa: E501
        """New - Find relevant devices using various criteria.  # noqa: E501

         Returns details of relevant devices belonging to an enrollment user matching specified criteria, where results are ranked/sorted using the specified orderby criteria with maximum pagesize limit of 500.   If page size is greater than the maximum limit, it will return the first 500 records.  seensince and lastseen fields accept the following Valid DateTime formats :  yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt,  yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_search_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Filters devices based on enrolled username.
        :param str model: Filters devices based on model. For example iPhone.
        :param str platform: Filters devices based on platform. For example Apple.
        :param datetime lastseen: Filters devices based on date when they were last seen.
        :param str ownership: Filters devices based on ownership type. One of C, E, S or Undefined.
        :param int lgid: Limits the search to given OrganizationGroup, defaults to user's OrganizationGroup.
        :param str compliance_status: Filters devices based on specified compliance status. Possible values are true (for Compliant) and false (for NonCompliant).
        :param datetime seen_since: Filters devices based on the date when they were seen after the given date.
        :param int page: Filters search result to return results based on page number. Page numbering is 0 based and omitting this parameter will return first page.
        :param int pagesize: Limits the number of search results per page. Defaults to 500.
        :param str orderby: Sort results based on given field. One of model, lastseen, ownership, platform, deviceid etc. Defaults to deviceid.
        :param str sortorder: Sort order of results. One of ASC or DESC. Defaults to ASC.
        :return: DeviceSearchResultExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_v2_search_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.devices_v2_search_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def devices_v2_search_async_with_http_info(self, **kwargs):  # noqa: E501
        """New - Find relevant devices using various criteria.  # noqa: E501

         Returns details of relevant devices belonging to an enrollment user matching specified criteria, where results are ranked/sorted using the specified orderby criteria with maximum pagesize limit of 500.   If page size is greater than the maximum limit, it will return the first 500 records.  seensince and lastseen fields accept the following Valid DateTime formats :  yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt,  yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_v2_search_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Filters devices based on enrolled username.
        :param str model: Filters devices based on model. For example iPhone.
        :param str platform: Filters devices based on platform. For example Apple.
        :param datetime lastseen: Filters devices based on date when they were last seen.
        :param str ownership: Filters devices based on ownership type. One of C, E, S or Undefined.
        :param int lgid: Limits the search to given OrganizationGroup, defaults to user's OrganizationGroup.
        :param str compliance_status: Filters devices based on specified compliance status. Possible values are true (for Compliant) and false (for NonCompliant).
        :param datetime seen_since: Filters devices based on the date when they were seen after the given date.
        :param int page: Filters search result to return results based on page number. Page numbering is 0 based and omitting this parameter will return first page.
        :param int pagesize: Limits the number of search results per page. Defaults to 500.
        :param str orderby: Sort results based on given field. One of model, lastseen, ownership, platform, deviceid etc. Defaults to deviceid.
        :param str sortorder: Sort order of results. One of ASC or DESC. Defaults to ASC.
        :return: DeviceSearchResultExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'platform', 'lastseen', 'ownership', 'lgid', 'compliance_status', 'seen_since', 'page', 'pagesize', 'orderby', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_v2_search_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'lastseen' in params:
            query_params.append(('lastseen', params['lastseen']))  # noqa: E501
        if 'ownership' in params:
            query_params.append(('ownership', params['ownership']))  # noqa: E501
        if 'lgid' in params:
            query_params.append(('lgid', params['lgid']))  # noqa: E501
        if 'compliance_status' in params:
            query_params.append(('compliance_status', params['compliance_status']))  # noqa: E501
        if 'seen_since' in params:
            query_params.append(('seen_since', params['seen_since']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSearchResultExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
