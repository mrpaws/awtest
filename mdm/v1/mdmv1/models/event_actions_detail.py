# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class EventActionsDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'version': 'int',
        'device_type': 'int',
        'managed_by': 'str',
        'event_action_uuid': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'version': 'Version',
        'device_type': 'DeviceType',
        'managed_by': 'ManagedBy',
        'event_action_uuid': 'EventActionUUID'
    }

    def __init__(self, id=None, name=None, description=None, version=None, device_type=None, managed_by=None, event_action_uuid=None, _configuration=None):  # noqa: E501
        """EventActionsDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._version = None
        self._device_type = None
        self._managed_by = None
        self._event_action_uuid = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version
        if device_type is not None:
            self.device_type = device_type
        if managed_by is not None:
            self.managed_by = managed_by
        if event_action_uuid is not None:
            self.event_action_uuid = event_action_uuid

    @property
    def id(self):
        """Gets the id of this EventActionsDetail.  # noqa: E501

        Gets or sets event Actions Identifier.  # noqa: E501

        :return: The id of this EventActionsDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventActionsDetail.

        Gets or sets event Actions Identifier.  # noqa: E501

        :param id: The id of this EventActionsDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EventActionsDetail.  # noqa: E501

        Gets or sets event Actions Name.  # noqa: E501

        :return: The name of this EventActionsDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventActionsDetail.

        Gets or sets event Actions Name.  # noqa: E501

        :param name: The name of this EventActionsDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this EventActionsDetail.  # noqa: E501

        Gets or sets description of Event Actions.  # noqa: E501

        :return: The description of this EventActionsDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventActionsDetail.

        Gets or sets description of Event Actions.  # noqa: E501

        :param description: The description of this EventActionsDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """Gets the version of this EventActionsDetail.  # noqa: E501

        Gets or sets version of Event Actions.  # noqa: E501

        :return: The version of this EventActionsDetail.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EventActionsDetail.

        Gets or sets version of Event Actions.  # noqa: E501

        :param version: The version of this EventActionsDetail.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def device_type(self):
        """Gets the device_type of this EventActionsDetail.  # noqa: E501

        Gets or sets the Platform in which Event Actions is created for.  # noqa: E501

        :return: The device_type of this EventActionsDetail.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this EventActionsDetail.

        Gets or sets the Platform in which Event Actions is created for.  # noqa: E501

        :param device_type: The device_type of this EventActionsDetail.  # noqa: E501
        :type: int
        """

        self._device_type = device_type

    @property
    def managed_by(self):
        """Gets the managed_by of this EventActionsDetail.  # noqa: E501

        Gets or sets managed Organization Group ID.  # noqa: E501

        :return: The managed_by of this EventActionsDetail.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this EventActionsDetail.

        Gets or sets managed Organization Group ID.  # noqa: E501

        :param managed_by: The managed_by of this EventActionsDetail.  # noqa: E501
        :type: str
        """

        self._managed_by = managed_by

    @property
    def event_action_uuid(self):
        """Gets the event_action_uuid of this EventActionsDetail.  # noqa: E501

        Gets or sets event action unique identifier.  # noqa: E501

        :return: The event_action_uuid of this EventActionsDetail.  # noqa: E501
        :rtype: str
        """
        return self._event_action_uuid

    @event_action_uuid.setter
    def event_action_uuid(self, event_action_uuid):
        """Sets the event_action_uuid of this EventActionsDetail.

        Gets or sets event action unique identifier.  # noqa: E501

        :param event_action_uuid: The event_action_uuid of this EventActionsDetail.  # noqa: E501
        :type: str
        """

        self._event_action_uuid = event_action_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventActionsDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventActionsDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventActionsDetail):
            return True

        return self.to_dict() != other.to_dict()
