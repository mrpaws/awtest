# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class StartAirPlay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_name': 'str',
        'destination_device_id': 'str',
        'passcode': 'str',
        'scantime': 'str'
    }

    attribute_map = {
        'destination_name': 'DestinationName',
        'destination_device_id': 'DestinationDeviceId',
        'passcode': 'Passcode',
        'scantime': 'Scantime'
    }

    def __init__(self, destination_name=None, destination_device_id=None, passcode=None, scantime=None, _configuration=None):  # noqa: E501
        """StartAirPlay - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._destination_name = None
        self._destination_device_id = None
        self._passcode = None
        self._scantime = None
        self.discriminator = None

        if destination_name is not None:
            self.destination_name = destination_name
        if destination_device_id is not None:
            self.destination_device_id = destination_device_id
        if passcode is not None:
            self.passcode = passcode
        if scantime is not None:
            self.scantime = scantime

    @property
    def destination_name(self):
        """Gets the destination_name of this StartAirPlay.  # noqa: E501

        Gets or sets the name of the AirPlay mirroring destination.  # noqa: E501

        :return: The destination_name of this StartAirPlay.  # noqa: E501
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this StartAirPlay.

        Gets or sets the name of the AirPlay mirroring destination.  # noqa: E501

        :param destination_name: The destination_name of this StartAirPlay.  # noqa: E501
        :type: str
        """

        self._destination_name = destination_name

    @property
    def destination_device_id(self):
        """Gets the destination_device_id of this StartAirPlay.  # noqa: E501

        Gets or sets the device ID (hardware address) of the AirPlay mirroring destination, in the format \"xx:xx:xx:xx:xx:xx\".  # noqa: E501

        :return: The destination_device_id of this StartAirPlay.  # noqa: E501
        :rtype: str
        """
        return self._destination_device_id

    @destination_device_id.setter
    def destination_device_id(self, destination_device_id):
        """Sets the destination_device_id of this StartAirPlay.

        Gets or sets the device ID (hardware address) of the AirPlay mirroring destination, in the format \"xx:xx:xx:xx:xx:xx\".  # noqa: E501

        :param destination_device_id: The destination_device_id of this StartAirPlay.  # noqa: E501
        :type: str
        """

        self._destination_device_id = destination_device_id

    @property
    def passcode(self):
        """Gets the passcode of this StartAirPlay.  # noqa: E501

        Gets or sets the screen sharing password that the device should use when connecting to the destination.  # noqa: E501

        :return: The passcode of this StartAirPlay.  # noqa: E501
        :rtype: str
        """
        return self._passcode

    @passcode.setter
    def passcode(self, passcode):
        """Sets the passcode of this StartAirPlay.

        Gets or sets the screen sharing password that the device should use when connecting to the destination.  # noqa: E501

        :param passcode: The passcode of this StartAirPlay.  # noqa: E501
        :type: str
        """

        self._passcode = passcode

    @property
    def scantime(self):
        """Gets the scantime of this StartAirPlay.  # noqa: E501

        Gets or sets number of seconds to spend searching for the destination.  The default is 30 seconds. This value must be in the range 10–300.  # noqa: E501

        :return: The scantime of this StartAirPlay.  # noqa: E501
        :rtype: str
        """
        return self._scantime

    @scantime.setter
    def scantime(self, scantime):
        """Sets the scantime of this StartAirPlay.

        Gets or sets number of seconds to spend searching for the destination.  The default is 30 seconds. This value must be in the range 10–300.  # noqa: E501

        :param scantime: The scantime of this StartAirPlay.  # noqa: E501
        :type: str
        """

        self._scantime = scantime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StartAirPlay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StartAirPlay):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StartAirPlay):
            return True

        return self.to_dict() != other.to_dict()
