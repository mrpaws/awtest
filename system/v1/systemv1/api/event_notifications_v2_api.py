# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv1.api_client import ApiClient


class EventNotificationsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def event_notifications_v2_create_event_notification_rule(self, **kwargs):  # noqa: E501
        """New - Creates a new Event Notification rule with events to subscribe to.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_create_event_notification_rule(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EventNotificationModel model: The Event Notification Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_notifications_v2_create_event_notification_rule_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.event_notifications_v2_create_event_notification_rule_with_http_info(**kwargs)  # noqa: E501
            return data

    def event_notifications_v2_create_event_notification_rule_with_http_info(self, **kwargs):  # noqa: E501
        """New - Creates a new Event Notification rule with events to subscribe to.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_create_event_notification_rule_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EventNotificationModel model: The Event Notification Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_notifications_v2_create_event_notification_rule" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventnotifications/V2/eventnotifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_notifications_v2_delete_event_notification_rule(self, uuid, **kwargs):  # noqa: E501
        """New - Deletes an Event Notification Rule identified by the Event Notification Id.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_delete_event_notification_rule(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The Event Notification GUID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_notifications_v2_delete_event_notification_rule_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.event_notifications_v2_delete_event_notification_rule_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def event_notifications_v2_delete_event_notification_rule_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Deletes an Event Notification Rule identified by the Event Notification Id.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_delete_event_notification_rule_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The Event Notification GUID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_notifications_v2_delete_event_notification_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `event_notifications_v2_delete_event_notification_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventnotifications/V2/eventnotifications/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_notifications_v2_get_event_notification_by_id(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves details of an Event Notification Rule identified by EventNotification Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_get_event_notification_by_id(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The Event Notification GUID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_notifications_v2_get_event_notification_by_id_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.event_notifications_v2_get_event_notification_by_id_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def event_notifications_v2_get_event_notification_by_id_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves details of an Event Notification Rule identified by EventNotification Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_get_event_notification_by_id_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The Event Notification GUID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_notifications_v2_get_event_notification_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `event_notifications_v2_get_event_notification_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventnotifications/V2/eventnotifications/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_notifications_v2_get_event_notifications_and_subscriptions(self, **kwargs):  # noqa: E501
        """Get Event Notifications and Subscriptions based on optional OrganizationGroup Id or page size.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_get_event_notifications_and_subscriptions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizationgroupuuid: The OrganizationGroup Identifier.
        :param int page: Page number.
        :param int pagesize: Number of Records per page.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_notifications_v2_get_event_notifications_and_subscriptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.event_notifications_v2_get_event_notifications_and_subscriptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def event_notifications_v2_get_event_notifications_and_subscriptions_with_http_info(self, **kwargs):  # noqa: E501
        """Get Event Notifications and Subscriptions based on optional OrganizationGroup Id or page size.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_get_event_notifications_and_subscriptions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organizationgroupuuid: The OrganizationGroup Identifier.
        :param int page: Page number.
        :param int pagesize: Number of Records per page.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupuuid', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_notifications_v2_get_event_notifications_and_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventnotifications/V2/eventnotifications/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_notifications_v2_search(self, **kwargs):  # noqa: E501
        """New - Searches Event Notifications based on the query information provided.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str targetname: The Target Name.
        :param str organizationgroupuuid: The OrganizationGroup Identifier.
        :param str status: The Event Notification status [Active, Inactive].
        :param str orderby: Sorts the response based on this attribute [TargetName, TargetUrl, FormatType, UserName, Active].
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC..
        :param int page: Page number.
        :param int pagesize: Number of Records per page.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_notifications_v2_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.event_notifications_v2_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def event_notifications_v2_search_with_http_info(self, **kwargs):  # noqa: E501
        """New - Searches Event Notifications based on the query information provided.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str targetname: The Target Name.
        :param str organizationgroupuuid: The OrganizationGroup Identifier.
        :param str status: The Event Notification status [Active, Inactive].
        :param str orderby: Sorts the response based on this attribute [TargetName, TargetUrl, FormatType, UserName, Active].
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC..
        :param int page: Page number.
        :param int pagesize: Number of Records per page.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['targetname', 'organizationgroupuuid', 'status', 'orderby', 'sortorder', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_notifications_v2_search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'targetname' in params:
            query_params.append(('targetname', params['targetname']))  # noqa: E501
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventnotifications/V2/eventnotifications/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def event_notifications_v2_update_event_notification_rule(self, uuid, **kwargs):  # noqa: E501
        """New - Updates an Event Notification Rule identified by the Event Notification Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_update_event_notification_rule(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The Event Notification GUID. (required)
        :param EventNotificationModel model: The Event Notification Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.event_notifications_v2_update_event_notification_rule_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.event_notifications_v2_update_event_notification_rule_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def event_notifications_v2_update_event_notification_rule_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Updates an Event Notification Rule identified by the Event Notification Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.event_notifications_v2_update_event_notification_rule_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The Event Notification GUID. (required)
        :param EventNotificationModel model: The Event Notification Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_notifications_v2_update_event_notification_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `event_notifications_v2_update_event_notification_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/eventnotifications/V2/eventnotifications/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
