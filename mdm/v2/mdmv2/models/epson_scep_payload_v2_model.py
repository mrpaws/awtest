# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class EpsonSCEPPayloadV2Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential_source': 'str',
        'certificate_authority': 'int',
        'certificate_template': 'int',
        'update_interval': 'int',
        'id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'credential_source': 'CredentialSource',
        'certificate_authority': 'CertificateAuthority',
        'certificate_template': 'CertificateTemplate',
        'update_interval': 'UpdateInterval',
        'id': 'id',
        'uuid': 'uuid'
    }

    def __init__(self, credential_source=None, certificate_authority=None, certificate_template=None, update_interval=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """EpsonSCEPPayloadV2Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._credential_source = None
        self._certificate_authority = None
        self._certificate_template = None
        self._update_interval = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if credential_source is not None:
            self.credential_source = credential_source
        if certificate_authority is not None:
            self.certificate_authority = certificate_authority
        if certificate_template is not None:
            self.certificate_template = certificate_template
        if update_interval is not None:
            self.update_interval = update_interval
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def credential_source(self):
        """Gets the credential_source of this EpsonSCEPPayloadV2Model.  # noqa: E501

        Gets or sets certificate Source.  # noqa: E501

        :return: The credential_source of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :rtype: str
        """
        return self._credential_source

    @credential_source.setter
    def credential_source(self, credential_source):
        """Sets the credential_source of this EpsonSCEPPayloadV2Model.

        Gets or sets certificate Source.  # noqa: E501

        :param credential_source: The credential_source of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :type: str
        """

        self._credential_source = credential_source

    @property
    def certificate_authority(self):
        """Gets the certificate_authority of this EpsonSCEPPayloadV2Model.  # noqa: E501

        Gets or sets certificate Authority Id.  # noqa: E501

        :return: The certificate_authority of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :rtype: int
        """
        return self._certificate_authority

    @certificate_authority.setter
    def certificate_authority(self, certificate_authority):
        """Sets the certificate_authority of this EpsonSCEPPayloadV2Model.

        Gets or sets certificate Authority Id.  # noqa: E501

        :param certificate_authority: The certificate_authority of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :type: int
        """

        self._certificate_authority = certificate_authority

    @property
    def certificate_template(self):
        """Gets the certificate_template of this EpsonSCEPPayloadV2Model.  # noqa: E501

        Gets or sets the certificate template Id.  # noqa: E501

        :return: The certificate_template of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :rtype: int
        """
        return self._certificate_template

    @certificate_template.setter
    def certificate_template(self, certificate_template):
        """Sets the certificate_template of this EpsonSCEPPayloadV2Model.

        Gets or sets the certificate template Id.  # noqa: E501

        :param certificate_template: The certificate_template of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :type: int
        """

        self._certificate_template = certificate_template

    @property
    def update_interval(self):
        """Gets the update_interval of this EpsonSCEPPayloadV2Model.  # noqa: E501

        Gets or sets the update interval.  # noqa: E501

        :return: The update_interval of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :rtype: int
        """
        return self._update_interval

    @update_interval.setter
    def update_interval(self, update_interval):
        """Sets the update_interval of this EpsonSCEPPayloadV2Model.

        Gets or sets the update interval.  # noqa: E501

        :param update_interval: The update_interval of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :type: int
        """

        self._update_interval = update_interval

    @property
    def id(self):
        """Gets the id of this EpsonSCEPPayloadV2Model.  # noqa: E501

        Gets or sets identifier.  # noqa: E501

        :return: The id of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EpsonSCEPPayloadV2Model.

        Gets or sets identifier.  # noqa: E501

        :param id: The id of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this EpsonSCEPPayloadV2Model.  # noqa: E501

        Gets or sets current objects UUID.  # noqa: E501

        :return: The uuid of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this EpsonSCEPPayloadV2Model.

        Gets or sets current objects UUID.  # noqa: E501

        :param uuid: The uuid of this EpsonSCEPPayloadV2Model.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EpsonSCEPPayloadV2Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EpsonSCEPPayloadV2Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EpsonSCEPPayloadV2Model):
            return True

        return self.to_dict() != other.to_dict()
