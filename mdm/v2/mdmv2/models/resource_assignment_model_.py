# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class ResourceAssignmentModel_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_type': 'str',
        'managed_location_group_id': 'int',
        'assigned_smart_groups': 'list[int]',
        'excluded_smart_groups': 'list[int]'
    }

    attribute_map = {
        'assignment_type': 'AssignmentType',
        'managed_location_group_id': 'ManagedLocationGroupID',
        'assigned_smart_groups': 'AssignedSmartGroups',
        'excluded_smart_groups': 'ExcludedSmartGroups'
    }

    def __init__(self, assignment_type=None, managed_location_group_id=None, assigned_smart_groups=None, excluded_smart_groups=None, _configuration=None):  # noqa: E501
        """ResourceAssignmentModel_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assignment_type = None
        self._managed_location_group_id = None
        self._assigned_smart_groups = None
        self._excluded_smart_groups = None
        self.discriminator = None

        if assignment_type is not None:
            self.assignment_type = assignment_type
        if managed_location_group_id is not None:
            self.managed_location_group_id = managed_location_group_id
        if assigned_smart_groups is not None:
            self.assigned_smart_groups = assigned_smart_groups
        if excluded_smart_groups is not None:
            self.excluded_smart_groups = excluded_smart_groups

    @property
    def assignment_type(self):
        """Gets the assignment_type of this ResourceAssignmentModel_.  # noqa: E501

        Gets or sets assignment Type for Resource.  # noqa: E501

        :return: The assignment_type of this ResourceAssignmentModel_.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this ResourceAssignmentModel_.

        Gets or sets assignment Type for Resource.  # noqa: E501

        :param assignment_type: The assignment_type of this ResourceAssignmentModel_.  # noqa: E501
        :type: str
        """

        self._assignment_type = assignment_type

    @property
    def managed_location_group_id(self):
        """Gets the managed_location_group_id of this ResourceAssignmentModel_.  # noqa: E501

        Gets or sets root Organization Group Id.  # noqa: E501

        :return: The managed_location_group_id of this ResourceAssignmentModel_.  # noqa: E501
        :rtype: int
        """
        return self._managed_location_group_id

    @managed_location_group_id.setter
    def managed_location_group_id(self, managed_location_group_id):
        """Sets the managed_location_group_id of this ResourceAssignmentModel_.

        Gets or sets root Organization Group Id.  # noqa: E501

        :param managed_location_group_id: The managed_location_group_id of this ResourceAssignmentModel_.  # noqa: E501
        :type: int
        """

        self._managed_location_group_id = managed_location_group_id

    @property
    def assigned_smart_groups(self):
        """Gets the assigned_smart_groups of this ResourceAssignmentModel_.  # noqa: E501

        Gets or sets the SmartGroups need to be assigned.  # noqa: E501

        :return: The assigned_smart_groups of this ResourceAssignmentModel_.  # noqa: E501
        :rtype: list[int]
        """
        return self._assigned_smart_groups

    @assigned_smart_groups.setter
    def assigned_smart_groups(self, assigned_smart_groups):
        """Sets the assigned_smart_groups of this ResourceAssignmentModel_.

        Gets or sets the SmartGroups need to be assigned.  # noqa: E501

        :param assigned_smart_groups: The assigned_smart_groups of this ResourceAssignmentModel_.  # noqa: E501
        :type: list[int]
        """

        self._assigned_smart_groups = assigned_smart_groups

    @property
    def excluded_smart_groups(self):
        """Gets the excluded_smart_groups of this ResourceAssignmentModel_.  # noqa: E501

        Gets or sets the SmartGroups need to be excluded.  # noqa: E501

        :return: The excluded_smart_groups of this ResourceAssignmentModel_.  # noqa: E501
        :rtype: list[int]
        """
        return self._excluded_smart_groups

    @excluded_smart_groups.setter
    def excluded_smart_groups(self, excluded_smart_groups):
        """Sets the excluded_smart_groups of this ResourceAssignmentModel_.

        Gets or sets the SmartGroups need to be excluded.  # noqa: E501

        :param excluded_smart_groups: The excluded_smart_groups of this ResourceAssignmentModel_.  # noqa: E501
        :type: list[int]
        """

        self._excluded_smart_groups = excluded_smart_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceAssignmentModel_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceAssignmentModel_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceAssignmentModel_):
            return True

        return self.to_dict() != other.to_dict()
