# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv2.api_client import ApiClient


class AdminsV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def admins_v2_add_role_to_user(self, organization_group_uuid, admin_user_uuid, role_uuid, **kwargs):  # noqa: E501
        """New - Adds a role to the specified admin user.  # noqa: E501

        Performs necessary checks and add an role for an existing admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_add_role_to_user(organization_group_uuid, admin_user_uuid, role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Location group UUID string (Required). (required)
        :param str admin_user_uuid: Admin user UUID (Required). (required)
        :param str role_uuid: Role UUID to be added (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admins_v2_add_role_to_user_with_http_info(organization_group_uuid, admin_user_uuid, role_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.admins_v2_add_role_to_user_with_http_info(organization_group_uuid, admin_user_uuid, role_uuid, **kwargs)  # noqa: E501
            return data

    def admins_v2_add_role_to_user_with_http_info(self, organization_group_uuid, admin_user_uuid, role_uuid, **kwargs):  # noqa: E501
        """New - Adds a role to the specified admin user.  # noqa: E501

        Performs necessary checks and add an role for an existing admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_add_role_to_user_with_http_info(organization_group_uuid, admin_user_uuid, role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Location group UUID string (Required). (required)
        :param str admin_user_uuid: Admin user UUID (Required). (required)
        :param str role_uuid: Role UUID to be added (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'admin_user_uuid', 'role_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admins_v2_add_role_to_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `admins_v2_add_role_to_user`")  # noqa: E501
        # verify the required parameter 'admin_user_uuid' is set
        if self.api_client.client_side_validation and ('admin_user_uuid' not in params or
                                                       params['admin_user_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `admin_user_uuid` when calling `admins_v2_add_role_to_user`")  # noqa: E501
        # verify the required parameter 'role_uuid' is set
        if self.api_client.client_side_validation and ('role_uuid' not in params or
                                                       params['role_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role_uuid` when calling `admins_v2_add_role_to_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501
        if 'admin_user_uuid' in params:
            path_params['adminUserUuid'] = params['admin_user_uuid']  # noqa: E501
        if 'role_uuid' in params:
            path_params['roleUuid'] = params['role_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/admins/{adminUserUuid}/roles/{roleUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admins_v2_change_password(self, uuid, **kwargs):  # noqa: E501
        """New - Changes the specified admin user's password.  # noqa: E501

        Performs necessary checks and update the password for an existing admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_change_password(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The admin user udid (Required). (required)
        :param AdminUser_ adminuser: The admin user details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admins_v2_change_password_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.admins_v2_change_password_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def admins_v2_change_password_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Changes the specified admin user's password.  # noqa: E501

        Performs necessary checks and update the password for an existing admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_change_password_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The admin user udid (Required). (required)
        :param AdminUser_ adminuser: The admin user details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'adminuser']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admins_v2_change_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `admins_v2_change_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'adminuser' in params:
            body_params = params['adminuser']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins/{uuid}/password', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admins_v2_create(self, admin, **kwargs):  # noqa: E501
        """New - Creates a new admin user.  # noqa: E501

        Performs necessary checks and Create a new Admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_create(admin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminV2Model admin: The admin user resource to create (Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admins_v2_create_with_http_info(admin, **kwargs)  # noqa: E501
        else:
            (data) = self.admins_v2_create_with_http_info(admin, **kwargs)  # noqa: E501
            return data

    def admins_v2_create_with_http_info(self, admin, **kwargs):  # noqa: E501
        """New - Creates a new admin user.  # noqa: E501

        Performs necessary checks and Create a new Admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_create_with_http_info(admin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdminV2Model admin: The admin user resource to create (Required). (required)
        :return: EntityId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['admin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admins_v2_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'admin' is set
        if self.api_client.client_side_validation and ('admin' not in params or
                                                       params['admin'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `admin` when calling `admins_v2_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'admin' in params:
            body_params = params['admin']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admins_v2_delete(self, uuid, **kwargs):  # noqa: E501
        """New - Deletes the specified admin user.  # noqa: E501

        V2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_delete(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Admin user UUID to be deleted(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admins_v2_delete_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.admins_v2_delete_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def admins_v2_delete_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Deletes the specified admin user.  # noqa: E501

        V2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_delete_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Admin user UUID to be deleted(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admins_v2_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `admins_v2_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admins_v2_get(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves information about the specified admin user.  # noqa: E501

        Performs necessary checks and get all the information of the Admin based on admin udid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Admin user UUID(Required). (required)
        :return: AdminUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admins_v2_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.admins_v2_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def admins_v2_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves information about the specified admin user.  # noqa: E501

        Performs necessary checks and get all the information of the Admin based on admin udid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Admin user UUID(Required). (required)
        :return: AdminUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admins_v2_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `admins_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admins_v2_remove_role_from_user(self, organization_group_uuid, admin_user_uuid, role_uuid, **kwargs):  # noqa: E501
        """New - Removes a role from the specified admin user.  # noqa: E501

        Performs necessary checks and remove an role from an existing admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_remove_role_from_user(organization_group_uuid, admin_user_uuid, role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Location group UUID string (Required). (required)
        :param str admin_user_uuid: Admin user UUID (Required). (required)
        :param str role_uuid: Role UUID to be deleted (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admins_v2_remove_role_from_user_with_http_info(organization_group_uuid, admin_user_uuid, role_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.admins_v2_remove_role_from_user_with_http_info(organization_group_uuid, admin_user_uuid, role_uuid, **kwargs)  # noqa: E501
            return data

    def admins_v2_remove_role_from_user_with_http_info(self, organization_group_uuid, admin_user_uuid, role_uuid, **kwargs):  # noqa: E501
        """New - Removes a role from the specified admin user.  # noqa: E501

        Performs necessary checks and remove an role from an existing admin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_remove_role_from_user_with_http_info(organization_group_uuid, admin_user_uuid, role_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Location group UUID string (Required). (required)
        :param str admin_user_uuid: Admin user UUID (Required). (required)
        :param str role_uuid: Role UUID to be deleted (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'admin_user_uuid', 'role_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admins_v2_remove_role_from_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `admins_v2_remove_role_from_user`")  # noqa: E501
        # verify the required parameter 'admin_user_uuid' is set
        if self.api_client.client_side_validation and ('admin_user_uuid' not in params or
                                                       params['admin_user_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `admin_user_uuid` when calling `admins_v2_remove_role_from_user`")  # noqa: E501
        # verify the required parameter 'role_uuid' is set
        if self.api_client.client_side_validation and ('role_uuid' not in params or
                                                       params['role_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role_uuid` when calling `admins_v2_remove_role_from_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501
        if 'admin_user_uuid' in params:
            path_params['adminUserUuid'] = params['admin_user_uuid']  # noqa: E501
        if 'role_uuid' in params:
            path_params['roleUuid'] = params['role_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/admins/{adminUserUuid}/roles/{roleUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admins_v2_search_async(self, **kwargs):  # noqa: E501
        """New - Searches for Admin users using the query information provided.  # noqa: E501

        Performs necessary checks and search for the admin users based on the request query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_search_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firstname: The First name to search for.
        :param str lastname: The Last name to search for.
        :param str email: The Email Address to search for.
        :param int organizationgroupid: The Organization Group Id to search for.
        :param str role: The Role name to search for.
        :param str username: The User name to search for.
        :param str orderby: Order the results by this attribute.
        :param int page: The specific page number to get.
        :param int pagesize: Maximum records per page.
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified.
        :param str status: The admin status. Allowed values are Active or Inactive. Defaults to all, if this attribute is not specified.
        :return: AdminSearchResultV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admins_v2_search_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.admins_v2_search_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def admins_v2_search_async_with_http_info(self, **kwargs):  # noqa: E501
        """New - Searches for Admin users using the query information provided.  # noqa: E501

        Performs necessary checks and search for the admin users based on the request query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_search_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str firstname: The First name to search for.
        :param str lastname: The Last name to search for.
        :param str email: The Email Address to search for.
        :param int organizationgroupid: The Organization Group Id to search for.
        :param str role: The Role name to search for.
        :param str username: The User name to search for.
        :param str orderby: Order the results by this attribute.
        :param int page: The specific page number to get.
        :param int pagesize: Maximum records per page.
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified.
        :param str status: The admin status. Allowed values are Active or Inactive. Defaults to all, if this attribute is not specified.
        :return: AdminSearchResultV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['firstname', 'lastname', 'email', 'organizationgroupid', 'role', 'username', 'orderby', 'page', 'pagesize', 'sortorder', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admins_v2_search_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'firstname' in params:
            query_params.append(('firstname', params['firstname']))  # noqa: E501
        if 'lastname' in params:
            query_params.append(('lastname', params['lastname']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminSearchResultV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def admins_v2_update(self, uuid, **kwargs):  # noqa: E501
        """New - Updates the specified admin user.  # noqa: E501

        Performs necessary checks and Update the Admin properties based on Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_update(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The admin user UUID(Required). (required)
        :param AdminV2Model admin: The updated admin user details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.admins_v2_update_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.admins_v2_update_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def admins_v2_update_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Updates the specified admin user.  # noqa: E501

        Performs necessary checks and Update the Admin properties based on Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.admins_v2_update_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: The admin user UUID(Required). (required)
        :param AdminV2Model admin: The updated admin user details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'admin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admins_v2_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `admins_v2_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'admin' in params:
            body_params = params['admin']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/admins/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
