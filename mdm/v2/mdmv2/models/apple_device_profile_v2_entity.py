# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleDeviceProfileV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'general': 'GeneralPayloadV2Entity',
        'passcode': 'ApplePasscodePayloadV2Entity_',
        'email_list': 'list[AppleEmailPayloadV2Entity]',
        'wifi_list': 'list[AppleWifiPayloadV2Entity]',
        'credentials_list': 'list[AppleCredentialsPayloadV2Entity]',
        'scep_list': 'list[AppleScepPayloadV2Entity]',
        'restrictions': 'AppleRestrictionsPayloadV2Entity_',
        'vpn_list': 'list[AppleVpnPayloadV2Entity]',
        'custom_settings_list': 'list[AppleCustomSettingsPayloadV2Entity]',
        'eas_native_mail_client_list': 'list[AppleEASNativeMailClientPayloadV2Entity]',
        'eas_aw_mail_client': 'AppleEASAWMailClientPayloadV2Entity_',
        'aw_mail_credential_list': 'list[AppleEASAWMailCredentialPayloadV2Entity]',
        'shared_device': 'AppleSharedDevicePayloadV2Entity_',
        'notifications': 'AppleNotificationPayloadV2Entity_',
        'home_screen': 'AppleHomeScreenPayloadV2Entity_',
        'google_account': 'list[AppleGoogleAccountPayloadV2Entity]',
        'domains': 'AppleDomainsPayloadV2Entity_',
        'web_clips': 'AppleWebClipPayloadV2Entity_',
        'single_sign_on': 'AppleSingleSignOnPayloadV2Entity_',
        'sso_extension_list': 'list[AppleSsoExtensionPayloadV2Entity]',
        'single_app_mode': 'AppleAppLockPayloadV2Entity_',
        'skip_setup_assistant': 'AppleSetupAssistantPayloadEntity_'
    }

    attribute_map = {
        'general': 'General',
        'passcode': 'Passcode',
        'email_list': 'EmailList',
        'wifi_list': 'WifiList',
        'credentials_list': 'CredentialsList',
        'scep_list': 'ScepList',
        'restrictions': 'Restrictions',
        'vpn_list': 'VpnList',
        'custom_settings_list': 'CustomSettingsList',
        'eas_native_mail_client_list': 'EASNativeMailClientList',
        'eas_aw_mail_client': 'EasAwMailClient',
        'aw_mail_credential_list': 'AWMailCredentialList',
        'shared_device': 'SharedDevice',
        'notifications': 'Notifications',
        'home_screen': 'HomeScreen',
        'google_account': 'GoogleAccount',
        'domains': 'Domains',
        'web_clips': 'WebClips',
        'single_sign_on': 'SingleSignOn',
        'sso_extension_list': 'SsoExtensionList',
        'single_app_mode': 'SingleAppMode',
        'skip_setup_assistant': 'SkipSetupAssistant'
    }

    def __init__(self, general=None, passcode=None, email_list=None, wifi_list=None, credentials_list=None, scep_list=None, restrictions=None, vpn_list=None, custom_settings_list=None, eas_native_mail_client_list=None, eas_aw_mail_client=None, aw_mail_credential_list=None, shared_device=None, notifications=None, home_screen=None, google_account=None, domains=None, web_clips=None, single_sign_on=None, sso_extension_list=None, single_app_mode=None, skip_setup_assistant=None, _configuration=None):  # noqa: E501
        """AppleDeviceProfileV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._general = None
        self._passcode = None
        self._email_list = None
        self._wifi_list = None
        self._credentials_list = None
        self._scep_list = None
        self._restrictions = None
        self._vpn_list = None
        self._custom_settings_list = None
        self._eas_native_mail_client_list = None
        self._eas_aw_mail_client = None
        self._aw_mail_credential_list = None
        self._shared_device = None
        self._notifications = None
        self._home_screen = None
        self._google_account = None
        self._domains = None
        self._web_clips = None
        self._single_sign_on = None
        self._sso_extension_list = None
        self._single_app_mode = None
        self._skip_setup_assistant = None
        self.discriminator = None

        if general is not None:
            self.general = general
        if passcode is not None:
            self.passcode = passcode
        if email_list is not None:
            self.email_list = email_list
        if wifi_list is not None:
            self.wifi_list = wifi_list
        if credentials_list is not None:
            self.credentials_list = credentials_list
        if scep_list is not None:
            self.scep_list = scep_list
        if restrictions is not None:
            self.restrictions = restrictions
        if vpn_list is not None:
            self.vpn_list = vpn_list
        if custom_settings_list is not None:
            self.custom_settings_list = custom_settings_list
        if eas_native_mail_client_list is not None:
            self.eas_native_mail_client_list = eas_native_mail_client_list
        if eas_aw_mail_client is not None:
            self.eas_aw_mail_client = eas_aw_mail_client
        if aw_mail_credential_list is not None:
            self.aw_mail_credential_list = aw_mail_credential_list
        if shared_device is not None:
            self.shared_device = shared_device
        if notifications is not None:
            self.notifications = notifications
        if home_screen is not None:
            self.home_screen = home_screen
        if google_account is not None:
            self.google_account = google_account
        if domains is not None:
            self.domains = domains
        if web_clips is not None:
            self.web_clips = web_clips
        if single_sign_on is not None:
            self.single_sign_on = single_sign_on
        if sso_extension_list is not None:
            self.sso_extension_list = sso_extension_list
        if single_app_mode is not None:
            self.single_app_mode = single_app_mode
        if skip_setup_assistant is not None:
            self.skip_setup_assistant = skip_setup_assistant

    @property
    def general(self):
        """Gets the general of this AppleDeviceProfileV2Entity.  # noqa: E501


        :return: The general of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: GeneralPayloadV2Entity
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this AppleDeviceProfileV2Entity.


        :param general: The general of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: GeneralPayloadV2Entity
        """

        self._general = general

    @property
    def passcode(self):
        """Gets the passcode of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets Passcode payload.  # noqa: E501

        :return: The passcode of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: ApplePasscodePayloadV2Entity_
        """
        return self._passcode

    @passcode.setter
    def passcode(self, passcode):
        """Sets the passcode of this AppleDeviceProfileV2Entity.

        Gets or sets Passcode payload.  # noqa: E501

        :param passcode: The passcode of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: ApplePasscodePayloadV2Entity_
        """

        self._passcode = passcode

    @property
    def email_list(self):
        """Gets the email_list of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets List of Email payload.  # noqa: E501

        :return: The email_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleEmailPayloadV2Entity]
        """
        return self._email_list

    @email_list.setter
    def email_list(self, email_list):
        """Sets the email_list of this AppleDeviceProfileV2Entity.

        Gets or sets List of Email payload.  # noqa: E501

        :param email_list: The email_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleEmailPayloadV2Entity]
        """

        self._email_list = email_list

    @property
    def wifi_list(self):
        """Gets the wifi_list of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets List of Wi-Fi payload.  # noqa: E501

        :return: The wifi_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleWifiPayloadV2Entity]
        """
        return self._wifi_list

    @wifi_list.setter
    def wifi_list(self, wifi_list):
        """Sets the wifi_list of this AppleDeviceProfileV2Entity.

        Gets or sets List of Wi-Fi payload.  # noqa: E501

        :param wifi_list: The wifi_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleWifiPayloadV2Entity]
        """

        self._wifi_list = wifi_list

    @property
    def credentials_list(self):
        """Gets the credentials_list of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets List of Credentials payload.  # noqa: E501

        :return: The credentials_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleCredentialsPayloadV2Entity]
        """
        return self._credentials_list

    @credentials_list.setter
    def credentials_list(self, credentials_list):
        """Sets the credentials_list of this AppleDeviceProfileV2Entity.

        Gets or sets List of Credentials payload.  # noqa: E501

        :param credentials_list: The credentials_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleCredentialsPayloadV2Entity]
        """

        self._credentials_list = credentials_list

    @property
    def scep_list(self):
        """Gets the scep_list of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets List of SCEP payload.  # noqa: E501

        :return: The scep_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleScepPayloadV2Entity]
        """
        return self._scep_list

    @scep_list.setter
    def scep_list(self, scep_list):
        """Sets the scep_list of this AppleDeviceProfileV2Entity.

        Gets or sets List of SCEP payload.  # noqa: E501

        :param scep_list: The scep_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleScepPayloadV2Entity]
        """

        self._scep_list = scep_list

    @property
    def restrictions(self):
        """Gets the restrictions of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets Restrictions payload.  # noqa: E501

        :return: The restrictions of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleRestrictionsPayloadV2Entity_
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this AppleDeviceProfileV2Entity.

        Gets or sets Restrictions payload.  # noqa: E501

        :param restrictions: The restrictions of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleRestrictionsPayloadV2Entity_
        """

        self._restrictions = restrictions

    @property
    def vpn_list(self):
        """Gets the vpn_list of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets List of VPN payload.  # noqa: E501

        :return: The vpn_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleVpnPayloadV2Entity]
        """
        return self._vpn_list

    @vpn_list.setter
    def vpn_list(self, vpn_list):
        """Sets the vpn_list of this AppleDeviceProfileV2Entity.

        Gets or sets List of VPN payload.  # noqa: E501

        :param vpn_list: The vpn_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleVpnPayloadV2Entity]
        """

        self._vpn_list = vpn_list

    @property
    def custom_settings_list(self):
        """Gets the custom_settings_list of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets List of Custom Settings payload.  # noqa: E501

        :return: The custom_settings_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleCustomSettingsPayloadV2Entity]
        """
        return self._custom_settings_list

    @custom_settings_list.setter
    def custom_settings_list(self, custom_settings_list):
        """Sets the custom_settings_list of this AppleDeviceProfileV2Entity.

        Gets or sets List of Custom Settings payload.  # noqa: E501

        :param custom_settings_list: The custom_settings_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleCustomSettingsPayloadV2Entity]
        """

        self._custom_settings_list = custom_settings_list

    @property
    def eas_native_mail_client_list(self):
        """Gets the eas_native_mail_client_list of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets List of EAS Native Mail Client payload.  # noqa: E501

        :return: The eas_native_mail_client_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleEASNativeMailClientPayloadV2Entity]
        """
        return self._eas_native_mail_client_list

    @eas_native_mail_client_list.setter
    def eas_native_mail_client_list(self, eas_native_mail_client_list):
        """Sets the eas_native_mail_client_list of this AppleDeviceProfileV2Entity.

        Gets or sets List of EAS Native Mail Client payload.  # noqa: E501

        :param eas_native_mail_client_list: The eas_native_mail_client_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleEASNativeMailClientPayloadV2Entity]
        """

        self._eas_native_mail_client_list = eas_native_mail_client_list

    @property
    def eas_aw_mail_client(self):
        """Gets the eas_aw_mail_client of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets EAS AirWatch Mail Client payload.  # noqa: E501

        :return: The eas_aw_mail_client of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleEASAWMailClientPayloadV2Entity_
        """
        return self._eas_aw_mail_client

    @eas_aw_mail_client.setter
    def eas_aw_mail_client(self, eas_aw_mail_client):
        """Sets the eas_aw_mail_client of this AppleDeviceProfileV2Entity.

        Gets or sets EAS AirWatch Mail Client payload.  # noqa: E501

        :param eas_aw_mail_client: The eas_aw_mail_client of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleEASAWMailClientPayloadV2Entity_
        """

        self._eas_aw_mail_client = eas_aw_mail_client

    @property
    def aw_mail_credential_list(self):
        """Gets the aw_mail_credential_list of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets List of EAS AirWatch Mail Credential payload.  # noqa: E501

        :return: The aw_mail_credential_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleEASAWMailCredentialPayloadV2Entity]
        """
        return self._aw_mail_credential_list

    @aw_mail_credential_list.setter
    def aw_mail_credential_list(self, aw_mail_credential_list):
        """Sets the aw_mail_credential_list of this AppleDeviceProfileV2Entity.

        Gets or sets List of EAS AirWatch Mail Credential payload.  # noqa: E501

        :param aw_mail_credential_list: The aw_mail_credential_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleEASAWMailCredentialPayloadV2Entity]
        """

        self._aw_mail_credential_list = aw_mail_credential_list

    @property
    def shared_device(self):
        """Gets the shared_device of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets Shared Device payload.  # noqa: E501

        :return: The shared_device of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleSharedDevicePayloadV2Entity_
        """
        return self._shared_device

    @shared_device.setter
    def shared_device(self, shared_device):
        """Sets the shared_device of this AppleDeviceProfileV2Entity.

        Gets or sets Shared Device payload.  # noqa: E501

        :param shared_device: The shared_device of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleSharedDevicePayloadV2Entity_
        """

        self._shared_device = shared_device

    @property
    def notifications(self):
        """Gets the notifications of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets Noticiation payload.  # noqa: E501

        :return: The notifications of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleNotificationPayloadV2Entity_
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this AppleDeviceProfileV2Entity.

        Gets or sets Noticiation payload.  # noqa: E501

        :param notifications: The notifications of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleNotificationPayloadV2Entity_
        """

        self._notifications = notifications

    @property
    def home_screen(self):
        """Gets the home_screen of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets Homescreen payload.  # noqa: E501

        :return: The home_screen of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleHomeScreenPayloadV2Entity_
        """
        return self._home_screen

    @home_screen.setter
    def home_screen(self, home_screen):
        """Sets the home_screen of this AppleDeviceProfileV2Entity.

        Gets or sets Homescreen payload.  # noqa: E501

        :param home_screen: The home_screen of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleHomeScreenPayloadV2Entity_
        """

        self._home_screen = home_screen

    @property
    def google_account(self):
        """Gets the google_account of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets List of Google Account payload.  # noqa: E501

        :return: The google_account of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleGoogleAccountPayloadV2Entity]
        """
        return self._google_account

    @google_account.setter
    def google_account(self, google_account):
        """Sets the google_account of this AppleDeviceProfileV2Entity.

        Gets or sets List of Google Account payload.  # noqa: E501

        :param google_account: The google_account of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleGoogleAccountPayloadV2Entity]
        """

        self._google_account = google_account

    @property
    def domains(self):
        """Gets the domains of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets Domains payload.  # noqa: E501

        :return: The domains of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleDomainsPayloadV2Entity_
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this AppleDeviceProfileV2Entity.

        Gets or sets Domains payload.  # noqa: E501

        :param domains: The domains of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleDomainsPayloadV2Entity_
        """

        self._domains = domains

    @property
    def web_clips(self):
        """Gets the web_clips of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets Web Clip payload.  # noqa: E501

        :return: The web_clips of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleWebClipPayloadV2Entity_
        """
        return self._web_clips

    @web_clips.setter
    def web_clips(self, web_clips):
        """Sets the web_clips of this AppleDeviceProfileV2Entity.

        Gets or sets Web Clip payload.  # noqa: E501

        :param web_clips: The web_clips of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleWebClipPayloadV2Entity_
        """

        self._web_clips = web_clips

    @property
    def single_sign_on(self):
        """Gets the single_sign_on of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets Single sign on payload.  # noqa: E501

        :return: The single_sign_on of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleSingleSignOnPayloadV2Entity_
        """
        return self._single_sign_on

    @single_sign_on.setter
    def single_sign_on(self, single_sign_on):
        """Sets the single_sign_on of this AppleDeviceProfileV2Entity.

        Gets or sets Single sign on payload.  # noqa: E501

        :param single_sign_on: The single_sign_on of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleSingleSignOnPayloadV2Entity_
        """

        self._single_sign_on = single_sign_on

    @property
    def sso_extension_list(self):
        """Gets the sso_extension_list of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets SSO Extension payload.  # noqa: E501

        :return: The sso_extension_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: list[AppleSsoExtensionPayloadV2Entity]
        """
        return self._sso_extension_list

    @sso_extension_list.setter
    def sso_extension_list(self, sso_extension_list):
        """Sets the sso_extension_list of this AppleDeviceProfileV2Entity.

        Gets or sets SSO Extension payload.  # noqa: E501

        :param sso_extension_list: The sso_extension_list of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: list[AppleSsoExtensionPayloadV2Entity]
        """

        self._sso_extension_list = sso_extension_list

    @property
    def single_app_mode(self):
        """Gets the single_app_mode of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets App Lock payload.  # noqa: E501

        :return: The single_app_mode of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleAppLockPayloadV2Entity_
        """
        return self._single_app_mode

    @single_app_mode.setter
    def single_app_mode(self, single_app_mode):
        """Sets the single_app_mode of this AppleDeviceProfileV2Entity.

        Gets or sets App Lock payload.  # noqa: E501

        :param single_app_mode: The single_app_mode of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleAppLockPayloadV2Entity_
        """

        self._single_app_mode = single_app_mode

    @property
    def skip_setup_assistant(self):
        """Gets the skip_setup_assistant of this AppleDeviceProfileV2Entity.  # noqa: E501

        Gets or sets Setup Assistant payload.  # noqa: E501

        :return: The skip_setup_assistant of this AppleDeviceProfileV2Entity.  # noqa: E501
        :rtype: AppleSetupAssistantPayloadEntity_
        """
        return self._skip_setup_assistant

    @skip_setup_assistant.setter
    def skip_setup_assistant(self, skip_setup_assistant):
        """Sets the skip_setup_assistant of this AppleDeviceProfileV2Entity.

        Gets or sets Setup Assistant payload.  # noqa: E501

        :param skip_setup_assistant: The skip_setup_assistant of this AppleDeviceProfileV2Entity.  # noqa: E501
        :type: AppleSetupAssistantPayloadEntity_
        """

        self._skip_setup_assistant = skip_setup_assistant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleDeviceProfileV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleDeviceProfileV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleDeviceProfileV2Entity):
            return True

        return self.to_dict() != other.to_dict()
