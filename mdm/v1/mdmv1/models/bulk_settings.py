# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class BulkSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'send_message': 'int',
        'enterprise_wipe': 'int',
        'delete_device': 'int',
        'gps': 'int',
        'lock_device': 'int'
    }

    attribute_map = {
        'send_message': 'SendMessage',
        'enterprise_wipe': 'EnterpriseWipe',
        'delete_device': 'DeleteDevice',
        'gps': 'GPS',
        'lock_device': 'LockDevice'
    }

    def __init__(self, send_message=None, enterprise_wipe=None, delete_device=None, gps=None, lock_device=None, _configuration=None):  # noqa: E501
        """BulkSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._send_message = None
        self._enterprise_wipe = None
        self._delete_device = None
        self._gps = None
        self._lock_device = None
        self.discriminator = None

        if send_message is not None:
            self.send_message = send_message
        if enterprise_wipe is not None:
            self.enterprise_wipe = enterprise_wipe
        if delete_device is not None:
            self.delete_device = delete_device
        if gps is not None:
            self.gps = gps
        if lock_device is not None:
            self.lock_device = lock_device

    @property
    def send_message(self):
        """Gets the send_message of this BulkSettings.  # noqa: E501

        Gets or sets max Devices allowed for bulk SendMessage.  # noqa: E501

        :return: The send_message of this BulkSettings.  # noqa: E501
        :rtype: int
        """
        return self._send_message

    @send_message.setter
    def send_message(self, send_message):
        """Sets the send_message of this BulkSettings.

        Gets or sets max Devices allowed for bulk SendMessage.  # noqa: E501

        :param send_message: The send_message of this BulkSettings.  # noqa: E501
        :type: int
        """

        self._send_message = send_message

    @property
    def enterprise_wipe(self):
        """Gets the enterprise_wipe of this BulkSettings.  # noqa: E501

        Gets or sets max Devices allowed for bulk EnterpriseWipe.  # noqa: E501

        :return: The enterprise_wipe of this BulkSettings.  # noqa: E501
        :rtype: int
        """
        return self._enterprise_wipe

    @enterprise_wipe.setter
    def enterprise_wipe(self, enterprise_wipe):
        """Sets the enterprise_wipe of this BulkSettings.

        Gets or sets max Devices allowed for bulk EnterpriseWipe.  # noqa: E501

        :param enterprise_wipe: The enterprise_wipe of this BulkSettings.  # noqa: E501
        :type: int
        """

        self._enterprise_wipe = enterprise_wipe

    @property
    def delete_device(self):
        """Gets the delete_device of this BulkSettings.  # noqa: E501

        Gets or sets max Devices allowed for bulk DeleteDevice.  # noqa: E501

        :return: The delete_device of this BulkSettings.  # noqa: E501
        :rtype: int
        """
        return self._delete_device

    @delete_device.setter
    def delete_device(self, delete_device):
        """Sets the delete_device of this BulkSettings.

        Gets or sets max Devices allowed for bulk DeleteDevice.  # noqa: E501

        :param delete_device: The delete_device of this BulkSettings.  # noqa: E501
        :type: int
        """

        self._delete_device = delete_device

    @property
    def gps(self):
        """Gets the gps of this BulkSettings.  # noqa: E501

        Gets or sets max Devices allowed for bulk GPS.  # noqa: E501

        :return: The gps of this BulkSettings.  # noqa: E501
        :rtype: int
        """
        return self._gps

    @gps.setter
    def gps(self, gps):
        """Sets the gps of this BulkSettings.

        Gets or sets max Devices allowed for bulk GPS.  # noqa: E501

        :param gps: The gps of this BulkSettings.  # noqa: E501
        :type: int
        """

        self._gps = gps

    @property
    def lock_device(self):
        """Gets the lock_device of this BulkSettings.  # noqa: E501

        Gets or sets max Devices allowed for bulk LockDevice.  # noqa: E501

        :return: The lock_device of this BulkSettings.  # noqa: E501
        :rtype: int
        """
        return self._lock_device

    @lock_device.setter
    def lock_device(self, lock_device):
        """Sets the lock_device of this BulkSettings.

        Gets or sets max Devices allowed for bulk LockDevice.  # noqa: E501

        :param lock_device: The lock_device of this BulkSettings.  # noqa: E501
        :type: int
        """

        self._lock_device = lock_device

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BulkSettings):
            return True

        return self.to_dict() != other.to_dict()
