# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv1.api_client import ApiClient


class DevicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def devices_bulk_delete_devices_async(self, bulk_input, **kwargs):  # noqa: E501
        """New - Deletes multiple devices identified by device id or alternate id.  # noqa: E501

         Deletes multiple multiple devices by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_bulk_delete_devices_async(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: Bulk input containing multiple device ids.(Required). (required)
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. If not included, device id is used. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_bulk_delete_devices_async_with_http_info(bulk_input, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_bulk_delete_devices_async_with_http_info(bulk_input, **kwargs)  # noqa: E501
            return data

    def devices_bulk_delete_devices_async_with_http_info(self, bulk_input, **kwargs):  # noqa: E501
        """New - Deletes multiple devices identified by device id or alternate id.  # noqa: E501

         Deletes multiple multiple devices by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_bulk_delete_devices_async_with_http_info(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: Bulk input containing multiple device ids.(Required). (required)
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. If not included, device id is used. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input', 'searchby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_bulk_delete_devices_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_input' is set
        if self.api_client.client_side_validation and ('bulk_input' not in params or
                                                       params['bulk_input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_input` when calling `devices_bulk_delete_devices_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_bulk_get_devices_by_alternate_id_async(self, bulk_input, searchby, **kwargs):  # noqa: E501
        """New - Retrieves information about multiple devices identified by the specified id type.  # noqa: E501

         Retrieves the device details for multiple devices by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_bulk_get_devices_by_alternate_id_async(bulk_input, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: Bulk input containing multiple device IDs.(Required). (required)
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).(Required) (required)
        :return: DeviceSearchResultExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_bulk_get_devices_by_alternate_id_async_with_http_info(bulk_input, searchby, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_bulk_get_devices_by_alternate_id_async_with_http_info(bulk_input, searchby, **kwargs)  # noqa: E501
            return data

    def devices_bulk_get_devices_by_alternate_id_async_with_http_info(self, bulk_input, searchby, **kwargs):  # noqa: E501
        """New - Retrieves information about multiple devices identified by the specified id type.  # noqa: E501

         Retrieves the device details for multiple devices by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_bulk_get_devices_by_alternate_id_async_with_http_info(bulk_input, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: Bulk input containing multiple device IDs.(Required). (required)
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).(Required) (required)
        :return: DeviceSearchResultExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input', 'searchby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_bulk_get_devices_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_input' is set
        if self.api_client.client_side_validation and ('bulk_input' not in params or
                                                       params['bulk_input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_input` when calling `devices_bulk_get_devices_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `devices_bulk_get_devices_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSearchResultExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_delete_async(self, id, **kwargs):  # noqa: E501
        """New - Delete Device details by Device id.  # noqa: E501

        Delete Device details by Device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_delete_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device id of the Device.(Required). (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_delete_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_delete_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devices_delete_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """New - Delete Device details by Device id.  # noqa: E501

        Delete Device details by Device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_delete_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device id of the Device.(Required). (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_delete_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `devices_delete_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_delete_by_address_async(self, macaddress, **kwargs):  # noqa: E501
        """Deletes the device identified by MAC address.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_delete_by_address_async(macaddress, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str macaddress: MAC address of the device. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_delete_by_address_async_with_http_info(macaddress, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_delete_by_address_async_with_http_info(macaddress, **kwargs)  # noqa: E501
            return data

    def devices_delete_by_address_async_with_http_info(self, macaddress, **kwargs):  # noqa: E501
        """Deletes the device identified by MAC address.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_delete_by_address_async_with_http_info(macaddress, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str macaddress: MAC address of the device. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['macaddress']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_delete_by_address_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'macaddress' is set
        if self.api_client.client_side_validation and ('macaddress' not in params or
                                                       params['macaddress'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `macaddress` when calling `devices_delete_by_address_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'macaddress' in params:
            path_params['macaddress'] = params['macaddress']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/macaddress/{macaddress}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_delete_by_alternate_id_async(self, id, searchby, **kwargs):  # noqa: E501
        """New - Deletes Device details by alternate id for Device.  # noqa: E501

         Deletes the device details by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_delete_by_alternate_id_async(id, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device alternate ID.(Required) (required)
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_delete_by_alternate_id_async_with_http_info(id, searchby, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_delete_by_alternate_id_async_with_http_info(id, searchby, **kwargs)  # noqa: E501
            return data

    def devices_delete_by_alternate_id_async_with_http_info(self, id, searchby, **kwargs):  # noqa: E501
        """New - Deletes Device details by alternate id for Device.  # noqa: E501

         Deletes the device details by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_delete_by_alternate_id_async_with_http_info(id, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device alternate ID.(Required) (required)
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'searchby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_delete_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `devices_delete_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `devices_delete_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_device_extensive_search_async(self, **kwargs):  # noqa: E501
        """New - Extensive search of device details.  # noqa: E501

        This API returns device details, summarized product compliance details, smart groups, and custom attributes for enrolled devices. For unenrolled devices, only the device details are returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_device_extensive_search_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroup to be searched, admin's OG is considered if not sent.
        :param int platform: Device platform.
        :param datetime startdatetime: Filters devices such that devices with last seen after this date will be returned.
        :param datetime enddatetime: Filters devices such that devices with last seen till this date will be returned.
        :param int deviceid: Device Identifier.
        :param str customattributes: Custom attribute names.
        :param str enrollmentstatus: Filters devices based on their EnrollmentStatus [Enrolled, EnterpriseWipePending, DeviceWipePending, Unenrolled].
        :param str statuschangestarttime: Filters the devices for which EnrollmentStatus has changes from enrollmentstatuschangefrom datetime. This filter is only for Enrolled and Unenrolled enrollment status.
        :param str statuschangeendtime: Filters the devices for which EnrollmentStatus has changes till enrollmentstatuschangeto datetime. This filter is only for Enrolled and Unenrolled enrollment status.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str macaddress: MAC address.
        :return: DeviceExtensiveSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_device_extensive_search_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.devices_device_extensive_search_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def devices_device_extensive_search_async_with_http_info(self, **kwargs):  # noqa: E501
        """New - Extensive search of device details.  # noqa: E501

        This API returns device details, summarized product compliance details, smart groups, and custom attributes for enrolled devices. For unenrolled devices, only the device details are returned in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_device_extensive_search_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroup to be searched, admin's OG is considered if not sent.
        :param int platform: Device platform.
        :param datetime startdatetime: Filters devices such that devices with last seen after this date will be returned.
        :param datetime enddatetime: Filters devices such that devices with last seen till this date will be returned.
        :param int deviceid: Device Identifier.
        :param str customattributes: Custom attribute names.
        :param str enrollmentstatus: Filters devices based on their EnrollmentStatus [Enrolled, EnterpriseWipePending, DeviceWipePending, Unenrolled].
        :param str statuschangestarttime: Filters the devices for which EnrollmentStatus has changes from enrollmentstatuschangefrom datetime. This filter is only for Enrolled and Unenrolled enrollment status.
        :param str statuschangeendtime: Filters the devices for which EnrollmentStatus has changes till enrollmentstatuschangeto datetime. This filter is only for Enrolled and Unenrolled enrollment status.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str macaddress: MAC address.
        :return: DeviceExtensiveSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'platform', 'startdatetime', 'enddatetime', 'deviceid', 'customattributes', 'enrollmentstatus', 'statuschangestarttime', 'statuschangeendtime', 'page', 'pagesize', 'macaddress']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_device_extensive_search_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'startdatetime' in params:
            query_params.append(('startdatetime', params['startdatetime']))  # noqa: E501
        if 'enddatetime' in params:
            query_params.append(('enddatetime', params['enddatetime']))  # noqa: E501
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'customattributes' in params:
            query_params.append(('customattributes', params['customattributes']))  # noqa: E501
        if 'enrollmentstatus' in params:
            query_params.append(('enrollmentstatus', params['enrollmentstatus']))  # noqa: E501
        if 'statuschangestarttime' in params:
            query_params.append(('statuschangestarttime', params['statuschangestarttime']))  # noqa: E501
        if 'statuschangeendtime' in params:
            query_params.append(('statuschangeendtime', params['statuschangeendtime']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'macaddress' in params:
            query_params.append(('macaddress', params['macaddress']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/extensivesearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceExtensiveSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_device_extensive_search_lite_async(self, **kwargs):  # noqa: E501
        """New - Searches devices and its custom attributes.  # noqa: E501

        Searches devices and its custom attributes using the query information provided. A list of custom attributes to search can be given as a query parameter. The search results are limited to the requested custom attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_device_extensive_search_lite_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroup to be searched. Admin's OG is considered if this is not sent.
        :param str platform: Device Platform [Android, Apple, AppleOsX, AppleTv, Athena, AveryDennisonPrinter, ChromeBook, ChromeOS, Epson, Motorola, Qnx, Symbian, ToshibaPrinter, WindowsMobile, WindowsPc, WindowsPhone8, WinRT, ZebraPrinter].
        :param datetime seensince: Filters devices such that devices with last seen after this date will be returned.
        :param datetime seentill: Filters devices such that devices with last seen till this date will be returned.
        :param int deviceid: Device Identifier.
        :param str customattributes: Custom attribute names.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceExtensiveLiteSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_device_extensive_search_lite_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.devices_device_extensive_search_lite_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def devices_device_extensive_search_lite_async_with_http_info(self, **kwargs):  # noqa: E501
        """New - Searches devices and its custom attributes.  # noqa: E501

        Searches devices and its custom attributes using the query information provided. A list of custom attributes to search can be given as a query parameter. The search results are limited to the requested custom attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_device_extensive_search_lite_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroup to be searched. Admin's OG is considered if this is not sent.
        :param str platform: Device Platform [Android, Apple, AppleOsX, AppleTv, Athena, AveryDennisonPrinter, ChromeBook, ChromeOS, Epson, Motorola, Qnx, Symbian, ToshibaPrinter, WindowsMobile, WindowsPc, WindowsPhone8, WinRT, ZebraPrinter].
        :param datetime seensince: Filters devices such that devices with last seen after this date will be returned.
        :param datetime seentill: Filters devices such that devices with last seen till this date will be returned.
        :param int deviceid: Device Identifier.
        :param str customattributes: Custom attribute names.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :return: DeviceExtensiveLiteSearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid', 'platform', 'seensince', 'seentill', 'deviceid', 'customattributes', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_device_extensive_search_lite_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'seensince' in params:
            query_params.append(('seensince', params['seensince']))  # noqa: E501
        if 'seentill' in params:
            query_params.append(('seentill', params['seentill']))  # noqa: E501
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'customattributes' in params:
            query_params.append(('customattributes', params['customattributes']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/litesearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceExtensiveLiteSearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_edit_device_async(self, id, device, **kwargs):  # noqa: E501
        """New - Edit the device details identified by Device id.  # noqa: E501

        Edit the device details identified by Device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_edit_device_async(id, device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device id of the Device.(Required). (required)
        :param DeviceRequestModel device: Device details which need to be updated.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_edit_device_async_with_http_info(id, device, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_edit_device_async_with_http_info(id, device, **kwargs)  # noqa: E501
            return data

    def devices_edit_device_async_with_http_info(self, id, device, **kwargs):  # noqa: E501
        """New - Edit the device details identified by Device id.  # noqa: E501

        Edit the device details identified by Device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_edit_device_async_with_http_info(id, device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device id of the Device.(Required). (required)
        :param DeviceRequestModel device: Device details which need to be updated.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'device']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_edit_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `devices_edit_device_async`")  # noqa: E501
        # verify the required parameter 'device' is set
        if self.api_client.client_side_validation and ('device' not in params or
                                                       params['device'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device` when calling `devices_edit_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device' in params:
            body_params = params['device']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_edit_device_by_alternate_id_async(self, device, id, searchby, **kwargs):  # noqa: E501
        """New - Edit the device details identified by alternate id for Device.  # noqa: E501

         Updates the device details by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_edit_device_by_alternate_id_async(device, id, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceRequestModel device: Device details which need to be updated.(Required). (required)
        :param int id: Device alternate id.(Required) (required)
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_edit_device_by_alternate_id_async_with_http_info(device, id, searchby, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_edit_device_by_alternate_id_async_with_http_info(device, id, searchby, **kwargs)  # noqa: E501
            return data

    def devices_edit_device_by_alternate_id_async_with_http_info(self, device, id, searchby, **kwargs):  # noqa: E501
        """New - Edit the device details identified by alternate id for Device.  # noqa: E501

         Updates the device details by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_edit_device_by_alternate_id_async_with_http_info(device, id, searchby, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceRequestModel device: Device details which need to be updated.(Required). (required)
        :param int id: Device alternate id.(Required) (required)
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'id', 'searchby']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_edit_device_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if self.api_client.client_side_validation and ('device' not in params or
                                                       params['device'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device` when calling `devices_edit_device_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `devices_edit_device_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `devices_edit_device_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device' in params:
            body_params = params['device']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_filter_enrolled_devices_count_async(self, request, **kwargs):  # noqa: E501
        """Retrieves Count of all enrolled devices based on any or all of the following OG id, Tag Name,and devices registered after 'SeenSince' datetime until the 'SeenTill' datetime.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_filter_enrolled_devices_count_async(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, str) request: Http Request. (required)
        :param DeviceCountFilterCriteriaRequestModel filter_criteria: Filter Entity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_filter_enrolled_devices_count_async_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_filter_enrolled_devices_count_async_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def devices_filter_enrolled_devices_count_async_with_http_info(self, request, **kwargs):  # noqa: E501
        """Retrieves Count of all enrolled devices based on any or all of the following OG id, Tag Name,and devices registered after 'SeenSince' datetime until the 'SeenTill' datetime.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_filter_enrolled_devices_count_async_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param dict(str, str) request: Http Request. (required)
        :param DeviceCountFilterCriteriaRequestModel filter_criteria: Filter Entity.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'filter_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_filter_enrolled_devices_count_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if self.api_client.client_side_validation and ('request' not in params or
                                                       params['request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `devices_filter_enrolled_devices_count_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request' in params:
            query_params.append(('request', params['request']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter_criteria' in params:
            body_params = params['filter_criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/enrolleddevicescount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_app_status_async(self, search_by, id, groupid, bundle_id, version, device_type, **kwargs):  # noqa: E501
        """New - Gets App Status for a combination of input elements.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_app_status_async(search_by, id, groupid, bundle_id, version, device_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate id type [Macaddress, Udid, Serialnumber, ImeiNumber etc].(Required). (required)
        :param str id: The alternate id for the provided type.(Required). (required)
        :param str groupid: Organizations Groups's customer code.(Required). (required)
        :param str bundle_id: App Bundle Id.(Required). (required)
        :param str version: App version.(Required). (required)
        :param str device_type: Type of the device [Apple, Android, WindowsPhone8, WinRT].(Required). (required)
        :return: AppStatusV1ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_app_status_async_with_http_info(search_by, id, groupid, bundle_id, version, device_type, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_app_status_async_with_http_info(search_by, id, groupid, bundle_id, version, device_type, **kwargs)  # noqa: E501
            return data

    def devices_get_app_status_async_with_http_info(self, search_by, id, groupid, bundle_id, version, device_type, **kwargs):  # noqa: E501
        """New - Gets App Status for a combination of input elements.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_app_status_async_with_http_info(search_by, id, groupid, bundle_id, version, device_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_by: The alternate id type [Macaddress, Udid, Serialnumber, ImeiNumber etc].(Required). (required)
        :param str id: The alternate id for the provided type.(Required). (required)
        :param str groupid: Organizations Groups's customer code.(Required). (required)
        :param str bundle_id: App Bundle Id.(Required). (required)
        :param str version: App version.(Required). (required)
        :param str device_type: Type of the device [Apple, Android, WindowsPhone8, WinRT].(Required). (required)
        :return: AppStatusV1ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_by', 'id', 'groupid', 'bundle_id', 'version', 'device_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_app_status_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_by' is set
        if self.api_client.client_side_validation and ('search_by' not in params or
                                                       params['search_by'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_by` when calling `devices_get_app_status_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `devices_get_app_status_async`")  # noqa: E501
        # verify the required parameter 'groupid' is set
        if self.api_client.client_side_validation and ('groupid' not in params or
                                                       params['groupid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `groupid` when calling `devices_get_app_status_async`")  # noqa: E501
        # verify the required parameter 'bundle_id' is set
        if self.api_client.client_side_validation and ('bundle_id' not in params or
                                                       params['bundle_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle_id` when calling `devices_get_app_status_async`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in params or
                                                       params['version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version` when calling `devices_get_app_status_async`")  # noqa: E501
        # verify the required parameter 'device_type' is set
        if self.api_client.client_side_validation and ('device_type' not in params or
                                                       params['device_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_type` when calling `devices_get_app_status_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'groupid' in params:
            query_params.append(('groupid', params['groupid']))  # noqa: E501
        if 'bundle_id' in params:
            query_params.append(('bundleId', params['bundle_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/appstatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppStatusV1ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_bulk_settings(self, **kwargs):  # noqa: E501
        """Retrieve limits for bulk actions.  # noqa: E501

        Gets the limit for bulk action as below:  1. Max Devices allowed for bulk SendMessage  2. Max Devices allowed for bulk EnterpriseWipe  3. Max Devices allowed for bulk DeleteDevice  4. Max Devices allowed for bulk GPS  5. Max Devices allowed for bulk RemoveFSecure.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_bulk_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BulkSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_bulk_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_bulk_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def devices_get_bulk_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve limits for bulk actions.  # noqa: E501

        Gets the limit for bulk action as below:  1. Max Devices allowed for bulk SendMessage  2. Max Devices allowed for bulk EnterpriseWipe  3. Max Devices allowed for bulk DeleteDevice  4. Max Devices allowed for bulk GPS  5. Max Devices allowed for bulk RemoveFSecure.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_bulk_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BulkSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_bulk_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/bulksettings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_by_alternate_id_async(self, searchby, id, **kwargs):  # noqa: E501
        """New - Get Device details by Alternate id.  # noqa: E501

         Get the device details by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_by_alternate_id_async(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).(Required) (required)
        :param str id: Device alternate id.(Required) (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_by_alternate_id_async_with_http_info(searchby, id, **kwargs)  # noqa: E501
            return data

    def devices_get_by_alternate_id_async_with_http_info(self, searchby, id, **kwargs):  # noqa: E501
        """New - Get Device details by Alternate id.  # noqa: E501

         Get the device details by an alternate id which can be any one of the following ids:  1. Macaddress, 2. Udid, 3. Serialnumber, 4. ImeiNumber, 5. EasId, 6. DeviceId.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_by_alternate_id_async_with_http_info(searchby, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str searchby: The alternate id type; possible values: [Macaddress, Udid, Serialnumber, ImeiNumber, EasId, DeviceId]. (Formats: Macaddress: 848506B900BA, Udid: 6bf0f04c73681fbecfc3eb4f13cbf05b, SerialNumber: LGH871c18f631a, ImeiNumber: 354833052322837, EasId: 1234, DeviceId: 1234).(Required) (required)
        :param str id: Device alternate id.(Required) (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['searchby', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_by_alternate_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'searchby' is set
        if self.api_client.client_side_validation and ('searchby' not in params or
                                                       params['searchby'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `searchby` when calling `devices_get_by_alternate_id_async`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `devices_get_by_alternate_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'searchby' in params:
            query_params.append(('searchby', params['searchby']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_by_id_async(self, id, **kwargs):  # noqa: E501
        """New - Get Device details by Device id.  # noqa: E501

        Get Device details by Device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_by_id_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device id of the Device.(Required). (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_by_id_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_by_id_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devices_get_by_id_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """New - Get Device details by Device id.  # noqa: E501

        Get Device details by Device id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_by_id_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Device id of the Device.(Required). (required)
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `devices_get_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_by_udid_async(self, udid, **kwargs):  # noqa: E501
        """New - Get device info based on UDID.  # noqa: E501

        Get device info based on UDID. The API returns a 404 - NotFound if the device is not available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_by_udid_async(udid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str udid: UDID of the device.(Required). (required)
        :return: DeviceResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_by_udid_async_with_http_info(udid, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_by_udid_async_with_http_info(udid, **kwargs)  # noqa: E501
            return data

    def devices_get_by_udid_async_with_http_info(self, udid, **kwargs):  # noqa: E501
        """New - Get device info based on UDID.  # noqa: E501

        Get device info based on UDID. The API returns a 404 - NotFound if the device is not available.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_by_udid_async_with_http_info(udid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str udid: UDID of the device.(Required). (required)
        :return: DeviceResponseV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['udid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_by_udid_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'udid' is set
        if self.api_client.client_side_validation and ('udid' not in params or
                                                       params['udid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `udid` when calling `devices_get_by_udid_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'udid' in params:
            path_params['udid'] = params['udid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/udid/{udid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceResponseV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_device_count_details(self, **kwargs):  # noqa: E501
        """Retrieves Device Count Information which are Categorized by Device Info like Platform, EnrollmentStatus, Ownership etc..  # noqa: E501

        Retrieves the device count for the following information.  1. Total number of devices deployed in an OG.  2. Device count breakdown by Security Info.  3. Device count breakdown by Ownership Info.  4. Device count breakdown by Platform Info.  5. Device count breakdown by EnrollmentStatus Info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_device_count_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroup to be searched, user's OG is considered if not sent.
        :return: DeviceCountSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_device_count_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_device_count_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def devices_get_device_count_details_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves Device Count Information which are Categorized by Device Info like Platform, EnrollmentStatus, Ownership etc..  # noqa: E501

        Retrieves the device count for the following information.  1. Total number of devices deployed in an OG.  2. Device count breakdown by Security Info.  3. Device count breakdown by Ownership Info.  4. Device count breakdown by Platform Info.  5. Device count breakdown by EnrollmentStatus Info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_device_count_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organizationgroupid: OrganizationGroup to be searched, user's OG is considered if not sent.
        :return: DeviceCountSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_device_count_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/devicecountinfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceCountSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_device_enrollment_statusby_udid_async(self, udid, **kwargs):  # noqa: E501
        """Retrieves Device status based on the device identifier(UDID).  # noqa: E501

        Retrieves information about the device such as:  1. Device Enrollment Status 2. Device Managed By 3. User name 4. Domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_device_enrollment_statusby_udid_async(udid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str udid: Unique device identifier. (required)
        :param int organizationgroupid: DeviceUDID.
        :return: CurrentEnrollmentStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_device_enrollment_statusby_udid_async_with_http_info(udid, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_device_enrollment_statusby_udid_async_with_http_info(udid, **kwargs)  # noqa: E501
            return data

    def devices_get_device_enrollment_statusby_udid_async_with_http_info(self, udid, **kwargs):  # noqa: E501
        """Retrieves Device status based on the device identifier(UDID).  # noqa: E501

        Retrieves information about the device such as:  1. Device Enrollment Status 2. Device Managed By 3. User name 4. Domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_device_enrollment_statusby_udid_async_with_http_info(udid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str udid: Unique device identifier. (required)
        :param int organizationgroupid: DeviceUDID.
        :return: CurrentEnrollmentStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['udid', 'organizationgroupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_device_enrollment_statusby_udid_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'udid' is set
        if self.api_client.client_side_validation and ('udid' not in params or
                                                       params['udid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `udid` when calling `devices_get_device_enrollment_statusby_udid_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'udid' in params:
            path_params['udid'] = params['udid']  # noqa: E501

        query_params = []
        if 'organizationgroupid' in params:
            query_params.append(('organizationgroupid', params['organizationgroupid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/udid/{udid}/deviceenrollmentstatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CurrentEnrollmentStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_device_tags_async(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves associated tags for a device  # noqa: E501

        Retrieves a list of all associated tags for the device specified by the device UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_device_tags_async(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for a device. Ex. 153B4D9D-24DC-416B-91F9-94253D623611(Required). (required)
        :return: DeviceTagResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_device_tags_async_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_device_tags_async_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def devices_get_device_tags_async_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """New - Retrieves associated tags for a device  # noqa: E501

        Retrieves a list of all associated tags for the device specified by the device UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_device_tags_async_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: Identifier for a device. Ex. 153B4D9D-24DC-416B-91F9-94253D623611(Required). (required)
        :return: DeviceTagResultV1Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_device_tags_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `devices_get_device_tags_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{uuid}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceTagResultV1Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_devices_by_id_async(self, bulk_input, **kwargs):  # noqa: E501
        """New - Retrieves information about multiple devices identified by device id.  # noqa: E501

        Gets the details about multiple devices based on a list of device ids supplied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_devices_by_id_async(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: Bulk input containing multiple device ids.(Required). (required)
        :return: DeviceSearchResultExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_devices_by_id_async_with_http_info(bulk_input, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_devices_by_id_async_with_http_info(bulk_input, **kwargs)  # noqa: E501
            return data

    def devices_get_devices_by_id_async_with_http_info(self, bulk_input, **kwargs):  # noqa: E501
        """New - Retrieves information about multiple devices identified by device id.  # noqa: E501

        Gets the details about multiple devices based on a list of device ids supplied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_devices_by_id_async_with_http_info(bulk_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkInput bulk_input: Bulk input containing multiple device ids.(Required). (required)
        :return: DeviceSearchResultExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_input']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_devices_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_input' is set
        if self.api_client.client_side_validation and ('bulk_input' not in params or
                                                       params['bulk_input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_input` when calling `devices_get_devices_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_input' in params:
            body_params = params['bulk_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSearchResultExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_get_logged_in_users_async(self, device_id, **kwargs):  # noqa: E501
        """Gets all logged in users on the device.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_logged_in_users_async(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The device id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_get_logged_in_users_async_with_http_info(device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_get_logged_in_users_async_with_http_info(device_id, **kwargs)  # noqa: E501
            return data

    def devices_get_logged_in_users_async_with_http_info(self, device_id, **kwargs):  # noqa: E501
        """Gets all logged in users on the device.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_get_logged_in_users_async_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int device_id: The device id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_get_logged_in_users_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `devices_get_logged_in_users_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_id' in params:
            path_params['deviceId'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceId}/loggedinusers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_load_device_event_history(self, og_id, **kwargs):  # noqa: E501
        """Returns the device audit history for a device.  # noqa: E501

        The query parameters startdate and enddate accepts the below DateTime formats :  <br>yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff, yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,</br>  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_load_device_event_history(og_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str og_id: organization Group code. (required)
        :param str serialnumber: The device serial number (Example : SerialNumber123).
        :param str status: The device status. Accepted values are 'UnEnrolled', 'Deleted', 'Replaced', 'Inserted', and 'Updated'.
        :param datetime startdate: DateTime, Filters device events where event date falls on/after this startdate time. Start date should be within 30 days of the current date.
        :param datetime enddate: DateTime, Filters device events where event date falls on/before this enddate time.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_load_device_event_history_with_http_info(og_id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_load_device_event_history_with_http_info(og_id, **kwargs)  # noqa: E501
            return data

    def devices_load_device_event_history_with_http_info(self, og_id, **kwargs):  # noqa: E501
        """Returns the device audit history for a device.  # noqa: E501

        The query parameters startdate and enddate accepts the below DateTime formats :  <br>yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff, yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff,</br>  yyyy/MM/ddTHH:mm:ss.fff, yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt, yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_load_device_event_history_with_http_info(og_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str og_id: organization Group code. (required)
        :param str serialnumber: The device serial number (Example : SerialNumber123).
        :param str status: The device status. Accepted values are 'UnEnrolled', 'Deleted', 'Replaced', 'Inserted', and 'Updated'.
        :param datetime startdate: DateTime, Filters device events where event date falls on/after this startdate time. Start date should be within 30 days of the current date.
        :param datetime enddate: DateTime, Filters device events where event date falls on/before this enddate time.
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str sortorder: Sorting order. Values ASC or DESC. Defaults to ASC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['og_id', 'serialnumber', 'status', 'startdate', 'enddate', 'page', 'pagesize', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_load_device_event_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'og_id' is set
        if self.api_client.client_side_validation and ('og_id' not in params or
                                                       params['og_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `og_id` when calling `devices_load_device_event_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'og_id' in params:
            path_params['og_id'] = params['og_id']  # noqa: E501

        query_params = []
        if 'serialnumber' in params:
            query_params.append(('serialnumber', params['serialnumber']))  # noqa: E501
        if 'status' in params:
            query_params.append(('Status', params['status']))  # noqa: E501
        if 'startdate' in params:
            query_params.append(('startdate', params['startdate']))  # noqa: E501
        if 'enddate' in params:
            query_params.append(('enddate', params['enddate']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ogs/{og_id}/devices/audit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_managed_settings_for_device_by_alternate_id(self, **kwargs):  # noqa: E501
        """Sets the managed settings for an iOS device based on alternate id.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_managed_settings_for_device_by_alternate_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceManagedSettings settings: Managed settings.
        :param str search_by: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber, EasId].
        :param str id: The alternate id of the device.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_managed_settings_for_device_by_alternate_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.devices_managed_settings_for_device_by_alternate_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def devices_managed_settings_for_device_by_alternate_id_with_http_info(self, **kwargs):  # noqa: E501
        """Sets the managed settings for an iOS device based on alternate id.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_managed_settings_for_device_by_alternate_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceManagedSettings settings: Managed settings.
        :param str search_by: The alternate id type [DeviceId, Macaddress, Udid, Serialnumber, ImeiNumber, EasId].
        :param str id: The alternate id of the device.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings', 'search_by', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_managed_settings_for_device_by_alternate_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings' in params:
            body_params = params['settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/managedsettings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_search_async(self, **kwargs):  # noqa: E501
        """New - Find relevant devices using various criteria.  # noqa: E501

         Returns details of relevant devices belonging to an enrollment user matching specified criteria, where results are ranked/sorted using the specified orderby criteria with maximum pagesize limit of 500.  If page size is greater than the maximum limit, it will return the first 500 records.  seensince and lastseen fields accept the following Valid DateTime formats :  yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt,  yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_search_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Filters devices based on enrolled username.
        :param str model: Filters devices based on model. For example iPhone.
        :param str platform: Filters devices based on platform. For example Apple.
        :param datetime lastseen: Filters devices based on the date when they were last seen.
        :param str ownership: Filters devices based on ownership type. One of C, E, S or Undefined.
        :param int lgid: Limits the search to given OrganizationGroup. Defaults to admin's OrganizationGroup.
        :param str compliantstatus: Filters devices based on specified compliant status. Possible values are true (for Compliant) and false (for NonCompliant).
        :param datetime seensince: Filters devices based on date when they were seen after given date.
        :param int page: Filters search result to return results based on page number. Page numbering is 0 based and omitting this parameter will return the first page.
        :param int pagesize: Limits the number of search results per page. Defaults to 500.
        :param str orderby: Sort results based on given field. One of model, lastseen, ownership, platform, deviceid etc. Defaults to deviceid.
        :param str sortorder: Sort order of results. One of ASC or DESC. Defaults to ASC.
        :return: DeviceSearchResultExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_search_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.devices_search_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def devices_search_async_with_http_info(self, **kwargs):  # noqa: E501
        """New - Find relevant devices using various criteria.  # noqa: E501

         Returns details of relevant devices belonging to an enrollment user matching specified criteria, where results are ranked/sorted using the specified orderby criteria with maximum pagesize limit of 500.  If page size is greater than the maximum limit, it will return the first 500 records.  seensince and lastseen fields accept the following Valid DateTime formats :  yyyy/MM/dd, yyyy-MM-dd, MM/dd/yyyy, MM-dd-yyyy, yyyy/MM/dd HH:mm:ss.fff,  yyyy-MM-dd HH:mm:ss.fff, MM/dd/yyyy HH:mm:ss.fff, MM-dd-yyyy HH:mm:ss.fff, yyyy/MM/ddTHH:mm:ss.fff,  yyyy-MM-ddTHH:mm:ss.fff, MM/dd/yyyyTHH:mm:ss.fff, MM-dd-yyyyTHH:mm:ss.fff, yyyy-MM-dd HH-mm-ss-tt,  yyyy-MM-ddTHH-mm-ss-tt.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_search_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Filters devices based on enrolled username.
        :param str model: Filters devices based on model. For example iPhone.
        :param str platform: Filters devices based on platform. For example Apple.
        :param datetime lastseen: Filters devices based on the date when they were last seen.
        :param str ownership: Filters devices based on ownership type. One of C, E, S or Undefined.
        :param int lgid: Limits the search to given OrganizationGroup. Defaults to admin's OrganizationGroup.
        :param str compliantstatus: Filters devices based on specified compliant status. Possible values are true (for Compliant) and false (for NonCompliant).
        :param datetime seensince: Filters devices based on date when they were seen after given date.
        :param int page: Filters search result to return results based on page number. Page numbering is 0 based and omitting this parameter will return the first page.
        :param int pagesize: Limits the number of search results per page. Defaults to 500.
        :param str orderby: Sort results based on given field. One of model, lastseen, ownership, platform, deviceid etc. Defaults to deviceid.
        :param str sortorder: Sort order of results. One of ASC or DESC. Defaults to ASC.
        :return: DeviceSearchResultExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'model', 'platform', 'lastseen', 'ownership', 'lgid', 'compliantstatus', 'seensince', 'page', 'pagesize', 'orderby', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_search_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'lastseen' in params:
            query_params.append(('lastseen', params['lastseen']))  # noqa: E501
        if 'ownership' in params:
            query_params.append(('ownership', params['ownership']))  # noqa: E501
        if 'lgid' in params:
            query_params.append(('lgid', params['lgid']))  # noqa: E501
        if 'compliantstatus' in params:
            query_params.append(('compliantstatus', params['compliantstatus']))  # noqa: E501
        if 'seensince' in params:
            query_params.append(('seensince', params['seensince']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceSearchResultExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_send_message(self, id, **kwargs):  # noqa: E501
        """Sends a push notification to the device identified by device ID. If not enrolled, sends an SMS message instead.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_send_message(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The device ID. (required)
        :param GenericMessage generic_message: The message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_send_message_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_send_message_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devices_send_message_with_http_info(self, id, **kwargs):  # noqa: E501
        """Sends a push notification to the device identified by device ID. If not enrolled, sends an SMS message instead.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_send_message_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The device ID. (required)
        :param GenericMessage generic_message: The message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'generic_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_send_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `devices_send_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generic_message' in params:
            body_params = params['generic_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{id}/sendmessage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_send_message_by_mac(self, macaddress, **kwargs):  # noqa: E501
        """Sends a push notification to the device identified by MAC address. If not enrolled, sends an SMS message instead.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_send_message_by_mac(macaddress, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str macaddress: The MAC address of the device. (required)
        :param GenericMessage generic_message: The message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_send_message_by_mac_with_http_info(macaddress, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_send_message_by_mac_with_http_info(macaddress, **kwargs)  # noqa: E501
            return data

    def devices_send_message_by_mac_with_http_info(self, macaddress, **kwargs):  # noqa: E501
        """Sends a push notification to the device identified by MAC address. If not enrolled, sends an SMS message instead.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_send_message_by_mac_with_http_info(macaddress, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str macaddress: The MAC address of the device. (required)
        :param GenericMessage generic_message: The message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['macaddress', 'generic_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_send_message_by_mac" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'macaddress' is set
        if self.api_client.client_side_validation and ('macaddress' not in params or
                                                       params['macaddress'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `macaddress` when calling `devices_send_message_by_mac`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'macaddress' in params:
            path_params['macaddress'] = params['macaddress']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generic_message' in params:
            body_params = params['generic_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/macaddress/{macaddress}/sendmessage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_send_message_by_serial_number(self, serialnumber, **kwargs):  # noqa: E501
        """Sends a push notification to the device identified by serial number. If not enrolled, sends an SMS message instead.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_send_message_by_serial_number(serialnumber, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: The serial number of the device. (required)
        :param GenericMessage generic_message: The message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_send_message_by_serial_number_with_http_info(serialnumber, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_send_message_by_serial_number_with_http_info(serialnumber, **kwargs)  # noqa: E501
            return data

    def devices_send_message_by_serial_number_with_http_info(self, serialnumber, **kwargs):  # noqa: E501
        """Sends a push notification to the device identified by serial number. If not enrolled, sends an SMS message instead.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_send_message_by_serial_number_with_http_info(serialnumber, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serialnumber: The serial number of the device. (required)
        :param GenericMessage generic_message: The message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serialnumber', 'generic_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_send_message_by_serial_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serialnumber' is set
        if self.api_client.client_side_validation and ('serialnumber' not in params or
                                                       params['serialnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serialnumber` when calling `devices_send_message_by_serial_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serialnumber' in params:
            path_params['serialnumber'] = params['serialnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generic_message' in params:
            body_params = params['generic_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/serialnumber/{serialnumber}/sendmessage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_send_message_by_udid(self, udid, **kwargs):  # noqa: E501
        """Sends a push notification to the device identified by UDID. If not enrolled, sends an SMS message instead.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_send_message_by_udid(udid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str udid: The UDID of the device. (required)
        :param GenericMessage generic_message: The message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_send_message_by_udid_with_http_info(udid, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_send_message_by_udid_with_http_info(udid, **kwargs)  # noqa: E501
            return data

    def devices_send_message_by_udid_with_http_info(self, udid, **kwargs):  # noqa: E501
        """Sends a push notification to the device identified by UDID. If not enrolled, sends an SMS message instead.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_send_message_by_udid_with_http_info(udid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str udid: The UDID of the device. (required)
        :param GenericMessage generic_message: The message to send.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['udid', 'generic_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_send_message_by_udid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'udid' is set
        if self.api_client.client_side_validation and ('udid' not in params or
                                                       params['udid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `udid` when calling `devices_send_message_by_udid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'udid' in params:
            path_params['udid'] = params['udid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generic_message' in params:
            body_params = params['generic_message']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/udid/{udid}/sendmessage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devices_update_custom_attributes_by_asset_nr(self, assetnumber, **kwargs):  # noqa: E501
        """Updates the device custom attribute value if already present for a device, else adds the same to the device.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_update_custom_attributes_by_asset_nr(assetnumber, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device Asset number. (required)
        :param DeviceCustomAttributeListModel custom_attributes: Custom Attribute name and value pairs.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.devices_update_custom_attributes_by_asset_nr_with_http_info(assetnumber, **kwargs)  # noqa: E501
        else:
            (data) = self.devices_update_custom_attributes_by_asset_nr_with_http_info(assetnumber, **kwargs)  # noqa: E501
            return data

    def devices_update_custom_attributes_by_asset_nr_with_http_info(self, assetnumber, **kwargs):  # noqa: E501
        """Updates the device custom attribute value if already present for a device, else adds the same to the device.  # noqa: E501

        v1.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.devices_update_custom_attributes_by_asset_nr_with_http_info(assetnumber, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assetnumber: Device Asset number. (required)
        :param DeviceCustomAttributeListModel custom_attributes: Custom Attribute name and value pairs.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assetnumber', 'custom_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devices_update_custom_attributes_by_asset_nr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assetnumber' is set
        if self.api_client.client_side_validation and ('assetnumber' not in params or
                                                       params['assetnumber'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assetnumber` when calling `devices_update_custom_attributes_by_asset_nr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assetnumber' in params:
            path_params['assetnumber'] = params['assetnumber']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_attributes' in params:
            body_params = params['custom_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/assetnumber/{assetnumber}/updatecustomattributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
