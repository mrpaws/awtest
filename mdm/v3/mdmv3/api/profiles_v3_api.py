# coding: utf-8

"""
    MDM API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mdmv3.api_client import ApiClient


class ProfilesV3Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def profiles_v3_create_device_profile_async(self, **kwargs):  # noqa: E501
        """New - Create a new profile  # noqa: E501

        1. Create a new profile for the provided platform with the specified payloads.  2. For Version 2004, only Windows Defender Payload is supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_create_device_profile_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileV3Entity profile_entity: An entity containing the attributes for creating a profile for the windows desktop platform.
        :return: ProfileV3Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v3_create_device_profile_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v3_create_device_profile_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def profiles_v3_create_device_profile_async_with_http_info(self, **kwargs):  # noqa: E501
        """New - Create a new profile  # noqa: E501

        1. Create a new profile for the provided platform with the specified payloads.  2. For Version 2004, only Windows Defender Payload is supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_create_device_profile_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileV3Entity profile_entity: An entity containing the attributes for creating a profile for the windows desktop platform.
        :return: ProfileV3Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v3_create_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'profile_entity' in params:
            body_params = params['profile_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=3'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileV3Entity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v3_delete_device_profile_async(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Delete a Profile  # noqa: E501

        Deletes the specified profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_delete_device_profile_async(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: Unique identifier of the device profile (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v3_delete_device_profile_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v3_delete_device_profile_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
            return data

    def profiles_v3_delete_device_profile_async_with_http_info(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Delete a Profile  # noqa: E501

        Deletes the specified profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_delete_device_profile_async_with_http_info(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: Unique identifier of the device profile (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v3_delete_device_profile_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `profiles_v3_delete_device_profile_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=3', 'application/xml;version=3'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileUuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v3_get_device_profile_details_async(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Retrieve details of a specific profile  # noqa: E501

        1. Returns the full profile details, including all payloads associated with the profile.  2. For Version 2004, only Windows Defender Payload is supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_get_device_profile_details_async(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: Unique identifier of the profile (required)
        :return: ProfileV3Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v3_get_device_profile_details_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v3_get_device_profile_details_async_with_http_info(profile_uuid, **kwargs)  # noqa: E501
            return data

    def profiles_v3_get_device_profile_details_async_with_http_info(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Retrieve details of a specific profile  # noqa: E501

        1. Returns the full profile details, including all payloads associated with the profile.  2. For Version 2004, only Windows Defender Payload is supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_get_device_profile_details_async_with_http_info(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: Unique identifier of the profile (required)
        :return: ProfileV3Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v3_get_device_profile_details_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `profiles_v3_get_device_profile_details_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=3'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileV3Entity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v3_get_device_profiles(self, organization_group_uuid, **kwargs):  # noqa: E501
        """Get all device profiles as per search filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_get_device_profiles(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for organization group (required)
        :param str platform: Platform name
        :param str status: Profile status (Active or Inactive)
        :param str searchtext: search text
        :param str orderby: Orderby parameter name
        :param str sortorder: Sorting order, Values ASC or DESC, Defaults to ASC
        :param int offset: to skip number of records
        :param int limit: Maximum results which should be returned in each request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v3_get_device_profiles_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v3_get_device_profiles_with_http_info(organization_group_uuid, **kwargs)  # noqa: E501
            return data

    def profiles_v3_get_device_profiles_with_http_info(self, organization_group_uuid, **kwargs):  # noqa: E501
        """Get all device profiles as per search filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_get_device_profiles_with_http_info(organization_group_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_group_uuid: Unique identifier for organization group (required)
        :param str platform: Platform name
        :param str status: Profile status (Active or Inactive)
        :param str searchtext: search text
        :param str orderby: Orderby parameter name
        :param str sortorder: Sorting order, Values ASC or DESC, Defaults to ASC
        :param int offset: to skip number of records
        :param int limit: Maximum results which should be returned in each request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_uuid', 'platform', 'status', 'searchtext', 'orderby', 'sortorder', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v3_get_device_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_uuid' is set
        if self.api_client.client_side_validation and ('organization_group_uuid' not in params or
                                                       params['organization_group_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_uuid` when calling `profiles_v3_get_device_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_uuid' in params:
            path_params['organizationGroupUuid'] = params['organization_group_uuid']  # noqa: E501

        query_params = []
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'searchtext' in params:
            query_params.append(('searchtext', params['searchtext']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=3', 'application/xml;version=3'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{organizationGroupUuid}/profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v3_search_async(self, profile_search_request_v3_model, **kwargs):  # noqa: E501
        """New - Search API to Retrieve a list of profiles.  # noqa: E501

        Returns a list of profiles based on the search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_search_async(profile_search_request_v3_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileSearchRequestV3Model profile_search_request_v3_model: Model for profile search request.(Required) (required)
        :return: ProfilesSearchResultV3Model
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v3_search_async_with_http_info(profile_search_request_v3_model, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v3_search_async_with_http_info(profile_search_request_v3_model, **kwargs)  # noqa: E501
            return data

    def profiles_v3_search_async_with_http_info(self, profile_search_request_v3_model, **kwargs):  # noqa: E501
        """New - Search API to Retrieve a list of profiles.  # noqa: E501

        Returns a list of profiles based on the search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_search_async_with_http_info(profile_search_request_v3_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileSearchRequestV3Model profile_search_request_v3_model: Model for profile search request.(Required) (required)
        :return: ProfilesSearchResultV3Model
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_search_request_v3_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v3_search_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_search_request_v3_model' is set
        if self.api_client.client_side_validation and ('profile_search_request_v3_model' not in params or
                                                       params['profile_search_request_v3_model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_search_request_v3_model` when calling `profiles_v3_search_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'profile_search_request_v3_model' in params:
            body_params = params['profile_search_request_v3_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=3'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfilesSearchResultV3Model',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v3_update_device_profile(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Updates Device Profile.  # noqa: E501

        1. If the add_version attribute is empty or false a new Profile version will not be created but AssignedSmartGroups RootLocationGroup AssignedGeofenceArea and AssignedSchedule will be saved and published.   2. If it is true new version of the profile will be created and published.  3. For Version 2004, only Windows Defender Payload is supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_update_device_profile(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: Unique identifier of the device profile. (required)
        :param ProfileV3Entity profile_entity: An entity containing the attributes for creating a profile for the windows desktop platform.
        :return: ProfileV3Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v3_update_device_profile_with_http_info(profile_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v3_update_device_profile_with_http_info(profile_uuid, **kwargs)  # noqa: E501
            return data

    def profiles_v3_update_device_profile_with_http_info(self, profile_uuid, **kwargs):  # noqa: E501
        """New - Updates Device Profile.  # noqa: E501

        1. If the add_version attribute is empty or false a new Profile version will not be created but AssignedSmartGroups RootLocationGroup AssignedGeofenceArea and AssignedSchedule will be saved and published.   2. If it is true new version of the profile will be created and published.  3. For Version 2004, only Windows Defender Payload is supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_update_device_profile_with_http_info(profile_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_uuid: Unique identifier of the device profile. (required)
        :param ProfileV3Entity profile_entity: An entity containing the attributes for creating a profile for the windows desktop platform.
        :return: ProfileV3Entity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_uuid', 'profile_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v3_update_device_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `profiles_v3_update_device_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'profile_entity' in params:
            body_params = params['profile_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=3'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/profiles/{profileUuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProfileV3Entity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def profiles_v3_upload_profile_payload(self, device_uuid, profile_uuid, format, **kwargs):  # noqa: E501
        """Uploads a completed (already built for device) profile  # noqa: E501

        For an existing profile in pending state, upload the completed profile for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_upload_profile_payload(device_uuid, profile_uuid, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: Unique identifier for the device (required)
        :param str profile_uuid: Unique identifier for the profile (required)
        :param int format: Specifies the type of payload wrapped in the CMS body (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.profiles_v3_upload_profile_payload_with_http_info(device_uuid, profile_uuid, format, **kwargs)  # noqa: E501
        else:
            (data) = self.profiles_v3_upload_profile_payload_with_http_info(device_uuid, profile_uuid, format, **kwargs)  # noqa: E501
            return data

    def profiles_v3_upload_profile_payload_with_http_info(self, device_uuid, profile_uuid, format, **kwargs):  # noqa: E501
        """Uploads a completed (already built for device) profile  # noqa: E501

        For an existing profile in pending state, upload the completed profile for a given device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.profiles_v3_upload_profile_payload_with_http_info(device_uuid, profile_uuid, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_uuid: Unique identifier for the device (required)
        :param str profile_uuid: Unique identifier for the profile (required)
        :param int format: Specifies the type of payload wrapped in the CMS body (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_uuid', 'profile_uuid', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method profiles_v3_upload_profile_payload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_uuid' is set
        if self.api_client.client_side_validation and ('device_uuid' not in params or
                                                       params['device_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_uuid` when calling `profiles_v3_upload_profile_payload`")  # noqa: E501
        # verify the required parameter 'profile_uuid' is set
        if self.api_client.client_side_validation and ('profile_uuid' not in params or
                                                       params['profile_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_uuid` when calling `profiles_v3_upload_profile_payload`")  # noqa: E501
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in params or
                                                       params['format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `format` when calling `profiles_v3_upload_profile_payload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_uuid' in params:
            path_params['deviceUuid'] = params['device_uuid']  # noqa: E501
        if 'profile_uuid' in params:
            path_params['profileUuid'] = params['profile_uuid']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=3'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/pkcs7-mime'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/devices/{deviceUuid}/profiles/{profileUuid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
