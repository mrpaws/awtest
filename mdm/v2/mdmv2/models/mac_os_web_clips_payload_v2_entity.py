# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class MacOsWebClipsPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'icon': 'int',
        'label': 'str',
        'url': 'str',
        'show_in_app_catalog': 'bool'
    }

    attribute_map = {
        'icon': 'Icon',
        'label': 'Label',
        'url': 'URL',
        'show_in_app_catalog': 'ShowInAppCatalog'
    }

    def __init__(self, icon=None, label=None, url=None, show_in_app_catalog=None, _configuration=None):  # noqa: E501
        """MacOsWebClipsPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._icon = None
        self._label = None
        self._url = None
        self._show_in_app_catalog = None
        self.discriminator = None

        if icon is not None:
            self.icon = icon
        if label is not None:
            self.label = label
        if url is not None:
            self.url = url
        if show_in_app_catalog is not None:
            self.show_in_app_catalog = show_in_app_catalog

    @property
    def icon(self):
        """Gets the icon of this MacOsWebClipsPayloadV2Entity.  # noqa: E501

        Gets or sets the id for a PNG icon to be shown on the Home screen. Should be 59 x 60 pixels in size. If not specified, a white square will be shown.  # noqa: E501

        :return: The icon of this MacOsWebClipsPayloadV2Entity.  # noqa: E501
        :rtype: int
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this MacOsWebClipsPayloadV2Entity.

        Gets or sets the id for a PNG icon to be shown on the Home screen. Should be 59 x 60 pixels in size. If not specified, a white square will be shown.  # noqa: E501

        :param icon: The icon of this MacOsWebClipsPayloadV2Entity.  # noqa: E501
        :type: int
        """

        self._icon = icon

    @property
    def label(self):
        """Gets the label of this MacOsWebClipsPayloadV2Entity.  # noqa: E501

        Gets or sets the name of the Web Clip as displayed on the Home screen.  # noqa: E501

        :return: The label of this MacOsWebClipsPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this MacOsWebClipsPayloadV2Entity.

        Gets or sets the name of the Web Clip as displayed on the Home screen.  # noqa: E501

        :param label: The label of this MacOsWebClipsPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def url(self):
        """Gets the url of this MacOsWebClipsPayloadV2Entity.  # noqa: E501

        Gets or sets the URL that the Web Clip should open when clicked. The URL must begin with HTTP or HTTPS or it won't work.  # noqa: E501

        :return: The url of this MacOsWebClipsPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MacOsWebClipsPayloadV2Entity.

        Gets or sets the URL that the Web Clip should open when clicked. The URL must begin with HTTP or HTTPS or it won't work.  # noqa: E501

        :param url: The url of this MacOsWebClipsPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def show_in_app_catalog(self):
        """Gets the show_in_app_catalog of this MacOsWebClipsPayloadV2Entity.  # noqa: E501

        Gets or sets a value indicating whether indicates whether show in app catalog.  # noqa: E501

        :return: The show_in_app_catalog of this MacOsWebClipsPayloadV2Entity.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_app_catalog

    @show_in_app_catalog.setter
    def show_in_app_catalog(self, show_in_app_catalog):
        """Sets the show_in_app_catalog of this MacOsWebClipsPayloadV2Entity.

        Gets or sets a value indicating whether indicates whether show in app catalog.  # noqa: E501

        :param show_in_app_catalog: The show_in_app_catalog of this MacOsWebClipsPayloadV2Entity.  # noqa: E501
        :type: bool
        """

        self._show_in_app_catalog = show_in_app_catalog

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MacOsWebClipsPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MacOsWebClipsPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MacOsWebClipsPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
