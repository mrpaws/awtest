# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class BookEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'book_name': 'str',
        'status': 'str',
        'platform': 'int',
        'assignment_status': 'str',
        'book_size': 'str',
        'category_list': 'ApplicationCategories_',
        'smart_groups': 'list[SmartGroupAppMap]',
        'book_source': 'int',
        'location_group_id': 'int',
        'root_location_group_name': 'str',
        'organization_group_uuid': 'str',
        'large_icon_uri': 'str',
        'medium_icon_uri': 'str',
        'small_icon_uri': 'str',
        'push_mode': 'int',
        'book_rank': 'int',
        'assigned_device_count': 'int',
        'installed_device_count': 'int',
        'not_installed_device_count': 'int',
        'description': 'str',
        'support_email': 'str',
        'support_phone': 'str',
        'developer': 'str',
        'developer_email': 'str',
        'developer_phone': 'str',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'book_name': 'BookName',
        'status': 'Status',
        'platform': 'Platform',
        'assignment_status': 'AssignmentStatus',
        'book_size': 'BookSize',
        'category_list': 'CategoryList',
        'smart_groups': 'SmartGroups',
        'book_source': 'BookSource',
        'location_group_id': 'LocationGroupId',
        'root_location_group_name': 'RootLocationGroupName',
        'organization_group_uuid': 'OrganizationGroupUuid',
        'large_icon_uri': 'LargeIconUri',
        'medium_icon_uri': 'MediumIconUri',
        'small_icon_uri': 'SmallIconUri',
        'push_mode': 'PushMode',
        'book_rank': 'BookRank',
        'assigned_device_count': 'AssignedDeviceCount',
        'installed_device_count': 'InstalledDeviceCount',
        'not_installed_device_count': 'NotInstalledDeviceCount',
        'description': 'Description',
        'support_email': 'SupportEmail',
        'support_phone': 'SupportPhone',
        'developer': 'Developer',
        'developer_email': 'DeveloperEmail',
        'developer_phone': 'DeveloperPhone',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, book_name=None, status=None, platform=None, assignment_status=None, book_size=None, category_list=None, smart_groups=None, book_source=None, location_group_id=None, root_location_group_name=None, organization_group_uuid=None, large_icon_uri=None, medium_icon_uri=None, small_icon_uri=None, push_mode=None, book_rank=None, assigned_device_count=None, installed_device_count=None, not_installed_device_count=None, description=None, support_email=None, support_phone=None, developer=None, developer_email=None, developer_phone=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """BookEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._book_name = None
        self._status = None
        self._platform = None
        self._assignment_status = None
        self._book_size = None
        self._category_list = None
        self._smart_groups = None
        self._book_source = None
        self._location_group_id = None
        self._root_location_group_name = None
        self._organization_group_uuid = None
        self._large_icon_uri = None
        self._medium_icon_uri = None
        self._small_icon_uri = None
        self._push_mode = None
        self._book_rank = None
        self._assigned_device_count = None
        self._installed_device_count = None
        self._not_installed_device_count = None
        self._description = None
        self._support_email = None
        self._support_phone = None
        self._developer = None
        self._developer_email = None
        self._developer_phone = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if book_name is not None:
            self.book_name = book_name
        if status is not None:
            self.status = status
        if platform is not None:
            self.platform = platform
        if assignment_status is not None:
            self.assignment_status = assignment_status
        if book_size is not None:
            self.book_size = book_size
        if category_list is not None:
            self.category_list = category_list
        if smart_groups is not None:
            self.smart_groups = smart_groups
        if book_source is not None:
            self.book_source = book_source
        if location_group_id is not None:
            self.location_group_id = location_group_id
        if root_location_group_name is not None:
            self.root_location_group_name = root_location_group_name
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if large_icon_uri is not None:
            self.large_icon_uri = large_icon_uri
        if medium_icon_uri is not None:
            self.medium_icon_uri = medium_icon_uri
        if small_icon_uri is not None:
            self.small_icon_uri = small_icon_uri
        if push_mode is not None:
            self.push_mode = push_mode
        if book_rank is not None:
            self.book_rank = book_rank
        if assigned_device_count is not None:
            self.assigned_device_count = assigned_device_count
        if installed_device_count is not None:
            self.installed_device_count = installed_device_count
        if not_installed_device_count is not None:
            self.not_installed_device_count = not_installed_device_count
        if description is not None:
            self.description = description
        if support_email is not None:
            self.support_email = support_email
        if support_phone is not None:
            self.support_phone = support_phone
        if developer is not None:
            self.developer = developer
        if developer_email is not None:
            self.developer_email = developer_email
        if developer_phone is not None:
            self.developer_phone = developer_phone
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def book_name(self):
        """Gets the book_name of this BookEntity.  # noqa: E501

        Gets or sets book Name.  # noqa: E501

        :return: The book_name of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._book_name

    @book_name.setter
    def book_name(self, book_name):
        """Sets the book_name of this BookEntity.

        Gets or sets book Name.  # noqa: E501

        :param book_name: The book_name of this BookEntity.  # noqa: E501
        :type: str
        """

        self._book_name = book_name

    @property
    def status(self):
        """Gets the status of this BookEntity.  # noqa: E501

        Gets or sets book Status can be Active or InActive.  # noqa: E501

        :return: The status of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BookEntity.

        Gets or sets book Status can be Active or InActive.  # noqa: E501

        :param status: The status of this BookEntity.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def platform(self):
        """Gets the platform of this BookEntity.  # noqa: E501

        Gets or sets platform is the type of device. ex: Unknown = 0, WindowsMobile = 1, Apple = 2, Android = 5,.  # noqa: E501

        :return: The platform of this BookEntity.  # noqa: E501
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this BookEntity.

        Gets or sets platform is the type of device. ex: Unknown = 0, WindowsMobile = 1, Apple = 2, Android = 5,.  # noqa: E501

        :param platform: The platform of this BookEntity.  # noqa: E501
        :type: int
        """

        self._platform = platform

    @property
    def assignment_status(self):
        """Gets the assignment_status of this BookEntity.  # noqa: E501

        Gets or sets assignment status.  # noqa: E501

        :return: The assignment_status of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._assignment_status

    @assignment_status.setter
    def assignment_status(self, assignment_status):
        """Sets the assignment_status of this BookEntity.

        Gets or sets assignment status.  # noqa: E501

        :param assignment_status: The assignment_status of this BookEntity.  # noqa: E501
        :type: str
        """

        self._assignment_status = assignment_status

    @property
    def book_size(self):
        """Gets the book_size of this BookEntity.  # noqa: E501

        Gets or sets book size.  # noqa: E501

        :return: The book_size of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._book_size

    @book_size.setter
    def book_size(self, book_size):
        """Sets the book_size of this BookEntity.

        Gets or sets book size.  # noqa: E501

        :param book_size: The book_size of this BookEntity.  # noqa: E501
        :type: str
        """

        self._book_size = book_size

    @property
    def category_list(self):
        """Gets the category_list of this BookEntity.  # noqa: E501

        Gets or sets represents the various categories that are associated to an Book. Represented by the category Id and Description.  # noqa: E501

        :return: The category_list of this BookEntity.  # noqa: E501
        :rtype: ApplicationCategories_
        """
        return self._category_list

    @category_list.setter
    def category_list(self, category_list):
        """Sets the category_list of this BookEntity.

        Gets or sets represents the various categories that are associated to an Book. Represented by the category Id and Description.  # noqa: E501

        :param category_list: The category_list of this BookEntity.  # noqa: E501
        :type: ApplicationCategories_
        """

        self._category_list = category_list

    @property
    def smart_groups(self):
        """Gets the smart_groups of this BookEntity.  # noqa: E501

        Gets or sets assigned Smart Groups.  # noqa: E501

        :return: The smart_groups of this BookEntity.  # noqa: E501
        :rtype: list[SmartGroupAppMap]
        """
        return self._smart_groups

    @smart_groups.setter
    def smart_groups(self, smart_groups):
        """Sets the smart_groups of this BookEntity.

        Gets or sets assigned Smart Groups.  # noqa: E501

        :param smart_groups: The smart_groups of this BookEntity.  # noqa: E501
        :type: list[SmartGroupAppMap]
        """

        self._smart_groups = smart_groups

    @property
    def book_source(self):
        """Gets the book_source of this BookEntity.  # noqa: E501

        Gets or sets the book source.  # noqa: E501

        :return: The book_source of this BookEntity.  # noqa: E501
        :rtype: int
        """
        return self._book_source

    @book_source.setter
    def book_source(self, book_source):
        """Sets the book_source of this BookEntity.

        Gets or sets the book source.  # noqa: E501

        :param book_source: The book_source of this BookEntity.  # noqa: E501
        :type: int
        """

        self._book_source = book_source

    @property
    def location_group_id(self):
        """Gets the location_group_id of this BookEntity.  # noqa: E501

        Gets or sets organization Group Id.  # noqa: E501

        :return: The location_group_id of this BookEntity.  # noqa: E501
        :rtype: int
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this BookEntity.

        Gets or sets organization Group Id.  # noqa: E501

        :param location_group_id: The location_group_id of this BookEntity.  # noqa: E501
        :type: int
        """

        self._location_group_id = location_group_id

    @property
    def root_location_group_name(self):
        """Gets the root_location_group_name of this BookEntity.  # noqa: E501

        Gets or sets root Organization Group Name.  # noqa: E501

        :return: The root_location_group_name of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._root_location_group_name

    @root_location_group_name.setter
    def root_location_group_name(self, root_location_group_name):
        """Sets the root_location_group_name of this BookEntity.

        Gets or sets root Organization Group Name.  # noqa: E501

        :param root_location_group_name: The root_location_group_name of this BookEntity.  # noqa: E501
        :type: str
        """

        self._root_location_group_name = root_location_group_name

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this BookEntity.  # noqa: E501

        Gets or sets organization Group UUID.  # noqa: E501

        :return: The organization_group_uuid of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this BookEntity.

        Gets or sets organization Group UUID.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this BookEntity.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def large_icon_uri(self):
        """Gets the large_icon_uri of this BookEntity.  # noqa: E501

        Gets or sets large Icon URL.  # noqa: E501

        :return: The large_icon_uri of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._large_icon_uri

    @large_icon_uri.setter
    def large_icon_uri(self, large_icon_uri):
        """Sets the large_icon_uri of this BookEntity.

        Gets or sets large Icon URL.  # noqa: E501

        :param large_icon_uri: The large_icon_uri of this BookEntity.  # noqa: E501
        :type: str
        """

        self._large_icon_uri = large_icon_uri

    @property
    def medium_icon_uri(self):
        """Gets the medium_icon_uri of this BookEntity.  # noqa: E501

        Gets or sets medium Icon URL.  # noqa: E501

        :return: The medium_icon_uri of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._medium_icon_uri

    @medium_icon_uri.setter
    def medium_icon_uri(self, medium_icon_uri):
        """Sets the medium_icon_uri of this BookEntity.

        Gets or sets medium Icon URL.  # noqa: E501

        :param medium_icon_uri: The medium_icon_uri of this BookEntity.  # noqa: E501
        :type: str
        """

        self._medium_icon_uri = medium_icon_uri

    @property
    def small_icon_uri(self):
        """Gets the small_icon_uri of this BookEntity.  # noqa: E501

        Gets or sets small Icon URL.  # noqa: E501

        :return: The small_icon_uri of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._small_icon_uri

    @small_icon_uri.setter
    def small_icon_uri(self, small_icon_uri):
        """Sets the small_icon_uri of this BookEntity.

        Gets or sets small Icon URL.  # noqa: E501

        :param small_icon_uri: The small_icon_uri of this BookEntity.  # noqa: E501
        :type: str
        """

        self._small_icon_uri = small_icon_uri

    @property
    def push_mode(self):
        """Gets the push_mode of this BookEntity.  # noqa: E501

        Gets or sets push Mode for the book - Auto, On-Demand.  # noqa: E501

        :return: The push_mode of this BookEntity.  # noqa: E501
        :rtype: int
        """
        return self._push_mode

    @push_mode.setter
    def push_mode(self, push_mode):
        """Sets the push_mode of this BookEntity.

        Gets or sets push Mode for the book - Auto, On-Demand.  # noqa: E501

        :param push_mode: The push_mode of this BookEntity.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                push_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `push_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(push_mode, allowed_values)
            )

        self._push_mode = push_mode

    @property
    def book_rank(self):
        """Gets the book_rank of this BookEntity.  # noqa: E501

        Gets or sets book Rank.  # noqa: E501

        :return: The book_rank of this BookEntity.  # noqa: E501
        :rtype: int
        """
        return self._book_rank

    @book_rank.setter
    def book_rank(self, book_rank):
        """Sets the book_rank of this BookEntity.

        Gets or sets book Rank.  # noqa: E501

        :param book_rank: The book_rank of this BookEntity.  # noqa: E501
        :type: int
        """

        self._book_rank = book_rank

    @property
    def assigned_device_count(self):
        """Gets the assigned_device_count of this BookEntity.  # noqa: E501

        Gets or sets number of device to which current book is Assigned.  # noqa: E501

        :return: The assigned_device_count of this BookEntity.  # noqa: E501
        :rtype: int
        """
        return self._assigned_device_count

    @assigned_device_count.setter
    def assigned_device_count(self, assigned_device_count):
        """Sets the assigned_device_count of this BookEntity.

        Gets or sets number of device to which current book is Assigned.  # noqa: E501

        :param assigned_device_count: The assigned_device_count of this BookEntity.  # noqa: E501
        :type: int
        """

        self._assigned_device_count = assigned_device_count

    @property
    def installed_device_count(self):
        """Gets the installed_device_count of this BookEntity.  # noqa: E501

        Gets or sets number of device on which current book is Installed.  # noqa: E501

        :return: The installed_device_count of this BookEntity.  # noqa: E501
        :rtype: int
        """
        return self._installed_device_count

    @installed_device_count.setter
    def installed_device_count(self, installed_device_count):
        """Sets the installed_device_count of this BookEntity.

        Gets or sets number of device on which current book is Installed.  # noqa: E501

        :param installed_device_count: The installed_device_count of this BookEntity.  # noqa: E501
        :type: int
        """

        self._installed_device_count = installed_device_count

    @property
    def not_installed_device_count(self):
        """Gets the not_installed_device_count of this BookEntity.  # noqa: E501

        Gets or sets number of device to which current book is Assigned, but not installed.  # noqa: E501

        :return: The not_installed_device_count of this BookEntity.  # noqa: E501
        :rtype: int
        """
        return self._not_installed_device_count

    @not_installed_device_count.setter
    def not_installed_device_count(self, not_installed_device_count):
        """Sets the not_installed_device_count of this BookEntity.

        Gets or sets number of device to which current book is Assigned, but not installed.  # noqa: E501

        :param not_installed_device_count: The not_installed_device_count of this BookEntity.  # noqa: E501
        :type: int
        """

        self._not_installed_device_count = not_installed_device_count

    @property
    def description(self):
        """Gets the description of this BookEntity.  # noqa: E501

        Gets or sets description of the book.  # noqa: E501

        :return: The description of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BookEntity.

        Gets or sets description of the book.  # noqa: E501

        :param description: The description of this BookEntity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def support_email(self):
        """Gets the support_email of this BookEntity.  # noqa: E501

        Gets or sets support email.  # noqa: E501

        :return: The support_email of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this BookEntity.

        Gets or sets support email.  # noqa: E501

        :param support_email: The support_email of this BookEntity.  # noqa: E501
        :type: str
        """

        self._support_email = support_email

    @property
    def support_phone(self):
        """Gets the support_phone of this BookEntity.  # noqa: E501

        Gets or sets support Phone number.  # noqa: E501

        :return: The support_phone of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._support_phone

    @support_phone.setter
    def support_phone(self, support_phone):
        """Sets the support_phone of this BookEntity.

        Gets or sets support Phone number.  # noqa: E501

        :param support_phone: The support_phone of this BookEntity.  # noqa: E501
        :type: str
        """

        self._support_phone = support_phone

    @property
    def developer(self):
        """Gets the developer of this BookEntity.  # noqa: E501

        Gets or sets developer Name.  # noqa: E501

        :return: The developer of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._developer

    @developer.setter
    def developer(self, developer):
        """Sets the developer of this BookEntity.

        Gets or sets developer Name.  # noqa: E501

        :param developer: The developer of this BookEntity.  # noqa: E501
        :type: str
        """

        self._developer = developer

    @property
    def developer_email(self):
        """Gets the developer_email of this BookEntity.  # noqa: E501

        Gets or sets email address of developer.  # noqa: E501

        :return: The developer_email of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._developer_email

    @developer_email.setter
    def developer_email(self, developer_email):
        """Sets the developer_email of this BookEntity.

        Gets or sets email address of developer.  # noqa: E501

        :param developer_email: The developer_email of this BookEntity.  # noqa: E501
        :type: str
        """

        self._developer_email = developer_email

    @property
    def developer_phone(self):
        """Gets the developer_phone of this BookEntity.  # noqa: E501

        Gets or sets phone number of developer.  # noqa: E501

        :return: The developer_phone of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._developer_phone

    @developer_phone.setter
    def developer_phone(self, developer_phone):
        """Sets the developer_phone of this BookEntity.

        Gets or sets phone number of developer.  # noqa: E501

        :param developer_phone: The developer_phone of this BookEntity.  # noqa: E501
        :type: str
        """

        self._developer_phone = developer_phone

    @property
    def id(self):
        """Gets the id of this BookEntity.  # noqa: E501


        :return: The id of this BookEntity.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BookEntity.


        :param id: The id of this BookEntity.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this BookEntity.  # noqa: E501


        :return: The uuid of this BookEntity.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this BookEntity.


        :param uuid: The uuid of this BookEntity.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BookEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BookEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BookEntity):
            return True

        return self.to_dict() != other.to_dict()
