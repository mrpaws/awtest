# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class PreviewPublishDeviceCountV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'smart_group_uuids': 'list[str]',
        'organization_group_uuid': 'str',
        'device_type': 'int'
    }

    attribute_map = {
        'smart_group_uuids': 'smart_group_uuids',
        'organization_group_uuid': 'organization_group_uuid',
        'device_type': 'device_type'
    }

    def __init__(self, smart_group_uuids=None, organization_group_uuid=None, device_type=None, _configuration=None):  # noqa: E501
        """PreviewPublishDeviceCountV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._smart_group_uuids = None
        self._organization_group_uuid = None
        self._device_type = None
        self.discriminator = None

        self.smart_group_uuids = smart_group_uuids
        self.organization_group_uuid = organization_group_uuid
        self.device_type = device_type

    @property
    def smart_group_uuids(self):
        """Gets the smart_group_uuids of this PreviewPublishDeviceCountV1Model.  # noqa: E501

        The smart group UUIDs to which the workflow need to be assigned.  # noqa: E501

        :return: The smart_group_uuids of this PreviewPublishDeviceCountV1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._smart_group_uuids

    @smart_group_uuids.setter
    def smart_group_uuids(self, smart_group_uuids):
        """Sets the smart_group_uuids of this PreviewPublishDeviceCountV1Model.

        The smart group UUIDs to which the workflow need to be assigned.  # noqa: E501

        :param smart_group_uuids: The smart_group_uuids of this PreviewPublishDeviceCountV1Model.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and smart_group_uuids is None:
            raise ValueError("Invalid value for `smart_group_uuids`, must not be `None`")  # noqa: E501

        self._smart_group_uuids = smart_group_uuids

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this PreviewPublishDeviceCountV1Model.  # noqa: E501

        Uuid of the Organization group.  # noqa: E501

        :return: The organization_group_uuid of this PreviewPublishDeviceCountV1Model.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this PreviewPublishDeviceCountV1Model.

        Uuid of the Organization group.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this PreviewPublishDeviceCountV1Model.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and organization_group_uuid is None:
            raise ValueError("Invalid value for `organization_group_uuid`, must not be `None`")  # noqa: E501

        self._organization_group_uuid = organization_group_uuid

    @property
    def device_type(self):
        """Gets the device_type of this PreviewPublishDeviceCountV1Model.  # noqa: E501

        The device type that the workflow targets.  # noqa: E501

        :return: The device_type of this PreviewPublishDeviceCountV1Model.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this PreviewPublishDeviceCountV1Model.

        The device type that the workflow targets.  # noqa: E501

        :param device_type: The device_type of this PreviewPublishDeviceCountV1Model.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501
        allowed_values = [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 100, 101, 102, 103, 104, 105, 200, 201]  # noqa: E501
        if (self._configuration.client_side_validation and
                device_type not in allowed_values):
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreviewPublishDeviceCountV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreviewPublishDeviceCountV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PreviewPublishDeviceCountV1Model):
            return True

        return self.to_dict() != other.to_dict()
