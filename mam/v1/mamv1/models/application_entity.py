# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class ApplicationEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_name': 'str',
        'bundle_id': 'str',
        'app_version': 'str',
        'actual_file_version': 'str',
        'app_type': 'str',
        'status': 'str',
        'platform': 'int',
        'supported_models': 'ApplicationSupportedModels_',
        'assignment_status': 'str',
        'application_size': 'str',
        'category_list': 'ApplicationCategories_',
        'smart_groups': 'list[SmartGroupAppMap]',
        'comments': 'str',
        'is_reimbursable': 'bool',
        'application_url': 'str',
        'application_source': 'int',
        'location_group_id': 'int',
        'root_location_group_name': 'str',
        'organization_group_uuid': 'str',
        'external_id': 'str',
        'large_icon_uri': 'str',
        'medium_icon_uri': 'str',
        'small_icon_uri': 'str',
        'push_mode': 'int',
        'app_rank': 'int',
        'assigned_device_count': 'int',
        'installed_device_count': 'int',
        'not_installed_device_count': 'int',
        'description': 'str',
        'support_email': 'str',
        'support_phone': 'str',
        'developer': 'str',
        'developer_email': 'str',
        'developer_phone': 'str',
        'auto_update_version': 'bool',
        'enable_provisioning': 'bool',
        'supported_processor_architecture': 'str',
        'msi_deployment_parameters': 'MsiDeploymentParamModel_',
        'is_dependency_file': 'bool',
        'deployment_options': 'ApplicationDeploymentOptionsModel_',
        'files_options': 'ApplicationFilesOptionsModel_',
        'content_gateway_id': 'int',
        'icon_file_name': 'str',
        'application_file_name': 'str',
        'metadata_file_name': 'str',
        'version_identifier': 'str',
        'icon_blob_uu_id': 'str',
        'id': 'EntityId_',
        'uuid': 'str'
    }

    attribute_map = {
        'application_name': 'ApplicationName',
        'bundle_id': 'BundleId',
        'app_version': 'AppVersion',
        'actual_file_version': 'ActualFileVersion',
        'app_type': 'AppType',
        'status': 'Status',
        'platform': 'Platform',
        'supported_models': 'SupportedModels',
        'assignment_status': 'AssignmentStatus',
        'application_size': 'ApplicationSize',
        'category_list': 'CategoryList',
        'smart_groups': 'SmartGroups',
        'comments': 'Comments',
        'is_reimbursable': 'IsReimbursable',
        'application_url': 'ApplicationUrl',
        'application_source': 'ApplicationSource',
        'location_group_id': 'LocationGroupId',
        'root_location_group_name': 'RootLocationGroupName',
        'organization_group_uuid': 'OrganizationGroupUuid',
        'external_id': 'ExternalId',
        'large_icon_uri': 'LargeIconUri',
        'medium_icon_uri': 'MediumIconUri',
        'small_icon_uri': 'SmallIconUri',
        'push_mode': 'PushMode',
        'app_rank': 'AppRank',
        'assigned_device_count': 'AssignedDeviceCount',
        'installed_device_count': 'InstalledDeviceCount',
        'not_installed_device_count': 'NotInstalledDeviceCount',
        'description': 'Description',
        'support_email': 'SupportEmail',
        'support_phone': 'SupportPhone',
        'developer': 'Developer',
        'developer_email': 'DeveloperEmail',
        'developer_phone': 'DeveloperPhone',
        'auto_update_version': 'AutoUpdateVersion',
        'enable_provisioning': 'EnableProvisioning',
        'supported_processor_architecture': 'SupportedProcessorArchitecture',
        'msi_deployment_parameters': 'MsiDeploymentParameters',
        'is_dependency_file': 'IsDependencyFile',
        'deployment_options': 'DeploymentOptions',
        'files_options': 'FilesOptions',
        'content_gateway_id': 'ContentGatewayId',
        'icon_file_name': 'IconFileName',
        'application_file_name': 'ApplicationFileName',
        'metadata_file_name': 'MetadataFileName',
        'version_identifier': 'VersionIdentifier',
        'icon_blob_uu_id': 'IconBlobUuId',
        'id': 'Id',
        'uuid': 'Uuid'
    }

    def __init__(self, application_name=None, bundle_id=None, app_version=None, actual_file_version=None, app_type=None, status=None, platform=None, supported_models=None, assignment_status=None, application_size=None, category_list=None, smart_groups=None, comments=None, is_reimbursable=None, application_url=None, application_source=None, location_group_id=None, root_location_group_name=None, organization_group_uuid=None, external_id=None, large_icon_uri=None, medium_icon_uri=None, small_icon_uri=None, push_mode=None, app_rank=None, assigned_device_count=None, installed_device_count=None, not_installed_device_count=None, description=None, support_email=None, support_phone=None, developer=None, developer_email=None, developer_phone=None, auto_update_version=None, enable_provisioning=None, supported_processor_architecture=None, msi_deployment_parameters=None, is_dependency_file=None, deployment_options=None, files_options=None, content_gateway_id=None, icon_file_name=None, application_file_name=None, metadata_file_name=None, version_identifier=None, icon_blob_uu_id=None, id=None, uuid=None, _configuration=None):  # noqa: E501
        """ApplicationEntity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._application_name = None
        self._bundle_id = None
        self._app_version = None
        self._actual_file_version = None
        self._app_type = None
        self._status = None
        self._platform = None
        self._supported_models = None
        self._assignment_status = None
        self._application_size = None
        self._category_list = None
        self._smart_groups = None
        self._comments = None
        self._is_reimbursable = None
        self._application_url = None
        self._application_source = None
        self._location_group_id = None
        self._root_location_group_name = None
        self._organization_group_uuid = None
        self._external_id = None
        self._large_icon_uri = None
        self._medium_icon_uri = None
        self._small_icon_uri = None
        self._push_mode = None
        self._app_rank = None
        self._assigned_device_count = None
        self._installed_device_count = None
        self._not_installed_device_count = None
        self._description = None
        self._support_email = None
        self._support_phone = None
        self._developer = None
        self._developer_email = None
        self._developer_phone = None
        self._auto_update_version = None
        self._enable_provisioning = None
        self._supported_processor_architecture = None
        self._msi_deployment_parameters = None
        self._is_dependency_file = None
        self._deployment_options = None
        self._files_options = None
        self._content_gateway_id = None
        self._icon_file_name = None
        self._application_file_name = None
        self._metadata_file_name = None
        self._version_identifier = None
        self._icon_blob_uu_id = None
        self._id = None
        self._uuid = None
        self.discriminator = None

        if application_name is not None:
            self.application_name = application_name
        if bundle_id is not None:
            self.bundle_id = bundle_id
        if app_version is not None:
            self.app_version = app_version
        if actual_file_version is not None:
            self.actual_file_version = actual_file_version
        if app_type is not None:
            self.app_type = app_type
        if status is not None:
            self.status = status
        if platform is not None:
            self.platform = platform
        if supported_models is not None:
            self.supported_models = supported_models
        if assignment_status is not None:
            self.assignment_status = assignment_status
        if application_size is not None:
            self.application_size = application_size
        if category_list is not None:
            self.category_list = category_list
        if smart_groups is not None:
            self.smart_groups = smart_groups
        if comments is not None:
            self.comments = comments
        if is_reimbursable is not None:
            self.is_reimbursable = is_reimbursable
        if application_url is not None:
            self.application_url = application_url
        if application_source is not None:
            self.application_source = application_source
        if location_group_id is not None:
            self.location_group_id = location_group_id
        if root_location_group_name is not None:
            self.root_location_group_name = root_location_group_name
        if organization_group_uuid is not None:
            self.organization_group_uuid = organization_group_uuid
        if external_id is not None:
            self.external_id = external_id
        if large_icon_uri is not None:
            self.large_icon_uri = large_icon_uri
        if medium_icon_uri is not None:
            self.medium_icon_uri = medium_icon_uri
        if small_icon_uri is not None:
            self.small_icon_uri = small_icon_uri
        if push_mode is not None:
            self.push_mode = push_mode
        if app_rank is not None:
            self.app_rank = app_rank
        if assigned_device_count is not None:
            self.assigned_device_count = assigned_device_count
        if installed_device_count is not None:
            self.installed_device_count = installed_device_count
        if not_installed_device_count is not None:
            self.not_installed_device_count = not_installed_device_count
        if description is not None:
            self.description = description
        if support_email is not None:
            self.support_email = support_email
        if support_phone is not None:
            self.support_phone = support_phone
        if developer is not None:
            self.developer = developer
        if developer_email is not None:
            self.developer_email = developer_email
        if developer_phone is not None:
            self.developer_phone = developer_phone
        if auto_update_version is not None:
            self.auto_update_version = auto_update_version
        if enable_provisioning is not None:
            self.enable_provisioning = enable_provisioning
        if supported_processor_architecture is not None:
            self.supported_processor_architecture = supported_processor_architecture
        if msi_deployment_parameters is not None:
            self.msi_deployment_parameters = msi_deployment_parameters
        if is_dependency_file is not None:
            self.is_dependency_file = is_dependency_file
        if deployment_options is not None:
            self.deployment_options = deployment_options
        if files_options is not None:
            self.files_options = files_options
        if content_gateway_id is not None:
            self.content_gateway_id = content_gateway_id
        if icon_file_name is not None:
            self.icon_file_name = icon_file_name
        if application_file_name is not None:
            self.application_file_name = application_file_name
        if metadata_file_name is not None:
            self.metadata_file_name = metadata_file_name
        if version_identifier is not None:
            self.version_identifier = version_identifier
        if icon_blob_uu_id is not None:
            self.icon_blob_uu_id = icon_blob_uu_id
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid

    @property
    def application_name(self):
        """Gets the application_name of this ApplicationEntity.  # noqa: E501

        Gets or sets application Name.  # noqa: E501

        :return: The application_name of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApplicationEntity.

        Gets or sets application Name.  # noqa: E501

        :param application_name: The application_name of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def bundle_id(self):
        """Gets the bundle_id of this ApplicationEntity.  # noqa: E501

        Gets or sets package id.  # noqa: E501

        :return: The bundle_id of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this ApplicationEntity.

        Gets or sets package id.  # noqa: E501

        :param bundle_id: The bundle_id of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._bundle_id = bundle_id

    @property
    def app_version(self):
        """Gets the app_version of this ApplicationEntity.  # noqa: E501

        Gets or sets app version.  # noqa: E501

        :return: The app_version of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this ApplicationEntity.

        Gets or sets app version.  # noqa: E501

        :param app_version: The app_version of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def actual_file_version(self):
        """Gets the actual_file_version of this ApplicationEntity.  # noqa: E501

        Gets or sets actual file version of the app.  # noqa: E501

        :return: The actual_file_version of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._actual_file_version

    @actual_file_version.setter
    def actual_file_version(self, actual_file_version):
        """Sets the actual_file_version of this ApplicationEntity.

        Gets or sets actual file version of the app.  # noqa: E501

        :param actual_file_version: The actual_file_version of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._actual_file_version = actual_file_version

    @property
    def app_type(self):
        """Gets the app_type of this ApplicationEntity.  # noqa: E501

        Gets or sets app type includes Public, Internal, Purchased.  # noqa: E501

        :return: The app_type of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this ApplicationEntity.

        Gets or sets app type includes Public, Internal, Purchased.  # noqa: E501

        :param app_type: The app_type of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    @property
    def status(self):
        """Gets the status of this ApplicationEntity.  # noqa: E501

        Gets or sets application Status can be Active or InActive.  # noqa: E501

        :return: The status of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplicationEntity.

        Gets or sets application Status can be Active or InActive.  # noqa: E501

        :param status: The status of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def platform(self):
        """Gets the platform of this ApplicationEntity.  # noqa: E501

        Gets or sets platform is the type of device. ex: Unknown = 0, WindowsMobile = 1, Apple = 2, Android = 5,.  # noqa: E501

        :return: The platform of this ApplicationEntity.  # noqa: E501
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ApplicationEntity.

        Gets or sets platform is the type of device. ex: Unknown = 0, WindowsMobile = 1, Apple = 2, Android = 5,.  # noqa: E501

        :param platform: The platform of this ApplicationEntity.  # noqa: E501
        :type: int
        """

        self._platform = platform

    @property
    def supported_models(self):
        """Gets the supported_models of this ApplicationEntity.  # noqa: E501

        Gets or sets collection of supported Application Models.  # noqa: E501

        :return: The supported_models of this ApplicationEntity.  # noqa: E501
        :rtype: ApplicationSupportedModels_
        """
        return self._supported_models

    @supported_models.setter
    def supported_models(self, supported_models):
        """Sets the supported_models of this ApplicationEntity.

        Gets or sets collection of supported Application Models.  # noqa: E501

        :param supported_models: The supported_models of this ApplicationEntity.  # noqa: E501
        :type: ApplicationSupportedModels_
        """

        self._supported_models = supported_models

    @property
    def assignment_status(self):
        """Gets the assignment_status of this ApplicationEntity.  # noqa: E501

        Gets or sets assignment status. Can be Assigned or Unassigned.  # noqa: E501

        :return: The assignment_status of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._assignment_status

    @assignment_status.setter
    def assignment_status(self, assignment_status):
        """Sets the assignment_status of this ApplicationEntity.

        Gets or sets assignment status. Can be Assigned or Unassigned.  # noqa: E501

        :param assignment_status: The assignment_status of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._assignment_status = assignment_status

    @property
    def application_size(self):
        """Gets the application_size of this ApplicationEntity.  # noqa: E501

        Gets or sets application size.  # noqa: E501

        :return: The application_size of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_size

    @application_size.setter
    def application_size(self, application_size):
        """Sets the application_size of this ApplicationEntity.

        Gets or sets application size.  # noqa: E501

        :param application_size: The application_size of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._application_size = application_size

    @property
    def category_list(self):
        """Gets the category_list of this ApplicationEntity.  # noqa: E501

        Gets or sets represents the various categories that are associated to an application. Represented by the category Id and Description.  # noqa: E501

        :return: The category_list of this ApplicationEntity.  # noqa: E501
        :rtype: ApplicationCategories_
        """
        return self._category_list

    @category_list.setter
    def category_list(self, category_list):
        """Sets the category_list of this ApplicationEntity.

        Gets or sets represents the various categories that are associated to an application. Represented by the category Id and Description.  # noqa: E501

        :param category_list: The category_list of this ApplicationEntity.  # noqa: E501
        :type: ApplicationCategories_
        """

        self._category_list = category_list

    @property
    def smart_groups(self):
        """Gets the smart_groups of this ApplicationEntity.  # noqa: E501

        Gets or sets assigned Smart Groups.  # noqa: E501

        :return: The smart_groups of this ApplicationEntity.  # noqa: E501
        :rtype: list[SmartGroupAppMap]
        """
        return self._smart_groups

    @smart_groups.setter
    def smart_groups(self, smart_groups):
        """Sets the smart_groups of this ApplicationEntity.

        Gets or sets assigned Smart Groups.  # noqa: E501

        :param smart_groups: The smart_groups of this ApplicationEntity.  # noqa: E501
        :type: list[SmartGroupAppMap]
        """

        self._smart_groups = smart_groups

    @property
    def comments(self):
        """Gets the comments of this ApplicationEntity.  # noqa: E501

        Gets or sets comments of the application.  # noqa: E501

        :return: The comments of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ApplicationEntity.

        Gets or sets comments of the application.  # noqa: E501

        :param comments: The comments of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def is_reimbursable(self):
        """Gets the is_reimbursable of this ApplicationEntity.  # noqa: E501

        Gets or sets a value indicating whether indicates whether the particular application can be reimbursed.  # noqa: E501

        :return: The is_reimbursable of this ApplicationEntity.  # noqa: E501
        :rtype: bool
        """
        return self._is_reimbursable

    @is_reimbursable.setter
    def is_reimbursable(self, is_reimbursable):
        """Sets the is_reimbursable of this ApplicationEntity.

        Gets or sets a value indicating whether indicates whether the particular application can be reimbursed.  # noqa: E501

        :param is_reimbursable: The is_reimbursable of this ApplicationEntity.  # noqa: E501
        :type: bool
        """

        self._is_reimbursable = is_reimbursable

    @property
    def application_url(self):
        """Gets the application_url of this ApplicationEntity.  # noqa: E501

        Gets or sets download URL for the application.  # noqa: E501

        :return: The application_url of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_url

    @application_url.setter
    def application_url(self, application_url):
        """Sets the application_url of this ApplicationEntity.

        Gets or sets download URL for the application.  # noqa: E501

        :param application_url: The application_url of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._application_url = application_url

    @property
    def application_source(self):
        """Gets the application_source of this ApplicationEntity.  # noqa: E501

        Gets or sets the application source.  # noqa: E501

        :return: The application_source of this ApplicationEntity.  # noqa: E501
        :rtype: int
        """
        return self._application_source

    @application_source.setter
    def application_source(self, application_source):
        """Sets the application_source of this ApplicationEntity.

        Gets or sets the application source.  # noqa: E501

        :param application_source: The application_source of this ApplicationEntity.  # noqa: E501
        :type: int
        """

        self._application_source = application_source

    @property
    def location_group_id(self):
        """Gets the location_group_id of this ApplicationEntity.  # noqa: E501

        Gets or sets organization Group Id.  # noqa: E501

        :return: The location_group_id of this ApplicationEntity.  # noqa: E501
        :rtype: int
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this ApplicationEntity.

        Gets or sets organization Group Id.  # noqa: E501

        :param location_group_id: The location_group_id of this ApplicationEntity.  # noqa: E501
        :type: int
        """

        self._location_group_id = location_group_id

    @property
    def root_location_group_name(self):
        """Gets the root_location_group_name of this ApplicationEntity.  # noqa: E501

        Gets or sets root Location Group Name.  # noqa: E501

        :return: The root_location_group_name of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._root_location_group_name

    @root_location_group_name.setter
    def root_location_group_name(self, root_location_group_name):
        """Sets the root_location_group_name of this ApplicationEntity.

        Gets or sets root Location Group Name.  # noqa: E501

        :param root_location_group_name: The root_location_group_name of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._root_location_group_name = root_location_group_name

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this ApplicationEntity.  # noqa: E501

        Gets or sets organization Group UUID.  # noqa: E501

        :return: The organization_group_uuid of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this ApplicationEntity.

        Gets or sets organization Group UUID.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._organization_group_uuid = organization_group_uuid

    @property
    def external_id(self):
        """Gets the external_id of this ApplicationEntity.  # noqa: E501

        Gets or sets external Store Id.  # noqa: E501

        :return: The external_id of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ApplicationEntity.

        Gets or sets external Store Id.  # noqa: E501

        :param external_id: The external_id of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def large_icon_uri(self):
        """Gets the large_icon_uri of this ApplicationEntity.  # noqa: E501

        Gets or sets large Icon URL.  # noqa: E501

        :return: The large_icon_uri of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._large_icon_uri

    @large_icon_uri.setter
    def large_icon_uri(self, large_icon_uri):
        """Sets the large_icon_uri of this ApplicationEntity.

        Gets or sets large Icon URL.  # noqa: E501

        :param large_icon_uri: The large_icon_uri of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._large_icon_uri = large_icon_uri

    @property
    def medium_icon_uri(self):
        """Gets the medium_icon_uri of this ApplicationEntity.  # noqa: E501

        Gets or sets medium Icon URL.  # noqa: E501

        :return: The medium_icon_uri of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._medium_icon_uri

    @medium_icon_uri.setter
    def medium_icon_uri(self, medium_icon_uri):
        """Sets the medium_icon_uri of this ApplicationEntity.

        Gets or sets medium Icon URL.  # noqa: E501

        :param medium_icon_uri: The medium_icon_uri of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._medium_icon_uri = medium_icon_uri

    @property
    def small_icon_uri(self):
        """Gets the small_icon_uri of this ApplicationEntity.  # noqa: E501

        Gets or sets small Icon URL.  # noqa: E501

        :return: The small_icon_uri of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._small_icon_uri

    @small_icon_uri.setter
    def small_icon_uri(self, small_icon_uri):
        """Sets the small_icon_uri of this ApplicationEntity.

        Gets or sets small Icon URL.  # noqa: E501

        :param small_icon_uri: The small_icon_uri of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._small_icon_uri = small_icon_uri

    @property
    def push_mode(self):
        """Gets the push_mode of this ApplicationEntity.  # noqa: E501

        Gets or sets push Mode for the application - Auto, On-Demand.  # noqa: E501

        :return: The push_mode of this ApplicationEntity.  # noqa: E501
        :rtype: int
        """
        return self._push_mode

    @push_mode.setter
    def push_mode(self, push_mode):
        """Sets the push_mode of this ApplicationEntity.

        Gets or sets push Mode for the application - Auto, On-Demand.  # noqa: E501

        :param push_mode: The push_mode of this ApplicationEntity.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                push_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `push_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(push_mode, allowed_values)
            )

        self._push_mode = push_mode

    @property
    def app_rank(self):
        """Gets the app_rank of this ApplicationEntity.  # noqa: E501

        Gets or sets application Rank.  # noqa: E501

        :return: The app_rank of this ApplicationEntity.  # noqa: E501
        :rtype: int
        """
        return self._app_rank

    @app_rank.setter
    def app_rank(self, app_rank):
        """Sets the app_rank of this ApplicationEntity.

        Gets or sets application Rank.  # noqa: E501

        :param app_rank: The app_rank of this ApplicationEntity.  # noqa: E501
        :type: int
        """

        self._app_rank = app_rank

    @property
    def assigned_device_count(self):
        """Gets the assigned_device_count of this ApplicationEntity.  # noqa: E501

        Gets or sets number of device to which current application is Assigned.  # noqa: E501

        :return: The assigned_device_count of this ApplicationEntity.  # noqa: E501
        :rtype: int
        """
        return self._assigned_device_count

    @assigned_device_count.setter
    def assigned_device_count(self, assigned_device_count):
        """Sets the assigned_device_count of this ApplicationEntity.

        Gets or sets number of device to which current application is Assigned.  # noqa: E501

        :param assigned_device_count: The assigned_device_count of this ApplicationEntity.  # noqa: E501
        :type: int
        """

        self._assigned_device_count = assigned_device_count

    @property
    def installed_device_count(self):
        """Gets the installed_device_count of this ApplicationEntity.  # noqa: E501

        Gets or sets number of device on which current application is Installed.  # noqa: E501

        :return: The installed_device_count of this ApplicationEntity.  # noqa: E501
        :rtype: int
        """
        return self._installed_device_count

    @installed_device_count.setter
    def installed_device_count(self, installed_device_count):
        """Sets the installed_device_count of this ApplicationEntity.

        Gets or sets number of device on which current application is Installed.  # noqa: E501

        :param installed_device_count: The installed_device_count of this ApplicationEntity.  # noqa: E501
        :type: int
        """

        self._installed_device_count = installed_device_count

    @property
    def not_installed_device_count(self):
        """Gets the not_installed_device_count of this ApplicationEntity.  # noqa: E501

        Gets or sets number of device to which current application is Assigned, but not installed.  # noqa: E501

        :return: The not_installed_device_count of this ApplicationEntity.  # noqa: E501
        :rtype: int
        """
        return self._not_installed_device_count

    @not_installed_device_count.setter
    def not_installed_device_count(self, not_installed_device_count):
        """Sets the not_installed_device_count of this ApplicationEntity.

        Gets or sets number of device to which current application is Assigned, but not installed.  # noqa: E501

        :param not_installed_device_count: The not_installed_device_count of this ApplicationEntity.  # noqa: E501
        :type: int
        """

        self._not_installed_device_count = not_installed_device_count

    @property
    def description(self):
        """Gets the description of this ApplicationEntity.  # noqa: E501

        Gets or sets description of the application.  # noqa: E501

        :return: The description of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationEntity.

        Gets or sets description of the application.  # noqa: E501

        :param description: The description of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def support_email(self):
        """Gets the support_email of this ApplicationEntity.  # noqa: E501

        Gets or sets support email.  # noqa: E501

        :return: The support_email of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this ApplicationEntity.

        Gets or sets support email.  # noqa: E501

        :param support_email: The support_email of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._support_email = support_email

    @property
    def support_phone(self):
        """Gets the support_phone of this ApplicationEntity.  # noqa: E501

        Gets or sets support Phone number.  # noqa: E501

        :return: The support_phone of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._support_phone

    @support_phone.setter
    def support_phone(self, support_phone):
        """Sets the support_phone of this ApplicationEntity.

        Gets or sets support Phone number.  # noqa: E501

        :param support_phone: The support_phone of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._support_phone = support_phone

    @property
    def developer(self):
        """Gets the developer of this ApplicationEntity.  # noqa: E501

        Gets or sets developer Name.  # noqa: E501

        :return: The developer of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._developer

    @developer.setter
    def developer(self, developer):
        """Sets the developer of this ApplicationEntity.

        Gets or sets developer Name.  # noqa: E501

        :param developer: The developer of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._developer = developer

    @property
    def developer_email(self):
        """Gets the developer_email of this ApplicationEntity.  # noqa: E501

        Gets or sets email address of developer.  # noqa: E501

        :return: The developer_email of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._developer_email

    @developer_email.setter
    def developer_email(self, developer_email):
        """Sets the developer_email of this ApplicationEntity.

        Gets or sets email address of developer.  # noqa: E501

        :param developer_email: The developer_email of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._developer_email = developer_email

    @property
    def developer_phone(self):
        """Gets the developer_phone of this ApplicationEntity.  # noqa: E501

        Gets or sets phone number of developer.  # noqa: E501

        :return: The developer_phone of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._developer_phone

    @developer_phone.setter
    def developer_phone(self, developer_phone):
        """Sets the developer_phone of this ApplicationEntity.

        Gets or sets phone number of developer.  # noqa: E501

        :param developer_phone: The developer_phone of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._developer_phone = developer_phone

    @property
    def auto_update_version(self):
        """Gets the auto_update_version of this ApplicationEntity.  # noqa: E501

        Gets or sets a value indicating whether auto update version in case of Ondemand mode.  # noqa: E501

        :return: The auto_update_version of this ApplicationEntity.  # noqa: E501
        :rtype: bool
        """
        return self._auto_update_version

    @auto_update_version.setter
    def auto_update_version(self, auto_update_version):
        """Sets the auto_update_version of this ApplicationEntity.

        Gets or sets a value indicating whether auto update version in case of Ondemand mode.  # noqa: E501

        :param auto_update_version: The auto_update_version of this ApplicationEntity.  # noqa: E501
        :type: bool
        """

        self._auto_update_version = auto_update_version

    @property
    def enable_provisioning(self):
        """Gets the enable_provisioning of this ApplicationEntity.  # noqa: E501

        Gets or sets a value indicating whether flag to indicate Application will be used for Product Provisioning. Valid values: true, false.  # noqa: E501

        :return: The enable_provisioning of this ApplicationEntity.  # noqa: E501
        :rtype: bool
        """
        return self._enable_provisioning

    @enable_provisioning.setter
    def enable_provisioning(self, enable_provisioning):
        """Sets the enable_provisioning of this ApplicationEntity.

        Gets or sets a value indicating whether flag to indicate Application will be used for Product Provisioning. Valid values: true, false.  # noqa: E501

        :param enable_provisioning: The enable_provisioning of this ApplicationEntity.  # noqa: E501
        :type: bool
        """

        self._enable_provisioning = enable_provisioning

    @property
    def supported_processor_architecture(self):
        """Gets the supported_processor_architecture of this ApplicationEntity.  # noqa: E501

        Gets or sets supported Processor Architecture. Ex: x86, x64. This is valid only for MSI, ZIP, EXE files with software distribution.  # noqa: E501

        :return: The supported_processor_architecture of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._supported_processor_architecture

    @supported_processor_architecture.setter
    def supported_processor_architecture(self, supported_processor_architecture):
        """Sets the supported_processor_architecture of this ApplicationEntity.

        Gets or sets supported Processor Architecture. Ex: x86, x64. This is valid only for MSI, ZIP, EXE files with software distribution.  # noqa: E501

        :param supported_processor_architecture: The supported_processor_architecture of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._supported_processor_architecture = supported_processor_architecture

    @property
    def msi_deployment_parameters(self):
        """Gets the msi_deployment_parameters of this ApplicationEntity.  # noqa: E501

        Gets or sets msi deployment param model. This is valid only for MSI files when Software Distribution is not enabled.  # noqa: E501

        :return: The msi_deployment_parameters of this ApplicationEntity.  # noqa: E501
        :rtype: MsiDeploymentParamModel_
        """
        return self._msi_deployment_parameters

    @msi_deployment_parameters.setter
    def msi_deployment_parameters(self, msi_deployment_parameters):
        """Sets the msi_deployment_parameters of this ApplicationEntity.

        Gets or sets msi deployment param model. This is valid only for MSI files when Software Distribution is not enabled.  # noqa: E501

        :param msi_deployment_parameters: The msi_deployment_parameters of this ApplicationEntity.  # noqa: E501
        :type: MsiDeploymentParamModel_
        """

        self._msi_deployment_parameters = msi_deployment_parameters

    @property
    def is_dependency_file(self):
        """Gets the is_dependency_file of this ApplicationEntity.  # noqa: E501

        Gets or sets a value indicating whether indicates whether uploaded file is a dependency file.  # noqa: E501

        :return: The is_dependency_file of this ApplicationEntity.  # noqa: E501
        :rtype: bool
        """
        return self._is_dependency_file

    @is_dependency_file.setter
    def is_dependency_file(self, is_dependency_file):
        """Sets the is_dependency_file of this ApplicationEntity.

        Gets or sets a value indicating whether indicates whether uploaded file is a dependency file.  # noqa: E501

        :param is_dependency_file: The is_dependency_file of this ApplicationEntity.  # noqa: E501
        :type: bool
        """

        self._is_dependency_file = is_dependency_file

    @property
    def deployment_options(self):
        """Gets the deployment_options of this ApplicationEntity.  # noqa: E501

        Gets or sets application deployment options for software distribution.  # noqa: E501

        :return: The deployment_options of this ApplicationEntity.  # noqa: E501
        :rtype: ApplicationDeploymentOptionsModel_
        """
        return self._deployment_options

    @deployment_options.setter
    def deployment_options(self, deployment_options):
        """Sets the deployment_options of this ApplicationEntity.

        Gets or sets application deployment options for software distribution.  # noqa: E501

        :param deployment_options: The deployment_options of this ApplicationEntity.  # noqa: E501
        :type: ApplicationDeploymentOptionsModel_
        """

        self._deployment_options = deployment_options

    @property
    def files_options(self):
        """Gets the files_options of this ApplicationEntity.  # noqa: E501

        Gets or sets application files options.  # noqa: E501

        :return: The files_options of this ApplicationEntity.  # noqa: E501
        :rtype: ApplicationFilesOptionsModel_
        """
        return self._files_options

    @files_options.setter
    def files_options(self, files_options):
        """Sets the files_options of this ApplicationEntity.

        Gets or sets application files options.  # noqa: E501

        :param files_options: The files_options of this ApplicationEntity.  # noqa: E501
        :type: ApplicationFilesOptionsModel_
        """

        self._files_options = files_options

    @property
    def content_gateway_id(self):
        """Gets the content_gateway_id of this ApplicationEntity.  # noqa: E501

        Gets or sets content Gateway Id.  # noqa: E501

        :return: The content_gateway_id of this ApplicationEntity.  # noqa: E501
        :rtype: int
        """
        return self._content_gateway_id

    @content_gateway_id.setter
    def content_gateway_id(self, content_gateway_id):
        """Sets the content_gateway_id of this ApplicationEntity.

        Gets or sets content Gateway Id.  # noqa: E501

        :param content_gateway_id: The content_gateway_id of this ApplicationEntity.  # noqa: E501
        :type: int
        """

        self._content_gateway_id = content_gateway_id

    @property
    def icon_file_name(self):
        """Gets the icon_file_name of this ApplicationEntity.  # noqa: E501

        Gets or sets the name of the uploadeed icon file.  # noqa: E501

        :return: The icon_file_name of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._icon_file_name

    @icon_file_name.setter
    def icon_file_name(self, icon_file_name):
        """Sets the icon_file_name of this ApplicationEntity.

        Gets or sets the name of the uploadeed icon file.  # noqa: E501

        :param icon_file_name: The icon_file_name of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._icon_file_name = icon_file_name

    @property
    def application_file_name(self):
        """Gets the application_file_name of this ApplicationEntity.  # noqa: E501

        Gets or sets the name of the uploaded application file.  # noqa: E501

        :return: The application_file_name of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_file_name

    @application_file_name.setter
    def application_file_name(self, application_file_name):
        """Sets the application_file_name of this ApplicationEntity.

        Gets or sets the name of the uploaded application file.  # noqa: E501

        :param application_file_name: The application_file_name of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._application_file_name = application_file_name

    @property
    def metadata_file_name(self):
        """Gets the metadata_file_name of this ApplicationEntity.  # noqa: E501

        Gets or sets the name of the uploaded metadata file.  # noqa: E501

        :return: The metadata_file_name of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._metadata_file_name

    @metadata_file_name.setter
    def metadata_file_name(self, metadata_file_name):
        """Sets the metadata_file_name of this ApplicationEntity.

        Gets or sets the name of the uploaded metadata file.  # noqa: E501

        :param metadata_file_name: The metadata_file_name of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._metadata_file_name = metadata_file_name

    @property
    def version_identifier(self):
        """Gets the version_identifier of this ApplicationEntity.  # noqa: E501

        Gets or sets the version identifier of the application.  # noqa: E501

        :return: The version_identifier of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._version_identifier

    @version_identifier.setter
    def version_identifier(self, version_identifier):
        """Sets the version_identifier of this ApplicationEntity.

        Gets or sets the version identifier of the application.  # noqa: E501

        :param version_identifier: The version_identifier of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._version_identifier = version_identifier

    @property
    def icon_blob_uu_id(self):
        """Gets the icon_blob_uu_id of this ApplicationEntity.  # noqa: E501

        Gets or sets uuid of the uploaded icon blob data.  # noqa: E501

        :return: The icon_blob_uu_id of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._icon_blob_uu_id

    @icon_blob_uu_id.setter
    def icon_blob_uu_id(self, icon_blob_uu_id):
        """Sets the icon_blob_uu_id of this ApplicationEntity.

        Gets or sets uuid of the uploaded icon blob data.  # noqa: E501

        :param icon_blob_uu_id: The icon_blob_uu_id of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._icon_blob_uu_id = icon_blob_uu_id

    @property
    def id(self):
        """Gets the id of this ApplicationEntity.  # noqa: E501


        :return: The id of this ApplicationEntity.  # noqa: E501
        :rtype: EntityId_
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationEntity.


        :param id: The id of this ApplicationEntity.  # noqa: E501
        :type: EntityId_
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ApplicationEntity.  # noqa: E501


        :return: The uuid of this ApplicationEntity.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApplicationEntity.


        :param uuid: The uuid of this ApplicationEntity.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationEntity):
            return True

        return self.to_dict() != other.to_dict()
