# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class IntelligenceEulaModelV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'email_address': 'str',
        'title': 'str',
        'company_name': 'str',
        'company_address': 'str',
        'eula': 'str'
    }

    attribute_map = {
        'name': 'name',
        'email_address': 'email_address',
        'title': 'title',
        'company_name': 'company_name',
        'company_address': 'company_address',
        'eula': 'eula'
    }

    def __init__(self, name=None, email_address=None, title=None, company_name=None, company_address=None, eula=None, _configuration=None):  # noqa: E501
        """IntelligenceEulaModelV1 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._email_address = None
        self._title = None
        self._company_name = None
        self._company_address = None
        self._eula = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if email_address is not None:
            self.email_address = email_address
        if title is not None:
            self.title = title
        if company_name is not None:
            self.company_name = company_name
        if company_address is not None:
            self.company_address = company_address
        if eula is not None:
            self.eula = eula

    @property
    def name(self):
        """Gets the name of this IntelligenceEulaModelV1.  # noqa: E501

        Name of the person accepting eula (default value is user name of logged in user).  # noqa: E501

        :return: The name of this IntelligenceEulaModelV1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntelligenceEulaModelV1.

        Name of the person accepting eula (default value is user name of logged in user).  # noqa: E501

        :param name: The name of this IntelligenceEulaModelV1.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email_address(self):
        """Gets the email_address of this IntelligenceEulaModelV1.  # noqa: E501

        Email address of the person accepting eula (default value is emailid of logged in user ).  # noqa: E501

        :return: The email_address of this IntelligenceEulaModelV1.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this IntelligenceEulaModelV1.

        Email address of the person accepting eula (default value is emailid of logged in user ).  # noqa: E501

        :param email_address: The email_address of this IntelligenceEulaModelV1.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def title(self):
        """Gets the title of this IntelligenceEulaModelV1.  # noqa: E501

        Designation of the person.  # noqa: E501

        :return: The title of this IntelligenceEulaModelV1.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IntelligenceEulaModelV1.

        Designation of the person.  # noqa: E501

        :param title: The title of this IntelligenceEulaModelV1.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def company_name(self):
        """Gets the company_name of this IntelligenceEulaModelV1.  # noqa: E501

        Name of the company.  # noqa: E501

        :return: The company_name of this IntelligenceEulaModelV1.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this IntelligenceEulaModelV1.

        Name of the company.  # noqa: E501

        :param company_name: The company_name of this IntelligenceEulaModelV1.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def company_address(self):
        """Gets the company_address of this IntelligenceEulaModelV1.  # noqa: E501

        Address of the company.  # noqa: E501

        :return: The company_address of this IntelligenceEulaModelV1.  # noqa: E501
        :rtype: str
        """
        return self._company_address

    @company_address.setter
    def company_address(self, company_address):
        """Sets the company_address of this IntelligenceEulaModelV1.

        Address of the company.  # noqa: E501

        :param company_address: The company_address of this IntelligenceEulaModelV1.  # noqa: E501
        :type: str
        """

        self._company_address = company_address

    @property
    def eula(self):
        """Gets the eula of this IntelligenceEulaModelV1.  # noqa: E501

        End user license agreement.  # noqa: E501

        :return: The eula of this IntelligenceEulaModelV1.  # noqa: E501
        :rtype: str
        """
        return self._eula

    @eula.setter
    def eula(self, eula):
        """Sets the eula of this IntelligenceEulaModelV1.

        End user license agreement.  # noqa: E501

        :param eula: The eula of this IntelligenceEulaModelV1.  # noqa: E501
        :type: str
        """

        self._eula = eula

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntelligenceEulaModelV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntelligenceEulaModelV1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IntelligenceEulaModelV1):
            return True

        return self.to_dict() != other.to_dict()
