# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ScriptDeployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trigger_type': 'int',
        'trigger_schedule': 'int',
        'trigger_events': 'list[str]',
        'display_attributes': 'CatalogDisplay'
    }

    attribute_map = {
        'trigger_type': 'trigger_type',
        'trigger_schedule': 'trigger_schedule',
        'trigger_events': 'trigger_events',
        'display_attributes': 'DisplayAttributes'
    }

    def __init__(self, trigger_type=None, trigger_schedule=None, trigger_events=None, display_attributes=None, _configuration=None):  # noqa: E501
        """ScriptDeployment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._trigger_type = None
        self._trigger_schedule = None
        self._trigger_events = None
        self._display_attributes = None
        self.discriminator = None

        if trigger_type is not None:
            self.trigger_type = trigger_type
        if trigger_schedule is not None:
            self.trigger_schedule = trigger_schedule
        if trigger_events is not None:
            self.trigger_events = trigger_events
        if display_attributes is not None:
            self.display_attributes = display_attributes

    @property
    def trigger_type(self):
        """Gets the trigger_type of this ScriptDeployment.  # noqa: E501


        :return: The trigger_type of this ScriptDeployment.  # noqa: E501
        :rtype: int
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this ScriptDeployment.


        :param trigger_type: The trigger_type of this ScriptDeployment.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                trigger_type not in allowed_values):
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def trigger_schedule(self):
        """Gets the trigger_schedule of this ScriptDeployment.  # noqa: E501


        :return: The trigger_schedule of this ScriptDeployment.  # noqa: E501
        :rtype: int
        """
        return self._trigger_schedule

    @trigger_schedule.setter
    def trigger_schedule(self, trigger_schedule):
        """Sets the trigger_schedule of this ScriptDeployment.


        :param trigger_schedule: The trigger_schedule of this ScriptDeployment.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 4, 6, 8, 12, 24]  # noqa: E501
        if (self._configuration.client_side_validation and
                trigger_schedule not in allowed_values):
            raise ValueError(
                "Invalid value for `trigger_schedule` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_schedule, allowed_values)
            )

        self._trigger_schedule = trigger_schedule

    @property
    def trigger_events(self):
        """Gets the trigger_events of this ScriptDeployment.  # noqa: E501


        :return: The trigger_events of this ScriptDeployment.  # noqa: E501
        :rtype: list[str]
        """
        return self._trigger_events

    @trigger_events.setter
    def trigger_events(self, trigger_events):
        """Sets the trigger_events of this ScriptDeployment.


        :param trigger_events: The trigger_events of this ScriptDeployment.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["UNKNOWN", "LOGIN", "LOGOUT", "STARTUP", "USER_SWITCH", "NETWORK_CHANGE", "RUN_ON_PUBLISH", "RUN_ON_ENROLLMENT", "RUN_IMMEDIATELY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(trigger_events).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `trigger_events` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(trigger_events) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._trigger_events = trigger_events

    @property
    def display_attributes(self):
        """Gets the display_attributes of this ScriptDeployment.  # noqa: E501


        :return: The display_attributes of this ScriptDeployment.  # noqa: E501
        :rtype: CatalogDisplay
        """
        return self._display_attributes

    @display_attributes.setter
    def display_attributes(self, display_attributes):
        """Sets the display_attributes of this ScriptDeployment.


        :param display_attributes: The display_attributes of this ScriptDeployment.  # noqa: E501
        :type: CatalogDisplay
        """

        self._display_attributes = display_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScriptDeployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScriptDeployment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScriptDeployment):
            return True

        return self.to_dict() != other.to_dict()
