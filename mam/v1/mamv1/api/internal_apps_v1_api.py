# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mamv1.api_client import ApiClient


class InternalAppsV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def internal_apps_v1_activate_internal_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Activates the specified internal application.  # noqa: E501

        Activates all versions of the internal application specified by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_activate_internal_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the application.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_activate_internal_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_activate_internal_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_activate_internal_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Activates the specified internal application.  # noqa: E501

        Activates all versions of the internal application specified by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_activate_internal_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the application.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_activate_internal_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `internal_apps_v1_activate_internal_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_add_assignments_with_flexible_deployment_parameters_async(self, application_id, **kwargs):  # noqa: E501
        """Adds assignments along with the flexible deplyment parameters to an internal application.  # noqa: E501

        1. Adds assignments and returns a resource containing the transaction details  2. Excluded Assignment Groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any SG ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_add_assignments_with_flexible_deployment_parameters_async(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Internal Application Id. (required)
        :param ApplicationAssignmentsModel_ application_assignments: Application Assignments Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_add_assignments_with_flexible_deployment_parameters_async_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_add_assignments_with_flexible_deployment_parameters_async_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_add_assignments_with_flexible_deployment_parameters_async_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """Adds assignments along with the flexible deplyment parameters to an internal application.  # noqa: E501

        1. Adds assignments and returns a resource containing the transaction details  2. Excluded Assignment Groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any SG ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_add_assignments_with_flexible_deployment_parameters_async_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Internal Application Id. (required)
        :param ApplicationAssignmentsModel_ application_assignments: Application Assignments Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'application_assignments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_add_assignments_with_flexible_deployment_parameters_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `internal_apps_v1_add_assignments_with_flexible_deployment_parameters_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application_assignments' in params:
            body_params = params['application_assignments']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationId}/assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_application_bulk_action_on_devices(self, filter_criteria, action, **kwargs):  # noqa: E501
        """New - Applications actions (install, remove) for bulk devices  # noqa: E501

        This API performs applications actions (install, remove) for a set of devices. Set of devices will be passed as part of filter critera or it can be an individual device and app identifier combination. User needs to pass either filter criteria or individual device and app identifier combination. If user passes an individual device and app idenifier combination then filter criteria will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_application_bulk_action_on_devices(filter_criteria, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationDevicesSearchCriteriaModel filter_criteria: Contains the filter criteria and a list of individual device and app identifier combinations. User can get the list of devices which is eligible to perfom the bulk actions(Install, remove).(Required) (required)
        :param object action: The bulk action that we are going to perform(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_application_bulk_action_on_devices_with_http_info(filter_criteria, action, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_application_bulk_action_on_devices_with_http_info(filter_criteria, action, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_application_bulk_action_on_devices_with_http_info(self, filter_criteria, action, **kwargs):  # noqa: E501
        """New - Applications actions (install, remove) for bulk devices  # noqa: E501

        This API performs applications actions (install, remove) for a set of devices. Set of devices will be passed as part of filter critera or it can be an individual device and app identifier combination. User needs to pass either filter criteria or individual device and app identifier combination. If user passes an individual device and app idenifier combination then filter criteria will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_application_bulk_action_on_devices_with_http_info(filter_criteria, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplicationDevicesSearchCriteriaModel filter_criteria: Contains the filter criteria and a list of individual device and app identifier combinations. User can get the list of devices which is eligible to perfom the bulk actions(Install, remove).(Required) (required)
        :param object action: The bulk action that we are going to perform(Required) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_criteria', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_application_bulk_action_on_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_criteria' is set
        if self.api_client.client_side_validation and ('filter_criteria' not in params or
                                                       params['filter_criteria'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filter_criteria` when calling `internal_apps_v1_application_bulk_action_on_devices`")  # noqa: E501
        # verify the required parameter 'action' is set
        if self.api_client.client_side_validation and ('action' not in params or
                                                       params['action'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `action` when calling `internal_apps_v1_application_bulk_action_on_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter_criteria' in params:
            body_params = params['filter_criteria']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/devices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_create_internal_app_from_blob_async(self, **kwargs):  # noqa: E501
        """Creates an internal application.  # noqa: E501

        1. Creates an internal application using the uploaded file chunks.  2. If application is added through link and downloadfilefromlink is set to true then UploadViaLink should be set to false.  3. ActualFileVersion in API is same as App version on the UI; AppVersion in API is UEM Version on the UI.  4. BundleId And ActualFileVersion Are required when the app is uploaded via link.  5. If UploadViaLink is false, TransactionId or BlobId is required.  6. Use '/internal/application' API endpoint for using 4th decimal in applications.  7. If AppVersion is not passed, it is parsed from the ActualFileVersion (0 for the decimal places it cannot parse).  8. For windows SFD apps of format exe and zip, admin can pass 'ActualFileVersion' even when UploadViaLink is False.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_create_internal_app_from_blob_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InternalAppChunkTransaction_ app_chunk_transaction: The chunk details of the application.
        :return: InternalApplicationEntity_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_create_internal_app_from_blob_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_create_internal_app_from_blob_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_apps_v1_create_internal_app_from_blob_async_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an internal application.  # noqa: E501

        1. Creates an internal application using the uploaded file chunks.  2. If application is added through link and downloadfilefromlink is set to true then UploadViaLink should be set to false.  3. ActualFileVersion in API is same as App version on the UI; AppVersion in API is UEM Version on the UI.  4. BundleId And ActualFileVersion Are required when the app is uploaded via link.  5. If UploadViaLink is false, TransactionId or BlobId is required.  6. Use '/internal/application' API endpoint for using 4th decimal in applications.  7. If AppVersion is not passed, it is parsed from the ActualFileVersion (0 for the decimal places it cannot parse).  8. For windows SFD apps of format exe and zip, admin can pass 'ActualFileVersion' even when UploadViaLink is False.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_create_internal_app_from_blob_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InternalAppChunkTransaction_ app_chunk_transaction: The chunk details of the application.
        :return: InternalApplicationEntity_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_chunk_transaction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_create_internal_app_from_blob_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'app_chunk_transaction' in params:
            body_params = params['app_chunk_transaction']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/begininstall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InternalApplicationEntity_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_create_internal_application_from_blob(self, **kwargs):  # noqa: E501
        """Creates an internal application.  # noqa: E501

        1. Creates an internal application using the uploaded file chunks. Will return the ApplicationEntity for newly created internal application.  2. If application is added through link and downloadfilefromlink is set to true then upload_via_link should be set to false.  3. actual_file_version is same as App version on the UI; app_uem_Version on the API is UEM Version on the UI.  4. bundle_id and actual_file_version are required when the app is uploaded via link.  5. If upload_via_link is false, transaction_id or blob_id is required.  6. If app_uem_version is not passed, it is parsed from the actual_file_version (0 for the decimal places it cannot parse).  7. For Windows SFD apps of format exe and zip, admin can pass 'actual_file_version' even when upload_via_link is False.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_create_internal_application_from_blob(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InternalAppChunkTransactionV1Model internal_app_chunk_transaction: The chunk details of the application.
        :return: InternalApplicationEntity_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_create_internal_application_from_blob_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_create_internal_application_from_blob_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_apps_v1_create_internal_application_from_blob_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an internal application.  # noqa: E501

        1. Creates an internal application using the uploaded file chunks. Will return the ApplicationEntity for newly created internal application.  2. If application is added through link and downloadfilefromlink is set to true then upload_via_link should be set to false.  3. actual_file_version is same as App version on the UI; app_uem_Version on the API is UEM Version on the UI.  4. bundle_id and actual_file_version are required when the app is uploaded via link.  5. If upload_via_link is false, transaction_id or blob_id is required.  6. If app_uem_version is not passed, it is parsed from the actual_file_version (0 for the decimal places it cannot parse).  7. For Windows SFD apps of format exe and zip, admin can pass 'actual_file_version' even when upload_via_link is False.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_create_internal_application_from_blob_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InternalAppChunkTransactionV1Model internal_app_chunk_transaction: The chunk details of the application.
        :return: InternalApplicationEntity_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['internal_app_chunk_transaction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_create_internal_application_from_blob" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'internal_app_chunk_transaction' in params:
            body_params = params['internal_app_chunk_transaction']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/application', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InternalApplicationEntity_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_deactivate_internal_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Deactivates the specified internal application.  # noqa: E501

        Deactivates all versions of the Internal Application identified by the passed Application ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_deactivate_internal_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_deactivate_internal_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_deactivate_internal_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_deactivate_internal_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Deactivates the specified internal application.  # noqa: E501

        Deactivates all versions of the Internal Application identified by the passed Application ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_deactivate_internal_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: Application Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_deactivate_internal_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `internal_apps_v1_deactivate_internal_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_delete_assignment_async(self, application_id, **kwargs):  # noqa: E501
        """Deletes Application Assignment to Smart Group(s).  # noqa: E501

        1. Deletes a given smart group assignment for an internal app specified by id.  2. Excluded Assignment Groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any SG ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_delete_assignment_async(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: The Id integer of the application.(Required). (required)
        :param ApplicationDeleteAssignmentModel application_delete_assignment_model: Application assignment to be deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_delete_assignment_async_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_delete_assignment_async_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_delete_assignment_async_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """Deletes Application Assignment to Smart Group(s).  # noqa: E501

        1. Deletes a given smart group assignment for an internal app specified by id.  2. Excluded Assignment Groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any SG ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_delete_assignment_async_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: The Id integer of the application.(Required). (required)
        :param ApplicationDeleteAssignmentModel application_delete_assignment_model: Application assignment to be deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'application_delete_assignment_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_delete_assignment_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `internal_apps_v1_delete_assignment_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application_delete_assignment_model' in params:
            body_params = params['application_delete_assignment_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationId}/assignments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_delete_internal_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Deletes the specified internal application.  # noqa: E501

        Deletes the Selected internal application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_delete_internal_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the internal app to be deleted. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_delete_internal_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_delete_internal_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_delete_internal_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Deletes the specified internal application.  # noqa: E501

        Deletes the Selected internal application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_delete_internal_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the internal app to be deleted. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_delete_internal_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `internal_apps_v1_delete_internal_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_delete_windows_app_dependency(self, windows_app_dependency_id, **kwargs):  # noqa: E501
        """New - Deletes the windows dependency application specified by id.  # noqa: E501

        Deletes windows dependency application specified by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_delete_windows_app_dependency(windows_app_dependency_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int windows_app_dependency_id: The Id integer of the dependency to be deleted. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_delete_windows_app_dependency_with_http_info(windows_app_dependency_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_delete_windows_app_dependency_with_http_info(windows_app_dependency_id, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_delete_windows_app_dependency_with_http_info(self, windows_app_dependency_id, **kwargs):  # noqa: E501
        """New - Deletes the windows dependency application specified by id.  # noqa: E501

        Deletes windows dependency application specified by id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_delete_windows_app_dependency_with_http_info(windows_app_dependency_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int windows_app_dependency_id: The Id integer of the dependency to be deleted. (Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['windows_app_dependency_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_delete_windows_app_dependency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'windows_app_dependency_id' is set
        if self.api_client.client_side_validation and ('windows_app_dependency_id' not in params or
                                                       params['windows_app_dependency_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `windows_app_dependency_id` when calling `internal_apps_v1_delete_windows_app_dependency`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'windows_app_dependency_id' in params:
            path_params['windowsAppDependencyId'] = params['windows_app_dependency_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/windowsappdependency/{windowsAppDependencyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_edit_assignments_with_flexible_deployment_parameters_async(self, application_id, **kwargs):  # noqa: E501
        """Edits assignments along with the flexible deployment parameters associated with an internal application.  # noqa: E501

        1. Updates the assignments for internal application.  2. Excluded Assignment Groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any SG ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_edit_assignments_with_flexible_deployment_parameters_async(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Internal Application Id. (required)
        :param ApplicationAssignmentsModel_ application_assignments: Application Assignments Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_edit_assignments_with_flexible_deployment_parameters_async_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_edit_assignments_with_flexible_deployment_parameters_async_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_edit_assignments_with_flexible_deployment_parameters_async_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """Edits assignments along with the flexible deployment parameters associated with an internal application.  # noqa: E501

        1. Updates the assignments for internal application.  2. Excluded Assignment Groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any SG ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_edit_assignments_with_flexible_deployment_parameters_async_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Internal Application Id. (required)
        :param ApplicationAssignmentsModel_ application_assignments: Application Assignments Model.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'application_assignments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_edit_assignments_with_flexible_deployment_parameters_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `internal_apps_v1_edit_assignments_with_flexible_deployment_parameters_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application_assignments' in params:
            body_params = params['application_assignments']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationId}/assignments', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_get_application_summary(self, bundleid, apporganizationgroupuuid, devicetype, **kwargs):  # noqa: E501
        """New - Gets the summary of the internal application uniquely identified by the bundle id, organization group uuid, and device type.  # noqa: E501

        This endpoint provides the basic details of an internal application at the application bundle identifier level.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_application_summary(bundleid, apporganizationgroupuuid, devicetype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The bundle identifier of the application(Required) (required)
        :param object apporganizationgroupuuid: Uuid of the Organization Group from where the app is uploaded(Required) (required)
        :param object devicetype: The platform of the application, the possible values are [ AppleTv, Apple, Android, WindowsPhone8, AppleOsX, WinRT ](Required) (required)
        :param object organizationgroupuuid: Uuid of the Organization Group from where the app is accessed
        :return: ApplicationSummaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_get_application_summary_with_http_info(bundleid, apporganizationgroupuuid, devicetype, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_get_application_summary_with_http_info(bundleid, apporganizationgroupuuid, devicetype, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_get_application_summary_with_http_info(self, bundleid, apporganizationgroupuuid, devicetype, **kwargs):  # noqa: E501
        """New - Gets the summary of the internal application uniquely identified by the bundle id, organization group uuid, and device type.  # noqa: E501

        This endpoint provides the basic details of an internal application at the application bundle identifier level.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_application_summary_with_http_info(bundleid, apporganizationgroupuuid, devicetype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The bundle identifier of the application(Required) (required)
        :param object apporganizationgroupuuid: Uuid of the Organization Group from where the app is uploaded(Required) (required)
        :param object devicetype: The platform of the application, the possible values are [ AppleTv, Apple, Android, WindowsPhone8, AppleOsX, WinRT ](Required) (required)
        :param object organizationgroupuuid: Uuid of the Organization Group from where the app is accessed
        :return: ApplicationSummaryModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundleid', 'apporganizationgroupuuid', 'devicetype', 'organizationgroupuuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_get_application_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundleid' is set
        if self.api_client.client_side_validation and ('bundleid' not in params or
                                                       params['bundleid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundleid` when calling `internal_apps_v1_get_application_summary`")  # noqa: E501
        # verify the required parameter 'apporganizationgroupuuid' is set
        if self.api_client.client_side_validation and ('apporganizationgroupuuid' not in params or
                                                       params['apporganizationgroupuuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `apporganizationgroupuuid` when calling `internal_apps_v1_get_application_summary`")  # noqa: E501
        # verify the required parameter 'devicetype' is set
        if self.api_client.client_side_validation and ('devicetype' not in params or
                                                       params['devicetype'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `devicetype` when calling `internal_apps_v1_get_application_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundleid' in params:
            query_params.append(('bundleid', params['bundleid']))  # noqa: E501
        if 'apporganizationgroupuuid' in params:
            query_params.append(('apporganizationgroupuuid', params['apporganizationgroupuuid']))  # noqa: E501
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'devicetype' in params:
            query_params.append(('devicetype', params['devicetype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplicationSummaryModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level(self, bundleid, devicetype, apporganizationgroupuuid, **kwargs):  # noqa: E501
        """New - Gets list of devices that have the specified internal application installed or assigned at the application level.  # noqa: E501

        This endpoint provides a list of devices that have the specified internal application installed or assigned at the application level. A list of all the assigned devices is returned by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level(bundleid, devicetype, apporganizationgroupuuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The bundle identifier of the application. E.g. com.airwatch.androidagent(Required) (required)
        :param object devicetype: The platform of the application, the possible values are [ AppleTv, Apple, Android, WindowsPhone8, AppleOsX, WinRT ](Required) (required)
        :param object apporganizationgroupuuid: The Organization Group id in which the app was created. E.g. EF331D65-C005-4388-8E52-B1390AA171D9(Required) (required)
        :param int page: Page number which will be fetched, 0 based index. Default 0.
        :param int pagesize: Maximum number of results to be returned in one page. Default 500.
        :param str searchtext: If provided, the records matching this text will be returned. The search will be applied on the following properties [name, installed_version, assigned_version]. The default value will be empty string.
        :param str sortorder: Whether the sort order is ascending or descending. The property used for sorting is name. Possible values [Asc, Desc]. Default value is Asc.
        :param str orderby: Name of the column used for sorting
        :param object organizationgroupuuid: The Organization Group identifier where the list of devices need to be fetched. If not set it will be defaulted to admin location group identifier.
        :param object smartgroupuuids: Comma separated list of smart group ids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. C961E60C-0283-4A43-AA1E-9A49369C0944, C961E60C-0283-4A43-AA1E-9A49369C0945
        :param bool isassigned: If provided, the list of devices on which the app is assigned is included in the returned result set. Default false.
        :param bool isnotassigned: If provided, the list of devices on which the app is sideloaded or marked for removal but not assigned is included in the returned result set. Default false.
        :param bool isexcluded: If provided, the list of devices on which the app is excluded is included in the returned result set. Default false.
        :param bool isinstalledversionequaltoassigned: if provided, the list of devices where the installed version of the internal app is the same as the assigned version is returned. Default false.
        :param bool isinstalledversionnotequaltoassigned: if provided, the list of devices where the installed version of the internal app is not the same as the assigned version is returned. Default false.
        :param bool isversionnotinstalled: if provided, the list of devices on which the internal app is assigned but not installed is returned. Default false.
        :param object installationstatus: Comma separated list of managed application list reasons to which the devices assigned to the app belong. If no reason is passed, all the assigned devices will be returned based on the other filters.
        :param object lastactiontaken: Comma separated list of application deployment status to which the devices assigned to the app belong. If no deployment status is passed, all the assigned devices will be returned based on the other filters.
        :param object peerdistributionstatus: Comma separated list of peer distribution status to which the devices assigned to the app belong. If no peer distribution status is passed, all the assigned devices will be returned based on the other filters.
        :return: DevicesPagedSearchResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level_with_http_info(bundleid, devicetype, apporganizationgroupuuid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level_with_http_info(bundleid, devicetype, apporganizationgroupuuid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level_with_http_info(self, bundleid, devicetype, apporganizationgroupuuid, **kwargs):  # noqa: E501
        """New - Gets list of devices that have the specified internal application installed or assigned at the application level.  # noqa: E501

        This endpoint provides a list of devices that have the specified internal application installed or assigned at the application level. A list of all the assigned devices is returned by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level_with_http_info(bundleid, devicetype, apporganizationgroupuuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The bundle identifier of the application. E.g. com.airwatch.androidagent(Required) (required)
        :param object devicetype: The platform of the application, the possible values are [ AppleTv, Apple, Android, WindowsPhone8, AppleOsX, WinRT ](Required) (required)
        :param object apporganizationgroupuuid: The Organization Group id in which the app was created. E.g. EF331D65-C005-4388-8E52-B1390AA171D9(Required) (required)
        :param int page: Page number which will be fetched, 0 based index. Default 0.
        :param int pagesize: Maximum number of results to be returned in one page. Default 500.
        :param str searchtext: If provided, the records matching this text will be returned. The search will be applied on the following properties [name, installed_version, assigned_version]. The default value will be empty string.
        :param str sortorder: Whether the sort order is ascending or descending. The property used for sorting is name. Possible values [Asc, Desc]. Default value is Asc.
        :param str orderby: Name of the column used for sorting
        :param object organizationgroupuuid: The Organization Group identifier where the list of devices need to be fetched. If not set it will be defaulted to admin location group identifier.
        :param object smartgroupuuids: Comma separated list of smart group ids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. C961E60C-0283-4A43-AA1E-9A49369C0944, C961E60C-0283-4A43-AA1E-9A49369C0945
        :param bool isassigned: If provided, the list of devices on which the app is assigned is included in the returned result set. Default false.
        :param bool isnotassigned: If provided, the list of devices on which the app is sideloaded or marked for removal but not assigned is included in the returned result set. Default false.
        :param bool isexcluded: If provided, the list of devices on which the app is excluded is included in the returned result set. Default false.
        :param bool isinstalledversionequaltoassigned: if provided, the list of devices where the installed version of the internal app is the same as the assigned version is returned. Default false.
        :param bool isinstalledversionnotequaltoassigned: if provided, the list of devices where the installed version of the internal app is not the same as the assigned version is returned. Default false.
        :param bool isversionnotinstalled: if provided, the list of devices on which the internal app is assigned but not installed is returned. Default false.
        :param object installationstatus: Comma separated list of managed application list reasons to which the devices assigned to the app belong. If no reason is passed, all the assigned devices will be returned based on the other filters.
        :param object lastactiontaken: Comma separated list of application deployment status to which the devices assigned to the app belong. If no deployment status is passed, all the assigned devices will be returned based on the other filters.
        :param object peerdistributionstatus: Comma separated list of peer distribution status to which the devices assigned to the app belong. If no peer distribution status is passed, all the assigned devices will be returned based on the other filters.
        :return: DevicesPagedSearchResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundleid', 'devicetype', 'apporganizationgroupuuid', 'page', 'pagesize', 'searchtext', 'sortorder', 'orderby', 'organizationgroupuuid', 'smartgroupuuids', 'isassigned', 'isnotassigned', 'isexcluded', 'isinstalledversionequaltoassigned', 'isinstalledversionnotequaltoassigned', 'isversionnotinstalled', 'installationstatus', 'lastactiontaken', 'peerdistributionstatus']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundleid' is set
        if self.api_client.client_side_validation and ('bundleid' not in params or
                                                       params['bundleid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundleid` when calling `internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level`")  # noqa: E501
        # verify the required parameter 'devicetype' is set
        if self.api_client.client_side_validation and ('devicetype' not in params or
                                                       params['devicetype'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `devicetype` when calling `internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level`")  # noqa: E501
        # verify the required parameter 'apporganizationgroupuuid' is set
        if self.api_client.client_side_validation and ('apporganizationgroupuuid' not in params or
                                                       params['apporganizationgroupuuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `apporganizationgroupuuid` when calling `internal_apps_v1_get_devices_assigned_or_installed_for_app_at_app_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundleid' in params:
            query_params.append(('bundleid', params['bundleid']))  # noqa: E501
        if 'devicetype' in params:
            query_params.append(('devicetype', params['devicetype']))  # noqa: E501
        if 'apporganizationgroupuuid' in params:
            query_params.append(('apporganizationgroupuuid', params['apporganizationgroupuuid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'searchtext' in params:
            query_params.append(('searchtext', params['searchtext']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'smartgroupuuids' in params:
            query_params.append(('smartgroupuuids', params['smartgroupuuids']))  # noqa: E501
        if 'isassigned' in params:
            query_params.append(('isassigned', params['isassigned']))  # noqa: E501
        if 'isnotassigned' in params:
            query_params.append(('isnotassigned', params['isnotassigned']))  # noqa: E501
        if 'isexcluded' in params:
            query_params.append(('isexcluded', params['isexcluded']))  # noqa: E501
        if 'isinstalledversionequaltoassigned' in params:
            query_params.append(('isinstalledversionequaltoassigned', params['isinstalledversionequaltoassigned']))  # noqa: E501
        if 'isinstalledversionnotequaltoassigned' in params:
            query_params.append(('isinstalledversionnotequaltoassigned', params['isinstalledversionnotequaltoassigned']))  # noqa: E501
        if 'isversionnotinstalled' in params:
            query_params.append(('isversionnotinstalled', params['isversionnotinstalled']))  # noqa: E501
        if 'installationstatus' in params:
            query_params.append(('installationstatus', params['installationstatus']))  # noqa: E501
        if 'lastactiontaken' in params:
            query_params.append(('lastactiontaken', params['lastactiontaken']))  # noqa: E501
        if 'peerdistributionstatus' in params:
            query_params.append(('peerdistributionstatus', params['peerdistributionstatus']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DevicesPagedSearchResultsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_get_internal_app_by_id_async(self, application_id, **kwargs):  # noqa: E501
        """New - Details of an internal app identified by id.  # noqa: E501

         1. Gets the details of an internal app identified by id.  2. Excluded assignment groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any smart group ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_by_id_async(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Internal application id(Required). (required)
        :return: InternalAppModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_get_internal_app_by_id_async_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_get_internal_app_by_id_async_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_get_internal_app_by_id_async_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """New - Details of an internal app identified by id.  # noqa: E501

         1. Gets the details of an internal app identified by id.  2. Excluded assignment groups are only available for viewing in the GET call.     Option to edit them is not currently available through POST/PUT APIs.  3. DELETE API however deletes any smart group ID associated with an application, assigned or excluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_by_id_async_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Internal application id(Required). (required)
        :return: InternalAppModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_get_internal_app_by_id_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `internal_apps_v1_get_internal_app_by_id_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InternalAppModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_get_internal_app_install_counts(self, bundleid, apporganizationgroupuuid, devicetype, **kwargs):  # noqa: E501
        """New - Gets the installation counts for an internal app across versions  # noqa: E501

         Will return the following information for each version of the internal application in the provided organization group  1. Total assigned count  2. Total installed count  3. Total side loaded count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_install_counts(bundleid, apporganizationgroupuuid, devicetype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The bundle identifier of the application(Required) (required)
        :param object apporganizationgroupuuid: The organization group identifer where application has been uploaded.(Required) (required)
        :param object devicetype: The platform of the application, the possible values are [ AppleTv, Apple, Android, WindowsPhone8, AppleOsX, WinRT ](Required) (required)
        :param object organizationgroupuuid: The organization group identifier where the counts need to be fetched. If not set it will be defaulted to admin location group identifier.
        :param object smartgroupuuids: Comma separated list of smart group ids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. C961E60C-0283-4A43-AA1E-9A49369C0944, C961E60C-0283-4A43-AA1E-9A49369C0945
        :return: InternalAppCountModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_get_internal_app_install_counts_with_http_info(bundleid, apporganizationgroupuuid, devicetype, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_get_internal_app_install_counts_with_http_info(bundleid, apporganizationgroupuuid, devicetype, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_get_internal_app_install_counts_with_http_info(self, bundleid, apporganizationgroupuuid, devicetype, **kwargs):  # noqa: E501
        """New - Gets the installation counts for an internal app across versions  # noqa: E501

         Will return the following information for each version of the internal application in the provided organization group  1. Total assigned count  2. Total installed count  3. Total side loaded count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_install_counts_with_http_info(bundleid, apporganizationgroupuuid, devicetype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The bundle identifier of the application(Required) (required)
        :param object apporganizationgroupuuid: The organization group identifer where application has been uploaded.(Required) (required)
        :param object devicetype: The platform of the application, the possible values are [ AppleTv, Apple, Android, WindowsPhone8, AppleOsX, WinRT ](Required) (required)
        :param object organizationgroupuuid: The organization group identifier where the counts need to be fetched. If not set it will be defaulted to admin location group identifier.
        :param object smartgroupuuids: Comma separated list of smart group ids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. C961E60C-0283-4A43-AA1E-9A49369C0944, C961E60C-0283-4A43-AA1E-9A49369C0945
        :return: InternalAppCountModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundleid', 'apporganizationgroupuuid', 'devicetype', 'organizationgroupuuid', 'smartgroupuuids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_get_internal_app_install_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundleid' is set
        if self.api_client.client_side_validation and ('bundleid' not in params or
                                                       params['bundleid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundleid` when calling `internal_apps_v1_get_internal_app_install_counts`")  # noqa: E501
        # verify the required parameter 'apporganizationgroupuuid' is set
        if self.api_client.client_side_validation and ('apporganizationgroupuuid' not in params or
                                                       params['apporganizationgroupuuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `apporganizationgroupuuid` when calling `internal_apps_v1_get_internal_app_install_counts`")  # noqa: E501
        # verify the required parameter 'devicetype' is set
        if self.api_client.client_side_validation and ('devicetype' not in params or
                                                       params['devicetype'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `devicetype` when calling `internal_apps_v1_get_internal_app_install_counts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundleid' in params:
            query_params.append(('bundleid', params['bundleid']))  # noqa: E501
        if 'apporganizationgroupuuid' in params:
            query_params.append(('apporganizationgroupuuid', params['apporganizationgroupuuid']))  # noqa: E501
        if 'devicetype' in params:
            query_params.append(('devicetype', params['devicetype']))  # noqa: E501
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'smartgroupuuids' in params:
            query_params.append(('smartgroupuuids', params['smartgroupuuids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/installcounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InternalAppCountModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_get_internal_app_installed_or_assigned_devices(self, applicationid, **kwargs):  # noqa: E501
        """Gets list of devices that have the specified internal application installed or assigned.  # noqa: E501

        Provides a list of devices that have the specified internal application installed or assigned. Provides a list of assigned devices by default when the status is not specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_installed_or_assigned_devices(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the application.(Required). (required)
        :param str status: Status of the given application on the device - installed/assigned.
        :param str locationgroupid: The Id integer of the LocationGroup, for example - 7.
        :param str page: Specific page number to get. 0 based index.
        :param str pagesize: Maximumm records per page. Default 500.
        :return: DeviceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_get_internal_app_installed_or_assigned_devices_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_get_internal_app_installed_or_assigned_devices_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_get_internal_app_installed_or_assigned_devices_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Gets list of devices that have the specified internal application installed or assigned.  # noqa: E501

        Provides a list of devices that have the specified internal application installed or assigned. Provides a list of assigned devices by default when the status is not specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_installed_or_assigned_devices_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the application.(Required). (required)
        :param str status: Status of the given application on the device - installed/assigned.
        :param str locationgroupid: The Id integer of the LocationGroup, for example - 7.
        :param str page: Specific page number to get. 0 based index.
        :param str pagesize: Maximumm records per page. Default 500.
        :return: DeviceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'status', 'locationgroupid', 'page', 'pagesize']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_get_internal_app_installed_or_assigned_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `internal_apps_v1_get_internal_app_installed_or_assigned_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'locationgroupid' in params:
            query_params.append(('locationgroupid', params['locationgroupid']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_get_internal_app_reason_breakdown_counts(self, bundleid, apporganizationgroupuuid, devicetype, **kwargs):  # noqa: E501
        """New - Gets the device count for the application reasons  # noqa: E501

        Will return the device count per application reason for all the versions of the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_reason_breakdown_counts(bundleid, apporganizationgroupuuid, devicetype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The bundle identifier of the application(Required) (required)
        :param object apporganizationgroupuuid: The Organization Group identifier where application has been uploaded.(Required) (required)
        :param object devicetype: The platform of the application, the possible values are [ AppleTv, Apple, Android, WindowsPhone8, AppleOsX, WinRT ](Required) (required)
        :param object organizationgroupuuid: The Organization Group identifier where the counts need to be fetched. If not set it will be defaulted to admin location group identifier.
        :param object smartgroupuuids: Comma separated list of smart group ids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. C961E60C-0283-4A43-AA1E-9A49369C0944, C961E60C-0283-4A43-AA1E-9A49369C0944
        :return: AppReasonBreakDownModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_get_internal_app_reason_breakdown_counts_with_http_info(bundleid, apporganizationgroupuuid, devicetype, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_get_internal_app_reason_breakdown_counts_with_http_info(bundleid, apporganizationgroupuuid, devicetype, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_get_internal_app_reason_breakdown_counts_with_http_info(self, bundleid, apporganizationgroupuuid, devicetype, **kwargs):  # noqa: E501
        """New - Gets the device count for the application reasons  # noqa: E501

        Will return the device count per application reason for all the versions of the app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_reason_breakdown_counts_with_http_info(bundleid, apporganizationgroupuuid, devicetype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundleid: The bundle identifier of the application(Required) (required)
        :param object apporganizationgroupuuid: The Organization Group identifier where application has been uploaded.(Required) (required)
        :param object devicetype: The platform of the application, the possible values are [ AppleTv, Apple, Android, WindowsPhone8, AppleOsX, WinRT ](Required) (required)
        :param object organizationgroupuuid: The Organization Group identifier where the counts need to be fetched. If not set it will be defaulted to admin location group identifier.
        :param object smartgroupuuids: Comma separated list of smart group ids to which the devices belong. If no smart group id is passed, all the eligible devices will be returned based on the other filters. E.g. C961E60C-0283-4A43-AA1E-9A49369C0944, C961E60C-0283-4A43-AA1E-9A49369C0944
        :return: AppReasonBreakDownModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundleid', 'apporganizationgroupuuid', 'devicetype', 'organizationgroupuuid', 'smartgroupuuids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_get_internal_app_reason_breakdown_counts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundleid' is set
        if self.api_client.client_side_validation and ('bundleid' not in params or
                                                       params['bundleid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundleid` when calling `internal_apps_v1_get_internal_app_reason_breakdown_counts`")  # noqa: E501
        # verify the required parameter 'apporganizationgroupuuid' is set
        if self.api_client.client_side_validation and ('apporganizationgroupuuid' not in params or
                                                       params['apporganizationgroupuuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `apporganizationgroupuuid` when calling `internal_apps_v1_get_internal_app_reason_breakdown_counts`")  # noqa: E501
        # verify the required parameter 'devicetype' is set
        if self.api_client.client_side_validation and ('devicetype' not in params or
                                                       params['devicetype'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `devicetype` when calling `internal_apps_v1_get_internal_app_reason_breakdown_counts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundleid' in params:
            query_params.append(('bundleid', params['bundleid']))  # noqa: E501
        if 'apporganizationgroupuuid' in params:
            query_params.append(('apporganizationgroupuuid', params['apporganizationgroupuuid']))  # noqa: E501
        if 'devicetype' in params:
            query_params.append(('devicetype', params['devicetype']))  # noqa: E501
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501
        if 'smartgroupuuids' in params:
            query_params.append(('smartgroupuuids', params['smartgroupuuids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/reasonbreakdowncounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppReasonBreakDownModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_get_internal_app_status_async(self, applicationid, **kwargs):  # noqa: E501
        """Status of the specified internal application on a device.  # noqa: E501

        Indicates the status of the specified internal application on a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_status_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The integer id of the application.(Required). (required)
        :param str deviceid: Device Identifier, for example - 0dfe4a6f25647b8297c15b6a995fa985.
        :param str macaddress: Device MAC address, for example - 0x848506B900BA.
        :param str serialnumber: Device SerialNumber, for example - LGH871c18f631a.
        :param str udid: Device UDID, for example - 6bf0f04c73681fbecfc3eb4f13cbf05b.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_get_internal_app_status_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_get_internal_app_status_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_get_internal_app_status_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Status of the specified internal application on a device.  # noqa: E501

        Indicates the status of the specified internal application on a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_internal_app_status_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The integer id of the application.(Required). (required)
        :param str deviceid: Device Identifier, for example - 0dfe4a6f25647b8297c15b6a995fa985.
        :param str macaddress: Device MAC address, for example - 0x848506B900BA.
        :param str serialnumber: Device SerialNumber, for example - LGH871c18f631a.
        :param str udid: Device UDID, for example - 6bf0f04c73681fbecfc3eb4f13cbf05b.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'deviceid', 'macaddress', 'serialnumber', 'udid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_get_internal_app_status_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `internal_apps_v1_get_internal_app_status_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []
        if 'deviceid' in params:
            query_params.append(('deviceid', params['deviceid']))  # noqa: E501
        if 'macaddress' in params:
            query_params.append(('macaddress', params['macaddress']))  # noqa: E501
        if 'serialnumber' in params:
            query_params.append(('serialnumber', params['serialnumber']))  # noqa: E501
        if 'udid' in params:
            query_params.append(('udid', params['udid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_get_windows_app_dependancies_by_location_group_id(self, organization_group_id, **kwargs):  # noqa: E501
        """Gets the list of saved windows app dependency files for current OG and child OGs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_windows_app_dependancies_by_location_group_id(organization_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: Organization Group Id. (required)
        :return: list[WindowsAppDependencyModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_get_windows_app_dependancies_by_location_group_id_with_http_info(organization_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_get_windows_app_dependancies_by_location_group_id_with_http_info(organization_group_id, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_get_windows_app_dependancies_by_location_group_id_with_http_info(self, organization_group_id, **kwargs):  # noqa: E501
        """Gets the list of saved windows app dependency files for current OG and child OGs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_windows_app_dependancies_by_location_group_id_with_http_info(organization_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_group_id: Organization Group Id. (required)
        :return: list[WindowsAppDependencyModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_get_windows_app_dependancies_by_location_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_group_id' is set
        if self.api_client.client_side_validation and ('organization_group_id' not in params or
                                                       params['organization_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_group_id` when calling `internal_apps_v1_get_windows_app_dependancies_by_location_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_group_id' in params:
            path_params['organizationGroupId'] = params['organization_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/windowsappdependencies/{organizationGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WindowsAppDependencyModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_get_windows_app_dependency_by_id(self, windows_app_dependency_id, **kwargs):  # noqa: E501
        """Gets the details of an windows app dependency identified by id.  # noqa: E501

        Loads Dependency Application Details and deployment options set in an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_windows_app_dependency_by_id(windows_app_dependency_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int windows_app_dependency_id: Windows app dependency id. (required)
        :return: WindowsAppDependencyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_get_windows_app_dependency_by_id_with_http_info(windows_app_dependency_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_get_windows_app_dependency_by_id_with_http_info(windows_app_dependency_id, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_get_windows_app_dependency_by_id_with_http_info(self, windows_app_dependency_id, **kwargs):  # noqa: E501
        """Gets the details of an windows app dependency identified by id.  # noqa: E501

        Loads Dependency Application Details and deployment options set in an application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_get_windows_app_dependency_by_id_with_http_info(windows_app_dependency_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int windows_app_dependency_id: Windows app dependency id. (required)
        :return: WindowsAppDependencyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['windows_app_dependency_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_get_windows_app_dependency_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'windows_app_dependency_id' is set
        if self.api_client.client_side_validation and ('windows_app_dependency_id' not in params or
                                                       params['windows_app_dependency_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `windows_app_dependency_id` when calling `internal_apps_v1_get_windows_app_dependency_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'windows_app_dependency_id' in params:
            path_params['windowsAppDependencyId'] = params['windows_app_dependency_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/windowsappdependency/{windowsAppDependencyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WindowsAppDependencyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_insert_internal_application_chunk(self, **kwargs):  # noqa: E501
        """Uploads the chunk data.  # noqa: E501

        Uploads the chunk data of an internal application into the server. A chunk of the application will contain the size of the chunk, sequence number, and the byte data.  The transaction ID should be null during the initial call to the API and the subsequent calls to the API should be made using the transaction ID from the response of the previous call  For uploading an application above 2 Gigabyte in size, File Storage needs to be configured.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_insert_internal_application_chunk(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InternalAppChunk internal_app_chunk: The internal app chunk.
        :return: AppChunkTranscationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_insert_internal_application_chunk_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_insert_internal_application_chunk_with_http_info(**kwargs)  # noqa: E501
            return data

    def internal_apps_v1_insert_internal_application_chunk_with_http_info(self, **kwargs):  # noqa: E501
        """Uploads the chunk data.  # noqa: E501

        Uploads the chunk data of an internal application into the server. A chunk of the application will contain the size of the chunk, sequence number, and the byte data.  The transaction ID should be null during the initial call to the API and the subsequent calls to the API should be made using the transaction ID from the response of the previous call  For uploading an application above 2 Gigabyte in size, File Storage needs to be configured.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_insert_internal_application_chunk_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InternalAppChunk internal_app_chunk: The internal app chunk.
        :return: AppChunkTranscationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['internal_app_chunk']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_insert_internal_application_chunk" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'internal_app_chunk' in params:
            body_params = params['internal_app_chunk']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/uploadchunk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppChunkTranscationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_install_internal_app_on_device_async(self, applicationid, **kwargs):  # noqa: E501
        """Installs the specified internal application on a device.  # noqa: E501

        Installs the specified Internal application on a particular device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_install_internal_app_on_device_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applicationid: The Id of the Application to be installed. (required)
        :param DeviceInfo device_info: The details of the device to install the application on.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_install_internal_app_on_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_install_internal_app_on_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_install_internal_app_on_device_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Installs the specified internal application on a device.  # noqa: E501

        Installs the specified Internal application on a particular device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_install_internal_app_on_device_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applicationid: The Id of the Application to be installed. (required)
        :param DeviceInfo device_info: The details of the device to install the application on.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'device_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_install_internal_app_on_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `internal_apps_v1_install_internal_app_on_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_info' in params:
            body_params = params['device_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/install', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_remove_internal_app_from_device_async(self, applicationid, **kwargs):  # noqa: E501
        """Uninstalls the specified internal application from a device.  # noqa: E501

        Uninstalls the internal application specified by given id from a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_remove_internal_app_from_device_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id.(Required). (required)
        :param DeviceInfo device_info: Device Information.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_remove_internal_app_from_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_remove_internal_app_from_device_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_remove_internal_app_from_device_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Uninstalls the specified internal application from a device.  # noqa: E501

        Uninstalls the internal application specified by given id from a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_remove_internal_app_from_device_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The application Id.(Required). (required)
        :param DeviceInfo device_info: Device Information.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'device_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_remove_internal_app_from_device_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `internal_apps_v1_remove_internal_app_from_device_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_info' in params:
            body_params = params['device_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/uninstall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_retire_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Retires the specified Internal application.  # noqa: E501

        Retires the Internal application identified by the application ID. Only the current version of the app would be retired and be removed from devices. If a lower version is assigned, it will be deployed to the devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_retire_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the application.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_retire_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_retire_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_retire_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Retires the specified Internal application.  # noqa: E501

        Retires the Internal application identified by the application ID. Only the current version of the app would be retired and be removed from devices. If a lower version is assigned, it will be deployed to the devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_retire_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the application.(Required). (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_retire_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `internal_apps_v1_retire_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/retire', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_retrieve_app_versions_async(self, bundle_id, device_type, **kwargs):  # noqa: E501
        """New - Retrieves the versions of this app assigned at this Organization Group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_retrieve_app_versions_async(bundle_id, device_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle_id: Bundle Identifier of application that corresponds with the App ID.(Required) (required)
        :param int device_type: Device platform(Required) (required)
        :param object organizationgroupuuid: The Organization Group identifier in which the counts need to be fetched. Will be defaulted to admin Organization Group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :return: list[ApplicationVersionV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_retrieve_app_versions_async_with_http_info(bundle_id, device_type, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_retrieve_app_versions_async_with_http_info(bundle_id, device_type, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_retrieve_app_versions_async_with_http_info(self, bundle_id, device_type, **kwargs):  # noqa: E501
        """New - Retrieves the versions of this app assigned at this Organization Group.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_retrieve_app_versions_async_with_http_info(bundle_id, device_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle_id: Bundle Identifier of application that corresponds with the App ID.(Required) (required)
        :param int device_type: Device platform(Required) (required)
        :param object organizationgroupuuid: The Organization Group identifier in which the counts need to be fetched. Will be defaulted to admin Organization Group identifier if not set. E.g. EF331D65-C005-4388-8E52-B1390AA171D9
        :return: list[ApplicationVersionV1Model]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'device_type', 'organizationgroupuuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_retrieve_app_versions_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if self.api_client.client_side_validation and ('bundle_id' not in params or
                                                       params['bundle_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle_id` when calling `internal_apps_v1_retrieve_app_versions_async`")  # noqa: E501
        # verify the required parameter 'device_type' is set
        if self.api_client.client_side_validation and ('device_type' not in params or
                                                       params['device_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_type` when calling `internal_apps_v1_retrieve_app_versions_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']  # noqa: E501
        if 'device_type' in params:
            path_params['deviceType'] = params['device_type']  # noqa: E501

        query_params = []
        if 'organizationgroupuuid' in params:
            query_params.append(('organizationgroupuuid', params['organizationgroupuuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{bundleId}/{deviceType}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApplicationVersionV1Model]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_un_retire_app_async(self, applicationid, **kwargs):  # noqa: E501
        """Unretires the specified internal application.  # noqa: E501

        Unretires the internal application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_un_retire_app_async(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the application.(Required). (required)
        :param str retirepreviousversion: Whether to retire previous versions of the application - Yes/No.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_un_retire_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_un_retire_app_async_with_http_info(applicationid, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_un_retire_app_async_with_http_info(self, applicationid, **kwargs):  # noqa: E501
        """Unretires the specified internal application.  # noqa: E501

        Unretires the internal application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_un_retire_app_async_with_http_info(applicationid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int applicationid: The Id integer of the application.(Required). (required)
        :param str retirepreviousversion: Whether to retire previous versions of the application - Yes/No.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applicationid', 'retirepreviousversion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_un_retire_app_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'applicationid' is set
        if self.api_client.client_side_validation and ('applicationid' not in params or
                                                       params['applicationid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `applicationid` when calling `internal_apps_v1_un_retire_app_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationid' in params:
            path_params['applicationid'] = params['applicationid']  # noqa: E501

        query_params = []
        if 'retirepreviousversion' in params:
            query_params.append(('retirepreviousversion', params['retirepreviousversion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationid}/unretire', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def internal_apps_v1_update_internal_app(self, application_id, **kwargs):  # noqa: E501
        """Updates the internal application.  # noqa: E501

        Updates the internal application identified by applicationid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_update_internal_app(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Application Id to be updated. (required)
        :param ApplicationEntity_ application_entity: The application details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.internal_apps_v1_update_internal_app_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.internal_apps_v1_update_internal_app_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def internal_apps_v1_update_internal_app_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """Updates the internal application.  # noqa: E501

        Updates the internal application identified by applicationid.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.internal_apps_v1_update_internal_app_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int application_id: Application Id to be updated. (required)
        :param ApplicationEntity_ application_entity: The application details.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'application_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method internal_apps_v1_update_internal_app" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `internal_apps_v1_update_internal_app`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['applicationId'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application_entity' in params:
            body_params = params['application_entity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=1', 'application/xml;version=1'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apps/internal/{applicationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
