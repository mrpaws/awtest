# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AndroidForWorkZebraMxPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wifi': 'AndroidForWorkOemWifiPayloadV2Enity_',
        'restrictions': 'AndroidForWorkOemRestrictionsPayloadV2Entity_',
        'date_time': 'AndroidForWorkOemDateTimePayloadV2Entity_',
        'sound': 'AndroidForWorkOemSoundPayloadV2Entity_',
        'display': 'AndroidForWorkOemDisplayPayloadV2Entity_'
    }

    attribute_map = {
        'wifi': 'Wifi',
        'restrictions': 'Restrictions',
        'date_time': 'DateTime',
        'sound': 'Sound',
        'display': 'Display'
    }

    def __init__(self, wifi=None, restrictions=None, date_time=None, sound=None, display=None, _configuration=None):  # noqa: E501
        """AndroidForWorkZebraMxPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._wifi = None
        self._restrictions = None
        self._date_time = None
        self._sound = None
        self._display = None
        self.discriminator = None

        if wifi is not None:
            self.wifi = wifi
        if restrictions is not None:
            self.restrictions = restrictions
        if date_time is not None:
            self.date_time = date_time
        if sound is not None:
            self.sound = sound
        if display is not None:
            self.display = display

    @property
    def wifi(self):
        """Gets the wifi of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501

        Gets or sets the AndroidForWorkOemWifiPayloadV2Enity.  # noqa: E501

        :return: The wifi of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :rtype: AndroidForWorkOemWifiPayloadV2Enity_
        """
        return self._wifi

    @wifi.setter
    def wifi(self, wifi):
        """Sets the wifi of this AndroidForWorkZebraMxPayloadV2Entity.

        Gets or sets the AndroidForWorkOemWifiPayloadV2Enity.  # noqa: E501

        :param wifi: The wifi of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :type: AndroidForWorkOemWifiPayloadV2Enity_
        """

        self._wifi = wifi

    @property
    def restrictions(self):
        """Gets the restrictions of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501

        Gets or sets the AndroidForWorkOemRestrictionsPayloadV2Entity.  # noqa: E501

        :return: The restrictions of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :rtype: AndroidForWorkOemRestrictionsPayloadV2Entity_
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this AndroidForWorkZebraMxPayloadV2Entity.

        Gets or sets the AndroidForWorkOemRestrictionsPayloadV2Entity.  # noqa: E501

        :param restrictions: The restrictions of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :type: AndroidForWorkOemRestrictionsPayloadV2Entity_
        """

        self._restrictions = restrictions

    @property
    def date_time(self):
        """Gets the date_time of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501

        Gets or sets the AndroidForWorkOemDateTimePayloadV2Entity.  # noqa: E501

        :return: The date_time of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :rtype: AndroidForWorkOemDateTimePayloadV2Entity_
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this AndroidForWorkZebraMxPayloadV2Entity.

        Gets or sets the AndroidForWorkOemDateTimePayloadV2Entity.  # noqa: E501

        :param date_time: The date_time of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :type: AndroidForWorkOemDateTimePayloadV2Entity_
        """

        self._date_time = date_time

    @property
    def sound(self):
        """Gets the sound of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501

        Gets or sets the AndroidForWorkOemSoundPayloadV2Entity.  # noqa: E501

        :return: The sound of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :rtype: AndroidForWorkOemSoundPayloadV2Entity_
        """
        return self._sound

    @sound.setter
    def sound(self, sound):
        """Sets the sound of this AndroidForWorkZebraMxPayloadV2Entity.

        Gets or sets the AndroidForWorkOemSoundPayloadV2Entity.  # noqa: E501

        :param sound: The sound of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :type: AndroidForWorkOemSoundPayloadV2Entity_
        """

        self._sound = sound

    @property
    def display(self):
        """Gets the display of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501

        Gets or sets the AndroidForWorkOemDisplayPayloadV2Entity.  # noqa: E501

        :return: The display of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :rtype: AndroidForWorkOemDisplayPayloadV2Entity_
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this AndroidForWorkZebraMxPayloadV2Entity.

        Gets or sets the AndroidForWorkOemDisplayPayloadV2Entity.  # noqa: E501

        :param display: The display of this AndroidForWorkZebraMxPayloadV2Entity.  # noqa: E501
        :type: AndroidForWorkOemDisplayPayloadV2Entity_
        """

        self._display = display

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AndroidForWorkZebraMxPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AndroidForWorkZebraMxPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AndroidForWorkZebraMxPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
