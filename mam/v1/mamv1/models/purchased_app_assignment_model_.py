# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class PurchasedAppAssignmentModel_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'smart_group_id': 'int',
        'users': 'int',
        'allocated': 'int'
    }

    attribute_map = {
        'status': 'Status',
        'smart_group_id': 'SmartGroupId',
        'users': 'Users',
        'allocated': 'Allocated'
    }

    def __init__(self, status=None, smart_group_id=None, users=None, allocated=None, _configuration=None):  # noqa: E501
        """PurchasedAppAssignmentModel_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._smart_group_id = None
        self._users = None
        self._allocated = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if smart_group_id is not None:
            self.smart_group_id = smart_group_id
        if users is not None:
            self.users = users
        if allocated is not None:
            self.allocated = allocated

    @property
    def status(self):
        """Gets the status of this PurchasedAppAssignmentModel_.  # noqa: E501

        Gets or sets purchased Application Assignment Status [Active/Inactive].  # noqa: E501

        :return: The status of this PurchasedAppAssignmentModel_.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PurchasedAppAssignmentModel_.

        Gets or sets purchased Application Assignment Status [Active/Inactive].  # noqa: E501

        :param status: The status of this PurchasedAppAssignmentModel_.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def smart_group_id(self):
        """Gets the smart_group_id of this PurchasedAppAssignmentModel_.  # noqa: E501

        Gets or sets smartGroupId to which current Purchased Application is assigned [License Based].  # noqa: E501

        :return: The smart_group_id of this PurchasedAppAssignmentModel_.  # noqa: E501
        :rtype: int
        """
        return self._smart_group_id

    @smart_group_id.setter
    def smart_group_id(self, smart_group_id):
        """Sets the smart_group_id of this PurchasedAppAssignmentModel_.

        Gets or sets smartGroupId to which current Purchased Application is assigned [License Based].  # noqa: E501

        :param smart_group_id: The smart_group_id of this PurchasedAppAssignmentModel_.  # noqa: E501
        :type: int
        """

        self._smart_group_id = smart_group_id

    @property
    def users(self):
        """Gets the users of this PurchasedAppAssignmentModel_.  # noqa: E501

        Gets or sets number of Users to which current Purchased Application is assigned.  # noqa: E501

        :return: The users of this PurchasedAppAssignmentModel_.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this PurchasedAppAssignmentModel_.

        Gets or sets number of Users to which current Purchased Application is assigned.  # noqa: E501

        :param users: The users of this PurchasedAppAssignmentModel_.  # noqa: E501
        :type: int
        """

        self._users = users

    @property
    def allocated(self):
        """Gets the allocated of this PurchasedAppAssignmentModel_.  # noqa: E501

        Gets or sets allocated number of Licenses.  # noqa: E501

        :return: The allocated of this PurchasedAppAssignmentModel_.  # noqa: E501
        :rtype: int
        """
        return self._allocated

    @allocated.setter
    def allocated(self, allocated):
        """Sets the allocated of this PurchasedAppAssignmentModel_.

        Gets or sets allocated number of Licenses.  # noqa: E501

        :param allocated: The allocated of this PurchasedAppAssignmentModel_.  # noqa: E501
        :type: int
        """

        self._allocated = allocated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchasedAppAssignmentModel_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchasedAppAssignmentModel_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PurchasedAppAssignmentModel_):
            return True

        return self.to_dict() != other.to_dict()
