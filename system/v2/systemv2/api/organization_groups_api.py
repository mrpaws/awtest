# coding: utf-8

"""
    System API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from systemv2.api_client import ApiClient


class OrganizationGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def organization_groups_organization_group_search_async(self, **kwargs):  # noqa: E501
        """Searches for organization groups using the query information provided.  # noqa: E501

        Search organization by the given parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_organization_group_search_async(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The OrganizationGroup name, such as \"Global\".
        :param str type: The OrganizationGroup type. (eg. \"Container\",\"Customer\",\"Partner\").
        :param str groupid: The organization group identifier[Activation code] to search for.[Exact match is performed for this attribute].
        :param str orderby: Orders the results based on this attribute-value[Valid values are: Id/Name/GroupId/LocationGroupType].
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified.
        :return: OrganizationGroupPagedSearchResultModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_organization_group_search_async_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_organization_group_search_async_with_http_info(**kwargs)  # noqa: E501
            return data

    def organization_groups_organization_group_search_async_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for organization groups using the query information provided.  # noqa: E501

        Search organization by the given parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_organization_group_search_async_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The OrganizationGroup name, such as \"Global\".
        :param str type: The OrganizationGroup type. (eg. \"Container\",\"Customer\",\"Partner\").
        :param str groupid: The organization group identifier[Activation code] to search for.[Exact match is performed for this attribute].
        :param str orderby: Orders the results based on this attribute-value[Valid values are: Id/Name/GroupId/LocationGroupType].
        :param int page: Specific page number to get. 0 based index.
        :param int pagesize: Maximum records per page. Default 500.
        :param str sortorder: Sorting order. Allowed values are ASC or DESC. Defaults to ASC if this attribute is not specified.
        :return: OrganizationGroupPagedSearchResultModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'groupid', 'orderby', 'page', 'pagesize', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_organization_group_search_async" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'groupid' in params:
            query_params.append(('groupid', params['groupid']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'pagesize' in params:
            query_params.append(('pagesize', params['pagesize']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationGroupPagedSearchResultModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organization_groups_post_async(self, id, **kwargs):  # noqa: E501
        """Creates a new organization group.  # noqa: E501

        Create a new organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_post_async(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parent OrganizationGroup Identifier. (required)
        :param OrganizationGroup_ location_group: The OrganizationGroup resource to be created.
        :return: OrganizationGroupResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organization_groups_post_async_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.organization_groups_post_async_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def organization_groups_post_async_with_http_info(self, id, **kwargs):  # noqa: E501
        """Creates a new organization group.  # noqa: E501

        Create a new organization group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organization_groups_post_async_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The parent OrganizationGroup Identifier. (required)
        :param OrganizationGroup_ location_group: The OrganizationGroup resource to be created.
        :return: OrganizationGroupResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'location_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organization_groups_post_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `organization_groups_post_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'location_group' in params:
            body_params = params['location_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;version=2', 'application/xml;version=2'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth', 'CmsAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationGroupResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
