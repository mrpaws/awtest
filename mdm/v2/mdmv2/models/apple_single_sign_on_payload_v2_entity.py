# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class AppleSingleSignOnPayloadV2Entity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'principal_name': 'str',
        'realm': 'str',
        'renewal_certificate_name': 'str',
        'url_prefix_matches': 'str',
        'app_identifier_matches': 'str',
        'name': 'str'
    }

    attribute_map = {
        'principal_name': 'PrincipalName',
        'realm': 'Realm',
        'renewal_certificate_name': 'RenewalCertificateName',
        'url_prefix_matches': 'URLPrefixMatches',
        'app_identifier_matches': 'AppIdentifierMatches',
        'name': 'Name'
    }

    def __init__(self, principal_name=None, realm=None, renewal_certificate_name=None, url_prefix_matches=None, app_identifier_matches=None, name=None, _configuration=None):  # noqa: E501
        """AppleSingleSignOnPayloadV2Entity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._principal_name = None
        self._realm = None
        self._renewal_certificate_name = None
        self._url_prefix_matches = None
        self._app_identifier_matches = None
        self._name = None
        self.discriminator = None

        if principal_name is not None:
            self.principal_name = principal_name
        if realm is not None:
            self.realm = realm
        if renewal_certificate_name is not None:
            self.renewal_certificate_name = renewal_certificate_name
        if url_prefix_matches is not None:
            self.url_prefix_matches = url_prefix_matches
        if app_identifier_matches is not None:
            self.app_identifier_matches = app_identifier_matches
        if name is not None:
            self.name = name

    @property
    def principal_name(self):
        """Gets the principal_name of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501

        Gets or sets kerberos principal name.  # noqa: E501

        :return: The principal_name of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._principal_name

    @principal_name.setter
    def principal_name(self, principal_name):
        """Sets the principal_name of this AppleSingleSignOnPayloadV2Entity.

        Gets or sets kerberos principal name.  # noqa: E501

        :param principal_name: The principal_name of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._principal_name = principal_name

    @property
    def realm(self):
        """Gets the realm of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501

        Gets or sets kerberos realm name. This value should be properly capitalized.  # noqa: E501

        :return: The realm of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this AppleSingleSignOnPayloadV2Entity.

        Gets or sets kerberos realm name. This value should be properly capitalized.  # noqa: E501

        :param realm: The realm of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._realm = realm

    @property
    def renewal_certificate_name(self):
        """Gets the renewal_certificate_name of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501

        Gets or sets renewal certificate name.  # noqa: E501

        :return: The renewal_certificate_name of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._renewal_certificate_name

    @renewal_certificate_name.setter
    def renewal_certificate_name(self, renewal_certificate_name):
        """Sets the renewal_certificate_name of this AppleSingleSignOnPayloadV2Entity.

        Gets or sets renewal certificate name.  # noqa: E501

        :param renewal_certificate_name: The renewal_certificate_name of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._renewal_certificate_name = renewal_certificate_name

    @property
    def url_prefix_matches(self):
        """Gets the url_prefix_matches of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501

        Gets or sets comma separated URLs prefixes that must be matched to use this account for Kerberos authentication over HTTP.  # noqa: E501

        :return: The url_prefix_matches of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._url_prefix_matches

    @url_prefix_matches.setter
    def url_prefix_matches(self, url_prefix_matches):
        """Sets the url_prefix_matches of this AppleSingleSignOnPayloadV2Entity.

        Gets or sets comma separated URLs prefixes that must be matched to use this account for Kerberos authentication over HTTP.  # noqa: E501

        :param url_prefix_matches: The url_prefix_matches of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._url_prefix_matches = url_prefix_matches

    @property
    def app_identifier_matches(self):
        """Gets the app_identifier_matches of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501

        Gets or sets comma separated app identifiers that are allowed to use this SSO login. If this field is missing then SSO login works for all appidentifiers.  # noqa: E501

        :return: The app_identifier_matches of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._app_identifier_matches

    @app_identifier_matches.setter
    def app_identifier_matches(self, app_identifier_matches):
        """Sets the app_identifier_matches of this AppleSingleSignOnPayloadV2Entity.

        Gets or sets comma separated app identifiers that are allowed to use this SSO login. If this field is missing then SSO login works for all appidentifiers.  # noqa: E501

        :param app_identifier_matches: The app_identifier_matches of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._app_identifier_matches = app_identifier_matches

    @property
    def name(self):
        """Gets the name of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501

        Gets or sets single sign on account name.  # noqa: E501

        :return: The name of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppleSingleSignOnPayloadV2Entity.

        Gets or sets single sign on account name.  # noqa: E501

        :param name: The name of this AppleSingleSignOnPayloadV2Entity.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppleSingleSignOnPayloadV2Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppleSingleSignOnPayloadV2Entity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppleSingleSignOnPayloadV2Entity):
            return True

        return self.to_dict() != other.to_dict()
