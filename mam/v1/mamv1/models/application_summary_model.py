# coding: utf-8

"""
    MAM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mamv1.configuration import Configuration


class ApplicationSummaryModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'bundle_identifier': 'str',
        'managed_by': 'str',
        'icon_uri': 'str'
    }

    attribute_map = {
        'name': 'name',
        'bundle_identifier': 'bundle_identifier',
        'managed_by': 'managed_by',
        'icon_uri': 'icon_uri'
    }

    def __init__(self, name=None, bundle_identifier=None, managed_by=None, icon_uri=None, _configuration=None):  # noqa: E501
        """ApplicationSummaryModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._bundle_identifier = None
        self._managed_by = None
        self._icon_uri = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if bundle_identifier is not None:
            self.bundle_identifier = bundle_identifier
        if managed_by is not None:
            self.managed_by = managed_by
        if icon_uri is not None:
            self.icon_uri = icon_uri

    @property
    def name(self):
        """Gets the name of this ApplicationSummaryModel.  # noqa: E501

        Name of the application  # noqa: E501

        :return: The name of this ApplicationSummaryModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationSummaryModel.

        Name of the application  # noqa: E501

        :param name: The name of this ApplicationSummaryModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def bundle_identifier(self):
        """Gets the bundle_identifier of this ApplicationSummaryModel.  # noqa: E501

        Bundle identifier group of the application  # noqa: E501

        :return: The bundle_identifier of this ApplicationSummaryModel.  # noqa: E501
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """Sets the bundle_identifier of this ApplicationSummaryModel.

        Bundle identifier group of the application  # noqa: E501

        :param bundle_identifier: The bundle_identifier of this ApplicationSummaryModel.  # noqa: E501
        :type: str
        """

        self._bundle_identifier = bundle_identifier

    @property
    def managed_by(self):
        """Gets the managed_by of this ApplicationSummaryModel.  # noqa: E501

        Organization Group of the application  # noqa: E501

        :return: The managed_by of this ApplicationSummaryModel.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this ApplicationSummaryModel.

        Organization Group of the application  # noqa: E501

        :param managed_by: The managed_by of this ApplicationSummaryModel.  # noqa: E501
        :type: str
        """

        self._managed_by = managed_by

    @property
    def icon_uri(self):
        """Gets the icon_uri of this ApplicationSummaryModel.  # noqa: E501

        URI of the application's icon image  # noqa: E501

        :return: The icon_uri of this ApplicationSummaryModel.  # noqa: E501
        :rtype: str
        """
        return self._icon_uri

    @icon_uri.setter
    def icon_uri(self, icon_uri):
        """Sets the icon_uri of this ApplicationSummaryModel.

        URI of the application's icon image  # noqa: E501

        :param icon_uri: The icon_uri of this ApplicationSummaryModel.  # noqa: E501
        :type: str
        """

        self._icon_uri = icon_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationSummaryModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationSummaryModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationSummaryModel):
            return True

        return self.to_dict() != other.to_dict()
