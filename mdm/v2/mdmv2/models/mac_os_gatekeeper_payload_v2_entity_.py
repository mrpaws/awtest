# coding: utf-8

"""
    MDM API V2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv2.configuration import Configuration


class MacOsGatekeeperPayloadV2Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_software_update_delay': 'bool',
        'enable_app_software_update_delay': 'bool',
        'enforced_software_update_delay': 'int',
        'allow_auto_unlock': 'bool',
        'allow_fingerprint_for_unlock': 'bool',
        'allow_screen_capture': 'bool',
        'allow_handoff': 'bool'
    }

    attribute_map = {
        'enable_software_update_delay': 'EnableSoftwareUpdateDelay',
        'enable_app_software_update_delay': 'EnableAppSoftwareUpdateDelay',
        'enforced_software_update_delay': 'EnforcedSoftwareUpdateDelay',
        'allow_auto_unlock': 'AllowAutoUnlock',
        'allow_fingerprint_for_unlock': 'AllowFingerprintForUnlock',
        'allow_screen_capture': 'AllowScreenCapture',
        'allow_handoff': 'AllowHandoff'
    }

    def __init__(self, enable_software_update_delay=None, enable_app_software_update_delay=None, enforced_software_update_delay=None, allow_auto_unlock=None, allow_fingerprint_for_unlock=None, allow_screen_capture=None, allow_handoff=None, _configuration=None):  # noqa: E501
        """MacOsGatekeeperPayloadV2Entity_ - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enable_software_update_delay = None
        self._enable_app_software_update_delay = None
        self._enforced_software_update_delay = None
        self._allow_auto_unlock = None
        self._allow_fingerprint_for_unlock = None
        self._allow_screen_capture = None
        self._allow_handoff = None
        self.discriminator = None

        if enable_software_update_delay is not None:
            self.enable_software_update_delay = enable_software_update_delay
        if enable_app_software_update_delay is not None:
            self.enable_app_software_update_delay = enable_app_software_update_delay
        if enforced_software_update_delay is not None:
            self.enforced_software_update_delay = enforced_software_update_delay
        if allow_auto_unlock is not None:
            self.allow_auto_unlock = allow_auto_unlock
        if allow_fingerprint_for_unlock is not None:
            self.allow_fingerprint_for_unlock = allow_fingerprint_for_unlock
        if allow_screen_capture is not None:
            self.allow_screen_capture = allow_screen_capture
        if allow_handoff is not None:
            self.allow_handoff = allow_handoff

    @property
    def enable_software_update_delay(self):
        """Gets the enable_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether whether enable the os software update delay.  # noqa: E501

        :return: The enable_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_software_update_delay

    @enable_software_update_delay.setter
    def enable_software_update_delay(self, enable_software_update_delay):
        """Sets the enable_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.

        Gets or sets a value indicating whether whether enable the os software update delay.  # noqa: E501

        :param enable_software_update_delay: The enable_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_software_update_delay = enable_software_update_delay

    @property
    def enable_app_software_update_delay(self):
        """Gets the enable_app_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether whether enable the os software update delay.  # noqa: E501

        :return: The enable_app_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._enable_app_software_update_delay

    @enable_app_software_update_delay.setter
    def enable_app_software_update_delay(self, enable_app_software_update_delay):
        """Sets the enable_app_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.

        Gets or sets a value indicating whether whether enable the os software update delay.  # noqa: E501

        :param enable_app_software_update_delay: The enable_app_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._enable_app_software_update_delay = enable_app_software_update_delay

    @property
    def enforced_software_update_delay(self):
        """Gets the enforced_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501

        Gets or sets this restriction allows the admin to set how many days a software update on the device will be delayed.  # noqa: E501

        :return: The enforced_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :rtype: int
        """
        return self._enforced_software_update_delay

    @enforced_software_update_delay.setter
    def enforced_software_update_delay(self, enforced_software_update_delay):
        """Sets the enforced_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.

        Gets or sets this restriction allows the admin to set how many days a software update on the device will be delayed.  # noqa: E501

        :param enforced_software_update_delay: The enforced_software_update_delay of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :type: int
        """

        self._enforced_software_update_delay = enforced_software_update_delay

    @property
    def allow_auto_unlock(self):
        """Gets the allow_auto_unlock of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if set to false, disallows macOS auto unlock with Apple Watch. Defaults to true.  # noqa: E501

        :return: The allow_auto_unlock of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_auto_unlock

    @allow_auto_unlock.setter
    def allow_auto_unlock(self, allow_auto_unlock):
        """Sets the allow_auto_unlock of this MacOsGatekeeperPayloadV2Entity_.

        Gets or sets a value indicating whether if set to false, disallows macOS auto unlock with Apple Watch. Defaults to true.  # noqa: E501

        :param allow_auto_unlock: The allow_auto_unlock of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_auto_unlock = allow_auto_unlock

    @property
    def allow_fingerprint_for_unlock(self):
        """Gets the allow_fingerprint_for_unlock of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether optional field. If false, prevents Touch ID from unlocking a device.  # noqa: E501

        :return: The allow_fingerprint_for_unlock of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_fingerprint_for_unlock

    @allow_fingerprint_for_unlock.setter
    def allow_fingerprint_for_unlock(self, allow_fingerprint_for_unlock):
        """Sets the allow_fingerprint_for_unlock of this MacOsGatekeeperPayloadV2Entity_.

        Gets or sets a value indicating whether optional field. If false, prevents Touch ID from unlocking a device.  # noqa: E501

        :param allow_fingerprint_for_unlock: The allow_fingerprint_for_unlock of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_fingerprint_for_unlock = allow_fingerprint_for_unlock

    @property
    def allow_screen_capture(self):
        """Gets the allow_screen_capture of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, users can't save a screenshot of the display and are prevented from capturing a screen recording; it also prevents the Classroom app from observing remote screens.  # noqa: E501

        :return: The allow_screen_capture of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_screen_capture

    @allow_screen_capture.setter
    def allow_screen_capture(self, allow_screen_capture):
        """Sets the allow_screen_capture of this MacOsGatekeeperPayloadV2Entity_.

        Gets or sets a value indicating whether if false, users can't save a screenshot of the display and are prevented from capturing a screen recording; it also prevents the Classroom app from observing remote screens.  # noqa: E501

        :param allow_screen_capture: The allow_screen_capture of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_screen_capture = allow_screen_capture

    @property
    def allow_handoff(self):
        """Gets the allow_handoff of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501

        Gets or sets a value indicating whether if false, disables activity continuation features in macOS.  # noqa: E501

        :return: The allow_handoff of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :rtype: bool
        """
        return self._allow_handoff

    @allow_handoff.setter
    def allow_handoff(self, allow_handoff):
        """Sets the allow_handoff of this MacOsGatekeeperPayloadV2Entity_.

        Gets or sets a value indicating whether if false, disables activity continuation features in macOS.  # noqa: E501

        :param allow_handoff: The allow_handoff of this MacOsGatekeeperPayloadV2Entity_.  # noqa: E501
        :type: bool
        """

        self._allow_handoff = allow_handoff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MacOsGatekeeperPayloadV2Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MacOsGatekeeperPayloadV2Entity_):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MacOsGatekeeperPayloadV2Entity_):
            return True

        return self.to_dict() != other.to_dict()
