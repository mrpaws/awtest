# coding: utf-8

"""
    MDM API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv3.configuration import Configuration


class DeviceWipeCommandV3Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wipe_pin': 'int',
        'obliteration_behavior': 'int'
    }

    attribute_map = {
        'wipe_pin': 'wipe_pin',
        'obliteration_behavior': 'obliteration_behavior'
    }

    def __init__(self, wipe_pin=None, obliteration_behavior=None, _configuration=None):  # noqa: E501
        """DeviceWipeCommandV3Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._wipe_pin = None
        self._obliteration_behavior = None
        self.discriminator = None

        if wipe_pin is not None:
            self.wipe_pin = wipe_pin
        if obliteration_behavior is not None:
            self.obliteration_behavior = obliteration_behavior

    @property
    def wipe_pin(self):
        """Gets the wipe_pin of this DeviceWipeCommandV3Model.  # noqa: E501

        The six-character PIN code required for DeviceWipe command.  # noqa: E501

        :return: The wipe_pin of this DeviceWipeCommandV3Model.  # noqa: E501
        :rtype: int
        """
        return self._wipe_pin

    @wipe_pin.setter
    def wipe_pin(self, wipe_pin):
        """Sets the wipe_pin of this DeviceWipeCommandV3Model.

        The six-character PIN code required for DeviceWipe command.  # noqa: E501

        :param wipe_pin: The wipe_pin of this DeviceWipeCommandV3Model.  # noqa: E501
        :type: int
        """

        self._wipe_pin = wipe_pin

    @property
    def obliteration_behavior(self):
        """Gets the obliteration_behavior of this DeviceWipeCommandV3Model.  # noqa: E501

        Defines the fallback behavior for erasing a macOS device.  # noqa: E501

        :return: The obliteration_behavior of this DeviceWipeCommandV3Model.  # noqa: E501
        :rtype: int
        """
        return self._obliteration_behavior

    @obliteration_behavior.setter
    def obliteration_behavior(self, obliteration_behavior):
        """Sets the obliteration_behavior of this DeviceWipeCommandV3Model.

        Defines the fallback behavior for erasing a macOS device.  # noqa: E501

        :param obliteration_behavior: The obliteration_behavior of this DeviceWipeCommandV3Model.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                obliteration_behavior not in allowed_values):
            raise ValueError(
                "Invalid value for `obliteration_behavior` ({0}), must be one of {1}"  # noqa: E501
                .format(obliteration_behavior, allowed_values)
            )

        self._obliteration_behavior = obliteration_behavior

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceWipeCommandV3Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceWipeCommandV3Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceWipeCommandV3Model):
            return True

        return self.to_dict() != other.to_dict()
