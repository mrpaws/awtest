# coding: utf-8

"""
    System API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from systemv1.configuration import Configuration


class AdvancedLadpSyncJobRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_group_uuid': 'str',
        'refresh': 'int',
        'use_external_id': 'bool',
        'enrollment_user_uuids': 'list[str]'
    }

    attribute_map = {
        'organization_group_uuid': 'organization_group_uuid',
        'refresh': 'refresh',
        'use_external_id': 'use_external_id',
        'enrollment_user_uuids': 'enrollment_user_uuids'
    }

    def __init__(self, organization_group_uuid=None, refresh=None, use_external_id=None, enrollment_user_uuids=None, _configuration=None):  # noqa: E501
        """AdvancedLadpSyncJobRequestModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._organization_group_uuid = None
        self._refresh = None
        self._use_external_id = None
        self._enrollment_user_uuids = None
        self.discriminator = None

        self.organization_group_uuid = organization_group_uuid
        if refresh is not None:
            self.refresh = refresh
        if use_external_id is not None:
            self.use_external_id = use_external_id
        if enrollment_user_uuids is not None:
            self.enrollment_user_uuids = enrollment_user_uuids

    @property
    def organization_group_uuid(self):
        """Gets the organization_group_uuid of this AdvancedLadpSyncJobRequestModel.  # noqa: E501

        UUID of the organization group for which the advanced ldap sync job to be created.  # noqa: E501

        :return: The organization_group_uuid of this AdvancedLadpSyncJobRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._organization_group_uuid

    @organization_group_uuid.setter
    def organization_group_uuid(self, organization_group_uuid):
        """Sets the organization_group_uuid of this AdvancedLadpSyncJobRequestModel.

        UUID of the organization group for which the advanced ldap sync job to be created.  # noqa: E501

        :param organization_group_uuid: The organization_group_uuid of this AdvancedLadpSyncJobRequestModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and organization_group_uuid is None:
            raise ValueError("Invalid value for `organization_group_uuid`, must not be `None`")  # noqa: E501

        self._organization_group_uuid = organization_group_uuid

    @property
    def refresh(self):
        """Gets the refresh of this AdvancedLadpSyncJobRequestModel.  # noqa: E501

        Specifies the refresh type paramter value.  # noqa: E501

        :return: The refresh of this AdvancedLadpSyncJobRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """Sets the refresh of this AdvancedLadpSyncJobRequestModel.

        Specifies the refresh type paramter value.  # noqa: E501

        :param refresh: The refresh of this AdvancedLadpSyncJobRequestModel.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if (self._configuration.client_side_validation and
                refresh not in allowed_values):
            raise ValueError(
                "Invalid value for `refresh` ({0}), must be one of {1}"  # noqa: E501
                .format(refresh, allowed_values)
            )

        self._refresh = refresh

    @property
    def use_external_id(self):
        """Gets the use_external_id of this AdvancedLadpSyncJobRequestModel.  # noqa: E501

        Indicates whether to use the external id of the user to perform the advanced sync job operation.  # noqa: E501

        :return: The use_external_id of this AdvancedLadpSyncJobRequestModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_external_id

    @use_external_id.setter
    def use_external_id(self, use_external_id):
        """Sets the use_external_id of this AdvancedLadpSyncJobRequestModel.

        Indicates whether to use the external id of the user to perform the advanced sync job operation.  # noqa: E501

        :param use_external_id: The use_external_id of this AdvancedLadpSyncJobRequestModel.  # noqa: E501
        :type: bool
        """

        self._use_external_id = use_external_id

    @property
    def enrollment_user_uuids(self):
        """Gets the enrollment_user_uuids of this AdvancedLadpSyncJobRequestModel.  # noqa: E501

        The list of the enrollment user uuids for which advanced ldap sync is to be performed..  # noqa: E501

        :return: The enrollment_user_uuids of this AdvancedLadpSyncJobRequestModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._enrollment_user_uuids

    @enrollment_user_uuids.setter
    def enrollment_user_uuids(self, enrollment_user_uuids):
        """Sets the enrollment_user_uuids of this AdvancedLadpSyncJobRequestModel.

        The list of the enrollment user uuids for which advanced ldap sync is to be performed..  # noqa: E501

        :param enrollment_user_uuids: The enrollment_user_uuids of this AdvancedLadpSyncJobRequestModel.  # noqa: E501
        :type: list[str]
        """

        self._enrollment_user_uuids = enrollment_user_uuids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvancedLadpSyncJobRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedLadpSyncJobRequestModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdvancedLadpSyncJobRequestModel):
            return True

        return self.to_dict() != other.to_dict()
