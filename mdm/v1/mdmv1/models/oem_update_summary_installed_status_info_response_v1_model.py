# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class OemUpdateSummaryInstalledStatusInfoResponseV1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'release_id': 'str',
        'version': 'str',
        'success_count': 'int',
        'failed_count': 'int'
    }

    attribute_map = {
        'release_id': 'release_id',
        'version': 'version',
        'success_count': 'success_count',
        'failed_count': 'failed_count'
    }

    def __init__(self, release_id=None, version=None, success_count=None, failed_count=None, _configuration=None):  # noqa: E501
        """OemUpdateSummaryInstalledStatusInfoResponseV1Model - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._release_id = None
        self._version = None
        self._success_count = None
        self._failed_count = None
        self.discriminator = None

        if release_id is not None:
            self.release_id = release_id
        if version is not None:
            self.version = version
        if success_count is not None:
            self.success_count = success_count
        if failed_count is not None:
            self.failed_count = failed_count

    @property
    def release_id(self):
        """Gets the release_id of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501

        Release identifier of the OEM update.  # noqa: E501

        :return: The release_id of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.

        Release identifier of the OEM update.  # noqa: E501

        :param release_id: The release_id of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501
        :type: str
        """

        self._release_id = release_id

    @property
    def version(self):
        """Gets the version of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501

        Version of the software update received from the device.  # noqa: E501

        :return: The version of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.

        Version of the software update received from the device.  # noqa: E501

        :param version: The version of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def success_count(self):
        """Gets the success_count of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501

        Number of devices the OEM Update installed successfully.  # noqa: E501

        :return: The success_count of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.

        Number of devices the OEM Update installed successfully.  # noqa: E501

        :param success_count: The success_count of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501
        :type: int
        """

        self._success_count = success_count

    @property
    def failed_count(self):
        """Gets the failed_count of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501

        Number of devices the OEM Update install failed.  # noqa: E501

        :return: The failed_count of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.

        Number of devices the OEM Update install failed.  # noqa: E501

        :param failed_count: The failed_count of this OemUpdateSummaryInstalledStatusInfoResponseV1Model.  # noqa: E501
        :type: int
        """

        self._failed_count = failed_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OemUpdateSummaryInstalledStatusInfoResponseV1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OemUpdateSummaryInstalledStatusInfoResponseV1Model):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OemUpdateSummaryInstalledStatusInfoResponseV1Model):
            return True

        return self.to_dict() != other.to_dict()
