# coding: utf-8

"""
    MDM API V1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mdmv1.configuration import Configuration


class ScriptAssignmentResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_uuid': 'str',
        'name': 'str',
        'smart_group_count': 'int',
        'priority': 'int',
        'show_in_catalog': 'bool',
        'deployment_mode': 'int',
        'assigned_smart_groups': 'list[SmartGroupData]',
        'trigger_type': 'int',
        'event_triggers': 'list[str]',
        'schedule_trigger': 'int'
    }

    attribute_map = {
        'assignment_uuid': 'assignment_uuid',
        'name': 'name',
        'smart_group_count': 'smart_group_count',
        'priority': 'priority',
        'show_in_catalog': 'show_in_catalog',
        'deployment_mode': 'deployment_mode',
        'assigned_smart_groups': 'assigned_smart_groups',
        'trigger_type': 'trigger_type',
        'event_triggers': 'event_triggers',
        'schedule_trigger': 'schedule_trigger'
    }

    def __init__(self, assignment_uuid=None, name=None, smart_group_count=None, priority=None, show_in_catalog=None, deployment_mode=None, assigned_smart_groups=None, trigger_type=None, event_triggers=None, schedule_trigger=None, _configuration=None):  # noqa: E501
        """ScriptAssignmentResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assignment_uuid = None
        self._name = None
        self._smart_group_count = None
        self._priority = None
        self._show_in_catalog = None
        self._deployment_mode = None
        self._assigned_smart_groups = None
        self._trigger_type = None
        self._event_triggers = None
        self._schedule_trigger = None
        self.discriminator = None

        if assignment_uuid is not None:
            self.assignment_uuid = assignment_uuid
        if name is not None:
            self.name = name
        if smart_group_count is not None:
            self.smart_group_count = smart_group_count
        if priority is not None:
            self.priority = priority
        if show_in_catalog is not None:
            self.show_in_catalog = show_in_catalog
        if deployment_mode is not None:
            self.deployment_mode = deployment_mode
        if assigned_smart_groups is not None:
            self.assigned_smart_groups = assigned_smart_groups
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if event_triggers is not None:
            self.event_triggers = event_triggers
        if schedule_trigger is not None:
            self.schedule_trigger = schedule_trigger

    @property
    def assignment_uuid(self):
        """Gets the assignment_uuid of this ScriptAssignmentResource.  # noqa: E501


        :return: The assignment_uuid of this ScriptAssignmentResource.  # noqa: E501
        :rtype: str
        """
        return self._assignment_uuid

    @assignment_uuid.setter
    def assignment_uuid(self, assignment_uuid):
        """Sets the assignment_uuid of this ScriptAssignmentResource.


        :param assignment_uuid: The assignment_uuid of this ScriptAssignmentResource.  # noqa: E501
        :type: str
        """

        self._assignment_uuid = assignment_uuid

    @property
    def name(self):
        """Gets the name of this ScriptAssignmentResource.  # noqa: E501


        :return: The name of this ScriptAssignmentResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScriptAssignmentResource.


        :param name: The name of this ScriptAssignmentResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def smart_group_count(self):
        """Gets the smart_group_count of this ScriptAssignmentResource.  # noqa: E501


        :return: The smart_group_count of this ScriptAssignmentResource.  # noqa: E501
        :rtype: int
        """
        return self._smart_group_count

    @smart_group_count.setter
    def smart_group_count(self, smart_group_count):
        """Sets the smart_group_count of this ScriptAssignmentResource.


        :param smart_group_count: The smart_group_count of this ScriptAssignmentResource.  # noqa: E501
        :type: int
        """

        self._smart_group_count = smart_group_count

    @property
    def priority(self):
        """Gets the priority of this ScriptAssignmentResource.  # noqa: E501


        :return: The priority of this ScriptAssignmentResource.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ScriptAssignmentResource.


        :param priority: The priority of this ScriptAssignmentResource.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def show_in_catalog(self):
        """Gets the show_in_catalog of this ScriptAssignmentResource.  # noqa: E501


        :return: The show_in_catalog of this ScriptAssignmentResource.  # noqa: E501
        :rtype: bool
        """
        return self._show_in_catalog

    @show_in_catalog.setter
    def show_in_catalog(self, show_in_catalog):
        """Sets the show_in_catalog of this ScriptAssignmentResource.


        :param show_in_catalog: The show_in_catalog of this ScriptAssignmentResource.  # noqa: E501
        :type: bool
        """

        self._show_in_catalog = show_in_catalog

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this ScriptAssignmentResource.  # noqa: E501


        :return: The deployment_mode of this ScriptAssignmentResource.  # noqa: E501
        :rtype: int
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this ScriptAssignmentResource.


        :param deployment_mode: The deployment_mode of this ScriptAssignmentResource.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if (self._configuration.client_side_validation and
                deployment_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    @property
    def assigned_smart_groups(self):
        """Gets the assigned_smart_groups of this ScriptAssignmentResource.  # noqa: E501


        :return: The assigned_smart_groups of this ScriptAssignmentResource.  # noqa: E501
        :rtype: list[SmartGroupData]
        """
        return self._assigned_smart_groups

    @assigned_smart_groups.setter
    def assigned_smart_groups(self, assigned_smart_groups):
        """Sets the assigned_smart_groups of this ScriptAssignmentResource.


        :param assigned_smart_groups: The assigned_smart_groups of this ScriptAssignmentResource.  # noqa: E501
        :type: list[SmartGroupData]
        """

        self._assigned_smart_groups = assigned_smart_groups

    @property
    def trigger_type(self):
        """Gets the trigger_type of this ScriptAssignmentResource.  # noqa: E501


        :return: The trigger_type of this ScriptAssignmentResource.  # noqa: E501
        :rtype: int
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this ScriptAssignmentResource.


        :param trigger_type: The trigger_type of this ScriptAssignmentResource.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if (self._configuration.client_side_validation and
                trigger_type not in allowed_values):
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def event_triggers(self):
        """Gets the event_triggers of this ScriptAssignmentResource.  # noqa: E501


        :return: The event_triggers of this ScriptAssignmentResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_triggers

    @event_triggers.setter
    def event_triggers(self, event_triggers):
        """Sets the event_triggers of this ScriptAssignmentResource.


        :param event_triggers: The event_triggers of this ScriptAssignmentResource.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["UNKNOWN", "LOGIN", "LOGOUT", "STARTUP", "USER_SWITCH", "NETWORK_CHANGE", "RUN_ON_PUBLISH", "RUN_ON_ENROLLMENT", "RUN_IMMEDIATELY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(event_triggers).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `event_triggers` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(event_triggers) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._event_triggers = event_triggers

    @property
    def schedule_trigger(self):
        """Gets the schedule_trigger of this ScriptAssignmentResource.  # noqa: E501


        :return: The schedule_trigger of this ScriptAssignmentResource.  # noqa: E501
        :rtype: int
        """
        return self._schedule_trigger

    @schedule_trigger.setter
    def schedule_trigger(self, schedule_trigger):
        """Sets the schedule_trigger of this ScriptAssignmentResource.


        :param schedule_trigger: The schedule_trigger of this ScriptAssignmentResource.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 4, 6, 8, 12, 24]  # noqa: E501
        if (self._configuration.client_side_validation and
                schedule_trigger not in allowed_values):
            raise ValueError(
                "Invalid value for `schedule_trigger` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule_trigger, allowed_values)
            )

        self._schedule_trigger = schedule_trigger

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScriptAssignmentResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScriptAssignmentResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScriptAssignmentResource):
            return True

        return self.to_dict() != other.to_dict()
